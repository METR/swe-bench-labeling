{"instance_id": "pydata__xarray-7229", "score": "I", "diff": "diff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 00000000..c5d6827c\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,52 @@\n+import xarray as xr\n+import numpy as np\n+import pandas as pd\n+\n+# Create a synthetic dataset similar to air_temperature\n+time = pd.date_range(\"2013-01-01\", periods=10, freq=\"4h\")\n+lat = np.linspace(-90, 90, 25)\n+lon = np.linspace(-180, 180, 53)\n+\n+# Create the air temperature variable\n+air = xr.DataArray(\n+    np.random.rand(10, 25, 53) * 40 + 270,  # Random temperatures between 270-310K\n+    coords={\"time\": time, \"lat\": lat, \"lon\": lon},\n+    dims=[\"time\", \"lat\", \"lon\"],\n+    name=\"air\",\n+    attrs={\n+        'long_name': '4xDaily Air temperature at sigma level 995',\n+        'units': 'degK',\n+        'precision': 2,\n+        'GRIB_id': 11,\n+        'GRIB_name': 'TMP',\n+        'var_desc': 'Air temperature',\n+        'dataset': 'NMC Reanalysis',\n+        'level_desc': 'Surface',\n+        'statistic': 'Individual Obs',\n+        'parent_stat': 'Other',\n+        'actual_range': np.array([185.16, 322.1], dtype=np.float32)\n+    }\n+)\n+\n+# Set coordinate attributes\n+air.time.attrs = {'standard_name': 'time', 'long_name': 'Time'}\n+air.lat.attrs = {'standard_name': 'latitude', 'long_name': 'Latitude'}\n+air.lon.attrs = {'standard_name': 'longitude', 'long_name': 'Longitude'}\n+\n+# Create dataset\n+ds = xr.Dataset({\"air\": air})\n+\n+# Check the original time attributes\n+print(\"Original time attributes:\")\n+print(ds.time.attrs)\n+\n+# Apply where with keep_attrs=True\n+result = xr.where(True, ds.air, ds.air, keep_attrs=True)\n+\n+# Check the time attributes after where\n+print(\"\\nTime attributes after where with keep_attrs=True:\")\n+print(result.time.attrs)\n+\n+# Also check the air variable attributes\n+print(\"\\nAir variable attributes:\")\n+print(ds.air.attrs)\ndiff --git a/test_where_attrs_fix.py b/test_where_attrs_fix.py\nnew file mode 100644\nindex 00000000..08d685f2\n--- /dev/null\n+++ b/test_where_attrs_fix.py\n@@ -0,0 +1,55 @@\n+import xarray as xr\n+import numpy as np\n+import pandas as pd\n+\n+def test_where_keep_attrs_preserves_coord_attrs():\n+    \"\"\"Test that xr.where with keep_attrs=True preserves coordinate attributes.\"\"\"\n+    # Create a synthetic dataset similar to air_temperature\n+    time = pd.date_range(\"2013-01-01\", periods=10, freq=\"4h\")\n+    lat = np.linspace(-90, 90, 25)\n+    lon = np.linspace(-180, 180, 53)\n+    \n+    # Create the air temperature variable\n+    air = xr.DataArray(\n+        np.random.rand(10, 25, 53) * 40 + 270,  # Random temperatures between 270-310K\n+        coords={\"time\": time, \"lat\": lat, \"lon\": lon},\n+        dims=[\"time\", \"lat\", \"lon\"],\n+        name=\"air\",\n+        attrs={\n+            'long_name': '4xDaily Air temperature at sigma level 995',\n+            'units': 'degK',\n+            'precision': 2,\n+            'GRIB_id': 11,\n+            'GRIB_name': 'TMP',\n+            'var_desc': 'Air temperature',\n+            'dataset': 'NMC Reanalysis',\n+            'level_desc': 'Surface',\n+            'statistic': 'Individual Obs',\n+            'parent_stat': 'Other',\n+            'actual_range': np.array([185.16, 322.1], dtype=np.float32)\n+        }\n+    )\n+    \n+    # Set coordinate attributes\n+    air.time.attrs = {'standard_name': 'time', 'long_name': 'Time'}\n+    air.lat.attrs = {'standard_name': 'latitude', 'long_name': 'Latitude'}\n+    air.lon.attrs = {'standard_name': 'longitude', 'long_name': 'Longitude'}\n+    \n+    # Create dataset\n+    ds = xr.Dataset({\"air\": air})\n+    \n+    # Apply where with keep_attrs=True\n+    result = xr.where(True, ds.air, ds.air, keep_attrs=True)\n+    \n+    # Test that data variable attributes are preserved\n+    assert result.attrs == air.attrs\n+    \n+    # Test that coordinate attributes are preserved (this is the bug)\n+    assert result.time.attrs == {'standard_name': 'time', 'long_name': 'Time'}\n+    assert result.lat.attrs == {'standard_name': 'latitude', 'long_name': 'Latitude'}\n+    assert result.lon.attrs == {'standard_name': 'longitude', 'long_name': 'Longitude'}\n+    \n+    print(\"All tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_where_keep_attrs_preserves_coord_attrs()\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 3f7e8f74..fd9d00b9 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1860,7 +1860,26 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        # However, we need to preserve coordinate attributes from the original coordinates\n+        \n+        # Check if x has attributes (i.e., it's a DataArray or Dataset)\n+        x_attrs = getattr(x, \"attrs\", {})\n+        \n+        def keep_attrs_func(attrs, context):\n+            # If we don't have any x attributes (x is scalar), return empty dict\n+            if not x_attrs:\n+                return {}\n+                \n+            # If we have multiple attribute dictionaries, check if they all match\n+            # This indicates we're dealing with a coordinate that appears in multiple inputs\n+            if len(attrs) > 1 and all(a == attrs[0] for a in attrs[1:]):\n+                # All attrs are the same, so this is likely a coordinate\n+                # Return the original coordinate attrs\n+                return attrs[0]\n+            else:\n+                # This is likely the data variable, return x's attrs\n+                return x_attrs\n+        keep_attrs = keep_attrs_func\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n", "gold_standard_diff": "From e0f8eb17f02215f1c9a4c02cf9e313911bb71a06 Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Wed, 26 Oct 2022 17:33:29 -0400\nSubject: [PATCH 01/10] better tests, use modified attrs[1]\n\n---\n xarray/core/computation.py       |  2 +-\n xarray/tests/test_computation.py | 32 ++++++++++++++++++++++++++------\n 2 files changed, 27 insertions(+), 7 deletions(-)\n\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 6ec38453a4b..f300ab9ca72 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1860,7 +1860,7 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else {}\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\ndiff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex d93adf08474..d3ff6571a9f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1923,16 +1923,36 @@ def test_where() -> None:\n \n \n def test_where_attrs() -> None:\n-    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n-    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n-    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    cond = xr.DataArray([True, False], coords={\"x\": [0, 1]}, attrs={\"attr\": \"cond_da\"})\n+    cond[\"x\"].attrs = {\"attr\": \"cond_coord\"}\n+    x = xr.DataArray([1, 1], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    x[\"x\"].attrs = {\"attr\": \"x_coord\"}\n+    y = xr.DataArray([0, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"y_da\"})\n+    y[\"x\"].attrs = {\"attr\": \"y_coord\"}\n+\n+    # 3 DataArrays, takes attrs from x\n     actual = xr.where(cond, x, y, keep_attrs=True)\n-    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    expected = xr.DataArray([1, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"x\"].attrs = {\"attr\": \"x_coord\"}\n     assert_identical(expected, actual)\n \n-    # ensure keep_attrs can handle scalar values\n+    # x as a scalar, takes attrs from y\n+    actual = xr.where(cond, 0, y, keep_attrs=True)\n+    expected = xr.DataArray([0, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"y_da\"})\n+    expected[\"x\"].attrs = {\"attr\": \"y_coord\"}\n+    assert_identical(expected, actual)\n+\n+    # y as a scalar, takes attrs from x\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"x\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(expected, actual)\n+\n+    # x and y as a scalar, takes coord attrs only from cond\n     actual = xr.where(cond, 1, 0, keep_attrs=True)\n-    assert actual.attrs == {}\n+    expected = xr.DataArray([1, 0], coords={\"x\": [0, 1]})\n+    expected[\"x\"].attrs = {\"attr\": \"cond_coord\"}\n+    assert_identical(expected, actual)\n \n \n @pytest.mark.parametrize(\n\nFrom a7d2611841f6a5e19f4b48066a6e5a39ad01d428 Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Wed, 26 Oct 2022 17:45:45 -0400\nSubject: [PATCH 02/10] add whats new\n\n---\n doc/whats-new.rst | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 37ea949ab9d..5adeb2a6326 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -57,6 +57,8 @@ Bug fixes\n   now reopens the file from scratch for h5netcdf and scipy netCDF backends,\n   rather than reusing a cached version (:issue:`4240`, :issue:`4862`).\n   By `Stephan Hoyer <https://github.com/shoyer>`_.\n+- Fix handling of coordinate attributes in ``xarray.where``. (:issue:`7220`, :pull:`7229`)\n+  By `Sam Levang <https://github.com/slevang>`_.\n \n Documentation\n ~~~~~~~~~~~~~\n\nFrom b426425f539d13df510fe3755b0e8779ff34a2a1 Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Thu, 27 Oct 2022 09:16:15 -0400\nSubject: [PATCH 03/10] update keep_attrs docstring\n\n---\n xarray/core/computation.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex f300ab9ca72..f8d34b5930a 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1789,7 +1789,8 @@ def where(cond, x, y, keep_attrs=None):\n     y : scalar, array, Variable, DataArray or Dataset\n         values to choose from where `cond` is False\n     keep_attrs : bool or str or callable, optional\n-        How to treat attrs. If True, keep the attrs of `x`.\n+        How to treat attrs. If True, keep the attrs of `x`,\n+        unless `x` is a scalar, then keep the attrs of `y`.\n \n     Returns\n     -------\n\nFrom 5fc7e3168f7e401f4371c61d053e8c808f86027d Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Mon, 7 Nov 2022 20:34:37 -0500\nSubject: [PATCH 04/10] cast to DataArray\n\n---\n xarray/core/computation.py       | 14 ++++++++++----\n xarray/tests/test_computation.py | 10 ++++++++--\n 2 files changed, 18 insertions(+), 6 deletions(-)\n\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex f8d34b5930a..9347d202398 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -25,7 +25,7 @@\n import numpy as np\n \n from . import dtypes, duck_array_ops, utils\n-from .alignment import align, deep_align\n+from .alignment import align, broadcast, deep_align\n from .common import zeros_like\n from .duck_array_ops import datetime_to_numeric\n from .indexes import Index, filter_indexes_from_coords\n@@ -1789,8 +1789,7 @@ def where(cond, x, y, keep_attrs=None):\n     y : scalar, array, Variable, DataArray or Dataset\n         values to choose from where `cond` is False\n     keep_attrs : bool or str or callable, optional\n-        How to treat attrs. If True, keep the attrs of `x`,\n-        unless `x` is a scalar, then keep the attrs of `y`.\n+        How to treat attrs. If True, keep the attrs of `x`.\n \n     Returns\n     -------\n@@ -1856,12 +1855,19 @@ def where(cond, x, y, keep_attrs=None):\n     Dataset.where, DataArray.where :\n         equivalent methods\n     \"\"\"\n+    from .dataarray import DataArray\n+\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else {}\n+        keep_attrs = lambda attrs, context: attrs[1]\n+        # cast non-xarray objects to DataArray to get empty attrs\n+        cond, x, y = (v if hasattr(v, \"attrs\") else DataArray(v) for v in [cond, x, y])\n+        # explicitly broadcast to ensure we also get empty coord attrs\n+        # take coord attrs preferentially from x, then y, then cond\n+        x, y, cond = broadcast(x, y, cond)\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\ndiff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f19c6978979..aee2a4e4840 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1938,9 +1938,9 @@ def test_where_attrs() -> None:\n     expected[\"x\"].attrs = {\"attr\": \"x_coord\"}\n     assert_identical(expected, actual)\n \n-    # x as a scalar, takes attrs from y\n+    # x as a scalar, takes coord attrs only from y\n     actual = xr.where(cond, 0, y, keep_attrs=True)\n-    expected = xr.DataArray([0, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"y_da\"})\n+    expected = xr.DataArray([0, 0], coords={\"x\": [0, 1]})\n     expected[\"x\"].attrs = {\"attr\": \"y_coord\"}\n     assert_identical(expected, actual)\n \n@@ -1956,6 +1956,12 @@ def test_where_attrs() -> None:\n     expected[\"x\"].attrs = {\"attr\": \"cond_coord\"}\n     assert_identical(expected, actual)\n \n+    # cond and y as a scalar, takes attrs from x\n+    actual = xr.where(True, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 1], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"x\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\n     \"use_dask\", [pytest.param(False, id=\"nodask\"), pytest.param(True, id=\"dask\")]\n\nFrom 989e5c3c473273a04a93bb314f53c617f359846e Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Mon, 7 Nov 2022 20:36:19 -0500\nSubject: [PATCH 05/10] whats-new\n\n---\n doc/whats-new.rst | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 4682e1370b0..c620c9fa48a 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -34,7 +34,8 @@ Deprecations\n \n Bug fixes\n ~~~~~~~~~\n-\n+- Fix handling of coordinate attributes in ``xarray.where``. (:issue:`7220`, :pull:`7229`)\n+  By `Sam Levang <https://github.com/slevang>`_.\n \n Documentation\n ~~~~~~~~~~~~~\n\nFrom a6ba8ecd7aa76d83de3252b876aedf5b66c98d79 Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Wed, 9 Nov 2022 08:12:31 -0500\nSubject: [PATCH 06/10] fix whats new\n\n---\n doc/whats-new.rst | 2 --\n 1 file changed, 2 deletions(-)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex c620c9fa48a..b4621175014 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -97,8 +97,6 @@ Bug fixes\n   now reopens the file from scratch for h5netcdf and scipy netCDF backends,\n   rather than reusing a cached version (:issue:`4240`, :issue:`4862`).\n   By `Stephan Hoyer <https://github.com/shoyer>`_.\n-- Fix handling of coordinate attributes in ``xarray.where``. (:issue:`7220`, :pull:`7229`)\n-  By `Sam Levang <https://github.com/slevang>`_.\n - Fixed bug where :py:meth:`Dataset.coarsen.construct` would demote non-dimension coordinates to variables. (:pull:`7233`)\n   By `Tom Nicholas <https://github.com/TomNicholas>`_.\n - Raise a TypeError when trying to plot empty data (:issue:`7156`, :pull:`7228`).\n\nFrom 3b0336de851a0a140170a9acb0197da517035e9c Mon Sep 17 00:00:00 2001\nFrom: Deepak Cherian <dcherian@users.noreply.github.com>\nDate: Wed, 16 Nov 2022 11:42:43 -0700\nSubject: [PATCH 07/10] Update doc/whats-new.rst\n\n---\n doc/whats-new.rst | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex b4621175014..6df44a6c8cc 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -34,7 +34,7 @@ Deprecations\n \n Bug fixes\n ~~~~~~~~~\n-- Fix handling of coordinate attributes in ``xarray.where``. (:issue:`7220`, :pull:`7229`)\n+- Fix handling of coordinate attributes in :py:func:`where`. (:issue:`7220`, :pull:`7229`)\n   By `Sam Levang <https://github.com/slevang>`_.\n \n Documentation\n\nFrom 4cd4300a250f2b0f23c91c0e3e304f163341a785 Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Wed, 16 Nov 2022 22:22:41 -0500\nSubject: [PATCH 08/10] rebuild attrs after apply_ufunc\n\n---\n xarray/core/computation.py       | 33 +++++++++++-------\n xarray/tests/test_computation.py | 57 ++++++++++++++++++++++----------\n 2 files changed, 60 insertions(+), 30 deletions(-)\n\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 0ff8411ac7c..f66eb424f33 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -25,7 +25,7 @@\n import numpy as np\n \n from . import dtypes, duck_array_ops, utils\n-from .alignment import align, broadcast, deep_align\n+from .alignment import align, deep_align\n from .common import zeros_like\n from .duck_array_ops import datetime_to_numeric\n from .indexes import Index, filter_indexes_from_coords\n@@ -1855,22 +1855,13 @@ def where(cond, x, y, keep_attrs=None):\n     Dataset.where, DataArray.where :\n         equivalent methods\n     \"\"\"\n-    from .dataarray import DataArray\n+    from .dataset import Dataset\n \n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n-    if keep_attrs is True:\n-        # keep the attributes of x, the second parameter, by default to\n-        # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: attrs[1]\n-        # cast non-xarray objects to DataArray to get empty attrs\n-        cond, x, y = (v if hasattr(v, \"attrs\") else DataArray(v) for v in [cond, x, y])\n-        # explicitly broadcast to ensure we also get empty coord attrs\n-        # take coord attrs preferentially from x, then y, then cond\n-        x, y, cond = broadcast(x, y, cond)\n \n     # alignment for three arguments is complicated, so don't support it yet\n-    return apply_ufunc(\n+    result = apply_ufunc(\n         duck_array_ops.where,\n         cond,\n         x,\n@@ -1881,6 +1872,24 @@ def where(cond, x, y, keep_attrs=None):\n         keep_attrs=keep_attrs,\n     )\n \n+    # make sure we have the attrs of x across Dataset, DataArray, and coords\n+    if keep_attrs is True:\n+        if isinstance(y, Dataset) and not isinstance(x, Dataset):\n+            # handle special case where x gets promoted to Dataset\n+            result.attrs = {}\n+            if getattr(x, \"name\", None) in result.data_vars:\n+                result[x.name].attrs = getattr(x, \"attrs\", {})\n+        else:\n+            # otherwise, fill in global attrs and variable attrs (if they exist)\n+            result.attrs = getattr(x, \"attrs\", {})\n+            for v in getattr(result, \"data_vars\", []):\n+                result[v].attrs = getattr(getattr(x, v, None), \"attrs\", {})\n+        for c in getattr(result, \"coords\", []):\n+            # always fill coord attrs of x\n+            result[c].attrs = getattr(getattr(x, c, None), \"attrs\", {})\n+\n+    return result\n+\n \n @overload\n def polyval(coord: DataArray, coeffs: DataArray, degree_dim: Hashable) -> DataArray:\ndiff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex aee2a4e4840..c38eaaa1874 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1925,41 +1925,62 @@ def test_where() -> None:\n \n \n def test_where_attrs() -> None:\n-    cond = xr.DataArray([True, False], coords={\"x\": [0, 1]}, attrs={\"attr\": \"cond_da\"})\n-    cond[\"x\"].attrs = {\"attr\": \"cond_coord\"}\n-    x = xr.DataArray([1, 1], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n-    x[\"x\"].attrs = {\"attr\": \"x_coord\"}\n-    y = xr.DataArray([0, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"y_da\"})\n-    y[\"x\"].attrs = {\"attr\": \"y_coord\"}\n+    cond = xr.DataArray([True, False], coords={\"a\": [0, 1]}, attrs={\"attr\": \"cond_da\"})\n+    cond[\"a\"].attrs = {\"attr\": \"cond_coord\"}\n+    x = xr.DataArray([1, 1], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    x[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    y = xr.DataArray([0, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"y_da\"})\n+    y[\"a\"].attrs = {\"attr\": \"y_coord\"}\n \n     # 3 DataArrays, takes attrs from x\n     actual = xr.where(cond, x, y, keep_attrs=True)\n-    expected = xr.DataArray([1, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n-    expected[\"x\"].attrs = {\"attr\": \"x_coord\"}\n+    expected = xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n     assert_identical(expected, actual)\n \n-    # x as a scalar, takes coord attrs only from y\n+    # x as a scalar, takes no attrs\n     actual = xr.where(cond, 0, y, keep_attrs=True)\n-    expected = xr.DataArray([0, 0], coords={\"x\": [0, 1]})\n-    expected[\"x\"].attrs = {\"attr\": \"y_coord\"}\n+    expected = xr.DataArray([0, 0], coords={\"a\": [0, 1]})\n     assert_identical(expected, actual)\n \n     # y as a scalar, takes attrs from x\n     actual = xr.where(cond, x, 0, keep_attrs=True)\n-    expected = xr.DataArray([1, 0], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n-    expected[\"x\"].attrs = {\"attr\": \"x_coord\"}\n+    expected = xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n     assert_identical(expected, actual)\n \n-    # x and y as a scalar, takes coord attrs only from cond\n+    # x and y as a scalar, takes no attrs\n     actual = xr.where(cond, 1, 0, keep_attrs=True)\n-    expected = xr.DataArray([1, 0], coords={\"x\": [0, 1]})\n-    expected[\"x\"].attrs = {\"attr\": \"cond_coord\"}\n+    expected = xr.DataArray([1, 0], coords={\"a\": [0, 1]})\n     assert_identical(expected, actual)\n \n     # cond and y as a scalar, takes attrs from x\n     actual = xr.where(True, x, y, keep_attrs=True)\n-    expected = xr.DataArray([1, 1], coords={\"x\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n-    expected[\"x\"].attrs = {\"attr\": \"x_coord\"}\n+    expected = xr.DataArray([1, 1], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(expected, actual)\n+\n+    # DataArray and 2 Datasets, takes attrs from x\n+    ds_x = xr.Dataset(data_vars={\"x\": x}, attrs={\"attr\": \"x_ds\"})\n+    ds_y = xr.Dataset(data_vars={\"x\": y}, attrs={\"attr\": \"y_ds\"})\n+    actual = xr.where(cond, ds_x, ds_y, keep_attrs=True)\n+    expected = xr.Dataset(\n+        data_vars={\n+            \"x\": xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+        },\n+        attrs={\"attr\": \"x_ds\"},\n+    )\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(expected, actual)\n+\n+    # 2 DataArrays and 1 Dataset, takes attrs from x\n+    actual = xr.where(cond, x.rename(\"x\"), ds_y, keep_attrs=True)\n+    expected = xr.Dataset(\n+        data_vars={\n+            \"x\": xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n+        },\n+    )\n+    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n     assert_identical(expected, actual)\n \n \n\nFrom 1247b7bb8c31ae33058ef10bf995126459505213 Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Thu, 17 Nov 2022 09:44:09 -0500\nSubject: [PATCH 09/10] fix mypy\n\n---\n xarray/tests/test_computation.py | 16 ++++++++--------\n 1 file changed, 8 insertions(+), 8 deletions(-)\n\ndiff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex c38eaaa1874..73889c362fe 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1963,25 +1963,25 @@ def test_where_attrs() -> None:\n     # DataArray and 2 Datasets, takes attrs from x\n     ds_x = xr.Dataset(data_vars={\"x\": x}, attrs={\"attr\": \"x_ds\"})\n     ds_y = xr.Dataset(data_vars={\"x\": y}, attrs={\"attr\": \"y_ds\"})\n-    actual = xr.where(cond, ds_x, ds_y, keep_attrs=True)\n-    expected = xr.Dataset(\n+    ds_actual = xr.where(cond, ds_x, ds_y, keep_attrs=True)\n+    ds_expected = xr.Dataset(\n         data_vars={\n             \"x\": xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n         },\n         attrs={\"attr\": \"x_ds\"},\n     )\n-    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n-    assert_identical(expected, actual)\n+    ds_expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(ds_expected, ds_actual)\n \n     # 2 DataArrays and 1 Dataset, takes attrs from x\n-    actual = xr.where(cond, x.rename(\"x\"), ds_y, keep_attrs=True)\n-    expected = xr.Dataset(\n+    ds_actual = xr.where(cond, x.rename(\"x\"), ds_y, keep_attrs=True)\n+    ds_expected = xr.Dataset(\n         data_vars={\n             \"x\": xr.DataArray([1, 0], coords={\"a\": [0, 1]}, attrs={\"attr\": \"x_da\"})\n         },\n     )\n-    expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n-    assert_identical(expected, actual)\n+    ds_expected[\"a\"].attrs = {\"attr\": \"x_coord\"}\n+    assert_identical(ds_expected, ds_actual)\n \n \n @pytest.mark.parametrize(\n\nFrom bfffd7b7d48af7b0381d3d4f535d3f5796af8a01 Mon Sep 17 00:00:00 2001\nFrom: Sam Levang <slevang@salientpredictions.com>\nDate: Thu, 17 Nov 2022 15:22:09 -0500\nSubject: [PATCH 10/10] better comment\n\n---\n xarray/core/computation.py | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex f66eb424f33..e7445c0b397 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1872,7 +1872,10 @@ def where(cond, x, y, keep_attrs=None):\n         keep_attrs=keep_attrs,\n     )\n \n-    # make sure we have the attrs of x across Dataset, DataArray, and coords\n+    # keep the attributes of x, the second parameter, by default to\n+    # be consistent with the `where` method of `DataArray` and `Dataset`\n+    # rebuild the attrs from x at each level of the output, which could be\n+    # Dataset, DataArray, or Variable, and also handle coords\n     if keep_attrs is True:\n         if isinstance(y, Dataset) and not isinstance(x, Dataset):\n             # handle special case where x gets promoted to Dataset\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/7229"}