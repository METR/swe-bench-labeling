{"instance_id": "sphinx-doc__sphinx-9602", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 4a1d5aeed..3faa58e79 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp>=2.0.0',\n-    'sphinxcontrib-serializinghtml>=1.1.5',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',\n+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..ec550f900 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -66,6 +66,18 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n \n+    # Add a check for Literal annotations\n+    for field_list in field_lists:\n+        for field in field_list:\n+            field_name = field[0].astext()\n+            if field_name.startswith('type '):\n+                field_body = field[1]\n+                if 'Literal' in field_body.astext():\n+                    # Remove py:class role from Literal values\n+                    for node in field_body.traverse(addnodes.pending_xref):\n+                        if node['reftype'] == 'class' and node['reftarget'].startswith('Literal['):\n+                            node.replace_self(nodes.Text(node['reftarget']))\n+\n \n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n@@ -107,6 +119,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n+        \n+        # Handle Literal annotations\n+        if 'Literal' in annotation:\n+            literal_match = re.match(r'Literal\\[(.*)\\]', annotation)\n+            if literal_match:\n+                literal_value = literal_match.group(1)\n+                annotation = f'Literal[{literal_value}]'\n+            else:\n+                annotation = 'Literal'\n \n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n@@ -155,21 +176,38 @@ def augment_descriptions_with_types(\n             has_type.add('return')\n \n     # Add 'type' for parameters with a description but no declared type.\n-    for name in annotations:\n+    for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n+        # Handle Literal annotations\n+        if 'Literal' in annotation:\n+            literal_match = re.match(r'Literal\\[(.*)\\]', annotation)\n+            if literal_match:\n+                literal_value = literal_match.group(1)\n+                annotation = f'Literal[{literal_value}]'\n+            else:\n+                annotation = 'Literal'\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n+        return_annotation = annotations['return']\n+        # Handle Literal annotations for return type\n+        if 'Literal' in return_annotation:\n+            literal_match = re.match(r'Literal\\[(.*)\\]', return_annotation)\n+            if literal_match:\n+                literal_value = literal_match.group(1)\n+                return_annotation = f'Literal[{literal_value}]'\n+            else:\n+                return_annotation = 'Literal'\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            field += nodes.field_body('', nodes.paragraph('', return_annotation))\n             node += field\n \n \ndiff --git a/tox.ini b/tox.ini\nindex b6a67fd85..483f2df92 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From 34664ce4ce2ee298d57137a0f94961b45d3f043f Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Thu, 2 Sep 2021 02:25:31 +0900\nSubject: [PATCH] Fix #9576: py domain: Literal typehint was converted to a\n cross reference\n\nThe content of Literal typehint should not be converted to cross\nreferences.\n---\n CHANGES                  |  1 +\n sphinx/domains/python.py | 12 ++++++++++--\n tests/test_domain_py.py  | 21 +++++++++++++++++++++\n 3 files changed, 32 insertions(+), 2 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex c7e781de868..33487cacaf3 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -40,6 +40,7 @@ Bugs fixed\n * #9267: html theme: CSS and JS files added by theme were loaded twice\n * #9585: py domain: ``:type:`` option for :rst:dir:`py:property` directive does\n   not create a hyperlink\n+* #9576: py domain: Literal typehint was converted to a cross reference\n * #9535 comment: C++, fix parsing of defaulted function parameters that are\n   function pointers.\n * #9564: smartquotes: don't adjust typography for text with\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 9875a9f4b65..ee93edfce7b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -123,7 +123,7 @@ def unparse(node: ast.AST) -> List[Node]:\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n             else:\n-                return [nodes.Text(node.value)]\n+                return [nodes.Text(repr(node.value))]\n         elif isinstance(node, ast.Expr):\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n@@ -149,6 +149,12 @@ def unparse(node: ast.AST) -> List[Node]:\n             result.append(addnodes.desc_sig_punctuation('', '['))\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n+\n+            # Wrap the Text nodes inside brackets by literal node if the subscript is a Literal\n+            if result[0] in ('Literal', 'typing.Literal'):\n+                for i, subnode in enumerate(result[1:], start=1):\n+                    if isinstance(subnode, nodes.Text):\n+                        result[i] = nodes.literal('', '', subnode)\n             return result\n         elif isinstance(node, ast.Tuple):\n             if node.elts:\n@@ -179,7 +185,9 @@ def unparse(node: ast.AST) -> List[Node]:\n         tree = ast_parse(annotation)\n         result = unparse(tree)\n         for i, node in enumerate(result):\n-            if isinstance(node, nodes.Text) and node.strip():\n+            if isinstance(node, nodes.literal):\n+                result[i] = node[0]\n+            elif isinstance(node, nodes.Text) and node.strip():\n                 result[i] = type_to_xref(str(node), env)\n         return result\n     except SyntaxError:\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 067febcf495..b111e5276c0 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -342,6 +342,27 @@ def test_parse_annotation(app):\n     assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n+def test_parse_annotation_Literal(app):\n+    doctree = _parse_annotation(\"Literal[True, False]\", app.env)\n+    assert_node(doctree, ([pending_xref, \"Literal\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          \"True\",\n+                          [desc_sig_punctuation, \", \"],\n+                          \"False\",\n+                          [desc_sig_punctuation, \"]\"]))\n+\n+    doctree = _parse_annotation(\"typing.Literal[0, 1, 'abc']\", app.env)\n+    assert_node(doctree, ([pending_xref, \"typing.Literal\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          \"0\",\n+                          [desc_sig_punctuation, \", \"],\n+                          \"1\",\n+                          [desc_sig_punctuation, \", \"],\n+                          \"'abc'\",\n+                          [desc_sig_punctuation, \"]\"]))\n+\n+\n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9602"}