{"instance_id": "django__django-15916", "score": "I", "diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad94..42921ee760 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -630,6 +630,12 @@ def modelform_factory(\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n     Meta = type(\"Meta\", bases, attrs)\n+    \n+    # Check if formfield_callback is specified in the form's Meta\n+    meta_formfield_callback = getattr(getattr(form, 'Meta', None), 'formfield_callback', None)\n+    if meta_formfield_callback:\n+        formfield_callback = meta_formfield_callback\n+    \n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     # Give this new form class a reasonable name.\n", "gold_standard_diff": "From e03cdf76e78ea992763df4d3e16217d298929301 Mon Sep 17 00:00:00 2001\nFrom: Kamil Turek <kamil.turek@hotmail.com>\nDate: Thu, 4 Aug 2022 20:39:12 +0200\nSubject: [PATCH] Fixed #31721 -- Allowed ModelForm meta to specify form\n fields.\n\n---\n django/forms/models.py           | 13 +++---------\n docs/releases/4.2.txt            |  6 +++++-\n docs/topics/forms/modelforms.txt | 22 ++++++++++++++++++--\n tests/model_forms/tests.py       | 35 ++++++++++++++++++++++++++++++++\n 4 files changed, 63 insertions(+), 13 deletions(-)\n\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad9405..89cb000271ca 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -253,18 +253,11 @@ def __init__(self, options=None):\n         self.help_texts = getattr(options, \"help_texts\", None)\n         self.error_messages = getattr(options, \"error_messages\", None)\n         self.field_classes = getattr(options, \"field_classes\", None)\n+        self.formfield_callback = getattr(options, \"formfield_callback\", None)\n \n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-\n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n-\n         new_class = super().__new__(mcs, name, bases, attrs)\n \n         if bases == (BaseModelForm,):\n@@ -308,7 +301,7 @@ def __new__(mcs, name, bases, attrs):\n                 opts.fields,\n                 opts.exclude,\n                 opts.widgets,\n-                formfield_callback,\n+                opts.formfield_callback,\n                 opts.localized_fields,\n                 opts.labels,\n                 opts.help_texts,\n@@ -636,7 +629,7 @@ def modelform_factory(\n     class_name = model.__name__ + \"Form\"\n \n     # Class attributes for the new form class.\n-    form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}\n+    form_class_attrs = {\"Meta\": Meta}\n \n     if getattr(Meta, \"fields\", None) is None and getattr(Meta, \"exclude\", None) is None:\n         raise ImproperlyConfigured(\ndiff --git a/docs/releases/4.2.txt b/docs/releases/4.2.txt\nindex 92ccb8e6dddc..67608489767b 100644\n--- a/docs/releases/4.2.txt\n+++ b/docs/releases/4.2.txt\n@@ -151,7 +151,11 @@ File Uploads\n Forms\n ~~~~~\n \n-* ...\n+* :class:`~django.forms.ModelForm` now accepts the new ``Meta`` option\n+  ``formfield_callback`` to customize form fields.\n+\n+* :func:`~django.forms.models.modelform_factory` now respects the\n+  ``formfield_callback`` attribute of the ``form``\u2019s ``Meta``.\n \n Generic Views\n ~~~~~~~~~~~~~\ndiff --git a/docs/topics/forms/modelforms.txt b/docs/topics/forms/modelforms.txt\nindex 3332709089a1..9000ff24f4a5 100644\n--- a/docs/topics/forms/modelforms.txt\n+++ b/docs/topics/forms/modelforms.txt\n@@ -548,8 +548,8 @@ the ``name`` field::\n                 },\n             }\n \n-You can also specify ``field_classes`` to customize the type of fields\n-instantiated by the form.\n+You can also specify ``field_classes`` or ``formfield_callback`` to customize\n+the type of fields instantiated by the form.\n \n For example, if you wanted to use ``MySlugFormField`` for the ``slug``\n field, you could do the following::\n@@ -565,6 +565,21 @@ field, you could do the following::\n                 'slug': MySlugFormField,\n             }\n \n+or::\n+\n+    from django.forms import ModelForm\n+    from myapp.models import Article\n+\n+    def formfield_for_dbfield(db_field, **kwargs):\n+        if db_field.name == \"slug\":\n+            return MySlugFormField()\n+        return db_field.formfield(**kwargs)\n+\n+    class ArticleForm(ModelForm):\n+        class Meta:\n+            model = Article\n+            fields = [\"pub_date\", \"headline\", \"content\", \"reporter\", \"slug\"]\n+            formfield_callback = formfield_for_dbfield\n \n Finally, if you want complete control over of a field -- including its type,\n validators, required, etc. -- you can do this by declaratively specifying\n@@ -638,6 +653,9 @@ the field declaratively and setting its ``validators`` parameter::\n     See the :doc:`form field documentation </ref/forms/fields>` for more information\n     on fields and their arguments.\n \n+.. versionchanged:: 4.2\n+\n+    The ``Meta.formfield_callback`` attribute was added.\n \n Enabling localization of fields\n -------------------------------\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d2ce3348c5cd..8268032e3c89 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,41 @@ class InheritedForm(NewForm):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15916"}