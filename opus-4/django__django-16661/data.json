{"instance_id": "django__django-16661", "score": "I", "diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5240b07cd6..79da3f8ab1 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -464,10 +464,15 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # It is allowed to filter on values that would be found from local\n             # model anyways. For example, if you filter on employee__department__id,\n             # then the id value would be found already from employee__department_id.\n-            if not prev_field or (\n-                prev_field.is_relation\n-                and field not in prev_field.path_infos[-1].target_fields\n-            ):\n+            # However, explicit OneToOneFields used as primary keys should not be skipped\n+            # (they are different from auto-created parent links in concrete inheritance).\n+            skip_field = False\n+            if prev_field and prev_field.is_relation and field in prev_field.path_infos[-1].target_fields:\n+                # Only skip if this is an auto-created parent link (concrete inheritance)\n+                if field.one_to_one and field.primary_key and field.auto_created:\n+                    skip_field = True\n+            \n+            if not skip_field:\n                 relation_parts.append(part)\n             if not getattr(field, \"path_infos\", None):\n                 # This is not a relational field, so further parts\ndiff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex c6b4a565c8..f77b00c219 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,28 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                'restaurant__place__country',\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country', 'test_value'), True)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n", "gold_standard_diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5240b07cd645..49c816dc9e7e 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -461,12 +461,14 @@ def lookup_allowed(self, lookup, value):\n                 # Lookups on nonexistent fields are ok, since they're ignored\n                 # later.\n                 break\n-            # It is allowed to filter on values that would be found from local\n-            # model anyways. For example, if you filter on employee__department__id,\n-            # then the id value would be found already from employee__department_id.\n             if not prev_field or (\n                 prev_field.is_relation\n-                and field not in prev_field.path_infos[-1].target_fields\n+                and field not in model._meta.parents.values()\n+                and field is not model._meta.auto_field\n+                and (\n+                    model._meta.auto_field is None\n+                    or part not in getattr(prev_field, \"to_fields\", [])\n+                )\n             ):\n                 relation_parts.append(part)\n             if not getattr(field, \"path_infos\", None):\ndiff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex c6b4a565c84c..5604e39746e7 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class EmployeeProfileAdmin(ModelAdmin):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16661"}