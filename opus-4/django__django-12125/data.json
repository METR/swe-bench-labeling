{"instance_id": "django__django-12125", "score": "C", "diff": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..ead81c398a 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -269,7 +269,7 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\ndiff --git a/test_complete_inner_class.py b/test_complete_inner_class.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_enum_field.py b/test_enum_field.py\nnew file mode 100644\nindex 0000000000..05539373bb\n--- /dev/null\n+++ b/test_enum_field.py\n@@ -0,0 +1,86 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import enum\n+from io import StringIO\n+\n+# Setup Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+# Create test_settings module\n+with open('test_settings.py', 'w') as f:\n+    f.write(\"\"\"\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+SECRET_KEY = 'test'\n+INSTALLED_APPS = [\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'testapp',\n+]\n+\"\"\")\n+\n+# Create test app\n+os.makedirs('testapp', exist_ok=True)\n+with open('testapp/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Create models\n+with open('testapp/models.py', 'w') as f:\n+    f.write(\"\"\"\n+from django.db import models\n+import enum\n+\n+class Thing(models.Model):\n+    @enum.unique\n+    class State(enum.Enum):\n+        on = 'on'\n+        off = 'off'\n+    \n+    # This will use Django's built-in CharField with choices\n+    state = models.CharField(max_length=10, choices=[(s.value, s.name) for s in State])\n+\"\"\")\n+\n+# Create apps.py\n+with open('testapp/apps.py', 'w') as f:\n+    f.write(\"\"\"\n+from django.apps import AppConfig\n+\n+class TestappConfig(AppConfig):\n+    name = 'testapp'\n+\"\"\")\n+\n+# Setup Django\n+import django\n+django.setup()\n+\n+# Run makemigrations\n+from django.core.management import call_command\n+\n+# Create migrations directory\n+os.makedirs('testapp/migrations', exist_ok=True)\n+with open('testapp/migrations/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Capture output\n+output = StringIO()\n+call_command('makemigrations', 'testapp', stdout=output, stderr=output)\n+print(\"makemigrations output:\")\n+print(output.getvalue())\n+\n+# Read the generated migration file\n+migration_files = [f for f in os.listdir('testapp/migrations') if f.startswith('0001_') and f.endswith('.py')]\n+if migration_files:\n+    migration_file = migration_files[0]\n+    with open(os.path.join('testapp/migrations', migration_file), 'r') as f:\n+        print(\"\\nGenerated migration file content:\")\n+        print(f.read())\n+\n+# Cleanup\n+import shutil\n+shutil.rmtree('testapp')\n+os.remove('test_settings.py')\ndiff --git a/test_inner_class.py b/test_inner_class.py\nnew file mode 100644\nindex 0000000000..bdeef7c59f\n--- /dev/null\n+++ b/test_inner_class.py\n@@ -0,0 +1,52 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+# Define test models\n+class Outer(object):\n+    class Inner(models.CharField):\n+        pass\n+\n+class A(models.Model):\n+    field = Outer.Inner(max_length=20)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Test serialization\n+from django.db.migrations.serializer import serializer_factory\n+\n+field = A._meta.get_field('field')\n+serializer = serializer_factory(field.__class__)\n+result, imports = serializer.serialize()\n+print(f\"Serialized result: {result}\")\n+print(f\"Imports: {imports}\")\n+\n+# Also test the field's deconstruct method\n+name, path, args, kwargs = field.deconstruct()\n+print(f\"\\nField deconstruct:\")\n+print(f\"Name: {name}\")\n+print(f\"Path: {path}\")\n+print(f\"Args: {args}\")\n+print(f\"Kwargs: {kwargs}\")\ndiff --git a/test_inner_class_serialization.py b/test_inner_class_serialization.py\nnew file mode 100644\nindex 0000000000..ec5c6537ca\n--- /dev/null\n+++ b/test_inner_class_serialization.py\n@@ -0,0 +1,74 @@\n+#!/usr/bin/env python\n+\"\"\"Test that inner classes are serialized with their full qualified name.\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django.db.migrations.serializer import serializer_factory\n+from django.db.migrations.writer import MigrationWriter\n+\n+# Test 1: Simple inner class\n+class Outer:\n+    class Inner:\n+        pass\n+\n+# Test TypeSerializer directly\n+serializer = serializer_factory(Outer.Inner)\n+result, imports = serializer.serialize()\n+print(f\"Test 1 - TypeSerializer for Outer.Inner:\")\n+print(f\"  Result: {result}\")\n+print(f\"  Expected: __main__.Outer.Inner\")\n+print(f\"  Success: {result == '__main__.Outer.Inner'}\")\n+\n+# Test 2: Deeply nested class\n+class Level1:\n+    class Level2:\n+        class Level3:\n+            pass\n+\n+serializer = serializer_factory(Level1.Level2.Level3)\n+result, imports = serializer.serialize()\n+print(f\"\\nTest 2 - TypeSerializer for Level1.Level2.Level3:\")\n+print(f\"  Result: {result}\")\n+print(f\"  Expected: __main__.Level1.Level2.Level3\")\n+print(f\"  Success: {result == '__main__.Level1.Level2.Level3'}\")\n+\n+# Test 3: Migration Writer serialize method\n+result, imports = MigrationWriter.serialize(Outer.Inner)\n+print(f\"\\nTest 3 - MigrationWriter.serialize for Outer.Inner:\")\n+print(f\"  Result: {result}\")\n+print(f\"  Expected: __main__.Outer.Inner\")\n+print(f\"  Success: {result == '__main__.Outer.Inner'}\")\n+\n+# Test 4: Builtin type (should not change)\n+serializer = serializer_factory(str)\n+result, imports = serializer.serialize()\n+print(f\"\\nTest 4 - TypeSerializer for builtin str:\")\n+print(f\"  Result: {result}\")\n+print(f\"  Expected: str\")\n+print(f\"  Success: {result == 'str'}\")\n+\n+print(\"\\nAll tests passed!\" if all([\n+    MigrationWriter.serialize(Outer.Inner)[0] == '__main__.Outer.Inner',\n+    MigrationWriter.serialize(Level1.Level2.Level3)[0] == '__main__.Level1.Level2.Level3',\n+    MigrationWriter.serialize(str)[0] == 'str',\n+]) else \"Some tests failed!\")\ndiff --git a/test_migration_generation.py b/test_migration_generation.py\nnew file mode 100644\nindex 0000000000..4af9891f3e\n--- /dev/null\n+++ b/test_migration_generation.py\n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import tempfile\n+import shutil\n+from io import StringIO\n+\n+# Setup Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+# Create test_settings module\n+with open('test_settings.py', 'w') as f:\n+    f.write(\"\"\"\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+SECRET_KEY = 'test'\n+INSTALLED_APPS = [\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'testapp',\n+]\n+\"\"\")\n+\n+# Create test app\n+os.makedirs('testapp', exist_ok=True)\n+with open('testapp/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Create models\n+with open('testapp/models.py', 'w') as f:\n+    f.write(\"\"\"\n+from django.db import models\n+\n+class Outer(object):\n+    class Inner(models.CharField):\n+        pass\n+\n+class A(models.Model):\n+    field = Outer.Inner(max_length=20)\n+\"\"\")\n+\n+# Create apps.py\n+with open('testapp/apps.py', 'w') as f:\n+    f.write(\"\"\"\n+from django.apps import AppConfig\n+\n+class TestappConfig(AppConfig):\n+    name = 'testapp'\n+\"\"\")\n+\n+# Setup Django\n+import django\n+django.setup()\n+\n+# Run makemigrations\n+from django.core.management import call_command\n+from django.db import connection\n+\n+# Create migrations directory\n+os.makedirs('testapp/migrations', exist_ok=True)\n+with open('testapp/migrations/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Capture output\n+output = StringIO()\n+call_command('makemigrations', 'testapp', stdout=output, stderr=output)\n+print(\"makemigrations output:\")\n+print(output.getvalue())\n+\n+# Read the generated migration file\n+migration_files = [f for f in os.listdir('testapp/migrations') if f.startswith('0001_') and f.endswith('.py')]\n+if migration_files:\n+    migration_file = migration_files[0]\n+    with open(os.path.join('testapp/migrations', migration_file), 'r') as f:\n+        print(\"\\nGenerated migration file content:\")\n+        print(f.read())\n+\n+# Cleanup\n+shutil.rmtree('testapp')\n+os.remove('test_settings.py')\n", "gold_standard_diff": "From 8008795a3899d979d65832ca7c4946903de206f7 Mon Sep 17 00:00:00 2001\nFrom: John Bowen <jbowen7@gmail.com>\nDate: Fri, 22 Nov 2019 19:41:56 +0000\nSubject: [PATCH 1/2] Refs #23950 --- Moved test DeconstructibleInstances class\n to a module level.\n\nDeconstructibleInstances was not importable from the asserted path.\n---\n tests/migrations/test_writer.py | 9 +++++----\n 1 file changed, 5 insertions(+), 4 deletions(-)\n\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex ca924f35ecc5..addf10b0f039 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -26,6 +26,11 @@\n from .models import FoodManager, FoodQuerySet\n \n \n+class DeconstructibleInstances:\n+    def deconstruct(self):\n+        return ('DeconstructibleInstances', [], {})\n+\n+\n class Money(decimal.Decimal):\n     def deconstruct(self):\n         return (\n@@ -726,10 +731,6 @@ def test_deconstruct_class_arguments(self):\n         # Yes, it doesn't make sense to use a class as a default for a\n         # CharField. It does make sense for custom fields though, for example\n         # an enumfield that takes the enum class as an argument.\n-        class DeconstructibleInstances:\n-            def deconstruct(self):\n-                return ('DeconstructibleInstances', [], {})\n-\n         string = MigrationWriter.serialize(models.CharField(default=DeconstructibleInstances))[0]\n         self.assertEqual(string, \"models.CharField(default=migrations.test_writer.DeconstructibleInstances)\")\n \n\nFrom 29d8198841ea39af44f3bc835d646e642d498475 Mon Sep 17 00:00:00 2001\nFrom: John Bowen <jbowen7@gmail.com>\nDate: Fri, 22 Nov 2019 12:43:03 +0000\nSubject: [PATCH 2/2] Fixed #27914 -- Fixed serialization of nested classes in\n migrations.\n\n---\n django/db/migrations/serializer.py |  2 +-\n tests/migrations/test_writer.py    | 16 ++++++++++++++++\n 2 files changed, 17 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d590..ead81c398a6d 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -269,7 +269,7 @@ def serialize(self):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex addf10b0f039..6a65e87d5a3c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -193,6 +193,10 @@ class NestedEnum(enum.IntEnum):\n         A = 1\n         B = 2\n \n+    class NestedChoices(models.TextChoices):\n+        X = 'X', 'X value'\n+        Y = 'Y', 'Y value'\n+\n     def safe_exec(self, string, value=None):\n         d = {}\n         try:\n@@ -388,6 +392,18 @@ class DateChoices(datetime.date, models.Choices):\n             \"default=datetime.date(1969, 11, 19))\"\n         )\n \n+    def test_serialize_nested_class(self):\n+        for nested_cls in [self.NestedEnum, self.NestedChoices]:\n+            cls_name = nested_cls.__name__\n+            with self.subTest(cls_name):\n+                self.assertSerializedResultEqual(\n+                    nested_cls,\n+                    (\n+                        \"migrations.test_writer.WriterTests.%s\" % cls_name,\n+                        {'import migrations.test_writer'},\n+                    ),\n+                )\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12125"}