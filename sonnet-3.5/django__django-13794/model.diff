diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 1c844580c6..7fb005d55a 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -1,3 +1,4 @@
+from django.utils.encoding import force_str
 """Default variable filters."""
 import random as random_module
 import re
@@ -672,251 +673,3 @@ def unordered_list(value, autoescape=True):
 ###################
 
 @register.filter(is_safe=False)
-def add(value, arg):
-    """Add the arg to the value."""
-    try:
-        return int(value) + int(arg)
-    except (ValueError, TypeError):
-        try:
-            return value + arg
-        except Exception:
-            return ''
-
-
-@register.filter(is_safe=False)
-def get_digit(value, arg):
-    """
-    Given a whole number, return the requested digit of it, where 1 is the
-    right-most digit, 2 is the second-right-most digit, etc. Return the
-    original value for invalid input (if input or argument is not an integer,
-    or if argument is less than 1). Otherwise, output is always an integer.
-    """
-    try:
-        arg = int(arg)
-        value = int(value)
-    except ValueError:
-        return value  # Fail silently for an invalid argument
-    if arg < 1:
-        return value
-    try:
-        return int(str(value)[-arg])
-    except IndexError:
-        return 0
-
-
-###################
-# DATES           #
-###################
-
-@register.filter(expects_localtime=True, is_safe=False)
-def date(value, arg=None):
-    """Format a date according to the given format."""
-    if value in (None, ''):
-        return ''
-    try:
-        return formats.date_format(value, arg)
-    except AttributeError:
-        try:
-            return format(value, arg)
-        except AttributeError:
-            return ''
-
-
-@register.filter(expects_localtime=True, is_safe=False)
-def time(value, arg=None):
-    """Format a time according to the given format."""
-    if value in (None, ''):
-        return ''
-    try:
-        return formats.time_format(value, arg)
-    except (AttributeError, TypeError):
-        try:
-            return time_format(value, arg)
-        except (AttributeError, TypeError):
-            return ''
-
-
-@register.filter("timesince", is_safe=False)
-def timesince_filter(value, arg=None):
-    """Format a date as the time since that date (i.e. "4 days, 6 hours")."""
-    if not value:
-        return ''
-    try:
-        if arg:
-            return timesince(value, arg)
-        return timesince(value)
-    except (ValueError, TypeError):
-        return ''
-
-
-@register.filter("timeuntil", is_safe=False)
-def timeuntil_filter(value, arg=None):
-    """Format a date as the time until that date (i.e. "4 days, 6 hours")."""
-    if not value:
-        return ''
-    try:
-        return timeuntil(value, arg)
-    except (ValueError, TypeError):
-        return ''
-
-
-###################
-# LOGIC           #
-###################
-
-@register.filter(is_safe=False)
-def default(value, arg):
-    """If value is unavailable, use given default."""
-    return value or arg
-
-
-@register.filter(is_safe=False)
-def default_if_none(value, arg):
-    """If value is None, use given default."""
-    if value is None:
-        return arg
-    return value
-
-
-@register.filter(is_safe=False)
-def divisibleby(value, arg):
-    """Return True if the value is divisible by the argument."""
-    return int(value) % int(arg) == 0
-
-
-@register.filter(is_safe=False)
-def yesno(value, arg=None):
-    """
-    Given a string mapping values for true, false, and (optionally) None,
-    return one of those strings according to the value:
-
-    ==========  ======================  ==================================
-    Value       Argument                Outputs
-    ==========  ======================  ==================================
-    ``True``    ``"yeah,no,maybe"``     ``yeah``
-    ``False``   ``"yeah,no,maybe"``     ``no``
-    ``None``    ``"yeah,no,maybe"``     ``maybe``
-    ``None``    ``"yeah,no"``           ``"no"`` (converts None to False
-                                        if no mapping for None is given.
-    ==========  ======================  ==================================
-    """
-    if arg is None:
-        # Translators: Please do not add spaces around commas.
-        arg = gettext('yes,no,maybe')
-    bits = arg.split(',')
-    if len(bits) < 2:
-        return value  # Invalid arg.
-    try:
-        yes, no, maybe = bits
-    except ValueError:
-        # Unpack list of wrong size (no "maybe" value provided).
-        yes, no, maybe = bits[0], bits[1], bits[1]
-    if value is None:
-        return maybe
-    if value:
-        return yes
-    return no
-
-
-###################
-# MISC            #
-###################
-
-@register.filter(is_safe=True)
-def filesizeformat(bytes_):
-    """
-    Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,
-    102 bytes, etc.).
-    """
-    try:
-        bytes_ = int(bytes_)
-    except (TypeError, ValueError, UnicodeDecodeError):
-        value = ngettext("%(size)d byte", "%(size)d bytes", 0) % {'size': 0}
-        return avoid_wrapping(value)
-
-    def filesize_number_format(value):
-        return formats.number_format(round(value, 1), 1)
-
-    KB = 1 << 10
-    MB = 1 << 20
-    GB = 1 << 30
-    TB = 1 << 40
-    PB = 1 << 50
-
-    negative = bytes_ < 0
-    if negative:
-        bytes_ = -bytes_  # Allow formatting of negative numbers.
-
-    if bytes_ < KB:
-        value = ngettext("%(size)d byte", "%(size)d bytes", bytes_) % {'size': bytes_}
-    elif bytes_ < MB:
-        value = gettext("%s KB") % filesize_number_format(bytes_ / KB)
-    elif bytes_ < GB:
-        value = gettext("%s MB") % filesize_number_format(bytes_ / MB)
-    elif bytes_ < TB:
-        value = gettext("%s GB") % filesize_number_format(bytes_ / GB)
-    elif bytes_ < PB:
-        value = gettext("%s TB") % filesize_number_format(bytes_ / TB)
-    else:
-        value = gettext("%s PB") % filesize_number_format(bytes_ / PB)
-
-    if negative:
-        value = "-%s" % value
-    return avoid_wrapping(value)
-
-
-@register.filter(is_safe=False)
-def pluralize(value, arg='s'):
-    """
-    Return a plural suffix if the value is not 1, '1', or an object of
-    length 1. By default, use 's' as the suffix:
-
-    * If value is 0, vote{{ value|pluralize }} display "votes".
-    * If value is 1, vote{{ value|pluralize }} display "vote".
-    * If value is 2, vote{{ value|pluralize }} display "votes".
-
-    If an argument is provided, use that string instead:
-
-    * If value is 0, class{{ value|pluralize:"es" }} display "classes".
-    * If value is 1, class{{ value|pluralize:"es" }} display "class".
-    * If value is 2, class{{ value|pluralize:"es" }} display "classes".
-
-    If the provided argument contains a comma, use the text before the comma
-    for the singular case and the text after the comma for the plural case:
-
-    * If value is 0, cand{{ value|pluralize:"y,ies" }} display "candies".
-    * If value is 1, cand{{ value|pluralize:"y,ies" }} display "candy".
-    * If value is 2, cand{{ value|pluralize:"y,ies" }} display "candies".
-    """
-    if ',' not in arg:
-        arg = ',' + arg
-    bits = arg.split(',')
-    if len(bits) > 2:
-        return ''
-    singular_suffix, plural_suffix = bits[:2]
-
-    try:
-        return singular_suffix if float(value) == 1 else plural_suffix
-    except ValueError:  # Invalid string that's not a number.
-        pass
-    except TypeError:  # Value isn't a string or a number; maybe it's a list?
-        try:
-            return singular_suffix if len(value) == 1 else plural_suffix
-        except TypeError:  # len() of unsized object.
-            pass
-    return ''
-
-
-@register.filter("phone2numeric", is_safe=True)
-def phone2numeric_filter(value):
-    """Take a phone number and converts it in to its numerical equivalent."""
-    return phone2numeric(value)
-
-
-@register.filter(is_safe=True)
-def pprint(value):
-    """A wrapper around pprint.pprint -- for debugging, really."""
-    try:
-        return pformat(value)
-    except Exception as e:
-        return "Error in formatting: %s: %s" % (e.__class__.__name__, e)
