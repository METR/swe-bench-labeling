diff --git a/example.svg b/example.svg
new file mode 100644
index 0000000000..71977b7da8
Binary files /dev/null and b/example.svg differ
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..1bef9167b0 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1452,6 +1452,7 @@ or callable, default: value of *xycoords*
             self._renderer = renderer
         if not self.get_visible() or not self._check_xy(renderer):
             return
+        renderer.open_group('annotationbbox', self.get_gid())
         self.update_positions(renderer)
         if self.arrow_patch is not None:
             if self.arrow_patch.figure is None and self.figure is not None:
@@ -1460,6 +1461,7 @@ or callable, default: value of *xycoords*
         self.patch.draw(renderer)
         self.offsetbox.draw(renderer)
         self.stale = False
+        renderer.close_group('annotationbbox')
 
 
 class DraggableBase:
diff --git a/test_annotationbbox_gid.py b/test_annotationbbox_gid.py
new file mode 100644
index 0000000000..b4facea2a5
--- /dev/null
+++ b/test_annotationbbox_gid.py
@@ -0,0 +1,37 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)
+import numpy as np
+
+fig, ax = plt.subplots()
+
+# Create a simple image instead of loading from file
+arr_img = np.random.rand(100, 100, 3)
+
+xy = [0.3, 0.55]
+
+imagebox = OffsetImage(arr_img, zoom=0.1)
+imagebox.image.axes = ax
+
+ab = AnnotationBbox(imagebox, xy,
+                    xybox=(120., -80.),
+                    xycoords='data',
+                    boxcoords="offset points",
+                    pad=0.5,
+                    arrowprops=dict(
+                        arrowstyle="->",
+                        connectionstyle="angle,angleA=0,angleB=90,rad=3")
+                    )
+ab.set_gid('My_label')
+ax.add_artist(ab)
+
+print(f"GID = {ab.get_gid()}")
+
+fig.savefig("example.svg", format="svg")
+
+# Check if the gid is in the SVG file
+with open("example.svg", "r") as f:
+    svg_content = f.read()
+    if 'My_label' in svg_content:
+        print("SUCCESS: GID found in SVG!")
+    else:
+        print("FAIL: GID not found in SVG!")
diff --git a/test_annotationbbox_gid_proper.py b/test_annotationbbox_gid_proper.py
new file mode 100644
index 0000000000..3009cbfef1
--- /dev/null
+++ b/test_annotationbbox_gid_proper.py
@@ -0,0 +1,36 @@
+"""
+Test to be added to test_offsetbox.py
+"""
+
+def test_annotationbbox_gid():
+    """Test that AnnotationBbox correctly passes GID to SVG renderer."""
+    from matplotlib.offsetbox import OffsetImage, AnnotationBbox
+    import matplotlib.pyplot as plt
+    import numpy as np
+    
+    fig, ax = plt.subplots()
+    
+    # Create a simple image
+    arr_img = np.random.rand(10, 10, 3)
+    
+    imagebox = OffsetImage(arr_img, zoom=0.5)
+    ab = AnnotationBbox(imagebox, (0.5, 0.5),
+                        xybox=(0.8, 0.8),
+                        xycoords='data',
+                        boxcoords="data",
+                        pad=0.5,
+                        arrowprops=dict(arrowstyle="->"))
+    
+    # Set a GID
+    ab.set_gid('test_annotation_gid')
+    ax.add_artist(ab)
+    
+    # Save to SVG
+    from io import BytesIO
+    buf = BytesIO()
+    fig.savefig(buf, format="svg")
+    buf.seek(0)
+    svg_content = buf.read().decode('utf-8')
+    
+    # Check if GID is in the output
+    assert 'test_annotation_gid' in svg_content
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..22be30ee17
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,79 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox, TextArea, DrawingArea)
+import numpy as np
+
+# Test 1: Basic AnnotationBbox with gid
+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+
+# Create a simple image
+arr_img = np.random.rand(50, 50, 3)
+
+# Test with image
+imagebox = OffsetImage(arr_img, zoom=0.2)
+ab1 = AnnotationBbox(imagebox, (0.5, 0.5),
+                    xybox=(0.8, 0.8),
+                    xycoords='data',
+                    boxcoords="data",
+                    pad=0.5,
+                    arrowprops=dict(arrowstyle="->"))
+ab1.set_gid('image_annotation')
+ax1.add_artist(ab1)
+ax1.set_title("Image Annotation with GID")
+
+# Test with text
+textbox = TextArea("Hello World!")
+ab2 = AnnotationBbox(textbox, (0.5, 0.5),
+                    xybox=(0.2, 0.8),
+                    xycoords='data',
+                    boxcoords="data",
+                    pad=0.5,
+                    arrowprops=dict(arrowstyle="->"))
+ab2.set_gid('text_annotation')
+ax2.add_artist(ab2)
+ax2.set_title("Text Annotation with GID")
+
+# Test without gid (should not break)
+ab3 = AnnotationBbox(TextArea("No GID"), (0.8, 0.2),
+                    xybox=(0.6, 0.2),
+                    xycoords='data',
+                    boxcoords="data")
+ax2.add_artist(ab3)
+
+# Save to SVG
+fig.savefig("test_comprehensive.svg", format="svg")
+
+# Check results
+with open("test_comprehensive.svg", "r") as f:
+    svg_content = f.read()
+    
+print("Test Results:")
+print("=" * 40)
+
+# Test 1: Check if gids are present
+if 'image_annotation' in svg_content:
+    print("✓ Image annotation GID found")
+else:
+    print("✗ Image annotation GID NOT found")
+    
+if 'text_annotation' in svg_content:
+    print("✓ Text annotation GID found")
+else:
+    print("✗ Text annotation GID NOT found")
+
+# Test 2: Make sure we didn't break rendering
+if '<g id="annotationbbox">' in svg_content:
+    print("✓ Annotations without GID render correctly")
+else:
+    print("✗ Warning: Might have issues with annotations without GID")
+
+# Test 3: Check structure
+import re
+pattern = r'<g id="(image_annotation|text_annotation)">'
+matches = re.findall(pattern, svg_content)
+if len(matches) == 2:
+    print(f"✓ Found {len(matches)} GID annotations as expected")
+else:
+    print(f"✗ Expected 2 GID annotations, found {len(matches)}")
+
+print("=" * 40)
+print("All tests completed!")
diff --git a/test_comprehensive.svg b/test_comprehensive.svg
new file mode 100644
index 0000000000..0f0a07c1cf
Binary files /dev/null and b/test_comprehensive.svg differ
diff --git a/test_gid_fix.py b/test_gid_fix.py
new file mode 100644
index 0000000000..1cd790de00
--- /dev/null
+++ b/test_gid_fix.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import OffsetImage, AnnotationBbox
+import numpy as np
+import os
+
+def test_annotationbbox_gid():
+    """Test that AnnotationBbox correctly passes GID to renderer"""
+    fig, ax = plt.subplots()
+    
+    # Create a simple image
+    arr_img = np.random.rand(10, 10, 3)
+    
+    imagebox = OffsetImage(arr_img, zoom=0.5)
+    ab = AnnotationBbox(imagebox, (0.5, 0.5),
+                        xybox=(0.8, 0.8),
+                        xycoords='data',
+                        boxcoords="data",
+                        pad=0.5,
+                        arrowprops=dict(arrowstyle="->"))
+    
+    # Set a GID
+    ab.set_gid('test_gid_123')
+    ax.add_artist(ab)
+    
+    # Save to SVG
+    svg_file = "test_gid_output.svg"
+    fig.savefig(svg_file, format="svg")
+    
+    # Check if GID is in the output
+    with open(svg_file, "r") as f:
+        svg_content = f.read()
+    
+    assert 'test_gid_123' in svg_content, "GID not found in SVG output"
+    
+    # Clean up
+    os.remove(svg_file)
+    plt.close(fig)
+    
+    print("✓ Test passed: AnnotationBbox GID is correctly passed to SVG renderer")
+
+if __name__ == "__main__":
+    test_annotationbbox_gid()
diff --git a/test_no_gid.py b/test_no_gid.py
new file mode 100644
index 0000000000..abb23f4c9c
--- /dev/null
+++ b/test_no_gid.py
@@ -0,0 +1,45 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import OffsetImage, AnnotationBbox
+import numpy as np
+import os
+
+def test_annotationbbox_no_gid():
+    """Test that AnnotationBbox works correctly without GID"""
+    fig, ax = plt.subplots()
+    
+    # Create a simple image
+    arr_img = np.random.rand(10, 10, 3)
+    
+    imagebox = OffsetImage(arr_img, zoom=0.5)
+    ab = AnnotationBbox(imagebox, (0.5, 0.5),
+                        xybox=(0.8, 0.8),
+                        xycoords='data',
+                        boxcoords="data",
+                        pad=0.5,
+                        arrowprops=dict(arrowstyle="->"))
+    
+    # Don't set a GID - test default behavior
+    ax.add_artist(ab)
+    
+    # Save to SVG
+    svg_file = "test_no_gid_output.svg"
+    fig.savefig(svg_file, format="svg")
+    
+    # Check if file was created successfully
+    assert os.path.exists(svg_file), "SVG file was not created"
+    
+    # Check if it contains the default id pattern
+    with open(svg_file, "r") as f:
+        svg_content = f.read()
+    
+    # Should contain something like id="annotationbbox_1"
+    assert 'id="annotationbbox_' in svg_content, "Default ID pattern not found"
+    
+    # Clean up
+    os.remove(svg_file)
+    plt.close(fig)
+    
+    print("✓ Test passed: AnnotationBbox works correctly without explicit GID")
+
+if __name__ == "__main__":
+    test_annotationbbox_no_gid()
