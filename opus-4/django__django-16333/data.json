{"instance_id": "django__django-16333", "score": "C", "diff": "diff --git a/demo_fix.py b/demo_fix.py\nnew file mode 100644\nindex 0000000000..db730a8964\n--- /dev/null\n+++ b/demo_fix.py\n@@ -0,0 +1,121 @@\n+#!/usr/bin/env python\n+\"\"\"Demonstration of the fix for UserCreationForm ManyToMany field saving\"\"\"\n+\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': 'test_db.sqlite3',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ],\n+    SECRET_KEY='demo-secret-key',\n+)\n+\n+django.setup()\n+\n+# Import after Django setup\n+from django.db import models\n+from django.contrib.auth.models import AbstractUser, Group\n+from django.contrib.auth.forms import UserCreationForm\n+from django import forms\n+\n+# Define a custom user model with ManyToMany field\n+class CustomUser(AbstractUser):\n+    favorite_groups = models.ManyToManyField(Group, blank=True, related_name='favorite_users')\n+    \n+    class Meta:\n+        app_label = 'auth'\n+        db_table = 'demo_custom_user'\n+\n+\n+# Create the database tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    try:\n+        schema_editor.create_model(Group)\n+    except:\n+        pass  # Table might already exist\n+    try:\n+        schema_editor.create_model(CustomUser)\n+    except:\n+        pass  # Table might already exist\n+\n+\n+# Define a form that includes the ManyToMany field\n+class CustomUserCreationForm(UserCreationForm):\n+    favorite_groups = forms.ModelMultipleChoiceField(\n+        queryset=Group.objects.all(),\n+        required=False,\n+        widget=forms.CheckboxSelectMultiple,\n+        label=\"Favorite Groups\"\n+    )\n+    \n+    class Meta:\n+        model = CustomUser\n+        fields = ('username', 'favorite_groups')\n+\n+\n+print(\"=== Demonstrating UserCreationForm ManyToMany Fix ===\\n\")\n+\n+# Create some test groups\n+group1, _ = Group.objects.get_or_create(name='Developers')\n+group2, _ = Group.objects.get_or_create(name='Designers')\n+print(f\"Created groups: {group1.name}, {group2.name}\")\n+\n+# Test 1: Save with commit=True (should save M2M data)\n+print(\"\\n--- Test 1: Save with commit=True ---\")\n+form_data = {\n+    'username': 'alice',\n+    'password1': 'testpass123!',\n+    'password2': 'testpass123!',\n+    'favorite_groups': [group1.id, group2.id]\n+}\n+\n+form = CustomUserCreationForm(data=form_data)\n+if form.is_valid():\n+    user = form.save(commit=True)\n+    print(f\"User '{user.username}' created successfully!\")\n+    print(f\"Favorite groups saved: {list(user.favorite_groups.all())}\")\n+    print(\"\u2713 ManyToMany data was saved correctly with commit=True\")\n+else:\n+    print(f\"Form errors: {form.errors}\")\n+\n+# Test 2: Save with commit=False (should provide save_m2m method)\n+print(\"\\n--- Test 2: Save with commit=False ---\")\n+form_data2 = {\n+    'username': 'bob',\n+    'password1': 'testpass123!',\n+    'password2': 'testpass123!',\n+    'favorite_groups': [group1.id]\n+}\n+\n+form2 = CustomUserCreationForm(data=form_data2)\n+if form2.is_valid():\n+    user2 = form2.save(commit=False)\n+    user2.save()  # Save the user instance first\n+    \n+    print(f\"User '{user2.username}' created, but M2M not saved yet\")\n+    print(f\"Groups before save_m2m: {list(user2.favorite_groups.all())}\")\n+    \n+    # Now save the M2M data\n+    form2.save_m2m()\n+    print(f\"Groups after save_m2m: {list(user2.favorite_groups.all())}\")\n+    print(\"\u2713 save_m2m() method works correctly with commit=False\")\n+else:\n+    print(f\"Form errors: {form2.errors}\")\n+\n+print(\"\\n=== Fix verified successfully! ===\")\n+\n+# Cleanup\n+os.remove('test_db.sqlite3') if os.path.exists('test_db.sqlite3') else None\ndiff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8495..5eec76400c 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,11 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self._save_m2m()\n+        else:\n+            # We need to ensure save_m2m is available when commit=False\n+            # The parent ModelForm.save(commit=False) already adds this method\n+            pass\n         return user\n \n \ndiff --git a/test_save_method.py b/test_save_method.py\nnew file mode 100644\nindex 0000000000..cfbb42fc90\n--- /dev/null\n+++ b/test_save_method.py\n@@ -0,0 +1,25 @@\n+#!/usr/bin/env python\n+\"\"\"Test to show the save method differences between ModelForm and UserCreationForm\"\"\"\n+\n+import os\n+import sys\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+# Just compare the source code\n+from django.contrib.auth.forms import UserCreationForm\n+from django.forms import ModelForm\n+import inspect\n+\n+print(\"=== Comparing save methods ===\")\n+print(\"\\nModelForm.save source:\")\n+print(inspect.getsource(ModelForm.save))\n+\n+print(\"\\n\" + \"=\"*50 + \"\\n\")\n+print(\"UserCreationForm.save source:\")\n+print(inspect.getsource(UserCreationForm.save))\n+\n+print(\"\\n\" + \"=\"*50 + \"\\n\")\n+print(\"Analysis:\")\n+print(\"- ModelForm.save() calls self._save_m2m() when commit=True\")\n+print(\"- UserCreationForm.save() does NOT call self._save_m2m() when commit=True\")\n+print(\"- This is the bug that needs to be fixed!\")\ndiff --git a/test_simple_m2m.py b/test_simple_m2m.py\nnew file mode 100644\nindex 0000000000..cc35fe8487\n--- /dev/null\n+++ b/test_simple_m2m.py\n@@ -0,0 +1,89 @@\n+#!/usr/bin/env python\n+\"\"\"Simple test to show that UserCreationForm doesn't save ManyToMany data\"\"\"\n+\n+import os\n+import sys\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ],\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+# Let's create a simpler test by checking if save_m2m is called\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import User\n+from django.forms import ModelForm\n+\n+print(\"Checking if UserCreationForm calls save_m2m()...\")\n+\n+# First, let's check what a regular ModelForm does\n+class TestModelForm(ModelForm):\n+    class Meta:\n+        model = User\n+        fields = ['username']\n+        \n+    def save(self, commit=True):\n+        print(\"TestModelForm.save() called with commit =\", commit)\n+        instance = super().save(commit=commit)\n+        print(\"After super().save(), hasattr(self, 'save_m2m') =\", hasattr(self, 'save_m2m'))\n+        return instance\n+\n+# Test regular ModelForm\n+print(\"\\n1. Testing regular ModelForm behavior:\")\n+form1 = TestModelForm({'username': 'test1'})\n+if form1.is_valid():\n+    form1.save(commit=False)\n+    \n+print(\"\\n2. Testing UserCreationForm behavior:\")\n+print(\"Current UserCreationForm.save method:\")\n+print(UserCreationForm.save)\n+\n+# Let's see what methods are available\n+form2 = UserCreationForm({\n+    'username': 'test2',\n+    'password1': 'testpass123!',\n+    'password2': 'testpass123!'\n+})\n+if form2.is_valid():\n+    # Check what happens during save\n+    print(\"\\nBefore save: hasattr(form2, 'save_m2m') =\", hasattr(form2, 'save_m2m'))\n+    user = form2.save(commit=False)\n+    print(\"After save(commit=False): hasattr(form2, 'save_m2m') =\", hasattr(form2, 'save_m2m'))\n+    \n+    # Now let's check commit=True\n+    form3 = UserCreationForm({\n+        'username': 'test3',\n+        'password1': 'testpass123!',\n+        'password2': 'testpass123!'\n+    })\n+    if form3.is_valid():\n+        print(\"\\nTesting save(commit=True):\")\n+        user = form3.save(commit=True)\n+        print(\"User saved successfully\")\n+        \n+# Now let's look at the source code of both save methods\n+print(\"\\n\\n=== Comparing save methods ===\")\n+print(\"\\nModelForm.save source:\")\n+import inspect\n+print(inspect.getsource(ModelForm.save))\n+\n+print(\"\\nUserCreationForm.save source:\")\n+print(inspect.getsource(UserCreationForm.save))\ndiff --git a/test_user_creation_form_m2m.py b/test_user_creation_form_m2m.py\nnew file mode 100644\nindex 0000000000..b465f8bf17\n--- /dev/null\n+++ b/test_user_creation_form_m2m.py\n@@ -0,0 +1,100 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to reproduce the UserCreationForm ManyToMany issue\"\"\"\n+\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ],\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+    AUTH_USER_MODEL='auth.User',\n+)\n+\n+django.setup()\n+\n+from django.db import models\n+from django.contrib.auth.models import AbstractUser, Group\n+from django.contrib.auth.forms import UserCreationForm\n+from django import forms\n+from django.forms import ModelMultipleChoiceField\n+\n+\n+# Create a custom user model with a ManyToMany field\n+class CustomUser(AbstractUser):\n+    favorite_groups = models.ManyToManyField(Group, related_name='favorite_users', blank=True)\n+    \n+    class Meta:\n+        app_label = 'auth'\n+\n+\n+# Create a custom UserCreationForm that includes the ManyToMany field\n+class CustomUserCreationForm(UserCreationForm):\n+    favorite_groups = ModelMultipleChoiceField(\n+        queryset=Group.objects.all(),\n+        required=False,\n+        widget=forms.CheckboxSelectMultiple\n+    )\n+    \n+    class Meta(UserCreationForm.Meta):\n+        model = CustomUser\n+        fields = ('username', 'favorite_groups')\n+\n+\n+# Now let's test the issue\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+\n+# Create tables\n+with connection.schema_editor() as schema_editor:\n+    # Create the custom user table\n+    schema_editor.create_model(CustomUser)\n+    # Create Group table if it doesn't exist\n+    try:\n+        schema_editor.create_model(Group)\n+    except:\n+        pass\n+\n+# Create some test groups\n+group1 = Group.objects.create(name='Group 1')\n+group2 = Group.objects.create(name='Group 2')\n+\n+print(\"Testing UserCreationForm with ManyToMany fields...\")\n+\n+# Create form data\n+form_data = {\n+    'username': 'testuser',\n+    'password1': 'testpass123!',\n+    'password2': 'testpass123!',\n+    'favorite_groups': [group1.id, group2.id]\n+}\n+\n+# Create and save the form\n+form = CustomUserCreationForm(data=form_data)\n+if form.is_valid():\n+    print(\"Form is valid\")\n+    user = form.save()\n+    \n+    # Check if the ManyToMany data was saved\n+    saved_groups = list(user.favorite_groups.all())\n+    print(f\"Saved groups: {saved_groups}\")\n+    print(f\"Expected groups: [Group 1, Group 2]\")\n+    \n+    if len(saved_groups) == 0:\n+        print(\"\\nBUG CONFIRMED: ManyToMany data was NOT saved!\")\n+    else:\n+        print(\"\\nSUCCESS: ManyToMany data was saved correctly!\")\n+else:\n+    print(f\"Form errors: {form.errors}\")\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 78078316e8..4a93b5c046 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -334,6 +334,80 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n                     form.fields[field_name].widget.attrs[\"autocomplete\"], autocomplete\n                 )\n \n+    def test_save_m2m_field(self):\n+        \"\"\"\n+        UserCreationForm should save ManyToMany field data when commit=True.\n+        \"\"\"\n+        from .models.with_many_to_many import CustomUserWithM2M, Organization\n+\n+        # Create test organizations\n+        org1 = Organization.objects.create(name=\"Org 1\")\n+        org2 = Organization.objects.create(name=\"Org 2\")\n+\n+        # Create a custom form that includes the ManyToMany field\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta:\n+                model = CustomUserWithM2M\n+                fields = (\"username\", \"orgs\")\n+\n+        # Test save with commit=True\n+        form_data = {\n+            \"username\": \"testm2muser\",\n+            \"password1\": \"testpass123!\",\n+            \"password2\": \"testpass123!\",\n+            \"orgs\": [org1.pk, org2.pk],\n+        }\n+        form = CustomUserCreationForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        \n+        # Check that M2M data was saved\n+        saved_orgs = list(user.orgs.all())\n+        self.assertEqual(len(saved_orgs), 2)\n+        self.assertIn(org1, saved_orgs)\n+        self.assertIn(org2, saved_orgs)\n+\n+    def test_save_m2m_field_commit_false(self):\n+        \"\"\"\n+        UserCreationForm should provide save_m2m method when commit=False.\n+        \"\"\"\n+        from .models.with_many_to_many import CustomUserWithM2M, Organization\n+\n+        # Create test organizations\n+        org1 = Organization.objects.create(name=\"Org 1\")\n+        org2 = Organization.objects.create(name=\"Org 2\")\n+\n+        # Create a custom form that includes the ManyToMany field\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta:\n+                model = CustomUserWithM2M\n+                fields = (\"username\", \"orgs\")\n+\n+        # Test save with commit=False\n+        form_data = {\n+            \"username\": \"testm2muser2\",\n+            \"password1\": \"testpass123!\",\n+            \"password2\": \"testpass123!\",\n+            \"orgs\": [org1.pk, org2.pk],\n+        }\n+        form = CustomUserCreationForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=False)\n+        \n+        # M2M data should not be saved yet\n+        user.save()\n+        self.assertEqual(user.orgs.count(), 0)\n+        \n+        # But save_m2m should be available and work\n+        self.assertTrue(hasattr(form, 'save_m2m'))\n+        form.save_m2m()\n+        \n+        # Now M2M data should be saved\n+        saved_orgs = list(user.orgs.all())\n+        self.assertEqual(len(saved_orgs), 2)\n+        self.assertIn(org1, saved_orgs)\n+        self.assertIn(org2, saved_orgs)\n+\n \n # To verify that the login form rejects inactive users, use an authentication\n # backend that allows them.\n", "gold_standard_diff": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c84952e..63420af94e29 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,8 @@ def save(self, commit=True):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            if hasattr(self, \"save_m2m\"):\n+                self.save_m2m()\n         return user\n \n \ndiff --git a/docs/releases/4.2.txt b/docs/releases/4.2.txt\nindex a9841d1af4b6..fe74e8485a80 100644\n--- a/docs/releases/4.2.txt\n+++ b/docs/releases/4.2.txt\n@@ -65,6 +65,9 @@ Minor features\n * The default iteration count for the PBKDF2 password hasher is increased from\n   390,000 to 480,000.\n \n+* :class:`~django.contrib.auth.forms.UserCreationForm` now saves many-to-many\n+  form fields for a custom user model.\n+\n :mod:`django.contrib.contenttypes`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt\nindex c77e6c599d32..9c0a256d25c3 100644\n--- a/docs/topics/auth/customizing.txt\n+++ b/docs/topics/auth/customizing.txt\n@@ -840,6 +840,11 @@ extend these forms in this manner::\n             model = CustomUser\n             fields = UserCreationForm.Meta.fields + ('custom_field',)\n \n+.. versionchanged:: 4.2\n+\n+    In older versions, :class:`~django.contrib.auth.forms.UserCreationForm`\n+    didn't save many-to-many form fields for a custom user model.\n+\n Custom users and :mod:`django.contrib.admin`\n --------------------------------------------\n \ndiff --git a/docs/topics/auth/default.txt b/docs/topics/auth/default.txt\nindex fb5d04752dfd..549430aaadb4 100644\n--- a/docs/topics/auth/default.txt\n+++ b/docs/topics/auth/default.txt\n@@ -1665,6 +1665,11 @@ provides several built-in forms located in :mod:`django.contrib.auth.forms`:\n     sets the user's password using\n     :meth:`~django.contrib.auth.models.User.set_password()`.\n \n+    .. versionchanged:: 4.2\n+\n+        In older versions, :class:`UserCreationForm` didn't save many-to-many\n+        form fields for a custom user model.\n+\n .. currentmodule:: django.contrib.auth\n \n Authentication data in templates\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 78078316e81a..1aee923bb90f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -35,6 +35,7 @@\n )\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .settings import AUTH_TEMPLATES\n \n \n@@ -252,6 +253,25 @@ class Meta(UserCreationForm.Meta):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n     def test_password_whitespace_not_stripped(self):\n         data = {\n             \"username\": \"testuser\",\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16333"}