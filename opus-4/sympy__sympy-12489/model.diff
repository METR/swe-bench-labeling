diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 4ac1c2ef3b..9d4093caf6 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -857,19 +857,19 @@ def __new__(cls, *args, **kwargs):
         #g) (Permutation) = adjust size or return copy
         ok = True
         if not args:  # a
-            return _af_new(list(range(size or 0)))
+            return cls._af_new(list(range(size or 0)))
         elif len(args) > 1:  # c
-            return _af_new(Cycle(*args).list(size))
+            return cls._af_new(Cycle(*args).list(size))
         if len(args) == 1:
             a = args[0]
             if isinstance(a, Perm):  # g
                 if size is None or size == a.size:
                     return a
-                return Perm(a.array_form, size=size)
+                return cls(a.array_form, size=size)
             if isinstance(a, Cycle):  # f
-                return _af_new(a.list(size))
+                return cls._af_new(a.list(size))
             if not is_sequence(a):  # b
-                return _af_new(list(range(a + 1)))
+                return cls._af_new(list(range(a + 1)))
             if has_variety(is_sequence(ai) for ai in a):
                 ok = False
         else:
@@ -924,8 +924,8 @@ def __new__(cls, *args, **kwargs):
         obj._size = size
         return obj
 
-    @staticmethod
-    def _af_new(perm):
+    @classmethod
+    def _af_new(cls, perm):
         """A method to produce a Permutation object from a list;
         the list is bound to the _array_form attribute, so it must
         not be modified; this method is meant for internal use only;
@@ -944,7 +944,7 @@ def _af_new(perm):
         Permutation([2, 1, 3, 0])
 
         """
-        p = Basic.__new__(Perm, perm)
+        p = Basic.__new__(cls, perm)
         p._array_form = perm
         p._size = len(perm)
         return p
@@ -1235,7 +1235,7 @@ def mul_inv(self, other):
         """
         a = _af_invert(self._array_form)
         b = other._array_form
-        return _af_new(_af_rmul(a, b))
+        return self.__class__._af_new(_af_rmul(a, b))
 
     def __rmul__(self, other):
         """This is needed to coerse other to Permutation in rmul."""
@@ -1300,7 +1300,7 @@ def __mul__(self, other):
         else:
             b.extend(list(range(len(b), len(a))))
             perm = [b[i] for i in a] + b[len(a):]
-        return _af_new(perm)
+        return self.__class__._af_new(perm)
 
     def commutes_with(self, other):
         """
@@ -1341,7 +1341,7 @@ def __pow__(self, n):
             raise NotImplementedError(
                 'p**p is not defined; do you mean p^p (conjugate)?')
         n = int(n)
-        return _af_new(_af_pow(self.array_form, n))
+        return self.__class__._af_new(_af_pow(self.array_form, n))
 
     def __rxor__(self, i):
         """Return self(i) when ``i`` is an int.
@@ -1436,7 +1436,7 @@ def __xor__(self, h):
         p = self._array_form
         for i in range(self.size):
             a[h[i]] = h[p[i]]
-        return _af_new(a)
+        return self.__class__._af_new(a)
 
     def transpositions(self):
         """
@@ -1519,7 +1519,7 @@ def __invert__(self):
         >>> p*~p == ~p*p == Permutation([0, 1, 2, 3])
         True
         """
-        return _af_new(_af_invert(self._array_form))
+        return self.__class__._af_new(_af_invert(self._array_form))
 
     def __iter__(self):
         """Yield elements from array form.
@@ -1629,10 +1629,10 @@ def next_lex(self):
                 perm[j], perm[i] = perm[i], perm[j]
                 i += 1
                 j -= 1
-        return _af_new(perm)
+        return self.__class__._af_new(perm)
 
     @classmethod
-    def unrank_nonlex(self, n, r):
+    def unrank_nonlex(cls, n, r):
         """
         This is a linear time unranking algorithm that does not
         respect lexicographic order [3].
@@ -1661,7 +1661,7 @@ def _unrank1(n, r, a):
         n = int(n)
         r = r % ifac(n)
         _unrank1(n, r, id_perm)
-        return _af_new(id_perm)
+        return cls._af_new(id_perm)
 
     def rank_nonlex(self, inv_perm=None):
         """
@@ -2125,7 +2125,7 @@ def commutator(self, x):
         invb = [None]*n
         for i in range(n):
             invb[b[i]] = i
-        return _af_new([a[b[inva[i]]] for i in invb])
+        return self.__class__._af_new([a[b[inva[i]]] for i in invb])
 
     def signature(self):
         """
diff --git a/test_subclass_issue.py b/test_subclass_issue.py
new file mode 100644
index 0000000000..fe1da66139
--- /dev/null
+++ b/test_subclass_issue.py
@@ -0,0 +1,33 @@
+from sympy.combinatorics.permutations import Permutation
+
+class MyPermutation(Permutation):
+    """A subclass of Permutation to test subclassing"""
+    def my_method(self):
+        return "This is MyPermutation"
+
+# Test 1: Creating from array form
+print("Test 1: Creating from array form")
+p1 = MyPermutation([0, 2, 1])
+print(f"Type: {type(p1)}")
+print(f"Is MyPermutation? {isinstance(p1, MyPermutation)}")
+print(f"Is Permutation? {isinstance(p1, Permutation)}")
+
+# Test 2: Creating from cycle form
+print("\nTest 2: Creating from cycle form")
+p2 = MyPermutation([[0, 1], [2, 3]])
+print(f"Type: {type(p2)}")
+print(f"Is MyPermutation? {isinstance(p2, MyPermutation)}")
+
+# Test 3: Creating empty permutation
+print("\nTest 3: Creating empty permutation")
+p3 = MyPermutation()
+print(f"Type: {type(p3)}")
+print(f"Is MyPermutation? {isinstance(p3, MyPermutation)}")
+
+# Test 4: Operations that return new permutations
+print("\nTest 4: Operations that return new permutations")
+p4 = MyPermutation([1, 0, 2])
+p5 = MyPermutation([0, 2, 1])
+p6 = p4 * p5
+print(f"Type of product: {type(p6)}")
+print(f"Is MyPermutation? {isinstance(p6, MyPermutation)}")
diff --git a/update_af_new.py b/update_af_new.py
new file mode 100644
index 0000000000..c2b07ceb9f
--- /dev/null
+++ b/update_af_new.py
@@ -0,0 +1,39 @@
+import re
+
+# Read the file
+with open('/testbed/sympy/combinatorics/permutations.py', 'r') as f:
+    content = f.read()
+
+# Find all method definitions and track whether they are classmethods or instance methods
+lines = content.split('\n')
+method_types = {}  # line_number -> 'classmethod' or 'instance'
+current_method = None
+current_type = None
+
+for i, line in enumerate(lines):
+    if '@classmethod' in line:
+        current_type = 'classmethod'
+    elif '@staticmethod' in line:
+        current_type = 'staticmethod'
+    elif line.strip().startswith('def '):
+        if current_type is None:
+            current_type = 'instance'
+        method_types[i] = current_type
+        current_type = None
+
+# Find all uses of _af_new
+for i, line in enumerate(lines):
+    if '_af_new(' in line and 'def _af_new' not in line and '_af_new =' not in line:
+        # Find which method this belongs to
+        method_line = None
+        for j in range(i, -1, -1):
+            if j in method_types:
+                method_line = j
+                break
+        
+        if method_line is not None:
+            method_type = method_types[method_line]
+            print(f"Line {i+1}: {line.strip()}")
+            print(f"  Method type: {method_type}")
+            print(f"  Method definition at line {method_line+1}: {lines[method_line].strip()}")
+            print()
