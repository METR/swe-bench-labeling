diff --git a/xarray/core/computation.py b/xarray/core/computation.py
index 7676d8e5..7b1a9513 100644
--- a/xarray/core/computation.py
+++ b/xarray/core/computation.py
@@ -1829,7 +1829,7 @@ def where(cond, x, y, keep_attrs=None):
     if keep_attrs is True:
         # keep the attributes of x, the second parameter, by default to
         # be consistent with the `where` method of `DataArray` and `Dataset`
-        keep_attrs = lambda attrs, context: attrs[1]
+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else (attrs[0] if attrs else {})
 
     # alignment for three arguments is complicated, so don't support it yet
     return apply_ufunc(
diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py
index 6a86738a..fa266a16 100644
--- a/xarray/tests/test_computation.py
+++ b/xarray/tests/test_computation.py
@@ -1929,6 +1929,27 @@ def test_where_attrs() -> None:
     assert_identical(expected, actual)
 
 
+def test_where_scalar_with_keep_attrs() -> None:
+    """Test for issue where xr.where fails with scalar arguments when keep_attrs=True."""
+    # Test with explicit keep_attrs=True and scalar x, y
+    cond = xr.DataArray([True, False, True], dims="x", attrs={"cond": "attr"})
+    actual = xr.where(cond, 1, 0, keep_attrs=True)
+    expected = xr.DataArray([1, 0, 1], dims="x", attrs={"cond": "attr"})
+    assert_identical(expected, actual)
+    
+    # Test with x as DataArray and y as scalar
+    x = xr.DataArray([10, 20, 30], dims="x", attrs={"x": "attr"})
+    actual = xr.where(cond, x, 0, keep_attrs=True)
+    expected = xr.DataArray([10, 0, 30], dims="x", attrs={"x": "attr"})
+    assert_identical(expected, actual)
+    
+    # Test with global keep_attrs=True
+    with xr.set_options(keep_attrs=True):
+        actual = xr.where(cond, 1, 0)
+        expected = xr.DataArray([1, 0, 1], dims="x", attrs={"cond": "attr"})
+        assert_identical(expected, actual)
+
+
 @pytest.mark.parametrize("use_dask", [True, False])
 @pytest.mark.parametrize("use_datetime", [True, False])
 def test_polyval(use_dask, use_datetime) -> None:
