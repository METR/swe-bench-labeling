{"instance_id": "astropy__astropy-7166", "score": "C", "diff": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..c39c388d06 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,14 +528,23 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n-                val.__doc__ is None):\n-                for base in cls.__mro__[1:]:\n-                    super_method = getattr(base, key, None)\n-                    if super_method is not None:\n-                        val.__doc__ = super_method.__doc__\n-                        break\n+            if is_public_member(key):\n+                if inspect.isfunction(val) and val.__doc__ is None:\n+                    # Handle regular methods\n+                    for base in cls.__mro__[1:]:\n+                        super_method = getattr(base, key, None)\n+                        if super_method is not None:\n+                            val.__doc__ = super_method.__doc__\n+                            break\n+                elif isinstance(val, property) and val.__doc__ is None:\n+                    # Handle properties\n+                    for base in cls.__mro__[1:]:\n+                        super_prop = getattr(base, key, None)\n+                        if isinstance(super_prop, property) and super_prop.__doc__ is not None:\n+                            # Create a new property with the inherited docstring\n+                            new_prop = property(val.fget, val.fset, val.fdel, super_prop.__doc__)\n+                            setattr(cls, key, new_prop)\n+                            break\n \n         super().__init__(name, bases, dct)\n \n", "gold_standard_diff": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex 4b73e1267900..40d53570cd66 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -149,6 +149,8 @@ astropy.units\n astropy.utils\n ^^^^^^^^^^^^^\n \n+- ``InheritDocstrings`` now also works on class properties. [#7166]\n+\n astropy.visualization\n ^^^^^^^^^^^^^^^^^^^^^\n \ndiff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d187a..c3cbad4c78a0 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -4,9 +4,6 @@\n A \"grab bag\" of relatively small general-purpose utilities that don't have\n a clear module/package to live in.\n \"\"\"\n-\n-\n-\n import abc\n import contextlib\n import difflib\n@@ -27,7 +24,6 @@\n from collections import defaultdict, OrderedDict\n \n \n-\n __all__ = ['isiterable', 'silence', 'format_exception', 'NumpyRNGContext',\n            'find_api_page', 'is_path_hidden', 'walk_skip_hidden',\n            'JsonCustomEncoder', 'indent', 'InheritDocstrings',\n@@ -528,9 +524,9 @@ def is_public_member(key):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n-                val.__doc__ is None):\n+            if ((inspect.isfunction(val) or inspect.isdatadescriptor(val)) and\n+                    is_public_member(key) and\n+                    val.__doc__ is None):\n                 for base in cls.__mro__[1:]:\n                     super_method = getattr(base, key, None)\n                     if super_method is not None:\ndiff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 4f632e8d1522..e6501c949784 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -80,14 +80,26 @@ def __call__(self, *args):\n             \"FOO\"\n             pass\n \n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n     class Subclass(Base):\n         def __call__(self, *args):\n             pass\n \n+        @property\n+        def bar(self):\n+            return 42\n+\n     if Base.__call__.__doc__ is not None:\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n+\n \n def test_set_locale():\n     # First, test if the required locales are available\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/7166"}