{"instance_id": "django__django-12419", "score": "C", "diff": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 09c9b95d26..8bb59a4037 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -637,6 +637,6 @@ SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n-SECURE_REFERRER_POLICY = None\n+SECURE_REFERRER_POLICY = 'same-origin'\n SECURE_SSL_HOST = None\n SECURE_SSL_REDIRECT = False\ndiff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex b4a5bdc48f..7bf748d700 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -216,7 +216,7 @@ name for a local memory cache. e.g.::\n ``OPTIONS``\n ~~~~~~~~~~~\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n Extra parameters to pass to the cache backend. Available parameters\n vary depending on your cache backend.\n@@ -308,7 +308,7 @@ keep the cookies in-memory instead of on persistent storage.\n ``CSRF_COOKIE_DOMAIN``\n ----------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The domain to be used when setting the CSRF cookie.  This can be useful for\n easily allowing cross-subdomain requests to be excluded from the normal cross\n@@ -639,7 +639,7 @@ default port. Not used with SQLite.\n ``TIME_ZONE``\n ~~~~~~~~~~~~~\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n A string representing the time zone for this database connection or ``None``.\n This inner option of the :setting:`DATABASES` setting accepts the same values\n@@ -740,7 +740,7 @@ The following keys in the ``TEST`` dictionary are available:\n ``CHARSET``\n ^^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The character set encoding used to create the test database. The value of this\n string is passed directly through to the database, so its format is\n@@ -756,7 +756,7 @@ Supported by the PostgreSQL_ (``postgresql``) and MySQL_ (``mysql``) backends.\n ``COLLATION``\n ^^^^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The collation order to use when creating the test database. This value is\n passed directly to the backend, so its format is backend-specific.\n@@ -793,7 +793,7 @@ When set to ``False``, migrations won't run when creating the test database.\n ``MIRROR``\n ^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The alias of the database that this database should mirror during\n testing.\n@@ -809,7 +809,7 @@ configurations of multiple databases. See the documentation on\n ``NAME``\n ^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The name of database to use when running the test suite.\n \n@@ -871,7 +871,7 @@ beginning of the tests and dropped at the end.\n ``USER``\n ^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n This is an Oracle-specific setting.\n \n@@ -883,7 +883,7 @@ when running tests. If not provided, Django will use ``'test_' + USER``.\n ``PASSWORD``\n ^^^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n This is an Oracle-specific setting.\n \n@@ -907,7 +907,7 @@ If set to ``True``, Oracle Managed Files (OMF) tablespaces will be used.\n ``TBLSPACE``\n ^^^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n This is an Oracle-specific setting.\n \n@@ -919,7 +919,7 @@ provided, Django will use ``'test_' + USER``.\n ``TBLSPACE_TMP``\n ^^^^^^^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n This is an Oracle-specific setting.\n \n@@ -931,7 +931,7 @@ not provided, Django will use ``'test_' + USER + '_temp'``.\n ``DATAFILE``\n ^^^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n This is an Oracle-specific setting.\n \n@@ -943,7 +943,7 @@ use ``TBLSPACE + '.dbf'``.\n ``DATAFILE_TMP``\n ^^^^^^^^^^^^^^^^\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n This is an Oracle-specific setting.\n \n@@ -1450,7 +1450,7 @@ exclusive, so only set one of those settings to ``True``.\n ``EMAIL_SSL_CERTFILE``\n ----------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can\n optionally specify the path to a PEM-formatted certificate chain file to use\n@@ -1461,7 +1461,7 @@ for the SSL connection.\n ``EMAIL_SSL_KEYFILE``\n ---------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can\n optionally specify the path to a PEM-formatted private key file to use for the\n@@ -1478,7 +1478,7 @@ file and private key file are handled.\n ``EMAIL_TIMEOUT``\n -----------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n Specifies a timeout in seconds for blocking operations like the connection\n attempt.\n@@ -1517,7 +1517,7 @@ See also :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`.\n ``FILE_UPLOAD_DIRECTORY_PERMISSIONS``\n -------------------------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The numeric mode to apply to directories created in the process of uploading\n files.\n@@ -1570,7 +1570,7 @@ when using the :djadmin:`collectstatic` management command. See\n ``FILE_UPLOAD_TEMP_DIR``\n ------------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The directory to store data to (typically files larger than\n :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`) temporarily while uploading files.\n@@ -1614,7 +1614,7 @@ See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`.\n ``FORCE_SCRIPT_NAME``\n ---------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n If not ``None``, this will be used as the value of the ``SCRIPT_NAME``\n environment variable in any HTTP request. This setting can be used to override\n@@ -1639,7 +1639,7 @@ render API <low-level-widget-render-api>`.\n ``FORMAT_MODULE_PATH``\n ----------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n A full Python path to a Python package that contains custom format definitions\n for project locales. If not ``None``, Django will check for a ``formats.py``\n@@ -1793,7 +1793,7 @@ See :ref:`how-django-discovers-language-preference` for more details.\n ``LANGUAGE_COOKIE_AGE``\n -----------------------\n \n-Default: ``None`` (expires at browser close)\n+Default: ``'same-origin'`` (expires at browser close)\n \n The age of the language cookie, in seconds.\n \n@@ -1802,7 +1802,7 @@ The age of the language cookie, in seconds.\n ``LANGUAGE_COOKIE_DOMAIN``\n --------------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The domain to use for the language cookie. Set this to a string such as\n ``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard\n@@ -1874,7 +1874,7 @@ deletes the one.\n \n .. versionadded:: 3.0\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The value of the `SameSite`_ flag on the language cookie. This flag prevents the\n cookie from being sent in cross-site requests.\n@@ -2074,7 +2074,7 @@ Example: ``\"http://media.example.com/\"``\n ``MIDDLEWARE``\n --------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n A list of middleware to use. See :doc:`/topics/http/middleware`.\n \n@@ -2317,7 +2317,7 @@ already have it.\n ``SECURE_PROXY_SSL_HEADER``\n ---------------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n A tuple representing a HTTP header/value combination that signifies a request\n is secure. This controls the behavior of the request object's ``is_secure()``\n@@ -2395,7 +2395,7 @@ from URL paths, so patterns shouldn't include them, e.g.\n \n .. versionadded:: 3.0\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n If configured, the :class:`~django.middleware.security.SecurityMiddleware` sets\n the :ref:`referrer-policy` header on all responses that do not already have it\n@@ -2406,7 +2406,7 @@ to the value provided.\n ``SECURE_SSL_HOST``\n -------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n If a string (e.g. ``secure.example.com``), all SSL redirects will be directed\n to this host rather than the originally-requested host\n@@ -2837,7 +2837,7 @@ enabled if a proxy which sets this header is in use.\n ``WSGI_APPLICATION``\n --------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The full Python path of the WSGI application object that Django's built-in\n servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin\n@@ -2949,7 +2949,7 @@ redirected for login when using the\n ``LOGOUT_REDIRECT_URL``\n -----------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are\n redirected after logout if :class:`~django.contrib.auth.views.LogoutView`\n@@ -3139,7 +3139,7 @@ The age of session cookies, in seconds.\n ``SESSION_COOKIE_DOMAIN``\n -------------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The domain to use for session cookies. Set this to a string such as\n ``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard\n@@ -3289,7 +3289,7 @@ Whether to expire the session when the user closes their browser. See\n ``SESSION_FILE_PATH``\n ---------------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n If you're using file-based session storage, this sets the directory in\n which Django will store session data. When the default value (``None``) is\n@@ -3354,7 +3354,7 @@ Settings for :mod:`django.contrib.staticfiles`.\n ``STATIC_ROOT``\n ---------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n The absolute path to the directory where :djadmin:`collectstatic` will collect\n static files for deployment.\n@@ -3383,7 +3383,7 @@ usage.\n ``STATIC_URL``\n --------------\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n URL to use when referring to static files located in :setting:`STATIC_ROOT`.\n \ndiff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt\nindex 4a165156e1..64bc0aba58 100644\n--- a/docs/releases/3.1.txt\n+++ b/docs/releases/3.1.txt\n@@ -226,6 +226,16 @@ Logging\n \n * ...\n \n+Security\n+~~~~~~~\n+\n+* The default value of the :setting:`SECURE_REFERRER_POLICY` setting is changed\n+  from ``None`` to ``'same-origin'``. This makes Django applications more\n+  secure by default, preventing the ``Referer`` header from being sent to\n+  external origins. Sites can still disable this protection by setting the\n+  value to ``None``.\n+\n+\n Management Commands\n ~~~~~~~~~~~~~~~~~~~\n \n@@ -368,6 +378,17 @@ backends.\n * ``DatabaseOperations.fetch_returned_insert_columns()`` now requires an\n   additional ``returning_params`` argument.\n \n+\n+Security\n+--------\n+\n+* The :setting:`SECURE_REFERRER_POLICY` setting now defaults to ``'same-origin'``.\n+  With this configured, :class:`~django.middleware.security.SecurityMiddleware`\n+  sets the :ref:`referrer-policy` header to ``same-origin`` on all responses that\n+  do not already have it. This prevents the ``Referer`` header from being sent to\n+  other origins. If you need the previous behavior, explicitly set\n+  :setting:`SECURE_REFERRER_POLICY` to ``None``.\n+\n * ``connection.timezone`` property is now ``'UTC'`` by default, or the\n   :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` when :setting:`USE_TZ` is ``True``\n   on databases that support time zones. Previously, it was ``None`` on\ndiff --git a/docs/releases/3.1.txt.bak b/docs/releases/3.1.txt.bak\nnew file mode 100644\nindex 0000000000..4a165156e1\n--- /dev/null\n+++ b/docs/releases/3.1.txt.bak\n@@ -0,0 +1,522 @@\n+============================================\n+Django 3.1 release notes - UNDER DEVELOPMENT\n+============================================\n+\n+*Expected August 2020*\n+\n+Welcome to Django 3.1!\n+\n+These release notes cover the :ref:`new features <whats-new-3.1>`, as well as\n+some :ref:`backwards incompatible changes <backwards-incompatible-3.1>` you'll\n+want to be aware of when upgrading from Django 3.0 or earlier. We've\n+:ref:`dropped some features<removed-features-3.1>` that have reached the end of\n+their deprecation cycle, and we've :ref:`begun the deprecation process for\n+some features <deprecated-features-3.1>`.\n+\n+See the :doc:`/howto/upgrade-version` guide if you're updating an existing\n+project.\n+\n+Python compatibility\n+====================\n+\n+Django 3.1 supports Python 3.6, 3.7, and 3.8. We **highly recommend** and only\n+officially support the latest release of each series.\n+\n+.. _whats-new-3.1:\n+\n+What's new in Django 3.1\n+========================\n+\n+Minor features\n+--------------\n+\n+:mod:`django.contrib.admin`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* The new ``django.contrib.admin.EmptyFieldListFilter`` for\n+  :attr:`.ModelAdmin.list_filter` allows filtering on empty values (empty\n+  strings and nulls) in the admin changelist view.\n+\n+* Filters in the right sidebar of the admin changelist view now contains a link\n+  to clear all filters.\n+\n+:mod:`django.contrib.admindocs`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+:mod:`django.contrib.auth`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* The default iteration count for the PBKDF2 password hasher is increased from\n+  180,000 to 216,000.\n+\n+* Added the :setting:`PASSWORD_RESET_TIMEOUT` setting to define the minimum\n+  number of seconds a password reset link is valid for. This is encouraged\n+  instead of deprecated ``PASSWORD_RESET_TIMEOUT_DAYS``, which will be removed\n+  in Django 4.0.\n+\n+:mod:`django.contrib.contenttypes`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+:mod:`django.contrib.gis`\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* :lookup:`relate` lookup is now supported on MariaDB.\n+\n+* Added the :attr:`.LinearRing.is_counterclockwise` property.\n+\n+* :class:`~django.contrib.gis.db.models.functions.AsGeoJSON` is now supported\n+  on Oracle.\n+\n+* Added the :class:`~django.contrib.gis.db.models.functions.AsWKB` and\n+  :class:`~django.contrib.gis.db.models.functions.AsWKT` functions.\n+\n+:mod:`django.contrib.messages`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+:mod:`django.contrib.postgres`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* The new :class:`~django.contrib.postgres.indexes.BloomIndex` class allows\n+  creating ``bloom`` indexes in the database. The new\n+  :class:`~django.contrib.postgres.operations.BloomExtension` migration\n+  operation installs the ``bloom`` extension to add support for this index.\n+\n+* :meth:`~django.db.models.Model.get_FOO_display` now supports\n+  :class:`~django.contrib.postgres.fields.ArrayField` and\n+  :class:`~django.contrib.postgres.fields.RangeField`.\n+\n+* The new :lookup:`rangefield.lower_inc`, :lookup:`rangefield.lower_inf`,\n+  :lookup:`rangefield.upper_inc`, and :lookup:`rangefield.upper_inf` allows\n+  querying :class:`~django.contrib.postgres.fields.RangeField` by a bound type.\n+\n+* :lookup:`rangefield.contained_by` now supports\n+  :class:`~django.db.models.SmallAutoField`,\n+  :class:`~django.db.models.AutoField`,\n+  :class:`~django.db.models.BigAutoField`,\n+  :class:`~django.db.models.SmallIntegerField`, and\n+  :class:`~django.db.models.DecimalField`.\n+\n+* :class:`~django.contrib.postgres.search.SearchQuery` now supports\n+  ``'websearch'`` search type on PostgreSQL 11+.\n+\n+:mod:`django.contrib.redirects`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+:mod:`django.contrib.sessions`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* The :setting:`SESSION_COOKIE_SAMESITE` setting now allows ``'None'`` (string)\n+  value to explicitly state that the cookie is sent with all same-site and\n+  cross-site requests.\n+\n+:mod:`django.contrib.sitemaps`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+:mod:`django.contrib.sites`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+:mod:`django.contrib.staticfiles`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* The :setting:`STATICFILES_DIRS` setting now supports :class:`pathlib.Path`.\n+\n+:mod:`django.contrib.syndication`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+Cache\n+~~~~~\n+\n+* The :func:`~django.views.decorators.cache.cache_control` decorator and\n+  :func:`~django.utils.cache.patch_cache_control` method now support multiple\n+  field names in the ``no-cache`` directive for the ``Cache-Control`` header,\n+  according to :rfc:`7234#section-5.2.2.2`.\n+\n+* :meth:`~django.core.caches.cache.delete` now returns ``True`` if the key was\n+  successfully deleted, ``False`` otherwise.\n+\n+CSRF\n+~~~~\n+\n+* The :setting:`CSRF_COOKIE_SAMESITE` setting now allows ``'None'`` (string)\n+  value to explicitly state that the cookie is sent with all same-site and\n+  cross-site requests.\n+\n+Email\n+~~~~~\n+\n+* The :setting:`EMAIL_FILE_PATH` setting, used by the :ref:`file email backend\n+  <topic-email-file-backend>`, now supports :class:`pathlib.Path`.\n+\n+Error Reporting\n+~~~~~~~~~~~~~~~\n+\n+* :class:`django.views.debug.SafeExceptionReporterFilter` now filters sensitive\n+  values from ``request.META`` in exception reports.\n+\n+* The new :attr:`.SafeExceptionReporterFilter.cleansed_substitute` and\n+  :attr:`.SafeExceptionReporterFilter.hidden_settings` attributes allow\n+  customization of sensitive settings and ``request.META`` filtering in\n+  exception reports.\n+\n+* The technical 404 debug view now respects\n+  :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` when applying settings\n+  filtering.\n+\n+* The new :setting:`DEFAULT_EXCEPTION_REPORTER` allows providing a\n+  :class:`django.views.debug.ExceptionReporter` subclass to customize exception\n+  report generation. See :ref:`custom-error-reports` for details.\n+\n+File Storage\n+~~~~~~~~~~~~\n+\n+* ``FileSystemStorage.save()`` method now supports :class:`pathlib.Path`.\n+\n+File Uploads\n+~~~~~~~~~~~~\n+\n+* ...\n+\n+\n+Forms\n+~~~~~\n+\n+* :class:`~django.forms.ModelChoiceIterator`, used by\n+  :class:`~django.forms.ModelChoiceField` and\n+  :class:`~django.forms.ModelMultipleChoiceField`, now uses\n+  :class:`~django.forms.ModelChoiceIteratorValue` that can be used by widgets\n+  to access model instances. See :ref:`iterating-relationship-choices` for\n+  details.\n+\n+* :class:`django.forms.DateTimeField` now accepts dates in a subset of ISO 8601\n+  datetime formats, including optional timezone (e.g. ``2019-10-10T06:47``,\n+  ``2019-10-10T06:47:23+04:00``, or ``2019-10-10T06:47:23Z``). Additionally, it\n+  now uses ``DATE_INPUT_FORMATS`` in addition to ``DATETIME_INPUT_FORMATS``\n+  when converting a field input to a ``datetime`` value.\n+\n+Generic Views\n+~~~~~~~~~~~~~\n+\n+* ...\n+\n+Internationalization\n+~~~~~~~~~~~~~~~~~~~~\n+\n+* The :setting:`LANGUAGE_COOKIE_SAMESITE` setting now allows ``'None'``\n+  (string) value to explicitly state that the cookie is sent with all same-site\n+  and cross-site requests.\n+\n+* Added support and translations for the Algerian Arabic language.\n+\n+Logging\n+~~~~~~~\n+\n+* ...\n+\n+Management Commands\n+~~~~~~~~~~~~~~~~~~~\n+\n+* ...\n+\n+Migrations\n+~~~~~~~~~~\n+\n+* Migrations are now loaded also from directories without ``__init__.py``\n+  files.\n+\n+Models\n+~~~~~~\n+\n+* The new :class:`~django.db.models.functions.ExtractIsoWeekDay` function\n+  extracts ISO-8601 week days from :class:`~django.db.models.DateField` and\n+  :class:`~django.db.models.DateTimeField`, and the new :lookup:`iso_week_day`\n+  lookup allows querying by an ISO-8601 day of week.\n+\n+* :meth:`.QuerySet.explain` now supports:\n+\n+  * ``TREE`` format on MySQL 8.0.16+,\n+  * ``analyze`` option on MySQL 8.0.18+ and MariaDB.\n+\n+* Added :class:`~django.db.models.PositiveBigIntegerField` which acts much like\n+  a :class:`~django.db.models.PositiveIntegerField` except that it only allows\n+  values under a certain (database-dependent) limit. Values from ``0`` to\n+  ``9223372036854775807`` are safe in all databases supported by Django.\n+\n+* The new :class:`~django.db.models.RESTRICT` option for\n+  :attr:`~django.db.models.ForeignKey.on_delete` argument of ``ForeignKey`` and\n+  ``OneToOneField`` emulates the behavior of the SQL constraint ``ON DELETE\n+  RESTRICT``.\n+\n+* :attr:`.CheckConstraint.check` now supports boolean expressions.\n+\n+* The :meth:`.RelatedManager.add`, :meth:`~.RelatedManager.create`, and\n+  :meth:`~.RelatedManager.set` methods now accept callables as values in the\n+  ``through_defaults`` argument.\n+\n+Pagination\n+~~~~~~~~~~\n+\n+* :class:`~django.core.paginator.Paginator` can now be iterated over to yield\n+  its pages.\n+\n+Requests and Responses\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+* If :setting:`ALLOWED_HOSTS` is empty and ``DEBUG=True``, subdomains of\n+  localhost are now allowed in the ``Host`` header, e.g. ``static.localhost``.\n+\n+* :meth:`.HttpResponse.set_cookie` and :meth:`.HttpResponse.set_signed_cookie`\n+  now allow using ``samesite='None'`` (string) to explicitly state that the\n+  cookie is sent with all same-site and cross-site requests.\n+\n+* The new :meth:`.HttpRequest.accepts` method returns whether the request\n+  accepts the given MIME type according to the ``Accept`` HTTP header.\n+\n+Serialization\n+~~~~~~~~~~~~~\n+\n+* ...\n+\n+Signals\n+~~~~~~~\n+\n+* ...\n+\n+Templates\n+~~~~~~~~~\n+\n+* The renamed :ttag:`translate` and :ttag:`blocktranslate` template tags are\n+  introduced for internationalization in template code. The older :ttag:`trans`\n+  and :ttag:`blocktrans` template tags aliases continue to work, and will be\n+  retained for the foreseeable future.\n+\n+Tests\n+~~~~~\n+\n+* :class:`~django.test.SimpleTestCase` now implements the ``debug()`` method to\n+  allow running a test without collecting the result and catching exceptions.\n+  This can be used to support running tests under a debugger.\n+\n+* The new :setting:`MIGRATE <TEST_MIGRATE>` test database setting allows\n+  disabling of migrations during a test database creation.\n+\n+* Django test runner now supports a :option:`test --buffer` option to discard\n+  output for passing tests.\n+\n+URLs\n+~~~~\n+\n+* :ref:`Path converters <registering-custom-path-converters>` can now raise\n+  ``ValueError`` in ``to_url()`` to indicate no match when reversing URLs.\n+\n+Utilities\n+~~~~~~~~~\n+\n+* :func:`~django.utils.encoding.filepath_to_uri` now supports\n+  :class:`pathlib.Path`.\n+\n+* :func:`~django.utils.dateparse.parse_duration` now supports comma separators\n+  for decimal fractions in the ISO 8601 format.\n+\n+* :func:`~django.utils.dateparse.parse_datetime`,\n+  :func:`~django.utils.dateparse.parse_duration`, and\n+  :func:`~django.utils.dateparse.parse_time` now support comma separators for\n+  milliseconds.\n+\n+Validators\n+~~~~~~~~~~\n+\n+* ...\n+\n+Miscellaneous\n+~~~~~~~~~~~~~\n+\n+* The SQLite backend now supports :class:`pathlib.Path` for the ``NAME``\n+  setting.\n+\n+* The ``settings.py`` generated by the :djadmin:`startproject` command now uses\n+  :class:`pathlib.Path` instead of :mod:`os.path` for building filesystem\n+  paths.\n+\n+* The :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` setting is now allowed on\n+  databases that support time zones.\n+\n+.. _backwards-incompatible-3.1:\n+\n+Backwards incompatible changes in 3.1\n+=====================================\n+\n+Database backend API\n+--------------------\n+\n+This section describes changes that may be needed in third-party database\n+backends.\n+\n+* ``DatabaseOperations.fetch_returned_insert_columns()`` now requires an\n+  additional ``returning_params`` argument.\n+\n+* ``connection.timezone`` property is now ``'UTC'`` by default, or the\n+  :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` when :setting:`USE_TZ` is ``True``\n+  on databases that support time zones. Previously, it was ``None`` on\n+  databases that support time zones.\n+\n+Dropped support for MariaDB 10.1\n+--------------------------------\n+\n+Upstream support for MariaDB 10.1 ends in October 2020. Django 3.1 supports\n+MariaDB 10.2 and higher.\n+\n+Miscellaneous\n+-------------\n+\n+* The cache keys used by :ttag:`cache` and generated by\n+  :func:`~django.core.cache.utils.make_template_fragment_key` are different\n+  from the keys generated by older versions of Django. After upgrading to\n+  Django 3.1, the first request to any previously cached template fragment will\n+  be a cache miss.\n+\n+* The logic behind the decision to return a redirection fallback or a 204 HTTP\n+  response from the :func:`~django.views.i18n.set_language` view is now based\n+  on the ``Accept`` HTTP header instead of the ``X-Requested-With`` HTTP header\n+  presence.\n+\n+* The compatibility imports of ``django.core.exceptions.EmptyResultSet`` in\n+  ``django.db.models.query``, ``django.db.models.sql``, and\n+  ``django.db.models.sql.datastructures`` are removed.\n+\n+* The compatibility import of ``django.core.exceptions.FieldDoesNotExist`` in\n+  ``django.db.models.fields`` is removed.\n+\n+* The compatibility imports of ``django.forms.utils.pretty_name()`` and\n+  ``django.forms.boundfield.BoundField`` in ``django.forms.forms`` are removed.\n+\n+* The compatibility imports of ``Context``, ``ContextPopException``, and\n+  ``RequestContext`` in ``django.template.base`` are removed.\n+\n+* The compatibility import of\n+  ``django.contrib.admin.helpers.ACTION_CHECKBOX_NAME`` in\n+  ``django.contrib.admin`` is removed.\n+\n+* The :setting:`STATIC_URL` and :setting:`MEDIA_URL` settings set to relative\n+  paths are now prefixed by the server-provided value of ``SCRIPT_NAME`` (or\n+  ``/`` if not set). This change should not affect settings set to valid URLs\n+  or absolute paths.\n+\n+* :class:`~django.middleware.http.ConditionalGetMiddleware` no longer adds the\n+  ``ETag`` header to responses with an empty\n+  :attr:`~django.http.HttpResponse.content`.\n+\n+* ``django.utils.decorators.classproperty()`` decorator is moved to\n+  ``django.utils.functional.classproperty()``.\n+\n+* :tfilter:`floatformat` template filter now outputs (positive) ``0`` for\n+  negative numbers which round to zero.\n+\n+* :attr:`Meta.ordering <django.db.models.Options.ordering>` and\n+  :attr:`Meta.unique_together <django.db.models.Options.unique_together>`\n+  options on models in ``django.contrib`` modules that were formerly tuples are\n+  now lists.\n+\n+* The admin calendar widget now handles two-digit years according to the Open\n+  Group Specification, i.e. values between 69 and 99 are mapped to the previous\n+  century, and values between 0 and 68 are mapped to the current century.\n+\n+* Date-only formats are removed from the default list for\n+  :setting:`DATETIME_INPUT_FORMATS`.\n+\n+* The :class:`~django.forms.FileInput` widget no longer renders with the\n+  ``required`` HTML attribute when initial data exists.\n+\n+* The undocumented ``django.views.debug.ExceptionReporterFilter`` class is\n+  removed. As per the :ref:`custom-error-reports` documentation, classes to be\n+  used with :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` needs to inherit from\n+  :class:`django.views.debug.SafeExceptionReporterFilter`.\n+\n+* The cache timeout set by :func:`~django.views.decorators.cache.cache_page`\n+  decorator now takes precedence over the ``max-age`` directive from the\n+  ``Cache-Control`` header.\n+\n+* Providing a non-local remote field in the :attr:`.ForeignKey.to_field`\n+  argument now raises :class:`~django.core.exceptions.FieldError`.\n+\n+.. _deprecated-features-3.1:\n+\n+Features deprecated in 3.1\n+==========================\n+\n+Miscellaneous\n+-------------\n+\n+* ``PASSWORD_RESET_TIMEOUT_DAYS`` setting is deprecated in favor of\n+  :setting:`PASSWORD_RESET_TIMEOUT`.\n+\n+* The undocumented usage of the :lookup:`isnull` lookup with non-boolean values\n+  as the right-hand side is deprecated, use ``True`` or ``False`` instead.\n+\n+* The barely documented ``django.db.models.query_utils.InvalidQuery`` exception\n+  class is deprecated in favor of\n+  :class:`~django.core.exceptions.FieldDoesNotExist` and\n+  :class:`~django.core.exceptions.FieldError`.\n+\n+* The ``django-admin.py`` entry point is deprecated in favor of\n+  ``django-admin``.\n+\n+* The ``HttpRequest.is_ajax()`` method is deprecated as it relied on a\n+  jQuery-specific way of signifying AJAX calls, while current usage tends to\n+  use the JavaScript `Fetch API\n+  <https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API>`_. Depending on\n+  your use case, you can either write your own AJAX detection method, or use\n+  the new :meth:`.HttpRequest.accepts` method if your code depends on the\n+  client ``Accept`` HTTP header.\n+\n+  If you are writing your own AJAX detection method, ``request.is_ajax()`` can\n+  be reproduced exactly as\n+  ``request.headers.get('x-requested-with') == 'XMLHttpRequest'``.\n+\n+* The encoding format of cookies values used by\n+  :class:`~django.contrib.messages.storage.cookie.CookieStorage` is different\n+  from the format generated by older versions of Django. Support for the old\n+  format remains until Django 4.0.\n+\n+.. _removed-features-3.1:\n+\n+Features removed in 3.1\n+=======================\n+\n+These features have reached the end of their deprecation cycle and are removed\n+in Django 3.1.\n+\n+See :ref:`deprecated-features-2.2` for details on these changes, including how\n+to remove usage of these features.\n+\n+* ``django.utils.timezone.FixedOffset`` is removed.\n+\n+* ``django.core.paginator.QuerySetPaginator`` is removed.\n+\n+* A model's ``Meta.ordering`` doesn't affect ``GROUP BY`` queries.\n+\n+* ``django.contrib.postgres.fields.FloatRangeField`` and\n+  ``django.contrib.postgres.forms.FloatRangeField`` are removed.\n+\n+* The ``FILE_CHARSET`` setting is removed.\n+\n+* ``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` is removed.\n+\n+* The ``RemoteUserBackend.configure_user()`` method requires ``request`` as the\n+  first positional argument.\n+\n+* Support for ``SimpleTestCase.allow_database_queries`` and\n+  ``TransactionTestCase.multi_db`` is removed.\n", "gold_standard_diff": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 09c9b95d26d5..8bb59a403756 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -637,6 +637,6 @@ def gettext_noop(s):\n SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n-SECURE_REFERRER_POLICY = None\n+SECURE_REFERRER_POLICY = 'same-origin'\n SECURE_SSL_HOST = None\n SECURE_SSL_REDIRECT = False\ndiff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex b4a5bdc48f9b..8c3f6f2b473f 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -2395,12 +2395,16 @@ from URL paths, so patterns shouldn't include them, e.g.\n \n .. versionadded:: 3.0\n \n-Default: ``None``\n+Default: ``'same-origin'``\n \n If configured, the :class:`~django.middleware.security.SecurityMiddleware` sets\n the :ref:`referrer-policy` header on all responses that do not already have it\n to the value provided.\n \n+.. versionchanged:: 3.1\n+\n+    In older versions, the default value is ``None``.\n+\n .. setting:: SECURE_SSL_HOST\n \n ``SECURE_SSL_HOST``\ndiff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt\nindex 4a165156e13e..903e2510baf3 100644\n--- a/docs/releases/3.1.txt\n+++ b/docs/releases/3.1.txt\n@@ -285,6 +285,19 @@ Requests and Responses\n * The new :meth:`.HttpRequest.accepts` method returns whether the request\n   accepts the given MIME type according to the ``Accept`` HTTP header.\n \n+.. _whats-new-security-3.1:\n+\n+Security\n+~~~~~~~~\n+\n+* The :setting:`SECURE_REFERRER_POLICY` setting now defaults to\n+  ``'same-origin'``. With this configured,\n+  :class:`~django.middleware.security.SecurityMiddleware` sets the\n+  :ref:`referrer-policy` header to ``same-origin`` on all responses that do not\n+  already have it. This prevents the ``Referer`` header being sent to other\n+  origins. If you need the previous behavior, explicitly set\n+  :setting:`SECURE_REFERRER_POLICY` to ``None``.\n+\n Serialization\n ~~~~~~~~~~~~~\n \n@@ -452,6 +465,10 @@ Miscellaneous\n * Providing a non-local remote field in the :attr:`.ForeignKey.to_field`\n   argument now raises :class:`~django.core.exceptions.FieldError`.\n \n+* :setting:`SECURE_REFERRER_POLICY` now defaults to ``'same-origin'``. See the\n+  *What's New* :ref:`Security section <whats-new-security-3.1>` above for more\n+  details.\n+\n .. _deprecated-features-3.1:\n \n Features deprecated in 3.1\ndiff --git a/tests/project_template/test_settings.py b/tests/project_template/test_settings.py\nindex 5617f4a9432e..e8d466938dcb 100644\n--- a/tests/project_template/test_settings.py\n+++ b/tests/project_template/test_settings.py\n@@ -38,6 +38,7 @@ def test_middleware_headers(self):\n             self.assertEqual(headers, [\n                 b'Content-Length: 0',\n                 b'Content-Type: text/html; charset=utf-8',\n+                b'Referrer-Policy: same-origin',\n                 b'X-Content-Type-Options: nosniff',\n                 b'X-Frame-Options: DENY',\n             ])\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12419"}