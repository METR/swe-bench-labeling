{"instance_id": "django__django-11964", "score": "C", "diff": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6ab..2d5902815c 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -65,11 +65,16 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):\n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n-    pass\n+    \n+    def __str__(self):\n+        return str(self.value)\n \n \n class TextChoices(str, Choices):\n     \"\"\"Class for creating enumerated string choices.\"\"\"\n+    \n+    def __str__(self):\n+        return str(self.value)\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\ndiff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6b4bd6e7fd..53904eaf2b 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -143,6 +143,22 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n+    def test_textchoices_str_method(self):\n+        \"\"\"Test that TextChoices.__str__ returns the value, not the enum representation.\"\"\"\n+        self.assertEqual(str(YearInSchool.FRESHMAN), 'FR')\n+        self.assertEqual(str(YearInSchool.SOPHOMORE), 'SO')\n+        self.assertEqual(str(YearInSchool.JUNIOR), 'JR')\n+        # The repr should still show the enum representation\n+        self.assertEqual(repr(YearInSchool.FRESHMAN), \"<YearInSchool.FRESHMAN: 'FR'>\")\n+\n+    def test_integerchoices_str_method(self):\n+        \"\"\"Test that IntegerChoices.__str__ returns the string value, not the enum representation.\"\"\"\n+        self.assertEqual(str(Suit.DIAMOND), '1')\n+        self.assertEqual(str(Suit.SPADE), '2') \n+        self.assertEqual(str(Suit.HEART), '3')\n+        # The repr should still show the enum representation\n+        self.assertEqual(repr(Suit.DIAMOND), '<Suit.DIAMOND: 1>')\n+\n \n class Separator(bytes, models.Choices):\n     FS = b'\\x1c', 'File Separator'\n", "gold_standard_diff": "From dbcd7b064e7278614f29fc45468d461e263d4da7 Mon Sep 17 00:00:00 2001\nFrom: Carlton Gibson <carlton.gibson@noumenal.es>\nDate: Wed, 23 Oct 2019 16:14:06 +0200\nSubject: [PATCH] Fixed #30902 -- Added __str__() for model choice enums.\n\nAllows expected behavior when cast to str, also matching behaviour of\ncreated instances with those fetched from the DB.\n\nThanks to Simon Charette, Nick Pope, and Shai Berger for reviews.\n---\n django/db/models/enums.py  | 8 +++++++-\n tests/model_enums/tests.py | 6 ++++++\n 2 files changed, 13 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6abf5..ae20ef6d937b 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -60,7 +60,13 @@ def values(cls):\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n-    pass\n+\n+    def __str__(self):\n+        \"\"\"\n+        Use value when cast to str, so that Choices set as model instance\n+        attributes are rendered as expected in templates and similar contexts.\n+        \"\"\"\n+        return str(self.value)\n \n \n class IntegerChoices(int, Choices):\ndiff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6b4bd6e7fdd7..e1810e673ab0 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -143,6 +143,12 @@ class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n+    def test_str(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n+\n \n class Separator(bytes, models.Choices):\n     FS = b'\\x1c', 'File Separator'\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11964"}