{"instance_id": "pylint-dev__pylint-6528", "score": "C", "diff": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..9c3610be5 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -31,7 +31,7 @@ from pylint.constants import (\n )\n from pylint.lint.base_options import _make_linter_options\n from pylint.lint.caching import load_results, save_results\n-from pylint.lint.expand_modules import expand_modules\n+from pylint.lint.expand_modules import expand_modules, _is_in_ignore_list_re\n from pylint.lint.message_state_handler import _MessageStateHandler\n from pylint.lint.parallel import check_parallel\n from pylint.lint.report_functions import (\n@@ -564,8 +564,7 @@ class PyLinter(\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n@@ -575,19 +574,35 @@ class PyLinter(\n                 os.path.join(something, \"__init__.py\")\n             ):\n                 skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n+                for root, dirnames, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+                    \n+                    # Filter out ignored directories before descending into them\n+                    dirnames[:] = [\n+                        d for d in dirnames\n+                        if not (\n+                            d in self.config.ignore\n+                            or _is_in_ignore_list_re(d, self.config.ignore_patterns)\n+                            or _is_in_ignore_list_re(os.path.join(root, d), self.config.ignore_paths)\n+                        )\n+                    ]\n+                    \n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        for file in files:\n+                            if file.endswith(\".py\"):\n+                                # Check if file should be ignored\n+                                if (\n+                                    file in self.config.ignore\n+                                    or _is_in_ignore_list_re(file, self.config.ignore_patterns)\n+                                    or _is_in_ignore_list_re(os.path.join(root, file), self.config.ignore_paths)\n+                                ):\n+                                    continue\n+                                yield os.path.join(root, file)\n             else:\n                 yield something\n \ndiff --git a/test_ignore_bug/.a/foo.py b/test_ignore_bug/.a/foo.py\nnew file mode 100644\nindex 000000000..b199df542\n--- /dev/null\n+++ b/test_ignore_bug/.a/foo.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/test_ignore_bug/bar.py b/test_ignore_bug/bar.py\nnew file mode 100644\nindex 000000000..b199df542\n--- /dev/null\n+++ b/test_ignore_bug/bar.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/test_issue_fix.py b/test_issue_fix.py\nnew file mode 100644\nindex 000000000..301b74043\n--- /dev/null\n+++ b/test_issue_fix.py\n@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+\"\"\"Test the exact scenario from the bug report.\"\"\"\n+\n+import os\n+import subprocess\n+import tempfile\n+\n+def test_bug_scenario():\n+    \"\"\"Test the exact scenario from the bug report.\"\"\"\n+    \n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        # Create the exact structure from the bug report\n+        os.makedirs(os.path.join(tmpdir, \".a\"))\n+        \n+        # Create .a/foo.py\n+        with open(os.path.join(tmpdir, \".a\", \"foo.py\"), \"w\") as f:\n+            f.write(\"import re\\n\")\n+        \n+        # Create bar.py\n+        with open(os.path.join(tmpdir, \"bar.py\"), \"w\") as f:\n+            f.write(\"import re\\n\")\n+            \n+        os.chdir(tmpdir)\n+        \n+        # Run all the commands from the bug report\n+        commands = [\n+            ([\"--recursive=y\", \".\"], \"Default should NOT ignore .a (actual default is ^\\.#)\"),\n+            ([\"--recursive=y\", \"--ignore=.a\", \".\"], \"--ignore=.a should ignore .a/foo.py\"),\n+            ([\"--recursive=y\", \"--ignore-paths=.*\\\\.a.*\", \".\"], \"--ignore-paths=.*\\\\.a.* should ignore .a/foo.py\"),\n+            ([\"--recursive=y\", \"--ignore-patterns=^\\\\.a\", \".\"], \"--ignore-patterns=^\\\\.a should ignore .a directory\"),\n+        ]\n+        \n+        for args, description in commands:\n+            print(f\"\\nTesting: {description}\")\n+            print(f\"Command: pylint {' '.join(args)}\")\n+            \n+            cmd = [\"python\", \"-m\", \"pylint\"] + args\n+            result = subprocess.run(cmd, capture_output=True, text=True)\n+            output = result.stdout + result.stderr\n+            \n+            if \"--ignore\" in \" \".join(args) or \"--ignore-paths\" in \" \".join(args) or \"--ignore-patterns\" in \" \".join(args):\n+                # When ignoring, .a/foo.py should NOT appear\n+                if \".a/foo.py\" in output:\n+                    print(f\"FAIL: .a/foo.py should be ignored but was found in output\")\n+                    print(f\"Output:\\n{output}\")\n+                    return False\n+                else:\n+                    print(\"PASS: .a/foo.py correctly ignored\")\n+            else:\n+                # Default case - with default pattern ^\\.#, .a should be checked\n+                if \".a/foo.py\" not in output:\n+                    print(f\"FAIL: .a/foo.py should be checked but was not found in output\")\n+                    print(f\"Output:\\n{output}\")\n+                    return False\n+                else:\n+                    print(\"PASS: .a/foo.py correctly checked\")\n+            \n+            # bar.py should always be checked\n+            if \"bar.py\" not in output:\n+                print(f\"FAIL: bar.py should always be checked but was not found\")\n+                print(f\"Output:\\n{output}\")\n+                return False\n+    \n+    print(\"\\nAll tests passed!\")\n+    return True\n+\n+if __name__ == \"__main__\":\n+    test_bug_scenario()\ndiff --git a/test_recursive_ignore.py b/test_recursive_ignore.py\nnew file mode 100644\nindex 000000000..8964767fb\n--- /dev/null\n+++ b/test_recursive_ignore.py\n@@ -0,0 +1,54 @@\n+#!/usr/bin/env python3\n+\"\"\"Test that pylint respects ignore settings in recursive mode.\"\"\"\n+\n+import os\n+import subprocess\n+import tempfile\n+import shutil\n+\n+def run_pylint(args):\n+    \"\"\"Run pylint and return the output.\"\"\"\n+    cmd = [\"python\", \"-m\", \"pylint\"] + args\n+    result = subprocess.run(cmd, capture_output=True, text=True)\n+    return result.stdout + result.stderr\n+\n+def test_recursive_ignore():\n+    \"\"\"Test that ignore options work with --recursive=y.\"\"\"\n+    \n+    # Create a temporary directory structure\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        # Create test files\n+        os.makedirs(os.path.join(tmpdir, \".hidden\"))\n+        os.makedirs(os.path.join(tmpdir, \"visible\"))\n+        \n+        # Create Python files\n+        with open(os.path.join(tmpdir, \".hidden\", \"test1.py\"), \"w\") as f:\n+            f.write(\"import re  # Should be ignored\\n\")\n+        \n+        with open(os.path.join(tmpdir, \"visible\", \"test2.py\"), \"w\") as f:\n+            f.write(\"import re  # Should be checked\\n\")\n+            \n+        os.chdir(tmpdir)\n+        \n+        # Test 1: --ignore with directory name\n+        print(\"Test 1: --ignore=.hidden\")\n+        output = run_pylint([\"--recursive=y\", \"--ignore=.hidden\", \".\"])\n+        assert \".hidden/test1.py\" not in output, f\"Hidden file should be ignored\\nOutput: {output}\"\n+        assert \"visible/test2.py\" in output, f\"Visible file should be checked\\nOutput: {output}\"\n+        \n+        # Test 2: --ignore-patterns with regex\n+        print(\"Test 2: --ignore-patterns=^\\\\.\")\n+        output = run_pylint([\"--recursive=y\", \"--ignore-patterns=^\\\\.\", \".\"])\n+        assert \".hidden/test1.py\" not in output, f\"Hidden file should be ignored by pattern\\nOutput: {output}\"\n+        assert \"visible/test2.py\" in output, f\"Visible file should be checked\\nOutput: {output}\"\n+        \n+        # Test 3: --ignore-paths with full path regex\n+        print(\"Test 3: --ignore-paths=.*\\\\.hidden.*\")\n+        output = run_pylint([\"--recursive=y\", \"--ignore-paths=.*\\\\.hidden.*\", \".\"])\n+        assert \".hidden/test1.py\" not in output, f\"Hidden file should be ignored by path\\nOutput: {output}\"\n+        assert \"visible/test2.py\" in output, f\"Visible file should be checked\\nOutput: {output}\"\n+        \n+        print(\"\\nAll tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_recursive_ignore()\n", "gold_standard_diff": "diff --git a/ChangeLog b/ChangeLog\nindex f8db6f0e9a..940d71e5e2 100644\n--- a/ChangeLog\n+++ b/ChangeLog\n@@ -308,6 +308,10 @@ What's New in Pylint 2.13.9?\n Release date: TBA\n \n \n+* Respect ignore configuration options with ``--recursive=y``.\n+\n+  Closes #6471\n+\n * Fix false positives for ``no-name-in-module`` and ``import-error`` for ``numpy.distutils`` and ``pydantic``.\n \n   Closes #6497\ndiff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex b20cd873c0..5cacc0371e 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -46,6 +46,20 @@ def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> b\n     return any(file_pattern.match(element) for file_pattern in ignore_list_re)\n \n \n+def _is_ignored_file(\n+    element: str,\n+    ignore_list: list[str],\n+    ignore_list_re: list[Pattern[str]],\n+    ignore_list_paths_re: list[Pattern[str]],\n+) -> bool:\n+    basename = os.path.basename(element)\n+    return (\n+        basename in ignore_list\n+        or _is_in_ignore_list_re(basename, ignore_list_re)\n+        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n+    )\n+\n+\n def expand_modules(\n     files_or_modules: Sequence[str],\n     ignore_list: list[str],\n@@ -61,10 +75,8 @@ def expand_modules(\n \n     for something in files_or_modules:\n         basename = os.path.basename(something)\n-        if (\n-            basename in ignore_list\n-            or _is_in_ignore_list_re(os.path.basename(something), ignore_list_re)\n-            or _is_in_ignore_list_re(something, ignore_list_paths_re)\n+        if _is_ignored_file(\n+            something, ignore_list, ignore_list_re, ignore_list_paths_re\n         ):\n             continue\n         module_path = get_python_path(something)\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b17..c76e8770fa 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -31,7 +31,7 @@\n )\n from pylint.lint.base_options import _make_linter_options\n from pylint.lint.caching import load_results, save_results\n-from pylint.lint.expand_modules import expand_modules\n+from pylint.lint.expand_modules import _is_ignored_file, expand_modules\n from pylint.lint.message_state_handler import _MessageStateHandler\n from pylint.lint.parallel import check_parallel\n from pylint.lint.report_functions import (\n@@ -564,8 +564,7 @@ def initialize(self) -> None:\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n@@ -579,6 +578,16 @@ def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+\n+                    if _is_ignored_file(\n+                        root,\n+                        self.config.ignore,\n+                        self.config.ignore_patterns,\n+                        self.config.ignore_paths,\n+                    ):\n+                        skip_subtrees.append(root)\n+                        continue\n+\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\ndiff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 96d5acfc2e..d83e1cf6bf 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -864,6 +864,49 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n \n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_parameter_value\",\n+    [\n+        (\"--ignore\", \"failing.py\"),\n+        (\"--ignore\", \"ignored_subdirectory\"),\n+        (\"--ignore-patterns\", \"failing.*\"),\n+        (\"--ignore-patterns\", \"ignored_*\"),\n+        (\"--ignore-paths\", \".*directory/ignored.*\"),\n+        (\"--ignore-paths\", \".*ignored.*/failing.*\"),\n+    ],\n+)\n+def test_recursive_ignore(ignore_parameter, ignore_parameter_value) -> None:\n+    run = Run(\n+        [\n+            \"--recursive\",\n+            \"y\",\n+            ignore_parameter,\n+            ignore_parameter_value,\n+            join(REGRTEST_DATA_DIR, \"directory\"),\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(REGRTEST_DATA_DIR, \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(REGRTEST_DATA_DIR, \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    assert ignored_file not in linted_file_paths\n+\n+    for regrtest_data_module in (\n+        (\"directory\", \"subdirectory\", \"subsubdirectory\", \"module.py\"),\n+        (\"directory\", \"subdirectory\", \"module.py\"),\n+        (\"directory\", \"package\", \"module.py\"),\n+        (\"directory\", \"package\", \"subpackage\", \"module.py\"),\n+    ):\n+        module = os.path.abspath(join(REGRTEST_DATA_DIR, *regrtest_data_module))\n+    assert module in linted_file_paths\n+\n+\n def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\ndiff --git a/tests/regrtest_data/directory/ignored_subdirectory/failing.py b/tests/regrtest_data/directory/ignored_subdirectory/failing.py\nnew file mode 100644\nindex 0000000000..b199df5420\n--- /dev/null\n+++ b/tests/regrtest_data/directory/ignored_subdirectory/failing.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/tests/test_self.py b/tests/test_self.py\nindex a186174f1f..143c06f6b1 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1228,17 +1228,91 @@ def test_max_inferred_for_complicated_class_hierarchy() -> None:\n         assert not ex.value.code % 2\n \n     def test_regression_recursive(self):\n+        \"\"\"Tests if error is raised when linter is executed over directory not using --recursive=y\"\"\"\n         self._test_output(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=n\"],\n             expected_output=\"No such file or directory\",\n         )\n \n     def test_recursive(self):\n+        \"\"\"Tests if running linter over directory using --recursive=y\"\"\"\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n         )\n \n+    def test_ignore_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_pattern_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-parameter parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-pattern=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-pattern=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_path_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-path parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-path=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-path=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n@@ -1249,7 +1323,7 @@ def test_recursive_current_dir(self):\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n", "gold_standard_pr_link": "https://github.com/pylint-dev/pylint/pull/6528"}