{"instance_id": "scikit-learn__scikit-learn-12973", "score": "C", "diff": "diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 03b34a0dc..d9380494b 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):\n         y : array-like, shape (n_samples,)\n             target values. Will be cast to X's dtype if necessary\n \n-        copy_X : boolean, optional, default True\n+        copy_X : boolean, optional, default None\n             If ``True``, X will be copied; else, it may be overwritten.\n+            If ``None`` (default), the value from the constructor is used.\n \n         Returns\n         -------\n@@ -1500,8 +1501,12 @@ class LassoLarsIC(LassoLars):\n         \"\"\"\n         X, y = check_X_y(X, y, y_numeric=True)\n \n+        # Use the instance's copy_X value if not explicitly provided in fit\n+        if copy_X is None:\n+            copy_X = self.copy_X\n+\n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(\n-            X, y, self.fit_intercept, self.normalize, self.copy_X)\n+            X, y, self.fit_intercept, self.normalize, copy_X)\n         max_iter = self.max_iter\n \n         Gram = self.precompute\n", "gold_standard_diff": "From aa282278be12c92ba3eed1a0b1e4a8e3fa97b387 Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Sun, 13 Jan 2019 17:05:00 +0100\nSubject: [PATCH 1/8] added check in fit to prevent default value of copy_X\n argument overwriting self.copy_X\n\n---\n sklearn/linear_model/least_angle.py | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 03b34a0dc0379..690444d3369ed 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ def __init__(self, criterion='aic', fit_intercept=True, verbose=False,\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1498,10 +1498,12 @@ def fit(self, X, y, copy_X=True):\n         self : object\n             returns an instance of self.\n         \"\"\"\n+        if copy_X is None:\n+            copy_X = self.copy_X\n         X, y = check_X_y(X, y, y_numeric=True)\n \n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(\n-            X, y, self.fit_intercept, self.normalize, self.copy_X)\n+            X, y, self.fit_intercept, self.normalize, copy_X)\n         max_iter = self.max_iter\n \n         Gram = self.precompute\n\nFrom 333532ec44d6e996ac62421b15305cf1a791a3fe Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Fri, 15 Feb 2019 17:05:21 +0100\nSubject: [PATCH 2/8] added two tests to verify that X is being copied when\n user set copy_X = True and not copied when user set copy_X = False\n\n---\n .../linear_model/tests/test_least_angle.py    | 101 +++++++++++++++++-\n 1 file changed, 100 insertions(+), 1 deletion(-)\n\ndiff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 21496efa67d31..543119dc9c101 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,7 @@\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n@@ -686,3 +686,102 @@ def test_lasso_lars_vs_R_implementation():\n \n     assert_array_almost_equal(r2, skl_betas2, decimal=12)\n     ###########################################################################\n+\n+def test_lasso_lars_copyX_behaviour1():\n+    \"\"\"\n+    Test that user input regading copyX is not being overridden (it was until\n+    at least version 0.21)\n+\n+    Correct behaviour is not to create a copy.\n+\n+    \"\"\"\n+    temp = np.asarray\n+    def ident(x, *args, **kwargs):\n+        return x\n+\n+    np.asarray = ident\n+    lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n+\n+    class CopyCreated(Exception):\n+        pass\n+\n+    class CopyWarningArray(np.ndarray):\n+\n+        def __new__(subtype, shape, dtype=float, buffer=None, offset=0, strides=None, order=None, info=None):\n+            # Create the ndarray instance of our type, given the usual\n+            # ndarray input arguments.  This will call the standard\n+            # ndarray constructor, but return an object of our type.\n+            # It also triggers a call to InfoArray.__array_finalize__\n+            obj = super(CopyWarningArray, subtype).__new__(subtype, shape, dtype, buffer, offset, strides, order)\n+            # set the new 'info' attribute to the value passed\n+            obj.info = info\n+            # Finally, we must return the newly created object:\n+            return obj\n+\n+        def copy(self, *args, **kwargs):\n+            assert False, \"Array is being copied when it should not be copied\"\n+\n+        def __copy__(self, *args, **kwargs):\n+            assert False, \"Array is being copied when it should not be copied\"\n+\n+        def __deepcopy__(self, *args, **kwargs):\n+            assert False, \"Array is being copied when it should not be copied\"\n+\n+    X = CopyWarningArray(shape=(20,5), info=\"CopyWarningArray\")\n+    X[:,:] = 1\n+    y = X[:,2]\n+    lasso_lars.fit(X, y)\n+    np.asarray = temp\n+\n+\n+def test_lasso_lars_copyX_behaviour2():\n+    \"\"\"\n+    Test that user input regading copyX is not being overridden (it was until\n+    at least version 0.21)\n+\n+    Correct behaviour is to create a copy.\n+\n+    \"\"\"\n+    temp = np.asarray\n+\n+    def ident(x, *args, **kwargs):\n+        return x\n+\n+    np.asarray = ident\n+    np.array = ident\n+    lasso_lars = LassoLarsIC(copy_X=True, precompute=False)\n+\n+    class CopyCreated(Exception):\n+        pass\n+\n+    class CopyWarningArray(np.ndarray):\n+\n+        def __new__(subtype, shape, dtype=float, buffer=None, offset=0, strides=None, order=None, info=None):\n+            # Create the ndarray instance of our type, given the usual\n+            # ndarray input arguments.  This will call the standard\n+            # ndarray constructor, but return an object of our type.\n+            # It also triggers a call to InfoArray.__array_finalize__\n+            obj = super(CopyWarningArray, subtype).__new__(subtype, shape, dtype, buffer, offset, strides, order)\n+            # set the new 'info' attribute to the value passed\n+            obj.info = info\n+            # Finally, we must return the newly created object:\n+            return obj\n+\n+        def copy(self, *args, **kwargs):\n+            raise CopyCreated\n+\n+        def __copy__(self, *args, **kwargs):\n+            raise CopyCreated\n+\n+        def __deepcopy__(self, *args, **kwargs):\n+            raise CopyCreated\n+\n+    X = CopyWarningArray(shape=(20, 5), info=\"CopyWarningArray\")\n+    X[:, :] = 1\n+    y = X[:, 2]\n+    # assert_raises(CopyCreated, lasso_lars.fit, X, y)\n+    # lasso_lars.fit(X, y)\n+    with pytest.raises(CopyCreated):\n+        lasso_lars.fit(X, y)\n+    np.asarray = temp\n+    np.array = temp\n\\ No newline at end of file\n\nFrom 74f44a5b82f308bce6e15a80c73d27148aee8752 Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Fri, 15 Feb 2019 17:14:49 +0100\nSubject: [PATCH 3/8] fixed pep8 warnings\n\n---\n .../linear_model/tests/test_least_angle.py    | 29 ++++++++++++-------\n 1 file changed, 18 insertions(+), 11 deletions(-)\n\ndiff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 543119dc9c101..17e26daaaf856 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -687,6 +687,7 @@ def test_lasso_lars_vs_R_implementation():\n     assert_array_almost_equal(r2, skl_betas2, decimal=12)\n     ###########################################################################\n \n+\n def test_lasso_lars_copyX_behaviour1():\n     \"\"\"\n     Test that user input regading copyX is not being overridden (it was until\n@@ -696,23 +697,25 @@ def test_lasso_lars_copyX_behaviour1():\n \n     \"\"\"\n     temp = np.asarray\n+\n     def ident(x, *args, **kwargs):\n         return x\n \n     np.asarray = ident\n     lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n \n-    class CopyCreated(Exception):\n-        pass\n-\n     class CopyWarningArray(np.ndarray):\n \n-        def __new__(subtype, shape, dtype=float, buffer=None, offset=0, strides=None, order=None, info=None):\n+        def __new__(subtype, shape, dtype=float, buffer=None, offset=0,\n+                    strides=None, order=None, info=None):\n             # Create the ndarray instance of our type, given the usual\n             # ndarray input arguments.  This will call the standard\n             # ndarray constructor, but return an object of our type.\n             # It also triggers a call to InfoArray.__array_finalize__\n-            obj = super(CopyWarningArray, subtype).__new__(subtype, shape, dtype, buffer, offset, strides, order)\n+            obj = super(CopyWarningArray, subtype).__new__(subtype, shape,\n+                                                           dtype, buffer,\n+                                                           offset, strides,\n+                                                           order)\n             # set the new 'info' attribute to the value passed\n             obj.info = info\n             # Finally, we must return the newly created object:\n@@ -727,9 +730,9 @@ def __copy__(self, *args, **kwargs):\n         def __deepcopy__(self, *args, **kwargs):\n             assert False, \"Array is being copied when it should not be copied\"\n \n-    X = CopyWarningArray(shape=(20,5), info=\"CopyWarningArray\")\n-    X[:,:] = 1\n-    y = X[:,2]\n+    X = CopyWarningArray(shape=(20, 5), info=\"CopyWarningArray\")\n+    X[:, :] = 1\n+    y = X[:, 2]\n     lasso_lars.fit(X, y)\n     np.asarray = temp\n \n@@ -756,12 +759,16 @@ class CopyCreated(Exception):\n \n     class CopyWarningArray(np.ndarray):\n \n-        def __new__(subtype, shape, dtype=float, buffer=None, offset=0, strides=None, order=None, info=None):\n+        def __new__(subtype, shape, dtype=float, buffer=None, offset=0,\n+                    strides=None, order=None, info=None):\n             # Create the ndarray instance of our type, given the usual\n             # ndarray input arguments.  This will call the standard\n             # ndarray constructor, but return an object of our type.\n             # It also triggers a call to InfoArray.__array_finalize__\n-            obj = super(CopyWarningArray, subtype).__new__(subtype, shape, dtype, buffer, offset, strides, order)\n+            obj = super(CopyWarningArray, subtype).__new__(subtype, shape,\n+                                                           dtype, buffer,\n+                                                           offset, strides,\n+                                                           order)\n             # set the new 'info' attribute to the value passed\n             obj.info = info\n             # Finally, we must return the newly created object:\n@@ -784,4 +791,4 @@ def __deepcopy__(self, *args, **kwargs):\n     with pytest.raises(CopyCreated):\n         lasso_lars.fit(X, y)\n     np.asarray = temp\n-    np.array = temp\n\\ No newline at end of file\n+    np.array = temp\n\nFrom fb35b255d8fd27c930a7f4ab1905369fb8fee113 Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Mon, 18 Feb 2019 23:00:16 +0100\nSubject: [PATCH 4/8] changed test to only focus on values being changed, not\n directly on X being copied.\n\n---\n .../linear_model/tests/test_least_angle.py    | 92 ++-----------------\n 1 file changed, 9 insertions(+), 83 deletions(-)\n\ndiff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 17e26daaaf856..be9e3ed265e6d 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -690,105 +690,31 @@ def test_lasso_lars_vs_R_implementation():\n \n def test_lasso_lars_copyX_behaviour1():\n     \"\"\"\n-    Test that user input regading copyX is not being overridden (it was until\n+    Test that user input regarding copyX is not being overridden (it was until\n     at least version 0.21)\n \n     Correct behaviour is not to create a copy.\n \n     \"\"\"\n-    temp = np.asarray\n-\n-    def ident(x, *args, **kwargs):\n-        return x\n-\n-    np.asarray = ident\n     lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n-\n-    class CopyWarningArray(np.ndarray):\n-\n-        def __new__(subtype, shape, dtype=float, buffer=None, offset=0,\n-                    strides=None, order=None, info=None):\n-            # Create the ndarray instance of our type, given the usual\n-            # ndarray input arguments.  This will call the standard\n-            # ndarray constructor, but return an object of our type.\n-            # It also triggers a call to InfoArray.__array_finalize__\n-            obj = super(CopyWarningArray, subtype).__new__(subtype, shape,\n-                                                           dtype, buffer,\n-                                                           offset, strides,\n-                                                           order)\n-            # set the new 'info' attribute to the value passed\n-            obj.info = info\n-            # Finally, we must return the newly created object:\n-            return obj\n-\n-        def copy(self, *args, **kwargs):\n-            assert False, \"Array is being copied when it should not be copied\"\n-\n-        def __copy__(self, *args, **kwargs):\n-            assert False, \"Array is being copied when it should not be copied\"\n-\n-        def __deepcopy__(self, *args, **kwargs):\n-            assert False, \"Array is being copied when it should not be copied\"\n-\n-    X = CopyWarningArray(shape=(20, 5), info=\"CopyWarningArray\")\n-    X[:, :] = 1\n+    X = np.random.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n     y = X[:, 2]\n     lasso_lars.fit(X, y)\n-    np.asarray = temp\n+    assert not np.array_equal(X, X_copy)\n \n \n def test_lasso_lars_copyX_behaviour2():\n     \"\"\"\n-    Test that user input regading copyX is not being overridden (it was until\n+    Test that user input regarding copyX is not being overridden (it was until\n     at least version 0.21)\n \n     Correct behaviour is to create a copy.\n \n     \"\"\"\n-    temp = np.asarray\n-\n-    def ident(x, *args, **kwargs):\n-        return x\n-\n-    np.asarray = ident\n-    np.array = ident\n     lasso_lars = LassoLarsIC(copy_X=True, precompute=False)\n-\n-    class CopyCreated(Exception):\n-        pass\n-\n-    class CopyWarningArray(np.ndarray):\n-\n-        def __new__(subtype, shape, dtype=float, buffer=None, offset=0,\n-                    strides=None, order=None, info=None):\n-            # Create the ndarray instance of our type, given the usual\n-            # ndarray input arguments.  This will call the standard\n-            # ndarray constructor, but return an object of our type.\n-            # It also triggers a call to InfoArray.__array_finalize__\n-            obj = super(CopyWarningArray, subtype).__new__(subtype, shape,\n-                                                           dtype, buffer,\n-                                                           offset, strides,\n-                                                           order)\n-            # set the new 'info' attribute to the value passed\n-            obj.info = info\n-            # Finally, we must return the newly created object:\n-            return obj\n-\n-        def copy(self, *args, **kwargs):\n-            raise CopyCreated\n-\n-        def __copy__(self, *args, **kwargs):\n-            raise CopyCreated\n-\n-        def __deepcopy__(self, *args, **kwargs):\n-            raise CopyCreated\n-\n-    X = CopyWarningArray(shape=(20, 5), info=\"CopyWarningArray\")\n-    X[:, :] = 1\n+    X = np.random.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n     y = X[:, 2]\n-    # assert_raises(CopyCreated, lasso_lars.fit, X, y)\n-    # lasso_lars.fit(X, y)\n-    with pytest.raises(CopyCreated):\n-        lasso_lars.fit(X, y)\n-    np.asarray = temp\n-    np.array = temp\n+    lasso_lars.fit(X, y)\n+    assert np.array_equal(X, X_copy)\n\nFrom 2724514aa3ca0989afcd1c2ef26d429c7ee52509 Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Wed, 20 Feb 2019 09:33:05 +0100\nSubject: [PATCH 5/8] parametrized test to avoid having two functions\n\n---\n .../linear_model/tests/test_least_angle.py    | 26 ++++---------------\n 1 file changed, 5 insertions(+), 21 deletions(-)\n\ndiff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex be9e3ed265e6d..7e0ab15aa8ce6 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -688,33 +688,17 @@ def test_lasso_lars_vs_R_implementation():\n     ###########################################################################\n \n \n-def test_lasso_lars_copyX_behaviour1():\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_copyX_behaviour(copy_X):\n     \"\"\"\n-    Test that user input regarding copyX is not being overridden (it was until\n+    Test that user input regarding copy_X is not being overridden (it was until\n     at least version 0.21)\n \n-    Correct behaviour is not to create a copy.\n-\n     \"\"\"\n-    lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n+    lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)\n     X = np.random.normal(0, 1, (100, 5))\n     X_copy = X.copy()\n     y = X[:, 2]\n     lasso_lars.fit(X, y)\n-    assert not np.array_equal(X, X_copy)\n-\n-\n-def test_lasso_lars_copyX_behaviour2():\n-    \"\"\"\n-    Test that user input regarding copyX is not being overridden (it was until\n-    at least version 0.21)\n-\n-    Correct behaviour is to create a copy.\n+    assert copy_X == np.array_equal(X, X_copy)\n \n-    \"\"\"\n-    lasso_lars = LassoLarsIC(copy_X=True, precompute=False)\n-    X = np.random.normal(0, 1, (100, 5))\n-    X_copy = X.copy()\n-    y = X[:, 2]\n-    lasso_lars.fit(X, y)\n-    assert np.array_equal(X, X_copy)\n\nFrom 5e2db9ccd6e8e4c32b6348b92b3c1717da733670 Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Wed, 20 Feb 2019 11:17:35 +0100\nSubject: [PATCH 6/8] updated docstring\n\n---\n sklearn/linear_model/least_angle.py | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 690444d3369ed..82ecbc98855a2 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1490,7 +1490,9 @@ def fit(self, X, y, copy_X=None):\n         y : array-like, shape (n_samples,)\n             target values. Will be cast to X's dtype if necessary\n \n-        copy_X : boolean, optional, default True\n+        copy_X : boolean, optional, default None\n+            If provided, this parameter will override the choice\n+            of copy_X made at instance creation.\n             If ``True``, X will be copied; else, it may be overwritten.\n \n         Returns\n\nFrom 25f790e1ccff4565468c588ea0124bc70e12be31 Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Wed, 20 Feb 2019 11:17:52 +0100\nSubject: [PATCH 7/8] added test for copy_X given to .fit\n\n---\n sklearn/linear_model/tests/test_least_angle.py | 17 ++++++++++++++++-\n 1 file changed, 16 insertions(+), 1 deletion(-)\n\ndiff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 7e0ab15aa8ce6..958399eea41da 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -696,9 +696,24 @@ def test_lasso_lars_copyX_behaviour(copy_X):\n \n     \"\"\"\n     lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)\n-    X = np.random.normal(0, 1, (100, 5))\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n     X_copy = X.copy()\n     y = X[:, 2]\n     lasso_lars.fit(X, y)\n     assert copy_X == np.array_equal(X, X_copy)\n \n+\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_fit_copyX_behaviour(copy_X):\n+    \"\"\"\n+    Test that user input to .fit for copy_X overrides default __init__ value\n+\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y, copy_X=copy_X)\n+    assert copy_X == np.array_equal(X, X_copy)\n\nFrom 3acd4ab470fc3c75cff3a28a7fbd317b58850cc1 Mon Sep 17 00:00:00 2001\nFrom: luk-f-a <lucioarjona@hotmail.com>\nDate: Fri, 22 Feb 2019 11:27:11 +0100\nSubject: [PATCH 8/8] updated what's new document\n\n---\n doc/whats_new/v0.21.rst | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a/doc/whats_new/v0.21.rst b/doc/whats_new/v0.21.rst\nindex 2f359ca87463f..6fd5b3538748d 100644\n--- a/doc/whats_new/v0.21.rst\n+++ b/doc/whats_new/v0.21.rst\n@@ -117,6 +117,11 @@ Support for Python 3.4 and below has been officially dropped.\n   in version 0.21 and will be removed in version 0.23.\n   :issue:`12821` by :user:`Nicolas Hug <NicolasHug>`.\n \n+- |Fix| Fixed a bug in :class:`linear_model.LassoLarsIC`, where user input\n+   ``copy_X=False`` at instance creation would be overridden by default\n+   parameter value ``copy_X=True`` in ``fit``. \n+   :issue:`12972` by :user:`Lucio Fernandez-Arjona <luk-f-a>`\n+\n :mod:`sklearn.manifold`\n ............................\n \n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/12973"}