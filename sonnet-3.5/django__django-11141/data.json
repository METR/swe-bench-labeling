{"instance_id": "django__django-11141", "score": "I", "diff": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 8c308621d2..dd9cabf3e7 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -84,12 +84,9 @@ class MigrationLoader:\n                     continue\n                 raise\n             else:\n-                # Empty directories are namespaces.\n-                # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n-                    self.unmigrated_apps.add(app_config.label)\n-                    continue\n-                # Module is not a package (e.g. migrations.py).\n+                # Check if the module is a package (has a __path__ attribute).\n+                # This allows migrations directories without __init__.py files to work properly.\n+                # We don't check for __file__ anymore as it's not present in namespace packages.\n                 if not hasattr(module, '__path__'):\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n", "gold_standard_diff": "From 3cd3bebe8921e14b911b36b2a1cbceef8fb6294e Mon Sep 17 00:00:00 2001\nFrom: Benjy Weinberger <benjyw@gmail.com>\nDate: Thu, 28 Mar 2019 13:47:05 -0700\nSubject: [PATCH] Fixed #30300 -- Allowed migrations to be loaded from\n directories without __init__.py file.\n\n---\n django/db/migrations/loader.py                    | 10 ++++------\n docs/releases/3.1.txt                             |  3 ++-\n tests/migrations/test_loader.py                   | 11 +++++++++++\n .../0001_initial.py                               | 15 +++++++++++++++\n 4 files changed, 32 insertions(+), 7 deletions(-)\n create mode 100644 tests/migrations/test_migrations_namespace_package/0001_initial.py\n\ndiff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 8c308621d239..6be804829939 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -84,11 +84,6 @@ def load_disk(self):\n                     continue\n                 raise\n             else:\n-                # Empty directories are namespaces.\n-                # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n-                    self.unmigrated_apps.add(app_config.label)\n-                    continue\n                 # Module is not a package (e.g. migrations.py).\n                 if not hasattr(module, '__path__'):\n                     self.unmigrated_apps.add(app_config.label)\n@@ -96,11 +91,14 @@ def load_disk(self):\n                 # Force a reload if it's already loaded (tests need this)\n                 if was_loaded:\n                     reload(module)\n-            self.migrated_apps.add(app_config.label)\n             migration_names = {\n                 name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)\n                 if not is_pkg and name[0] not in '_~'\n             }\n+            if migration_names or self.ignore_no_migrations:\n+                self.migrated_apps.add(app_config.label)\n+            else:\n+                self.unmigrated_apps.add(app_config.label)\n             # Load migrations\n             for migration_name in migration_names:\n                 migration_path = '%s.%s' % (module_name, migration_name)\ndiff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt\nindex 6b3fa0b49ec2..7d1948b183e9 100644\n--- a/docs/releases/3.1.txt\n+++ b/docs/releases/3.1.txt\n@@ -155,7 +155,8 @@ Management Commands\n Migrations\n ~~~~~~~~~~\n \n-* ...\n+* Migrations are now loaded also from directories without ``__init__.py``\n+  files.\n \n Models\n ~~~~~~\ndiff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 0f0a590e7c11..7bc9ccabd408 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -508,6 +508,17 @@ def test_ignore_files(self):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n \n class PycLoaderTests(MigrationTestBase):\n \ndiff --git a/tests/migrations/test_migrations_namespace_package/0001_initial.py b/tests/migrations/test_migrations_namespace_package/0001_initial.py\nnew file mode 100644\nindex 000000000000..34c73ea08622\n--- /dev/null\n+++ b/tests/migrations/test_migrations_namespace_package/0001_initial.py\n@@ -0,0 +1,15 @@\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+\n+    operations = [\n+        migrations.CreateModel(\n+            \"Author\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=255)),\n+            ],\n+        ),\n+    ]\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11141"}