{"instance_id": "sphinx-doc__sphinx-7985", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex a404f1fa5..2c6848797 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd5317087..9fd790153 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -18,6 +18,8 @@ from os import path\n from typing import Any, Dict, List, Set, Tuple\n from urllib.parse import unquote, urlparse\n \n+from sphinx.util.osutil import fs_encoding\n+\n from docutils import nodes\n from docutils.nodes import Node\n from requests.exceptions import HTTPError\n@@ -77,7 +79,7 @@ def check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n \n class CheckExternalLinksBuilder(Builder):\n     \"\"\"\n-    Checks for broken external links.\n+    Checks for broken external and local links.\n     \"\"\"\n     name = 'linkcheck'\n     epilog = __('Look for any errors in the above output or in '\n@@ -99,6 +101,32 @@ class CheckExternalLinksBuilder(Builder):\n         # create JSON output file\n         open(path.join(self.outdir, 'output.json'), 'w').close()\n \n+    def check_local_link(self, uri: str) -> bool:\n+        \"\"\"\n+        Check if a local link exists.\n+        Returns True if the link is valid, False otherwise.\n+        \"\"\"\n+        # Remove anchor if present\n+        uri_without_anchor = uri.split('#')[0]\n+        \n+        # Check if the file exists in the source directory\n+        full_path = path.join(self.env.srcdir, uri_without_anchor)\n+        if path.exists(full_path):\n+            return True\n+        \n+        # If it doesn't exist, check if it's a reference to another document\n+        for doc in self.env.found_docs:\n+            if doc == uri_without_anchor or doc.endswith('/' + uri_without_anchor):\n+                return True\n+        \n+        # Check if it's an intersphinx reference\n+        if hasattr(self.env.config, 'intersphinx_mapping'):\n+            for _, invdata in self.env.config.intersphinx_mapping.items():\n+                if invdata.get('objects', {}).get(uri_without_anchor):\n+                    return True\n+        \n+        return False\n+\n         # create queues and worker threads\n         self.wqueue = queue.Queue()  # type: queue.Queue\n         self.rqueue = queue.Queue()  # type: queue.Queue\n@@ -143,6 +171,13 @@ class CheckExternalLinksBuilder(Builder):\n                 req_url = uri\n                 anchor = None\n \n+            # Check if it's a local link\n+            if not urlparse(req_url).scheme:\n+                if self.check_local_link(req_url):\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', 'Local file not found', 0\n+\n             # handle non-ASCII URIs\n             try:\n                 req_url.encode('ascii')\ndiff --git a/tox.ini b/tox.ini\nindex bddd822a6..34baee205 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From f95ba21f4a4dd1cade2f554b1d3afa7b322be1e4 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Sun, 9 Feb 2020 20:22:22 +0900\nSubject: [PATCH] Close #5208: linkcheck: Support checks for local links\n\n---\n CHANGES                              |  1 +\n sphinx/builders/linkcheck.py         | 17 +++++++++++++++--\n tests/roots/test-linkcheck/links.txt |  2 ++\n tests/test_build_linkcheck.py        | 13 ++++++++-----\n 4 files changed, 26 insertions(+), 7 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex bc932a7d48c..7af591708c3 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -27,6 +27,7 @@ Features added\n * #7902: html theme: Add a new option :confval:`globaltoc_maxdepth` to control\n   the behavior of globaltoc in sidebar\n * #7840: i18n: Optimize the dependencies check on bootstrap\n+* #5208: linkcheck: Support checks for local links\n * #7052: add ``:noindexentry:`` to the Python, C, C++, and Javascript domains.\n   Update the documentation to better reflect the relationship between this option\n   and the ``:noindex:`` option.\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd531708729..ef8f9d90222 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -35,6 +35,8 @@\n \n logger = logging.getLogger(__name__)\n \n+uri_re = re.compile('[a-z]+://')\n+\n \n DEFAULT_REQUEST_HEADERS = {\n     'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',\n@@ -210,10 +212,21 @@ def check_uri() -> Tuple[str, str, int]:\n \n         def check() -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n-            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n+            if len(uri) == 0 or uri.startswith(('#', 'mailto:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                if uri_re.match(uri):\n+                    # non supported URI schemes (ex. ftp)\n+                    return 'unchecked', '', 0\n+                else:\n+                    if path.exists(path.join(self.srcdir, uri)):\n+                        return 'working', '', 0\n+                    else:\n+                        for rex in self.to_ignore:\n+                            if rex.match(uri):\n+                                return 'ignored', '', 0\n+                        else:\n+                            return 'broken', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\ndiff --git a/tests/roots/test-linkcheck/links.txt b/tests/roots/test-linkcheck/links.txt\nindex fa8f11e4cf4..90759ee6369 100644\n--- a/tests/roots/test-linkcheck/links.txt\n+++ b/tests/roots/test-linkcheck/links.txt\n@@ -11,6 +11,8 @@ Some additional anchors to exercise ignore code\n * `Example Bar invalid <https://www.google.com/#top>`_\n * `Example anchor invalid <http://www.sphinx-doc.org/en/1.7/intro.html#does-not-exist>`_\n * `Complete nonsense <https://localhost:7777/doesnotexist>`_\n+* `Example valid local file <conf.py>`_\n+* `Example invalid local file <path/to/notfound>`_\n \n .. image:: https://www.google.com/image.png\n .. figure:: https://www.google.com/image2.png\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex d1fec550f7b..7d85f10c53a 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -30,7 +30,9 @@ def test_defaults(app, status, warning):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in content\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    # looking for local file should fail\n+    assert \"[broken] path/to/notfound\" in content\n+    assert len(content.splitlines()) == 6\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n@@ -47,8 +49,8 @@ def test_defaults_json(app, status, warning):\n                  \"info\"]:\n         assert attr in row\n \n-    assert len(content.splitlines()) == 8\n-    assert len(rows) == 8\n+    assert len(content.splitlines()) == 10\n+    assert len(rows) == 10\n     # the output order of the rows is not stable\n     # due to possible variance in network latency\n     rowsby = {row[\"uri\"]:row for row in rows}\n@@ -69,7 +71,7 @@ def test_defaults_json(app, status, warning):\n     assert dnerow['uri'] == 'https://localhost:7777/doesnotexist'\n     assert rowsby['https://www.google.com/image2.png'] == {\n         'filename': 'links.txt',\n-        'lineno': 16,\n+        'lineno': 18,\n         'status': 'broken',\n         'code': 0,\n         'uri': 'https://www.google.com/image2.png',\n@@ -92,7 +94,8 @@ def test_defaults_json(app, status, warning):\n                        'https://localhost:7777/doesnotexist',\n                        'http://www.sphinx-doc.org/en/1.7/intro.html#',\n                        'https://www.google.com/image.png',\n-                       'https://www.google.com/image2.png']\n+                       'https://www.google.com/image2.png',\n+                       'path/to/notfound']\n                    })\n def test_anchors_ignored(app, status, warning):\n     app.builder.build_all()\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7985"}