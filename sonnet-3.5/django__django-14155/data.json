{"instance_id": "django__django-14155", "score": "I", "diff": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..4fa18f1fa3 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,7 +31,15 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        self.original_func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.partial_args = func.args\n+            self.partial_kwargs = func.keywords or {}\n+        else:\n+            self.func = func\n+            self.partial_args = ()\n+            self.partial_kwargs = {}\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -45,12 +53,12 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        if not hasattr(self.func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = self.func.__class__.__module__ + '.' + self.func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = self.func.__module__ + '.' + self.func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +67,12 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+        if isinstance(self.original_func, functools.partial):\n+            partial_info = f\", partial_args={self.partial_args}, partial_kwargs={self.partial_kwargs}\"\n+        else:\n+            partial_info = \"\"\n+        return \"ResolverMatch(func=%s%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+            self._func_path, partial_info, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "gold_standard_diff": "From 41850eec99366a51f98123f7c51e5bc5a8b2798c Mon Sep 17 00:00:00 2001\nFrom: Nick Pope <nick@nickpope.me.uk>\nDate: Fri, 19 Mar 2021 14:44:03 +0000\nSubject: [PATCH] Fixed #32572 -- Improved ResolverMatch.__repr__().\n\nWhen a partial function was passed as the view, the __repr__() would\nshow the `func` argument as `functools.partial` which isn't very\nhelpful, especially as it doesn't reveal the underlying function or\narguments provided.\n---\n django/urls/resolvers.py           | 13 ++++++++++---\n tests/urlpatterns_reverse/tests.py | 24 ++++++++++++++++++++++--\n 2 files changed, 32 insertions(+), 5 deletions(-)\n\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509cf..0912a82f14d3 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -59,9 +59,16 @@ def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n+        if isinstance(self.func, functools.partial):\n+            func = repr(self.func)\n+        else:\n+            func = self._func_path\n+        return (\n+            'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '\n+            'app_names=%r, namespaces=%r, route=%r)' % (\n+                func, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n         )\n \n \ndiff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 09028be795f2..7190023d3ab3 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1141,10 +1141,30 @@ def test_repr(self):\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n-            \"args=('42', '37'), kwargs={}, url_name=no-kwargs, app_names=[], \"\n-            \"namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)\",\n+            \"args=('42', '37'), kwargs={}, url_name='no-kwargs', app_names=[], \"\n+            \"namespaces=[], route='^no_kwargs/([0-9]+)/([0-9]+)/$')\",\n         )\n \n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n+\n \n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14155"}