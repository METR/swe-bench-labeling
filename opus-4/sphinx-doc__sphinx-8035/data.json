{"instance_id": "sphinx-doc__sphinx-8035", "score": "C", "diff": "diff --git a/setup.py b/setup.py\nindex a404f1fa5..2c6848797 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8c3509c3b..cdff478ee 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -136,6 +136,19 @@ def merge_special_members_option(options: Dict) -> None:\n             options['members'] = options['special-members']\n \n \n+def merge_private_members_option(options: Dict) -> None:\n+    \"\"\"Merge :private-members: option to :members: option.\"\"\"\n+    if 'private-members' in options and options['private-members'] is not ALL:\n+        if options.get('members') is ALL:\n+            pass\n+        elif options.get('members'):\n+            for member in options['private-members']:\n+                if member not in options['members']:\n+                    options['members'].append(member)\n+        else:\n+            options['members'] = options['private-members']\n+\n+\n # Some useful event listener factories for autodoc-process-docstring.\n \n def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:\n@@ -649,15 +662,27 @@ class Documenter:\n             elif (namespace, membername) in attr_docs:\n                 if want_all and isprivate:\n                     # ignore members whose name starts with _ by default\n-                    keep = self.options.private_members\n+                    if self.options.private_members is ALL:\n+                        keep = True\n+                    elif self.options.private_members:\n+                        keep = membername in self.options.private_members\n+                    else:\n+                        keep = False\n                 else:\n                     # keep documented attributes\n                     keep = True\n                 isattr = True\n             elif want_all and isprivate:\n                 # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if self.options.private_members is ALL:\n+                    keep = has_doc or self.options.undoc_members\n+                elif self.options.private_members:\n+                    if membername in self.options.private_members:\n+                        keep = has_doc or self.options.undoc_members\n+                    else:\n+                        keep = False\n+                else:\n+                    keep = False\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\n@@ -859,13 +884,14 @@ class ModuleDocumenter(Documenter):\n         'show-inheritance': bool_option, 'synopsis': identity,\n         'platform': identity, 'deprecated': bool_option,\n         'member-order': member_order_option, 'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': members_option, 'special-members': members_option,\n         'imported-members': bool_option, 'ignore-module-all': bool_option\n     }  # type: Dict[str, Callable]\n \n     def __init__(self, *args: Any) -> None:\n         super().__init__(*args)\n         merge_special_members_option(self.options)\n+        merge_private_members_option(self.options)\n         self.__all__ = None\n \n     @classmethod\n@@ -1279,7 +1305,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         'noindex': bool_option, 'inherited-members': inherited_members_option,\n         'show-inheritance': bool_option, 'member-order': member_order_option,\n         'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': members_option, 'special-members': members_option,\n     }  # type: Dict[str, Callable]\n \n     _signature_class = None  # type: Any\n@@ -1288,6 +1314,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n     def __init__(self, *args: Any) -> None:\n         super().__init__(*args)\n         merge_special_members_option(self.options)\n+        merge_private_members_option(self.options)\n \n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\ndiff --git a/test_comprehensive_private_members.py b/test_comprehensive_private_members.py\nnew file mode 100644\nindex 000000000..a7e03f74f\n--- /dev/null\n+++ b/test_comprehensive_private_members.py\n@@ -0,0 +1,114 @@\n+\"\"\"Comprehensive test for private members feature\"\"\"\n+import sys\n+from pathlib import Path\n+sys.path.insert(0, str(Path(__file__).parent / 'tests'))\n+\n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autoclass_private_members_specific(app):\n+    \"\"\"Test documenting specific private members in a class\"\"\"\n+    # Setup test module\n+    test_py = Path(app.srcdir) / 'target' / 'private_test.py'\n+    test_py.parent.mkdir(exist_ok=True)\n+    test_py.write_text('''\n+class TestClass:\n+    \"\"\"Test class with private members\"\"\"\n+    \n+    public_attr = \"public\"\n+    _private_attr1 = \"private1\"\n+    _private_attr2 = \"private2\"\n+    _private_attr3 = \"private3\"\n+    \n+    def public_method(self):\n+        \"\"\"Public method\"\"\"\n+        pass\n+        \n+    def _private_method1(self):\n+        \"\"\"Private method 1\"\"\"\n+        pass\n+        \n+    def _private_method2(self):\n+        \"\"\"Private method 2\"\"\"\n+        pass\n+        \n+    def _private_method3(self):\n+        \"\"\"Private method 3\"\"\"\n+        pass\n+''')\n+\n+    # Test specifying only certain private members\n+    options = {\"members\": None, \"private-members\": \"_private_attr1,_private_method2\"}\n+    actual = do_autodoc(app, 'class', 'target.private_test.TestClass', options)\n+    \n+    # Check that only specified private members are included\n+    output = '\\n'.join(actual)\n+    assert 'public_attr' in output\n+    assert 'public_method' in output\n+    assert '_private_attr1' in output\n+    assert '_private_method2' in output\n+    \n+    # These should NOT be in the output\n+    assert '_private_attr2' not in output\n+    assert '_private_attr3' not in output\n+    assert '_private_method1' not in output\n+    assert '_private_method3' not in output\n+    \n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_private_members_specific(app):\n+    \"\"\"Test documenting specific private members in a module\"\"\"\n+    # Setup test module\n+    test_py = Path(app.srcdir) / 'target' / 'private_mod_test.py'\n+    test_py.parent.mkdir(exist_ok=True)\n+    test_py.write_text('''\n+\"\"\"Test module with private members\"\"\"\n+\n+public_var = \"public\"\n+_private_var1 = \"private1\"\n+_private_var2 = \"private2\"\n+\n+def public_func():\n+    \"\"\"Public function\"\"\"\n+    pass\n+    \n+def _private_func1():\n+    \"\"\"Private function 1\"\"\"\n+    pass\n+    \n+def _private_func2():\n+    \"\"\"Private function 2\"\"\"\n+    pass\n+''')\n+\n+    # Test specifying only certain private members\n+    options = {\"members\": None, \"private-members\": \"_private_var1,_private_func2\"}\n+    actual = do_autodoc(app, 'module', 'target.private_mod_test', options)\n+    \n+    # Check that only specified private members are included\n+    output = '\\n'.join(actual)\n+    assert 'public_var' in output\n+    assert 'public_func' in output\n+    assert '_private_var1' in output\n+    assert '_private_func2' in output\n+    \n+    # These should NOT be in the output\n+    assert '_private_var2' not in output\n+    assert '_private_func1' not in output\n+\n+\n+if __name__ == \"__main__\":\n+    # Simple standalone test\n+    from sphinx.ext.autodoc import Documenter, ClassDocumenter, ModuleDocumenter\n+    \n+    # Test that option specs were updated correctly\n+    print(\"ModuleDocumenter private-members option:\", ModuleDocumenter.option_spec['private-members'].__name__)\n+    print(\"ClassDocumenter private-members option:\", ClassDocumenter.option_spec['private-members'].__name__)\n+    \n+    # Both should use members_option now\n+    from sphinx.ext.autodoc import members_option\n+    assert ModuleDocumenter.option_spec['private-members'] is members_option\n+    assert ClassDocumenter.option_spec['private-members'] is members_option\n+    \n+    print(\"Option spec tests passed!\")\ndiff --git a/test_private_members.py b/test_private_members.py\nnew file mode 100644\nindex 000000000..0ce3a87b9\n--- /dev/null\n+++ b/test_private_members.py\n@@ -0,0 +1,25 @@\n+\"\"\"Test module for private members feature\"\"\"\n+\n+class TestClass:\n+    \"\"\"Test class with various members\"\"\"\n+    \n+    public_attr = \"public\"\n+    _private_attr1 = \"private1\"\n+    _private_attr2 = \"private2\"\n+    __special_attr = \"special\"\n+    \n+    def public_method(self):\n+        \"\"\"A public method\"\"\"\n+        pass\n+        \n+    def _private_method1(self):\n+        \"\"\"First private method\"\"\"\n+        pass\n+        \n+    def _private_method2(self):\n+        \"\"\"Second private method\"\"\"\n+        pass\n+        \n+    def __special_method(self):\n+        \"\"\"A special method\"\"\"\n+        pass\ndiff --git a/test_private_members_specific.py b/test_private_members_specific.py\nnew file mode 100644\nindex 000000000..9fe40eb3d\n--- /dev/null\n+++ b/test_private_members_specific.py\n@@ -0,0 +1,27 @@\n+\"\"\"Test specific private members feature\"\"\"\n+from pathlib import Path\n+\n+def test_specific_private_members():\n+    \"\"\"Test the ability to document specific private members\"\"\"\n+    \n+    # Run as a simple unit test instead of using full sphinx test framework\n+    # This simulates the behavior we expect\n+    from sphinx.ext.autodoc import members_option, ALL\n+    \n+    # Test that members_option parses the private-members correctly\n+    result = members_option(\"_private_attr1, _private_method2\")\n+    assert result == [\"_private_attr1\", \"_private_method2\"]\n+    \n+    # Test that empty private-members returns ALL\n+    result = members_option(None)\n+    assert result is ALL\n+    \n+    # Test that True returns ALL\n+    result = members_option(True)\n+    assert result is ALL\n+    \n+    print(\"Basic option parsing tests passed!\")\n+    \n+\n+if __name__ == \"__main__\":\n+    test_specific_private_members()\ndiff --git a/test_specific_private_members.py b/test_specific_private_members.py\nnew file mode 100644\nindex 000000000..dd4597881\n--- /dev/null\n+++ b/test_specific_private_members.py\n@@ -0,0 +1,81 @@\n+\"\"\"Test autodoc with specific private members\"\"\"\n+import sys\n+from pathlib import Path\n+sys.path.insert(0, str(Path(__file__).parent / 'tests'))\n+\n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_private_members_specific_list(app):\n+    \"\"\"Test specifying a list of private members to document\"\"\"\n+    # Test with class\n+    options = {\"members\": None, \"private-members\": \"_private_method\"}\n+    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n+    output = '\\n'.join(actual)\n+    \n+    # _private_method should be documented\n+    assert '_private_method' in output\n+    # but other private members should not\n+    assert '_private_var' not in output\n+    \n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')  \n+def test_private_members_all(app):\n+    \"\"\"Test that private-members without arguments still documents all\"\"\"\n+    # Test backwards compatibility - no args means document all\n+    options = {\"members\": None, \"private-members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    output = '\\n'.join(actual)\n+    \n+    # Both functions should be present\n+    assert 'private_function' in output\n+    assert '_public_function' in output\n+\n+\n+if __name__ == \"__main__\":\n+    # First create a test file in the expected location\n+    import os\n+    os.makedirs('tests/roots/test-ext-autodoc/target', exist_ok=True)\n+    \n+    with open('tests/roots/test-ext-autodoc/target/private.py', 'w') as f:\n+        f.write('''\n+\"\"\"Test module for private members\"\"\"\n+\n+_private_var = \"I am private\"\n+\n+def private_function(name):\n+    \"\"\"private_function is a docstring().\n+\n+    :meta private:\n+    \"\"\"\n+\n+def _public_function(name):\n+    \"\"\"public_function is a docstring().\n+\n+    :meta public:\n+    \"\"\"\n+    \n+class Foo:\n+    \"\"\"Foo class\"\"\"\n+    \n+    _private_var = \"private class var\"\n+    \n+    def _private_method(self):\n+        \"\"\"A private method\"\"\"\n+        pass\n+        \n+    def public_method(self):\n+        \"\"\"A public method\"\"\"\n+        pass\n+''')\n+    \n+    # Run pytest on this file\n+    import subprocess\n+    result = subprocess.run([sys.executable, '-m', 'pytest', __file__, '-xvs'], \n+                          capture_output=True, text=True)\n+    print(result.stdout)\n+    if result.stderr:\n+        print(\"STDERR:\", result.stderr)\n+    print(\"Return code:\", result.returncode)\ndiff --git a/tox.ini b/tox.ini\nindex bddd822a6..34baee205 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex eadace6dcd4..79efd2c8df0 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -10,6 +10,7 @@ Incompatible changes\n Deprecated\n ----------\n \n+* ``sphinx.ext.autodoc.merge_special_members_option()``\n * ``sphinx.writers.texinfo.TexinfoWriter.desc``\n * C, parsing of pre-v3 style type directives and roles, along with the options\n   :confval:`c_allow_pre_v3` and :confval:`c_warn_on_allowed_pre_v3`.\n@@ -18,6 +19,8 @@ Features added\n --------------\n \n * #2076: autodoc: Allow overriding of exclude-members in skip-member function\n+* #8034: autodoc: ``:private-member:`` can take an explicit list of member names\n+  to be documented\n * #2024: autosummary: Add :confval:`autosummary_filename_map` to avoid conflict\n   of filenames between two object with different case\n * #7849: html: Add :confval:`html_codeblock_linenos_style` to change the style\ndiff --git a/doc/extdev/deprecated.rst b/doc/extdev/deprecated.rst\nindex ceb88d45f74..d6e87b45923 100644\n--- a/doc/extdev/deprecated.rst\n+++ b/doc/extdev/deprecated.rst\n@@ -26,6 +26,11 @@ The following is a list of deprecated interfaces.\n      - (will\u00a0be) Removed\n      - Alternatives\n \n+   * - ``sphinx.ext.autodoc.merge_special_members_option()``\n+     - 3.2\n+     - 5.0\n+     - ``sphinx.ext.autodoc.merge_members_option()``\n+\n    * - ``sphinx.writers.texinfo.TexinfoWriter.desc``\n      - 3.2\n      - 5.0\ndiff --git a/doc/usage/extensions/autodoc.rst b/doc/usage/extensions/autodoc.rst\nindex 150b62c4d93..71f49c24044 100644\n--- a/doc/usage/extensions/autodoc.rst\n+++ b/doc/usage/extensions/autodoc.rst\n@@ -136,9 +136,22 @@ inserting them into the page source under a suitable :rst:dir:`py:module`,\n            :undoc-members:\n \n    * \"Private\" members (that is, those named like ``_private`` or ``__private``)\n-     will be included if the ``private-members`` flag option is given.\n+     will be included if the ``private-members`` flag option is given::\n+\n+        .. automodule:: noodle\n+           :members:\n+           :private-members:\n+\n+     It can also take an explicit list of member names to be documented as\n+     arguments::\n+\n+        .. automodule:: noodle\n+           :members:\n+           :private-members: _spicy, _garlickly\n \n      .. versionadded:: 1.1\n+     .. versionchanged:: 3.2\n+        The option can now take arguments.\n \n    * autodoc considers a member private if its docstring contains\n      ``:meta private:`` in its :ref:`info-field-lists`.\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8c3509c3bbb..9f8820fdc06 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -125,6 +125,8 @@ def bool_option(arg: Any) -> bool:\n \n def merge_special_members_option(options: Dict) -> None:\n     \"\"\"Merge :special-members: option to :members: option.\"\"\"\n+    warnings.warn(\"merge_special_members_option() is deprecated.\",\n+                  RemovedInSphinx50Warning, stacklevel=2)\n     if 'special-members' in options and options['special-members'] is not ALL:\n         if options.get('members') is ALL:\n             pass\n@@ -136,6 +138,20 @@ def merge_special_members_option(options: Dict) -> None:\n             options['members'] = options['special-members']\n \n \n+def merge_members_option(options: Dict) -> None:\n+    \"\"\"Merge :*-members: option to the :members: option.\"\"\"\n+    if options.get('members') is ALL:\n+        # merging is not needed when members: ALL\n+        return\n+\n+    members = options.setdefault('members', [])\n+    for key in {'private-members', 'special-members'}:\n+        if key in options and options[key] is not ALL:\n+            for member in options[key]:\n+                if member not in members:\n+                    members.append(member)\n+\n+\n # Some useful event listener factories for autodoc-process-docstring.\n \n def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:\n@@ -648,16 +664,28 @@ def is_filtered_inherited_member(name: str) -> bool:\n                         keep = has_doc or self.options.undoc_members\n             elif (namespace, membername) in attr_docs:\n                 if want_all and isprivate:\n-                    # ignore members whose name starts with _ by default\n-                    keep = self.options.private_members\n+                    if self.options.private_members is None:\n+                        keep = False\n+                    elif self.options.private_members is ALL:\n+                        keep = True\n+                    else:\n+                        keep = membername in self.options.private_members\n                 else:\n                     # keep documented attributes\n                     keep = True\n                 isattr = True\n             elif want_all and isprivate:\n-                # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if has_doc or self.options.undoc_members:\n+                    if self.options.private_members is None:\n+                        keep = False\n+                    elif self.options.private_members is ALL:\n+                        keep = True\n+                    elif is_filtered_inherited_member(membername):\n+                        keep = False\n+                    else:\n+                        keep = membername in self.options.private_members\n+                else:\n+                    keep = False\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\n@@ -859,13 +887,13 @@ class ModuleDocumenter(Documenter):\n         'show-inheritance': bool_option, 'synopsis': identity,\n         'platform': identity, 'deprecated': bool_option,\n         'member-order': member_order_option, 'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': members_option, 'special-members': members_option,\n         'imported-members': bool_option, 'ignore-module-all': bool_option\n     }  # type: Dict[str, Callable]\n \n     def __init__(self, *args: Any) -> None:\n         super().__init__(*args)\n-        merge_special_members_option(self.options)\n+        merge_members_option(self.options)\n         self.__all__ = None\n \n     @classmethod\n@@ -1279,7 +1307,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         'noindex': bool_option, 'inherited-members': inherited_members_option,\n         'show-inheritance': bool_option, 'member-order': member_order_option,\n         'exclude-members': members_set_option,\n-        'private-members': bool_option, 'special-members': members_option,\n+        'private-members': members_option, 'special-members': members_option,\n     }  # type: Dict[str, Callable]\n \n     _signature_class = None  # type: Any\n@@ -1287,7 +1315,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n \n     def __init__(self, *args: Any) -> None:\n         super().__init__(*args)\n-        merge_special_members_option(self.options)\n+        merge_members_option(self.options)\n \n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\ndiff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex f4cadd3a543..9d7ff487a03 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -60,3 +60,24 @@ def test_private_field_and_private_members(app):\n         '   :meta private:',\n         '',\n     ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_public_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _public_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   public_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+    ]\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8035"}