From af40819536a8e5facf941ceb4f742bcf4fa1f3f6 Mon Sep 17 00:00:00 2001
From: arihant parsoya <parsoyaarihant@gmail.com>
Date: Fri, 16 Sep 2016 01:31:11 +0530
Subject: [PATCH] Improved distance() function

Fixes #11617.
function zip() has limitation of creating tuples equal to number which
is minimum of the lengths of the list given. Hence when passing 2D and
3D points, only 2 tuples were being created. This problem can be solved
by using map() function(in python 2) but unfortunately map() function
in Python3 has different functionality than map() in python2.

To solve the problem, new empty arrays(p1 and p2) are created which is
of maximum length of both the `self` and `p` and elements are inserted
into the array. This gives us two lists of same size which can be used
properly by zip() function without loss of data.
---
 sympy/geometry/point.py            | 14 ++++++++++++++
 sympy/geometry/tests/test_point.py |  5 +++++
 2 files changed, 19 insertions(+)

diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464bda..5b0c3aafe6a9 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -266,6 +266,20 @@ def distance(self, p):
         sqrt(x**2 + y**2)
 
         """
+        if type(p) is not type(self):
+            if len(p) == len(self):
+                return sqrt(sum([(a - b)**2 for a, b in zip(
+                    self.args, p.args if isinstance(p, Point) else p)]))
+            else:
+                p1 = [0] * max(len(p), len(self))
+                p2 = p.args if len(p.args) > len(self.args) else self.args
+
+                for i in range(min(len(p), len(self))):
+                    p1[i] = p.args[i] if len(p) < len(self) else self.args[i]
+
+                return sqrt(sum([(a - b)**2 for a, b in zip(
+                    p1, p2)]))
+
         return sqrt(sum([(a - b)**2 for a, b in zip(
             self.args, p.args if isinstance(p, Point) else p)]))
 
diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py
index c7b2d30f16a7..706090b9d1dc 100644
--- a/sympy/geometry/tests/test_point.py
+++ b/sympy/geometry/tests/test_point.py
@@ -243,6 +243,11 @@ def test_issue_9214():
 
     assert Point3D.are_collinear(p1, p2, p3) is False
 
+def test_issue_11617():
+    p1 = Point3D(1,0,2)
+    p2 = Point2D(2,0)
+
+    assert p1.distance(p2) == sqrt(5)
 
 def test_transform():
     p = Point(1, 1)
