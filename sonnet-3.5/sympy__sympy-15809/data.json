{"instance_id": "sympy__sympy-15809", "score": "I", "diff": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 5f9fe73c5c..9ff15cde6f 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -659,12 +659,19 @@ class Max(MinMaxBase, Application):\n     If is not possible to determine such a relation, return a partially\n     evaluated result.\n \n+    If called without arguments, it returns negative infinity (-oo).\n+\n     Assumptions are used to make the decision too.\n \n     Also, only comparable arguments are permitted.\n \n     It is named ``Max`` and not ``max`` to avoid conflicts\n     with the built-in function ``max``.\n+    @classmethod\n+    def __new__(cls, *args, **options):\n+        if not args:\n+            return S.NegativeInfinity\n+        return super(Max, cls).__new__(cls, *args, **options)\n \n \n     Examples\n@@ -768,6 +775,8 @@ class Min(MinMaxBase, Application):\n     It is named ``Min`` and not ``min`` to avoid conflicts\n     with the built-in function ``min``.\n \n+    If called without arguments, it returns positive infinity (oo).\n+\n     Examples\n     ========\n \n@@ -776,6 +785,8 @@ class Min(MinMaxBase, Application):\n     >>> p = Symbol('p', positive=True)\n     >>> n = Symbol('n', negative=True)\n \n+    >>> Min()\n+    oo\n     >>> Min(x, -2)                  #doctest: +SKIP\n     Min(x, -2)\n     >>> Min(x, -2).subs(x, 3)\n@@ -795,6 +806,12 @@ class Min(MinMaxBase, Application):\n     zero = S.NegativeInfinity\n     identity = S.Infinity\n \n+    @classmethod\n+    def __new__(cls, *args, **options):\n+        if not args:\n+            return S.Infinity\n+        return super(Min, cls).__new__(cls, *args, **options)\n+\n     def fdiff( self, argindex ):\n         from sympy import Heaviside\n         n = len(self.args)\n", "gold_standard_diff": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 5f9fe73c5c42..5e4e89bdf481 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -339,8 +339,6 @@ def real_root(arg, n=None, evaluate=None):\n \n class MinMaxBase(Expr, LatticeOp):\n     def __new__(cls, *args, **assumptions):\n-        if not args:\n-            raise ValueError(\"The Max/Min functions must have arguments.\")\n \n         args = (sympify(arg) for arg in args)\n \ndiff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex f78dc7669865..0383c178f666 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -86,7 +86,8 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n+    assert Min(x) == x\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -157,7 +158,8 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n+    assert Max(x) == x\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/15809"}