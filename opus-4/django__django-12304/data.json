{"instance_id": "django__django-12304", "score": "C", "diff": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..71c6b41fba 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -31,6 +31,9 @@ class ChoicesMeta(enum.EnumMeta):\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        # Add do_not_call_in_templates to prevent Django templates from calling\n+        # the enum class when it's used as a callable.\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\n", "gold_standard_diff": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf52..51821a2b458f 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -31,6 +31,7 @@ def __new__(metacls, classname, bases, classdict):\n         # that is passed in as \"self\" as the value to use when looking up the\n         # label in the choices.\n         cls.label = property(lambda self: cls._value2label_map_.get(self.value))\n+        cls.do_not_call_in_templates = True\n         return enum.unique(cls)\n \n     def __contains__(cls, member):\ndiff --git a/docs/releases/3.0.3.txt b/docs/releases/3.0.3.txt\nindex 27ace475d155..ab5a2fd84bfc 100644\n--- a/docs/releases/3.0.3.txt\n+++ b/docs/releases/3.0.3.txt\n@@ -20,3 +20,6 @@ Bugfixes\n * Relaxed the system check added in Django 3.0 to reallow use of a sublanguage\n   in the :setting:`LANGUAGE_CODE` setting, when a base language is available in\n   Django but the sublanguage is not (:ticket:`31141`).\n+\n+* Added support for using enumeration types ``TextChoices``,\n+  ``IntegerChoices``, and ``Choices`` in templates (:ticket:`31154`).\ndiff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex b9356479de95..ffc199ce424d 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -4,6 +4,7 @@\n import uuid\n \n from django.db import models\n+from django.template import Context, Template\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n from django.utils.translation import gettext_lazy as _\n@@ -149,6 +150,11 @@ def test_str(self):\n                 with self.subTest(member=member):\n                     self.assertEqual(str(test[member.name]), str(member.value))\n \n+    def test_templates(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n+\n \n class Separator(bytes, models.Choices):\n     FS = b'\\x1c', 'File Separator'\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12304"}