{"instance_id": "sympy__sympy-21847", "score": "I", "diff": "", "gold_standard_diff": "From 813f666edcbe6924146926dad9430cf05b38dcbc Mon Sep 17 00:00:00 2001\nFrom: sebastian-east <sebastianeast@ymail.com>\nDate: Tue, 10 Aug 2021 16:40:38 +0100\nSubject: [PATCH] monomials: fixed min_degrees functionality of itermonomials\n\nFix of issue #21845\n\nmin_degree is an optional argument that enforces a lower bound\non the degree of the monomials generated by itermonomials. Previously,\nitertools returned monomials with maximum degree greater than or\nequal to the lower bound. This is now changed to monomials with\ntotal degree greater than of equal to the lower bound. Test have also\nbeen introduced to ensure the proper functionality.\n\nPreviously, the code\n\nfrom sympy.polys.orderings import monomial_key\n\nx1, x2, x3 = sp.symbols('x1, x2, x3')\nstates = [x1, x2, x3]\nmax_degrees = 3\nmin_degrees = 3\nmonomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees),\n                   key=monomial_key('grlex', states))\nprint(monomials)\n\nprinted [x1**3, x2**3, x3**3], and not the other third degre monomials\n(e.g. x1**2*x2). This commit fixes this error.\n---\n sympy/polys/monomials.py            |  4 ++--\n sympy/polys/tests/test_monomials.py | 13 ++++++++++++-\n 2 files changed, 14 insertions(+), 3 deletions(-)\n\ndiff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307e9..d2cd3451e55a 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\ndiff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex 482cbee30dfd..e3f05a23e15a 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,7 +15,6 @@\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n-\n def test_monomials():\n \n     # total_degree tests\n@@ -114,6 +113,9 @@ def test_monomials():\n     assert set(itermonomials([x], [3], [1])) == {x, x**3, x**2}\n     assert set(itermonomials([x], [3], [2])) == {x**3, x**2}\n \n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n     assert set(itermonomials([x, y], [0, 0])) == {S.One}\n     assert set(itermonomials([x, y], [0, 1])) == {S.One, y}\n     assert set(itermonomials([x, y], [0, 2])) == {S.One, y, y**2}\n@@ -132,6 +134,15 @@ def test_monomials():\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n     i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == \\\n+            {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+            {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+                    j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+                    k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+                    k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+                    i*j*k, k*i\n+            }\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/21847"}