diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..f51ca2e7e 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -575,33 +575,37 @@ class StratifiedKFold(_BaseKFold):
         .. versionchanged:: 0.20
             ``n_splits`` default value will change from 3 to 5 in v0.22.
 
-    shuffle : boolean, optional
-        Whether to shuffle each stratification of the data before splitting
-        into batches.
+    shuffle : boolean, optional, default=False
+        Whether to shuffle the data within each class before splitting
+        into batches. This ensures that the samples within each fold are
+        randomly selected while still preserving the overall percentage
+        of samples for each class.
 
     random_state : int, RandomState instance or None, optional, default=None
-        If int, random_state is the seed used by the random number generator;
-        If RandomState instance, random_state is the random number generator;
-        If None, the random number generator is the RandomState instance used
-        by `np.random`. Used when ``shuffle`` == True.
+        Controls the randomness of the shuffling. Pass an int for reproducible
+        output across multiple function calls. See sklearn.utils.check_random_state.
+        Used when ``shuffle`` == True.
 
     Examples
     --------
     >>> import numpy as np
     >>> from sklearn.model_selection import StratifiedKFold
-    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])
-    >>> y = np.array([0, 0, 1, 1])
-    >>> skf = StratifiedKFold(n_splits=2)
+    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4], [5, 6], [7, 8]])
+    >>> y = np.array([0, 0, 1, 1, 2, 2])
+    >>> skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=42)
     >>> skf.get_n_splits(X, y)
     2
     >>> print(skf)  # doctest: +NORMALIZE_WHITESPACE
-    StratifiedKFold(n_splits=2, random_state=None, shuffle=False)
+    StratifiedKFold(n_splits=2, random_state=42, shuffle=True)
     >>> for train_index, test_index in skf.split(X, y):
     ...    print("TRAIN:", train_index, "TEST:", test_index)
     ...    X_train, X_test = X[train_index], X[test_index]
     ...    y_train, y_test = y[train_index], y[test_index]
-    TRAIN: [1 3] TEST: [0 2]
-    TRAIN: [0 2] TEST: [1 3]
+    ...    print("TRAIN labels:", y_train, "TEST labels:", y_test)
+    TRAIN: [1 2 4] TEST: [0 3 5]
+    TRAIN labels: [0 1 2] TEST labels: [0 1 2]
+    TRAIN: [0 3 5] TEST: [1 2 4]
+    TRAIN labels: [0 1 2] TEST labels: [0 1 2]
 
     Notes
     -----
@@ -620,7 +624,7 @@ class StratifiedKFold(_BaseKFold):
         super().__init__(n_splits, shuffle, random_state)
 
     def _make_test_folds(self, X, y=None):
-        rng = self.random_state
+        rng = check_random_state(self.random_state)
         y = np.asarray(y)
         type_of_target_y = type_of_target(y)
         allowed_target_types = ('binary', 'multiclass')
@@ -645,29 +649,26 @@ class StratifiedKFold(_BaseKFold):
                            " be less than n_splits=%d."
                            % (min_groups, self.n_splits)), Warning)
 
-        # pre-assign each sample to a test fold index using individual KFold
-        # splitting strategies for each class so as to respect the balance of
-        # classes
-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]
-        # will break when the data is not 100% stratifiable for all classes.
-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
-        per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
-            for count in y_counts]
+        # Shuffle the data within each class
+        indices = np.arange(n_samples)
+        for cls in unique_y:
+            cls_mask = y == cls
+            if self.shuffle:
+                rng.shuffle(indices[cls_mask])
 
+        # Assign samples to folds
         test_folds = np.zeros(n_samples, dtype=np.int)
-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):
-                cls_test_folds = test_folds[y == cls]
-                # the test split can be too big because we used
-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%
-                # stratifiable for all the classes
-                # (we use a warning instead of raising an exception)
-                # If this is the case, let's trim it:
-                test_split = test_split[test_split < len(cls_test_folds)]
-                cls_test_folds[test_split] = test_fold_indices
-                test_folds[y == cls] = cls_test_folds
+        for cls in unique_y:
+            cls_mask = y == cls
+            cls_indices = indices[cls_mask]
+            n_cls_samples = cls_mask.sum()
+            fold_sizes = np.full(self.n_splits, n_cls_samples // self.n_splits, dtype=int)
+            fold_sizes[:n_cls_samples % self.n_splits] += 1
+            current = 0
+            for fold_size, fold_idx in zip(fold_sizes, range(self.n_splits)):
+                start, stop = current, current + fold_size
+                test_folds[cls_indices[start:stop]] = fold_idx
+                current = stop
 
         return test_folds
 
