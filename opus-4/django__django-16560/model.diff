diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 075ecee1be..02f75f6ea3 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -19,10 +19,11 @@ __all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"
 class BaseConstraint:
     default_violation_error_message = _("Constraint “%(name)s” is violated.")
     violation_error_message = None
+    violation_error_code = None
 
     # RemovedInDjango60Warning: When the deprecation ends, replace with:
-    # def __init__(self, *, name, violation_error_message=None):
-    def __init__(self, *args, name=None, violation_error_message=None):
+    # def __init__(self, *, name, violation_error_message=None, violation_error_code=None):
+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):
         # RemovedInDjango60Warning.
         if name is None and not args:
             raise TypeError(
@@ -34,6 +35,7 @@ class BaseConstraint:
             self.violation_error_message = violation_error_message
         else:
             self.violation_error_message = self.default_violation_error_message
+        self.violation_error_code = violation_error_code
         # RemovedInDjango60Warning.
         if args:
             warnings.warn(
@@ -74,6 +76,8 @@ class BaseConstraint:
             and self.violation_error_message != self.default_violation_error_message
         ):
             kwargs["violation_error_message"] = self.violation_error_message
+        if self.violation_error_code is not None:
+            kwargs["violation_error_code"] = self.violation_error_code
         return (path, (), kwargs)
 
     def clone(self):
@@ -82,13 +86,13 @@ class BaseConstraint:
 
 
 class CheckConstraint(BaseConstraint):
-    def __init__(self, *, check, name, violation_error_message=None):
+    def __init__(self, *, check, name, violation_error_message=None, violation_error_code=None):
         self.check = check
         if not getattr(check, "conditional", False):
             raise TypeError(
                 "CheckConstraint.check must be a Q instance or boolean expression."
             )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     def _get_check_sql(self, model, schema_editor):
         query = Query(model=model, alias_cols=False)
@@ -112,7 +116,7 @@ class CheckConstraint(BaseConstraint):
         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)
         try:
             if not Q(self.check).check(against, using=using):
-                raise ValidationError(self.get_violation_error_message())
+                raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
         except FieldError:
             pass
 
@@ -135,6 +139,7 @@ class CheckConstraint(BaseConstraint):
                 self.name == other.name
                 and self.check == other.check
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -164,6 +169,7 @@ class UniqueConstraint(BaseConstraint):
         include=None,
         opclasses=(),
         violation_error_message=None,
+        violation_error_code=None,
     ):
         if not name:
             raise ValueError("A unique constraint must be named.")
@@ -213,7 +219,7 @@ class UniqueConstraint(BaseConstraint):
             F(expression) if isinstance(expression, str) else expression
             for expression in expressions
         )
-        super().__init__(name=name, violation_error_message=violation_error_message)
+        super().__init__(name=name, violation_error_message=violation_error_message, violation_error_code=violation_error_code)
 
     @property
     def contains_expressions(self):
@@ -321,6 +327,7 @@ class UniqueConstraint(BaseConstraint):
                 and self.opclasses == other.opclasses
                 and self.expressions == other.expressions
                 and self.violation_error_message == other.violation_error_message
+                and self.violation_error_code == other.violation_error_code
             )
         return super().__eq__(other)
 
@@ -385,7 +392,7 @@ class UniqueConstraint(BaseConstraint):
         if not self.condition:
             if queryset.exists():
                 if self.expressions:
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
                 # When fields are defined, use the unique_error_message() for
                 # backward compatibility.
                 for model, constraints in instance.get_constraints():
@@ -400,6 +407,6 @@ class UniqueConstraint(BaseConstraint):
                 if (self.condition & Exists(queryset.filter(self.condition))).check(
                     against, using=using
                 ):
-                    raise ValidationError(self.get_violation_error_message())
+                    raise ValidationError(self.get_violation_error_message(), code=self.violation_error_code)
             except FieldError:
                 pass
diff --git a/test_constraint_code.py b/test_constraint_code.py
new file mode 100644
index 0000000000..cdf99b91f7
--- /dev/null
+++ b/test_constraint_code.py
@@ -0,0 +1,49 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    USE_TZ=True,
+    SECRET_KEY='test-secret-key',
+)
+django.setup()
+
+from django.db import models
+from django.db.models import Q, CheckConstraint, UniqueConstraint
+from django.core.exceptions import ValidationError
+
+# Test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    age = models.IntegerField()
+    
+    class Meta:
+        app_label = 'test_app'
+        constraints = [
+            CheckConstraint(
+                check=Q(age__gte=18),
+                name='age_gte_18',
+                violation_error_message='Age must be at least 18'
+            ),
+            UniqueConstraint(
+                fields=['name'],
+                name='unique_name',
+                violation_error_message='Name must be unique'
+            ),
+        ]
+
+# Test the current behavior
+instance = TestModel(name='John', age=15)
+
+# Simulate validation - this would normally be done in the actual validate method
+check_constraint = TestModel._meta.constraints[0]
+try:
+    # This simulates what happens in CheckConstraint.validate()
+    raise ValidationError(check_constraint.get_violation_error_message())
+except ValidationError as e:
+    print(f"Current ValidationError: message='{e.message}', code='{e.code}'")
+    print(f"Has custom code: {e.code is not None}")
diff --git a/test_violation_code.py b/test_violation_code.py
new file mode 100644
index 0000000000..fb5ebe6d7f
--- /dev/null
+++ b/test_violation_code.py
@@ -0,0 +1,92 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    USE_TZ=True,
+    SECRET_KEY='test-secret-key',
+)
+django.setup()
+
+from django.db import models
+from django.db.models import Q, CheckConstraint, UniqueConstraint
+from django.core.exceptions import ValidationError
+
+# Test the feature
+print("Testing CheckConstraint with violation_error_code...")
+check_constraint = CheckConstraint(
+    check=Q(age__gte=18),
+    name='age_gte_18',
+    violation_error_message='Age must be at least 18',
+    violation_error_code='age_too_young'
+)
+
+print(f"CheckConstraint violation_error_code: {check_constraint.violation_error_code}")
+
+# Test that ValidationError is raised with the correct code
+try:
+    # Simulate what happens in CheckConstraint.validate()
+    raise ValidationError(check_constraint.get_violation_error_message(), code=check_constraint.violation_error_code)
+except ValidationError as e:
+    print(f"ValidationError message: '{e.message}'")
+    print(f"ValidationError code: '{e.code}'")
+    print(f"Has custom code: {e.code == 'age_too_young'}")
+
+print("\nTesting UniqueConstraint with violation_error_code...")
+unique_constraint = UniqueConstraint(
+    fields=['name'],
+    name='unique_name',
+    violation_error_message='Name must be unique',
+    violation_error_code='duplicate_name'
+)
+
+print(f"UniqueConstraint violation_error_code: {unique_constraint.violation_error_code}")
+
+# Test that ValidationError is raised with the correct code
+try:
+    # Simulate what happens in UniqueConstraint.validate()
+    raise ValidationError(unique_constraint.get_violation_error_message(), code=unique_constraint.violation_error_code)
+except ValidationError as e:
+    print(f"ValidationError message: '{e.message}'")
+    print(f"ValidationError code: '{e.code}'")
+    print(f"Has custom code: {e.code == 'duplicate_name'}")
+
+# Test deconstruct to ensure violation_error_code is preserved
+print("\nTesting deconstruct()...")
+path, args, kwargs = check_constraint.deconstruct()
+print(f"CheckConstraint deconstruct kwargs: {kwargs}")
+print(f"violation_error_code in kwargs: {'violation_error_code' in kwargs}")
+
+path, args, kwargs = unique_constraint.deconstruct()
+print(f"UniqueConstraint deconstruct kwargs: {kwargs}")
+print(f"violation_error_code in kwargs: {'violation_error_code' in kwargs}")
+
+# Test clone
+print("\nTesting clone()...")
+cloned_check = check_constraint.clone()
+print(f"Cloned CheckConstraint violation_error_code: {cloned_check.violation_error_code}")
+
+cloned_unique = unique_constraint.clone()
+print(f"Cloned UniqueConstraint violation_error_code: {cloned_unique.violation_error_code}")
+
+# Test equality
+print("\nTesting equality...")
+check2 = CheckConstraint(
+    check=Q(age__gte=18),
+    name='age_gte_18',
+    violation_error_message='Age must be at least 18',
+    violation_error_code='age_too_young'
+)
+print(f"check_constraint == check2: {check_constraint == check2}")
+
+check3 = CheckConstraint(
+    check=Q(age__gte=18),
+    name='age_gte_18',
+    violation_error_message='Age must be at least 18',
+    violation_error_code='different_code'
+)
+print(f"check_constraint == check3 (different code): {check_constraint == check3}")
