{"instance_id": "django__django-11276", "score": "I", "diff": "", "gold_standard_diff": "From d8b7ac16414ef9768b702d1c4eb7d46ac2ccaa87 Mon Sep 17 00:00:00 2001\nFrom: Jon Dufresne <jon.dufresne@gmail.com>\nDate: Wed, 24 Apr 2019 04:30:34 -0700\nSubject: [PATCH] Fixed #30399 -- Changed django.utils.html.escape()/urlize()\n to use html.escape()/unescape().\n\n---\n django/utils/html.py                          | 26 ++++---------------\n docs/intro/tutorial05.txt                     |  2 +-\n docs/ref/templates/builtins.txt               |  2 +-\n docs/ref/templates/language.txt               |  2 +-\n docs/ref/utils.txt                            |  5 ++++\n docs/releases/3.0.txt                         |  4 +++\n tests/admin_docs/test_views.py                |  2 +-\n tests/auth_tests/test_forms.py                |  2 +-\n tests/forms_tests/tests/test_forms.py         | 10 +++----\n tests/forms_tests/widget_tests/base.py        |  5 +++-\n .../widget_tests/test_clearablefileinput.py   |  2 +-\n tests/model_forms/tests.py                    | 14 +++++-----\n .../filter_tests/test_addslashes.py           |  2 +-\n .../filter_tests/test_make_list.py            |  2 +-\n .../template_tests/filter_tests/test_title.py |  2 +-\n .../filter_tests/test_urlize.py               |  6 ++---\n tests/template_tests/syntax_tests/test_url.py |  2 +-\n tests/utils_tests/test_html.py                |  4 ++-\n tests/view_tests/tests/test_csrf.py           |  8 +++---\n tests/view_tests/tests/test_debug.py          | 14 +++++-----\n 20 files changed, 57 insertions(+), 59 deletions(-)\n\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex 9c519978f52d..b26cbd16b8cc 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -1,5 +1,6 @@\n \"\"\"HTML utilities suitable for global use.\"\"\"\n \n+import html\n import json\n import re\n from html.parser import HTMLParser\n@@ -24,14 +25,6 @@\n simple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\n simple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)\n \n-_html_escapes = {\n-    ord('&'): '&amp;',\n-    ord('<'): '&lt;',\n-    ord('>'): '&gt;',\n-    ord('\"'): '&quot;',\n-    ord(\"'\"): '&#39;',\n-}\n-\n \n @keep_lazy(str, SafeString)\n def escape(text):\n@@ -43,7 +36,7 @@ def escape(text):\n     This may result in double-escaping. If this is a concern, use\n     conditional_escape() instead.\n     \"\"\"\n-    return mark_safe(str(text).translate(_html_escapes))\n+    return mark_safe(html.escape(str(text)))\n \n \n _js_escapes = {\n@@ -259,15 +252,6 @@ def trim_url(x, limit=trim_url_limit):\n             return x\n         return '%s\u2026' % x[:max(0, limit - 1)]\n \n-    def unescape(text):\n-        \"\"\"\n-        If input URL is HTML-escaped, unescape it so that it can be safely fed\n-        to smart_urlquote. For example:\n-        http://example.com?x=1&amp;y=&lt;2&gt; => http://example.com?x=1&y=<2>\n-        \"\"\"\n-        return text.replace('&amp;', '&').replace('&lt;', '<').replace(\n-            '&gt;', '>').replace('&quot;', '\"').replace('&#39;', \"'\")\n-\n     def trim_punctuation(lead, middle, trail):\n         \"\"\"\n         Trim trailing and wrapping punctuation from `middle`. Return the items\n@@ -292,7 +276,7 @@ def trim_punctuation(lead, middle, trail):\n             # Trim trailing punctuation (after trimming wrapping punctuation,\n             # as encoded entities contain ';'). Unescape entites to avoid\n             # breaking them by removing ';'.\n-            middle_unescaped = unescape(middle)\n+            middle_unescaped = html.unescape(middle)\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n                 trail = middle[len(stripped):] + trail\n@@ -329,9 +313,9 @@ def is_email_simple(value):\n             url = None\n             nofollow_attr = ' rel=\"nofollow\"' if nofollow else ''\n             if simple_url_re.match(middle):\n-                url = smart_urlquote(unescape(middle))\n+                url = smart_urlquote(html.unescape(middle))\n             elif simple_url_2_re.match(middle):\n-                url = smart_urlquote('http://%s' % unescape(middle))\n+                url = smart_urlquote('http://%s' % html.unescape(middle))\n             elif ':' not in middle and is_email_simple(middle):\n                 local, domain = middle.rsplit('@', 1)\n                 try:\ndiff --git a/docs/intro/tutorial05.txt b/docs/intro/tutorial05.txt\nindex 42891a6ecd99..c59a0db1555c 100644\n--- a/docs/intro/tutorial05.txt\n+++ b/docs/intro/tutorial05.txt\n@@ -387,7 +387,7 @@ With that ready, we can ask the client to do some work for us::\n     >>> response.status_code\n     200\n     >>> response.content\n-    b'\\n    <ul>\\n    \\n        <li><a href=\"/polls/1/\">What&#39;s up?</a></li>\\n    \\n    </ul>\\n\\n'\n+    b'\\n    <ul>\\n    \\n        <li><a href=\"/polls/1/\">What&#x27;s up?</a></li>\\n    \\n    </ul>\\n\\n'\n     >>> response.context['latest_question_list']\n     <QuerySet [<Question: What's up?>]>\n \ndiff --git a/docs/ref/templates/builtins.txt b/docs/ref/templates/builtins.txt\nindex 9509377a24f8..cd5476fd6fa3 100644\n--- a/docs/ref/templates/builtins.txt\n+++ b/docs/ref/templates/builtins.txt\n@@ -1603,7 +1603,7 @@ Escapes a string's HTML. Specifically, it makes these replacements:\n \n * ``<`` is converted to ``&lt;``\n * ``>`` is converted to ``&gt;``\n-* ``'`` (single quote) is converted to ``&#39;``\n+* ``'`` (single quote) is converted to ``&#x27;``\n * ``\"`` (double quote) is converted to ``&quot;``\n * ``&`` is converted to ``&amp;``\n \ndiff --git a/docs/ref/templates/language.txt b/docs/ref/templates/language.txt\nindex 1287f012c2f8..33687fc49d3b 100644\n--- a/docs/ref/templates/language.txt\n+++ b/docs/ref/templates/language.txt\n@@ -492,7 +492,7 @@ escaped:\n \n * ``<`` is converted to ``&lt;``\n * ``>`` is converted to ``&gt;``\n-* ``'`` (single quote) is converted to ``&#39;``\n+* ``'`` (single quote) is converted to ``&#x27;``\n * ``\"`` (double quote) is converted to ``&quot;``\n * ``&`` is converted to ``&amp;``\n \ndiff --git a/docs/ref/utils.txt b/docs/ref/utils.txt\nindex 5f03dc66e474..b36282048f9e 100644\n--- a/docs/ref/utils.txt\n+++ b/docs/ref/utils.txt\n@@ -584,6 +584,11 @@ escaping HTML.\n     for use in HTML. The input is first coerced to a string and the output has\n     :func:`~django.utils.safestring.mark_safe` applied.\n \n+    .. versionchanged:: 3.0\n+\n+        In older versions, ``'`` is converted to its decimal code ``&#39;``\n+        instead of the equivalent hex code ``&#x27;``.\n+\n .. function:: conditional_escape(text)\n \n     Similar to ``escape()``, except that it doesn't operate on pre-escaped\ndiff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt\nindex b279f9a451c3..2ee02206a133 100644\n--- a/docs/releases/3.0.txt\n+++ b/docs/releases/3.0.txt\n@@ -348,6 +348,10 @@ Miscellaneous\n   the session and :func:`django.contrib.auth.logout` no longer preserves the\n   session's language after logout.\n \n+* :func:`django.utils.html.escape` now uses :func:`html.escape` to escape HTML.\n+  This converts ``'`` to ``&#x27;`` instead of the previous equivalent decimal\n+  code ``&#39;``.\n+\n .. _deprecated-features-3.0:\n \n Features deprecated in 3.0\ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\nindex bcadff7d8a62..03d38bb2fd88 100644\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -199,7 +199,7 @@ def test_methods_with_arguments_display_arguments_default_value(self):\n         \"\"\"\n         Methods with keyword arguments should have their arguments displayed.\n         \"\"\"\n-        self.assertContains(self.response, \"<td>suffix=&#39;ltd&#39;</td>\")\n+        self.assertContains(self.response, '<td>suffix=&#x27;ltd&#x27;</td>')\n \n     def test_methods_with_multiple_arguments_display_arguments(self):\n         \"\"\"\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex e12cf0161ff3..e36931501ed7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -236,7 +236,7 @@ def test_password_help_text(self):\n         form = UserCreationForm()\n         self.assertEqual(\n             form.fields['password1'].help_text,\n-            '<ul><li>Your password can&#39;t be too similar to your other personal information.</li></ul>'\n+            '<ul><li>Your password can&#x27;t be too similar to your other personal information.</li></ul>'\n         )\n \n     @override_settings(AUTH_PASSWORD_VALIDATORS=[\ndiff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex edce5e801ff5..18fb4a94deb1 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -995,7 +995,7 @@ def clean_special_safe_name(self):\n         self.assertHTMLEqual(\n             f.as_table(),\n             \"\"\"<tr><th>&lt;em&gt;Special&lt;/em&gt; Field:</th><td>\n-<ul class=\"errorlist\"><li>Something&#39;s wrong with &#39;Nothing to escape&#39;</li></ul>\n+<ul class=\"errorlist\"><li>Something&#x27;s wrong with &#x27;Nothing to escape&#x27;</li></ul>\n <input type=\"text\" name=\"special_name\" value=\"Nothing to escape\" required></td></tr>\n <tr><th><em>Special</em> Field:</th><td>\n <ul class=\"errorlist\"><li>'<b>Nothing to escape</b>' is a safe string</li></ul>\n@@ -1008,10 +1008,10 @@ def clean_special_safe_name(self):\n         self.assertHTMLEqual(\n             f.as_table(),\n             \"\"\"<tr><th>&lt;em&gt;Special&lt;/em&gt; Field:</th><td>\n-<ul class=\"errorlist\"><li>Something&#39;s wrong with &#39;Should escape &lt; &amp; &gt; and\n-&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&#39;</li></ul>\n+<ul class=\"errorlist\"><li>Something&#x27;s wrong with &#x27;Should escape &lt; &amp; &gt; and\n+&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&#x27;</li></ul>\n <input type=\"text\" name=\"special_name\"\n-value=\"Should escape &lt; &amp; &gt; and &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;\" required></td></tr>\n+value=\"Should escape &lt; &amp; &gt; and &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;\" required></td></tr>\n <tr><th><em>Special</em> Field:</th><td>\n <ul class=\"errorlist\"><li>'<b><i>Do not escape</i></b>' is a safe string</li></ul>\n <input type=\"text\" name=\"special_safe_name\" value=\"&lt;i&gt;Do not escape&lt;/i&gt;\" required></td></tr>\"\"\"\n@@ -2632,7 +2632,7 @@ def clean(self):\n             t.render(Context({'form': UserRegistration(auto_id=False)})),\n             \"\"\"<form>\n <p>Username: <input type=\"text\" name=\"username\" maxlength=\"10\" required><br>\n-Good luck picking a username that doesn&#39;t already exist.</p>\n+Good luck picking a username that doesn&#x27;t already exist.</p>\n <p>Password1: <input type=\"password\" name=\"password1\" required></p>\n <p>Password2: <input type=\"password\" name=\"password2\" required></p>\n <input type=\"submit\" required>\ndiff --git a/tests/forms_tests/widget_tests/base.py b/tests/forms_tests/widget_tests/base.py\nindex 7222910479f4..339d78bc71e2 100644\n--- a/tests/forms_tests/widget_tests/base.py\n+++ b/tests/forms_tests/widget_tests/base.py\n@@ -22,7 +22,10 @@ def check_html(self, widget, name, value, html='', attrs=None, strict=False, **k\n         if self.jinja2_renderer:\n             output = widget.render(name, value, attrs=attrs, renderer=self.jinja2_renderer, **kwargs)\n             # Django escapes quotes with '&quot;' while Jinja2 uses '&#34;'.\n-            assertEqual(output.replace('&#34;', '&quot;'), html)\n+            output = output.replace('&#34;', '&quot;')\n+            # Django escapes single quotes with '&#x27;' while Jinja2 uses '&#39;'.\n+            output = output.replace('&#39;', '&#x27;')\n+            assertEqual(output, html)\n \n         output = widget.render(name, value, attrs=attrs, renderer=self.django_renderer, **kwargs)\n         assertEqual(output, html)\ndiff --git a/tests/forms_tests/widget_tests/test_clearablefileinput.py b/tests/forms_tests/widget_tests/test_clearablefileinput.py\nindex 2ba376db8a9f..ff6a1c74e79a 100644\n--- a/tests/forms_tests/widget_tests/test_clearablefileinput.py\n+++ b/tests/forms_tests/widget_tests/test_clearablefileinput.py\n@@ -46,7 +46,7 @@ def __str__(self):\n         self.check_html(ClearableFileInput(), 'my<div>file', StrangeFieldFile(), html=(\n             \"\"\"\n             Currently: <a href=\"something?chapter=1&amp;sect=2&amp;copy=3&amp;lang=en\">\n-            something&lt;div onclick=&quot;alert(&#39;oops&#39;)&quot;&gt;.jpg</a>\n+            something&lt;div onclick=&quot;alert(&#x27;oops&#x27;)&quot;&gt;.jpg</a>\n             <input type=\"checkbox\" name=\"my&lt;div&gt;file-clear\" id=\"my&lt;div&gt;file-clear_id\">\n             <label for=\"my&lt;div&gt;file-clear_id\">Clear</label><br>\n             Change: <input type=\"file\" name=\"my&lt;div&gt;file\">\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex e4f24c31eed6..3893eb334c92 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1197,7 +1197,7 @@ def test_initial_values(self):\n <li>Article: <textarea rows=\"10\" cols=\"40\" name=\"article\" required></textarea></li>\n <li>Categories: <select multiple name=\"categories\">\n <option value=\"%s\" selected>Entertainment</option>\n-<option value=\"%s\" selected>It&#39;s a test</option>\n+<option value=\"%s\" selected>It&#x27;s a test</option>\n <option value=\"%s\">Third test</option>\n </select></li>\n <li>Status: <select name=\"status\">\n@@ -1239,7 +1239,7 @@ def test_initial_values(self):\n <li>Article: <textarea rows=\"10\" cols=\"40\" name=\"article\" required>Hello.</textarea></li>\n <li>Categories: <select multiple name=\"categories\">\n <option value=\"%s\">Entertainment</option>\n-<option value=\"%s\">It&#39;s a test</option>\n+<option value=\"%s\">It&#x27;s a test</option>\n <option value=\"%s\">Third test</option>\n </select></li>\n <li>Status: <select name=\"status\">\n@@ -1290,7 +1290,7 @@ def formfield_for_dbfield(db_field, **kwargs):\n <li><label for=\"id_categories\">Categories:</label>\n <select multiple name=\"categories\" id=\"id_categories\">\n <option value=\"%d\" selected>Entertainment</option>\n-<option value=\"%d\" selected>It&39;s a test</option>\n+<option value=\"%d\" selected>It&#x27;s a test</option>\n <option value=\"%d\">Third test</option>\n </select></li>\"\"\"\n             % (self.c1.pk, self.c2.pk, self.c3.pk))\n@@ -1361,7 +1361,7 @@ def test_multi_fields(self):\n <tr><th>Article:</th><td><textarea rows=\"10\" cols=\"40\" name=\"article\" required></textarea></td></tr>\n <tr><th>Categories:</th><td><select multiple name=\"categories\">\n <option value=\"%s\">Entertainment</option>\n-<option value=\"%s\">It&#39;s a test</option>\n+<option value=\"%s\">It&#x27;s a test</option>\n <option value=\"%s\">Third test</option>\n </select></td></tr>\n <tr><th>Status:</th><td><select name=\"status\">\n@@ -1391,7 +1391,7 @@ def test_multi_fields(self):\n <li>Article: <textarea rows=\"10\" cols=\"40\" name=\"article\" required>Hello.</textarea></li>\n <li>Categories: <select multiple name=\"categories\">\n <option value=\"%s\" selected>Entertainment</option>\n-<option value=\"%s\">It&#39;s a test</option>\n+<option value=\"%s\">It&#x27;s a test</option>\n <option value=\"%s\">Third test</option>\n </select></li>\n <li>Status: <select name=\"status\">\n@@ -1535,7 +1535,7 @@ def test_runtime_choicefield_populated(self):\n <li>Article: <textarea rows=\"10\" cols=\"40\" name=\"article\" required></textarea></li>\n <li>Categories: <select multiple name=\"categories\">\n <option value=\"%s\">Entertainment</option>\n-<option value=\"%s\">It&#39;s a test</option>\n+<option value=\"%s\">It&#x27;s a test</option>\n <option value=\"%s\">Third test</option>\n </select> </li>\n <li>Status: <select name=\"status\">\n@@ -1561,7 +1561,7 @@ def test_runtime_choicefield_populated(self):\n <li>Article: <textarea rows=\"10\" cols=\"40\" name=\"article\" required></textarea></li>\n <li>Categories: <select multiple name=\"categories\">\n <option value=\"%s\">Entertainment</option>\n-<option value=\"%s\">It&#39;s a test</option>\n+<option value=\"%s\">It&#x27;s a test</option>\n <option value=\"%s\">Third test</option>\n <option value=\"%s\">Fourth</option>\n </select></li>\ndiff --git a/tests/template_tests/filter_tests/test_addslashes.py b/tests/template_tests/filter_tests/test_addslashes.py\nindex 9c6abd8684da..ede25cfb145d 100644\n--- a/tests/template_tests/filter_tests/test_addslashes.py\n+++ b/tests/template_tests/filter_tests/test_addslashes.py\n@@ -15,7 +15,7 @@ def test_addslashes01(self):\n     @setup({'addslashes02': '{{ a|addslashes }} {{ b|addslashes }}'})\n     def test_addslashes02(self):\n         output = self.engine.render_to_string('addslashes02', {\"a\": \"<a>'\", \"b\": mark_safe(\"<a>'\")})\n-        self.assertEqual(output, r\"&lt;a&gt;\\&#39; <a>\\'\")\n+        self.assertEqual(output, r\"&lt;a&gt;\\&#x27; <a>\\'\")\n \n \n class FunctionTests(SimpleTestCase):\ndiff --git a/tests/template_tests/filter_tests/test_make_list.py b/tests/template_tests/filter_tests/test_make_list.py\nindex 17c4cac48036..a3e8535ecbb3 100644\n--- a/tests/template_tests/filter_tests/test_make_list.py\n+++ b/tests/template_tests/filter_tests/test_make_list.py\n@@ -19,7 +19,7 @@ def test_make_list01(self):\n     @setup({'make_list02': '{{ a|make_list }}'})\n     def test_make_list02(self):\n         output = self.engine.render_to_string('make_list02', {\"a\": mark_safe(\"&\")})\n-        self.assertEqual(output, \"[&#39;&amp;&#39;]\")\n+        self.assertEqual(output, '[&#x27;&amp;&#x27;]')\n \n     @setup({'make_list03': '{% autoescape off %}{{ a|make_list|stringformat:\"s\"|safe }}{% endautoescape %}'})\n     def test_make_list03(self):\ndiff --git a/tests/template_tests/filter_tests/test_title.py b/tests/template_tests/filter_tests/test_title.py\nindex 08a5fb0de405..2eaf4a021992 100644\n--- a/tests/template_tests/filter_tests/test_title.py\n+++ b/tests/template_tests/filter_tests/test_title.py\n@@ -9,7 +9,7 @@ class TitleTests(SimpleTestCase):\n     @setup({'title1': '{{ a|title }}'})\n     def test_title1(self):\n         output = self.engine.render_to_string('title1', {'a': 'JOE\\'S CRAB SHACK'})\n-        self.assertEqual(output, 'Joe&#39;s Crab Shack')\n+        self.assertEqual(output, 'Joe&#x27;s Crab Shack')\n \n     @setup({'title2': '{{ a|title }}'})\n     def test_title2(self):\ndiff --git a/tests/template_tests/filter_tests/test_urlize.py b/tests/template_tests/filter_tests/test_urlize.py\nindex 649a9652033c..3843cc3e0a25 100644\n--- a/tests/template_tests/filter_tests/test_urlize.py\n+++ b/tests/template_tests/filter_tests/test_urlize.py\n@@ -52,7 +52,7 @@ def test_urlize05(self):\n     @setup({'urlize06': '{{ a|urlize }}'})\n     def test_urlize06(self):\n         output = self.engine.render_to_string('urlize06', {'a': \"<script>alert('foo')</script>\"})\n-        self.assertEqual(output, '&lt;script&gt;alert(&#39;foo&#39;)&lt;/script&gt;')\n+        self.assertEqual(output, '&lt;script&gt;alert(&#x27;foo&#x27;)&lt;/script&gt;')\n \n     # mailto: testing for urlize\n     @setup({'urlize07': '{{ a|urlize }}'})\n@@ -113,7 +113,7 @@ def test_url_split_chars(self):\n         )\n         self.assertEqual(\n             urlize('www.server.com\\'abc'),\n-            '<a href=\"http://www.server.com\" rel=\"nofollow\">www.server.com</a>&#39;abc',\n+            '<a href=\"http://www.server.com\" rel=\"nofollow\">www.server.com</a>&#x27;abc',\n         )\n         self.assertEqual(\n             urlize('www.server.com<abc'),\n@@ -284,7 +284,7 @@ def test_wrapping_characters(self):\n             ('<>', ('&lt;', '&gt;')),\n             ('[]', ('[', ']')),\n             ('\"\"', ('&quot;', '&quot;')),\n-            (\"''\", ('&#39;', '&#39;')),\n+            (\"''\", ('&#x27;', '&#x27;')),\n         )\n         for wrapping_in, (start_out, end_out) in wrapping_chars:\n             with self.subTest(wrapping_in=wrapping_in):\ndiff --git a/tests/template_tests/syntax_tests/test_url.py b/tests/template_tests/syntax_tests/test_url.py\nindex a6cc2d50a0f2..bdbc61454d0f 100644\n--- a/tests/template_tests/syntax_tests/test_url.py\n+++ b/tests/template_tests/syntax_tests/test_url.py\n@@ -78,7 +78,7 @@ def test_url11(self):\n     @setup({'url12': '{% url \"client_action\" id=client.id action=\"!$&\\'()*+,;=~:@,\" %}'})\n     def test_url12(self):\n         output = self.engine.render_to_string('url12', {'client': {'id': 1}})\n-        self.assertEqual(output, '/client/1/!$&amp;&#39;()*+,;=~:@,/')\n+        self.assertEqual(output, '/client/1/!$&amp;&#x27;()*+,;=~:@,/')\n \n     @setup({'url13': '{% url \"client_action\" id=client.id action=arg|join:\"-\" %}'})\n     def test_url13(self):\ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex d87927cdfead..02825f5e1e3e 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ def test_escape(self):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n@@ -70,6 +70,8 @@ def test_strip_tags(self):\n         items = (\n             ('<p>See: &#39;&eacute; is an apostrophe followed by e acute</p>',\n              'See: &#39;&eacute; is an apostrophe followed by e acute'),\n+            ('<p>See: &#x27;&eacute; is an apostrophe followed by e acute</p>',\n+             'See: &#x27;&eacute; is an apostrophe followed by e acute'),\n             ('<adf>a', 'a'),\n             ('</adf>a', 'a'),\n             ('<asdf><asdf>e', 'e'),\ndiff --git a/tests/view_tests/tests/test_csrf.py b/tests/view_tests/tests/test_csrf.py\nindex 4c20cb897d22..77f23733479a 100644\n--- a/tests/view_tests/tests/test_csrf.py\n+++ b/tests/view_tests/tests/test_csrf.py\n@@ -44,22 +44,22 @@ def test_no_referer(self):\n         self.assertContains(\n             response,\n             'You are seeing this message because this HTTPS site requires a '\n-            '&#39;Referer header&#39; to be sent by your Web browser, but '\n+            '&#x27;Referer header&#x27; to be sent by your Web browser, but '\n             'none was sent.',\n             status_code=403,\n         )\n         self.assertContains(\n             response,\n-            'If you have configured your browser to disable &#39;Referer&#39; '\n+            'If you have configured your browser to disable &#x27;Referer&#x27; '\n             'headers, please re-enable them, at least for this site, or for '\n-            'HTTPS connections, or for &#39;same-origin&#39; requests.',\n+            'HTTPS connections, or for &#x27;same-origin&#x27; requests.',\n             status_code=403,\n         )\n         self.assertContains(\n             response,\n             'If you are using the &lt;meta name=&quot;referrer&quot; '\n             'content=&quot;no-referrer&quot;&gt; tag or including the '\n-            '&#39;Referrer-Policy: no-referrer&#39; header, please remove them.',\n+            '&#x27;Referrer-Policy: no-referrer&#x27; header, please remove them.',\n             status_code=403,\n         )\n \ndiff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex a61e4b24ffa7..abe41dc37567 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -304,7 +304,7 @@ def test_request_and_exception(self):\n         reporter = ExceptionReporter(request, exc_type, exc_value, tb)\n         html = reporter.get_traceback_html()\n         self.assertInHTML('<h1>ValueError at /test_view/</h1>', html)\n-        self.assertIn('<pre class=\"exception_value\">Can&#39;t find my keys</pre>', html)\n+        self.assertIn('<pre class=\"exception_value\">Can&#x27;t find my keys</pre>', html)\n         self.assertIn('<th>Request Method:</th>', html)\n         self.assertIn('<th>Request URL:</th>', html)\n         self.assertIn('<h3 id=\"user-info\">USER</h3>', html)\n@@ -325,7 +325,7 @@ def test_no_request(self):\n         reporter = ExceptionReporter(None, exc_type, exc_value, tb)\n         html = reporter.get_traceback_html()\n         self.assertInHTML('<h1>ValueError</h1>', html)\n-        self.assertIn('<pre class=\"exception_value\">Can&#39;t find my keys</pre>', html)\n+        self.assertIn('<pre class=\"exception_value\">Can&#x27;t find my keys</pre>', html)\n         self.assertNotIn('<th>Request Method:</th>', html)\n         self.assertNotIn('<th>Request URL:</th>', html)\n         self.assertNotIn('<h3 id=\"user-info\">USER</h3>', html)\n@@ -463,7 +463,7 @@ def test_request_and_message(self):\n         reporter = ExceptionReporter(request, None, \"I'm a little teapot\", None)\n         html = reporter.get_traceback_html()\n         self.assertInHTML('<h1>Report at /test_view/</h1>', html)\n-        self.assertIn('<pre class=\"exception_value\">I&#39;m a little teapot</pre>', html)\n+        self.assertIn('<pre class=\"exception_value\">I&#x27;m a little teapot</pre>', html)\n         self.assertIn('<th>Request Method:</th>', html)\n         self.assertIn('<th>Request URL:</th>', html)\n         self.assertNotIn('<th>Exception Type:</th>', html)\n@@ -476,7 +476,7 @@ def test_message_only(self):\n         reporter = ExceptionReporter(None, None, \"I'm a little teapot\", None)\n         html = reporter.get_traceback_html()\n         self.assertInHTML('<h1>Report</h1>', html)\n-        self.assertIn('<pre class=\"exception_value\">I&#39;m a little teapot</pre>', html)\n+        self.assertIn('<pre class=\"exception_value\">I&#x27;m a little teapot</pre>', html)\n         self.assertNotIn('<th>Request Method:</th>', html)\n         self.assertNotIn('<th>Request URL:</th>', html)\n         self.assertNotIn('<th>Exception Type:</th>', html)\n@@ -508,7 +508,7 @@ def test_local_variable_escaping(self):\n         except Exception:\n             exc_type, exc_value, tb = sys.exc_info()\n         html = ExceptionReporter(None, exc_type, exc_value, tb).get_traceback_html()\n-        self.assertIn('<td class=\"code\"><pre>&#39;&lt;p&gt;Local variable&lt;/p&gt;&#39;</pre></td>', html)\n+        self.assertIn('<td class=\"code\"><pre>&#x27;&lt;p&gt;Local variable&lt;/p&gt;&#x27;</pre></td>', html)\n \n     def test_unprintable_values_handling(self):\n         \"Unprintable values should not make the output generation choke.\"\n@@ -607,7 +607,7 @@ def test_request_with_items_key(self):\n         An exception report can be generated for requests with 'items' in\n         request GET, POST, FILES, or COOKIES QueryDicts.\n         \"\"\"\n-        value = '<td>items</td><td class=\"code\"><pre>&#39;Oops&#39;</pre></td>'\n+        value = '<td>items</td><td class=\"code\"><pre>&#x27;Oops&#x27;</pre></td>'\n         # GET\n         request = self.rf.get('/test_view/?items=Oops')\n         reporter = ExceptionReporter(request, None, None, None)\n@@ -634,7 +634,7 @@ def test_request_with_items_key(self):\n         request = rf.get('/test_view/')\n         reporter = ExceptionReporter(request, None, None, None)\n         html = reporter.get_traceback_html()\n-        self.assertInHTML('<td>items</td><td class=\"code\"><pre>&#39;Oops&#39;</pre></td>', html)\n+        self.assertInHTML('<td>items</td><td class=\"code\"><pre>&#x27;Oops&#x27;</pre></td>', html)\n \n     def test_exception_fetching_user(self):\n         \"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11276"}