{"instance_id": "django__django-14007", "score": "I", "diff": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca527..1ba73379b3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -451,6 +451,15 @@ class QuerySet:\n         obj = self.model(**kwargs)\n         self._for_write = True\n         obj.save(force_insert=True, using=self.db)\n+        \n+        # Apply from_db_value for fields with custom converters\n+        for field in obj._meta.fields:\n+            if hasattr(field, 'from_db_value'):\n+                attr = field.attname\n+                value = getattr(obj, attr)\n+                converted = field.from_db_value(value, None, connections[self.db])\n+                setattr(obj, attr, converted)\n+        \n         return obj\n \n     def _prepare_for_bulk_create(self, objs):\n@@ -522,6 +531,15 @@ class QuerySet:\n                     obj_without_pk._state.adding = False\n                     obj_without_pk._state.db = self.db\n \n+        # Apply from_db_value for fields with custom converters\n+        for obj in objs:\n+            for field in opts.fields:\n+                if hasattr(field, 'from_db_value'):\n+                    attr = field.attname\n+                    value = getattr(obj, attr)\n+                    converted = field.from_db_value(value, None, connection)\n+                    setattr(obj, attr, converted)\n+\n         return objs\n \n     def bulk_update(self, objs, fields, batch_size=None):\n", "gold_standard_diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex f02199d97ca1..11ad4fde90df 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1405,6 +1405,7 @@ def execute_sql(self, returning_fields=None):\n             returning_fields and len(self.query.objs) != 1 and\n             not self.connection.features.can_return_rows_from_bulk_insert\n         )\n+        opts = self.query.get_meta()\n         self.returning_fields = returning_fields\n         with self.connection.cursor() as cursor:\n             for sql, params in self.as_sql():\n@@ -1412,13 +1413,21 @@ def execute_sql(self, returning_fields=None):\n             if not self.returning_fields:\n                 return []\n             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:\n-                return self.connection.ops.fetch_returned_insert_rows(cursor)\n-            if self.connection.features.can_return_columns_from_insert:\n+                rows = self.connection.ops.fetch_returned_insert_rows(cursor)\n+            elif self.connection.features.can_return_columns_from_insert:\n                 assert len(self.query.objs) == 1\n-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]\n-            return [(self.connection.ops.last_insert_id(\n-                cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column\n-            ),)]\n+                rows = [self.connection.ops.fetch_returned_insert_columns(\n+                    cursor, self.returning_params,\n+                )]\n+            else:\n+                rows = [(self.connection.ops.last_insert_id(\n+                    cursor, opts.db_table, opts.pk.column,\n+                ),)]\n+        cols = [field.get_col(opts.db_table) for field in self.returning_fields]\n+        converters = self.get_converters(cols)\n+        if converters:\n+            rows = list(self.apply_converters(rows, converters))\n+        return rows\n \n \n class SQLDeleteCompiler(SQLCompiler):\ndiff --git a/tests/custom_pk/fields.py b/tests/custom_pk/fields.py\nindex 5bd249df3c1b..bc7259300b75 100644\n--- a/tests/custom_pk/fields.py\n+++ b/tests/custom_pk/fields.py\n@@ -20,7 +20,7 @@ def __eq__(self, other):\n         return self.value == other\n \n \n-class MyAutoField(models.CharField):\n+class MyWrapperField(models.CharField):\n \n     def __init__(self, *args, **kwargs):\n         kwargs['max_length'] = 10\n@@ -58,3 +58,15 @@ def get_db_prep_value(self, value, connection, prepared=False):\n         if isinstance(value, MyWrapper):\n             return str(value)\n         return value\n+\n+\n+class MyAutoField(models.BigAutoField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        return MyWrapper(value)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return None\n+        return int(value)\ndiff --git a/tests/custom_pk/models.py b/tests/custom_pk/models.py\nindex edfc6712f352..d9a73885f2ee 100644\n--- a/tests/custom_pk/models.py\n+++ b/tests/custom_pk/models.py\n@@ -7,7 +7,7 @@\n \n from django.db import models\n \n-from .fields import MyAutoField\n+from .fields import MyAutoField, MyWrapperField\n \n \n class Employee(models.Model):\n@@ -31,8 +31,12 @@ class Meta:\n \n \n class Bar(models.Model):\n-    id = MyAutoField(primary_key=True, db_index=True)\n+    id = MyWrapperField(primary_key=True, db_index=True)\n \n \n class Foo(models.Model):\n     bar = models.ForeignKey(Bar, models.CASCADE)\n+\n+\n+class CustomAutoFieldModel(models.Model):\n+    id = MyAutoField(primary_key=True)\ndiff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex abb4ccd90b5b..cbf1fd2cb60c 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,8 @@\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .fields import MyWrapper\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n \n \n class BasicCustomPKTests(TestCase):\n@@ -230,3 +231,13 @@ def test_required_pk(self):\n         with self.assertRaises(IntegrityError):\n             with transaction.atomic():\n                 Employee.objects.create(first_name=\"Tom\", last_name=\"Smith\")\n+\n+    def test_auto_field_subclass_create(self):\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14007"}