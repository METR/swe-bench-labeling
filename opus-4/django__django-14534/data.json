{"instance_id": "django__django-14534", "score": "I", "diff": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..f257cf28ae 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs'].get('id', '')\n \n     @property\n     def choice_label(self):\ndiff --git a/test_backward_compat.py b/test_backward_compat.py\nnew file mode 100644\nindex 0000000000..0442d45b41\n--- /dev/null\n+++ b/test_backward_compat.py\n@@ -0,0 +1,49 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+\n+# Test that our change maintains backward compatibility for common use cases\n+\n+# Test 1: Default behavior should still generate ids in the expected format\n+class TestForm(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A'), ('b', 'Choice B')],\n+        widget=forms.CheckboxSelectMultiple(),\n+        required=False\n+    )\n+\n+form = TestForm()  # default auto_id = True\n+widget = list(form['choices'])[0]\n+\n+print(\"Test 1 - Default behavior (auto_id=True):\")\n+print(f\"  Expected id format: id_<fieldname>_<index>\")\n+print(f\"  Actual id: {widget.id_for_label}\")\n+print(f\"  Matches expected pattern: {'id_choices_0' == widget.id_for_label}\")\n+\n+# Test 2: When auto_id is a string with %s placeholder\n+form2 = TestForm(auto_id='id_%s')\n+widget2 = list(form2['choices'])[0]\n+\n+print(\"\\nTest 2 - With auto_id='id_%s':\")\n+print(f\"  Expected: id_choices_0\")\n+print(f\"  Actual: {widget2.id_for_label}\")\n+print(f\"  Matches: {widget2.id_for_label == 'id_choices_0'}\")\n+\n+# Test 3: The id should still be usable in templates\n+print(\"\\nTest 3 - Template usage:\")\n+print(f\"  id_for_label returns: '{widget.id_for_label}'\")\n+print(f\"  Can be used in <label for='{widget.id_for_label}'>\")\n+print(f\"  Empty string when no id: {'' == list(TestForm(auto_id=False)['choices'])[0].id_for_label}\")\n+\n+print(\"\\nBackward compatibility maintained: \u2713\")\ndiff --git a/test_boundwidget_id.py b/test_boundwidget_id.py\nnew file mode 100644\nindex 0000000000..c27bbd14aa\n--- /dev/null\n+++ b/test_boundwidget_id.py\n@@ -0,0 +1,77 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+\n+# Test Case 1: Test with auto_id\n+class TestForm1(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],\n+        widget=forms.CheckboxSelectMultiple(),\n+        required=False\n+    )\n+\n+form1 = TestForm1(auto_id='custom_id_%s')\n+field = form1['choices']\n+subwidgets = list(field)\n+\n+print(\"Test Case 1: With auto_id='custom_id_%s'\")\n+print(\"=\" * 50)\n+for i, widget in enumerate(subwidgets):\n+    print(f\"Widget {i}:\")\n+    print(f\"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}\")\n+    print(f\"  - widget.id_for_label: {widget.id_for_label}\")\n+    print(f\"  - Expected: {widget.data['attrs']['id']}\")\n+    print()\n+\n+# Test Case 2: Test with widget attrs id\n+class TestForm2(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],\n+        widget=forms.CheckboxSelectMultiple(attrs={'id': 'my_custom_id'}),\n+        required=False\n+    )\n+\n+form2 = TestForm2()\n+field2 = form2['choices']\n+subwidgets2 = list(field2)\n+\n+print(\"\\nTest Case 2: With widget attrs={'id': 'my_custom_id'}\")\n+print(\"=\" * 50)\n+for i, widget in enumerate(subwidgets2):\n+    print(f\"Widget {i}:\")\n+    print(f\"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}\")\n+    print(f\"  - widget.id_for_label: {widget.id_for_label}\")\n+    print(f\"  - Expected: {widget.data['attrs']['id']}\")\n+    print()\n+\n+# Test Case 3: Test default behavior\n+class TestForm3(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],\n+        widget=forms.CheckboxSelectMultiple(),\n+        required=False\n+    )\n+\n+form3 = TestForm3()\n+field3 = form3['choices']\n+subwidgets3 = list(field3)\n+\n+print(\"\\nTest Case 3: Default behavior (no auto_id or widget id)\")\n+print(\"=\" * 50)\n+for i, widget in enumerate(subwidgets3):\n+    print(f\"Widget {i}:\")\n+    print(f\"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}\")\n+    print(f\"  - widget.id_for_label: {widget.id_for_label}\")\n+    print(f\"  - Expected: {widget.data['attrs']['id']}\")\n+    print()\ndiff --git a/test_boundwidget_templates.py b/test_boundwidget_templates.py\nnew file mode 100644\nindex 0000000000..e0ded2c844\n--- /dev/null\n+++ b/test_boundwidget_templates.py\n@@ -0,0 +1,66 @@\n+import django\n+from django.conf import settings\n+from django.template import Context, Template\n+\n+# Configure Django settings  \n+settings.configure(\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=['django.contrib.contenttypes'],\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'APP_DIRS': True,\n+    }],\n+)\n+\n+django.setup()\n+\n+from django import forms\n+\n+# Test that the templates render correctly with id_for_label\n+class TestForm(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A'), ('b', 'Choice B')],\n+        widget=forms.CheckboxSelectMultiple(),\n+        required=False\n+    )\n+\n+# Test the template usage as shown in the issue description\n+template_string = \"\"\"\n+{% for checkbox in form.choices %}\n+<label for=\"{{ checkbox.id_for_label }}\">\n+    {{ checkbox.choice_label }}\n+    <span class=\"checkbox\">{{ checkbox.tag }}</span>\n+</label>\n+{% endfor %}\n+\"\"\"\n+\n+# Test with custom auto_id\n+form = TestForm(auto_id='custom_%s')\n+template = Template(template_string)\n+html = template.render(Context({'form': form}))\n+\n+print(\"Rendered HTML with auto_id='custom_%s':\")\n+print(\"=\" * 50)\n+print(html)\n+\n+# Check that the label's 'for' attribute matches the input's 'id'\n+import re\n+label_for_pattern = r'<label for=\"([^\"]+)\">'\n+input_id_pattern = r'<input[^>]+id=\"([^\"]+)\"'\n+\n+label_fors = re.findall(label_for_pattern, html)\n+input_ids = re.findall(input_id_pattern, html)\n+\n+print(\"\\nLabel 'for' attributes:\", label_fors)\n+print(\"Input 'id' attributes:\", input_ids)\n+\n+# They should match\n+if label_fors == input_ids:\n+    print(\"\\n\u2713 SUCCESS: Label 'for' attributes match input 'id' attributes!\")\n+else:\n+    print(\"\\n\u2717 FAILURE: Label 'for' attributes DO NOT match input 'id' attributes!\")\n+    print(\"  Expected:\", input_ids)\n+    print(\"  Got:\", label_fors)\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..2c16a63833\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,82 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+\n+# Edge case 1: Empty id\n+class TestForm1(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A')],\n+        widget=forms.CheckboxSelectMultiple(attrs={'id': ''}),\n+        required=False\n+    )\n+\n+form1 = TestForm1()\n+try:\n+    widget = list(form1['choices'])[0]\n+    print(\"Edge Case 1 - Empty id:\")\n+    print(f\"  widget.data['attrs']: {widget.data['attrs']}\")\n+    print(f\"  widget.id_for_label: {widget.id_for_label}\")\n+except Exception as e:\n+    print(f\"Edge Case 1 - Error: {e}\")\n+\n+# Edge case 2: No id at all\n+class TestForm2(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A')],\n+        widget=forms.CheckboxSelectMultiple(),\n+        required=False\n+    )\n+\n+form2 = TestForm2(auto_id=False)\n+try:\n+    widget = list(form2['choices'])[0]\n+    print(\"\\nEdge Case 2 - No id (auto_id=False):\")\n+    print(f\"  widget.data['attrs']: {widget.data['attrs']}\")\n+    print(f\"  widget.id_for_label: {widget.id_for_label}\")\n+except Exception as e:\n+    print(f\"\\nEdge Case 2 - Error: {e}\")\n+\n+# Edge case 3: RadioSelect widget\n+class TestForm3(forms.Form):\n+    choice = forms.ChoiceField(\n+        choices=[('a', 'Choice A'), ('b', 'Choice B')],\n+        widget=forms.RadioSelect(),\n+        required=False\n+    )\n+\n+form3 = TestForm3(auto_id='radio_%s')\n+try:\n+    widget = list(form3['choice'])[0]\n+    print(\"\\nEdge Case 3 - RadioSelect:\")\n+    print(f\"  widget.data['attrs']['id']: {widget.data['attrs']['id']}\")\n+    print(f\"  widget.id_for_label: {widget.id_for_label}\")\n+except Exception as e:\n+    print(f\"\\nEdge Case 3 - Error: {e}\")\n+\n+# Edge case 4: Complex id with special characters\n+class TestForm4(forms.Form):\n+    choices = forms.MultipleChoiceField(\n+        choices=[('a', 'Choice A')],\n+        widget=forms.CheckboxSelectMultiple(attrs={'id': 'my-complex_id$123'}),\n+        required=False\n+    )\n+\n+form4 = TestForm4()\n+try:\n+    widget = list(form4['choices'])[0]\n+    print(\"\\nEdge Case 4 - Complex id:\")\n+    print(f\"  widget.data['attrs']['id']: {widget.data['attrs']['id']}\")\n+    print(f\"  widget.id_for_label: {widget.id_for_label}\")\n+except Exception as e:\n+    print(f\"\\nEdge Case 4 - Error: {e}\")\ndiff --git a/test_radioselect.py b/test_radioselect.py\nnew file mode 100644\nindex 0000000000..71f39e1aa9\n--- /dev/null\n+++ b/test_radioselect.py\n@@ -0,0 +1,34 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+\n+# Test RadioSelect too\n+class TestFormRadio(forms.Form):\n+    choice = forms.ChoiceField(\n+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],\n+        widget=forms.RadioSelect(),\n+        required=False\n+    )\n+\n+form = TestFormRadio(auto_id='radio_id_%s')\n+field = form['choice']\n+subwidgets = list(field)\n+\n+print(\"Test RadioSelect with auto_id='radio_id_%s'\")\n+print(\"=\" * 50)\n+for i, widget in enumerate(subwidgets):\n+    print(f\"Widget {i}:\")\n+    print(f\"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}\")\n+    print(f\"  - widget.id_for_label: {widget.id_for_label}\")\n+    print()\n", "gold_standard_diff": "From db1fc5cd3c5d36cdb5d0fe4404efd6623dd3e8fb Mon Sep 17 00:00:00 2001\nFrom: Jacob Rief <jacob.rief@uibk.ac.at>\nDate: Wed, 4 Aug 2021 15:17:44 +0200\nSubject: [PATCH] Fixed #32855 -- Corrected BoundWidget.id_for_label() with\n custom auto_id.\n\n---\n django/forms/boundfield.py            |  2 +-\n tests/forms_tests/tests/test_forms.py | 18 +++++++++++++++++-\n 2 files changed, 18 insertions(+), 2 deletions(-)\n\ndiff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26b7..a061f15f8711 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ def template_name(self):\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs'].get('id')\n \n     @property\n     def choice_label(self):\ndiff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex f3ee64ceda0a..0fe074929402 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -720,7 +720,7 @@ class BeatleForm(Form):\n         fields = list(BeatleForm(auto_id=False)['name'])\n         self.assertEqual(len(fields), 4)\n \n-        self.assertEqual(fields[0].id_for_label, 'id_name_0')\n+        self.assertEqual(fields[0].id_for_label, None)\n         self.assertEqual(fields[0].choice_label, 'John')\n         self.assertHTMLEqual(fields[0].tag(), '<option value=\"john\">John</option>')\n         self.assertHTMLEqual(str(fields[0]), '<option value=\"john\">John</option>')\n@@ -3202,6 +3202,22 @@ class SomeForm(Form):\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14534"}