{"instance_id": "matplotlib__matplotlib-13989", "score": "C", "diff": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 4b73d52293..bc5461ad9f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6686,7 +6686,7 @@ optional.\n \n         density = bool(density) or bool(normed)\n         if density and not stacked:\n-            hist_kwargs = dict(density=density)\n+            hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n         tops = []\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..1b68ac87bc\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,56 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+# Set random seed for reproducibility\n+np.random.seed(42)\n+\n+# Test various combinations\n+test_cases = [\n+    {\"density\": True, \"stacked\": False, \"desc\": \"density=True, stacked=False\"},\n+    {\"density\": False, \"stacked\": False, \"desc\": \"density=False, stacked=False\"},\n+    {\"density\": True, \"stacked\": True, \"desc\": \"density=True, stacked=True\"},\n+    {\"density\": False, \"stacked\": True, \"desc\": \"density=False, stacked=True\"},\n+]\n+\n+# Single dataset tests\n+print(\"=== Single dataset tests ===\")\n+for test in test_cases:\n+    if \"stacked\" in test and test[\"stacked\"]:\n+        continue  # Skip stacked for single dataset\n+    print(f\"\\nTest: {test['desc']}\")\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=test.get(\"density\", False))\n+    print(f\"First bin: {bins[0]:.6f}, Last bin: {bins[-1]:.6f}\")\n+    assert bins[0] == 0, f\"First bin should be 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Last bin should be 1, got {bins[-1]}\"\n+    print(\"\u2713 PASSED\")\n+\n+# Multiple dataset tests\n+print(\"\\n=== Multiple dataset tests ===\")\n+data = [np.random.rand(10), np.random.rand(10)]\n+for test in test_cases:\n+    print(f\"\\nTest: {test['desc']}\")\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), **{k: v for k, v in test.items() if k != \"desc\"})\n+    print(f\"First bin: {bins[0]:.6f}, Last bin: {bins[-1]:.6f}\")\n+    assert bins[0] == 0, f\"First bin should be 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Last bin should be 1, got {bins[-1]}\"\n+    print(\"\u2713 PASSED\")\n+\n+# Test with custom bins\n+print(\"\\n=== Custom bins test ===\")\n+custom_bins = [0, 0.25, 0.5, 0.75, 1.0]\n+_, bins, _ = plt.hist(np.random.rand(10), bins=custom_bins, range=(0, 1), density=True)\n+print(f\"Bins: {bins}\")\n+assert np.array_equal(bins, custom_bins), \"Custom bins should be preserved\"\n+print(\"\u2713 PASSED\")\n+\n+# Test with weights (need to specify bins manually since auto doesn't work with weights)\n+print(\"\\n=== Weights test ===\")\n+data = np.random.rand(10)\n+weights = np.ones_like(data)\n+_, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True, weights=weights)\n+print(f\"First bin: {bins[0]:.6f}, Last bin: {bins[-1]:.6f}\")\n+assert bins[0] == 0, f\"First bin should be 0, got {bins[0]}\"\n+assert bins[-1] == 1, f\"Last bin should be 1, got {bins[-1]}\"\n+print(\"\u2713 PASSED\")\n+\n+print(\"\\n=== All tests passed! ===\")\ndiff --git a/test_hist_bug.py b/test_hist_bug.py\nnew file mode 100644\nindex 0000000000..98e2fbabf2\n--- /dev/null\n+++ b/test_hist_bug.py\n@@ -0,0 +1,17 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+# Test case 1: density=True (should fail - bins won't respect range)\n+print(\"Test 1: density=True\")\n+_, bins1, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+print(\"bins:\", bins1)\n+print(\"First bin:\", bins1[0], \"Last bin:\", bins1[-1])\n+print(\"Expected: First bin = 0, Last bin = 1\")\n+print()\n+\n+# Test case 2: density=False (should work - bins respect range)\n+print(\"Test 2: density=False\")\n+_, bins2, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+print(\"bins:\", bins2)\n+print(\"First bin:\", bins2[0], \"Last bin:\", bins2[-1])\n+print(\"Expected: First bin = 0, Last bin = 1\")\ndiff --git a/test_hist_range_density.py b/test_hist_range_density.py\nnew file mode 100644\nindex 0000000000..94bf4c65d0\n--- /dev/null\n+++ b/test_hist_range_density.py\n@@ -0,0 +1,54 @@\n+\"\"\"Test for regression in hist() where range parameter is ignored when density=True\"\"\"\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+\n+\n+def test_hist_range_with_density():\n+    \"\"\"Test that hist() respects range parameter when density=True\"\"\"\n+    np.random.seed(42)\n+    data = np.random.rand(10)\n+    \n+    # Test with density=True\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, f\"With density=True, first bin should be 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"With density=True, last bin should be 1, got {bins[-1]}\"\n+    \n+    # Test with density=False (control)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0, f\"With density=False, first bin should be 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"With density=False, last bin should be 1, got {bins[-1]}\"\n+    \n+    # Test with custom range\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2, f\"With custom range, first bin should be 0.2, got {bins[0]}\"\n+    assert bins[-1] == 0.8, f\"With custom range, last bin should be 0.8, got {bins[-1]}\"\n+\n+\n+def test_hist_range_with_density_multiple_datasets():\n+    \"\"\"Test that hist() respects range parameter when density=True with multiple datasets\"\"\"\n+    np.random.seed(42)\n+    data = [np.random.rand(10), np.random.rand(10)]\n+    \n+    # Test with density=True\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, f\"With density=True, first bin should be 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"With density=True, last bin should be 1, got {bins[-1]}\"\n+    \n+\n+def test_hist_range_with_density_stacked():\n+    \"\"\"Test that hist() respects range parameter when density=True and stacked=True\"\"\"\n+    np.random.seed(42)\n+    data = [np.random.rand(10), np.random.rand(10)]\n+    \n+    # Test with density=True and stacked=True\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True, stacked=True)\n+    assert bins[0] == 0, f\"With density=True and stacked=True, first bin should be 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"With density=True and stacked=True, last bin should be 1, got {bins[-1]}\"\n+\n+\n+if __name__ == \"__main__\":\n+    test_hist_range_with_density()\n+    test_hist_range_with_density_multiple_datasets()\n+    test_hist_range_with_density_stacked()\n+    print(\"All tests passed!\")\n", "gold_standard_diff": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 4b73d5229384..bc5461ad9f22 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6686,7 +6686,7 @@ def hist(self, x, bins=None, range=None, density=None, weights=None,\n \n         density = bool(density) or bool(normed)\n         if density and not stacked:\n-            hist_kwargs = dict(density=density)\n+            hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n         tops = []\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex cff4325f1936..b72c47839856 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6369,3 +6369,10 @@ def test_hist_nan_data():\n \n     assert np.allclose(bins, nanbins)\n     assert np.allclose(edges, nanedges)\n+\n+\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\",\n+                          range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/13989"}