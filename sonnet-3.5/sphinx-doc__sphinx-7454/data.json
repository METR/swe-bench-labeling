{"instance_id": "sphinx-doc__sphinx-7454", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex a427d5493..978e3d8e0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f917dbdf3..500bba009 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -98,6 +98,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n+    \n+    # Add handling for None type hints\n+    for name, annotation in annotations.items():\n+        if annotation == 'None':\n+            arg = arguments.setdefault(name, {})\n+            arg['type'] = True\n \n     for name, annotation in annotations.items():\n         if name == 'return':\ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex eb38d232c..8584ad899 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -47,7 +47,7 @@ def stringify(annotation: Any) -> str:\n         return annotation.__name__\n     elif not annotation:\n         return repr(annotation)\n-    elif annotation is NoneType:  # type: ignore\n+    elif annotation is NoneType or annotation == 'None':  # type: ignore\n         return 'None'\n     elif (getattr(annotation, '__module__', None) == 'builtins' and\n           hasattr(annotation, '__qualname__')):\ndiff --git a/tox.ini b/tox.ini\nindex d9f040544..bf39854b6 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From d9d381de11ee02512bd85d4982449923919968d1 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Fri, 10 Apr 2020 02:07:02 +0900\nSubject: [PATCH] Fix #7445: a return annotation ``None`` is not converted to a\n hyperlink\n\n---\n CHANGES                  | 2 ++\n sphinx/domains/python.py | 7 ++++++-\n tests/test_domain_py.py  | 7 +++++++\n 3 files changed, 15 insertions(+), 1 deletion(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex e0923b433ca..835dca01833 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -19,6 +19,8 @@ Bugs fixed\n ----------\n \n * #7428: py domain: a reference to class ``None`` emits a nitpicky warning\n+* #7445: py domain: a return annotation ``None`` in the function signature is\n+  not converted to a hyperlink when using intersphinx\n * #7418: std domain: duplication warning for glossary terms is case insensitive\n * #7438: C++, fix merging overloaded functions in parallel builds.\n * #7422: autodoc: fails with ValueError when using autodoc_mock_imports\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 893bb0a22dd..07a66fe22a7 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -71,8 +71,13 @@\n def _parse_annotation(annotation: str) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def make_xref(text: str) -> addnodes.pending_xref:\n+        if text == 'None':\n+            reftype = 'obj'\n+        else:\n+            reftype = 'class'\n+\n         return pending_xref('', nodes.Text(text),\n-                            refdomain='py', reftype='class', reftarget=text)\n+                            refdomain='py', reftype=reftype, reftarget=text)\n \n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex dc3d51d0a64..cc3d3cf5364 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -239,6 +239,7 @@ def test_get_full_qualified_name():\n def test_parse_annotation():\n     doctree = _parse_annotation(\"int\")\n     assert_node(doctree, ([pending_xref, \"int\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n \n     doctree = _parse_annotation(\"List[int]\")\n     assert_node(doctree, ([pending_xref, \"List\"],\n@@ -266,6 +267,12 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # None type makes an object-reference (not a class reference)\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+\n \n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7454"}