{"instance_id": "django__django-12308", "score": "I", "diff": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..1a3fac6fde 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -4,6 +4,7 @@ from collections import defaultdict\n \n from django.core.exceptions import FieldDoesNotExist\n from django.db import models, router\n+from django.db.models import JSONField\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.deletion import Collector\n from django.forms.utils import pretty_name\n@@ -379,6 +380,7 @@ def help_text_for_field(name, model):\n \n def display_for_field(value, field, empty_value_display):\n     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n+    from django.db.models import JSONField\n \n     if getattr(field, 'flatchoices', None):\n         return dict(field.flatchoices).get(value, empty_value_display)\n@@ -398,6 +400,8 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, JSONField):\n+        return field.prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \n", "gold_standard_diff": "From 675ce4dd35702ce353006611ba30799c0c4b015f Mon Sep 17 00:00:00 2001\nFrom: dbxnr <dbxnr@users.noreply.github.com>\nDate: Fri, 8 May 2020 08:44:33 +0200\nSubject: [PATCH 1/2] Refs #31157 -- Added tests for display_for_field() with\n empty JSONField.\n\n---\n tests/admin_utils/tests.py | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex 463ba9556d49..0ce18be0946a 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,9 @@ def test_null_display_for_field(self):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+        display_value = display_for_field(None, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, self.empty_value)\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n\nFrom fc0f7f6c152766c92a95c74a02cc6fab79440ed8 Mon Sep 17 00:00:00 2001\nFrom: dbxnr <dbxnr@users.noreply.github.com>\nDate: Fri, 8 May 2020 09:25:54 +0200\nSubject: [PATCH 2/2] Fixed #31157 -- Fixed displaying read-only JSONField\n values in admin.\n\n---\n django/contrib/admin/utils.py |  5 +++++\n tests/admin_utils/tests.py    | 14 ++++++++++++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f01735..021a086e6598 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,11 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField) and value:\n+        try:\n+            return field.get_prep_value(value)\n+        except TypeError:\n+            return display_for_value(value, empty_value_display)\n     else:\n         return display_for_value(value, empty_value_display)\n \ndiff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex 0ce18be0946a..cf0d3e064e3f 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -179,6 +179,20 @@ def test_null_display_for_field(self):\n         display_value = display_for_field(None, models.JSONField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12308"}