{"instance_id": "sympy__sympy-13372", "score": "C", "diff": "diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 72a5fbae52..98c20b0da1 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1301,12 +1301,16 @@ def evalf(x, prec, options):\n             elif re.is_number:\n                 re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                 reprec = prec\n+            else:\n+                raise NotImplementedError(\"Unable to convert real part to mpf\")\n             if im == 0:\n                 im = None\n                 imprec = None\n             elif im.is_number:\n                 im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                 imprec = prec\n+            else:\n+                raise NotImplementedError(\"Unable to convert imaginary part to mpf\")\n             r = re, im, reprec, imprec\n         except AttributeError:\n             raise NotImplementedError\n", "gold_standard_diff": "From 86ec4bb513b7b841977a312c9bba73b7147024ad Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sat, 30 Sep 2017 18:45:56 +0300\nSubject: [PATCH 1/4] Update evalf.py\n\n---\n sympy/core/evalf.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 72a5fbae524a..70c5ebaf6bcb 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1301,6 +1301,8 @@ def evalf(x, prec, options):\n             elif re.is_number:\n                 re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                 reprec = prec\n+            else:\n+                raise NotImplementedError\n             if im == 0:\n                 im = None\n                 imprec = None\n\nFrom e4d3edbc1ce5da2d68b7b593f6b42cd3f2aac00e Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sun, 1 Oct 2017 01:27:46 +0300\nSubject: [PATCH 2/4] 13076, test added.\n\n---\n sympy/core/tests/test_evalf.py | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex 4ac3d5c4718c..f4b3915ed10e 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -229,7 +229,9 @@ def test_evalf_bugs():\n \n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n-\n+    \n+    #issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n \n def test_evalf_integer_parts():\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n\nFrom bd6ad7f641b311225a43db747fb51fbff78234a4 Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sun, 1 Oct 2017 02:02:38 +0300\nSubject: [PATCH 3/4] #13076, else condition for im.is_number\n\nAdded else condition for im.is_number statement.\n---\n sympy/core/evalf.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 70c5ebaf6bcb..f34908710a5f 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1309,6 +1309,8 @@ def evalf(x, prec, options):\n             elif im.is_number:\n                 im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                 imprec = prec\n+            else:\n+                raise NotImplementedError\n             r = re, im, reprec, imprec\n         except AttributeError:\n             raise NotImplementedError\n\nFrom c6c1a777dc689561fdbe8097e5b1d1910ebdce48 Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sun, 1 Oct 2017 10:47:21 +0300\nSubject: [PATCH 4/4] # 13076, removes trailing whitespace\n\n---\n sympy/core/tests/test_evalf.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex f4b3915ed10e..4aef2d7dd66a 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -229,7 +229,7 @@ def test_evalf_bugs():\n \n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n-    \n+\n     #issue 13076\n     assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13372"}