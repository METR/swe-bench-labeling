{"instance_id": "django__django-12262", "score": "C", "diff": "diff --git a/comprehensive_test.py b/comprehensive_test.py\nnew file mode 100644\nindex 0000000000..ea6e510cf6\n--- /dev/null\n+++ b/comprehensive_test.py\n@@ -0,0 +1,104 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add testbed to Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    INSTALLED_APPS=['testapp2'],\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [],\n+        },\n+    }]\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.template import Context, Template\n+\n+print(\"Running comprehensive template tag tests...\")\n+print(\"=\" * 50)\n+\n+def test_template(template_str, context=None, expected_error=None):\n+    \"\"\"Helper function to test templates\"\"\"\n+    if context is None:\n+        context = Context({})\n+    \n+    try:\n+        t = Template(template_str)\n+        result = t.render(context)\n+        if expected_error:\n+            print(f\"FAIL: Expected error '{expected_error}' but got result: {result}\")\n+        else:\n+            print(f\"PASS: {result}\")\n+    except Exception as e:\n+        if expected_error and expected_error in str(e):\n+            print(f\"PASS: Got expected error: {e}\")\n+        else:\n+            print(f\"FAIL: Unexpected error: {e}\")\n+\n+# Test 1: Regular positional args\n+print(\"\\nTest 1: Regular positional args\")\n+test_template(\"{% load comprehensive_tags %}{% tag1 'a' 'b' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag1 arg1='a' arg2='b' %}\")\n+\n+# Test 2: Positional args with defaults\n+print(\"\\nTest 2: Positional args with defaults\")\n+test_template(\"{% load comprehensive_tags %}{% tag2 'a' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag2 'a' 'b' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag2 arg1='a' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag2 arg1='a' arg2='b' %}\")\n+\n+# Test 3: *args\n+print(\"\\nTest 3: *args\")\n+test_template(\"{% load comprehensive_tags %}{% tag3 'a' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag3 'a' 'b' 'c' %}\")\n+\n+# Test 4: **kwargs\n+print(\"\\nTest 4: **kwargs\")\n+test_template(\"{% load comprehensive_tags %}{% tag4 'a' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag4 'a' foo='bar' baz='qux' %}\")\n+\n+# Test 5: Keyword-only without default\n+print(\"\\nTest 5: Keyword-only without default\")\n+test_template(\"{% load comprehensive_tags %}{% tag5 kwonly='value' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag5 %}\", expected_error=\"did not receive value\")\n+\n+# Test 6: Keyword-only with default (the bug case)\n+print(\"\\nTest 6: Keyword-only with default (BUG CASE)\")\n+test_template(\"{% load comprehensive_tags %}{% tag6 %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag6 kwonly='custom' %}\")\n+\n+# Test 7: Mix of positional and keyword-only\n+print(\"\\nTest 7: Mix of positional and keyword-only\")\n+test_template(\"{% load comprehensive_tags %}{% tag7 'p1' kw1='k1' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag7 'p1' 'p2' kw1='k1' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag7 'p1' kw1='k1' kw2='k2' %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag7 pos1='p1' pos2='p2' kw1='k1' kw2='k2' %}\")\n+\n+# Test 8: takes_context\n+print(\"\\nTest 8: takes_context\")\n+test_template(\"{% load comprehensive_tags %}{% tag8 'arg' %}\", Context({'foo': 'bar'}))\n+\n+# Test 9: inclusion_tag with keyword-only args with defaults\n+print(\"\\nTest 9: inclusion_tag with keyword-only args with defaults\")\n+test_template(\"{% load comprehensive_tags %}{% tag9 %}\")\n+test_template(\"{% load comprehensive_tags %}{% tag9 greeting='Hi' %}\")\n+\n+# Test error cases\n+print(\"\\nTest error cases:\")\n+# Duplicate keyword argument\n+test_template(\"{% load comprehensive_tags %}{% tag1 arg1='a' arg1='b' %}\", \n+              expected_error=\"received multiple values\")\n+# Unexpected keyword argument\n+test_template(\"{% load comprehensive_tags %}{% tag1 'a' 'b' unexpected='c' %}\", \n+              expected_error=\"received unexpected keyword argument\")\ndiff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac8..2f74556268 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -261,7 +261,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n+            if param not in params and param not in kwonly and varkw is None:\n                 # An unexpected keyword argument was supplied\n                 raise TemplateSyntaxError(\n                     \"'%s' received unexpected keyword argument '%s'\" %\ndiff --git a/test_issue_fix.py b/test_issue_fix.py\nnew file mode 100644\nindex 0000000000..096d203aae\n--- /dev/null\n+++ b/test_issue_fix.py\n@@ -0,0 +1,76 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add testbed to Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    INSTALLED_APPS=['testissue'],\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [],\n+        },\n+    }]\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.template import Context, Template, TemplateSyntaxError\n+\n+print(\"Testing the exact examples from the issue...\")\n+print(\"=\" * 50)\n+\n+# Create test tags directory\n+os.makedirs('testissue/templatetags', exist_ok=True)\n+open('testissue/__init__.py', 'w').close()\n+open('testissue/templatetags/__init__.py', 'w').close()\n+\n+# Write the tags file with the examples from the issue\n+with open('testissue/templatetags/issue_tags.py', 'w') as f:\n+    f.write(\"\"\"from django import template\n+\n+register = template.Library()\n+\n+@register.simple_tag\n+def hello(*, greeting='hello'):\n+    return '{} world'.format(greeting)\n+\n+@register.simple_tag\n+def hi(*, greeting):\n+    return '{} world'.format(greeting)\n+\"\"\")\n+\n+# Test 1: The main bug - keyword-only argument with default value\n+print(\"\\nTest 1: Keyword-only argument with default value\")\n+print(\"Template: {% hello greeting='hi' %}\")\n+try:\n+    t = Template(\"{% load issue_tags %}{% hello greeting='hi' %}\")\n+    result = t.render(Context({}))\n+    print(\"\u2713 SUCCESS: {}\".format(result))\n+except TemplateSyntaxError as e:\n+    print(\"\u2717 FAILED: {}\".format(e))\n+\n+# Test 2: Duplicate keyword argument error message\n+print(\"\\nTest 2: Duplicate keyword argument error message\")\n+print(\"Template: {% hi greeting='hi' greeting='hello' %}\")\n+try:\n+    t = Template(\"{% load issue_tags %}{% hi greeting='hi' greeting='hello' %}\")\n+    result = t.render(Context({}))\n+    print(\"\u2717 FAILED: Should have raised error but got: {}\".format(result))\n+except TemplateSyntaxError as e:\n+    expected = \"'hi' received multiple values for keyword argument 'greeting'\"\n+    if expected in str(e):\n+        print(\"\u2713 SUCCESS: Got correct error message: {}\".format(e))\n+    else:\n+        print(\"\u2717 FAILED: Wrong error message: {}\".format(e))\n+\n+print(\"\\n\" + \"=\" * 50)\n+print(\"All tests completed!\")\ndiff --git a/test_issue_simple.py b/test_issue_simple.py\nnew file mode 100644\nindex 0000000000..e3f36b8c7e\n--- /dev/null\n+++ b/test_issue_simple.py\n@@ -0,0 +1,56 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add testbed to Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    INSTALLED_APPS=['testissue'],\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [],\n+        },\n+    }]\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.template import Context, Template, TemplateSyntaxError\n+\n+print(\"Testing the exact examples from the issue...\")\n+print(\"=\" * 50)\n+\n+# Test 1: The main bug - keyword-only argument with default value\n+print(\"\\nTest 1: Keyword-only argument with default value\")\n+print(\"Template: {% hello greeting='hi' %}\")\n+try:\n+    t = Template(\"{% load issue_tags %}{% hello greeting='hi' %}\")\n+    result = t.render(Context({}))\n+    print(\"\u2713 SUCCESS: {}\".format(result))\n+except TemplateSyntaxError as e:\n+    print(\"\u2717 FAILED: {}\".format(e))\n+\n+# Test 2: Duplicate keyword argument error message\n+print(\"\\nTest 2: Duplicate keyword argument error message\")\n+print(\"Template: {% hi greeting='hi' greeting='hello' %}\")\n+try:\n+    t = Template(\"{% load issue_tags %}{% hi greeting='hi' greeting='hello' %}\")\n+    result = t.render(Context({}))\n+    print(\"\u2717 FAILED: Should have raised error but got: {}\".format(result))\n+except TemplateSyntaxError as e:\n+    expected = \"'hi' received multiple values for keyword argument 'greeting'\"\n+    if expected in str(e):\n+        print(\"\u2713 SUCCESS: Got correct error message: {}\".format(e))\n+    else:\n+        print(\"\u2717 FAILED: Wrong error message: {}\".format(e))\n+\n+print(\"\\n\" + \"=\" * 50)\n+print(\"All tests completed!\")\ndiff --git a/test_kwonly_bug.py b/test_kwonly_bug.py\nnew file mode 100644\nindex 0000000000..46b510b23a\n--- /dev/null\n+++ b/test_kwonly_bug.py\n@@ -0,0 +1,33 @@\n+from django import template\n+from django.template import Context, Template\n+\n+# Create a template library\n+register = template.Library()\n+\n+# Test case 1: keyword-only argument with default value\n+@register.simple_tag\n+def hello(*, greeting='hello'):\n+    return f'{greeting} world'\n+\n+# Test case 2: keyword-only argument without default\n+@register.simple_tag  \n+def hi(*, greeting):\n+    return f'{greeting} world'\n+\n+# Test the tags\n+if __name__ == '__main__':\n+    # Test case 1: Should work but currently raises error\n+    try:\n+        t1 = Template(\"{% load test_kwonly_bug %}{% hello greeting='hi' %}\")\n+        result1 = t1.render(Context({}))\n+        print(f\"Test 1 result: {result1}\")\n+    except Exception as e:\n+        print(f\"Test 1 error: {e}\")\n+    \n+    # Test case 2: Multiple same keyword arguments\n+    try:\n+        t2 = Template(\"{% load test_kwonly_bug %}{% hi greeting='hi' greeting='hello' %}\")\n+        result2 = t2.render(Context({}))\n+        print(f\"Test 2 result: {result2}\")\n+    except Exception as e:\n+        print(f\"Test 2 error: {e}\")\ndiff --git a/test_script.py b/test_script.py\nnew file mode 100644\nindex 0000000000..00ec6afedd\n--- /dev/null\n+++ b/test_script.py\n@@ -0,0 +1,53 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add testbed to Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    INSTALLED_APPS=['testapp'],\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [],\n+        },\n+    }]\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.template import Context, Template\n+\n+# Test case 1: keyword-only argument with default value\n+print(\"Test 1: keyword-only argument with default value\")\n+try:\n+    t1 = Template(\"{% load test_kwonly_bug %}{% hello greeting='hi' %}\")\n+    result1 = t1.render(Context({}))\n+    print(f\"Result: {result1}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+\n+# Test case 2: Multiple same keyword arguments  \n+print(\"\\nTest 2: Multiple same keyword arguments\")\n+try:\n+    t2 = Template(\"{% load test_kwonly_bug %}{% hi greeting='hi' greeting='hello' %}\")\n+    result2 = t2.render(Context({}))\n+    print(f\"Result: {result2}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+\n+# Test case 3: Using default value\n+print(\"\\nTest 3: Using default value\")\n+try:\n+    t3 = Template(\"{% load test_kwonly_bug %}{% hello %}\")\n+    result3 = t3.render(Context({}))\n+    print(f\"Result: {result3}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\ndiff --git a/testapp/__init__.py b/testapp/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testapp/templatetags/__init__.py b/testapp/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testapp/templatetags/test_kwonly_bug.py b/testapp/templatetags/test_kwonly_bug.py\nnew file mode 100644\nindex 0000000000..46b510b23a\n--- /dev/null\n+++ b/testapp/templatetags/test_kwonly_bug.py\n@@ -0,0 +1,33 @@\n+from django import template\n+from django.template import Context, Template\n+\n+# Create a template library\n+register = template.Library()\n+\n+# Test case 1: keyword-only argument with default value\n+@register.simple_tag\n+def hello(*, greeting='hello'):\n+    return f'{greeting} world'\n+\n+# Test case 2: keyword-only argument without default\n+@register.simple_tag  \n+def hi(*, greeting):\n+    return f'{greeting} world'\n+\n+# Test the tags\n+if __name__ == '__main__':\n+    # Test case 1: Should work but currently raises error\n+    try:\n+        t1 = Template(\"{% load test_kwonly_bug %}{% hello greeting='hi' %}\")\n+        result1 = t1.render(Context({}))\n+        print(f\"Test 1 result: {result1}\")\n+    except Exception as e:\n+        print(f\"Test 1 error: {e}\")\n+    \n+    # Test case 2: Multiple same keyword arguments\n+    try:\n+        t2 = Template(\"{% load test_kwonly_bug %}{% hi greeting='hi' greeting='hello' %}\")\n+        result2 = t2.render(Context({}))\n+        print(f\"Test 2 result: {result2}\")\n+    except Exception as e:\n+        print(f\"Test 2 error: {e}\")\ndiff --git a/testapp2/__init__.py b/testapp2/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testapp2/templates/test_template.html b/testapp2/templates/test_template.html\nnew file mode 100644\nindex 0000000000..b29ff90cdd\n--- /dev/null\n+++ b/testapp2/templates/test_template.html\n@@ -0,0 +1 @@\n+{{ greeting }} from inclusion tag!\ndiff --git a/testapp2/templatetags/__init__.py b/testapp2/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testapp2/templatetags/comprehensive_tags.py b/testapp2/templatetags/comprehensive_tags.py\nnew file mode 100644\nindex 0000000000..d281a834ee\n--- /dev/null\n+++ b/testapp2/templatetags/comprehensive_tags.py\n@@ -0,0 +1,48 @@\n+from django import template\n+\n+register = template.Library()\n+\n+# Test 1: Regular positional args\n+@register.simple_tag\n+def tag1(arg1, arg2):\n+    return f\"tag1: {arg1}, {arg2}\"\n+\n+# Test 2: Positional args with defaults\n+@register.simple_tag\n+def tag2(arg1, arg2=\"default2\"):\n+    return f\"tag2: {arg1}, {arg2}\"\n+\n+# Test 3: *args\n+@register.simple_tag\n+def tag3(arg1, *args):\n+    return f\"tag3: {arg1}, args={args}\"\n+\n+# Test 4: **kwargs\n+@register.simple_tag\n+def tag4(arg1, **kwargs):\n+    return f\"tag4: {arg1}, kwargs={kwargs}\"\n+\n+# Test 5: Keyword-only without default\n+@register.simple_tag\n+def tag5(*, kwonly):\n+    return f\"tag5: {kwonly}\"\n+\n+# Test 6: Keyword-only with default (the bug case)\n+@register.simple_tag\n+def tag6(*, kwonly=\"default\"):\n+    return f\"tag6: {kwonly}\"\n+\n+# Test 7: Mix of positional, keyword-only without default, and keyword-only with default\n+@register.simple_tag\n+def tag7(pos1, pos2=\"pos2default\", *, kw1, kw2=\"kw2default\"):\n+    return f\"tag7: {pos1}, {pos2}, {kw1}, {kw2}\"\n+\n+# Test 8: takes_context\n+@register.simple_tag(takes_context=True)\n+def tag8(context, arg1):\n+    return f\"tag8: context_keys={list(context.keys())}, {arg1}\"\n+\n+# Test 9: inclusion_tag with keyword-only args with defaults\n+@register.inclusion_tag('test_template.html')\n+def tag9(*, greeting=\"Hello\"):\n+    return {'greeting': greeting}\ndiff --git a/testissue/__init__.py b/testissue/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testissue/templatetags/__init__.py b/testissue/templatetags/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testissue/templatetags/issue_tags.py b/testissue/templatetags/issue_tags.py\nnew file mode 100644\nindex 0000000000..79e846daf1\n--- /dev/null\n+++ b/testissue/templatetags/issue_tags.py\n@@ -0,0 +1,11 @@\n+from django import template\n+\n+register = template.Library()\n+\n+@register.simple_tag\n+def hello(*, greeting='hello'):\n+    return '{} world'.format(greeting)\n+\n+@register.simple_tag\n+def hi(*, greeting):\n+    return '{} world'.format(greeting)\n", "gold_standard_diff": "diff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac84b..2f7455626856 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -261,7 +261,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n+            if param not in params and param not in kwonly and varkw is None:\n                 # An unexpected keyword argument was supplied\n                 raise TemplateSyntaxError(\n                     \"'%s' received unexpected keyword argument '%s'\" %\ndiff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\nindex 242fbe80cbe0..21b4b10a6ed5 100644\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -136,6 +136,15 @@ def inclusion_one_default(one, two='hi'):\n inclusion_one_default.anything = \"Expected inclusion_one_default __dict__\"\n \n \n+@register.inclusion_tag('inclusion.html')\n+def inclusion_keyword_only_default(*, kwarg=42):\n+    return {\n+        'result': (\n+            'inclusion_keyword_only_default - Expected result: %s' % kwarg\n+        ),\n+    }\n+\n+\n @register.inclusion_tag(engine.get_template('inclusion.html'))\n def inclusion_one_default_from_template(one, two='hi'):\n     \"\"\"Expected inclusion_one_default_from_template __doc__\"\"\"\ndiff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex dbc5bc267d8d..62db0d44bcf1 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -62,6 +62,10 @@ def test_simple_tags(self):\n                 'simple_keyword_only_param - Expected result: 37'),\n             ('{% load custom %}{% simple_keyword_only_default %}',\n                 'simple_keyword_only_default - Expected result: 42'),\n+            (\n+                '{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37',\n+            ),\n             ('{% load custom %}{% simple_one_default 37 %}', 'simple_one_default - Expected result: 37, hi'),\n             ('{% load custom %}{% simple_one_default 37 two=\"hello\" %}',\n                 'simple_one_default - Expected result: 37, hello'),\n@@ -97,6 +101,18 @@ def test_simple_tag_errors(self):\n                 '{% load custom %}{% simple_one_default 37 42 56 %}'),\n             (\"'simple_keyword_only_param' did not receive value(s) for the argument(s): 'kwarg'\",\n                 '{% load custom %}{% simple_keyword_only_param %}'),\n+            (\n+                \"'simple_keyword_only_param' received multiple values for \"\n+                \"keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 '\n+                'kwarg=37 %}',\n+            ),\n+            (\n+                \"'simple_keyword_only_default' received multiple values for \"\n+                \"keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 '\n+                'kwarg=37 %}',\n+            ),\n             (\"'simple_unlimited_args_kwargs' received some positional argument(s) after some keyword argument(s)\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n@@ -180,6 +196,10 @@ def test_inclusion_tags(self):\n                 'inclusion_one_default - Expected result: 99, hello\\n'),\n             ('{% load inclusion %}{% inclusion_one_default 37 42 %}',\n                 'inclusion_one_default - Expected result: 37, 42\\n'),\n+            (\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n',\n+            ),\n             ('{% load inclusion %}{% inclusion_unlimited_args 37 %}',\n                 'inclusion_unlimited_args - Expected result: 37, hi\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args 37 42 56 89 %}',\n@@ -206,6 +226,12 @@ def test_inclusion_tag_errors(self):\n                 '{% load inclusion %}{% inclusion_one_default 37 42 56 %}'),\n             (\"'inclusion_one_default' did not receive value(s) for the argument(s): 'one'\",\n                 '{% load inclusion %}{% inclusion_one_default %}'),\n+            (\n+                \"'inclusion_keyword_only_default' received multiple values \"\n+                \"for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default '\n+                'kwarg=37 kwarg=42 %}',\n+            ),\n             (\"'inclusion_unlimited_args' did not receive value(s) for the argument(s): 'one'\",\n                 '{% load inclusion %}{% inclusion_unlimited_args %}'),\n             (\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12262"}