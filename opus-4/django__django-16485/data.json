{"instance_id": "django__django-16485", "score": "C", "diff": "diff --git a/debug_floatformat.py b/debug_floatformat.py\nnew file mode 100644\nindex 0000000000..38266cbeb2\n--- /dev/null\n+++ b/debug_floatformat.py\n@@ -0,0 +1,44 @@\n+import django\n+from django.conf import settings\n+from decimal import Decimal\n+\n+# Configure Django settings\n+settings.configure(USE_I18N=True, DEBUG=True, SECRET_KEY='test')\n+django.setup()\n+\n+# Let's trace through the function to understand the issue\n+text = '0.00'\n+arg = 0\n+\n+print(f\"Input: text='{text}', arg={arg}\")\n+\n+input_val = str(text)\n+d = Decimal(input_val)\n+print(f\"Decimal value d: {d}\")\n+print(f\"d.as_tuple(): {d.as_tuple()}\")\n+\n+p = int(arg)\n+print(f\"p: {p}\")\n+\n+m = int(d) - d\n+print(f\"m (int(d) - d): {m}\")\n+print(f\"not m: {not m}\")\n+print(f\"p < 0: {p < 0}\")\n+\n+if not m and p < 0:\n+    print(\"Would return early\")\n+else:\n+    print(\"Continuing...\")\n+    \n+    exp = Decimal(1).scaleb(-abs(p))\n+    print(f\"exp: {exp}\")\n+    \n+    tupl = d.as_tuple()\n+    units = len(tupl[1])\n+    print(f\"units (len(tupl[1])): {units}\")\n+    \n+    units += -tupl[2] if m else tupl[2]\n+    print(f\"units after adjustment: {units}\")\n+    \n+    prec = abs(p) + units + 1\n+    print(f\"prec calculation: abs({p}) + {units} + 1 = {prec}\")\ndiff --git a/debug_floatformat2.py b/debug_floatformat2.py\nnew file mode 100644\nindex 0000000000..faef612599\n--- /dev/null\n+++ b/debug_floatformat2.py\n@@ -0,0 +1,48 @@\n+import django\n+from django.conf import settings\n+from decimal import Decimal\n+\n+# Configure Django settings\n+settings.configure(USE_I18N=True, DEBUG=True, SECRET_KEY='test')\n+django.setup()\n+\n+# Let's trace through the function to understand the issue\n+def analyze_value(text, arg):\n+    print(f\"\\n=== Analyzing: text='{text}', arg={arg} ===\")\n+    \n+    input_val = str(text)\n+    d = Decimal(input_val)\n+    print(f\"Decimal value d: {d}\")\n+    print(f\"d.as_tuple(): {d.as_tuple()}\")\n+    \n+    p = int(arg)\n+    print(f\"p: {p}\")\n+    \n+    m = int(d) - d\n+    print(f\"m (int(d) - d): {m}\")\n+    print(f\"not m: {not m}\")\n+    print(f\"p < 0: {p < 0}\")\n+    \n+    if not m and p < 0:\n+        print(\"Would return early\")\n+    else:\n+        print(\"Continuing...\")\n+        \n+        exp = Decimal(1).scaleb(-abs(p))\n+        print(f\"exp: {exp}\")\n+        \n+        tupl = d.as_tuple()\n+        units = len(tupl[1])\n+        print(f\"units (len(tupl[1])): {units}\")\n+        \n+        units += -tupl[2] if m else tupl[2]\n+        print(f\"units after adjustment: {units}\")\n+        \n+        prec = abs(p) + units + 1\n+        print(f\"prec calculation: abs({p}) + {units} + 1 = {prec}\")\n+\n+# Test different cases\n+analyze_value('0.00', 0)\n+analyze_value('0.0', 0)\n+analyze_value('0', 0)\n+analyze_value('1.00', 0)\ndiff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08c67..e091f75cee 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -184,6 +184,8 @@ def floatformat(text, arg=-1):\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n     prec = abs(p) + units + 1\n+    # Ensure prec is at least 1 to avoid ValueError\n+    prec = max(1, prec)\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..18dfb02de2\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,57 @@\n+import django\n+from django.conf import settings\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+\n+# Configure Django settings\n+settings.configure(USE_I18N=True, DEBUG=True, SECRET_KEY='test')\n+django.setup()\n+\n+# Test various edge cases\n+test_cases = [\n+    # (input_value, arg, expected_output)\n+    ('0.00', 0, '0'),\n+    ('0.000', 0, '0'),\n+    ('0.0000', 0, '0'),\n+    ('0.00000', 0, '0'),\n+    (Decimal('0.00'), 0, '0'),\n+    (Decimal('0.000'), 0, '0'),\n+    (Decimal('0.0000'), 0, '0'),\n+    \n+    # Negative zeros\n+    ('-0.00', 0, '0'),\n+    ('-0.000', 0, '0'),\n+    (Decimal('-0.00'), 0, '0'),\n+    (Decimal('-0.000'), 0, '0'),\n+    \n+    # Non-zero values with many decimal places\n+    ('0.00001', 0, '0'),\n+    ('0.0001', 0, '0'),\n+    ('0.001', 0, '0'),\n+    ('0.01', 0, '0'),\n+    ('0.1', 0, '0'),\n+    \n+    # Some rounding cases\n+    ('0.4', 0, '0'),\n+    ('0.5', 0, '1'),\n+    ('0.6', 0, '1'),\n+    \n+    # With positive arg\n+    ('0.00', 1, '0.0'),\n+    ('0.00', 2, '0.00'),\n+    ('0.00', 3, '0.000'),\n+    \n+    # With negative arg\n+    ('0.00', -1, '0'),\n+    ('0.00', -2, '0'),\n+    ('0.00', -3, '0'),\n+]\n+\n+print(\"Testing edge cases:\")\n+for input_val, arg, expected in test_cases:\n+    try:\n+        result = floatformat(input_val, arg)\n+        status = \"PASS\" if result == expected else f\"FAIL (got {result})\"\n+        print(f\"floatformat({repr(input_val)}, {arg}) = {repr(result)} [{status}]\")\n+    except Exception as e:\n+        print(f\"floatformat({repr(input_val)}, {arg}) = ERROR: {type(e).__name__}: {e}\")\ndiff --git a/test_floatformat_issue.py b/test_floatformat_issue.py\nnew file mode 100644\nindex 0000000000..be378436db\n--- /dev/null\n+++ b/test_floatformat_issue.py\n@@ -0,0 +1,45 @@\n+import django\n+from django.conf import settings\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+\n+# Configure Django settings\n+settings.configure(USE_I18N=True, DEBUG=True, SECRET_KEY='test')\n+django.setup()\n+\n+# Test the issue\n+print(\"Testing floatformat('0.00', 0)\")\n+try:\n+    result = floatformat('0.00', 0)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nTesting floatformat(Decimal('0.00'), 0)\")\n+try:\n+    result = floatformat(Decimal('0.00'), 0)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+# Test with other similar values\n+print(\"\\nTesting floatformat('0.0', 0)\")\n+try:\n+    result = floatformat('0.0', 0)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nTesting floatformat('0', 0)\")\n+try:\n+    result = floatformat('0', 0)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nTesting floatformat('1.00', 0)\")\n+try:\n+    result = floatformat('1.00', 0)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\ndiff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 361a888ce3..d758e4d93e 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -111,6 +111,9 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n+        # Test edge case from issue: floatformat('0.00', 0) should not crash\n+        self.assertEqual(floatformat('0.00', 0), \"0\")\n+        self.assertEqual(floatformat(Decimal('0.00'), 0), \"0\")\n \n     def test_negative_zero_values(self):\n         tests = [\ndiff --git a/verify_issue_fix.py b/verify_issue_fix.py\nnew file mode 100644\nindex 0000000000..5db4ec1d8c\n--- /dev/null\n+++ b/verify_issue_fix.py\n@@ -0,0 +1,27 @@\n+\"\"\"\n+Verify the exact issue from the problem description is fixed\n+\"\"\"\n+import django\n+from django.conf import settings\n+settings.configure(USE_I18N=True, DEBUG=True, SECRET_KEY='test')\n+django.setup()\n+\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+\n+print(\"Testing the exact issue from the problem description:\")\n+print(\"=\" * 60)\n+\n+try:\n+    result = floatformat('0.00', 0)\n+    print(f\"floatformat('0.00', 0) = {repr(result)} \u2713\")\n+except Exception as e:\n+    print(f\"floatformat('0.00', 0) raised {type(e).__name__}: {e} \u2717\")\n+\n+try:\n+    result = floatformat(Decimal('0.00'), 0)\n+    print(f\"floatformat(Decimal('0.00'), 0) = {repr(result)} \u2713\")\n+except Exception as e:\n+    print(f\"floatformat(Decimal('0.00'), 0) raised {type(e).__name__}: {e} \u2717\")\n+\n+print(\"\\nBoth calls completed successfully without ValueError!\")\n", "gold_standard_diff": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08c6702..78881987fc05 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -168,7 +168,7 @@ def floatformat(text, arg=-1):\n     except (ValueError, OverflowError, InvalidOperation):\n         return input_val\n \n-    if not m and p < 0:\n+    if not m and p <= 0:\n         return mark_safe(\n             formats.number_format(\n                 \"%d\" % (int(d)),\ndiff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 361a888ce3de..8f75c2b4ee8d 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -111,6 +111,8 @@ def test_zero_values(self):\n         self.assertEqual(\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n \n     def test_negative_zero_values(self):\n         tests = [\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16485"}