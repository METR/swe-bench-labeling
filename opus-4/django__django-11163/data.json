{"instance_id": "django__django-11163", "score": "C", "diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex d157c291ef..5edbbd376f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..83908bdb28\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,46 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-key'\n+)\n+\n+django.setup()\n+\n+from django.forms.models import model_to_dict\n+from django.contrib.auth.models import User\n+\n+# Test edge cases\n+user = User(username='testuser', email='test@example.com')\n+\n+# Empty fields with exclude\n+result = model_to_dict(user, fields=[], exclude=['username'])\n+print(f\"fields=[], exclude=['username']: {result}\")\n+assert result == {}\n+\n+# Fields with some nonexistent field names\n+result = model_to_dict(user, fields=['username', 'nonexistent_field'])\n+print(f\"fields=['username', 'nonexistent_field']: {result}\")\n+assert result == {'username': 'testuser'}\n+\n+# Exclude takes precedence over fields\n+result = model_to_dict(user, fields=['username', 'email'], exclude=['email'])\n+print(f\"fields=['username', 'email'], exclude=['email']: {result}\")\n+assert result == {'username': 'testuser'}\n+\n+print(\"\\nAll edge cases passed!\")\ndiff --git a/test_model_to_dict.py b/test_model_to_dict.py\nnew file mode 100644\nindex 0000000000..5c56b806af\n--- /dev/null\n+++ b/test_model_to_dict.py\n@@ -0,0 +1,68 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-key'\n+)\n+\n+django.setup()\n+\n+from django.db import models\n+from django.forms.models import model_to_dict\n+from django.contrib.auth.models import User\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField(default=0)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Test the current behavior\n+print(\"Testing model_to_dict behavior:\")\n+print(\"-\" * 50)\n+\n+# Create a user instance to test with\n+user = User(username='testuser', email='test@example.com', first_name='Test', last_name='User')\n+\n+# Test 1: Default behavior (fields=None)\n+result1 = model_to_dict(user)\n+print(f\"1. model_to_dict(user) [fields=None]:\")\n+print(f\"   Keys: {sorted(result1.keys())}\")\n+print()\n+\n+# Test 2: Empty list behavior (should return empty dict according to the issue)\n+result2 = model_to_dict(user, fields=[])\n+print(f\"2. model_to_dict(user, fields=[]) [empty list]:\")\n+print(f\"   Result: {result2}\")\n+print(f\"   Expected: {{}}\")\n+print(f\"   Is empty dict? {result2 == {}}\")\n+print()\n+\n+# Test 3: Specific fields\n+result3 = model_to_dict(user, fields=['username', 'email'])\n+print(f\"3. model_to_dict(user, fields=['username', 'email']):\")\n+print(f\"   Result: {result3}\")\n+print()\n+\n+# Test 4: Check how the condition evaluates\n+fields = []\n+print(f\"4. Condition evaluation with fields=[]:\")\n+print(f\"   bool(fields) = {bool(fields)}\")\n+print(f\"   fields is not None = {fields is not None}\")\ndiff --git a/test_model_to_dict_empty_fields.py b/test_model_to_dict_empty_fields.py\nnew file mode 100644\nindex 0000000000..246c782970\n--- /dev/null\n+++ b/test_model_to_dict_empty_fields.py\n@@ -0,0 +1,54 @@\n+\"\"\"Test for model_to_dict with empty fields list.\"\"\"\n+import os\n+import sys\n+import django\n+from django.test import TestCase\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-key'\n+)\n+\n+django.setup()\n+\n+from django.forms.models import model_to_dict\n+from django.contrib.auth.models import User\n+\n+class TestModelToDict(TestCase):\n+    def test_empty_fields_list_returns_empty_dict(self):\n+        \"\"\"Test that model_to_dict returns an empty dict when fields=[]\"\"\"\n+        user = User(username='testuser', email='test@example.com')\n+        result = model_to_dict(user, fields=[])\n+        self.assertEqual(result, {})\n+        \n+    def test_none_fields_returns_all_fields(self):\n+        \"\"\"Test that model_to_dict returns all fields when fields=None\"\"\"\n+        user = User(username='testuser', email='test@example.com')\n+        result = model_to_dict(user)\n+        # Should have all editable fields\n+        self.assertIn('username', result)\n+        self.assertIn('email', result)\n+        \n+    def test_specific_fields_returns_only_those(self):\n+        \"\"\"Test that model_to_dict returns only specified fields\"\"\"\n+        user = User(username='testuser', email='test@example.com', first_name='Test')\n+        result = model_to_dict(user, fields=['username', 'email'])\n+        self.assertEqual(set(result.keys()), {'username', 'email'})\n+        self.assertEqual(result['username'], 'testuser')\n+        self.assertEqual(result['email'], 'test@example.com')\n+\n+if __name__ == '__main__':\n+    import unittest\n+    unittest.main()\n", "gold_standard_diff": "From 714cf468e10ccbfca6a97095939563a52b99e2eb Mon Sep 17 00:00:00 2001\nFrom: belegnar <admin@zilantkon.ru>\nDate: Wed, 3 Apr 2019 08:59:08 +0200\nSubject: [PATCH 1/2] Refs #30302 -- Added more tests for\n forms.model_to_dict().\n\n---\n tests/model_forms/tests.py | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex f4f3169bc120..495fba1fb290 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1814,6 +1814,9 @@ class Meta:\n \n         bw = BetterWriter.objects.create(name='Joe Better', score=10)\n         self.assertEqual(sorted(model_to_dict(bw)), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n \n         form = BetterWriterForm({'name': 'Some Name', 'score': 12})\n         self.assertTrue(form.is_valid())\n\nFrom 1ffddfc233e2d5139cc6ec31a4ec6ef70b10f87f Mon Sep 17 00:00:00 2001\nFrom: belegnar <admin@zilantkon.ru>\nDate: Wed, 3 Apr 2019 09:05:15 +0200\nSubject: [PATCH 2/2] Fixed #30302 -- Fixed forms.model_to_dict() result if\n empty list of fields is passed.\n\n---\n django/forms/models.py     | 2 +-\n tests/model_forms/tests.py | 1 +\n 2 files changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex d157c291efa8..5edbbd376f34 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 495fba1fb290..e4f24c31eed6 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1814,6 +1814,7 @@ class Meta:\n \n         bw = BetterWriter.objects.create(name='Joe Better', score=10)\n         self.assertEqual(sorted(model_to_dict(bw)), ['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(sorted(model_to_dict(bw, fields=[])), [])\n         self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n         self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n         self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11163"}