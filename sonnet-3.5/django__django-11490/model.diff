diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a44adfc760..2ecf1281b0 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -425,12 +425,14 @@ class SQLCompiler:
                 # If the columns list is limited, then all combined queries
                 # must have the same columns list. Set the selects defined on
                 # the query on all combined queries, if not already set.
-                if not compiler.query.values_select and self.query.values_select:
+                if self.query.values_select:
                     compiler.query.set_values((
                         *self.query.extra_select,
                         *self.query.values_select,
                         *self.query.annotation_select,
                     ))
+                elif compiler.query.values_select:
+                    self.query.set_values(compiler.query.values_select)
                 part_sql, part_args = compiler.as_sql()
                 if compiler.query.combinator:
                     # Wrap in a subquery if wrapping in parentheses isn't
diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..7392b62709
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.0.dev20190619064046 on 2025-05-14 14:31
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='ReservedName',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('order', models.IntegerField()),
+            ],
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_composed_queries.py b/test_composed_queries.py
new file mode 100644
index 0000000000..4f6952375d
--- /dev/null
+++ b/test_composed_queries.py
@@ -0,0 +1,73 @@
+
+import os
+import sys
+import django
+from django.conf import settings
+from django.test import TestCase
+from django.db import models, connection
+from django.core.management import call_command
+from django.test.utils import override_settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            '__main__',
+        ],
+        MIDDLEWARE=[],
+    )
+    django.setup()
+
+class ReservedName(models.Model):
+    name = models.CharField(max_length=100)
+    order = models.IntegerField()
+
+class ComposedQueryTest(TestCase):
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        with connection.cursor() as cursor:
+            cursor.execute('''
+                CREATE TABLE __main___reservedname (
+                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
+                    name VARCHAR(100) NOT NULL,
+                    "order" INTEGER NOT NULL
+                )
+            ''')
+
+    @classmethod
+    def tearDownClass(cls):
+        with connection.cursor() as cursor:
+            cursor.execute('DROP TABLE IF EXISTS __main___reservedname')
+        super().tearDownClass()
+
+    def setUp(self):
+        ReservedName.objects.create(name='a', order=2)
+
+    def test_composed_query_values_list(self):
+        qs1 = ReservedName.objects.all()
+        
+        # Test with name and order
+        result1 = qs1.union(qs1).values_list('name', 'order').get()
+        self.assertEqual(result1, ('a', 2))
+        
+        # Test with only order
+        result2 = qs1.union(qs1).values_list('order').get()
+        self.assertEqual(result2, (2,))
+
+if __name__ == '__main__':
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    if failures:
+        print("Tests failed. Please check the output above.")
+    else:
+        print("All tests passed successfully!")
\ No newline at end of file
