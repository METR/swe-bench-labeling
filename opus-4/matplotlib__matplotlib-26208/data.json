{"instance_id": "matplotlib__matplotlib-26208", "score": "I", "diff": "diff --git a/debug_issue.py b/debug_issue.py\nnew file mode 100644\nindex 0000000000..951be91a67\n--- /dev/null\n+++ b/debug_issue.py\n@@ -0,0 +1,48 @@\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+def print_datalim(*ax):\n+    for ax_ in ax:\n+        print(f\"{ax_}: {ax_.dataLim.intervaly}\", end=' / ')\n+    print()\n+\n+df1_index = ['16 May', '17 May']  # == df2_index\n+df1_values = [-22.717708333333402, 26.584999999999937]\n+df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+fig, ax1 = plt.subplots()\n+\n+# Let's also check if we're sharing data limits\n+print(\"Before stackplot:\")\n+print_datalim(ax1)\n+\n+ax1.stackplot(df1_index, df1_values)\n+print(\"\\nAfter stackplot:\")\n+print_datalim(ax1)\n+\n+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n+print(\"\\nAfter twinx:\")\n+print_datalim(ax1, ax2)\n+\n+# Check if they share dataLim\n+print(f\"\\nax1.dataLim is ax2.dataLim: {ax1.dataLim is ax2.dataLim}\")\n+print(f\"ax1._shared_axes['y'] is ax2._shared_axes['y']: {ax1._shared_axes['y'] is ax2._shared_axes['y']}\")\n+\n+ax2.plot(df1_index, df2_values)\n+print(\"\\nAfter plot on ax2:\")\n+print_datalim(ax1, ax2)\n+\n+# Let's also test the reverse order\n+print(\"\\n\\nTesting reverse order:\")\n+fig2, ax3 = plt.subplots()\n+ax3.plot(df1_index, df1_values)\n+print(\"After plot:\")\n+print_datalim(ax3)\n+\n+ax4 = ax3.twinx()\n+print(\"After twinx:\")\n+print_datalim(ax3, ax4)\n+\n+ax4.stackplot(df1_index, df2_values)\n+print(\"After stackplot on ax4:\")\n+print_datalim(ax3, ax4)\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..a8fa8bd151\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,21 @@\n+import matplotlib.pyplot as plt\n+\n+def print_datalim(*ax):\n+    for ax_ in ax:\n+        print(ax_.dataLim.intervaly, end=' / ')\n+    print()\n+\n+df1_index = ['16 May', '17 May']  # == df2_index\n+df1_values = [-22.717708333333402, 26.584999999999937]\n+df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+fig, ax1 = plt.subplots()\n+\n+ax1.stackplot(df1_index, df1_values)\n+print_datalim(ax1)\n+\n+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n+print_datalim(ax1, ax2)\n+\n+ax2.plot(df1_index, df2_values)\n+print_datalim(ax1, ax2)\ndiff --git a/trace_issue.py b/trace_issue.py\nnew file mode 100644\nindex 0000000000..30b8719575\n--- /dev/null\n+++ b/trace_issue.py\n@@ -0,0 +1,69 @@\n+import matplotlib.pyplot as plt\n+import matplotlib\n+import numpy as np\n+\n+# Monkey patch to trace dataLim changes\n+original_update_from_data_xy = matplotlib.transforms.Bbox.update_from_data_xy\n+\n+def traced_update_from_data_xy(self, xy, ignore=None, updatex=True, updatey=True):\n+    import traceback\n+    if hasattr(self, '_owner'):\n+        print(f\"\\nupdate_from_data_xy called on {self._owner}\")\n+        print(f\"  Before: {self}\")\n+        print(f\"  xy shape: {xy.shape if hasattr(xy, 'shape') else len(xy)}\")\n+        print(f\"  ignore={ignore}, updatex={updatex}, updatey={updatey}\")\n+        # print(\"  Stack trace:\")\n+        # for line in traceback.format_stack()[-5:-1]:\n+        #     print(\"    \" + line.strip())\n+    \n+    result = original_update_from_data_xy(self, xy, ignore, updatex, updatey)\n+    \n+    if hasattr(self, '_owner'):\n+        print(f\"  After: {self}\")\n+    \n+    return result\n+\n+matplotlib.transforms.Bbox.update_from_data_xy = traced_update_from_data_xy\n+\n+# Also trace autoscale_view\n+original_autoscale_view = matplotlib.axes._base._AxesBase.autoscale_view\n+\n+def traced_autoscale_view(self, tight=None, scalex=True, scaley=True):\n+    print(f\"\\nautoscale_view called on {self}\")\n+    print(f\"  tight={tight}, scalex={scalex}, scaley={scaley}\")\n+    print(f\"  Before dataLim: {self.dataLim}\")\n+    result = original_autoscale_view(self, tight, scalex, scaley)\n+    print(f\"  After dataLim: {self.dataLim}\")\n+    return result\n+\n+matplotlib.axes._base._AxesBase.autoscale_view = traced_autoscale_view\n+\n+def print_datalim(*ax):\n+    for ax_ in ax:\n+        print(f\"{ax_}: {ax_.dataLim.intervaly}\", end=' / ')\n+    print()\n+\n+df1_index = ['16 May', '17 May']\n+df1_values = [-22.717708333333402, 26.584999999999937]\n+df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+fig, ax1 = plt.subplots()\n+ax1.dataLim._owner = ax1  # Add reference for tracing\n+ax1.name = 'ax1'\n+\n+print(\"=== STACKPLOT ON AX1 ===\")\n+ax1.stackplot(df1_index, df1_values)\n+print(\"\\nAfter stackplot:\")\n+print_datalim(ax1)\n+\n+print(\"\\n=== CREATING TWINX ===\")\n+ax2 = ax1.twinx()\n+ax2.dataLim._owner = ax2\n+ax2.name = 'ax2'\n+print(\"\\nAfter twinx:\")\n+print_datalim(ax1, ax2)\n+\n+print(\"\\n=== PLOT ON AX2 ===\")\n+ax2.plot(df1_index, df2_values)\n+print(\"\\nAfter plot on ax2:\")\n+print_datalim(ax1, ax2)\ndiff --git a/trace_issue2.py b/trace_issue2.py\nnew file mode 100644\nindex 0000000000..3d7e7c3037\n--- /dev/null\n+++ b/trace_issue2.py\n@@ -0,0 +1,44 @@\n+import matplotlib.pyplot as plt\n+import matplotlib\n+import numpy as np\n+\n+# Trace autoscale_view\n+original_autoscale_view = matplotlib.axes._base._AxesBase.autoscale_view\n+\n+def traced_autoscale_view(self, tight=None, scalex=True, scaley=True):\n+    # Add identity check\n+    print(f\"\\nautoscale_view called on {self} (id: {id(self)})\")\n+    print(f\"  tight={tight}, scalex={scalex}, scaley={scaley}\")\n+    print(f\"  Before dataLim: {self.dataLim}\")\n+    \n+    # Check if we have shared axes\n+    if hasattr(self, '_shared_axes'):\n+        print(f\"  Shared y-axes siblings: {[id(ax) for ax in self._shared_axes['y'].get_siblings(self)]}\")\n+    \n+    result = original_autoscale_view(self, tight, scalex, scaley)\n+    print(f\"  After dataLim: {self.dataLim}\")\n+    return result\n+\n+matplotlib.axes._base._AxesBase.autoscale_view = traced_autoscale_view\n+\n+df1_index = ['16 May', '17 May']\n+df1_values = [-22.717708333333402, 26.584999999999937]\n+df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+fig, ax1 = plt.subplots()\n+print(f\"ax1 id: {id(ax1)}\")\n+\n+print(\"\\n=== STACKPLOT ON AX1 ===\")\n+ax1.stackplot(df1_index, df1_values)\n+\n+print(\"\\n=== CREATING TWINX ===\")\n+ax2 = ax1.twinx()\n+print(f\"ax2 id: {id(ax2)}\")\n+print(f\"ax1.dataLim: {ax1.dataLim}\")\n+print(f\"ax2.dataLim: {ax2.dataLim}\")\n+\n+print(\"\\n=== PLOT ON AX2 ===\")\n+ax2.plot(df1_index, df2_values)\n+print(f\"\\nFinal dataLims:\")\n+print(f\"ax1.dataLim: {ax1.dataLim}\")\n+print(f\"ax2.dataLim: {ax2.dataLim}\")\ndiff --git a/trace_issue3.py b/trace_issue3.py\nnew file mode 100644\nindex 0000000000..545cba0f02\n--- /dev/null\n+++ b/trace_issue3.py\n@@ -0,0 +1,32 @@\n+import matplotlib.pyplot as plt\n+import matplotlib\n+import numpy as np\n+\n+df1_index = ['16 May', '17 May']\n+df1_values = [-22.717708333333402, 26.584999999999937]\n+df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+fig, ax1 = plt.subplots()\n+\n+print(\"=== INITIAL STATE ===\")\n+print(f\"ax1 dataLim id: {id(ax1.dataLim)}\")\n+print(f\"ax1.dataLim: {ax1.dataLim}\")\n+\n+ax1.stackplot(df1_index, df1_values)\n+print(\"\\n=== AFTER STACKPLOT ===\")\n+print(f\"ax1 dataLim id: {id(ax1.dataLim)}\")\n+print(f\"ax1.dataLim: {ax1.dataLim}\")\n+\n+ax2 = ax1.twinx()\n+print(\"\\n=== AFTER TWINX ===\")\n+print(f\"ax1 dataLim id: {id(ax1.dataLim)}\")\n+print(f\"ax2 dataLim id: {id(ax2.dataLim)}\")\n+print(f\"ax1.dataLim: {ax1.dataLim}\")\n+print(f\"ax2.dataLim: {ax2.dataLim}\")\n+\n+ax2.plot(df1_index, df2_values)\n+print(\"\\n=== AFTER PLOT ON AX2 ===\")\n+print(f\"ax1 dataLim id: {id(ax1.dataLim)}\")\n+print(f\"ax2 dataLim id: {id(ax2.dataLim)}\")\n+print(f\"ax1.dataLim: {ax1.dataLim}\")\n+print(f\"ax2.dataLim: {ax2.dataLim}\")\ndiff --git a/trace_issue4.py b/trace_issue4.py\nnew file mode 100644\nindex 0000000000..849bc85e99\n--- /dev/null\n+++ b/trace_issue4.py\n@@ -0,0 +1,45 @@\n+import matplotlib.pyplot as plt\n+import matplotlib\n+import numpy as np\n+\n+# Trace relim\n+original_relim = matplotlib.axes._base._AxesBase.relim\n+\n+def traced_relim(self, visible_only=False):\n+    print(f\"\\nrelim called on {self} (id: {id(self)})\")\n+    print(f\"  Before dataLim: {self.dataLim}\")\n+    result = original_relim(self, visible_only)\n+    print(f\"  After dataLim: {self.dataLim}\")\n+    return result\n+\n+matplotlib.axes._base._AxesBase.relim = traced_relim\n+\n+# Also trace _request_autoscale_view\n+original_request_autoscale_view = matplotlib.axes._base._AxesBase._request_autoscale_view\n+\n+def traced_request_autoscale_view(self, axis=\"all\", tight=None):\n+    print(f\"\\n_request_autoscale_view called on {self} (id: {id(self)})\")\n+    print(f\"  axis={axis}, tight={tight}\")\n+    return original_request_autoscale_view(self, axis, tight)\n+\n+matplotlib.axes._base._AxesBase._request_autoscale_view = traced_request_autoscale_view\n+\n+df1_index = ['16 May', '17 May']\n+df1_values = [-22.717708333333402, 26.584999999999937]\n+df2_values = [-0.08501399999999998, -2.9833019999999966]\n+\n+fig, ax1 = plt.subplots()\n+print(f\"ax1 id: {id(ax1)}\")\n+\n+print(\"\\n=== STACKPLOT ON AX1 ===\")\n+ax1.stackplot(df1_index, df1_values)\n+\n+print(\"\\n=== CREATING TWINX ===\")\n+ax2 = ax1.twinx()\n+print(f\"ax2 id: {id(ax2)}\")\n+\n+print(\"\\n=== PLOT ON AX2 ===\")\n+ax2.plot(df1_index, df2_values)\n+print(f\"\\nFinal dataLims:\")\n+print(f\"ax1.dataLim: {ax1.dataLim}\")\n+print(f\"ax2.dataLim: {ax2.dataLim}\")\n", "gold_standard_diff": "From 5570743e720121455f6937ef5e5fa9267451b57a Mon Sep 17 00:00:00 2001\nFrom: Thomas A Caswell <tcaswell@gmail.com>\nDate: Wed, 28 Jun 2023 17:19:21 -0400\nSubject: [PATCH] FIX: also copy the axis units when creating twins\n\ncloses #26194\n---\n lib/matplotlib/axes/_base.py      |  2 ++\n lib/matplotlib/tests/test_axes.py | 17 +++++++++++++++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e3232c84..0d6e5d167772 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -4441,6 +4441,7 @@ def twinx(self):\n         self.yaxis.tick_left()\n         ax2.xaxis.set_visible(False)\n         ax2.patch.set_visible(False)\n+        ax2.xaxis.units = self.xaxis.units\n         return ax2\n \n     def twiny(self):\n@@ -4470,6 +4471,7 @@ def twiny(self):\n         self.xaxis.tick_bottom()\n         ax2.yaxis.set_visible(False)\n         ax2.patch.set_visible(False)\n+        ax2.yaxis.units = self.yaxis.units\n         return ax2\n \n     def get_shared_x_axes(self):\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 4f01752819f4..0bdbeaed234e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -376,6 +376,23 @@ def test_twinx_cla():\n     assert ax.yaxis.get_visible()\n \n \n+@pytest.mark.parametrize('twin', ('x', 'y'))\n+def test_twin_units(twin):\n+    axis_name = f'{twin}axis'\n+    twin_func = f'twin{twin}'\n+\n+    a = ['0', '1']\n+    b = ['a', 'b']\n+\n+    fig = Figure()\n+    ax1 = fig.subplots()\n+    ax1.plot(a, b)\n+    assert getattr(ax1, axis_name).units is not None\n+    ax2 = getattr(ax1, twin_func)()\n+    assert getattr(ax2, axis_name).units is not None\n+    assert getattr(ax2, axis_name).units is getattr(ax1, axis_name).units\n+\n+\n @pytest.mark.parametrize('twin', ('x', 'y'))\n @check_figures_equal(extensions=['png'], tol=0.19)\n def test_twin_logscale(fig_test, fig_ref, twin):\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/26208"}