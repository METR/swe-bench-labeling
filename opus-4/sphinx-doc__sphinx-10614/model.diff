diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py
index 6e3985512..61323d1d7 100644
--- a/sphinx/ext/inheritance_diagram.py
+++ b/sphinx/ext/inheritance_diagram.py
@@ -412,16 +412,20 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag
     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)
     for child in pending_xrefs:
         if child.get('refuri') is not None:
-            if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = "../" + child.get('refuri')
-            else:
-                urls[child['reftitle']] = child.get('refuri')
+            # For SVG format, fix_svg_relative_paths in graphviz.py will handle
+            # making the paths relative to the image location
+            urls[child['reftitle']] = child.get('refuri')
         elif child.get('refid') is not None:
+            # For fragment-only links, always use the current filename
             if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')
+                urls[child['reftitle']] = current_filename + '#' + child.get('refid')
             else:
                 urls[child['reftitle']] = '#' + child.get('refid')
 
+    # Debug: print URLs to understand what's being passed
+    # print(f"DEBUG: current_docname={self.builder.current_docname}")
+    # print(f"DEBUG: urls={urls}")
+    
     dotcode = graph.generate_dot(name, urls, env=self.builder.env)
     render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance',
                     alt='Inheritance diagram of ' + node['content'])
diff --git a/test_inheritance_svg_bug.py b/test_inheritance_svg_bug.py
new file mode 100644
index 000000000..ae9b28674
--- /dev/null
+++ b/test_inheritance_svg_bug.py
@@ -0,0 +1,141 @@
+#!/usr/bin/env python3
+"""Test case to reproduce the inheritance diagram SVG bug."""
+
+import os
+import shutil
+import tempfile
+import subprocess
+from pathlib import Path
+
+# Create a temporary directory for our test
+test_dir = tempfile.mkdtemp(prefix="sphinx_svg_test_")
+print(f"Test directory: {test_dir}")
+
+# Create the source directory structure
+docs_source = Path(test_dir) / "docs_source"
+docs_source.mkdir()
+
+# Create conf.py
+conf_py = docs_source / "conf.py"
+conf_py.write_text(f'''
+import sys
+sys.path.insert(0, '{docs_source}')
+
+project = 'SVG Bug Test'
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.inheritance_diagram',
+]
+graphviz_output_format = 'svg'
+''')
+
+# Create the package directory
+my_package = docs_source / "my_package"
+my_package.mkdir()
+
+# Create __init__.py for the package
+init_py = my_package / "__init__.py"
+init_py.write_text('''
+"""My package."""
+
+class MyClass1:
+    """First class."""
+    pass
+
+class MyClass2(MyClass1):
+    """Second class that inherits from MyClass1."""
+    pass
+''')
+
+# Create index.rst in root
+index_rst = docs_source / "index.rst"
+index_rst.write_text('''
+Test Project
+============
+
+.. toctree::
+   :maxdepth: 2
+
+   my_package/index
+
+Root Level Inheritance Diagram
+------------------------------
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+
+Links in the above diagram should work correctly.
+''')
+
+# Create my_package/index.rst
+package_index_rst = my_package / "index.rst"
+package_index_rst.write_text('''
+My Package
+==========
+
+Package Level Inheritance Diagram
+---------------------------------
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+
+Links in the above diagram should NOT work correctly (404 error).
+
+API Documentation
+-----------------
+
+.. autoclass:: my_package.MyClass1
+   :members:
+
+.. autoclass:: my_package.MyClass2
+   :members:
+''')
+
+# Create my_package/my_class_1.rst
+class1_rst = my_package / "my_class_1.rst"
+class1_rst.write_text('''
+MyClass1
+========
+
+.. autoclass:: my_package.MyClass1
+   :members:
+''')
+
+# Create my_package/my_class_2.rst  
+class2_rst = my_package / "my_class_2.rst"
+class2_rst.write_text('''
+MyClass2
+========
+
+.. autoclass:: my_package.MyClass2
+   :members:
+''')
+
+# Build the documentation
+docs_build = Path(test_dir) / "docs_build"
+cmd = ["sphinx-build", "-b", "html", str(docs_source), str(docs_build)]
+print(f"Running: {' '.join(cmd)}")
+result = subprocess.run(cmd, capture_output=True, text=True)
+print("STDOUT:", result.stdout)
+print("STDERR:", result.stderr)
+
+# Check if SVG files were created
+svg_files = list(docs_build.glob("_images/*.svg"))
+print(f"\nSVG files created: {len(svg_files)}")
+for svg_file in svg_files:
+    print(f"  - {svg_file}")
+    
+    # Read and print the SVG content to check the links
+    svg_content = svg_file.read_text()
+    import re
+    href_pattern = r'xlink:href="([^"]+)"'
+    hrefs = re.findall(href_pattern, svg_content)
+    if hrefs:
+        print(f"    Links found in {svg_file.name}:")
+        for href in hrefs:
+            print(f"      - {href}")
+
+print(f"\nTest files are in: {test_dir}")
+print("To view the issue:")
+print(f"1. Open {docs_build}/index.html - links in diagram should work")
+print(f"2. Open {docs_build}/my_package/index.html - links in diagram should be broken")
diff --git a/test_urls.py b/test_urls.py
new file mode 100644
index 000000000..84aa09ccf
--- /dev/null
+++ b/test_urls.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+"""Test to understand URL generation."""
+
+import os
+from pathlib import Path
+
+# Problem: The actual URL in the SVG shows "../docs_build/my_class_1.html"
+# This means the original URL was "docs_build/my_class_1.html"
+
+# Simulate the scenario
+outdir = "/tmp/sphinx_svg_test_ehqfpfyx/docs_build"
+imgpath = "_images"
+
+# What if the URL was already prefixed with "docs_build/"?
+url = "docs_build/my_class_1.html#my_package.MyClass1"
+
+# What fix_svg_relative_paths does:
+old_path = os.path.join(outdir, url)
+print(f"If url='{url}':")
+print(f"  old_path: {old_path}")
+
+new_path = os.path.relpath(
+    old_path,
+    start=os.path.join(outdir, imgpath),
+)
+print(f"  new_path: {new_path}")
+print("  This would result in: ../docs_build/my_class_1.html")
+
+# More likely scenario - let's check what refuri would contain
+# This suggests that refuri from pending_xref has the full path including output directory
diff --git a/tox.ini b/tox.ini
index a3dc56211..c76147de3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
