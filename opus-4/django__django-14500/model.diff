diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..db02948772 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -277,6 +277,10 @@ class MigrationExecutor:
             all_applied = all(m in applied for m in migration.replaces)
             if all_applied and key not in applied:
                 self.recorder.record_applied(*key)
+            elif not all_applied and key in applied:
+                # If not all replaced migrations are applied, the squashed
+                # migration should not be marked as applied either.
+                self.recorder.record_unapplied(*key)
 
     def detect_soft_applied(self, project_state, migration):
         """
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4e77c461bd
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,87 @@
+"""
+Test edge cases for the squashed migration fix
+"""
+import os
+import django
+from django.conf import settings
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+    USE_TZ=True,
+    MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"}
+)
+
+django.setup()
+
+def test_edge_cases():
+    recorder = MigrationRecorder(connection)
+    executor = MigrationExecutor(connection)
+    
+    print("Test 1: Apply squashed migration directly when all replaced are applied")
+    # Apply both replaced migrations
+    recorder.record_applied("migrations", "0001_initial")
+    recorder.record_applied("migrations", "0002_second")
+    
+    # Create new executor to reload state
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    # Verify squashed migration is marked as applied
+    applied = recorder.applied_migrations()
+    assert ("migrations", "0001_squashed_0002") in applied
+    print("✓ Squashed migration is marked as applied when all replaced are applied")
+    
+    # Now unapply the squashed migration directly
+    recorder.record_unapplied("migrations", "0001_squashed_0002")
+    
+    # Create new executor and check replacements
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    # The squashed migration should remain unapplied since we explicitly unapplied it
+    applied = recorder.applied_migrations()
+    assert ("migrations", "0001_squashed_0002") not in applied
+    print("✓ Squashed migration remains unapplied after explicit unapply")
+    
+    print("\nTest 2: Ensure squashed migration isn't re-applied if explicitly unapplied")
+    # All replaced are still applied
+    assert ("migrations", "0001_initial") in applied
+    assert ("migrations", "0002_second") in applied
+    
+    # Run check_replacements again
+    executor.check_replacements()
+    
+    applied = recorder.applied_migrations()
+    # Should not re-apply the squashed migration
+    assert ("migrations", "0001_squashed_0002") not in applied
+    print("✓ Squashed migration is not re-applied automatically")
+    
+    print("\nTest 3: Re-apply squashed migration explicitly")
+    recorder.record_applied("migrations", "0001_squashed_0002")
+    
+    # Now unapply one replaced migration
+    recorder.record_unapplied("migrations", "0002_second")
+    
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    applied = recorder.applied_migrations()
+    # Squashed migration should be unapplied since not all replaced are applied
+    assert ("migrations", "0001_squashed_0002") not in applied
+    print("✓ Squashed migration is unapplied when not all replaced are applied")
+    
+    print("\nAll edge case tests passed!")
+
+if __name__ == "__main__":
+    test_edge_cases()
diff --git a/test_squashed_migration_unapply.py b/test_squashed_migration_unapply.py
new file mode 100644
index 0000000000..c9bb675edb
--- /dev/null
+++ b/test_squashed_migration_unapply.py
@@ -0,0 +1,77 @@
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.test import TestCase
+from django.test.utils import override_settings
+
+
+@override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"})
+class TestSquashedMigrationUnapply(TestCase):
+    """
+    Test that squashed migrations are properly marked as unapplied when
+    their replaced migrations are unapplied.
+    """
+
+    def test_unapply_replaced_migration_marks_squash_as_unapplied(self):
+        recorder = MigrationRecorder(connection)
+        executor = MigrationExecutor(connection)
+        
+        # Apply both replaced migrations
+        recorder.record_applied("migrations", "0001_initial")
+        recorder.record_applied("migrations", "0002_second")
+        
+        # Run check_replacements to mark squashed migration as applied
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # Verify squashed migration is marked as applied
+        applied = recorder.applied_migrations()
+        self.assertIn(("migrations", "0001_squashed_0002"), applied)
+        
+        # Now unapply one of the replaced migrations
+        recorder.record_unapplied("migrations", "0002_second")
+        
+        # Run check_replacements again 
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # The squashed migration should now be marked as unapplied
+        applied = recorder.applied_migrations()
+        self.assertNotIn(("migrations", "0001_squashed_0002"), applied)
+        self.assertIn(("migrations", "0001_initial"), applied)
+        self.assertNotIn(("migrations", "0002_second"), applied)
+        
+    def test_reapply_replaced_migration_marks_squash_as_applied(self):
+        recorder = MigrationRecorder(connection)
+        executor = MigrationExecutor(connection)
+        
+        # Apply only one replaced migration
+        recorder.record_applied("migrations", "0001_initial")
+        
+        # Run check_replacements
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # Squashed migration should not be marked as applied
+        applied = recorder.applied_migrations()
+        self.assertNotIn(("migrations", "0001_squashed_0002"), applied)
+        
+        # Apply the second replaced migration
+        recorder.record_applied("migrations", "0002_second")
+        
+        # Run check_replacements again
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # Now the squashed migration should be marked as applied
+        applied = recorder.applied_migrations()
+        self.assertIn(("migrations", "0001_squashed_0002"), applied)
+
+
+if __name__ == "__main__":
+    from django.test.utils import setup_test_environment
+    setup_test_environment()
+    test = TestSquashedMigrationUnapply()
+    test.test_unapply_replaced_migration_marks_squash_as_unapplied()
+    test.test_reapply_replaced_migration_marks_squash_as_applied()
+    print("All tests passed!")
diff --git a/test_squashed_unapply.py b/test_squashed_unapply.py
new file mode 100644
index 0000000000..fc98472ffd
--- /dev/null
+++ b/test_squashed_unapply.py
@@ -0,0 +1,66 @@
+import os
+import django
+from django.conf import settings
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+# Create a test to demonstrate the issue
+def test_squashed_migration_unapply():
+    recorder = MigrationRecorder(connection)
+    
+    # Simulate having both replaced migrations applied
+    recorder.record_applied("migrations", "0001_initial")
+    recorder.record_applied("migrations", "0002_second")
+    
+    # Create executor and run check_replacements to mark squashed migration as applied
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    # Verify squashed migration is marked as applied
+    applied = recorder.applied_migrations()
+    print("Applied migrations after check_replacements:")
+    for m in sorted(applied):
+        print(f"  {m}")
+    
+    # Now unapply one of the replaced migrations
+    recorder.record_unapplied("migrations", "0002_second")
+    
+    # Check what's marked as applied now
+    applied = recorder.applied_migrations()
+    print("\nApplied migrations after unapplying 0002_second:")
+    for m in sorted(applied):
+        print(f"  {m}")
+    
+    # Run check_replacements again to see if it updates the squashed migration status
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    applied = recorder.applied_migrations()
+    print("\nApplied migrations after second check_replacements:")
+    for m in sorted(applied):
+        print(f"  {m}")
+    
+    # The issue: squashed migration should NOT be marked as applied when its replaced
+    # migrations are not all applied, but currently it remains marked as applied
+
+if __name__ == "__main__":
+    test_squashed_migration_unapply()
diff --git a/tests/migrations/test_squashed_unapply.py b/tests/migrations/test_squashed_unapply.py
new file mode 100644
index 0000000000..c9bb675edb
--- /dev/null
+++ b/tests/migrations/test_squashed_unapply.py
@@ -0,0 +1,77 @@
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+from django.test import TestCase
+from django.test.utils import override_settings
+
+
+@override_settings(MIGRATION_MODULES={"migrations": "migrations.test_migrations_squashed"})
+class TestSquashedMigrationUnapply(TestCase):
+    """
+    Test that squashed migrations are properly marked as unapplied when
+    their replaced migrations are unapplied.
+    """
+
+    def test_unapply_replaced_migration_marks_squash_as_unapplied(self):
+        recorder = MigrationRecorder(connection)
+        executor = MigrationExecutor(connection)
+        
+        # Apply both replaced migrations
+        recorder.record_applied("migrations", "0001_initial")
+        recorder.record_applied("migrations", "0002_second")
+        
+        # Run check_replacements to mark squashed migration as applied
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # Verify squashed migration is marked as applied
+        applied = recorder.applied_migrations()
+        self.assertIn(("migrations", "0001_squashed_0002"), applied)
+        
+        # Now unapply one of the replaced migrations
+        recorder.record_unapplied("migrations", "0002_second")
+        
+        # Run check_replacements again 
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # The squashed migration should now be marked as unapplied
+        applied = recorder.applied_migrations()
+        self.assertNotIn(("migrations", "0001_squashed_0002"), applied)
+        self.assertIn(("migrations", "0001_initial"), applied)
+        self.assertNotIn(("migrations", "0002_second"), applied)
+        
+    def test_reapply_replaced_migration_marks_squash_as_applied(self):
+        recorder = MigrationRecorder(connection)
+        executor = MigrationExecutor(connection)
+        
+        # Apply only one replaced migration
+        recorder.record_applied("migrations", "0001_initial")
+        
+        # Run check_replacements
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # Squashed migration should not be marked as applied
+        applied = recorder.applied_migrations()
+        self.assertNotIn(("migrations", "0001_squashed_0002"), applied)
+        
+        # Apply the second replaced migration
+        recorder.record_applied("migrations", "0002_second")
+        
+        # Run check_replacements again
+        executor = MigrationExecutor(connection)  # Reload to get fresh state
+        executor.check_replacements()
+        
+        # Now the squashed migration should be marked as applied
+        applied = recorder.applied_migrations()
+        self.assertIn(("migrations", "0001_squashed_0002"), applied)
+
+
+if __name__ == "__main__":
+    from django.test.utils import setup_test_environment
+    setup_test_environment()
+    test = TestSquashedMigrationUnapply()
+    test.test_unapply_replaced_migration_marks_squash_as_unapplied()
+    test.test_reapply_replaced_migration_marks_squash_as_applied()
+    print("All tests passed!")
diff --git a/verify_fix.py b/verify_fix.py
new file mode 100644
index 0000000000..6160f93428
--- /dev/null
+++ b/verify_fix.py
@@ -0,0 +1,58 @@
+"""
+Verify the fix works correctly
+"""
+import os
+import sys
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.migrations.test_settings')
+
+import django
+django.setup()
+
+from django.db import connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.recorder import MigrationRecorder
+
+def test_fix():
+    # Clean up any existing migration records
+    recorder = MigrationRecorder(connection)
+    with connection.cursor() as cursor:
+        cursor.execute("DELETE FROM django_migrations WHERE app = 'migrations'")
+    
+    print("Test 1: Normal case - all replaced migrations applied")
+    recorder.record_applied("migrations", "0001_initial")
+    recorder.record_applied("migrations", "0002_second")
+    
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    applied = recorder.applied_migrations()
+    squashed_applied = ("migrations", "0001_squashed_0002") in applied
+    print(f"  - Squashed migration applied: {squashed_applied}")
+    assert squashed_applied, "Squashed migration should be applied when all replaced are applied"
+    
+    print("\nTest 2: Unapply one replaced migration")
+    recorder.record_unapplied("migrations", "0002_second")
+    
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    applied = recorder.applied_migrations()
+    squashed_applied = ("migrations", "0001_squashed_0002") in applied
+    print(f"  - Squashed migration applied: {squashed_applied}")
+    assert not squashed_applied, "Squashed migration should NOT be applied when not all replaced are applied"
+    
+    print("\nTest 3: Re-apply the unapplied migration")
+    recorder.record_applied("migrations", "0002_second")
+    
+    executor = MigrationExecutor(connection)
+    executor.check_replacements()
+    
+    applied = recorder.applied_migrations()
+    squashed_applied = ("migrations", "0001_squashed_0002") in applied
+    print(f"  - Squashed migration applied: {squashed_applied}")
+    assert squashed_applied, "Squashed migration should be applied again when all replaced are applied"
+    
+    print("\nAll tests passed! The fix works correctly.")
+
+if __name__ == "__main__":
+    test_fix()
