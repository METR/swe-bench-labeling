diff --git a/debug_issue.py b/debug_issue.py
new file mode 100644
index 0000000000..951be91a67
--- /dev/null
+++ b/debug_issue.py
@@ -0,0 +1,48 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+def print_datalim(*ax):
+    for ax_ in ax:
+        print(f"{ax_}: {ax_.dataLim.intervaly}", end=' / ')
+    print()
+
+df1_index = ['16 May', '17 May']  # == df2_index
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+# Let's also check if we're sharing data limits
+print("Before stackplot:")
+print_datalim(ax1)
+
+ax1.stackplot(df1_index, df1_values)
+print("\nAfter stackplot:")
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print("\nAfter twinx:")
+print_datalim(ax1, ax2)
+
+# Check if they share dataLim
+print(f"\nax1.dataLim is ax2.dataLim: {ax1.dataLim is ax2.dataLim}")
+print(f"ax1._shared_axes['y'] is ax2._shared_axes['y']: {ax1._shared_axes['y'] is ax2._shared_axes['y']}")
+
+ax2.plot(df1_index, df2_values)
+print("\nAfter plot on ax2:")
+print_datalim(ax1, ax2)
+
+# Let's also test the reverse order
+print("\n\nTesting reverse order:")
+fig2, ax3 = plt.subplots()
+ax3.plot(df1_index, df1_values)
+print("After plot:")
+print_datalim(ax3)
+
+ax4 = ax3.twinx()
+print("After twinx:")
+print_datalim(ax3, ax4)
+
+ax4.stackplot(df1_index, df2_values)
+print("After stackplot on ax4:")
+print_datalim(ax3, ax4)
diff --git a/test_issue.py b/test_issue.py
new file mode 100644
index 0000000000..a8fa8bd151
--- /dev/null
+++ b/test_issue.py
@@ -0,0 +1,21 @@
+import matplotlib.pyplot as plt
+
+def print_datalim(*ax):
+    for ax_ in ax:
+        print(ax_.dataLim.intervaly, end=' / ')
+    print()
+
+df1_index = ['16 May', '17 May']  # == df2_index
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+ax1.stackplot(df1_index, df1_values)
+print_datalim(ax1)
+
+ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
+print_datalim(ax1, ax2)
+
+ax2.plot(df1_index, df2_values)
+print_datalim(ax1, ax2)
diff --git a/trace_issue.py b/trace_issue.py
new file mode 100644
index 0000000000..30b8719575
--- /dev/null
+++ b/trace_issue.py
@@ -0,0 +1,69 @@
+import matplotlib.pyplot as plt
+import matplotlib
+import numpy as np
+
+# Monkey patch to trace dataLim changes
+original_update_from_data_xy = matplotlib.transforms.Bbox.update_from_data_xy
+
+def traced_update_from_data_xy(self, xy, ignore=None, updatex=True, updatey=True):
+    import traceback
+    if hasattr(self, '_owner'):
+        print(f"\nupdate_from_data_xy called on {self._owner}")
+        print(f"  Before: {self}")
+        print(f"  xy shape: {xy.shape if hasattr(xy, 'shape') else len(xy)}")
+        print(f"  ignore={ignore}, updatex={updatex}, updatey={updatey}")
+        # print("  Stack trace:")
+        # for line in traceback.format_stack()[-5:-1]:
+        #     print("    " + line.strip())
+    
+    result = original_update_from_data_xy(self, xy, ignore, updatex, updatey)
+    
+    if hasattr(self, '_owner'):
+        print(f"  After: {self}")
+    
+    return result
+
+matplotlib.transforms.Bbox.update_from_data_xy = traced_update_from_data_xy
+
+# Also trace autoscale_view
+original_autoscale_view = matplotlib.axes._base._AxesBase.autoscale_view
+
+def traced_autoscale_view(self, tight=None, scalex=True, scaley=True):
+    print(f"\nautoscale_view called on {self}")
+    print(f"  tight={tight}, scalex={scalex}, scaley={scaley}")
+    print(f"  Before dataLim: {self.dataLim}")
+    result = original_autoscale_view(self, tight, scalex, scaley)
+    print(f"  After dataLim: {self.dataLim}")
+    return result
+
+matplotlib.axes._base._AxesBase.autoscale_view = traced_autoscale_view
+
+def print_datalim(*ax):
+    for ax_ in ax:
+        print(f"{ax_}: {ax_.dataLim.intervaly}", end=' / ')
+    print()
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+ax1.dataLim._owner = ax1  # Add reference for tracing
+ax1.name = 'ax1'
+
+print("=== STACKPLOT ON AX1 ===")
+ax1.stackplot(df1_index, df1_values)
+print("\nAfter stackplot:")
+print_datalim(ax1)
+
+print("\n=== CREATING TWINX ===")
+ax2 = ax1.twinx()
+ax2.dataLim._owner = ax2
+ax2.name = 'ax2'
+print("\nAfter twinx:")
+print_datalim(ax1, ax2)
+
+print("\n=== PLOT ON AX2 ===")
+ax2.plot(df1_index, df2_values)
+print("\nAfter plot on ax2:")
+print_datalim(ax1, ax2)
diff --git a/trace_issue2.py b/trace_issue2.py
new file mode 100644
index 0000000000..3d7e7c3037
--- /dev/null
+++ b/trace_issue2.py
@@ -0,0 +1,44 @@
+import matplotlib.pyplot as plt
+import matplotlib
+import numpy as np
+
+# Trace autoscale_view
+original_autoscale_view = matplotlib.axes._base._AxesBase.autoscale_view
+
+def traced_autoscale_view(self, tight=None, scalex=True, scaley=True):
+    # Add identity check
+    print(f"\nautoscale_view called on {self} (id: {id(self)})")
+    print(f"  tight={tight}, scalex={scalex}, scaley={scaley}")
+    print(f"  Before dataLim: {self.dataLim}")
+    
+    # Check if we have shared axes
+    if hasattr(self, '_shared_axes'):
+        print(f"  Shared y-axes siblings: {[id(ax) for ax in self._shared_axes['y'].get_siblings(self)]}")
+    
+    result = original_autoscale_view(self, tight, scalex, scaley)
+    print(f"  After dataLim: {self.dataLim}")
+    return result
+
+matplotlib.axes._base._AxesBase.autoscale_view = traced_autoscale_view
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+print(f"ax1 id: {id(ax1)}")
+
+print("\n=== STACKPLOT ON AX1 ===")
+ax1.stackplot(df1_index, df1_values)
+
+print("\n=== CREATING TWINX ===")
+ax2 = ax1.twinx()
+print(f"ax2 id: {id(ax2)}")
+print(f"ax1.dataLim: {ax1.dataLim}")
+print(f"ax2.dataLim: {ax2.dataLim}")
+
+print("\n=== PLOT ON AX2 ===")
+ax2.plot(df1_index, df2_values)
+print(f"\nFinal dataLims:")
+print(f"ax1.dataLim: {ax1.dataLim}")
+print(f"ax2.dataLim: {ax2.dataLim}")
diff --git a/trace_issue3.py b/trace_issue3.py
new file mode 100644
index 0000000000..545cba0f02
--- /dev/null
+++ b/trace_issue3.py
@@ -0,0 +1,32 @@
+import matplotlib.pyplot as plt
+import matplotlib
+import numpy as np
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+
+print("=== INITIAL STATE ===")
+print(f"ax1 dataLim id: {id(ax1.dataLim)}")
+print(f"ax1.dataLim: {ax1.dataLim}")
+
+ax1.stackplot(df1_index, df1_values)
+print("\n=== AFTER STACKPLOT ===")
+print(f"ax1 dataLim id: {id(ax1.dataLim)}")
+print(f"ax1.dataLim: {ax1.dataLim}")
+
+ax2 = ax1.twinx()
+print("\n=== AFTER TWINX ===")
+print(f"ax1 dataLim id: {id(ax1.dataLim)}")
+print(f"ax2 dataLim id: {id(ax2.dataLim)}")
+print(f"ax1.dataLim: {ax1.dataLim}")
+print(f"ax2.dataLim: {ax2.dataLim}")
+
+ax2.plot(df1_index, df2_values)
+print("\n=== AFTER PLOT ON AX2 ===")
+print(f"ax1 dataLim id: {id(ax1.dataLim)}")
+print(f"ax2 dataLim id: {id(ax2.dataLim)}")
+print(f"ax1.dataLim: {ax1.dataLim}")
+print(f"ax2.dataLim: {ax2.dataLim}")
diff --git a/trace_issue4.py b/trace_issue4.py
new file mode 100644
index 0000000000..849bc85e99
--- /dev/null
+++ b/trace_issue4.py
@@ -0,0 +1,45 @@
+import matplotlib.pyplot as plt
+import matplotlib
+import numpy as np
+
+# Trace relim
+original_relim = matplotlib.axes._base._AxesBase.relim
+
+def traced_relim(self, visible_only=False):
+    print(f"\nrelim called on {self} (id: {id(self)})")
+    print(f"  Before dataLim: {self.dataLim}")
+    result = original_relim(self, visible_only)
+    print(f"  After dataLim: {self.dataLim}")
+    return result
+
+matplotlib.axes._base._AxesBase.relim = traced_relim
+
+# Also trace _request_autoscale_view
+original_request_autoscale_view = matplotlib.axes._base._AxesBase._request_autoscale_view
+
+def traced_request_autoscale_view(self, axis="all", tight=None):
+    print(f"\n_request_autoscale_view called on {self} (id: {id(self)})")
+    print(f"  axis={axis}, tight={tight}")
+    return original_request_autoscale_view(self, axis, tight)
+
+matplotlib.axes._base._AxesBase._request_autoscale_view = traced_request_autoscale_view
+
+df1_index = ['16 May', '17 May']
+df1_values = [-22.717708333333402, 26.584999999999937]
+df2_values = [-0.08501399999999998, -2.9833019999999966]
+
+fig, ax1 = plt.subplots()
+print(f"ax1 id: {id(ax1)}")
+
+print("\n=== STACKPLOT ON AX1 ===")
+ax1.stackplot(df1_index, df1_values)
+
+print("\n=== CREATING TWINX ===")
+ax2 = ax1.twinx()
+print(f"ax2 id: {id(ax2)}")
+
+print("\n=== PLOT ON AX2 ===")
+ax2.plot(df1_index, df2_values)
+print(f"\nFinal dataLims:")
+print(f"ax1.dataLim: {ax1.dataLim}")
+print(f"ax2.dataLim: {ax2.dataLim}")
