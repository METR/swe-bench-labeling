diff --git a/sympy/polys/densetools.py b/sympy/polys/densetools.py
index f057824642..74836af34a 100644
--- a/sympy/polys/densetools.py
+++ b/sympy/polys/densetools.py
@@ -1197,6 +1197,8 @@ def dup_clear_denoms(f, K0, K1=None, convert=False):
 
     if not K1.is_one(common):
         f = dup_mul_ground(f, common, K0)
+        from sympy.polys.densebasic import dup_strip
+        f = dup_strip(f)
 
     if not convert:
         return common, f
@@ -1251,6 +1253,8 @@ def dmp_clear_denoms(f, u, K0, K1=None, convert=False):
 
     if not K1.is_one(common):
         f = dmp_mul_ground(f, common, u, K0)
+        from sympy.polys.densebasic import dmp_strip
+        f = dmp_strip(f, u)
 
     if not convert:
         return common, f
diff --git a/test_clear_denoms.py b/test_clear_denoms.py
new file mode 100644
index 0000000000..cc279f64f5
--- /dev/null
+++ b/test_clear_denoms.py
@@ -0,0 +1,77 @@
+from sympy import *
+from sympy.polys import QQ, ZZ
+
+# Test case 1: The issue case
+x = symbols("x")
+f = Poly(sympify("-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))"), x)
+coeff, result_poly = f.clear_denoms()
+print("Test 1 - Issue case:")
+print("  result_poly:", result_poly)
+print("  is_zero:", result_poly.is_zero)
+print("  rep:", result_poly.rep)
+assert result_poly.is_zero == True
+assert str(result_poly.rep) == "DMP([], EX, None)"
+print("  PASSED")
+
+# Test case 2: Regular polynomial with rational coefficients
+f2 = Poly(x**2/2 + x/3 + 1/6, x, domain=QQ)
+coeff2, result2 = f2.clear_denoms()
+print("\nTest 2 - Regular rational polynomial:")
+print("  Original:", f2)
+print("  coeff:", coeff2)
+print("  result:", result2)
+assert coeff2 == 6
+assert result2 == Poly(3*x**2 + 2*x + 1, x, domain=QQ)
+print("  PASSED")
+
+# Test case 3: Zero polynomial
+f3 = Poly(0, x, domain=QQ)
+coeff3, result3 = f3.clear_denoms()
+print("\nTest 3 - Zero polynomial:")
+print("  Original:", f3)
+print("  coeff:", coeff3)
+print("  result:", result3)
+assert result3.is_zero == True
+print("  result3.rep:", result3.rep)
+assert result3.is_zero == True
+print("  PASSED")
+
+# Test case 4: Polynomial that becomes zero after clearing denoms (simpler case)
+y = symbols("y")
+# Create a polynomial that's essentially zero but with complex coefficients
+expr = x/2 - x/2
+f4 = Poly(expr, x, domain=QQ)
+coeff4, result4 = f4.clear_denoms()
+print("\nTest 4 - Polynomial that's zero from the start:")
+print("  Original:", f4)
+print("  coeff:", coeff4)
+print("  result:", result4)
+assert result4.is_zero == True
+print("  result4.rep:", result4.rep)
+assert result4.is_zero == True
+print("  PASSED")
+
+# Test case 5: Multivariate polynomial
+f5 = Poly(x/2 + y/3, x, y, domain=QQ)
+coeff5, result5 = f5.clear_denoms()
+print("\nTest 5 - Multivariate polynomial:")
+print("  Original:", f5)
+print("  coeff:", coeff5)
+print("  result:", result5)
+assert coeff5 == 6
+assert result5 == Poly(3*x + 2*y, x, y, domain=QQ)
+print("  PASSED")
+
+# Test case 6: terms_gcd should work with the fixed polynomial
+print("\nTest 6 - terms_gcd on fixed polynomial:")
+f = Poly(sympify("-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))"), x)
+coeff, result_poly = f.clear_denoms()
+try:
+    J, G = result_poly.terms_gcd()
+    print("  terms_gcd result:", J, G)
+    print("  PASSED")
+except Exception as e:
+    print("  FAILED with error:", e)
+    raise
+
+print("\nAll tests passed!")
diff --git a/test_issue.py b/test_issue.py
new file mode 100644
index 0000000000..8f7e7bc386
--- /dev/null
+++ b/test_issue.py
@@ -0,0 +1,25 @@
+from sympy import *
+x = symbols("x")
+f = Poly(sympify("-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))"), x)
+coeff, bad_poly = f.clear_denoms()
+print("bad_poly:", bad_poly)
+print("bad_poly.is_zero:", bad_poly.is_zero)
+print("bad_poly.as_expr():", bad_poly.as_expr())
+print("bad_poly.as_expr().is_zero:", bad_poly.as_expr().is_zero)
+print("bad_poly.rep:", bad_poly.rep)
+print("Normal zero poly rep:", Poly(0, x, domain="EX").rep)
+
+# Test terms_gcd
+try:
+    print("\nPoly(0, x).terms_gcd():", Poly(0, x).terms_gcd())
+except Exception as e:
+    print("\nPoly(0, x).terms_gcd() error:", e)
+
+try:
+    print("bad_poly.terms_gcd():", bad_poly.terms_gcd())
+except Exception as e:
+    print("bad_poly.terms_gcd() error:", e)
+
+# Test primitive
+print("\nPoly(0, x).primitive():", Poly(0, x).primitive())
+print("bad_poly.primitive():", bad_poly.primitive())
