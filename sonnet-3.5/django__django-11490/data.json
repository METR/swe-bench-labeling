{"instance_id": "django__django-11490", "score": "I", "diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..2ecf1281b0 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,12 +425,14 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\n                         *self.query.annotation_select,\n                     ))\n+                elif compiler.query.values_select:\n+                    self.query.set_values(compiler.query.values_select)\n                 part_sql, part_args = compiler.as_sql()\n                 if compiler.query.combinator:\n                     # Wrap in a subquery if wrapping in parentheses isn't\ndiff --git a/migrations/0001_initial.py b/migrations/0001_initial.py\nnew file mode 100644\nindex 0000000000..7392b62709\n--- /dev/null\n+++ b/migrations/0001_initial.py\n@@ -0,0 +1,22 @@\n+# Generated by Django 3.0.dev20190619064046 on 2025-05-14 14:31\n+\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    initial = True\n+\n+    dependencies = [\n+    ]\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name='ReservedName',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('name', models.CharField(max_length=100)),\n+                ('order', models.IntegerField()),\n+            ],\n+        ),\n+    ]\ndiff --git a/migrations/__init__.py b/migrations/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_composed_queries.py b/test_composed_queries.py\nnew file mode 100644\nindex 0000000000..4f6952375d\n--- /dev/null\n+++ b/test_composed_queries.py\n@@ -0,0 +1,73 @@\n+\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.test import TestCase\n+from django.db import models, connection\n+from django.core.management import call_command\n+from django.test.utils import override_settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            '__main__',\n+        ],\n+        MIDDLEWARE=[],\n+    )\n+    django.setup()\n+\n+class ReservedName(models.Model):\n+    name = models.CharField(max_length=100)\n+    order = models.IntegerField()\n+\n+class ComposedQueryTest(TestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        with connection.cursor() as cursor:\n+            cursor.execute('''\n+                CREATE TABLE __main___reservedname (\n+                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n+                    name VARCHAR(100) NOT NULL,\n+                    \"order\" INTEGER NOT NULL\n+                )\n+            ''')\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        with connection.cursor() as cursor:\n+            cursor.execute('DROP TABLE IF EXISTS __main___reservedname')\n+        super().tearDownClass()\n+\n+    def setUp(self):\n+        ReservedName.objects.create(name='a', order=2)\n+\n+    def test_composed_query_values_list(self):\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test with name and order\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        \n+        # Test with only order\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, (2,))\n+\n+if __name__ == '__main__':\n+    from django.test.runner import DiscoverRunner\n+    test_runner = DiscoverRunner(verbosity=2)\n+    failures = test_runner.run_tests(['__main__'])\n+    if failures:\n+        print(\"Tests failed. Please check the output above.\")\n+    else:\n+        print(\"All tests passed successfully!\")\n\\ No newline at end of file\n", "gold_standard_diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760b6..a791908cafee 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -426,6 +426,7 @@ def get_combinator_sql(self, combinator, all):\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n                 if not compiler.query.values_select and self.query.values_select:\n+                    compiler.query = compiler.query.clone()\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 3902db59e21e..227972e8c4e8 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -123,6 +123,9 @@ def test_union_with_values(self):\n         self.assertEqual(reserved_name['order'], 2)\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n+        # List of columns can be changed.\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n \n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11490"}