diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 2ff8b0ee26..f257cf28ae 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -277,7 +277,7 @@ class BoundWidget:
 
     @property
     def id_for_label(self):
-        return 'id_%s_%s' % (self.data['name'], self.data['index'])
+        return self.data['attrs'].get('id', '')
 
     @property
     def choice_label(self):
diff --git a/test_backward_compat.py b/test_backward_compat.py
new file mode 100644
index 0000000000..0442d45b41
--- /dev/null
+++ b/test_backward_compat.py
@@ -0,0 +1,49 @@
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+    SECRET_KEY='test-secret-key',
+)
+
+django.setup()
+
+from django import forms
+
+# Test that our change maintains backward compatibility for common use cases
+
+# Test 1: Default behavior should still generate ids in the expected format
+class TestForm(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A'), ('b', 'Choice B')],
+        widget=forms.CheckboxSelectMultiple(),
+        required=False
+    )
+
+form = TestForm()  # default auto_id = True
+widget = list(form['choices'])[0]
+
+print("Test 1 - Default behavior (auto_id=True):")
+print(f"  Expected id format: id_<fieldname>_<index>")
+print(f"  Actual id: {widget.id_for_label}")
+print(f"  Matches expected pattern: {'id_choices_0' == widget.id_for_label}")
+
+# Test 2: When auto_id is a string with %s placeholder
+form2 = TestForm(auto_id='id_%s')
+widget2 = list(form2['choices'])[0]
+
+print("\nTest 2 - With auto_id='id_%s':")
+print(f"  Expected: id_choices_0")
+print(f"  Actual: {widget2.id_for_label}")
+print(f"  Matches: {widget2.id_for_label == 'id_choices_0'}")
+
+# Test 3: The id should still be usable in templates
+print("\nTest 3 - Template usage:")
+print(f"  id_for_label returns: '{widget.id_for_label}'")
+print(f"  Can be used in <label for='{widget.id_for_label}'>")
+print(f"  Empty string when no id: {'' == list(TestForm(auto_id=False)['choices'])[0].id_for_label}")
+
+print("\nBackward compatibility maintained: ✓")
diff --git a/test_boundwidget_id.py b/test_boundwidget_id.py
new file mode 100644
index 0000000000..c27bbd14aa
--- /dev/null
+++ b/test_boundwidget_id.py
@@ -0,0 +1,77 @@
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+    SECRET_KEY='test-secret-key',
+)
+
+django.setup()
+
+from django import forms
+
+# Test Case 1: Test with auto_id
+class TestForm1(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],
+        widget=forms.CheckboxSelectMultiple(),
+        required=False
+    )
+
+form1 = TestForm1(auto_id='custom_id_%s')
+field = form1['choices']
+subwidgets = list(field)
+
+print("Test Case 1: With auto_id='custom_id_%s'")
+print("=" * 50)
+for i, widget in enumerate(subwidgets):
+    print(f"Widget {i}:")
+    print(f"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}")
+    print(f"  - widget.id_for_label: {widget.id_for_label}")
+    print(f"  - Expected: {widget.data['attrs']['id']}")
+    print()
+
+# Test Case 2: Test with widget attrs id
+class TestForm2(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],
+        widget=forms.CheckboxSelectMultiple(attrs={'id': 'my_custom_id'}),
+        required=False
+    )
+
+form2 = TestForm2()
+field2 = form2['choices']
+subwidgets2 = list(field2)
+
+print("\nTest Case 2: With widget attrs={'id': 'my_custom_id'}")
+print("=" * 50)
+for i, widget in enumerate(subwidgets2):
+    print(f"Widget {i}:")
+    print(f"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}")
+    print(f"  - widget.id_for_label: {widget.id_for_label}")
+    print(f"  - Expected: {widget.data['attrs']['id']}")
+    print()
+
+# Test Case 3: Test default behavior
+class TestForm3(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],
+        widget=forms.CheckboxSelectMultiple(),
+        required=False
+    )
+
+form3 = TestForm3()
+field3 = form3['choices']
+subwidgets3 = list(field3)
+
+print("\nTest Case 3: Default behavior (no auto_id or widget id)")
+print("=" * 50)
+for i, widget in enumerate(subwidgets3):
+    print(f"Widget {i}:")
+    print(f"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}")
+    print(f"  - widget.id_for_label: {widget.id_for_label}")
+    print(f"  - Expected: {widget.data['attrs']['id']}")
+    print()
diff --git a/test_boundwidget_templates.py b/test_boundwidget_templates.py
new file mode 100644
index 0000000000..e0ded2c844
--- /dev/null
+++ b/test_boundwidget_templates.py
@@ -0,0 +1,66 @@
+import django
+from django.conf import settings
+from django.template import Context, Template
+
+# Configure Django settings  
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+    SECRET_KEY='test-secret-key',
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+    }],
+)
+
+django.setup()
+
+from django import forms
+
+# Test that the templates render correctly with id_for_label
+class TestForm(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A'), ('b', 'Choice B')],
+        widget=forms.CheckboxSelectMultiple(),
+        required=False
+    )
+
+# Test the template usage as shown in the issue description
+template_string = """
+{% for checkbox in form.choices %}
+<label for="{{ checkbox.id_for_label }}">
+    {{ checkbox.choice_label }}
+    <span class="checkbox">{{ checkbox.tag }}</span>
+</label>
+{% endfor %}
+"""
+
+# Test with custom auto_id
+form = TestForm(auto_id='custom_%s')
+template = Template(template_string)
+html = template.render(Context({'form': form}))
+
+print("Rendered HTML with auto_id='custom_%s':")
+print("=" * 50)
+print(html)
+
+# Check that the label's 'for' attribute matches the input's 'id'
+import re
+label_for_pattern = r'<label for="([^"]+)">'
+input_id_pattern = r'<input[^>]+id="([^"]+)"'
+
+label_fors = re.findall(label_for_pattern, html)
+input_ids = re.findall(input_id_pattern, html)
+
+print("\nLabel 'for' attributes:", label_fors)
+print("Input 'id' attributes:", input_ids)
+
+# They should match
+if label_fors == input_ids:
+    print("\n✓ SUCCESS: Label 'for' attributes match input 'id' attributes!")
+else:
+    print("\n✗ FAILURE: Label 'for' attributes DO NOT match input 'id' attributes!")
+    print("  Expected:", input_ids)
+    print("  Got:", label_fors)
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..2c16a63833
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,82 @@
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+    SECRET_KEY='test-secret-key',
+)
+
+django.setup()
+
+from django import forms
+
+# Edge case 1: Empty id
+class TestForm1(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A')],
+        widget=forms.CheckboxSelectMultiple(attrs={'id': ''}),
+        required=False
+    )
+
+form1 = TestForm1()
+try:
+    widget = list(form1['choices'])[0]
+    print("Edge Case 1 - Empty id:")
+    print(f"  widget.data['attrs']: {widget.data['attrs']}")
+    print(f"  widget.id_for_label: {widget.id_for_label}")
+except Exception as e:
+    print(f"Edge Case 1 - Error: {e}")
+
+# Edge case 2: No id at all
+class TestForm2(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A')],
+        widget=forms.CheckboxSelectMultiple(),
+        required=False
+    )
+
+form2 = TestForm2(auto_id=False)
+try:
+    widget = list(form2['choices'])[0]
+    print("\nEdge Case 2 - No id (auto_id=False):")
+    print(f"  widget.data['attrs']: {widget.data['attrs']}")
+    print(f"  widget.id_for_label: {widget.id_for_label}")
+except Exception as e:
+    print(f"\nEdge Case 2 - Error: {e}")
+
+# Edge case 3: RadioSelect widget
+class TestForm3(forms.Form):
+    choice = forms.ChoiceField(
+        choices=[('a', 'Choice A'), ('b', 'Choice B')],
+        widget=forms.RadioSelect(),
+        required=False
+    )
+
+form3 = TestForm3(auto_id='radio_%s')
+try:
+    widget = list(form3['choice'])[0]
+    print("\nEdge Case 3 - RadioSelect:")
+    print(f"  widget.data['attrs']['id']: {widget.data['attrs']['id']}")
+    print(f"  widget.id_for_label: {widget.id_for_label}")
+except Exception as e:
+    print(f"\nEdge Case 3 - Error: {e}")
+
+# Edge case 4: Complex id with special characters
+class TestForm4(forms.Form):
+    choices = forms.MultipleChoiceField(
+        choices=[('a', 'Choice A')],
+        widget=forms.CheckboxSelectMultiple(attrs={'id': 'my-complex_id$123'}),
+        required=False
+    )
+
+form4 = TestForm4()
+try:
+    widget = list(form4['choices'])[0]
+    print("\nEdge Case 4 - Complex id:")
+    print(f"  widget.data['attrs']['id']: {widget.data['attrs']['id']}")
+    print(f"  widget.id_for_label: {widget.id_for_label}")
+except Exception as e:
+    print(f"\nEdge Case 4 - Error: {e}")
diff --git a/test_radioselect.py b/test_radioselect.py
new file mode 100644
index 0000000000..71f39e1aa9
--- /dev/null
+++ b/test_radioselect.py
@@ -0,0 +1,34 @@
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    USE_I18N=True,
+    USE_L10N=True,
+    USE_TZ=True,
+    SECRET_KEY='test-secret-key',
+)
+
+django.setup()
+
+from django import forms
+
+# Test RadioSelect too
+class TestFormRadio(forms.Form):
+    choice = forms.ChoiceField(
+        choices=[('a', 'Choice A'), ('b', 'Choice B'), ('c', 'Choice C')],
+        widget=forms.RadioSelect(),
+        required=False
+    )
+
+form = TestFormRadio(auto_id='radio_id_%s')
+field = form['choice']
+subwidgets = list(field)
+
+print("Test RadioSelect with auto_id='radio_id_%s'")
+print("=" * 50)
+for i, widget in enumerate(subwidgets):
+    print(f"Widget {i}:")
+    print(f"  - widget.data['attrs']['id']: {widget.data['attrs']['id']}")
+    print(f"  - widget.id_for_label: {widget.id_for_label}")
+    print()
