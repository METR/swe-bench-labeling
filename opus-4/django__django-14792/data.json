{"instance_id": "django__django-14792", "score": "I", "diff": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 8d19872bea..1d7a3835be 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -44,10 +44,15 @@ class DatabaseOperations(BaseDatabaseOperations):\n         return \"DATE_TRUNC('%s', %s)\" % (lookup_type, field_name)\n \n     def _prepare_tzname_delta(self, tzname):\n-        if '+' in tzname:\n-            return tzname.replace('+', '-')\n-        elif '-' in tzname:\n-            return tzname.replace('-', '+')\n+        # PostgreSQL uses the opposite sign convention for numeric timezone offsets\n+        # compared to the ISO 8601 standard. For example, ISO offset '+05:00' means\n+        # \"5 hours east of UTC\", but PostgreSQL interprets time zone '+05:00' as\n+        # \"5 hours west of UTC\". We need to flip the sign for numeric offsets only.\n+        # Don't flip signs in IANA timezone names like 'Etc/GMT-10'.\n+        if tzname.startswith('+'):\n+            return '-' + tzname[1:]\n+        elif tzname.startswith('-'):\n+            return '+' + tzname[1:]\n         return tzname\n \n     def _convert_field_to_tz(self, field_name, tzname):\ndiff --git a/test_etc_gmt_issue.py b/test_etc_gmt_issue.py\nnew file mode 100644\nindex 0000000000..a6d01608b1\n--- /dev/null\n+++ b/test_etc_gmt_issue.py\n@@ -0,0 +1,52 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.postgresql',\n+                'NAME': 'test_db',\n+                'USER': 'postgres',\n+                'PASSWORD': 'postgres',\n+                'HOST': 'localhost',\n+                'PORT': '5432',\n+            }\n+        },\n+        USE_TZ=True,\n+        TIME_ZONE='UTC',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+    )\n+    django.setup()\n+\n+import pytz\n+from django.db import models\n+from django.db.models.functions import Trunc\n+from django.utils import timezone\n+\n+# Test the issue\n+print(\"Testing timezone name conversion...\")\n+\n+# Test _get_timezone_name\n+tz = pytz.timezone(\"Etc/GMT-10\")\n+tzname = timezone._get_timezone_name(tz)\n+print(f\"Original timezone: {tz}\")\n+print(f\"_get_timezone_name result: {tzname}\")\n+\n+# Test _prepare_tzname_delta\n+from django.db.backends.postgresql.operations import DatabaseOperations\n+from django.db import connection\n+\n+ops = DatabaseOperations(connection)\n+prepared = ops._prepare_tzname_delta(tzname)\n+print(f\"_prepare_tzname_delta result: {prepared}\")\n+\n+# The issue: Etc/GMT-10 becomes Etc/GMT+10, which is the opposite timezone!\n+print(f\"\\nISSUE: '{tzname}' becomes '{prepared}' - this flips the timezone direction!\")\ndiff --git a/test_etc_gmt_trunc.py b/test_etc_gmt_trunc.py\nnew file mode 100644\nindex 0000000000..13afa50d0c\n--- /dev/null\n+++ b/test_etc_gmt_trunc.py\n@@ -0,0 +1,71 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Setup Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        USE_TZ=True,\n+        TIME_ZONE='UTC',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+        SECRET_KEY='test',\n+    )\n+    django.setup()\n+\n+import pytz\n+from django.db import models, connection\n+from django.db.models.functions import TruncDay, Extract\n+from django.utils import timezone\n+from datetime import datetime\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    created_at = models.DateTimeField()\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Test the issue with Etc/GMT timezones\n+print(\"Testing Django timezone handling with Etc/GMT-10...\")\n+\n+# Create a test datetime\n+test_dt = datetime(2021, 1, 15, 10, 30, 0)\n+test_dt_aware = timezone.make_aware(test_dt, timezone.utc)\n+\n+# Get timezone\n+etc_gmt_minus_10 = pytz.timezone(\"Etc/GMT-10\")\n+\n+# Test _get_timezone_name\n+tzname = timezone._get_timezone_name(etc_gmt_minus_10)\n+print(f\"_get_timezone_name(Etc/GMT-10) = {tzname}\")\n+\n+# Test PostgreSQL operations if available\n+if connection.vendor == 'postgresql':\n+    from django.db.backends.postgresql.operations import DatabaseOperations\n+    ops = DatabaseOperations(connection)\n+    prepared = ops._prepare_tzname_delta(tzname)\n+    print(f\"_prepare_tzname_delta({tzname}) = {prepared}\")\n+    \n+    # Test the SQL generation\n+    field_name = \"test_field\"\n+    converted = ops._convert_field_to_tz(field_name, tzname)\n+    print(f\"SQL generated: {converted}\")\n+else:\n+    print(\"Not using PostgreSQL, skipping database-specific tests\")\n+\n+# Demonstrate the expected behavior\n+print(\"\\nExpected behavior:\")\n+print(\"- Etc/GMT-10 represents UTC+10 (10 hours ahead of UTC)\")\n+print(\"- When used in AT TIME ZONE, it should remain 'Etc/GMT-10', not become 'Etc/GMT+10'\")\n+print(\"- Numeric offsets like '+10' should still be flipped to '-10' for PostgreSQL compatibility\")\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..d144a0ecc9\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,21 @@\n+from django.db.backends.postgresql.operations import DatabaseOperations\n+\n+# Test the fixed _prepare_tzname_delta function\n+ops = DatabaseOperations(None)  # Connection is not needed for this test\n+\n+test_cases = [\n+    ('+10', '-10'),             # Numeric offset should flip\n+    ('-10', '+10'),             # Numeric offset should flip\n+    ('+05:30', '-05:30'),       # Numeric offset with minutes should flip\n+    ('-05:30', '+05:30'),       # Numeric offset with minutes should flip\n+    ('Etc/GMT-10', 'Etc/GMT-10'),  # IANA timezone should NOT flip\n+    ('Etc/GMT+10', 'Etc/GMT+10'),  # IANA timezone should NOT flip\n+    ('America/New_York', 'America/New_York'),  # IANA timezone should NOT flip\n+    ('Europe/London', 'Europe/London'),  # IANA timezone should NOT flip\n+]\n+\n+print(\"Testing _prepare_tzname_delta fix:\")\n+for input_tz, expected in test_cases:\n+    result = ops._prepare_tzname_delta(input_tz)\n+    status = \"\u2713\" if result == expected else \"\u2717\"\n+    print(f\"{status} {input_tz} -> {result} (expected: {expected})\")\ndiff --git a/test_fix_minimal.py b/test_fix_minimal.py\nnew file mode 100644\nindex 0000000000..6567480252\n--- /dev/null\n+++ b/test_fix_minimal.py\n@@ -0,0 +1,30 @@\n+# Test the fixed _prepare_tzname_delta function\n+\n+def _prepare_tzname_delta(tzname):\n+    # PostgreSQL uses the opposite sign convention for numeric timezone offsets\n+    # compared to the ISO 8601 standard. For example, ISO offset '+05:00' means\n+    # \"5 hours east of UTC\", but PostgreSQL interprets time zone '+05:00' as\n+    # \"5 hours west of UTC\". We need to flip the sign for numeric offsets only.\n+    # Don't flip signs in IANA timezone names like 'Etc/GMT-10'.\n+    if tzname.startswith('+'):\n+        return '-' + tzname[1:]\n+    elif tzname.startswith('-'):\n+        return '+' + tzname[1:]\n+    return tzname\n+\n+test_cases = [\n+    ('+10', '-10'),             # Numeric offset should flip\n+    ('-10', '+10'),             # Numeric offset should flip\n+    ('+05:30', '-05:30'),       # Numeric offset with minutes should flip\n+    ('-05:30', '+05:30'),       # Numeric offset with minutes should flip\n+    ('Etc/GMT-10', 'Etc/GMT-10'),  # IANA timezone should NOT flip\n+    ('Etc/GMT+10', 'Etc/GMT+10'),  # IANA timezone should NOT flip\n+    ('America/New_York', 'America/New_York'),  # IANA timezone should NOT flip\n+    ('Europe/London', 'Europe/London'),  # IANA timezone should NOT flip\n+]\n+\n+print(\"Testing _prepare_tzname_delta fix:\")\n+for input_tz, expected in test_cases:\n+    result = _prepare_tzname_delta(input_tz)\n+    status = \"\u2713\" if result == expected else \"\u2717\"\n+    print(f\"{status} {input_tz} -> {result} (expected: {expected})\")\ndiff --git a/test_postgresql_etc_gmt.py b/test_postgresql_etc_gmt.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_postgresql_etc_gmt.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_tzname_issue.py b/test_tzname_issue.py\nnew file mode 100644\nindex 0000000000..c34696dd83\n--- /dev/null\n+++ b/test_tzname_issue.py\n@@ -0,0 +1,34 @@\n+import pytz\n+from django.utils import timezone\n+\n+# Test the issue\n+print(\"Testing timezone name conversion...\")\n+\n+# Test _get_timezone_name\n+tz = pytz.timezone(\"Etc/GMT-10\")\n+tzname = timezone._get_timezone_name(tz)\n+print(f\"Original timezone: {tz}\")\n+print(f\"_get_timezone_name result: {tzname}\")\n+\n+# Simulate _prepare_tzname_delta behavior\n+def _prepare_tzname_delta(tzname):\n+    if '+' in tzname:\n+        return tzname.replace('+', '-')\n+    elif '-' in tzname:\n+        return tzname.replace('-', '+')\n+    return tzname\n+\n+prepared = _prepare_tzname_delta(tzname)\n+print(f\"_prepare_tzname_delta result: {prepared}\")\n+\n+# The issue: Etc/GMT-10 becomes Etc/GMT+10, which is the opposite timezone!\n+print(f\"\\nISSUE: '{tzname}' becomes '{prepared}' - this flips the timezone direction!\")\n+\n+# Test with numeric offset\n+numeric_tz = pytz.timezone(\"GMT-10\")  \n+print(f\"\\nFor comparison, numeric timezone: {numeric_tz}\")\n+\n+# Let's also test what the old behavior was\n+print(\"\\nIn Django 3.1, _get_timezone_name would have returned a numeric offset like '+10'\")\n+print(\"which would then be correctly converted to '-10' by _prepare_tzname_delta\")\n+print(\"But now it returns the full IANA name, causing incorrect sign flipping\")\n", "gold_standard_diff": "From cbba49971bbbbe3e8c6685e4ce6ab87b1187ae87 Mon Sep 17 00:00:00 2001\nFrom: Carlton Gibson <carlton.gibson@noumenal.es>\nDate: Tue, 24 Aug 2021 11:21:32 +0200\nSubject: [PATCH] Fixed #32992 -- Restored offset extraction for fixed offset\n timezones.\n\nRegression in 10d126198434810529e0220b0c6896ed64ca0e88.\n---\n django/utils/timezone.py           |  7 +++++--\n docs/releases/3.2.7.txt            |  3 ++-\n tests/utils_tests/test_timezone.py | 25 +++++++++++++++++++++++++\n 3 files changed, 32 insertions(+), 3 deletions(-)\n\ndiff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b95943c..0f5d012c593f 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -72,8 +72,11 @@ def get_current_timezone_name():\n \n \n def _get_timezone_name(timezone):\n-    \"\"\"Return the name of ``timezone``.\"\"\"\n-    return str(timezone)\n+    \"\"\"\n+    Return the offset for fixed offset timezones, or the name of timezone if\n+    not set.\n+    \"\"\"\n+    return timezone.tzname(None) or str(timezone)\n \n # Timezone selection functions.\n \ndiff --git a/docs/releases/3.2.7.txt b/docs/releases/3.2.7.txt\nindex 0219460649d2..644e71dafdd8 100644\n--- a/docs/releases/3.2.7.txt\n+++ b/docs/releases/3.2.7.txt\n@@ -9,4 +9,5 @@ Django 3.2.7 fixes several bugs in 3.2.6.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 3.2 that caused the incorrect offset extraction\n+  from fixed offset timezones (:ticket:`32992`).\ndiff --git a/tests/utils_tests/test_timezone.py b/tests/utils_tests/test_timezone.py\nindex 2e28d3a9a5fa..0972135dcc1f 100644\n--- a/tests/utils_tests/test_timezone.py\n+++ b/tests/utils_tests/test_timezone.py\n@@ -260,6 +260,31 @@ def test_make_aware_zoneinfo_non_existent(self):\n         self.assertEqual(std.utcoffset(), datetime.timedelta(hours=1))\n         self.assertEqual(dst.utcoffset(), datetime.timedelta(hours=2))\n \n+    def test_get_timezone_name(self):\n+        \"\"\"\n+        The _get_timezone_name() helper must return the offset for fixed offset\n+        timezones, for usage with Trunc DB functions.\n+\n+        The datetime.timezone examples show the current behavior.\n+        \"\"\"\n+        tests = [\n+            # datetime.timezone, fixed offset with and without `name`.\n+            (datetime.timezone(datetime.timedelta(hours=10)), 'UTC+10:00'),\n+            (datetime.timezone(datetime.timedelta(hours=10), name='Etc/GMT-10'), 'Etc/GMT-10'),\n+            # pytz, named and fixed offset.\n+            (pytz.timezone('Europe/Madrid'), 'Europe/Madrid'),\n+            (pytz.timezone('Etc/GMT-10'), '+10'),\n+        ]\n+        if HAS_ZONEINFO:\n+            tests += [\n+                # zoneinfo, named and fixed offset.\n+                (zoneinfo.ZoneInfo('Europe/Madrid'), 'Europe/Madrid'),\n+                (zoneinfo.ZoneInfo('Etc/GMT-10'), '+10'),\n+            ]\n+        for tz, expected in tests:\n+            with self.subTest(tz=tz, expected=expected):\n+                self.assertEqual(timezone._get_timezone_name(tz), expected)\n+\n     def test_get_default_timezone(self):\n         self.assertEqual(timezone.get_default_timezone_name(), 'America/Chicago')\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/14792"}