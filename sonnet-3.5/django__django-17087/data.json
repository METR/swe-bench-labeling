{"instance_id": "django__django-17087", "score": "I", "diff": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..f55e334603 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -10,6 +10,7 @@ import pathlib\n import re\n import types\n import uuid\n+from types import MethodType\n \n from django.conf import SettingsReference\n from django.db import models\n@@ -98,6 +99,14 @@ class DeconstructableSerializer(BaseSerializer):\n             strings.append(\"%s=%s\" % (kw, arg_string))\n         return \"%s(%s)\" % (name, \", \".join(strings)), imports\n \n+class NestedClassMethodSerializer(BaseSerializer):\n+    def serialize(self):\n+        module = self.value.__self__.__module__\n+        class_name = self.value.__self__.__qualname__\n+        method_name = self.value.__name__\n+        path = f\"{module}.{class_name}.{method_name}\"\n+        return path, {f\"import {module}\"}\n+\n     @staticmethod\n     def _serialize_path(path):\n         module, name = path.rsplit(\".\", 1)\n@@ -329,6 +338,14 @@ class UUIDSerializer(BaseSerializer):\n         return \"uuid.%s\" % repr(self.value), {\"import uuid\"}\n \n \n+class NestedClassMethodSerializer(BaseSerializer):\n+    def serialize(self):\n+        module = self.value.__self__.__module__\n+        class_name = self.value.__self__.__qualname__\n+        method_name = self.value.__name__\n+        return f\"{module}.{class_name}.{method_name}\", {f\"import {module}\"}\n+\n+\n class Serializer:\n     _registry = {\n         # Some of these are order-dependent.\n@@ -387,6 +404,9 @@ def serializer_factory(value):\n         return OperationSerializer(value)\n     if isinstance(value, type):\n         return TypeSerializer(value)\n+    # Handle nested class methods\n+    if isinstance(value, MethodType) and value.__self__ is not None and isinstance(value.__self__, type):\n+        return NestedClassMethodSerializer(value)\n     # Anything that knows how to deconstruct itself.\n     if hasattr(value, \"deconstruct\"):\n         return DeconstructableSerializer(value)\n", "gold_standard_diff": "From 94534a001d173c82cea110f69cd7927a2af1f83d Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Nicol=C3=B2?= <nicolo.intrieri@spinforward.it>\nDate: Mon, 17 Jul 2023 22:20:04 +0200\nSubject: [PATCH] Fixed #34716 -- nested class methods serialization in\n migrations\n\n---\n django/db/migrations/serializer.py |  2 +-\n tests/migrations/test_writer.py    | 13 +++++++++++++\n 2 files changed, 14 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e204f..06657ebaabe0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ def serialize(self):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bef8f64061a4..5ee814d2aff5 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -211,6 +211,10 @@ class NestedChoices(models.TextChoices):\n         X = \"X\", \"X value\"\n         Y = \"Y\", \"Y value\"\n \n+        @classmethod\n+        def method(cls):\n+            return cls.X\n+\n     def safe_exec(self, string, value=None):\n         d = {}\n         try:\n@@ -468,6 +472,15 @@ def test_serialize_nested_class(self):\n                     ),\n                 )\n \n+    def test_serialize_nested_class_method(self):\n+        self.assertSerializedResultEqual(\n+            self.NestedChoices.method,\n+            (\n+                \"migrations.test_writer.WriterTests.NestedChoices.method\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n", "gold_standard_pr_link": "https://github.com/django/django/pull/17087"}