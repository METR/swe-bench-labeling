diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py
index 7dcc77b46c..274a6f0643 100644
--- a/django/utils/translation/trans_real.py
+++ b/django/utils/translation/trans_real.py
@@ -43,7 +43,7 @@ language_code_re = _lazy_re_compile(
     re.IGNORECASE
 )
 
-language_code_prefix_re = _lazy_re_compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_prefix_re = _lazy_re_compile(r'^/(\w+(?:[@-]\w+)*)(/|$)')
 
 
 @receiver(setting_changed)
diff --git a/test_case_sensitivity.py b/test_case_sensitivity.py
new file mode 100644
index 0000000000..ab4791f100
--- /dev/null
+++ b/test_case_sensitivity.py
@@ -0,0 +1,43 @@
+import os
+import sys
+import django
+
+# Add the testproject to sys.path
+sys.path.insert(0, '/testbed/testproject')
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+django.setup()
+
+from django.utils.translation import trans_real
+
+# Test language code extraction from URL
+test_paths = [
+    '/en-us/',
+    '/en-latn-us/',
+    '/en-Latn-US/',
+]
+
+print("Language extraction from paths:")
+for path in test_paths:
+    regex_match = trans_real.language_code_prefix_re.match(path)
+    if regex_match:
+        extracted = regex_match[1]
+        print(f"\n{path} -> extracted: '{extracted}'")
+        
+        # Check if it's in supported languages
+        supported_langs = trans_real.get_languages()
+        is_supported = extracted in supported_langs
+        print(f"  Is '{extracted}' in supported languages? {is_supported}")
+        
+        # Check if it passes check_for_language
+        check_result = trans_real.check_for_language(extracted)
+        print(f"  check_for_language('{extracted}') = {check_result}")
+        
+        # Check get_supported_language_variant
+        try:
+            variant = trans_real.get_supported_language_variant(extracted)
+            print(f"  get_supported_language_variant('{extracted}') = '{variant}'")
+        except LookupError as e:
+            print(f"  get_supported_language_variant('{extracted}') = LookupError: {e}")
+    else:
+        print(f"{path} -> NO MATCH")
diff --git a/test_detailed.py b/test_detailed.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/test_detailed.py
@@ -0,0 +1 @@
+
diff --git a/test_issue.py b/test_issue.py
new file mode 100644
index 0000000000..8db444f941
--- /dev/null
+++ b/test_issue.py
@@ -0,0 +1,25 @@
+import os
+import sys
+import django
+from django.test import Client
+
+# Add the testproject to sys.path
+sys.path.insert(0, '/testbed/testproject')
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+django.setup()
+
+# Create a test client
+client = Client()
+
+# Test URLs
+test_urls = [
+    '/en-us/',
+    '/en-latn-us/',
+    '/en-Latn-US/',
+]
+
+print("Testing URLs with current Django implementation:")
+for url in test_urls:
+    response = client.get(url)
+    print(f"{url} -> Status: {response.status_code}, Content: {response.content.decode() if response.status_code == 200 else 'N/A'}")
diff --git a/test_locale_bug.py b/test_locale_bug.py
new file mode 100644
index 0000000000..6ac90b5ee4
--- /dev/null
+++ b/test_locale_bug.py
@@ -0,0 +1,55 @@
+import re
+
+# Current regex from Django
+language_code_prefix_re = re.compile(r'^/(\w+([@-]\w+)?)(/|$)')
+language_code_re = re.compile(r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$', re.IGNORECASE)
+
+# Improved regex that supports RFC 5646 format
+# This allows multiple dash-separated components and @ for variants
+improved_prefix_regex = re.compile(r'^/(\w+(?:[@-]\w+)*)(/|$)')
+
+# Test URLs for prefix regex
+test_urls = [
+    '/en-us/',
+    '/en-latn-us/',
+    '/en-Latn-US/',
+    '/zh-Hans-CN/',  # Chinese simplified script for China
+    '/sr-Cyrl-RS/',  # Serbian Cyrillic script for Serbia
+    '/en/',          # Just language
+    '/en-US-x-twain/',  # With private use extension
+]
+
+print("Testing current Django prefix regex:")
+for url in test_urls:
+    match = language_code_prefix_re.match(url)
+    if match:
+        print(f"{url} -> MATCH: {match.group(1)}")
+    else:
+        print(f"{url} -> NO MATCH")
+
+print("\nTesting improved prefix regex:")
+for url in test_urls:
+    match = improved_prefix_regex.match(url)
+    if match:
+        print(f"{url} -> MATCH: {match.group(1)}")
+    else:
+        print(f"{url} -> NO MATCH")
+
+# Test language codes for language_code_re
+test_codes = [
+    'en-us',
+    'en-latn-us',
+    'en-Latn-US',
+    'zh-Hans-CN',
+    'sr-Cyrl-RS',
+    'en',
+    'en-US-x-twain',
+]
+
+print("\n\nTesting current Django language_code_re:")
+for code in test_codes:
+    match = language_code_re.match(code)
+    if match:
+        print(f"{code} -> MATCH")
+    else:
+        print(f"{code} -> NO MATCH")
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..6253a24931
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py
new file mode 100644
index 0000000000..90debc9315
--- /dev/null
+++ b/testproject/testproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_asgi_application()
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..be4d51fe56
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,130 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 4.1.dev20211203105622.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-3%j@wv$9qv7idl0!u+ctzi7%ui%2^ox6ht9)5t_f)@_a*+f&!i'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = ['*']
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.locale.LocaleMiddleware',  # Added for i18n
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+LANGUAGES = [
+    ('en-us', "English"),
+    ('en-latn-us', "Latin English"),
+    ('en-Latn-US', "BCP 47 case format"),
+]
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..ce876a6512
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,30 @@
+"""testproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+from django.conf.urls.i18n import i18n_patterns
+from django.http import HttpResponse
+
+def bangiah(request):
+    return HttpResponse('U!')
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
+
+urlpatterns += i18n_patterns(
+    path('', bangiah),
+)
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..435e21ceb7
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_wsgi_application()
