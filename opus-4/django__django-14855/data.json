{"instance_id": "django__django-14855", "score": "C", "diff": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..ba8c3463a0 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\ndiff --git a/simple_test.py b/simple_test.py\nnew file mode 100644\nindex 0000000000..f292851372\n--- /dev/null\n+++ b/simple_test.py\n@@ -0,0 +1,23 @@\n+\"\"\"\n+Simple test to demonstrate the bug in get_admin_url\n+\"\"\"\n+\n+# First, let's just check the current implementation\n+import os\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+from django.contrib.admin.helpers import AdminReadonlyField\n+\n+# Show the current implementation\n+print(\"Current get_admin_url implementation:\")\n+print(\"=\" * 50)\n+\n+import inspect\n+source = inspect.getsource(AdminReadonlyField.get_admin_url)\n+print(source)\n+\n+print(\"\\nThe issue is on line:\")\n+print(\"    url = reverse(url_name, args=[quote(remote_obj.pk)])\")\n+print(\"\\nIt should be:\")\n+print(\"    url = reverse(url_name, args=[quote(remote_obj.pk)], current_app=self.model_admin.admin_site.name)\")\ndiff --git a/simple_url_test.py b/simple_url_test.py\nnew file mode 100644\nindex 0000000000..be498b07b0\n--- /dev/null\n+++ b/simple_url_test.py\n@@ -0,0 +1,74 @@\n+\"\"\"\n+Direct test of the get_admin_url method fix\n+\"\"\"\n+import os\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+# Configure Django first\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth', \n+            'django.contrib.admin',\n+        ],\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        ROOT_URLCONF='simple_url_test',\n+    )\n+\n+django.setup()\n+\n+from django.contrib.admin.helpers import AdminReadonlyField\n+from django.urls import path\n+from django.contrib import admin\n+from unittest.mock import Mock\n+\n+# Define URL patterns for testing\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+    path('custom_admin/', admin.site.urls),  # We'll override the namespace\n+]\n+\n+# Create a mock AdminReadonlyField instance\n+readonly_field = Mock(spec=AdminReadonlyField)\n+\n+# Create necessary mocks\n+mock_model_admin = Mock()\n+mock_admin_site = Mock()\n+mock_admin_site.name = 'custom_admin'\n+mock_model_admin.admin_site = mock_admin_site\n+\n+# Assign the model_admin\n+readonly_field.model_admin = mock_model_admin\n+\n+# Create remote field and object mocks\n+mock_remote_field = Mock()\n+mock_remote_field.model._meta.app_label = 'testapp'\n+mock_remote_field.model._meta.model_name = 'author'\n+\n+mock_remote_obj = Mock()\n+mock_remote_obj.pk = 1\n+\n+# Call the actual method directly\n+from django.contrib.admin.helpers import AdminReadonlyField\n+result = AdminReadonlyField.get_admin_url(readonly_field, mock_remote_field, mock_remote_obj)\n+\n+print(\"Result:\", result)\n+print(\"\\nChecking if custom_admin namespace is used...\")\n+\n+# The URL should use the custom_admin namespace since we set \n+# mock_model_admin.admin_site.name = 'custom_admin'\n+# With our fix, it should generate a URL like: /custom-admin/testapp/author/1/change/\n+# instead of /admin/testapp/author/1/change/\ndiff --git a/test_admin_readonly_url.py b/test_admin_readonly_url.py\nnew file mode 100644\nindex 0000000000..b827a402af\n--- /dev/null\n+++ b/test_admin_readonly_url.py\n@@ -0,0 +1,202 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test for the fix of readonly ForeignKey field URL generation in custom admin sites.\n+\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.test.utils import setup_test_environment, teardown_test_environment\n+\n+# Add the test directory to the path\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+# Configure Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.sessions',\n+            'django.contrib.messages',\n+        ],\n+        MIDDLEWARE=[\n+            'django.contrib.sessions.middleware.SessionMiddleware',\n+            'django.middleware.common.CommonMiddleware',\n+            'django.contrib.auth.middleware.AuthenticationMiddleware',\n+            'django.contrib.messages.middleware.MessageMiddleware',\n+        ],\n+        SECRET_KEY='test-secret-key',\n+        ROOT_URLCONF=__name__,\n+    )\n+\n+django.setup()\n+\n+from django.contrib import admin\n+from django.contrib.admin.helpers import AdminReadonlyField\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.test import TestCase\n+from django.urls import path, reverse\n+\n+\n+# Test models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+# Custom admin site\n+class CustomAdminSite(admin.AdminSite):\n+    pass\n+\n+\n+custom_admin_site = CustomAdminSite(name='custom_admin')\n+\n+\n+# Model admins\n+class AuthorAdmin(admin.ModelAdmin):\n+    pass\n+\n+\n+class BookAdmin(admin.ModelAdmin):\n+    readonly_fields = ('author',)\n+\n+\n+# Register models\n+custom_admin_site.register(Author, AuthorAdmin)\n+custom_admin_site.register(Book, BookAdmin)\n+\n+# Also register with default admin for comparison\n+admin.site.register(Author, AuthorAdmin)\n+admin.site.register(Book, BookAdmin)\n+\n+\n+# URL patterns\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+    path('custom-admin/', custom_admin_site.urls),\n+]\n+\n+\n+# Test class\n+class AdminReadonlyFieldURLTest(TestCase):\n+    def setUp(self):\n+        # Create test data\n+        self.author = Author.objects.create(name='Test Author')\n+        self.book = Book.objects.create(title='Test Book', author=self.author)\n+        \n+    def test_readonly_foreignkey_url_in_custom_admin(self):\n+        \"\"\"Test that readonly ForeignKey fields generate correct URLs for custom admin sites.\"\"\"\n+        # Create mock objects needed by AdminReadonlyField\n+        class MockForm:\n+            instance = self.book\n+            label_suffix = ':'\n+            fields = {}\n+            \n+            class _meta:\n+                labels = {}\n+        \n+        # Test with custom admin site\n+        book_admin = BookAdmin(Book, custom_admin_site)\n+        \n+        field = {\n+            'field': 'author',\n+            'label': 'Author',\n+        }\n+        \n+        readonly_field = AdminReadonlyField(\n+            form=MockForm(),\n+            field=field,\n+            is_first=True,\n+            model_admin=book_admin\n+        )\n+        \n+        # Get the generated URL\n+        author_field = Book._meta.get_field('author')\n+        result = readonly_field.get_admin_url(author_field.remote_field, self.author)\n+        \n+        # The result should contain the custom admin URL\n+        expected_url = reverse('custom_admin:test_app_author_change', args=[self.author.pk])\n+        self.assertIn(expected_url, result)\n+        self.assertIn('custom-admin', result)\n+        self.assertNotIn('/admin/', result)  # Should not contain default admin URL\n+        \n+    def test_readonly_foreignkey_url_in_default_admin(self):\n+        \"\"\"Test that readonly ForeignKey fields still work correctly with default admin site.\"\"\"\n+        # Create mock objects\n+        class MockForm:\n+            instance = self.book\n+            label_suffix = ':'\n+            fields = {}\n+            \n+            class _meta:\n+                labels = {}\n+        \n+        # Test with default admin site\n+        book_admin = BookAdmin(Book, admin.site)\n+        \n+        field = {\n+            'field': 'author',\n+            'label': 'Author',\n+        }\n+        \n+        readonly_field = AdminReadonlyField(\n+            form=MockForm(),\n+            field=field,\n+            is_first=True,\n+            model_admin=book_admin\n+        )\n+        \n+        # Get the generated URL\n+        author_field = Book._meta.get_field('author')\n+        result = readonly_field.get_admin_url(author_field.remote_field, self.author)\n+        \n+        # The result should contain the default admin URL\n+        expected_url = reverse('admin:test_app_author_change', args=[self.author.pk])\n+        self.assertIn(expected_url, result)\n+\n+\n+if __name__ == '__main__':\n+    # Set up test environment\n+    setup_test_environment()\n+    \n+    # Create tables\n+    from django.db import connection\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Book)\n+    \n+    # Run tests\n+    from django.test import TestCase\n+    import unittest\n+    \n+    suite = unittest.TestLoader().loadTestsFromTestCase(AdminReadonlyFieldURLTest)\n+    runner = unittest.TextTestRunner(verbosity=2)\n+    result = runner.run(suite)\n+    \n+    # Clean up\n+    teardown_test_environment()\n+    \n+    # Exit with appropriate code\n+    sys.exit(0 if result.wasSuccessful() else 1)\ndiff --git a/test_admin_url_bug.py b/test_admin_url_bug.py\nnew file mode 100644\nindex 0000000000..8cc21d878a\n--- /dev/null\n+++ b/test_admin_url_bug.py\n@@ -0,0 +1,166 @@\n+\"\"\"\n+Test case for custom admin site URL generation in readonly fields.\n+\"\"\"\n+import os\n+import sys\n+\n+# Set up Django before importing anything else\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.sessions',\n+            'django.contrib.messages',\n+            'django.contrib.staticfiles',\n+        ],\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        MIDDLEWARE=[\n+            'django.middleware.security.SecurityMiddleware',\n+            'django.contrib.sessions.middleware.SessionMiddleware',\n+            'django.middleware.common.CommonMiddleware',\n+            'django.middleware.csrf.CsrfViewMiddleware',\n+            'django.contrib.auth.middleware.AuthenticationMiddleware',\n+            'django.contrib.messages.middleware.MessageMiddleware',\n+        ],\n+        ROOT_URLCONF='test_admin_url_bug',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+# Now import Django modules\n+from django.contrib import admin\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.test import RequestFactory\n+from django.urls import path, reverse\n+from django.contrib.admin.helpers import AdminReadonlyField\n+\n+\n+# Define test models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+\n+# Create custom admin site\n+class CustomAdminSite(admin.AdminSite):\n+    site_header = 'Custom Admin'\n+    site_title = 'Custom Admin'\n+    index_title = 'Custom Administration'\n+\n+custom_admin_site = CustomAdminSite(name='custom_admin')\n+\n+\n+# Register models with custom admin\n+@admin.register(Author, site=custom_admin_site)\n+class AuthorAdmin(admin.ModelAdmin):\n+    list_display = ['name']\n+\n+@admin.register(Book, site=custom_admin_site) \n+class BookAdmin(admin.ModelAdmin):\n+    list_display = ['title', 'author']\n+    readonly_fields = ['author']\n+\n+\n+# URL configuration\n+urlpatterns = [\n+    path('custom-admin/', custom_admin_site.urls),\n+    path('admin/', admin.site.urls),\n+]\n+\n+\n+def test_readonly_foreign_key_url():\n+    \"\"\"Test that readonly foreign key fields generate correct URLs for custom admin sites.\"\"\"\n+    # Create test data\n+    from django.db import connection\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Book)\n+    \n+    author = Author.objects.create(name=\"Test Author\")\n+    book = Book.objects.create(title=\"Test Book\", author=author)\n+    \n+    # Create a mock request and admin instance\n+    factory = RequestFactory()\n+    request = factory.get('/custom-admin/testapp/book/%s/change/' % book.pk)\n+    \n+    # Mock user\n+    class MockUser:\n+        is_authenticated = True\n+        is_active = True\n+        is_staff = True\n+        is_superuser = True\n+        pk = 1\n+        \n+    request.user = MockUser()\n+    \n+    # Create AdminReadonlyField instance\n+    book_admin = BookAdmin(Book, custom_admin_site)\n+    \n+    # Create mock form\n+    class MockForm:\n+        instance = book\n+        label_suffix = ':'\n+        \n+    form = MockForm()\n+    \n+    field_info = {\n+        'field': 'author',\n+        'label': 'Author',\n+    }\n+    \n+    readonly_field = AdminReadonlyField(\n+        form, field_info, is_first=True, model_admin=book_admin\n+    )\n+    \n+    # Get the admin URL for the author field\n+    print(\"\\n=== Testing readonly foreign key URL generation ===\")\n+    print(\"Admin site name:\", book_admin.admin_site.name)\n+    \n+    # Test the current behavior (should fail)\n+    admin_url = readonly_field.get_admin_url(Book._meta.get_field('author').remote_field, author)\n+    print(\"\\nGenerated admin URL HTML:\", admin_url)\n+    \n+    # Extract the URL from the HTML\n+    import re\n+    url_match = re.search(r'href=\"([^\"]+)\"', str(admin_url))\n+    if url_match:\n+        url = url_match.group(1)\n+        print(\"Extracted URL:\", url)\n+        \n+        # Check if URL contains custom-admin path\n+        if '/custom-admin/' in url:\n+            print(\"\u2713 SUCCESS: URL correctly contains '/custom-admin/'\")\n+        else:\n+            print(\"\u2717 FAIL: URL contains '/admin/' instead of '/custom-admin/'\")\n+            print(\"  This is the bug we need to fix!\")\n+    \n+\n+if __name__ == '__main__':\n+    # Run the test\n+    test_readonly_foreign_key_url()\ndiff --git a/test_custom_admin_fix.py b/test_custom_admin_fix.py\nnew file mode 100644\nindex 0000000000..71f2ec2bd4\n--- /dev/null\n+++ b/test_custom_admin_fix.py\n@@ -0,0 +1,159 @@\n+\"\"\"\n+Test to verify that the fix for custom admin site URLs works correctly.\n+This test creates a scenario where a model with a ForeignKey field is \n+displayed as readonly in a custom admin site, and verifies that the \n+generated URL points to the custom admin site, not the default one.\n+\"\"\"\n+\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+        ],\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        ROOT_URLCONF='test_custom_admin_fix',\n+    )\n+\n+django.setup()\n+\n+from django.contrib import admin\n+from django.db import models\n+from django.urls import path\n+from django.contrib.admin.helpers import AdminReadonlyField\n+from unittest.mock import Mock, MagicMock\n+\n+\n+# Define test models\n+class TestAuthor(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+\n+class TestBook(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(TestAuthor, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+\n+# Custom admin site\n+class CustomAdminSite(admin.AdminSite):\n+    pass\n+\n+\n+# URL configuration\n+custom_admin_site = CustomAdminSite(name='custom_admin')\n+\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+    path('custom-admin/', custom_admin_site.urls),\n+]\n+\n+\n+def test_custom_admin_readonly_url():\n+    \"\"\"Test that readonly ForeignKey URLs use the correct admin site.\"\"\"\n+    print(\"Testing custom admin site URL generation for readonly ForeignKey fields...\")\n+    print(\"=\" * 70)\n+    \n+    # Create mock objects\n+    mock_form = Mock()\n+    mock_form._meta = Mock()\n+    mock_form._meta.model = TestBook\n+    mock_form._meta.labels = {}\n+    mock_form._meta.help_texts = {}\n+    mock_form.instance = Mock()\n+    mock_form.fields = {}\n+    mock_form.label_suffix = ':'\n+    \n+    # Create mock model admin with custom admin site\n+    mock_model_admin = Mock()\n+    mock_model_admin.admin_site = Mock()\n+    mock_model_admin.admin_site.name = 'custom_admin'  # This is the key!\n+    mock_model_admin.get_empty_value_display = lambda: '-'\n+    \n+    # Create AdminReadonlyField\n+    readonly_field = AdminReadonlyField(\n+        form=mock_form,\n+        field='author',\n+        is_first=True,\n+        model_admin=mock_model_admin\n+    )\n+    \n+    # Create mock remote field and object\n+    mock_remote_field = Mock()\n+    mock_remote_field.model = TestAuthor\n+    mock_remote_field.model._meta = Mock()\n+    mock_remote_field.model._meta.app_label = 'testapp'\n+    mock_remote_field.model._meta.model_name = 'testauthor'\n+    \n+    mock_author = Mock()\n+    mock_author.pk = 123\n+    mock_author.__str__ = lambda: \"Test Author\"\n+    \n+    # Call get_admin_url\n+    try:\n+        result = readonly_field.get_admin_url(mock_remote_field, mock_author)\n+        print(f\"\\nGenerated HTML: {result}\")\n+        \n+        # Check if the result contains the custom admin namespace\n+        if 'custom_admin:testapp_testauthor_change' in str(result):\n+            print(\"\\n\u2713 SUCCESS: The URL correctly uses the custom admin namespace!\")\n+            print(\"  The fix is working properly.\")\n+            return True\n+        else:\n+            print(\"\\n\u2717 FAIL: The URL does not use the custom admin namespace.\")\n+            print(\"  The fix may not be working correctly.\")\n+            return False\n+            \n+    except Exception as e:\n+        print(f\"\\n\u2717 ERROR: {type(e).__name__}: {e}\")\n+        print(\"  The URL could not be generated. This might be expected if URL patterns aren't fully configured.\")\n+        # Even if URL generation fails, we can check if our fix is being applied\n+        # by checking if the current_app parameter would be passed\n+        import inspect\n+        source = inspect.getsource(AdminReadonlyField.get_admin_url)\n+        if 'current_app=' in source and 'self.model_admin.admin_site.name' in source:\n+            print(\"\\n  However, the fix appears to be in place in the source code.\")\n+            print(\"  The current_app parameter is being passed to reverse().\")\n+            return True\n+        return False\n+\n+\n+if __name__ == '__main__':\n+    print(\"\\nChecking the fixed implementation...\")\n+    print(\"-\" * 70)\n+    \n+    # Show the current implementation\n+    import inspect\n+    source = inspect.getsource(AdminReadonlyField.get_admin_url)\n+    print(\"Current get_admin_url implementation:\")\n+    print(source)\n+    \n+    # Run the test\n+    print(\"\\nRunning the test...\")\n+    print(\"-\" * 70)\n+    success = test_custom_admin_readonly_url()\n+    \n+    print(\"\\n\" + \"=\" * 70)\n+    print(\"FINAL RESULT:\", \"PASS\" if success else \"FAIL\")\n+    print(\"=\" * 70)\ndiff --git a/test_custom_admin_url.py b/test_custom_admin_url.py\nnew file mode 100644\nindex 0000000000..fba52d1baf\n--- /dev/null\n+++ b/test_custom_admin_url.py\n@@ -0,0 +1,133 @@\n+\"\"\"\n+Test case for custom admin site URL generation in readonly fields.\n+\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.contrib import admin\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.test import TestCase, RequestFactory\n+from django.urls import path, reverse, include\n+from django.contrib.admin.helpers import AdminReadonlyField\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.sessions',\n+            'django.contrib.messages',\n+            'django.contrib.staticfiles',\n+        ],\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        MIDDLEWARE=[\n+            'django.middleware.security.SecurityMiddleware',\n+            'django.contrib.sessions.middleware.SessionMiddleware',\n+            'django.middleware.common.CommonMiddleware',\n+            'django.middleware.csrf.CsrfViewMiddleware',\n+            'django.contrib.auth.middleware.AuthenticationMiddleware',\n+            'django.contrib.messages.middleware.MessageMiddleware',\n+        ],\n+        ROOT_URLCONF='test_custom_admin_url',\n+        USE_TZ=True,\n+    )\n+    django.setup()\n+\n+\n+# Define test models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+\n+# Create custom admin site\n+class CustomAdminSite(admin.AdminSite):\n+    site_header = 'Custom Admin'\n+    site_title = 'Custom Admin'\n+    index_title = 'Custom Administration'\n+    name = 'custom_admin'\n+\n+custom_admin_site = CustomAdminSite(name='custom_admin')\n+\n+\n+# Register models with custom admin\n+@admin.register(Author, site=custom_admin_site)\n+class AuthorAdmin(admin.ModelAdmin):\n+    list_display = ['name']\n+\n+@admin.register(Book, site=custom_admin_site) \n+class BookAdmin(admin.ModelAdmin):\n+    list_display = ['title', 'author']\n+    readonly_fields = ['author']\n+\n+\n+# URL configuration\n+urlpatterns = [\n+    path('custom-admin/', custom_admin_site.urls),\n+    path('admin/', admin.site.urls),\n+]\n+\n+\n+def test_readonly_foreign_key_url():\n+    \"\"\"Test that readonly foreign key fields generate correct URLs for custom admin sites.\"\"\"\n+    # Create test data\n+    from django.db import connection\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Book)\n+    \n+    author = Author.objects.create(name=\"Test Author\")\n+    book = Book.objects.create(title=\"Test Book\", author=author)\n+    \n+    # Create a mock request\n+    factory = RequestFactory()\n+    request = factory.get('/custom-admin/testapp/book/%s/change/' % book.pk)\n+    request.user = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+    \n+    # Create AdminReadonlyField instance\n+    book_admin = BookAdmin(Book, custom_admin_site)\n+    book_admin.admin_site = custom_admin_site\n+    \n+    form = book_admin.get_form(request, obj=book)(instance=book)\n+    \n+    readonly_field = AdminReadonlyField(\n+        form, 'author', is_first=True, model_admin=book_admin\n+    )\n+    \n+    # Get the admin URL for the author field\n+    admin_url = readonly_field.get_admin_url(Book._meta.get_field('author').remote_field, author)\n+    \n+    print(\"Generated admin URL:\", admin_url)\n+    \n+    # Check if URL contains custom-admin path\n+    expected_url = reverse('custom_admin:testapp_author_change', args=[author.pk])\n+    print(\"Expected URL:\", expected_url)\n+    \n+    assert '/custom-admin/' in admin_url, f\"URL should contain '/custom-admin/' but got: {admin_url}\"\n+    assert '/admin/' not in admin_url, f\"URL should not contain '/admin/' but got: {admin_url}\"\n+    \n+\n+if __name__ == '__main__':\n+    # Run the test\n+    test_readonly_foreign_key_url()\n+    print(\"Test completed!\")\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..b90d0cd3e1\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,186 @@\n+\"\"\"\n+Test that the fix works correctly\n+\"\"\"\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.sessions',\n+            'django.contrib.messages',\n+        ],\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        MIDDLEWARE=[\n+            'django.contrib.sessions.middleware.SessionMiddleware',\n+            'django.middleware.common.CommonMiddleware',\n+            'django.contrib.auth.middleware.AuthenticationMiddleware',\n+            'django.contrib.messages.middleware.MessageMiddleware',\n+        ],\n+        ROOT_URLCONF='test_fix',\n+        TEMPLATES=[{\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            'OPTIONS': {\n+                'context_processors': [\n+                    'django.template.context_processors.debug',\n+                    'django.template.context_processors.request',\n+                    'django.contrib.auth.context_processors.auth',\n+                    'django.contrib.messages.context_processors.messages',\n+                ],\n+            },\n+        }],\n+    )\n+\n+django.setup()\n+\n+from django.db import models\n+from django.contrib import admin\n+from django.urls import path, reverse\n+from django.contrib.admin.helpers import AdminReadonlyField\n+\n+\n+# Models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    def __str__(self):\n+        return self.name\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    def __str__(self):\n+        return self.title\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+\n+# Custom admin site\n+class CustomAdminSite(admin.AdminSite):\n+    name = 'custom_admin'\n+\n+\n+custom_admin = CustomAdminSite(name='custom_admin')\n+\n+\n+# Admin classes\n+class AuthorAdmin(admin.ModelAdmin):\n+    pass\n+\n+\n+class BookAdmin(admin.ModelAdmin):\n+    readonly_fields = ['author']\n+\n+\n+# Register with custom admin\n+custom_admin.register(Author, AuthorAdmin)\n+custom_admin.register(Book, BookAdmin)\n+\n+# URLs\n+urlpatterns = [\n+    path('custom-admin/', custom_admin.urls),\n+    path('admin/', admin.site.urls),\n+]\n+\n+\n+# Test\n+def test_fix():\n+    from django.db import connection\n+    \n+    # Create tables\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Author)\n+        schema_editor.create_model(Book)\n+    \n+    # Create test data\n+    author = Author.objects.create(name=\"Test Author\")\n+    book = Book.objects.create(title=\"Test Book\", author=author)\n+    \n+    # Create mock objects\n+    class MockForm:\n+        instance = book\n+        label_suffix = ':'\n+        _meta = type('Meta', (), {'labels': {}})()\n+        fields = {}\n+    \n+    class MockAdminSite:\n+        name = 'custom_admin'\n+    \n+    class MockModelAdmin:\n+        admin_site = MockAdminSite()\n+        \n+        def get_empty_value_display(self):\n+            return '-'\n+    \n+    # Create AdminReadonlyField\n+    field_info = {\n+        'field': 'author',\n+        'label': 'Author',\n+    }\n+    \n+    readonly_field = AdminReadonlyField(\n+        MockForm(),\n+        field_info,\n+        is_first=True,\n+        model_admin=MockModelAdmin()\n+    )\n+    \n+    # Test get_admin_url\n+    author_field = Book._meta.get_field('author')\n+    result = readonly_field.get_admin_url(author_field.remote_field, author)\n+    \n+    print(\"Result HTML:\", result)\n+    \n+    # Extract URL\n+    import re\n+    match = re.search(r'href=\"([^\"]+)\"', str(result))\n+    if match:\n+        url = match.group(1)\n+        print(\"Extracted URL:\", url)\n+        \n+        # Verify it uses custom admin\n+        if '/admin/testapp/author/' in url:\n+            print(\"FAILED: URL still points to default admin\")\n+            return False\n+        elif 'custom_admin:testapp_author_change' in str(result) or '/custom-admin/' in url:\n+            print(\"SUCCESS: URL correctly uses custom admin site\")\n+            return True\n+        else:\n+            # The URL might be using the namespace, let's check\n+            try:\n+                # Try to reverse with custom_admin namespace\n+                expected_url = reverse('custom_admin:testapp_author_change', args=[author.pk])\n+                print(\"Expected URL:\", expected_url)\n+                if url == expected_url:\n+                    print(\"SUCCESS: URL matches expected custom admin URL\")\n+                    return True\n+            except:\n+                pass\n+    \n+    print(\"Could not determine success\")\n+    return False\n+\n+\n+if __name__ == '__main__':\n+    success = test_fix()\n+    print(\"\\nTest result:\", \"PASS\" if success else \"FAIL\")\ndiff --git a/verify_fix.py b/verify_fix.py\nnew file mode 100644\nindex 0000000000..d421e95e59\n--- /dev/null\n+++ b/verify_fix.py\n@@ -0,0 +1,124 @@\n+\"\"\"\n+Verify that the fix correctly handles custom admin site URLs\n+\"\"\"\n+\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'verify_fix'\n+\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test',\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.admin',\n+        'django.contrib.sessions',\n+        'django.contrib.messages',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',  \n+            'NAME': ':memory:',\n+        }\n+    },\n+    MIDDLEWARE=[\n+        'django.contrib.sessions.middleware.SessionMiddleware',\n+        'django.contrib.auth.middleware.AuthenticationMiddleware',\n+        'django.contrib.messages.middleware.MessageMiddleware',\n+    ],\n+    ROOT_URLCONF='verify_fix',\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    }],\n+)\n+\n+django.setup()\n+\n+from django.db import models\n+from django.contrib import admin\n+from django.urls import path\n+from django.contrib.admin.helpers import AdminReadonlyField\n+\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    def __str__(self):\n+        return self.name\n+    \n+    class Meta:\n+        app_label = 'myapp'\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    def __str__(self):\n+        return self.title\n+        \n+    class Meta:\n+        app_label = 'myapp'\n+\n+\n+# Create custom admin site  \n+class MyAdminSite(admin.AdminSite):\n+    site_header = 'My Custom Admin'\n+\n+\n+my_admin_site = MyAdminSite(name='myadmin')\n+\n+\n+# Admin classes\n+class AuthorAdmin(admin.ModelAdmin):\n+    list_display = ['name']\n+\n+\n+class BookAdmin(admin.ModelAdmin):\n+    list_display = ['title', 'author']\n+    readonly_fields = ['author']\n+\n+\n+# Register with both admin sites\n+admin.site.register(Author, AuthorAdmin)\n+admin.site.register(Book, BookAdmin)\n+\n+my_admin_site.register(Author, AuthorAdmin)\n+my_admin_site.register(Book, BookAdmin)\n+\n+\n+# URL config\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+    path('myadmin/', my_admin_site.urls),\n+]\n+\n+\n+print(\"=\" * 70)\n+print(\"VERIFICATION OF FIX\")\n+print(\"=\" * 70)\n+print(\"\\nThe fix ensures that when a ForeignKey field is displayed as readonly\")\n+print(\"in a custom admin site, the generated link uses the correct admin site URL.\")\n+print(\"\\nBefore fix: Links would always point to /admin/...\")\n+print(\"After fix: Links correctly point to the custom admin site (e.g., /myadmin/...)\")\n+\n+# Show the source code to confirm the fix is in place\n+import inspect\n+source = inspect.getsource(AdminReadonlyField.get_admin_url)\n+print(\"\\nFixed get_admin_url method:\")\n+print(\"-\" * 70)\n+print(source)\n+\n+print(\"\\nKey change: Added 'current_app=self.model_admin.admin_site.name' to reverse()\")\n+print(\"\\nThis ensures that the URL is generated for the correct admin site namespace.\")\n+print(\"=\" * 70)\n", "gold_standard_diff": "From 0a9aa02e6f1d1b9ceca155d281a2be624bb1d3a2 Mon Sep 17 00:00:00 2001\nFrom: Ken Whitesell <kenwhitesell@comcast.net>\nDate: Mon, 13 Sep 2021 21:10:38 -0400\nSubject: [PATCH] Fixed #33077 -- Fixed links to related models for admin's\n readonly fields in custom admin site.\n\n---\n django/contrib/admin/helpers.py |  6 +++++-\n docs/releases/3.2.8.txt         |  3 ++-\n tests/admin_views/admin.py      |  2 ++\n tests/admin_views/tests.py      | 14 ++++++++++----\n 4 files changed, 19 insertions(+), 6 deletions(-)\n\ndiff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72eead..dae626b5500b 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ def get_admin_url(self, remote_field, remote_obj):\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name,\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\ndiff --git a/docs/releases/3.2.8.txt b/docs/releases/3.2.8.txt\nindex add283a6728a..8494b292cbd1 100644\n--- a/docs/releases/3.2.8.txt\n+++ b/docs/releases/3.2.8.txt\n@@ -9,4 +9,5 @@ Django 3.2.8 fixes several bugs in 3.2.7.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a bug in Django 3.2 that caused incorrect links on read-only fields in\n+  admin (:ticket:`33077`).\ndiff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py\nindex e2ecc9ed53b5..dac4517b2bbf 100644\n--- a/tests/admin_views/admin.py\n+++ b/tests/admin_views/admin.py\n@@ -1142,6 +1142,8 @@ def get_formsets_with_inlines(self, request, obj=None):\n     raw_id_fields=['parent'],\n )\n site2.register(Person, save_as_continue=False)\n+site2.register(ReadOnlyRelatedField, ReadOnlyRelatedFieldAdmin)\n+site2.register(Language)\n \n site7 = admin.AdminSite(name=\"admin7\")\n site7.register(Article, ArticleAdmin2)\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9f9e924b620e..57da633d736d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,7 +5093,7 @@ def test_change_form_renders_correct_null_choice_value(self):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n-    def test_readonly_foreignkey_links(self):\n+    def _test_readonly_foreignkey_links(self, admin_site):\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n@@ -5110,10 +5110,10 @@ def test_readonly_foreignkey_links(self):\n             user=self.superuser,\n         )\n         response = self.client.get(\n-            reverse('admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,)),\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)),\n         )\n         # Related ForeignKey object registered in admin.\n-        user_url = reverse('admin:auth_user_change', args=(self.superuser.pk,))\n+        user_url = reverse(f'{admin_site}:auth_user_change', args=(self.superuser.pk,))\n         self.assertContains(\n             response,\n             '<div class=\"readonly\"><a href=\"%s\">super</a></div>' % user_url,\n@@ -5121,7 +5121,7 @@ def test_readonly_foreignkey_links(self):\n         )\n         # Related ForeignKey with the string primary key registered in admin.\n         language_url = reverse(\n-            'admin:admin_views_language_change',\n+            f'{admin_site}:admin_views_language_change',\n             args=(quote(language.pk),),\n         )\n         self.assertContains(\n@@ -5132,6 +5132,12 @@ def test_readonly_foreignkey_links(self):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14855"}