{"instance_id": "django__django-11820", "score": "I", "diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f3f1..cb7d53b918 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1706,8 +1706,12 @@ class Model(metaclass=ModelBase):\n         for field in related_fields:\n             _cls = cls\n             fld = None\n-            for part in field.split(LOOKUP_SEP):\n+            parts = field.split(LOOKUP_SEP)\n+            for i, part in enumerate(parts):\n                 try:\n+                    if part == 'pk' and i == len(parts) - 1:\n+                        # Allow 'pk' as the last part of a related field\n+                        break\n                     fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\n@@ -1721,6 +1725,7 @@ class Model(metaclass=ModelBase):\n                                 id='models.E015',\n                             )\n                         )\n+                        break\n \n         # Skip ordering on pk. This is always a valid order_by field\n         # but is an alias and therefore won't be found by opts.get_field.\n", "gold_standard_diff": "From c7944628a1979453468d67818c63957532d396d8 Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Thu, 26 Sep 2019 10:33:54 +0200\nSubject: [PATCH 1/2] Refs #30798 -- Prevented chaining fields from the same\n related model multiple times in model Meta.ordering.\n\n---\n django/db/models/base.py                  |  2 ++\n tests/invalid_models_tests/test_models.py | 20 ++++++++++++++++++++\n 2 files changed, 22 insertions(+)\n\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f3f1a8..fe3d84677a3c 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1711,6 +1711,8 @@ def _check_ordering(cls):\n                     fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\n+                    else:\n+                        _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n                     if fld is None or fld.get_transform(part) is None:\n                         errors.append(\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 0f1d1e4dc300..02db3ea54ac0 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -814,6 +814,26 @@ class Meta:\n             )\n         ])\n \n+    def test_ordering_pointing_multiple_times_to_model_fields(self):\n+        class Parent(models.Model):\n+            field1 = models.CharField(max_length=100)\n+            field2 = models.CharField(max_length=100)\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('parent__field1__field2',)\n+\n+        self.assertEqual(Child.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'parent__field1__field2'.\",\n+                obj=Child,\n+                id='models.E015',\n+            )\n+        ])\n+\n     def test_ordering_allows_registered_lookups(self):\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n\nFrom 95a11578ce41de1e152fe7d173f109e280aebd6d Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Fri, 27 Sep 2019 12:16:26 +0200\nSubject: [PATCH 2/2] Fixed #30798 -- Fixed Meta.ordering validation for pk of\n related fields.\n\nRegression in 440505cb2cadbe1a5b9fba246bcde6c04f51d07e.\n---\n django/db/models/base.py                  |  6 +++++-\n tests/invalid_models_tests/test_models.py | 12 ++++++++++++\n 2 files changed, 17 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex fe3d84677a3c..0b8425aa8531 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1708,7 +1708,11 @@ def _check_ordering(cls):\n             fld = None\n             for part in field.split(LOOKUP_SEP):\n                 try:\n-                    fld = _cls._meta.get_field(part)\n+                    # pk is an alias that won't be found by opts.get_field.\n+                    if part == 'pk':\n+                        fld = _cls._meta.pk\n+                    else:\n+                        fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\n                     else:\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 02db3ea54ac0..60b89b6f2ec4 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -844,6 +844,18 @@ class Meta:\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n+    def test_ordering_pointing_to_related_model_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('parent__pk',)\n+\n+        self.assertEqual(Child.check(), [])\n+\n     def test_ordering_pointing_to_foreignkey_field(self):\n         class Parent(models.Model):\n             pass\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11820"}