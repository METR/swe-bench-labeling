{"instance_id": "sympy__sympy-22714", "score": "I", "diff": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..fde5825dd3 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -912,7 +912,8 @@ class Point2D(Point):\n     def __new__(cls, *args, _nocheck=False, **kwargs):\n         if not _nocheck:\n             kwargs['dim'] = 2\n-            args = Point(*args, **kwargs)\n+            evaluate = kwargs.pop('evaluate', True)\n+            args = Point(*args, evaluate=evaluate, **kwargs)\n         return GeometryEntity.__new__(cls, *args)\n \n     def __contains__(self, item):\n", "gold_standard_diff": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d09e..11bad7ff9c99 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n+        if any(a.is_number and im(a).is_zero is False for a in coords):\n             raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\ndiff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 930d707735e2..d2e3a545c902 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,5 +1,6 @@\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n+from sympy.core.parameters import evaluate\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n@@ -452,6 +453,12 @@ def test__normalize_dimension():\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+\n def test_direction_cosine():\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/22714"}