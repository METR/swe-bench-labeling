{"instance_id": "sympy__sympy-21596", "score": "I", "diff": "diff --git a/sympy/sets/fancysets.py b/sympy/sets/fancysets.py\nindex 80189c344c..b5a5c06956 100644\n--- a/sympy/sets/fancysets.py\n+++ b/sympy/sets/fancysets.py\n@@ -335,6 +335,30 @@ class ImageSet(Set):\n \n     sympy.sets.sets.imageset\n     \"\"\"\n+\n+    def _intersect(self, other):\n+        from sympy import S, Lambda, FiniteSet\n+        if other == S.Reals:\n+            real_values = []\n+            for x in self.base_set:\n+                y = self.lamda(x)\n+                if y.is_real and y == x:\n+                    real_values.append(y)\n+            return FiniteSet(*real_values)\n+        else:\n+            return None  # Use default implementation\n+\n+    def _contains(self, other):\n+        from sympy import S\n+        if other in S.Reals:\n+            return any(self.lamda(x) == other and self.lamda(x).is_real and self.lamda(x) == x for x in self.base_set)\n+        return any(self.lamda(x) == other for x in self.base_set)\n+\n+    def intersect(self, other):\n+        from sympy import S\n+        if other == S.Reals:\n+            return self._intersect(other)\n+        return Set.intersect(self, other)\n     def __new__(cls, flambda, *sets):\n         if not isinstance(flambda, Lambda):\n             raise ValueError('First argument must be a Lambda')\ndiff --git a/test_imageset_reals_intersection.py b/test_imageset_reals_intersection.py\nnew file mode 100644\nindex 0000000000..25e851f46e\n--- /dev/null\n+++ b/test_imageset_reals_intersection.py\n@@ -0,0 +1,44 @@\n+from sympy import S, Lambda, Symbol, imageset, Intersection, pprint\n+\n+def test_imageset_reals_intersection():\n+    n = Symbol('n')\n+    S1 = imageset(Lambda(n, n + (n - 1)*(n + 1)*S.ImaginaryUnit), S.Integers)\n+    print(\"S1:\")\n+    pprint(S1)\n+    \n+    print(\"\\nCalculating intersection...\")\n+    intersection = S1.intersect(S.Reals)\n+    print(\"Intersection calculated.\")\n+    print(\"\\nS1 intersect Reals:\")\n+    pprint(intersection)\n+    \n+    print(\"\\nChecking if 2 is in S1...\")\n+    in_s1 = 2 in S1\n+    print(\"Is 2 in S1?\", in_s1)\n+    \n+    print(\"\\nChecking if 2 is in S1 intersect Reals...\")\n+    in_intersection = 2 in intersection\n+    print(\"Is 2 in S1 intersect Reals?\", in_intersection)\n+    \n+    print(\"\\nAssertions:\")\n+    print(\"2 not in S1:\", 2 not in S1)\n+    print(\"2 not in intersection:\", 2 not in intersection)\n+    print(\"intersection == {-1, 1}:\", intersection == {-1, 1})\n+\n+    print(\"\\nAdditional test cases:\")\n+    print(\"1 in intersection:\", 1 in intersection)\n+    print(\"-1 in intersection:\", -1 in intersection)\n+    print(\"0 not in intersection:\", 0 not in intersection)\n+    print(\"I not in intersection:\", S.ImaginaryUnit not in intersection)\n+\n+    print(\"\\nTesting with a different imageset...\")\n+    S2 = imageset(Lambda(n, 2*n), S.Integers)\n+    s2_intersection = S2.intersect(S.Reals)\n+    print(\"S2 intersect Reals == S2:\", s2_intersection == S2)\n+\n+    print(\"\\nTesting with an imageset that has no real values...\")\n+    S3 = imageset(Lambda(n, S.ImaginaryUnit*n), S.Integers)\n+    s3_intersection = S3.intersect(S.Reals)\n+    print(\"S3 intersect Reals == EmptySet:\", s3_intersection == S.EmptySet)\n+\n+test_imageset_reals_intersection()\n", "gold_standard_diff": "diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py\nindex c54dc8f72ae7..1ad7e98253c7 100644\n--- a/sympy/sets/handlers/intersection.py\n+++ b/sympy/sets/handlers/intersection.py\n@@ -5,7 +5,7 @@\n from sympy.sets.fancysets import (Integers, Naturals, Reals, Range,\n     ImageSet, Rationals)\n from sympy.sets.sets import UniversalSet, imageset, ProductSet\n-\n+from sympy.simplify.radsimp import numer\n \n @dispatch(ConditionSet, ConditionSet)  # type: ignore # noqa:F811\n def intersection_sets(a, b): # noqa:F811\n@@ -280,6 +280,19 @@ def intersection_sets(self, other): # noqa:F811\n         from sympy.core.function import expand_complex\n         from sympy.solvers.solvers import denoms, solve_linear\n         from sympy.core.relational import Eq\n+\n+        def _solution_union(exprs, sym):\n+            # return a union of linear solutions to i in expr;\n+            # if i cannot be solved, use a ConditionSet for solution\n+            sols = []\n+            for i in exprs:\n+                x, xis = solve_linear(i, 0, [sym])\n+                if x == sym:\n+                    sols.append(FiniteSet(xis))\n+                else:\n+                    sols.append(ConditionSet(sym, Eq(i, 0)))\n+            return Union(*sols)\n+\n         f = self.lamda.expr\n         n = self.lamda.variables[0]\n \n@@ -303,22 +316,14 @@ def intersection_sets(self, other): # noqa:F811\n         elif ifree != {n}:\n             return None\n         else:\n-            # univarite imaginary part in same variable\n-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])\n-            if x and all(i == n for i in x):\n-                base_set -= FiniteSet(xis)\n-            else:\n-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)\n+            # univarite imaginary part in same variable;\n+            # use numer instead of as_numer_denom to keep\n+            # this as fast as possible while still handling\n+            # simple cases\n+            base_set &= _solution_union(\n+                Mul.make_args(numer(im)), n)\n         # exclude values that make denominators 0\n-        for i in denoms(f):\n-            if i.has(n):\n-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))\n-                if sol != []:\n-                    x, xis = sol\n-                    if x and all(i == n for i in x):\n-                        base_set -= FiniteSet(xis)\n-                else:\n-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)\n+        base_set -= _solution_union(denoms(f), n)\n         return imageset(lam, base_set)\n \n     elif isinstance(other, Interval):\ndiff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py\nindex 098020ca4e7e..7facabe185df 100644\n--- a/sympy/sets/tests/test_fancysets.py\n+++ b/sympy/sets/tests/test_fancysets.py\n@@ -2,8 +2,9 @@\n from sympy.core.expr import unchanged\n from sympy.sets.fancysets import (ImageSet, Range, normalize_theta_set,\n                                   ComplexRegion)\n-from sympy.sets.sets import (Complement, FiniteSet, Interval, Union, imageset,\n+from sympy.sets.sets import (FiniteSet, Interval, Union, imageset,\n                              Intersection, ProductSet, Contains)\n+from sympy.sets.conditionset import ConditionSet\n from sympy.simplify.simplify import simplify\n from sympy import (S, Symbol, Lambda, symbols, cos, sin, pi, oo, Basic,\n                    Rational, sqrt, tan, log, exp, Abs, I, Tuple, eye,\n@@ -657,7 +658,23 @@ def test_infinitely_indexed_set_2():\n def test_imageset_intersect_real():\n     from sympy import I\n     from sympy.abc import n\n-    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == Complement(S.Integers, FiniteSet((-1, 1)))\n+    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(-1, 1)\n+    im = (n - 1)*(n + S.Half)\n+    assert imageset(Lambda(n, n + im*I), S.Integers\n+        ).intersect(S.Reals) == FiniteSet(1)\n+    assert imageset(Lambda(n, n + im*(n + 1)*I), S.Naturals0\n+        ).intersect(S.Reals) == FiniteSet(1)\n+    assert imageset(Lambda(n, n/2 + im.expand()*I), S.Integers\n+        ).intersect(S.Reals) == ImageSet(Lambda(x, x/2), ConditionSet(\n+        n, Eq(n**2 - n/2 - S(1)/2, 0), S.Integers))\n+    assert imageset(Lambda(n, n/(1/n - 1) + im*(n + 1)*I), S.Integers\n+        ).intersect(S.Reals) == FiniteSet(S.Half)\n+    assert imageset(Lambda(n, n/(n - 6) +\n+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(\n+        S.Reals) == FiniteSet(-1)\n+    assert imageset(Lambda(n, n/(n**2 - 9) +\n+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(\n+        S.Reals) is S.EmptySet\n     s = ImageSet(\n         Lambda(n, -I*(I*(2*pi*n - pi/4) + log(Abs(sqrt(-I))))),\n         S.Integers)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/21596"}