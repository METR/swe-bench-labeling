{"instance_id": "matplotlib__matplotlib-26342", "score": "I", "diff": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 3f84250b64..68419c5a39 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1,439 +1,13 @@\n \"\"\"\n-Classes to support contour plotting and labelling for the Axes class.\n-\"\"\"\n-\n-import functools\n-import math\n-from numbers import Integral\n-\n-import numpy as np\n-from numpy import ma\n-\n-import matplotlib as mpl\n-from matplotlib import _api, _docstring\n-from matplotlib.backend_bases import MouseButton\n-from matplotlib.lines import Line2D\n-from matplotlib.path import Path\n-from matplotlib.text import Text\n-import matplotlib.ticker as ticker\n-import matplotlib.cm as cm\n-import matplotlib.colors as mcolors\n-import matplotlib.collections as mcoll\n-import matplotlib.font_manager as font_manager\n-import matplotlib.cbook as cbook\n-import matplotlib.patches as mpatches\n-import matplotlib.transforms as mtransforms\n-\n-\n-@_api.deprecated(\"3.7\", alternative=\"Text.set_transform_rotates_text\")\n-class ClabelText(Text):\n-    \"\"\"\n-    Unlike the ordinary text, the get_rotation returns an updated\n-    angle in the pixel coordinate assuming that the input rotation is\n-    an angle in data coordinate (or whatever transform set).\n-    \"\"\"\n-\n-    def get_rotation(self):\n-        new_angle, = self.get_transform().transform_angles(\n-            [super().get_rotation()], [self.get_position()])\n-        return new_angle\n-\n-\n-def _contour_labeler_event_handler(cs, inline, inline_spacing, event):\n-    canvas = cs.axes.figure.canvas\n-    is_button = event.name == \"button_press_event\"\n-    is_key = event.name == \"key_press_event\"\n-    # Quit (even if not in infinite mode; this is consistent with\n-    # MATLAB and sometimes quite useful, but will require the user to\n-    # test how many points were actually returned before using data).\n-    if (is_button and event.button == MouseButton.MIDDLE\n-            or is_key and event.key in [\"escape\", \"enter\"]):\n-        canvas.stop_event_loop()\n-    # Pop last click.\n-    elif (is_button and event.button == MouseButton.RIGHT\n-          or is_key and event.key in [\"backspace\", \"delete\"]):\n-        # Unfortunately, if one is doing inline labels, then there is currently\n-        # no way to fix the broken contour - once humpty-dumpty is broken, he\n-        # can't be put back together.  In inline mode, this does nothing.\n-        if not inline:\n-            cs.pop_label()\n-            canvas.draw()\n-    # Add new click.\n-    elif (is_button and event.button == MouseButton.LEFT\n-          # On macOS/gtk, some keys return None.\n-          or is_key and event.key is not None):\n-        if cs.axes.contains(event)[0]:\n-            cs.add_label_near(event.x, event.y, transform=False,\n-                              inline=inline, inline_spacing=inline_spacing)\n-            canvas.draw()\n-\n-\n-class ContourLabeler:\n-    \"\"\"Mixin to provide labelling capability to `.ContourSet`.\"\"\"\n-\n-    def clabel(self, levels=None, *,\n-               fontsize=None, inline=True, inline_spacing=5, fmt=None,\n-               colors=None, use_clabeltext=False, manual=False,\n-               rightside_up=True, zorder=None):\n-        \"\"\"\n-        Label a contour plot.\n-\n-        Adds labels to line contours in this `.ContourSet` (which inherits from\n-        this mixin class).\n-\n-        Parameters\n-        ----------\n-        levels : array-like, optional\n-            A list of level values, that should be labeled. The list must be\n-            a subset of ``cs.levels``. If not given, all levels are labeled.\n-\n-        fontsize : str or float, default: :rc:`font.size`\n-            Size in points or relative size e.g., 'smaller', 'x-large'.\n-            See `.Text.set_size` for accepted string values.\n-\n-        colors : color or colors or None, default: None\n-            The label colors:\n-\n-            - If *None*, the color of each label matches the color of\n-              the corresponding contour.\n-\n-            - If one string color, e.g., *colors* = 'r' or *colors* =\n-              'red', all labels will be plotted in this color.\n-\n-            - If a tuple of colors (string, float, RGB, etc), different labels\n-              will be plotted in different colors in the order specified.\n-\n-        inline : bool, default: True\n-            If ``True`` the underlying contour is removed where the label is\n-            placed.\n-\n-        inline_spacing : float, default: 5\n-            Space in pixels to leave on each side of label when placing inline.\n-\n-            This spacing will be exact for labels at locations where the\n-            contour is straight, less so for labels on curved contours.\n-\n-        fmt : `.Formatter` or str or callable or dict, optional\n-            How the levels are formatted:\n-\n-            - If a `.Formatter`, it is used to format all levels at once, using\n-              its `.Formatter.format_ticks` method.\n-            - If a str, it is interpreted as a %-style format string.\n-            - If a callable, it is called with one level at a time and should\n-              return the corresponding label.\n-            - If a dict, it should directly map levels to labels.\n-\n-            The default is to use a standard `.ScalarFormatter`.\n-\n-        manual : bool or iterable, default: False\n-            If ``True``, contour labels will be placed manually using\n-            mouse clicks. Click the first button near a contour to\n-            add a label, click the second button (or potentially both\n-            mouse buttons at once) to finish adding labels. The third\n-            button can be used to remove the last label added, but\n-            only if labels are not inline. Alternatively, the keyboard\n-            can be used to select label locations (enter to end label\n-            placement, delete or backspace act like the third mouse button,\n-            and any other key will select a label location).\n-\n-            *manual* can also be an iterable object of (x, y) tuples.\n-            Contour labels will be created as if mouse is clicked at each\n-            (x, y) position.\n-\n-        rightside_up : bool, default: True\n-            If ``True``, label rotations will always be plus\n-            or minus 90 degrees from level.\n-\n-        use_clabeltext : bool, default: False\n-            If ``True``, use `.Text.set_transform_rotates_text` to ensure that\n-            label rotation is updated whenever the axes aspect changes.\n-\n-        zorder : float or None, default: ``(2 + contour.get_zorder())``\n-            zorder of the contour labels.\n-\n-        Returns\n-        -------\n-        labels\n-            A list of `.Text` instances for the labels.\n         \"\"\"\n-\n-        # clabel basically takes the input arguments and uses them to\n-        # add a list of \"label specific\" attributes to the ContourSet\n-        # object.  These attributes are all of the form label* and names\n-        # should be fairly self explanatory.\n-        #\n-        # Once these attributes are set, clabel passes control to the\n-        # labels method (case of automatic label placement) or\n-        # `BlockingContourLabeler` (case of manual label placement).\n-\n-        if fmt is None:\n-            fmt = ticker.ScalarFormatter(useOffset=False)\n-            fmt.create_dummy_axis()\n-        self.labelFmt = fmt\n-        self._use_clabeltext = use_clabeltext\n-        # Detect if manual selection is desired and remove from argument list.\n-        self.labelManual = manual\n-        self.rightside_up = rightside_up\n-        self._clabel_zorder = 2 + self.get_zorder() if zorder is None else zorder\n-\n-        if levels is None:\n-            levels = self.levels\n-            indices = list(range(len(self.cvalues)))\n-        else:\n-            levlabs = list(levels)\n-            indices, levels = [], []\n-            for i, lev in enumerate(self.levels):\n-                if lev in levlabs:\n-                    indices.append(i)\n-                    levels.append(lev)\n-            if len(levels) < len(levlabs):\n-                raise ValueError(f\"Specified levels {levlabs} don't match \"\n-                                 f\"available levels {self.levels}\")\n-        self.labelLevelList = levels\n-        self.labelIndiceList = indices\n-\n-        self._label_font_props = font_manager.FontProperties(size=fontsize)\n-\n-        if colors is None:\n-            self.labelMappable = self\n-            self.labelCValueList = np.take(self.cvalues, self.labelIndiceList)\n-        else:\n-            cmap = mcolors.ListedColormap(colors, N=len(self.labelLevelList))\n-            self.labelCValueList = list(range(len(self.labelLevelList)))\n-            self.labelMappable = cm.ScalarMappable(cmap=cmap,\n-                                                   norm=mcolors.NoNorm())\n-\n-        self.labelXYs = []\n-\n-        if np.iterable(manual):\n-            for x, y in manual:\n-                self.add_label_near(x, y, inline, inline_spacing)\n-        elif manual:\n-            print('Select label locations manually using first mouse button.')\n-            print('End manual selection with second mouse button.')\n-            if not inline:\n-                print('Remove last label by clicking third mouse button.')\n-            mpl._blocking_input.blocking_input_loop(\n-                self.axes.figure, [\"button_press_event\", \"key_press_event\"],\n-                timeout=-1, handler=functools.partial(\n-                    _contour_labeler_event_handler,\n-                    self, inline, inline_spacing))\n-        else:\n-            self.labels(inline, inline_spacing)\n-\n-        return cbook.silent_list('text.Text', self.labelTexts)\n-\n-    @_api.deprecated(\"3.7\", alternative=\"cs.labelTexts[0].get_font()\")\n-    @property\n-    def labelFontProps(self):\n-        return self._label_font_props\n-\n-    @_api.deprecated(\"3.7\", alternative=(\n-        \"[cs.labelTexts[0].get_font().get_size()] * len(cs.labelLevelList)\"))\n-    @property\n-    def labelFontSizeList(self):\n-        return [self._label_font_props.get_size()] * len(self.labelLevelList)\n-\n-    @_api.deprecated(\"3.7\", alternative=\"cs.labelTexts\")\n-    @property\n-    def labelTextsList(self):\n-        return cbook.silent_list('text.Text', self.labelTexts)\n-\n-    def print_label(self, linecontour, labelwidth):\n-        \"\"\"Return whether a contour is long enough to hold a label.\"\"\"\n-        return (len(linecontour) > 10 * labelwidth\n-                or (len(linecontour)\n-                    and (np.ptp(linecontour, axis=0) > 1.2 * labelwidth).any()))\n-\n-    def too_close(self, x, y, lw):\n-        \"\"\"Return whether a label is already near this location.\"\"\"\n-        thresh = (1.2 * lw) ** 2\n-        return any((x - loc[0]) ** 2 + (y - loc[1]) ** 2 < thresh\n-                   for loc in self.labelXYs)\n-\n-    def _get_nth_label_width(self, nth):\n-        \"\"\"Return the width of the *nth* label, in pixels.\"\"\"\n-        fig = self.axes.figure\n-        renderer = fig._get_renderer()\n-        return (Text(0, 0,\n-                     self.get_text(self.labelLevelList[nth], self.labelFmt),\n-                     figure=fig, fontproperties=self._label_font_props)\n-                .get_window_extent(renderer).width)\n-\n-    @_api.deprecated(\"3.7\", alternative=\"Artist.set\")\n-    def set_label_props(self, label, text, color):\n-        \"\"\"Set the label properties - color, fontsize, text.\"\"\"\n-        label.set_text(text)\n-        label.set_color(color)\n-        label.set_fontproperties(self._label_font_props)\n-        label.set_clip_box(self.axes.bbox)\n-\n-    def get_text(self, lev, fmt):\n-        \"\"\"Get the text of the label.\"\"\"\n-        if isinstance(lev, str):\n-            return lev\n-        elif isinstance(fmt, dict):\n-            return fmt.get(lev, '%1.3f')\n-        elif callable(getattr(fmt, \"format_ticks\", None)):\n-            return fmt.format_ticks([*self.labelLevelList, lev])[-1]\n-        elif callable(fmt):\n-            return fmt(lev)\n-        else:\n-            return fmt % lev\n-\n-    def locate_label(self, linecontour, labelwidth):\n-        \"\"\"\n-        Find good place to draw a label (relatively flat part of the contour).\n-        \"\"\"\n-        ctr_size = len(linecontour)\n-        n_blocks = int(np.ceil(ctr_size / labelwidth)) if labelwidth > 1 else 1\n-        block_size = ctr_size if n_blocks == 1 else int(labelwidth)\n-        # Split contour into blocks of length ``block_size``, filling the last\n-        # block by cycling the contour start (per `np.resize` semantics).  (Due\n-        # to cycling, the index returned is taken modulo ctr_size.)\n-        xx = np.resize(linecontour[:, 0], (n_blocks, block_size))\n-        yy = np.resize(linecontour[:, 1], (n_blocks, block_size))\n-        yfirst = yy[:, :1]\n-        ylast = yy[:, -1:]\n-        xfirst = xx[:, :1]\n-        xlast = xx[:, -1:]\n-        s = (yfirst - yy) * (xlast - xfirst) - (xfirst - xx) * (ylast - yfirst)\n-        l = np.hypot(xlast - xfirst, ylast - yfirst)\n-        # Ignore warning that divide by zero throws, as this is a valid option\n-        with np.errstate(divide='ignore', invalid='ignore'):\n-            distances = (abs(s) / l).sum(axis=-1)\n-        # Labels are drawn in the middle of the block (``hbsize``) where the\n-        # contour is the closest (per ``distances``) to a straight line, but\n-        # not `too_close()` to a preexisting label.\n-        hbsize = block_size // 2\n-        adist = np.argsort(distances)\n-        # If all candidates are `too_close()`, go back to the straightest part\n-        # (``adist[0]``).\n-        for idx in np.append(adist, adist[0]):\n-            x, y = xx[idx, hbsize], yy[idx, hbsize]\n-            if not self.too_close(x, y, labelwidth):\n-                break\n-        return x, y, (idx * block_size + hbsize) % ctr_size\n-\n-    def _split_path_and_get_label_rotation(self, path, idx, screen_pos, lw, spacing=5):\n-        \"\"\"\n-        Prepare for insertion of a label at index *idx* of *path*.\n+        Set the paths of the contour set.\n \n         Parameters\n         ----------\n-        path : Path\n-            The path where the label will be inserted, in data space.\n-        idx : int\n-            The vertex index after which the label will be inserted.\n-        screen_pos : (float, float)\n-            The position where the label will be inserted, in screen space.\n-        lw : float\n-            The label width, in screen space.\n-        spacing : float\n-            Extra spacing around the label, in screen space.\n-\n-        Returns\n-        -------\n-        path : Path\n-            The path, broken so that the label can be drawn over it.\n-        angle : float\n-            The rotation of the label.\n-\n-        Notes\n-        -----\n-        Both tasks are done together to avoid calculating path lengths multiple times,\n-        which is relatively costly.\n-\n-        The method used here involves computing the path length along the contour in\n-        pixel coordinates and then looking (label width / 2) away from central point to\n-        determine rotation and then to break contour if desired.  The extra spacing is\n-        taken into account when breaking the path, but not when computing the angle.\n+        paths : list of Path\n+            The new paths for the contour set.\n         \"\"\"\n-        if hasattr(self, \"_old_style_split_collections\"):\n-            del self._old_style_split_collections  # Invalidate them.\n-\n-        xys = path.vertices\n-        codes = path.codes\n-\n-        # Insert a vertex at idx/pos (converting back to data space), if there isn't yet\n-        # a vertex there.  With infinite precision one could also always insert the\n-        # extra vertex (it will get masked out by the label below anyways), but floating\n-        # point inaccuracies (the point can have undergone a data->screen->data\n-        # transform loop) can slightly shift the point and e.g. shift the angle computed\n-        # below from exactly zero to nonzero.\n-        pos = self.get_transform().inverted().transform(screen_pos)\n-        if not np.allclose(pos, xys[idx]):\n-            xys = np.insert(xys, idx, pos, axis=0)\n-            codes = np.insert(codes, idx, Path.LINETO)\n-\n-        # Find the connected component where the label will be inserted.  Note that a\n-        # path always starts with a MOVETO, and we consider there's an implicit\n-        # MOVETO (closing the last path) at the end.\n-        movetos = (codes == Path.MOVETO).nonzero()[0]\n-        start = movetos[movetos <= idx][-1]\n-        try:\n-            stop = movetos[movetos > idx][0]\n-        except IndexError:\n-            stop = len(codes)\n-\n-        # Restrict ourselves to the connected component.\n-        cc_xys = xys[start:stop]\n-        idx -= start\n-\n-        # If the path is closed, rotate it s.t. it starts at the label.\n-        is_closed_path = codes[stop - 1] == Path.CLOSEPOLY\n-        if is_closed_path:\n-            cc_xys = np.concatenate([xys[idx:-1], xys[:idx+1]])\n-            idx = 0\n-\n-        # Like np.interp, but additionally vectorized over fp.\n-        def interp_vec(x, xp, fp): return [np.interp(x, xp, col) for col in fp.T]\n-\n-        # Use cumulative path lengths (\"cpl\") as curvilinear coordinate along contour.\n-        screen_xys = self.get_transform().transform(cc_xys)\n-        path_cpls = np.insert(\n-            np.cumsum(np.hypot(*np.diff(screen_xys, axis=0).T)), 0, 0)\n-        path_cpls -= path_cpls[idx]\n-\n-        # Use linear interpolation to get end coordinates of label.\n-        target_cpls = np.array([-lw/2, lw/2])\n-        if is_closed_path:  # For closed paths, target from the other end.\n-            target_cpls[0] += (path_cpls[-1] - path_cpls[0])\n-        (sx0, sx1), (sy0, sy1) = interp_vec(target_cpls, path_cpls, screen_xys)\n-        angle = np.rad2deg(np.arctan2(sy1 - sy0, sx1 - sx0))  # Screen space.\n-        if self.rightside_up:  # Fix angle so text is never upside-down\n-            angle = (angle + 90) % 180 - 90\n-\n-        target_cpls += [-spacing, +spacing]  # Expand range by spacing.\n-\n-        # Get indices near points of interest; use -1 as out of bounds marker.\n-        i0, i1 = np.interp(target_cpls, path_cpls, range(len(path_cpls)),\n-                           left=-1, right=-1)\n-        i0 = math.floor(i0)\n-        i1 = math.ceil(i1)\n-        (x0, x1), (y0, y1) = interp_vec(target_cpls, path_cpls, cc_xys)\n-\n-        # Actually break contours (dropping zero-len parts).\n-        new_xy_blocks = []\n-        new_code_blocks = []\n-        if is_closed_path:\n-            if i0 != -1 and i1 != -1:\n-                new_xy_blocks.extend([[(x1, y1)], cc_xys[i1:i0+1], [(x0, y0)]])\n-                new_code_blocks.extend([[Path.MOVETO], [Path.LINETO] * (i0 + 2 - i1)])\n-        else:\n-            if i0 != -1:\n-                new_xy_blocks.extend([cc_xys[:i0 + 1], [(x0, y0)]])\n-                new_code_blocks.extend([[Path.MOVETO], [Path.LINETO] * (i0 + 1)])\n-            if i1 != -1:\n-                new_xy_blocks.extend([[(x1, y1)], cc_xys[i1:]])\n-                new_code_blocks.extend([\n-                    [Path.MOVETO], [Path.LINETO] * (len(cc_xys) - i1)])\n-\n-        # Back to the full path.\n-        xys = np.concatenate([xys[:start], *new_xy_blocks, xys[stop:]])\n-        codes = np.concatenate([codes[:start], *new_code_blocks, codes[stop:]])\n-\n-        return angle, Path(xys, codes)\n+        self._paths = paths\n \n     @_api.deprecated(\"3.8\")\n     def calc_label_rot_and_inline(self, slc, ind, lw, lc=None, spacing=5):\n@@ -943,6 +517,17 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n     alpha = property(lambda self: self.get_alpha())\n     linestyles = property(lambda self: self._orig_linestyles)\n \n+    def set_paths(self, paths):\n+        \"\"\"\n+        Set the paths of the contour set.\n+\n+        Parameters\n+        ----------\n+        paths : list of Path\n+            The new paths for the contour set.\n+        \"\"\"\n+        self._paths = paths\n+\n     @_api.deprecated(\"3.8\")\n     @property\n     def collections(self):\n@@ -1379,6 +964,8 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n \n         return idx_level_min, idx_vtx_min, proj_min\n \n+        self._paths = paths\n+\n     @_api.deprecated(\"3.8\")\n     def find_nearest_contour(self, x, y, indices=None, pixel=True):\n         \"\"\"\n", "gold_standard_diff": "diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\nindex da8f5bc8ce14..cb25ee022bfb 100644\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -207,7 +207,8 @@ def get_paths(self):\n         return self._paths\n \n     def set_paths(self, paths):\n-        raise NotImplementedError\n+        self._paths = paths\n+        self.stale = True\n \n     def get_transforms(self):\n         return self._transforms\n@@ -1001,10 +1002,6 @@ def __init__(self, paths, sizes=None, **kwargs):\n         self.set_sizes(sizes)\n         self.stale = True\n \n-    def set_paths(self, paths):\n-        self._paths = paths\n-        self.stale = True\n-\n     def get_paths(self):\n         return self._paths\n \ndiff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex b6ddb2830a44..006c3e81b013 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -11,7 +11,7 @@\n from matplotlib import pyplot as plt, rc_context, ticker\n from matplotlib.colors import LogNorm, same_color\n import matplotlib.patches as mpatches\n-from matplotlib.testing.decorators import image_comparison\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n import pytest\n \n \n@@ -100,6 +100,14 @@ def test_contour_Nlevels():\n     assert (cs1.levels == cs2.levels).all()\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+\n @pytest.mark.parametrize(\"split_collections\", [False, True])\n @image_comparison(['contour_manual_labels'], remove_text=True, style='mpl20', tol=0.26)\n def test_contour_manual_labels(split_collections):\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/26342"}