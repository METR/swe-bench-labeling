{"instance_id": "django__django-12308", "score": "C", "diff": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..87b6436925 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,13 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField):\n+        # Use the JSONField's form field prepare_value method to properly format the value\n+        try:\n+            return field.formfield().prepare_value(value)\n+        except Exception:\n+            # If there's any issue, fall back to the default behavior\n+            return display_for_value(value, empty_value_display)\n     else:\n         return display_for_value(value, empty_value_display)\n \ndiff --git a/test_admin_readonly_json.py b/test_admin_readonly_json.py\nnew file mode 100644\nindex 0000000000..36893f8f01\n--- /dev/null\n+++ b/test_admin_readonly_json.py\n@@ -0,0 +1,103 @@\n+#!/usr/bin/env python\n+\"\"\"Test JSONField display in admin readonly fields\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+BASE_DIR = os.path.dirname(os.path.abspath(__file__))\n+\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': os.path.join(BASE_DIR, 'test.db'),\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.admin',\n+        'django.contrib.messages',\n+        'django.contrib.sessions',\n+        'test_app',\n+    ],\n+    MIDDLEWARE=[\n+        'django.contrib.sessions.middleware.SessionMiddleware',\n+        'django.contrib.auth.middleware.AuthenticationMiddleware',\n+        'django.contrib.messages.middleware.MessageMiddleware',\n+    ],\n+    ROOT_URLCONF='test_urls',\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    }],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+# Create test app models\n+from django.db import models\n+from django.contrib import admin\n+from django.urls import path, include\n+import json\n+\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    data = models.JSONField(default=dict)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+    \n+    def __str__(self):\n+        return self.name\n+\n+\n+# Admin registration\n+@admin.register(TestModel)\n+class TestModelAdmin(admin.ModelAdmin):\n+    list_display = ['name', 'data']\n+    readonly_fields = ['data']  # This is the key - make JSONField readonly\n+\n+\n+# URL configuration\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+]\n+\n+if __name__ == '__main__':\n+    from django.core.management import execute_from_command_line\n+    \n+    # Create the database tables\n+    execute_from_command_line(['manage.py', 'migrate', '--run-syncdb'])\n+    \n+    # Create a test instance\n+    obj = TestModel.objects.create(\n+        name='Test Object',\n+        data={'foo': 'bar', 'nested': {'key': 'value'}}\n+    )\n+    \n+    print(\"Created test object with data:\", obj.data)\n+    print(\"\\nNow let's check how it's displayed in admin...\")\n+    \n+    # Test the display\n+    from django.contrib.admin.utils import display_for_field\n+    field = TestModel._meta.get_field('data')\n+    result = display_for_field(obj.data, field, '-')\n+    \n+    expected_json = json.dumps({'foo': 'bar', 'nested': {'key': 'value'}})\n+    print(f\"\\nField value displayed as: {result}\")\n+    print(f\"Expected JSON: {expected_json}\")\n+    print(f\"Is it valid JSON? {result == expected_json}\")\ndiff --git a/test_json_display_patch.py b/test_json_display_patch.py\nnew file mode 100644\nindex 0000000000..5c597f8441\n--- /dev/null\n+++ b/test_json_display_patch.py\n@@ -0,0 +1,86 @@\n+#!/usr/bin/env python\n+\"\"\"Test that our JSONField display fix works with Django's test framework\"\"\"\n+import os\n+import sys\n+import django\n+from django.test import TestCase\n+from django.contrib.admin.utils import display_for_field\n+from django.db import models\n+from django.forms.fields import InvalidJSONInput\n+import json\n+\n+# Configure Django for testing\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_settings'\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+django.setup()\n+\n+\n+class JSONFieldDisplayTest(TestCase):\n+    \"\"\"Test display_for_field properly formats JSONField values\"\"\"\n+\n+    def setUp(self):\n+        class TestModel(models.Model):\n+            data = models.JSONField()\n+            \n+            class Meta:\n+                app_label = 'test'\n+        \n+        self.field = TestModel._meta.get_field('data')\n+        self.empty_value = '-empty-'\n+\n+    def test_dict_display(self):\n+        \"\"\"Dict values should be displayed as valid JSON\"\"\"\n+        test_dict = {\"foo\": \"bar\", \"nested\": {\"key\": \"value\"}}\n+        result = display_for_field(test_dict, self.field, self.empty_value)\n+        self.assertEqual(result, json.dumps(test_dict))\n+\n+    def test_list_display(self):\n+        \"\"\"List values should be displayed as valid JSON\"\"\"\n+        test_list = [1, 2, {\"key\": \"value\"}]\n+        result = display_for_field(test_list, self.field, self.empty_value)\n+        self.assertEqual(result, json.dumps(test_list))\n+\n+    def test_null_display(self):\n+        \"\"\"None values should show empty value display\"\"\"\n+        result = display_for_field(None, self.field, self.empty_value)\n+        self.assertEqual(result, self.empty_value)\n+\n+    def test_invalid_json_input_display(self):\n+        \"\"\"InvalidJSONInput should be displayed as-is\"\"\"\n+        invalid_input = InvalidJSONInput(\"invalid json\")\n+        result = display_for_field(invalid_input, self.field, self.empty_value)\n+        self.assertEqual(result, \"invalid json\")\n+\n+    def test_string_display(self):\n+        \"\"\"String values should be displayed as JSON strings\"\"\"\n+        test_string = \"just a string\"\n+        result = display_for_field(test_string, self.field, self.empty_value)\n+        self.assertEqual(result, json.dumps(test_string))\n+\n+    def test_number_display(self):\n+        \"\"\"Number values should be displayed as JSON numbers\"\"\"\n+        result = display_for_field(42, self.field, self.empty_value)\n+        self.assertEqual(result, \"42\")\n+\n+    def test_boolean_display(self):\n+        \"\"\"Boolean values should be displayed as JSON booleans\"\"\"\n+        result = display_for_field(True, self.field, self.empty_value)\n+        self.assertEqual(result, \"true\")\n+        result = display_for_field(False, self.field, self.empty_value)\n+        self.assertEqual(result, \"false\")\n+\n+    def test_empty_containers(self):\n+        \"\"\"Empty dict and list should be displayed correctly\"\"\"\n+        result = display_for_field({}, self.field, self.empty_value)\n+        self.assertEqual(result, \"{}\")\n+        result = display_for_field([], self.field, self.empty_value)\n+        self.assertEqual(result, \"[]\")\n+\n+\n+if __name__ == '__main__':\n+    from django.test.utils import get_runner\n+    from django.conf import settings\n+\n+    TestRunner = get_runner(settings)\n+    test_runner = TestRunner(verbosity=2)\n+    test_runner.run_tests([\"__main__.JSONFieldDisplayTest\"])\ndiff --git a/test_json_edge_cases.py b/test_json_edge_cases.py\nnew file mode 100644\nindex 0000000000..b29dd74d21\n--- /dev/null\n+++ b/test_json_edge_cases.py\n@@ -0,0 +1,107 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.admin',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+# Now test edge cases\n+from django.contrib.admin.utils import display_for_field\n+from django.db import models\n+import json\n+\n+# Create a test model with JSONField with custom encoder/decoder\n+class CustomEncoder(json.JSONEncoder):\n+    def default(self, obj):\n+        if isinstance(obj, set):\n+            return list(obj)\n+        return super().default(obj)\n+\n+class TestModel(models.Model):\n+    data = models.JSONField()\n+    custom_data = models.JSONField(encoder=CustomEncoder)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Test the edge cases\n+field = TestModel._meta.get_field('data')\n+custom_field = TestModel._meta.get_field('custom_data')\n+\n+# Test case 1: Empty dict\n+test_dict = {}\n+result = display_for_field(test_dict, field, '-')\n+print(f\"Empty dict test - Output: {result}\")\n+print(f\"Empty dict test - Expected: {{}}\")\n+print()\n+\n+# Test case 2: Empty list\n+test_list = []\n+result = display_for_field(test_list, field, '-')\n+print(f\"Empty list test - Output: {result}\")\n+print(f\"Empty list test - Expected: []\")\n+print()\n+\n+# Test case 3: Nested complex structure\n+test_complex = {\n+    \"array\": [1, 2, 3],\n+    \"object\": {\"nested\": True},\n+    \"string\": \"value\",\n+    \"number\": 42,\n+    \"boolean\": True,\n+    \"null\": None\n+}\n+result = display_for_field(test_complex, field, '-')\n+print(f\"Complex test - Output: {result}\")\n+print(f\"Complex test - Expected: {json.dumps(test_complex)}\")\n+print()\n+\n+# Test case 4: String values (should remain strings)\n+test_string = \"just a string\"\n+result = display_for_field(test_string, field, '-')\n+print(f\"String test - Output: {result}\")\n+print(f\"String test - Expected: \\\"just a string\\\"\")\n+print()\n+\n+# Test case 5: Number values\n+test_number = 42\n+result = display_for_field(test_number, field, '-')\n+print(f\"Number test - Output: {result}\")\n+print(f\"Number test - Expected: 42\")\n+print()\n+\n+# Test case 6: Boolean values\n+test_bool = True\n+result = display_for_field(test_bool, field, '-')\n+print(f\"Boolean test - Output: {result}\")\n+print(f\"Boolean test - Expected: true\")\n+print()\n+\n+# Test case 7: Custom encoder field\n+test_set_data = {\"items\": {1, 2, 3}}  # This would normally fail in JSON\n+try:\n+    # First convert the set to list using custom encoder\n+    test_set_data_converted = {\"items\": [1, 2, 3]}\n+    result = display_for_field(test_set_data_converted, custom_field, '-')\n+    print(f\"Custom encoder test - Output: {result}\")\n+    print(f\"Custom encoder test - Expected: {json.dumps(test_set_data_converted)}\")\n+except Exception as e:\n+    print(f\"Custom encoder test - Error: {e}\")\ndiff --git a/test_json_readonly.py b/test_json_readonly.py\nnew file mode 100644\nindex 0000000000..8c2c2f8229\n--- /dev/null\n+++ b/test_json_readonly.py\n@@ -0,0 +1,68 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.admin',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+# Now test the issue\n+from django.contrib.admin.utils import display_for_field\n+from django.db import models\n+from django.forms.fields import InvalidJSONInput\n+import json\n+\n+# Create a test model with JSONField\n+class TestModel(models.Model):\n+    data = models.JSONField()\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Test the current behavior\n+field = TestModel._meta.get_field('data')\n+\n+# Test case 1: dict value\n+test_dict = {\"foo\": \"bar\", \"nested\": {\"key\": \"value\"}}\n+result = display_for_field(test_dict, field, '-')\n+print(f\"Dict test - Input: {json.dumps(test_dict)}\")\n+print(f\"Dict test - Current output: {result}\")\n+print(f\"Dict test - Expected output: {json.dumps(test_dict)}\")\n+print()\n+\n+# Test case 2: list value\n+test_list = [1, 2, {\"key\": \"value\"}]\n+result = display_for_field(test_list, field, '-')\n+print(f\"List test - Input: {json.dumps(test_list)}\")\n+print(f\"List test - Current output: {result}\")\n+print(f\"List test - Expected output: {json.dumps(test_list)}\")\n+print()\n+\n+# Test case 3: None value\n+result = display_for_field(None, field, '-')\n+print(f\"None test - Current output: {result}\")\n+print(f\"None test - Expected output: -\")\n+print()\n+\n+# Test case 4: InvalidJSONInput\n+invalid_input = InvalidJSONInput(\"invalid json\")\n+result = display_for_field(invalid_input, field, '-')\n+print(f\"InvalidJSONInput test - Current output: {result}\")\n+print(f\"InvalidJSONInput test - Expected output: invalid json\")\ndiff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex 463ba9556d..5d8a9385a0 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -197,6 +197,38 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(12345, models.IntegerField(), self.empty_value)\n         self.assertEqual(display_value, '12,345')\n \n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test that JSONField values are displayed as valid JSON, not Python repr.\n+        \"\"\"\n+        from django.forms.fields import InvalidJSONInput\n+        import json\n+        \n+        # Test dict display\n+        test_dict = {\"foo\": \"bar\", \"nested\": {\"key\": \"value\"}}\n+        display_value = display_for_field(test_dict, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, json.dumps(test_dict))\n+        \n+        # Test list display\n+        test_list = [1, 2, {\"key\": \"value\"}]\n+        display_value = display_for_field(test_list, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, json.dumps(test_list))\n+        \n+        # Test None value\n+        display_value = display_for_field(None, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, self.empty_value)\n+        \n+        # Test InvalidJSONInput\n+        invalid_input = InvalidJSONInput(\"invalid json\")\n+        display_value = display_for_field(invalid_input, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, \"invalid json\")\n+        \n+        # Test empty containers\n+        display_value = display_for_field({}, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, \"{}\")\n+        display_value = display_for_field([], models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, \"[]\")\n+\n     def test_list_display_for_value(self):\n         display_value = display_for_value([1, 2, 3], self.empty_value)\n         self.assertEqual(display_value, '1, 2, 3')\n", "gold_standard_diff": "From 675ce4dd35702ce353006611ba30799c0c4b015f Mon Sep 17 00:00:00 2001\nFrom: dbxnr <dbxnr@users.noreply.github.com>\nDate: Fri, 8 May 2020 08:44:33 +0200\nSubject: [PATCH 1/2] Refs #31157 -- Added tests for display_for_field() with\n empty JSONField.\n\n---\n tests/admin_utils/tests.py | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex 463ba9556d49..0ce18be0946a 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,9 @@ def test_null_display_for_field(self):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+        display_value = display_for_field(None, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, self.empty_value)\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n\nFrom fc0f7f6c152766c92a95c74a02cc6fab79440ed8 Mon Sep 17 00:00:00 2001\nFrom: dbxnr <dbxnr@users.noreply.github.com>\nDate: Fri, 8 May 2020 09:25:54 +0200\nSubject: [PATCH 2/2] Fixed #31157 -- Fixed displaying read-only JSONField\n values in admin.\n\n---\n django/contrib/admin/utils.py |  5 +++++\n tests/admin_utils/tests.py    | 14 ++++++++++++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f01735..021a086e6598 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,11 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField) and value:\n+        try:\n+            return field.get_prep_value(value)\n+        except TypeError:\n+            return display_for_value(value, empty_value_display)\n     else:\n         return display_for_value(value, empty_value_display)\n \ndiff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex 0ce18be0946a..cf0d3e064e3f 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -179,6 +179,20 @@ def test_null_display_for_field(self):\n         display_value = display_for_field(None, models.JSONField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12308"}