{"instance_id": "django__django-14315", "score": "I", "diff": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab65a8..351829ff3e 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -36,21 +36,23 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [dbname]\n         args.extend(parameters)\n \n-        env = {}\n-        if passwd:\n-            env['PGPASSWORD'] = str(passwd)\n-        if service:\n-            env['PGSERVICE'] = str(service)\n-        if sslmode:\n-            env['PGSSLMODE'] = str(sslmode)\n-        if sslrootcert:\n-            env['PGSSLROOTCERT'] = str(sslrootcert)\n-        if sslcert:\n-            env['PGSSLCERT'] = str(sslcert)\n-        if sslkey:\n-            env['PGSSLKEY'] = str(sslkey)\n-        if passfile:\n-            env['PGPASSFILE'] = str(passfile)\n+        env = None\n+        if any([passwd, service, sslmode, sslrootcert, sslcert, sslkey, passfile]):\n+            env = {}\n+            if passwd:\n+                env['PGPASSWORD'] = str(passwd)\n+            if service:\n+                env['PGSERVICE'] = str(service)\n+            if sslmode:\n+                env['PGSSLMODE'] = str(sslmode)\n+            if sslrootcert:\n+                env['PGSSLROOTCERT'] = str(sslrootcert)\n+            if sslcert:\n+                env['PGSSLCERT'] = str(sslcert)\n+            if sslkey:\n+                env['PGSSLKEY'] = str(sslkey)\n+            if passfile:\n+                env['PGPASSFILE'] = str(passfile)\n         return args, env\n \n     def runshell(self, parameters):\n", "gold_standard_diff": "From 6e742dabc95b00ba896434293556adeb4dbaee8a Mon Sep 17 00:00:00 2001\nFrom: Konstantin Alekseev <mail@kalekseev.com>\nDate: Mon, 26 Apr 2021 15:19:13 +0300\nSubject: [PATCH] =?UTF-8?q?Fixed=20#32687=20--=20Restored=20passing=20proc?=\n =?UTF-8?q?ess=E2=80=99=20environment=20to=20underlying=20tool=20in=20dbsh?=\n =?UTF-8?q?ell=20on=20PostgreSQL.?=\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nRegression in bbe6fbb8768e8fb1aecb96d51c049d7ceaf802d3.\n---\n django/db/backends/base/client.py       |  3 +--\n django/db/backends/postgresql/client.py |  2 +-\n docs/releases/3.2.1.txt                 |  3 +++\n tests/backends/base/test_client.py      | 14 ++++++++++++++\n tests/dbshell/test_postgresql.py        |  4 ++--\n 5 files changed, 21 insertions(+), 5 deletions(-)\n\ndiff --git a/django/db/backends/base/client.py b/django/db/backends/base/client.py\nindex 339f1e863cad..8aca821fd208 100644\n--- a/django/db/backends/base/client.py\n+++ b/django/db/backends/base/client.py\n@@ -21,6 +21,5 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n \n     def runshell(self, parameters):\n         args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)\n-        if env:\n-            env = {**os.environ, **env}\n+        env = {**os.environ, **env} if env else None\n         subprocess.run(args, env=env, check=True)\ndiff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab65a830..0effcc44e61d 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -51,7 +51,7 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n             env['PGSSLKEY'] = str(sslkey)\n         if passfile:\n             env['PGPASSFILE'] = str(passfile)\n-        return args, env\n+        return args, (env or None)\n \n     def runshell(self, parameters):\n         sigint_handler = signal.getsignal(signal.SIGINT)\ndiff --git a/docs/releases/3.2.1.txt b/docs/releases/3.2.1.txt\nindex 83d317bc7eb0..1c8776a0bfb7 100644\n--- a/docs/releases/3.2.1.txt\n+++ b/docs/releases/3.2.1.txt\n@@ -65,3 +65,6 @@ Bugfixes\n   admin changelist now uses ``Exists()`` instead ``QuerySet.distinct()``\n   because calling ``delete()`` after ``distinct()`` is not allowed in Django\n   3.2 to address a data loss possibility.\n+\n+* Fixed a regression in Django 3.2 where the calling process environment would\n+  not be passed to the ``dbshell`` command on PostgreSQL (:ticket:`32687`).\ndiff --git a/tests/backends/base/test_client.py b/tests/backends/base/test_client.py\nindex 4573bbe97bfb..d9e5cc8883c5 100644\n--- a/tests/backends/base/test_client.py\n+++ b/tests/backends/base/test_client.py\n@@ -1,3 +1,5 @@\n+from unittest import mock\n+\n from django.db import connection\n from django.db.backends.base.client import BaseDatabaseClient\n from django.test import SimpleTestCase\n@@ -14,3 +16,15 @@ def test_settings_to_cmd_args_env(self):\n         )\n         with self.assertRaisesMessage(NotImplementedError, msg):\n             self.client.settings_to_cmd_args_env(None, None)\n+\n+    def test_runshell_use_environ(self):\n+        for env in [None, {}]:\n+            with self.subTest(env=env):\n+                with mock.patch('subprocess.run') as run:\n+                    with mock.patch.object(\n+                        BaseDatabaseClient,\n+                        'settings_to_cmd_args_env',\n+                        return_value=([], env),\n+                    ):\n+                        self.client.runshell(None)\n+                    run.assert_called_once_with([], env=None, check=True)\ndiff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex a96acac6f12a..6aaf6c8f7716 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -39,7 +39,7 @@ def test_nopass(self):\n                 'PORT': '444',\n             }), (\n                 ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n-                {},\n+                None,\n             )\n         )\n \n@@ -134,7 +134,7 @@ def test_accent(self):\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({'NAME': 'dbname'}, ['--help']),\n-            (['psql', 'dbname', '--help'], {}),\n+            (['psql', 'dbname', '--help'], None),\n         )\n \n     @skipUnless(connection.vendor == 'postgresql', 'Requires a PostgreSQL connection')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14315"}