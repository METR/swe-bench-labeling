{"instance_id": "sphinx-doc__sphinx-9602", "score": "I", "diff": "Agent patch could not be decoded due to having a binary input.", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex c7e781de868..33487cacaf3 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -40,6 +40,7 @@ Bugs fixed\n * #9267: html theme: CSS and JS files added by theme were loaded twice\n * #9585: py domain: ``:type:`` option for :rst:dir:`py:property` directive does\n   not create a hyperlink\n+* #9576: py domain: Literal typehint was converted to a cross reference\n * #9535 comment: C++, fix parsing of defaulted function parameters that are\n   function pointers.\n * #9564: smartquotes: don't adjust typography for text with\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 9875a9f4b65..ee93edfce7b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -123,7 +123,7 @@ def unparse(node: ast.AST) -> List[Node]:\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n             else:\n-                return [nodes.Text(node.value)]\n+                return [nodes.Text(repr(node.value))]\n         elif isinstance(node, ast.Expr):\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n@@ -149,6 +149,12 @@ def unparse(node: ast.AST) -> List[Node]:\n             result.append(addnodes.desc_sig_punctuation('', '['))\n             result.extend(unparse(node.slice))\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n+\n+            # Wrap the Text nodes inside brackets by literal node if the subscript is a Literal\n+            if result[0] in ('Literal', 'typing.Literal'):\n+                for i, subnode in enumerate(result[1:], start=1):\n+                    if isinstance(subnode, nodes.Text):\n+                        result[i] = nodes.literal('', '', subnode)\n             return result\n         elif isinstance(node, ast.Tuple):\n             if node.elts:\n@@ -179,7 +185,9 @@ def unparse(node: ast.AST) -> List[Node]:\n         tree = ast_parse(annotation)\n         result = unparse(tree)\n         for i, node in enumerate(result):\n-            if isinstance(node, nodes.Text) and node.strip():\n+            if isinstance(node, nodes.literal):\n+                result[i] = node[0]\n+            elif isinstance(node, nodes.Text) and node.strip():\n                 result[i] = type_to_xref(str(node), env)\n         return result\n     except SyntaxError:\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 067febcf495..b111e5276c0 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -342,6 +342,27 @@ def test_parse_annotation(app):\n     assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 8), reason='python 3.8+ is required.')\n+def test_parse_annotation_Literal(app):\n+    doctree = _parse_annotation(\"Literal[True, False]\", app.env)\n+    assert_node(doctree, ([pending_xref, \"Literal\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          \"True\",\n+                          [desc_sig_punctuation, \", \"],\n+                          \"False\",\n+                          [desc_sig_punctuation, \"]\"]))\n+\n+    doctree = _parse_annotation(\"typing.Literal[0, 1, 'abc']\", app.env)\n+    assert_node(doctree, ([pending_xref, \"typing.Literal\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          \"0\",\n+                          [desc_sig_punctuation, \", \"],\n+                          \"1\",\n+                          [desc_sig_punctuation, \", \"],\n+                          \"'abc'\",\n+                          [desc_sig_punctuation, \"]\"]))\n+\n+\n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9602"}