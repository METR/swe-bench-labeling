From abbdd3a622982e8c9a85e73335bdb8577c80ed85 Mon Sep 17 00:00:00 2001
From: Kevin Michel <kevin.michel@sereema.com>
Date: Fri, 28 Aug 2020 09:44:40 +0200
Subject: [PATCH 1/5] Added tests for cache middlewares constructors.

---
 tests/cache/tests.py | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/tests/cache/tests.py b/tests/cache/tests.py
index 865f0cefc803..c26183f5b255 100644
--- a/tests/cache/tests.py
+++ b/tests/cache/tests.py
@@ -2083,6 +2083,7 @@ def test_constructor(self):
         self.assertEqual(middleware.cache_timeout, 30)
         self.assertEqual(middleware.key_prefix, 'middlewareprefix')
         self.assertEqual(middleware.cache_alias, 'other')
+        self.assertEqual(middleware.cache, self.other_cache)
 
         # If more arguments are being passed in construction, it's being used
         # as a decorator. First, test with "defaults":
@@ -2092,6 +2093,7 @@ def test_constructor(self):
         self.assertEqual(as_view_decorator.key_prefix, '')
         # Value of DEFAULT_CACHE_ALIAS from django.core.cache
         self.assertEqual(as_view_decorator.cache_alias, 'default')
+        self.assertEqual(as_view_decorator.cache, self.default_cache)
 
         # Next, test with custom values:
         as_view_decorator_with_custom = CacheMiddleware(
@@ -2101,6 +2103,21 @@ def test_constructor(self):
         self.assertEqual(as_view_decorator_with_custom.cache_timeout, 60)
         self.assertEqual(as_view_decorator_with_custom.key_prefix, 'foo')
         self.assertEqual(as_view_decorator_with_custom.cache_alias, 'other')
+        self.assertEqual(as_view_decorator_with_custom.cache, self.other_cache)
+
+    def test_update_cache_middleware_constructor(self):
+        middleware = UpdateCacheMiddleware(empty_response)
+        self.assertEqual(middleware.cache_timeout, 30)
+        self.assertIsNone(middleware.page_timeout)
+        self.assertEqual(middleware.key_prefix, 'middlewareprefix')
+        self.assertEqual(middleware.cache_alias, 'other')
+        self.assertEqual(middleware.cache, self.other_cache)
+
+    def test_fetch_cache_middleware_constructor(self):
+        middleware = FetchFromCacheMiddleware(empty_response)
+        self.assertEqual(middleware.key_prefix, 'middlewareprefix')
+        self.assertEqual(middleware.cache_alias, 'other')
+        self.assertEqual(middleware.cache, self.other_cache)
 
     def test_middleware(self):
         middleware = CacheMiddleware(hello_world_view)

From 68d7cf4054e4d53d77270659113520540cc7cadc Mon Sep 17 00:00:00 2001
From: Kevin Michel <kevin.michel@sereema.com>
Date: Fri, 28 Aug 2020 11:13:05 +0200
Subject: [PATCH 2/5] Refs #26601 -- Added various middlewares tests for
 deprecation of passing None as get_response.

---
 tests/deprecation/test_middleware_mixin.py | 62 +++++++++++++++-------
 tests/runtests.py                          |  9 ++--
 2 files changed, 49 insertions(+), 22 deletions(-)

diff --git a/tests/deprecation/test_middleware_mixin.py b/tests/deprecation/test_middleware_mixin.py
index c90aeb836091..3e4260b42238 100644
--- a/tests/deprecation/test_middleware_mixin.py
+++ b/tests/deprecation/test_middleware_mixin.py
@@ -2,14 +2,29 @@
 
 from asgiref.sync import async_to_sync
 
+from django.contrib.admindocs.middleware import XViewMiddleware
+from django.contrib.auth.middleware import (
+    AuthenticationMiddleware, RemoteUserMiddleware,
+)
+from django.contrib.flatpages.middleware import FlatpageFallbackMiddleware
+from django.contrib.messages.middleware import MessageMiddleware
+from django.contrib.redirects.middleware import RedirectFallbackMiddleware
 from django.contrib.sessions.middleware import SessionMiddleware
+from django.contrib.sites.middleware import CurrentSiteMiddleware
 from django.db import connection
 from django.http.request import HttpRequest
 from django.http.response import HttpResponse
 from django.middleware.cache import (
     CacheMiddleware, FetchFromCacheMiddleware, UpdateCacheMiddleware,
 )
-from django.middleware.common import CommonMiddleware
+from django.middleware.clickjacking import XFrameOptionsMiddleware
+from django.middleware.common import (
+    BrokenLinkEmailsMiddleware, CommonMiddleware,
+)
+from django.middleware.csrf import CsrfViewMiddleware
+from django.middleware.gzip import GZipMiddleware
+from django.middleware.http import ConditionalGetMiddleware
+from django.middleware.locale import LocaleMiddleware
 from django.middleware.security import SecurityMiddleware
 from django.test import SimpleTestCase
 from django.utils.deprecation import MiddlewareMixin, RemovedInDjango40Warning
@@ -20,30 +35,39 @@ class MiddlewareMixinTests(SimpleTestCase):
     Deprecation warning is raised when using get_response=None.
     """
     msg = 'Passing None for the middleware get_response argument is deprecated.'
+    middlewares = [
+        AuthenticationMiddleware,
+        BrokenLinkEmailsMiddleware,
+        CacheMiddleware,
+        CommonMiddleware,
+        ConditionalGetMiddleware,
+        CsrfViewMiddleware,
+        CurrentSiteMiddleware,
+        FetchFromCacheMiddleware,
+        FlatpageFallbackMiddleware,
+        GZipMiddleware,
+        LocaleMiddleware,
+        MessageMiddleware,
+        RedirectFallbackMiddleware,
+        RemoteUserMiddleware,
+        SecurityMiddleware,
+        SessionMiddleware,
+        UpdateCacheMiddleware,
+        XFrameOptionsMiddleware,
+        XViewMiddleware,
+    ]
 
     def test_deprecation(self):
-        with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):
-            CommonMiddleware()
+        for middleware in self.middlewares:
+            with self.subTest(middleware=middleware):
+                with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):
+                    middleware()
 
     def test_passing_explicit_none(self):
-        with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):
-            CommonMiddleware(None)
-
-    def test_subclass_deprecation(self):
-        """
-        Deprecation warning is raised in subclasses overriding __init__()
-        without calling super().
-        """
-        for middleware in [
-            SessionMiddleware,
-            CacheMiddleware,
-            FetchFromCacheMiddleware,
-            UpdateCacheMiddleware,
-            SecurityMiddleware,
-        ]:
+        for middleware in self.middlewares:
             with self.subTest(middleware=middleware):
                 with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):
-                    middleware()
+                    middleware(None)
 
     def test_sync_to_async_uses_base_thread_and_connection(self):
         """
diff --git a/tests/runtests.py b/tests/runtests.py
index db32da13eb8f..db1fd65dd273 100755
--- a/tests/runtests.py
+++ b/tests/runtests.py
@@ -90,8 +90,9 @@
 # avoid "RuntimeError: Model class X doesn't declare an explicit app_label
 # and isn't in an application in INSTALLED_APPS."
 CONTRIB_TESTS_TO_APPS = {
-    'flatpages_tests': 'django.contrib.flatpages',
-    'redirects_tests': 'django.contrib.redirects',
+    'deprecation': ['django.contrib.flatpages', 'django.contrib.redirects'],
+    'flatpages_tests': ['django.contrib.flatpages'],
+    'redirects_tests': ['django.contrib.redirects'],
 }
 
 
@@ -228,7 +229,9 @@ def _module_match_label(module_label, label):
         )
 
         if module_name in CONTRIB_TESTS_TO_APPS and module_found_in_labels:
-            settings.INSTALLED_APPS.append(CONTRIB_TESTS_TO_APPS[module_name])
+            for contrib_app in CONTRIB_TESTS_TO_APPS[module_name]:
+                if contrib_app not in settings.INSTALLED_APPS:
+                    settings.INSTALLED_APPS.append(contrib_app)
 
         if module_found_in_labels and module_label not in installed_app_names:
             if verbosity >= 2:

From ea57a2834fe32d895e6e6b0f3791feb2fec71737 Mon Sep 17 00:00:00 2001
From: Kevin Michel <kevin.michel@sereema.com>
Date: Fri, 28 Aug 2020 10:05:08 +0200
Subject: [PATCH 3/5] Refs #31928 -- Made SessionMiddleware call
 super().__init__().

---
 django/contrib/sessions/middleware.py | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py
index 95ad30ce7fca..cb8c1ff45b8d 100644
--- a/django/contrib/sessions/middleware.py
+++ b/django/contrib/sessions/middleware.py
@@ -13,9 +13,7 @@ class SessionMiddleware(MiddlewareMixin):
     # RemovedInDjango40Warning: when the deprecation ends, replace with:
     #   def __init__(self, get_response):
     def __init__(self, get_response=None):
-        self._get_response_none_deprecation(get_response)
-        self.get_response = get_response
-        self._async_check()
+        super().__init__(get_response)
         engine = import_module(settings.SESSION_ENGINE)
         self.SessionStore = engine.SessionStore
 

From 825ce75faec63ce81601e31152c757a9c28fed13 Mon Sep 17 00:00:00 2001
From: Kevin Michel <kevin.michel@sereema.com>
Date: Mon, 24 Aug 2020 22:25:33 +0200
Subject: [PATCH 4/5] Fixed #31928 -- Fixed detecting an async get_response in
 various middlewares.

SecurityMiddleware and the three cache middlewares were not calling
super().__init__() during their initialization or calling the required
MiddlewareMixin._async_check() method.

This made the middlewares not properly present as coroutine and
confused the middleware chain when used in a fully async context.

Thanks Kordian Kowalski for the report.
---
 django/middleware/cache.py                 | 25 +++++++++-------------
 django/middleware/security.py              |  3 +--
 docs/releases/3.1.1.txt                    |  3 +++
 docs/spelling_wordlist                     |  1 +
 tests/deprecation/test_middleware_mixin.py | 24 +++++++++++++++++++++
 5 files changed, 39 insertions(+), 17 deletions(-)

diff --git a/django/middleware/cache.py b/django/middleware/cache.py
index e92f768fa3ce..97bb199eff72 100644
--- a/django/middleware/cache.py
+++ b/django/middleware/cache.py
@@ -64,13 +64,12 @@ class UpdateCacheMiddleware(MiddlewareMixin):
     # RemovedInDjango40Warning: when the deprecation ends, replace with:
     #   def __init__(self, get_response):
     def __init__(self, get_response=None):
-        self._get_response_none_deprecation(get_response)
+        super().__init__(get_response)
         self.cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS
         self.page_timeout = None
         self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX
         self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS
         self.cache = caches[self.cache_alias]
-        self.get_response = get_response
 
     def _should_update_cache(self, request, response):
         return hasattr(request, '_cache_update_cache') and request._cache_update_cache
@@ -128,11 +127,10 @@ class FetchFromCacheMiddleware(MiddlewareMixin):
     # RemovedInDjango40Warning: when the deprecation ends, replace with:
     #   def __init__(self, get_response):
     def __init__(self, get_response=None):
-        self._get_response_none_deprecation(get_response)
+        super().__init__(get_response)
         self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX
         self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS
         self.cache = caches[self.cache_alias]
-        self.get_response = get_response
 
     def process_request(self, request):
         """
@@ -173,8 +171,7 @@ class CacheMiddleware(UpdateCacheMiddleware, FetchFromCacheMiddleware):
     # RemovedInDjango40Warning: when the deprecation ends, replace with:
     #   def __init__(self, get_response, cache_timeout=None, page_timeout=None, **kwargs):
     def __init__(self, get_response=None, cache_timeout=None, page_timeout=None, **kwargs):
-        self._get_response_none_deprecation(get_response)
-        self.get_response = get_response
+        super().__init__(get_response)
         # We need to differentiate between "provided, but using default value",
         # and "not provided". If the value is provided using a default, then
         # we fall back to system defaults. If it is not provided at all,
@@ -184,20 +181,18 @@ def __init__(self, get_response=None, cache_timeout=None, page_timeout=None, **k
             key_prefix = kwargs['key_prefix']
             if key_prefix is None:
                 key_prefix = ''
+            self.key_prefix = key_prefix
         except KeyError:
-            key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX
-        self.key_prefix = key_prefix
-
+            pass
         try:
             cache_alias = kwargs['cache_alias']
             if cache_alias is None:
                 cache_alias = DEFAULT_CACHE_ALIAS
+            self.cache_alias = cache_alias
+            self.cache = caches[self.cache_alias]
         except KeyError:
-            cache_alias = settings.CACHE_MIDDLEWARE_ALIAS
-        self.cache_alias = cache_alias
+            pass
 
-        if cache_timeout is None:
-            cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS
-        self.cache_timeout = cache_timeout
+        if cache_timeout is not None:
+            self.cache_timeout = cache_timeout
         self.page_timeout = page_timeout
-        self.cache = caches[self.cache_alias]
diff --git a/django/middleware/security.py b/django/middleware/security.py
index 035c329efb48..44921cd22b94 100644
--- a/django/middleware/security.py
+++ b/django/middleware/security.py
@@ -9,7 +9,7 @@ class SecurityMiddleware(MiddlewareMixin):
     # RemovedInDjango40Warning: when the deprecation ends, replace with:
     #   def __init__(self, get_response):
     def __init__(self, get_response=None):
-        self._get_response_none_deprecation(get_response)
+        super().__init__(get_response)
         self.sts_seconds = settings.SECURE_HSTS_SECONDS
         self.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS
         self.sts_preload = settings.SECURE_HSTS_PRELOAD
@@ -19,7 +19,6 @@ def __init__(self, get_response=None):
         self.redirect_host = settings.SECURE_SSL_HOST
         self.redirect_exempt = [re.compile(r) for r in settings.SECURE_REDIRECT_EXEMPT]
         self.referrer_policy = settings.SECURE_REFERRER_POLICY
-        self.get_response = get_response
 
     def process_request(self, request):
         path = request.path.lstrip("/")
diff --git a/docs/releases/3.1.1.txt b/docs/releases/3.1.1.txt
index 84f9020c53a9..68c02392bd5d 100644
--- a/docs/releases/3.1.1.txt
+++ b/docs/releases/3.1.1.txt
@@ -48,3 +48,6 @@ Bugfixes
   ``CommonPasswordValidator`` and ``settings.py`` generated by the
   :djadmin:`startproject` command, when user didn't have permissions to all
   intermediate directories in a Django installation path (:ticket:`31912`).
+
+* Fixed detecting an async ``get_response`` callable in various builtin
+  middlewares (:ticket:`31928`).
diff --git a/docs/spelling_wordlist b/docs/spelling_wordlist
index c6720f4de674..727d9cf66eb7 100644
--- a/docs/spelling_wordlist
+++ b/docs/spelling_wordlist
@@ -371,6 +371,7 @@ metre
 MiB
 micrometre
 middleware
+middlewares
 migrationname
 millimetre
 Minification
diff --git a/tests/deprecation/test_middleware_mixin.py b/tests/deprecation/test_middleware_mixin.py
index 3e4260b42238..fc792e92a3f8 100644
--- a/tests/deprecation/test_middleware_mixin.py
+++ b/tests/deprecation/test_middleware_mixin.py
@@ -1,3 +1,4 @@
+import asyncio
 import threading
 
 from asgiref.sync import async_to_sync
@@ -69,6 +70,29 @@ def test_passing_explicit_none(self):
                 with self.assertRaisesMessage(RemovedInDjango40Warning, self.msg):
                     middleware(None)
 
+    def test_coroutine(self):
+        async def async_get_response(request):
+            return HttpResponse()
+
+        def sync_get_response(request):
+            return HttpResponse()
+
+        for middleware in [
+            CacheMiddleware,
+            FetchFromCacheMiddleware,
+            UpdateCacheMiddleware,
+            SecurityMiddleware,
+        ]:
+            with self.subTest(middleware=middleware.__qualname__):
+                # Middleware appears as coroutine if get_function is
+                # a coroutine.
+                middleware_instance = middleware(async_get_response)
+                self.assertIs(asyncio.iscoroutinefunction(middleware_instance), True)
+                # Middleware doesn't appear as coroutine if get_function is not
+                # a coroutine.
+                middleware_instance = middleware(sync_get_response)
+                self.assertIs(asyncio.iscoroutinefunction(middleware_instance), False)
+
     def test_sync_to_async_uses_base_thread_and_connection(self):
         """
         The process_request() and process_response() hooks must be called with

From 225261b70136fa90e63b6cf4ea10341e793d7341 Mon Sep 17 00:00:00 2001
From: Kevin Michel <kevin.michel@sereema.com>
Date: Fri, 28 Aug 2020 11:42:35 +0200
Subject: [PATCH 5/5] Refs #31928 -- Added various middlewares tests for
 detecting when get_response is coroutine.

---
 tests/deprecation/test_middleware_mixin.py | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/tests/deprecation/test_middleware_mixin.py b/tests/deprecation/test_middleware_mixin.py
index fc792e92a3f8..4f410a77c8da 100644
--- a/tests/deprecation/test_middleware_mixin.py
+++ b/tests/deprecation/test_middleware_mixin.py
@@ -77,12 +77,7 @@ async def async_get_response(request):
         def sync_get_response(request):
             return HttpResponse()
 
-        for middleware in [
-            CacheMiddleware,
-            FetchFromCacheMiddleware,
-            UpdateCacheMiddleware,
-            SecurityMiddleware,
-        ]:
+        for middleware in self.middlewares:
             with self.subTest(middleware=middleware.__qualname__):
                 # Middleware appears as coroutine if get_function is
                 # a coroutine.
