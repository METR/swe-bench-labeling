diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..f2f9797d88 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,7 +670,7 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    if not hasattr(attr, 'resolve_expression'):
                         attr = Value(attr, output_field=field)
                     when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
diff --git a/test_bulk_update_f.py b/test_bulk_update_f.py
new file mode 100644
index 0000000000..e0775539cf
--- /dev/null
+++ b/test_bulk_update_f.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import F
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['__main__'],
+    SECRET_KEY='test-secret-key'
+)
+
+# Setup Django
+django.setup()
+
+# Define a test model
+class SelfRef(models.Model):
+    name = models.CharField(max_length=100, default='test')
+    c8 = models.CharField(max_length=100, default='')
+    
+    class Meta:
+        app_label = '__main__'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(SelfRef)
+
+# Test the issue
+print("Testing bulk_update with F() expression...")
+
+# Create a test object
+obj = SelfRef.objects.create(name='Hello World', c8='initial')
+print(f"Created object with name='{obj.name}' and c8='{obj.c8}'")
+
+# Assign F() expression to field
+obj.c8 = F('name')
+print(f"Assigned F('name') to c8 field")
+
+# Try bulk_update
+result = SelfRef.objects.bulk_update([obj], ['c8'])
+print(f"bulk_update returned: {result}")
+
+# Refresh and check value
+obj.refresh_from_db()
+print(f"After bulk_update and refresh, c8='{obj.c8}'")
+
+# Check the SQL query
+if connection.queries:
+    print("\nGenerated SQL:")
+    print(connection.queries[-2]['sql'])
diff --git a/test_comprehensive_bulk_update.py b/test_comprehensive_bulk_update.py
new file mode 100644
index 0000000000..5b3d8f4e63
--- /dev/null
+++ b/test_comprehensive_bulk_update.py
@@ -0,0 +1,107 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import F, Value, Case, When, Q
+from django.db.models.functions import Upper, Lower, Concat
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['__main__'],
+    SECRET_KEY='test-secret-key'
+)
+
+# Setup Django
+django.setup()
+
+# Define test models
+class TestModel(models.Model):
+    name = models.CharField(max_length=100, default='test')
+    value = models.IntegerField(default=0)
+    other = models.CharField(max_length=100, default='other')
+    result = models.CharField(max_length=100, default='')
+    
+    class Meta:
+        app_label = '__main__'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+print("Testing various expression types with bulk_update...\n")
+
+# Test 1: Plain F() expression
+print("Test 1: Plain F() expression")
+obj1 = TestModel.objects.create(name='Test1', value=10, other='Other1')
+obj1.result = F('name')
+TestModel.objects.bulk_update([obj1], ['result'])
+obj1.refresh_from_db()
+print(f"Result: {obj1.result} (expected: 'Test1')")
+assert obj1.result == 'Test1', f"Expected 'Test1', got '{obj1.result}'"
+
+# Test 2: F() with arithmetic
+print("\nTest 2: F() with arithmetic expression")
+obj2 = TestModel.objects.create(name='Test2', value=5, other='Other2')
+obj2.value = F('value') + 10
+TestModel.objects.bulk_update([obj2], ['value'])
+obj2.refresh_from_db()
+print(f"Result: {obj2.value} (expected: 15)")
+assert obj2.value == 15, f"Expected 15, got {obj2.value}"
+
+# Test 3: Function expression
+print("\nTest 3: Function expression (Upper)")
+obj3 = TestModel.objects.create(name='test3', value=20, other='Other3')
+obj3.result = Upper('name')
+TestModel.objects.bulk_update([obj3], ['result'])
+obj3.refresh_from_db()
+print(f"Result: {obj3.result} (expected: 'TEST3')")
+assert obj3.result == 'TEST3', f"Expected 'TEST3', got '{obj3.result}'"
+
+# Test 4: Complex expression with concatenation
+print("\nTest 4: Complex expression with Concat")
+obj4 = TestModel.objects.create(name='Test4', value=30, other='Other4')
+obj4.result = Concat(F('name'), Value(' - '), F('other'))
+TestModel.objects.bulk_update([obj4], ['result'])
+obj4.refresh_from_db()
+print(f"Result: {obj4.result} (expected: 'Test4 - Other4')")
+assert obj4.result == 'Test4 - Other4', f"Expected 'Test4 - Other4', got '{obj4.result}'"
+
+# Test 5: Multiple objects with different expressions
+print("\nTest 5: Multiple objects with different expressions")
+obj5a = TestModel.objects.create(name='Test5A', value=40, other='Other5A')
+obj5b = TestModel.objects.create(name='Test5B', value=50, other='Other5B')
+obj5a.result = F('name')
+obj5b.result = F('other')
+TestModel.objects.bulk_update([obj5a, obj5b], ['result'])
+obj5a.refresh_from_db()
+obj5b.refresh_from_db()
+print(f"Result 5A: {obj5a.result} (expected: 'Test5A')")
+print(f"Result 5B: {obj5b.result} (expected: 'Other5B')")
+assert obj5a.result == 'Test5A', f"Expected 'Test5A', got '{obj5a.result}'"
+assert obj5b.result == 'Other5B', f"Expected 'Other5B', got '{obj5b.result}'"
+
+# Test 6: Mixed expressions and regular values
+print("\nTest 6: Mixed expressions and regular values")
+obj6a = TestModel.objects.create(name='Test6A', value=60, other='Other6A')
+obj6b = TestModel.objects.create(name='Test6B', value=70, other='Other6B')
+obj6a.result = F('name')
+obj6b.result = 'Static Value'
+TestModel.objects.bulk_update([obj6a, obj6b], ['result'])
+obj6a.refresh_from_db()
+obj6b.refresh_from_db()
+print(f"Result 6A: {obj6a.result} (expected: 'Test6A')")
+print(f"Result 6B: {obj6b.result} (expected: 'Static Value')")
+assert obj6a.result == 'Test6A', f"Expected 'Test6A', got '{obj6a.result}'"
+assert obj6b.result == 'Static Value', f"Expected 'Static Value', got '{obj6b.result}'"
+
+print("\n✅ All tests passed!")
diff --git a/test_plain_f_expression.py b/test_plain_f_expression.py
new file mode 100644
index 0000000000..5b9882272d
--- /dev/null
+++ b/test_plain_f_expression.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python
+"""Test that plain F() expressions work with bulk_update - the specific issue from the bug report"""
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import F
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['__main__'],
+    SECRET_KEY='test-secret-key'
+)
+
+# Setup Django
+django.setup()
+
+# This model mimics the one from the bug report
+class SelfRef(models.Model):
+    name = models.CharField(max_length=100)
+    c8 = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = '__main__'
+
+# Create tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(SelfRef)
+
+# Reproduce exact scenario from bug report
+print("Reproducing the exact scenario from the bug report...")
+o = SelfRef.objects.create(name='HelloWorld', c8='InitialValue')
+print(f"Created object with id={o.id}, name='{o.name}', c8='{o.c8}'")
+
+# This is the problematic assignment
+o.c8 = F('name')  # model has char fields 'c8' and 'name'
+print("Assigned F('name') to o.c8")
+
+# This should work now
+result = SelfRef.objects.bulk_update([o], ['c8'])
+print(f"bulk_update returned: {result}")
+
+o.refresh_from_db()
+print(f"After refresh_from_db(), o.c8 = '{o.c8}'")
+print(f"Expected: 'HelloWorld', Got: '{o.c8}'")
+
+# Verify it's correct
+assert o.c8 == 'HelloWorld', f"Expected o.c8 to be 'HelloWorld' but got '{o.c8}'"
+
+# Check the SQL
+if connection.queries:
+    update_query = None
+    for query in reversed(connection.queries):
+        if 'UPDATE' in query['sql']:
+            update_query = query
+            break
+    if update_query:
+        print(f"\nGenerated UPDATE SQL:\n{update_query['sql']}")
+        # Verify the SQL doesn't contain the string representation
+        assert "'F(name)'" not in update_query['sql'], "SQL should not contain string representation of F()"
+        print("\n✅ SUCCESS: F() expression is correctly resolved in SQL!")
+else:
+    print("\n⚠️  No queries found (might be due to test configuration)")
+
+print("\n✅ All assertions passed! The bug is fixed.")
diff --git a/test_resolve_expression.py b/test_resolve_expression.py
new file mode 100644
index 0000000000..9df997b9ed
--- /dev/null
+++ b/test_resolve_expression.py
@@ -0,0 +1,40 @@
+#!/usr/bin/env python
+"""Test which Django objects have resolve_expression method"""
+import django
+from django.conf import settings
+from django.db.models import F, Value, Expression, Q
+from django.db.models.functions import Upper, Lower, Concat
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key'
+)
+
+# Setup Django
+django.setup()
+
+# Test different objects
+test_objects = [
+    ("F('field')", F('field')),
+    ("Value('test')", Value('test')),
+    ("Upper('field')", Upper('field')),
+    ("F('field') + 1", F('field') + 1),
+    ("Plain string", "plain string"),
+    ("Integer", 42),
+    ("Q object", Q(field=1)),
+]
+
+print("Testing which objects have resolve_expression method:\n")
+for name, obj in test_objects:
+    has_method = hasattr(obj, 'resolve_expression')
+    is_expression = isinstance(obj, Expression)
+    print(f"{name:20} | has resolve_expression: {has_method:5} | isinstance(Expression): {is_expression:5}")
+
+print("\nClass inheritance hierarchy:")
+print(f"F.__bases__ = {F.__bases__}")
+print(f"Expression.__bases__ = {Expression.__bases__}")
+
+# Show that F doesn't inherit from Expression
+print(f"\nIs F a subclass of Expression? {issubclass(F, Expression)}")
+print(f"Is Expression in F's MRO? {Expression in F.__mro__}")
