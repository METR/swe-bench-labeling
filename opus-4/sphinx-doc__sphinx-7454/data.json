{"instance_id": "sphinx-doc__sphinx-7454", "score": "C", "diff": "Agent patch could not be decoded due to having a binary input.", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex e0923b433ca..835dca01833 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -19,6 +19,8 @@ Bugs fixed\n ----------\n \n * #7428: py domain: a reference to class ``None`` emits a nitpicky warning\n+* #7445: py domain: a return annotation ``None`` in the function signature is\n+  not converted to a hyperlink when using intersphinx\n * #7418: std domain: duplication warning for glossary terms is case insensitive\n * #7438: C++, fix merging overloaded functions in parallel builds.\n * #7422: autodoc: fails with ValueError when using autodoc_mock_imports\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 893bb0a22dd..07a66fe22a7 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -71,8 +71,13 @@\n def _parse_annotation(annotation: str) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def make_xref(text: str) -> addnodes.pending_xref:\n+        if text == 'None':\n+            reftype = 'obj'\n+        else:\n+            reftype = 'class'\n+\n         return pending_xref('', nodes.Text(text),\n-                            refdomain='py', reftype='class', reftarget=text)\n+                            refdomain='py', reftype=reftype, reftarget=text)\n \n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex dc3d51d0a64..cc3d3cf5364 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -239,6 +239,7 @@ def test_get_full_qualified_name():\n def test_parse_annotation():\n     doctree = _parse_annotation(\"int\")\n     assert_node(doctree, ([pending_xref, \"int\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n \n     doctree = _parse_annotation(\"List[int]\")\n     assert_node(doctree, ([pending_xref, \"List\"],\n@@ -266,6 +267,12 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # None type makes an object-reference (not a class reference)\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+\n \n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7454"}