{"instance_id": "django__django-15695", "score": "I", "diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..711508b391 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -963,6 +963,15 @@ class RenameIndex(IndexOperation):\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n+        \n+        # Check if the new index already exists (e.g., from a previous forward that wasn't rolled back)\n+        if self.new_name in schema_editor._constraint_names(model, index=True):\n+            # If we're trying to rename from an auto-generated name and the target already exists,\n+            # we need to drop the auto-generated one to avoid duplicates\n+            if self.old_fields and old_index.name != self.new_name:\n+                schema_editor.remove_index(model, old_index)\n+            return\n+            \n         schema_editor.rename_index(model, old_index, new_index)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\ndiff --git a/fix_rename_index.py b/fix_rename_index.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/fix_rename_index.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..92e7e02669\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.test.utils import get_runner\n+\n+if __name__ == \"__main__\":\n+    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'\n+    django.setup()\n+    TestRunner = get_runner(settings)\n+    test_runner = TestRunner()\n+    \n+    # Run the specific test\n+    failures = test_runner.run_tests([\"migrations.test_operations.OperationTests.test_rename_index_unnamed_index\"])\n+    sys.exit(bool(failures))\ndiff --git a/test_rename_index_bug.py b/test_rename_index_bug.py\nnew file mode 100644\nindex 0000000000..14afc062c2\n--- /dev/null\n+++ b/test_rename_index_bug.py\n@@ -0,0 +1,78 @@\n+#!/usr/bin/env python\n+\"\"\"Test to reproduce the RenameIndex crash bug\"\"\"\n+import os\n+import sys\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+sys.path.insert(0, '/testbed')\n+\n+import django\n+django.setup()\n+\n+from django.db import connection, migrations, models\n+from django.db.migrations.state import ProjectState, ModelState\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+\n+# Create a test to reproduce the bug\n+def test_rename_index_crash():\n+    \"\"\"Test that reproduces the crash when re-applying RenameIndex\"\"\"\n+    \n+    # Setup\n+    app_label = \"test_app\"\n+    table_name = f\"{app_label}_testmodel\"\n+    \n+    # Create initial project state with index_together\n+    project_state = ProjectState()\n+    project_state.add_model(ModelState(\n+        app_label,\n+        \"TestModel\",\n+        [\n+            (\"id\", models.AutoField(primary_key=True)),\n+            (\"field1\", models.CharField(max_length=50)),\n+            (\"field2\", models.CharField(max_length=50)),\n+        ],\n+        {\"index_together\": [(\"field1\", \"field2\")]},\n+    ))\n+    \n+    # Create the table first\n+    with connection.schema_editor() as editor:\n+        model = project_state.apps.get_model(app_label, \"TestModel\")\n+        editor.create_model(model)\n+    \n+    # Create RenameIndex operation\n+    operation = migrations.RenameIndex(\n+        \"TestModel\", \n+        new_name=\"new_test_idx\",\n+        old_fields=(\"field1\", \"field2\")\n+    )\n+    \n+    # Clone state for forward operation\n+    new_state = project_state.clone()\n+    operation.state_forwards(app_label, new_state)\n+    \n+    print(\"Step 1: Apply RenameIndex forward (rename unnamed to named)\")\n+    with connection.schema_editor() as editor:\n+        operation.database_forwards(app_label, editor, project_state, new_state)\n+    print(\"   Success! Index renamed to 'new_test_idx'\")\n+    \n+    print(\"\\nStep 2: Apply RenameIndex backward\")\n+    with connection.schema_editor() as editor:\n+        operation.database_backwards(app_label, editor, new_state, project_state)\n+    print(\"   Current behavior: no-op (index still has name 'new_test_idx')\")\n+    \n+    print(\"\\nStep 3: Re-apply RenameIndex forward\")\n+    try:\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        print(\"   Success! No crash.\")\n+    except Exception as e:\n+        print(f\"   ERROR: {type(e).__name__}: {e}\")\n+        print(\"   This is the bug - it tries to rename to a name that already exists!\")\n+    \n+    # Cleanup\n+    with connection.schema_editor() as editor:\n+        model = project_state.apps.get_model(app_label, \"TestModel\")\n+        editor.delete_model(model)\n+\n+if __name__ == \"__main__\":\n+    test_rename_index_crash()\ndiff --git a/test_rename_index_issue.py b/test_rename_index_issue.py\nnew file mode 100644\nindex 0000000000..994219f662\n--- /dev/null\n+++ b/test_rename_index_issue.py\n@@ -0,0 +1,73 @@\n+\"\"\"Test script to reproduce the RenameIndex issue\"\"\"\n+import os\n+import sys\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+\n+# Add project root to Python path\n+sys.path.insert(0, '/testbed')\n+\n+import django\n+django.setup()\n+\n+from django.db import connection, models\n+from django.db.migrations import state, operations\n+from django.db.migrations.state import ProjectState, ModelState\n+\n+def test_rename_index_backward_forward():\n+    \"\"\"Test that reproduces the issue with RenameIndex moving backward and forward\"\"\"\n+    \n+    # Create a simple model state with index_together\n+    app_label = \"test_app\"\n+    \n+    # Initial project state with index_together\n+    project_state = ProjectState()\n+    project_state.add_model(ModelState(\n+        app_label,\n+        \"TestModel\",\n+        [\n+            (\"id\", models.AutoField(primary_key=True)),\n+            (\"field1\", models.CharField(max_length=50)),\n+            (\"field2\", models.CharField(max_length=50)),\n+        ],\n+        {\"index_together\": [(\"field1\", \"field2\")]},\n+    ))\n+    \n+    # Create the RenameIndex operation\n+    operation = operations.RenameIndex(\n+        \"TestModel\", \n+        new_name=\"new_test_idx\", \n+        old_fields=(\"field1\", \"field2\")\n+    )\n+    \n+    # Clone states for forward operation\n+    new_state = project_state.clone()\n+    operation.state_forwards(app_label, new_state)\n+    \n+    print(\"Initial state - index_together:\", project_state.models[app_label, \"testmodel\"].options.get(\"index_together\"))\n+    print(\"After forward - indexes:\", [idx.name for idx in new_state.models[app_label, \"testmodel\"].options.get(\"indexes\", [])])\n+    \n+    # Simulate database operations\n+    print(\"\\n--- Testing database operations ---\")\n+    \n+    # Forward (rename unnamed index to named)\n+    print(\"1. Forward operation (rename unnamed to named)\")\n+    with connection.schema_editor() as editor:\n+        # We'll simulate this instead of actually running it\n+        print(\"   Would rename index from auto-generated name to 'new_test_idx'\")\n+    \n+    # Backward (should be no-op according to current implementation)\n+    print(\"2. Backward operation (current: no-op)\")\n+    with connection.schema_editor() as editor:\n+        # Current implementation does nothing\n+        print(\"   Current implementation: no-op\")\n+    \n+    # Forward again - this would cause the crash\n+    print(\"3. Forward operation again (this would crash)\")\n+    print(\"   Would try to rename to 'new_test_idx' but it already exists!\")\n+    \n+    print(\"\\n--- The issue ---\")\n+    print(\"The problem is that database_backwards() for unnamed indexes is a no-op,\")\n+    print(\"so when you apply forward again, it tries to create an index that already exists.\")\n+\n+if __name__ == \"__main__\":\n+    test_rename_index_backward_forward()\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex cfd28b1b39..c0a55023bb 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,6 +2988,10 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Re-apply renaming.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n", "gold_standard_diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ecd0..75a3b8b0304b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -960,6 +960,9 @@ def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n             old_index = from_model_state.get_index_by_name(self.old_name)\n+        # Don't alter when the index name is not changed.\n+        if old_index.name == self.new_name:\n+            return\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex cfd28b1b39e5..f3c4ea8ffe2b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,6 +2988,11 @@ def test_rename_index_unnamed_index(self):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Reapply, RenameIndex operation is a noop when the old and new name\n+        # match.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15695"}