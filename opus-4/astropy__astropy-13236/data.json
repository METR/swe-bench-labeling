{"instance_id": "astropy__astropy-13236", "score": "I", "diff": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe2127a3..ec5be586fa 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1243,6 +1243,13 @@ class Table:\n         # mixin class\n         if (not isinstance(data, Column) and not data_is_mixin\n                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n+            warnings.warn(\n+                \"In the future, structured numpy arrays will be added as a Column \"\n+                \"instead of as an NdarrayMixin. To avoid this warning, wrap the \"\n+                \"array in a Column object explicitly.\",\n+                FutureWarning,\n+                stacklevel=2\n+            )\n             data = data.view(NdarrayMixin)\n             data_is_mixin = True\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 4e84dd196b..3c3d00c32d 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.22\",\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..6f83052555\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,98 @@\n+#!/usr/bin/env python\n+\"\"\"Comprehensive test of the FutureWarning for structured arrays\"\"\"\n+\n+import warnings\n+import numpy as np\n+from astropy.table import Table, Column\n+from astropy.table.ndarray_mixin import NdarrayMixin\n+\n+print(\"Testing FutureWarning for structured numpy arrays in Table\\n\")\n+\n+# Test 1: Structured array triggers warning and becomes NdarrayMixin\n+print(\"Test 1: Structured array triggers warning\")\n+dtype = np.dtype([('x', 'i4'), ('y', 'f8'), ('z', 'U3')])\n+data = np.array([(1, 2.5, 'abc'), (3, 4.5, 'def'), (5, 6.5, 'ghi')], dtype=dtype)\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t = Table()\n+    t['struct'] = data\n+    \n+    assert len(w) == 1, f\"Expected 1 warning, got {len(w)}\"\n+    assert issubclass(w[0].category, FutureWarning), f\"Expected FutureWarning, got {w[0].category}\"\n+    assert \"structured numpy arrays will be added as a Column\" in str(w[0].message)\n+    assert isinstance(t['struct'], NdarrayMixin), f\"Expected NdarrayMixin, got {type(t['struct'])}\"\n+    print(\"\u2713 Warning raised and column is NdarrayMixin\")\n+\n+# Test 2: Wrapped in Column - no warning\n+print(\"\\nTest 2: Column-wrapped structured array - no warning\")  \n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t2 = Table()\n+    t2['struct'] = Column(data)\n+    \n+    assert len(w) == 0, f\"Expected no warnings, got {len(w)}\"\n+    assert isinstance(t2['struct'], Column), f\"Expected Column, got {type(t2['struct'])}\"\n+    print(\"\u2713 No warning and column is Column\")\n+\n+# Test 3: Already NdarrayMixin - no warning\n+print(\"\\nTest 3: Already NdarrayMixin - no warning\")\n+data_mixin = data.view(NdarrayMixin)\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t3 = Table()\n+    t3['struct'] = data_mixin\n+    \n+    assert len(w) == 0, f\"Expected no warnings, got {len(w)}\"\n+    assert isinstance(t3['struct'], NdarrayMixin), f\"Expected NdarrayMixin, got {type(t3['struct'])}\"\n+    print(\"\u2713 No warning and column is NdarrayMixin\")\n+\n+# Test 4: Regular (non-structured) array - no warning\n+print(\"\\nTest 4: Regular array - no warning\")\n+regular_data = np.array([1.1, 2.2, 3.3])\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t4 = Table()\n+    t4['regular'] = regular_data\n+    \n+    assert len(w) == 0, f\"Expected no warnings, got {len(w)}\"\n+    assert isinstance(t4['regular'], Column), f\"Expected Column, got {type(t4['regular'])}\"\n+    print(\"\u2713 No warning and column is Column\")\n+\n+# Test 5: Single-field structured array (edge case) - no warning  \n+print(\"\\nTest 5: Single-field structured array - no warning\")\n+single_dtype = np.dtype([('a', 'f8')])\n+single_data = np.array([(1.0,), (2.0,), (3.0,)], dtype=single_dtype)\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t5 = Table()\n+    t5['single'] = single_data\n+    \n+    # len(dtype) > 1 check means single field doesn't trigger warning\n+    assert len(w) == 0, f\"Expected no warnings, got {len(w)}\"\n+    print(\"\u2713 No warning for single-field structured array\")\n+\n+# Test 6: Table initialization with structured array\n+print(\"\\nTest 6: Table init with structured array - warning\")\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t6 = Table([data], names=['struct'])\n+    \n+    assert len(w) == 1, f\"Expected 1 warning, got {len(w)}\"\n+    assert issubclass(w[0].category, FutureWarning)\n+    assert isinstance(t6['struct'], NdarrayMixin)\n+    print(\"\u2713 Warning raised during Table initialization\")\n+\n+# Test 7: add_column method\n+print(\"\\nTest 7: add_column with structured array - warning\")\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t7 = Table()\n+    t7.add_column(data, name='struct')\n+    \n+    assert len(w) == 1, f\"Expected 1 warning, got {len(w)}\"\n+    assert issubclass(w[0].category, FutureWarning)\n+    assert isinstance(t7['struct'], NdarrayMixin)\n+    print(\"\u2713 Warning raised with add_column\")\n+\n+print(\"\\nAll tests passed! \u2705\")\ndiff --git a/test_full_stack.py b/test_full_stack.py\nnew file mode 100644\nindex 0000000000..c2254823b3\n--- /dev/null\n+++ b/test_full_stack.py\n@@ -0,0 +1,36 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to analyze the full call stack\"\"\"\n+\n+import warnings\n+import numpy as np\n+from astropy.table import Table\n+import sys\n+\n+# Monkey patch warnings.warn to print the stack\n+original_warn = warnings.warn\n+\n+def custom_warn(*args, **kwargs):\n+    import traceback\n+    print(\"Full stack trace:\")\n+    for i, frame_info in enumerate(traceback.extract_stack()[:-1]):  # exclude this function\n+        print(f\"  {i}: {frame_info.filename}:{frame_info.lineno} in {frame_info.name}\")\n+    \n+    # Calculate what each stacklevel would point to\n+    stack = traceback.extract_stack()[:-1]\n+    for level in range(2, min(6, len(stack))):\n+        frame = stack[-level]\n+        print(f\"  stacklevel={level} -> {frame.filename}:{frame.lineno}\")\n+    \n+    original_warn(*args, **kwargs)\n+\n+warnings.warn = custom_warn\n+\n+# Test creating table with structured array\n+print(\"Creating table with structured array...\")\n+a = np.array([(1, 'a'), (2, 'b')], dtype='<i4,|U1')\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t = Table([a], names=['a'])\n+\n+warnings.warn = original_warn\ndiff --git a/test_full_stack2.py b/test_full_stack2.py\nnew file mode 100644\nindex 0000000000..136fc14e3a\n--- /dev/null\n+++ b/test_full_stack2.py\n@@ -0,0 +1,36 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to analyze the full call stack for adding column\"\"\"\n+\n+import warnings\n+import numpy as np\n+from astropy.table import Table\n+\n+# Monkey patch warnings.warn to print the stack\n+original_warn = warnings.warn\n+\n+def custom_warn(*args, **kwargs):\n+    import traceback\n+    print(\"Full stack trace:\")\n+    for i, frame_info in enumerate(traceback.extract_stack()[:-1]):  # exclude this function\n+        print(f\"  {i}: {frame_info.filename}:{frame_info.lineno} in {frame_info.name}\")\n+    \n+    # Calculate what each stacklevel would point to\n+    stack = traceback.extract_stack()[:-1]\n+    for level in range(2, min(8, len(stack))):\n+        frame = stack[-level]\n+        print(f\"  stacklevel={level} -> {frame.filename}:{frame.lineno}\")\n+    \n+    original_warn(*args, **kwargs)\n+\n+warnings.warn = custom_warn\n+\n+# Test adding column with structured array\n+print(\"Adding column with structured array...\")\n+b = np.array([(10, 'aa'), (20, 'bb')], dtype=[('x', 'i4'), ('y', 'U2')])\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t = Table()\n+    t['b'] = b  # This line should be the warning location\n+\n+warnings.warn = original_warn\ndiff --git a/test_stacklevel.py b/test_stacklevel.py\nnew file mode 100644\nindex 0000000000..b949ee6797\n--- /dev/null\n+++ b/test_stacklevel.py\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to verify correct stacklevel for warning\"\"\"\n+\n+import warnings\n+import numpy as np\n+from astropy.table import Table\n+import traceback\n+\n+# Capture warning with full traceback\n+a = np.array([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')],\n+             dtype='<i4,' + ('|U1'))\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t = Table([a], names=['a'])\n+    \n+    if w:\n+        print(\"Warning raised at:\")\n+        traceback.print_stack(limit=10)\n+        print(f\"\\nWarning message: {w[0].message}\")\n+        print(f\"Warning filename: {w[0].filename}\")\n+        print(f\"Warning lineno: {w[0].lineno}\")\ndiff --git a/test_stacklevel2.py b/test_stacklevel2.py\nnew file mode 100644\nindex 0000000000..a989cb8dee\n--- /dev/null\n+++ b/test_stacklevel2.py\n@@ -0,0 +1,21 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to verify correct stacklevel for warning when adding column\"\"\"\n+\n+import warnings\n+import numpy as np\n+from astropy.table import Table\n+\n+# Test with __setitem__\n+b = np.array([(10, 'aa'), (20, 'bb'), (30, 'cc'), (40, 'dd')],\n+             dtype=[('x', 'i4'), ('y', ('U2'))])\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t = Table()\n+    t['b'] = b  # This should trigger the warning\n+    \n+    if w:\n+        print(f\"Warning message: {w[0].message}\")\n+        print(f\"Warning filename: {w[0].filename}\")\n+        print(f\"Warning lineno: {w[0].lineno}\")\n+        print(f\"Warning function: {w[0].function}\")\ndiff --git a/test_stacklevel3.py b/test_stacklevel3.py\nnew file mode 100644\nindex 0000000000..25a11003a5\n--- /dev/null\n+++ b/test_stacklevel3.py\n@@ -0,0 +1,47 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to check the warning location points to user code\"\"\"\n+\n+import warnings\n+import numpy as np\n+from astropy.table import Table\n+\n+# First test: Create table with structured array during init\n+print(\"Test 1: Table initialization with structured array\")\n+a = np.array([(1, 'a'), (2, 'b')], dtype='<i4,|U1')\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\") \n+    t = Table([a], names=['a'])  # Line 14 - this should be the warning location\n+    \n+    if w:\n+        print(f\"  Warning points to line: {w[0].lineno}\")\n+        print(f\"  Expected line: 14\")\n+        print(f\"  Correct: {w[0].lineno == 14}\")\n+\n+# Second test: Add structured array to existing table  \n+print(\"\\nTest 2: Adding structured array to existing table\")\n+b = np.array([(10, 'aa'), (20, 'bb')], dtype=[('x', 'i4'), ('y', 'U2')])\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t2 = Table()\n+    t2['b'] = b  # Line 28 - this should be the warning location\n+    \n+    if w:\n+        print(f\"  Warning points to line: {w[0].lineno}\")\n+        print(f\"  Expected line: 28\")\n+        print(f\"  Correct: {w[0].lineno == 28}\")\n+\n+# Third test: Add structured array via add_column\n+print(\"\\nTest 3: Adding structured array via add_column\")\n+c = np.array([(100, 'aaa'), (200, 'bbb')], dtype=[('p', 'i4'), ('q', 'U3')])\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t3 = Table()\n+    t3.add_column(c, name='c')  # Line 42 - this should be the warning location\n+    \n+    if w:\n+        print(f\"  Warning points to line: {w[0].lineno}\")\n+        print(f\"  Expected line: 42\")\n+        print(f\"  Correct: {w[0].lineno == 42}\")\ndiff --git a/test_structured_array_warning.py b/test_structured_array_warning.py\nnew file mode 100644\nindex 0000000000..e74495d2f4\n--- /dev/null\n+++ b/test_structured_array_warning.py\n@@ -0,0 +1,57 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to verify FutureWarning for structured numpy arrays in Table\"\"\"\n+\n+import warnings\n+import numpy as np\n+from astropy.table import Table, Column\n+\n+# Test 1: Adding a structured numpy array should produce a warning\n+print(\"Test 1: Adding structured array to table (should produce warning)\")\n+dtype = np.dtype([('a', 'i4'), ('b', 'f8')])\n+data = np.array([(1, 2.5), (3, 4.5)], dtype=dtype)\n+\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t = Table()\n+    t['struct_col'] = data\n+    \n+    # Check that a warning was raised\n+    assert len(w) == 1\n+    assert issubclass(w[0].category, FutureWarning)\n+    assert \"structured numpy arrays will be added as a Column\" in str(w[0].message)\n+    print(\"\u2713 Warning raised correctly\")\n+    print(f\"  Warning message: {w[0].message}\")\n+\n+# Verify the column is NdarrayMixin\n+from astropy.table.ndarray_mixin import NdarrayMixin\n+assert isinstance(t['struct_col'], NdarrayMixin)\n+print(\"\u2713 Column is NdarrayMixin as expected\")\n+\n+# Test 2: Adding a structured array wrapped in Column should not produce warning\n+print(\"\\nTest 2: Adding structured array wrapped in Column (no warning)\")\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t2 = Table()\n+    t2['struct_col'] = Column(data)\n+    \n+    # Check that no warning was raised\n+    assert len(w) == 0\n+    print(\"\u2713 No warning raised\")\n+\n+# Verify the column is Column\n+assert isinstance(t2['struct_col'], Column)\n+print(\"\u2713 Column is Column as expected\")\n+\n+# Test 3: Non-structured arrays should not produce warning\n+print(\"\\nTest 3: Adding regular array (no warning)\")\n+regular_data = np.array([1, 2, 3])\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    t3 = Table()\n+    t3['regular_col'] = regular_data\n+    \n+    # Check that no warning was raised\n+    assert len(w) == 0\n+    print(\"\u2713 No warning raised for regular array\")\n+\n+print(\"\\nAll tests passed!\")\n", "gold_standard_diff": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe2127a379..88830f5a2f43 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1239,13 +1239,6 @@ def _convert_data_to_col(self, data, copy=True, default_name=None, dtype=None, n\n                                 f'{fully_qualified_name} '\n                                 'did not return a valid mixin column')\n \n-        # Structured ndarray gets viewed as a mixin unless already a valid\n-        # mixin class\n-        if (not isinstance(data, Column) and not data_is_mixin\n-                and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n-            data = data.view(NdarrayMixin)\n-            data_is_mixin = True\n-\n         # Get the final column name using precedence.  Some objects may not\n         # have an info attribute. Also avoid creating info as a side effect.\n         if not name:\ndiff --git a/astropy/table/tests/test_mixin.py b/astropy/table/tests/test_mixin.py\nindex 2fdcd20d8fdf..5aa95fc4c1e0 100644\n--- a/astropy/table/tests/test_mixin.py\n+++ b/astropy/table/tests/test_mixin.py\n@@ -697,11 +697,13 @@ def test_skycoord_representation():\n                            '1.0,90.0,0.0']\n \n \n-def test_ndarray_mixin():\n+@pytest.mark.parametrize('as_ndarray_mixin', [True, False])\n+def test_ndarray_mixin(as_ndarray_mixin):\n     \"\"\"\n-    Test directly adding a plain structured array into a table instead of the\n-    view as an NdarrayMixin.  Once added as an NdarrayMixin then all the previous\n-    tests apply.\n+    Test directly adding various forms of structured ndarray columns to a table.\n+    Adding as NdarrayMixin is expected to be somewhat unusual after #12644\n+    (which provides full support for structured array Column's). This test shows\n+    that the end behavior is the same in both cases.\n     \"\"\"\n     a = np.array([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')],\n                  dtype='<i4,' + ('|U1'))\n@@ -709,7 +711,16 @@ def test_ndarray_mixin():\n                  dtype=[('x', 'i4'), ('y', ('U2'))])\n     c = np.rec.fromrecords([(100., 'raa'), (200., 'rbb'), (300., 'rcc'), (400., 'rdd')],\n                            names=['rx', 'ry'])\n-    d = np.arange(8, dtype='i8').reshape(4, 2).view(NdarrayMixin)\n+    d = np.arange(8, dtype='i8').reshape(4, 2)\n+\n+    if as_ndarray_mixin:\n+        a = a.view(NdarrayMixin)\n+        b = b.view(NdarrayMixin)\n+        c = c.view(NdarrayMixin)\n+        d = d.view(NdarrayMixin)\n+        class_exp = NdarrayMixin\n+    else:\n+        class_exp = Column\n \n     # Add one during initialization and the next as a new column.\n     t = Table([a], names=['a'])\n@@ -717,7 +728,7 @@ def test_ndarray_mixin():\n     t['c'] = c\n     t['d'] = d\n \n-    assert isinstance(t['a'], NdarrayMixin)\n+    assert isinstance(t['a'], class_exp)\n \n     assert t['a'][1][1] == a[1][1]\n     assert t['a'][2][0] == a[2][0]\n@@ -725,7 +736,7 @@ def test_ndarray_mixin():\n     assert t[1]['a'][1] == a[1][1]\n     assert t[2]['a'][0] == a[2][0]\n \n-    assert isinstance(t['b'], NdarrayMixin)\n+    assert isinstance(t['b'], class_exp)\n \n     assert t['b'][1]['x'] == b[1]['x']\n     assert t['b'][1]['y'] == b[1]['y']\n@@ -733,7 +744,7 @@ def test_ndarray_mixin():\n     assert t[1]['b']['x'] == b[1]['x']\n     assert t[1]['b']['y'] == b[1]['y']\n \n-    assert isinstance(t['c'], NdarrayMixin)\n+    assert isinstance(t['c'], class_exp)\n \n     assert t['c'][1]['rx'] == c[1]['rx']\n     assert t['c'][1]['ry'] == c[1]['ry']\n@@ -741,7 +752,7 @@ def test_ndarray_mixin():\n     assert t[1]['c']['rx'] == c[1]['rx']\n     assert t[1]['c']['ry'] == c[1]['ry']\n \n-    assert isinstance(t['d'], NdarrayMixin)\n+    assert isinstance(t['d'], class_exp)\n \n     assert t['d'][1][0] == d[1][0]\n     assert t['d'][1][1] == d[1][1]\ndiff --git a/astropy/table/tests/test_table.py b/astropy/table/tests/test_table.py\nindex 3fd1c5c68c6c..92dbd32e5cd9 100644\n--- a/astropy/table/tests/test_table.py\n+++ b/astropy/table/tests/test_table.py\n@@ -2916,6 +2916,21 @@ def test_data_to_col_convert_strategy():\n     assert np.all(t['b'] == [2, 2])\n \n \n+def test_structured_masked_column():\n+    \"\"\"Test that adding a masked ndarray with a structured dtype works\"\"\"\n+    dtype = np.dtype([('z', 'f8'), ('x', 'f8'), ('y', 'i4')])\n+    t = Table()\n+    t['a'] = np.ma.array([(1, 2, 3),\n+                          (4, 5, 6)],\n+                         mask=[(False, False, True),\n+                               (False, True, False)],\n+                         dtype=dtype)\n+    assert np.all(t['a']['z'].mask == [False, False])\n+    assert np.all(t['a']['x'].mask == [False, True])\n+    assert np.all(t['a']['y'].mask == [True, False])\n+    assert isinstance(t['a'], MaskedColumn)\n+\n+\n def test_rows_with_mixins():\n     \"\"\"Test for #9165 to allow adding a list of mixin objects.\n     Also test for fix to #9357 where group_by() failed due to\ndiff --git a/docs/changes/table/13236.api.rst b/docs/changes/table/13236.api.rst\nnew file mode 100644\nindex 000000000000..e6f9da984e0e\n--- /dev/null\n+++ b/docs/changes/table/13236.api.rst\n@@ -0,0 +1,6 @@\n+Changed behavior when a structured ``numpy.ndarray`` is added as a column to a\n+``Table``. Previously this was converted to a ``NdarrayMixin`` subclass of\n+``ndarray`` and added as a mixin column. This was because saving as a file (e.g.\n+HDF5, FITS, ECSV) was not supported for structured array columns. Now a\n+structured ``numpy.ndarray`` is added to the table as a native ``Column`` and\n+saving to file is supported.\ndiff --git a/docs/changes/table/13236.bugfix.rst b/docs/changes/table/13236.bugfix.rst\nnew file mode 100644\nindex 000000000000..b61ededff0e5\n--- /dev/null\n+++ b/docs/changes/table/13236.bugfix.rst\n@@ -0,0 +1,3 @@\n+Fixed a bug when adding a masked structured array to a table. Previously this\n+was auto-converted to a ``NdarrayMixin`` which loses the mask. With this fix\n+the data are added to the table as a ``MaskedColumn`` and the mask is preserved.\ndiff --git a/docs/table/construct_table.rst b/docs/table/construct_table.rst\nindex e7fa17cdbc9b..940d4cb485ce 100644\n--- a/docs/table/construct_table.rst\n+++ b/docs/table/construct_table.rst\n@@ -361,7 +361,10 @@ including the simple structured array defined previously as a column::\n You can access or print a single field in the structured column as follows::\n \n   >>> print(table['arr']['b'])\n-  [2. 5.]\n+  arr\n+  ---\n+  2.0\n+  5.0\n \n **New column names**\n \n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/13236"}