{"instance_id": "pydata__xarray-3151", "score": "C", "diff": "diff --git a/debug_issue.py b/debug_issue.py\nnew file mode 100644\nindex 00000000..6e99a0ae\n--- /dev/null\n+++ b/debug_issue.py\n@@ -0,0 +1,32 @@\n+import xarray as xr\n+import numpy as np\n+from xarray.core.combine import _infer_concat_order_from_coords\n+\n+#yCoord = ['a', 'b', 'c']  # works without error\n+yCoord = ['a', 'c', 'b']  # raises ValueError on combine\n+\n+ds1 = xr.Dataset(\n+    data_vars=dict(\n+        data=(['x', 'y'], np.random.rand(3, 3))\n+    ),\n+    coords=dict(\n+        x=[1, 2, 3],\n+        y=yCoord\n+    )\n+)\n+\n+ds2 = xr.Dataset(\n+    data_vars=dict(\n+        data=(['x', 'y'], np.random.rand(4, 3))\n+    ),\n+    coords = dict(\n+        x=[4, 5, 6, 7],\n+        y=yCoord\n+    )\n+)\n+\n+datasets = [ds1, ds2]\n+combined_ids, concat_dims = _infer_concat_order_from_coords(datasets)\n+\n+print(\"concat_dims:\", concat_dims)\n+print(\"combined_ids:\", combined_ids)\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 00000000..ae35035b\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,86 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Test 1: Non-monotonic identical coordinates (the original issue)\n+print(\"Test 1: Non-monotonic identical coordinates\")\n+yCoord = ['a', 'c', 'b']  \n+ds1 = xr.Dataset(\n+    data_vars=dict(data=(['x', 'y'], np.random.rand(3, 3))),\n+    coords=dict(x=[1, 2, 3], y=yCoord)\n+)\n+ds2 = xr.Dataset(\n+    data_vars=dict(data=(['x', 'y'], np.random.rand(4, 3))),\n+    coords=dict(x=[4, 5, 6, 7], y=yCoord)\n+)\n+try:\n+    ds3 = xr.combine_by_coords((ds1, ds2))\n+    print(\"\u2713 Success! Non-monotonic identical coordinates work\")\n+except ValueError as e:\n+    print(f\"\u2717 Failed: {e}\")\n+\n+# Test 2: Monotonic identical coordinates (should still work)\n+print(\"\\nTest 2: Monotonic identical coordinates\")\n+yCoord = ['a', 'b', 'c']\n+ds1 = xr.Dataset(\n+    data_vars=dict(data=(['x', 'y'], np.random.rand(3, 3))),\n+    coords=dict(x=[1, 2, 3], y=yCoord)\n+)\n+ds2 = xr.Dataset(\n+    data_vars=dict(data=(['x', 'y'], np.random.rand(4, 3))),\n+    coords=dict(x=[4, 5, 6, 7], y=yCoord)\n+)\n+try:\n+    ds3 = xr.combine_by_coords((ds1, ds2))\n+    print(\"\u2713 Success! Monotonic identical coordinates work\")\n+except ValueError as e:\n+    print(f\"\u2717 Failed: {e}\")\n+\n+# Test 3: Non-monotonic varying coordinates (should fail)\n+print(\"\\nTest 3: Non-monotonic varying coordinates (should fail)\")\n+ds1 = xr.Dataset(\n+    data_vars=dict(data=(['x'], np.random.rand(3))),\n+    coords=dict(x=[3, 1, 2])\n+)\n+ds2 = xr.Dataset(\n+    data_vars=dict(data=(['x'], np.random.rand(3))),\n+    coords=dict(x=[6, 4, 5])\n+)\n+try:\n+    ds3 = xr.combine_by_coords((ds1, ds2))\n+    print(\"\u2717 Failed: Non-monotonic varying coordinates should fail!\")\n+except ValueError as e:\n+    print(f\"\u2713 Success! Correctly failed with: {e}\")\n+\n+# Test 4: Monotonic varying coordinates (should work)\n+print(\"\\nTest 4: Monotonic varying coordinates\")\n+ds1 = xr.Dataset(\n+    data_vars=dict(data=(['x'], np.random.rand(3))),\n+    coords=dict(x=[1, 2, 3])\n+)\n+ds2 = xr.Dataset(\n+    data_vars=dict(data=(['x'], np.random.rand(3))),\n+    coords=dict(x=[4, 5, 6])\n+)\n+try:\n+    ds3 = xr.combine_by_coords((ds1, ds2))\n+    print(\"\u2713 Success! Monotonic varying coordinates work\")\n+except ValueError as e:\n+    print(f\"\u2717 Failed: {e}\")\n+\n+# Test 5: Multiple dimensions with mix of identical and varying\n+print(\"\\nTest 5: Multiple dimensions with mix of identical and varying\")\n+# y is identical and non-monotonic, x varies and is monotonic\n+yCoord = ['a', 'c', 'b']\n+ds1 = xr.Dataset(\n+    data_vars=dict(data=(['x', 'y', 'z'], np.random.rand(3, 3, 2))),\n+    coords=dict(x=[1, 2, 3], y=yCoord, z=[10, 20])\n+)\n+ds2 = xr.Dataset(\n+    data_vars=dict(data=(['x', 'y', 'z'], np.random.rand(4, 3, 2))),\n+    coords=dict(x=[4, 5, 6, 7], y=yCoord, z=[10, 20])\n+)\n+try:\n+    ds3 = xr.combine_by_coords((ds1, ds2))\n+    print(\"\u2713 Success! Multiple dimensions with mix of identical and varying work\")\n+except ValueError as e:\n+    print(f\"\u2717 Failed: {e}\")\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 00000000..4f0d5116\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,34 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Edge case: Multiple groups with different data variables\n+print(\"Edge case: Multiple groups with different data variables\")\n+y_coord = ['a', 'c', 'b']  # Non-monotonic\n+\n+# Group 1: data1 variable\n+ds1 = xr.Dataset(\n+    data_vars=dict(data1=(['x', 'y'], np.random.rand(3, 3))),\n+    coords=dict(x=[1, 2, 3], y=y_coord)\n+)\n+ds2 = xr.Dataset(\n+    data_vars=dict(data1=(['x', 'y'], np.random.rand(4, 3))),\n+    coords=dict(x=[4, 5, 6, 7], y=y_coord)\n+)\n+\n+# Group 2: data2 variable  \n+ds3 = xr.Dataset(\n+    data_vars=dict(data2=(['x', 'y'], np.random.rand(3, 3))),\n+    coords=dict(x=[1, 2, 3], y=y_coord)\n+)\n+ds4 = xr.Dataset(\n+    data_vars=dict(data2=(['x', 'y'], np.random.rand(4, 3))),\n+    coords=dict(x=[4, 5, 6, 7], y=y_coord)\n+)\n+\n+try:\n+    # combine_by_coords should handle groups separately\n+    ds_combined = xr.combine_by_coords([ds1, ds2, ds3, ds4])\n+    print(\"\u2713 Success! Combined dataset with multiple variable groups:\")\n+    print(ds_combined)\n+except ValueError as e:\n+    print(f\"\u2717 Failed: {e}\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 00000000..35a2237f\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,38 @@\n+import xarray as xr\n+import numpy as np\n+\n+#yCoord = ['a', 'b', 'c']  # works without error\n+yCoord = ['a', 'c', 'b']  # raises ValueError on combine\n+\n+ds1 = xr.Dataset(\n+    data_vars=dict(\n+        data=(['x', 'y'], np.random.rand(3, 3))\n+    ),\n+    coords=dict(\n+        x=[1, 2, 3],\n+        y=yCoord\n+    )\n+)\n+\n+ds2 = xr.Dataset(\n+    data_vars=dict(\n+        data=(['x', 'y'], np.random.rand(4, 3))\n+    ),\n+    coords = dict(\n+        x=[4, 5, 6, 7],\n+        y=yCoord\n+    )\n+)\n+\n+print(\"Dataset 1:\")\n+print(ds1)\n+print(\"\\nDataset 2:\")\n+print(ds2)\n+\n+print(\"\\nTrying to combine datasets...\")\n+try:\n+    ds3 = xr.combine_by_coords((ds1, ds2))\n+    print(\"Success! Combined dataset:\")\n+    print(ds3)\n+except ValueError as e:\n+    print(f\"Error: {e}\")\ndiff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903b..3a41c38e 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -501,7 +501,8 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                                    fill_value=fill_value)\n \n         # Check the overall coordinates are monotonically increasing\n-        for dim in concatenated.dims:\n+        # Only check dimensions that were actually concatenated\n+        for dim in concat_dims:\n             if dim in concatenated:\n                 indexes = concatenated.indexes.get(dim)\n                 if not (indexes.is_monotonic_increasing\ndiff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 77e2993b..9bc122d2 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -617,6 +617,27 @@ class TestCombineAuto:\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n                                       \" along dimension x\"):\n             combine_by_coords([ds1, ds0])\n+    \n+    def test_combine_by_coords_non_monotonic_identical(self):\n+        # Test for issue where identical non-monotonic coordinates raise error\n+        # https://github.com/pydata/xarray/issues/3150\n+        y_coord = ['a', 'c', 'b']\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])),\n+            coords=dict(x=[1, 2, 3], y=y_coord)\n+        )\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], [[10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]])),\n+            coords=dict(x=[4, 5, 6, 7], y=y_coord)\n+        )\n+        # Should not raise an error since y coordinates are identical\n+        actual = combine_by_coords([ds1, ds2])\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], [[1, 2, 3], [4, 5, 6], [7, 8, 9], \n+                                             [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]])),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=y_coord)\n+        )\n+        assert_identical(expected, actual)\n \n \n @pytest.mark.filterwarnings(\"ignore:In xarray version 0.13 `auto_combine` \"\n", "gold_standard_diff": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex a8c5342374e..b5e4e903719 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -41,6 +41,9 @@ Bug fixes\n - XFAIL several tests which are expected to fail on ARM systems\n   due to a ``datetime`` issue in NumPy (:issue:`2334`).\n   By `Graham Inggs <https://github.com/ginggs>`_.\n+- Fixed bug in ``combine_by_coords()`` causing a `ValueError` if the input had\n+  an unused dimension with coordinates which were not monotonic (:issue`3150`).\n+  By `Tom Nicholas <http://github.com/TomNicholas>`_.\n \n .. _whats-new.0.12.3:\n \ndiff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903b6c3..5718698f852 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -501,14 +501,13 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                                    fill_value=fill_value)\n \n         # Check the overall coordinates are monotonically increasing\n-        for dim in concatenated.dims:\n-            if dim in concatenated:\n-                indexes = concatenated.indexes.get(dim)\n-                if not (indexes.is_monotonic_increasing\n-                        or indexes.is_monotonic_decreasing):\n-                    raise ValueError(\"Resulting object does not have monotonic\"\n-                                     \" global indexes along dimension {}\"\n-                                     .format(dim))\n+        for dim in concat_dims:\n+            indexes = concatenated.indexes.get(dim)\n+            if not (indexes.is_monotonic_increasing\n+                    or indexes.is_monotonic_decreasing):\n+                raise ValueError(\"Resulting object does not have monotonic\"\n+                                 \" global indexes along dimension {}\"\n+                                 .format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n \n     return merge(concatenated_grouped_by_data_vars, compat=compat,\ndiff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 77e2993b7fd..2a71a3a3ed4 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -581,6 +581,25 @@ def test_infer_order_from_coords(self):\n         expected = data\n         assert expected.broadcast_equals(actual)\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_combine_by_coords_previously_failed(self):\n         # In the above scenario, one file is missing, containing the data for\n         # one year's data for one variable.\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/3151"}