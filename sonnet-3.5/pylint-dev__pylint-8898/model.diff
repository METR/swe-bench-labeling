diff --git a/doc/user_guide/configuration/all-options.rst b/doc/user_guide/configuration/all-options.rst
index e09c940ef..bed366107 100644
--- a/doc/user_guide/configuration/all-options.rst
+++ b/doc/user_guide/configuration/all-options.rst
@@ -333,7 +333,7 @@ Standard Checkers
 
 --bad-names-rgxs
 """"""""""""""""
-*Bad variable names regexes, separated by a comma. If names match any regex, they will always be refused*
+*Bad variable names regexes, separated by newlines. If names match any regex, they will always be refused. Each regex can contain commas.*
 
 **Default:** ``""``
 
diff --git a/pylint/checkers/base/name_checker/checker.py b/pylint/checkers/base/name_checker/checker.py
index 42a7c6b2e..b220b5366 100644
--- a/pylint/checkers/base/name_checker/checker.py
+++ b/pylint/checkers/base/name_checker/checker.py
@@ -20,6 +20,10 @@ import astroid
 from astroid import nodes
 
 from pylint import constants, interfaces
+
+def regexp_list(string):
+    """Custom type for processing a list of regular expressions."""
+    return [re.compile(s.strip()) for s in string.split('\n') if s.strip()]
 from pylint.checkers import utils
 from pylint.checkers.base.basic_checker import _BasicChecker
 from pylint.checkers.base.name_checker.naming_style import (
@@ -229,12 +233,12 @@ class NameChecker(_BasicChecker):
             "bad-names-rgxs",
             {
                 "default": "",
-                "type": "regexp_csv",
+                "type": regexp_list,
                 "metavar": "<names>",
-                "help": "Bad variable names regexes, separated by a comma. If names match any regex,"
+                "help": "Bad variable names regexes, separated by newlines. If names match any regex,"
                 " they will always be refused",
             },
-        ),
+        ),  # Using regexp_list allows for regex patterns containing commas
         (
             "name-group",
             {
@@ -293,9 +297,7 @@ class NameChecker(_BasicChecker):
         self._good_names_rgxs_compiled = [
             re.compile(rgxp) for rgxp in self.linter.config.good_names_rgxs
         ]
-        self._bad_names_rgxs_compiled = [
-            re.compile(rgxp) for rgxp in self.linter.config.bad_names_rgxs
-        ]
+        self._bad_names_rgxs_compiled = self.linter.config.bad_names_rgxs
 
     def _create_naming_rules(self) -> tuple[dict[str, Pattern[str]], dict[str, str]]:
         regexps: dict[str, Pattern[str]] = {}
@@ -538,7 +540,7 @@ class NameChecker(_BasicChecker):
     def _name_disallowed_by_regex(self, name: str) -> bool:
         return name in self.linter.config.bad_names or any(
             pattern.match(name) for pattern in self._bad_names_rgxs_compiled
-        )
+        )  # The _bad_names_rgxs_compiled is already a list of compiled regexes
 
     def _check_name(
         self,
