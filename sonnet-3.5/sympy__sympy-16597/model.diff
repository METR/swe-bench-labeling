diff --git a/sympy/assumptions/handlers/__init__.py b/sympy/assumptions/handlers/__init__.py
index 6ca7f27dd7..a7f4eed34e 100644
--- a/sympy/assumptions/handlers/__init__.py
+++ b/sympy/assumptions/handlers/__init__.py
@@ -1,2 +1,3 @@
 from .common import (AskHandler, CommonHandler, AskCommutativeHandler,
     TautologicalHandler, test_closed_group)
+from .sets import AskEvenHandler
diff --git a/sympy/assumptions/handlers/ntheory.py b/sympy/assumptions/handlers/ntheory.py
index 91761bad0d..ad1f866a8a 100644
--- a/sympy/assumptions/handlers/ntheory.py
+++ b/sympy/assumptions/handlers/ntheory.py
@@ -128,6 +128,16 @@ def Basic(expr, assumptions):
         if expr.is_number:
             return AskEvenHandler._number(expr, assumptions)
 
+    @staticmethod
+    def Symbol(expr, assumptions):
+        if Q.even(expr) in assumptions:
+            return ask(Q.finite(expr), assumptions)
+
+    @staticmethod
+    def Apply(expr, assumptions):
+        if ask(Q.even(expr), assumptions):
+            return ask(Q.finite(expr), assumptions)
+
     @staticmethod
     def Mul(expr, assumptions):
         """
diff --git a/sympy/assumptions/handlers/sets.py b/sympy/assumptions/handlers/sets.py
index f4cb0a9b48..9ea965164c 100644
--- a/sympy/assumptions/handlers/sets.py
+++ b/sympy/assumptions/handlers/sets.py
@@ -651,6 +651,31 @@ def Rational(expr, assumptions):
     Infinity, NegativeInfinity, ComplexInfinity, Pi, Exp1 = \
         [staticmethod(CommonHandler.AlwaysFalse)]*5
 
+class AskEvenHandler(CommonHandler):
+    """Handler for Q.even key."""
+
+    @staticmethod
+    def Dummy(expr, assumptions):
+        if Q.even(expr) in assumptions:
+            return ask(Q.finite(expr), assumptions)
+
+    @staticmethod
+    def Symbol(expr, assumptions):
+        if Q.even(expr) in assumptions:
+            return ask(Q.finite(expr), assumptions)
+
+    @staticmethod
+    def Integer(expr, assumptions):
+        return expr.p % 2 == 0
+
+    @staticmethod
+    def Rational(expr, assumptions):
+        return False
+
+    @staticmethod
+    def ImaginaryUnit(expr, assumptions):
+        return False
+
     @staticmethod
     def exp(expr, assumptions):
         x = expr.args[0]
