{"instance_id": "astropy__astropy-8872", "score": "I", "diff": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex ded609cbe9..9f7ff73c77 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -296,9 +296,9 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n                 if not copy:\n                     return value\n \n-                if not (np.can_cast(np.float32, value.dtype) or\n+                if not (np.can_cast(np.float16, value.dtype) or\n                         value.dtype.fields):\n-                    dtype = float\n+                    dtype = value.dtype\n \n             return np.array(value, dtype=dtype, copy=copy, order=order,\n                             subok=True, ndmin=ndmin)\ndiff --git a/astropy/units/tests/test_float16_quantity.py b/astropy/units/tests/test_float16_quantity.py\nnew file mode 100644\nindex 0000000000..bf752febee\n--- /dev/null\n+++ b/astropy/units/tests/test_float16_quantity.py\n@@ -0,0 +1,31 @@\n+\n+import numpy as np\n+from astropy import units as u\n+\n+def test_float16_quantity():\n+    # Create a float16 value\n+    float16_value = np.float16(1)\n+\n+    # Create a Quantity with the float16 value\n+    quantity = float16_value * u.km\n+\n+    # Check that the dtype is preserved\n+    assert quantity.dtype == np.float16\n+\n+    # Check that the value is correct\n+    assert quantity.value == 1.0\n+\n+    # Check that the unit is correct\n+    assert quantity.unit == u.km\n+\n+    # Test with other float types for comparison\n+    assert (np.float32(1) * u.km).dtype == np.float32\n+    assert (np.float64(1) * u.km).dtype == np.float64\n+\n+    # Test with a float16 array\n+    float16_array = np.array([1, 2, 3], dtype=np.float16)\n+    quantity_array = float16_array * u.km\n+\n+    assert quantity_array.dtype == np.float16\n+    np.testing.assert_array_equal(quantity_array.value, float16_array)\n+    assert quantity_array.unit == u.km\n\\ No newline at end of file\n", "gold_standard_diff": "From 6bd8e0bc1d29db024db771d628547d01930252f8 Mon Sep 17 00:00:00 2001\nFrom: Marten van Kerkwijk <mhvk@astro.utoronto.ca>\nDate: Wed, 19 Jun 2019 16:30:55 -0400\nSubject: [PATCH] Let Quantity only convert (unsigned) integer to float by\n default.\n\n---\n CHANGES.rst                          |  3 +++\n astropy/units/quantity.py            | 11 ++++-------\n astropy/units/tests/test_quantity.py | 11 +++++++----\n 3 files changed, 14 insertions(+), 11 deletions(-)\n\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 0097160cfe61..7f63a54152fa 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -2314,6 +2314,9 @@ astropy.time\n astropy.units\n ^^^^^^^^^^^^^\n \n+- ``Quantity`` now preserves the ``dtype`` for anything that is floating\n+  point, including ``float16``. [#8872]\n+\n astropy.utils\n ^^^^^^^^^^^^^\n \ndiff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex ded609cbe9fc..e3eb8af853dc 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -215,8 +215,8 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n     dtype : ~numpy.dtype, optional\n         The dtype of the resulting Numpy array or scalar that will\n         hold the value.  If not provided, it is determined from the input,\n-        except that any input that cannot represent float (integer and bool)\n-        is converted to float.\n+        except that any integer and (non-Quantity) object inputs are converted\n+        to float by default.\n \n     copy : bool, optional\n         If `True` (default), then the value is copied.  Otherwise, a copy will\n@@ -296,8 +296,7 @@ def __new__(cls, value, unit=None, dtype=None, copy=True, order=None,\n                 if not copy:\n                     return value\n \n-                if not (np.can_cast(np.float32, value.dtype) or\n-                        value.dtype.fields):\n+                if value.dtype.kind in 'iu':\n                     dtype = float\n \n             return np.array(value, dtype=dtype, copy=copy, order=order,\n@@ -377,9 +376,7 @@ def __new__(cls, value, unit=None, dtype=None, copy=True, order=None,\n                             \"Numpy numeric type.\")\n \n         # by default, cast any integer, boolean, etc., to float\n-        if dtype is None and (not (np.can_cast(np.float32, value.dtype)\n-                                   or value.dtype.fields)\n-                              or value.dtype.kind == 'O'):\n+        if dtype is None and value.dtype.kind in 'iuO':\n             value = value.astype(float)\n \n         value = value.view(cls)\ndiff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex be18e65c5bc8..6fbe3db42260 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -138,10 +138,13 @@ def test_preserve_dtype(self):\n         assert q2.value == float(q1.value)\n         assert q2.unit == q1.unit\n \n-        # but we should preserve float32\n-        a3 = np.array([1., 2.], dtype=np.float32)\n-        q3 = u.Quantity(a3, u.yr)\n-        assert q3.dtype == a3.dtype\n+        # but we should preserve any float32 or even float16\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # items stored as objects by numpy should be converted to float\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/8872"}