diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..3b990c4b71 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1110,6 +1110,14 @@ class EvaluateFalseTransformer(ast.NodeTransformer):
         ast.BitAnd: 'And',
         ast.BitXor: 'Not',
     }
+    comparisons = {
+        ast.Lt: 'Lt',
+        ast.LtE: 'Le',
+        ast.Gt: 'Gt',
+        ast.GtE: 'Ge',
+        ast.Eq: 'Eq',
+        ast.NotEq: 'Ne',
+    }
     functions = (
         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',
         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',
@@ -1186,6 +1194,23 @@ def visit_BinOp(self, node):
             return new_node
         return node
 
+    def visit_Compare(self, node):
+        # Handle comparison operators
+        if len(node.ops) == 1 and node.ops[0].__class__ in self.comparisons:
+            sympy_class = self.comparisons[node.ops[0].__class__]
+            left = self.visit(node.left)
+            right = self.visit(node.comparators[0])
+            
+            new_node = ast.Call(
+                func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                args=[left, right],
+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                starargs=None,
+                kwargs=None
+            )
+            return new_node
+        return self.generic_visit(node)
+
     def visit_Call(self, node):
         new_node = self.generic_visit(node)
         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py
index 7c43e1fce3..246a0dae52 100644
--- a/sympy/parsing/tests/test_sympy_parser.py
+++ b/sympy/parsing/tests/test_sympy_parser.py
@@ -355,6 +355,45 @@ def test_builtins():
     assert str(parse_expr('pow(38, -1, 97)')) == '23'
 
 
+def test_relational_evaluate_false():
+    """Test that parse_expr respects evaluate=False for relational expressions."""
+    from sympy import Lt, Le, Gt, Ge, Eq, Ne
+    
+    # Test all relational operators with numeric operands
+    result = parse_expr('1 < 2', evaluate=False)
+    assert isinstance(result, Lt)
+    assert str(result) == "1 < 2"
+    
+    result = parse_expr('1 <= 2', evaluate=False)
+    assert isinstance(result, Le)
+    assert str(result) == "1 <= 2"
+    
+    result = parse_expr('1 > 2', evaluate=False)
+    assert isinstance(result, Gt)
+    assert str(result) == "1 > 2"
+    
+    result = parse_expr('1 >= 2', evaluate=False)
+    assert isinstance(result, Ge)
+    assert str(result) == "1 >= 2"
+    
+    result = parse_expr('1 == 2', evaluate=False)
+    assert isinstance(result, Eq)
+    assert str(result) == "Eq(1, 2)"
+    
+    result = parse_expr('1 != 2', evaluate=False)
+    assert isinstance(result, Ne)
+    assert str(result) == "Ne(1, 2)"
+    
+    # Test with symbolic expressions
+    result = parse_expr('x < y', evaluate=False)
+    assert isinstance(result, Lt)
+    assert str(result) == "x < y"
+    
+    # Ensure evaluate=True still works
+    assert parse_expr('1 < 2') == True
+    assert parse_expr('1 > 2') == False
+
+
 def test_issue_22822():
     raises(ValueError, lambda: parse_expr('x', {'': 1}))
     data = {'some_parameter': None}
diff --git a/test_parse_expr_relational.py b/test_parse_expr_relational.py
new file mode 100644
index 0000000000..d46cbfed28
--- /dev/null
+++ b/test_parse_expr_relational.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""Test parse_expr with evaluate=False for relational expressions."""
+
+from sympy.parsing.sympy_parser import parse_expr
+from sympy import Lt, Le, Gt, Ge, Eq, Ne, symbols
+
+
+def test_parse_expr_relational_evaluate_false():
+    """Test that parse_expr correctly handles evaluate=False for relationals."""
+    
+    # Test basic numeric comparisons
+    result = parse_expr('1 < 2', evaluate=False)
+    assert isinstance(result, Lt), f"Expected Lt instance, got {type(result)}"
+    assert str(result) == "1 < 2"
+    
+    result = parse_expr('1 <= 2', evaluate=False)
+    assert isinstance(result, Le), f"Expected Le instance, got {type(result)}"
+    assert str(result) == "1 <= 2"
+    
+    result = parse_expr('1 > 2', evaluate=False)  
+    assert isinstance(result, Gt), f"Expected Gt instance, got {type(result)}"
+    assert str(result) == "1 > 2"
+    
+    result = parse_expr('1 >= 2', evaluate=False)
+    assert isinstance(result, Ge), f"Expected Ge instance, got {type(result)}"
+    assert str(result) == "1 >= 2"
+    
+    result = parse_expr('1 == 2', evaluate=False)
+    assert isinstance(result, Eq), f"Expected Eq instance, got {type(result)}"
+    assert str(result) == "Eq(1, 2)"
+    
+    result = parse_expr('1 != 2', evaluate=False)
+    assert isinstance(result, Ne), f"Expected Ne instance, got {type(result)}"
+    assert str(result) == "Ne(1, 2)"
+    
+    # Test with symbolic expressions
+    result = parse_expr('x < y', evaluate=False)
+    assert isinstance(result, Lt), f"Expected Lt instance, got {type(result)}"
+    assert str(result) == "x < y"
+    
+    result = parse_expr('x + 1 > 3', evaluate=False)
+    assert isinstance(result, Gt), f"Expected Gt instance, got {type(result)}"
+    assert str(result) == "x + 1 > 3"
+    
+    print("All tests passed!")
+
+
+def test_parse_expr_relational_evaluate_true():
+    """Test that parse_expr still evaluates correctly when evaluate=True."""
+    
+    # Test numeric comparisons evaluate to boolean
+    assert parse_expr('1 < 2') == True
+    assert parse_expr('1 <= 2') == True
+    assert parse_expr('1 > 2') == False
+    assert parse_expr('1 >= 2') == False  
+    assert parse_expr('1 == 2') == False
+    assert parse_expr('1 != 2') == True
+    
+    # Test symbolic comparisons remain as relational objects
+    result = parse_expr('x < 2')
+    assert isinstance(result, Lt)
+    
+    # Equality of same symbol to itself gives True
+    result = parse_expr('x == x')
+    assert result == True
+    
+    # Inequality of different symbols gives relational when evaluate=False
+    result = parse_expr('x == y', evaluate=False)
+    assert isinstance(result, Eq)
+    
+    print("Evaluation tests passed!")
+
+
+if __name__ == "__main__":
+    test_parse_expr_relational_evaluate_false()
+    test_parse_expr_relational_evaluate_true()
