diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index b3daa06f1..02fb6de9c 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -245,35 +245,45 @@ class GoogleDocstring:
         return lines
 
     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False
-                       ) -> Tuple[str, str, List[str]]:
+                       ) -> List[Tuple[str, str, List[str]]]:
         line = next(self._line_iter)
 
         before, colon, after = self._partition_field_on_colon(line)
-        _name, _type, _desc = before, '', after
+        params = [param.strip() for param in before.split(',')]
+        results = []
 
-        if parse_type:
-            match = _google_typed_arg_regex.match(before)
-            if match:
-                _name = match.group(1)
-                _type = match.group(2)
+        for param in params:
+            _name, _type, _desc = param, '', after
 
-        _name = self._escape_args_and_kwargs(_name)
+            if parse_type:
+                match = _google_typed_arg_regex.match(param)
+                if match:
+                    _name = match.group(1)
+                    _type = match.group(2)
+
+            _name = self._escape_args_and_kwargs(_name)
+
+            if prefer_type and not _type:
+                _type, _name = _name, _type
 
-        if prefer_type and not _type:
-            _type, _name = _name, _type
         indent = self._get_indent(line) + 1
         _descs = [_desc] + self._dedent(self._consume_indented_block(indent))
         _descs = self.__class__(_descs, self._config).lines()
-        return _name, _type, _descs
+
+        for param in params:
+            results.append((param.strip(), _type, _descs))
+
+        return results
 
     def _consume_fields(self, parse_type: bool = True, prefer_type: bool = False
                         ) -> List[Tuple[str, str, List[str]]]:
         self._consume_empty()
         fields = []
         while not self._is_section_break():
-            _name, _type, _desc = self._consume_field(parse_type, prefer_type)
-            if _name or _type or _desc:
-                fields.append((_name, _type, _desc,))
+            field_list = self._consume_field(parse_type, prefer_type)
+            for _name, _type, _desc in field_list:
+                if _name or _type or _desc:
+                    fields.append((_name, _type, _desc))
         return fields
 
     def _consume_inline_attribute(self) -> Tuple[str, List[str]]:
@@ -391,30 +401,33 @@ class GoogleDocstring:
                                 ) -> List[str]:
         lines = []
         for _name, _type, _desc in fields:
+            names = [n.strip() for n in _name.split(',')]
             _desc = self._strip_empty(_desc)
             if any(_desc):
                 _desc = self._fix_field_desc(_desc)
-                field = ':%s %s: ' % (field_role, _name)
+                field = ':%s %s: ' % (field_role, ', '.join(names))
                 lines.extend(self._format_block(field, _desc))
             else:
-                lines.append(':%s %s:' % (field_role, _name))
+                lines.append(':%s %s:' % (field_role, ', '.join(names)))
 
             if _type:
-                lines.append(':%s %s: %s' % (type_role, _name, _type))
+                for name in names:
+                    lines.append(':%s %s: %s' % (type_role, name, _type))
         return lines + ['']
 
     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
         _desc = self._strip_empty(_desc)
         has_desc = any(_desc)
         separator = ' -- ' if has_desc else ''
-        if _name:
+        names = [n.strip() for n in _name.split(',')]
+        if names:
             if _type:
                 if '`' in _type:
-                    field = '**%s** (%s)%s' % (_name, _type, separator)
+                    field = '**%s** (%s)%s' % (', '.join(names), _type, separator)
                 else:
-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)
+                    field = '**%s** (*%s*)%s' % (', '.join(names), _type, separator)
             else:
-                field = '**%s**%s' % (_name, separator)
+                field = '**%s**%s' % (', '.join(names), separator)
         elif _type:
             if '`' in _type:
                 field = '%s%s' % (_type, separator)
diff --git a/tox.ini b/tox.ini
index bddd822a6..34baee205 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
