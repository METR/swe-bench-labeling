{"instance_id": "django__django-13670", "score": "C", "diff": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d79e0..526414363b 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):\n \n     def y(self):\n         \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\ndiff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex d050ac4352..098ba32588 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -105,6 +105,22 @@ class DateFormatTests(SimpleTestCase):\n         self.assertEqual(dateformat.format(my_birthday, 'Y'), '1979')\n         self.assertEqual(dateformat.format(my_birthday, 'z'), '189')\n \n+    def test_year_before_1000(self):\n+        # Test years < 1000 to ensure 'y' format returns the last two digits with leading zeros\n+        tests = [\n+            (1, '01'),\n+            (9, '09'),\n+            (10, '10'),\n+            (99, '99'),\n+            (100, '00'),\n+            (123, '23'),\n+            (999, '99'),\n+            (1000, '00'),\n+            (1001, '01'),\n+        ]\n+        for year, expected in tests:\n+            self.assertEqual(dateformat.format(datetime(year, 1, 1), 'y'), expected)\n+\n     def test_dateformat(self):\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n", "gold_standard_diff": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d79e0f3..c4d9d035e479 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -325,8 +325,8 @@ def W(self):\n         return self.data.isocalendar()[1]\n \n     def y(self):\n-        \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        \"\"\"Year, 2 digits with leading zeros; e.g. '99'.\"\"\"\n+        return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\ndiff --git a/docs/ref/templates/builtins.txt b/docs/ref/templates/builtins.txt\nindex 1c79f3a2f585..17528cea187d 100644\n--- a/docs/ref/templates/builtins.txt\n+++ b/docs/ref/templates/builtins.txt\n@@ -1379,7 +1379,7 @@ Format character  Description                               Example output\n                   style. Proprietary extension.\n ``t``             Number of days in the given month.        ``28`` to ``31``\n **Year**\n-``y``             Year, 2 digits.                           ``'99'``\n+``y``             Year, 2 digits with leading zeros.        ``'00'`` to ``'99'``\n ``Y``             Year, 4 digits.                           ``'1999'``\n ``L``             Boolean for whether it's a leap year.     ``True`` or ``False``\n ``o``             ISO-8601 week-numbering year,             ``'1999'``\ndiff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex d050ac43523f..5eb166e2bdc8 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -165,3 +165,16 @@ def test_r_format_with_non_en_locale(self):\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n             )\n+\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13670"}