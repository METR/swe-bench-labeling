{"instance_id": "django__django-16877", "score": "C", "diff": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5289ef34a0..729e37b7d3 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -980,4 +980,13 @@ def pprint(value):\n     try:\n         return pformat(value)\n     except Exception as e:\n+        return f\"Error in pprint: {e}\"\n         return \"Error in formatting: %s: %s\" % (e.__class__.__name__, e)\n+\n+\n+@register.filter(is_safe=True)\n+def escapeseq(value):\n+    \"\"\"\n+    Escape each item in the given sequence.\n+    \"\"\"\n+    return [conditional_escape(item) for item in value]\n", "gold_standard_diff": "diff --git a/AUTHORS b/AUTHORS\nindex 2e3a91c7569f..95f24762ee3d 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -108,6 +108,7 @@ answer newbie questions, and generally made Django that much better:\n     Arthur <avandorp@gmail.com>\n     Arthur Jovart <arthur@jovart.com>\n     Arthur Koziel <http://arthurkoziel.com>\n+    Arthur Moreira <moreirarthur96@gmail.com>\n     Arthur Rio <arthur.rio44@gmail.com>\n     Arvis Bickovskis <viestards.lists@gmail.com>\n     Arya Khaligh <bartararya@gmail.com>\ndiff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5289ef34a0be..589ca3841423 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -444,6 +444,16 @@ def escape_filter(value):\n     return conditional_escape(value)\n \n \n+@register.filter(is_safe=True)\n+def escapeseq(value):\n+    \"\"\"\n+    An \"escape\" filter for sequences. Mark each element in the sequence,\n+    individually, as a string that should be auto-escaped. Return a list with\n+    the results.\n+    \"\"\"\n+    return [conditional_escape(obj) for obj in value]\n+\n+\n @register.filter(is_safe=True)\n @stringfilter\n def force_escape(value):\ndiff --git a/docs/ref/templates/builtins.txt b/docs/ref/templates/builtins.txt\nindex 3aa20dfc716e..695357c5a0d0 100644\n--- a/docs/ref/templates/builtins.txt\n+++ b/docs/ref/templates/builtins.txt\n@@ -1831,6 +1831,8 @@ For example, you can apply ``escape`` to fields when :ttag:`autoescape` is off:\n         {{ title|escape }}\n     {% endautoescape %}\n \n+To escape each element of a sequence, use the :tfilter:`escapeseq` filter.\n+\n .. templatefilter:: escapejs\n \n ``escapejs``\n@@ -1849,6 +1851,23 @@ For example:\n If ``value`` is ``\"testing\\r\\njavascript 'string\\\" <b>escaping</b>\"``,\n the output will be ``\"testing\\\\u000D\\\\u000Ajavascript \\\\u0027string\\\\u0022 \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"``.\n \n+.. templatefilter:: escapeseq\n+\n+``escapeseq``\n+-------------\n+\n+.. versionadded:: 5.0\n+\n+Applies the :tfilter:`escape` filter to each element of a sequence. Useful in\n+conjunction with other filters that operate on sequences, such as\n+:tfilter:`join`. For example:\n+\n+.. code-block:: html+django\n+\n+    {% autoescape off %}\n+        {{ my_list|escapeseq|join:\", \" }}\n+    {% endautoescape %}\n+\n .. templatefilter:: filesizeformat\n \n ``filesizeformat``\ndiff --git a/docs/releases/5.0.txt b/docs/releases/5.0.txt\nindex 611a7bd68b71..e6526dd798f0 100644\n--- a/docs/releases/5.0.txt\n+++ b/docs/releases/5.0.txt\n@@ -345,7 +345,8 @@ Signals\n Templates\n ~~~~~~~~~\n \n-* ...\n+* The new :tfilter:`escapeseq` template filter applies :tfilter:`escape` to\n+  each element of a sequence.\n \n Tests\n ~~~~~\ndiff --git a/tests/template_tests/filter_tests/test_escapeseq.py b/tests/template_tests/filter_tests/test_escapeseq.py\nnew file mode 100644\nindex 000000000000..27092f5828bb\n--- /dev/null\n+++ b/tests/template_tests/filter_tests/test_escapeseq.py\n@@ -0,0 +1,59 @@\n+from django.test import SimpleTestCase\n+from django.utils.safestring import mark_safe\n+\n+from ..utils import setup\n+\n+\n+class EscapeseqTests(SimpleTestCase):\n+    \"\"\"\n+    The \"escapeseq\" filter works the same whether autoescape is on or off,\n+    and has no effect on strings already marked as safe.\n+    \"\"\"\n+\n+    @setup(\n+        {\n+            \"escapeseq_basic\": (\n+                '{{ a|escapeseq|join:\", \" }} -- {{ b|escapeseq|join:\", \" }}'\n+            ),\n+        }\n+    )\n+    def test_basic(self):\n+        output = self.engine.render_to_string(\n+            \"escapeseq_basic\",\n+            {\"a\": [\"x&y\", \"<p>\"], \"b\": [mark_safe(\"x&y\"), mark_safe(\"<p>\")]},\n+        )\n+        self.assertEqual(output, \"x&amp;y, &lt;p&gt; -- x&y, <p>\")\n+\n+    @setup(\n+        {\n+            \"escapeseq_autoescape_off\": (\n+                '{% autoescape off %}{{ a|escapeseq|join:\", \" }}'\n+                \" -- \"\n+                '{{ b|escapeseq|join:\", \"}}{% endautoescape %}'\n+            )\n+        }\n+    )\n+    def test_autoescape_off(self):\n+        output = self.engine.render_to_string(\n+            \"escapeseq_autoescape_off\",\n+            {\"a\": [\"x&y\", \"<p>\"], \"b\": [mark_safe(\"x&y\"), mark_safe(\"<p>\")]},\n+        )\n+        self.assertEqual(output, \"x&amp;y, &lt;p&gt; -- x&y, <p>\")\n+\n+    @setup({\"escapeseq_join\": '{{ a|escapeseq|join:\"<br/>\" }}'})\n+    def test_chain_join(self):\n+        output = self.engine.render_to_string(\"escapeseq_join\", {\"a\": [\"x&y\", \"<p>\"]})\n+        self.assertEqual(output, \"x&amp;y<br/>&lt;p&gt;\")\n+\n+    @setup(\n+        {\n+            \"escapeseq_join_autoescape_off\": (\n+                '{% autoescape off %}{{ a|escapeseq|join:\"<br/>\" }}{% endautoescape %}'\n+            ),\n+        }\n+    )\n+    def test_chain_join_autoescape_off(self):\n+        output = self.engine.render_to_string(\n+            \"escapeseq_join_autoescape_off\", {\"a\": [\"x&y\", \"<p>\"]}\n+        )\n+        self.assertEqual(output, \"x&amp;y<br/>&lt;p&gt;\")\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16877"}