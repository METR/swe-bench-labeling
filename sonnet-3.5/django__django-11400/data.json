{"instance_id": "django__django-11400", "score": "I", "diff": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..a5ec1cf9cd 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -198,6 +198,8 @@ class RelatedFieldListFilter(FieldListFilter):\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering or ()\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +421,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n+        ordering = ()\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering or ()\n+        return field.get_choices(include_blank=False, ordering=ordering, limit_choices_to={'pk__in': pk_qs})\n         return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n", "gold_standard_diff": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2fe..a9e5563c6cbf 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -193,11 +193,17 @@ def has_output(self):\n     def expected_parameters(self):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n \n-    def field_choices(self, field, request, model_admin):\n-        ordering = ()\n+    def field_admin_ordering(self, field, request, model_admin):\n+        \"\"\"\n+        Return the model admin's ordering for related field, if provided.\n+        \"\"\"\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n+            return related_admin.get_ordering(request)\n+        return ()\n+\n+    def field_choices(self, field, request, model_admin):\n+        ordering = self.field_admin_ordering(field, request, model_admin)\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +425,5 @@ def choices(self, changelist):\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        ordering = self.field_admin_ordering(field, request, model_admin)\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 194514c90008..1aad845470f4 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -825,9 +825,11 @@ def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_\n             if hasattr(self.remote_field, 'get_related_field')\n             else 'pk'\n         )\n+        qs = rel_model._default_manager.complex_filter(limit_choices_to)\n+        if ordering:\n+            qs = qs.order_by(*ordering)\n         return (blank_choice if include_blank else []) + [\n-            (choice_func(x), str(x))\n-            for x in rel_model._default_manager.complex_filter(limit_choices_to).order_by(*ordering)\n+            (choice_func(x), str(x)) for x in qs\n         ]\n \n     def value_to_string(self, obj):\ndiff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex eb6b9342594b..700410a086bb 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -122,8 +122,11 @@ def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, orderi\n         Analog of django.db.models.fields.Field.get_choices(), provided\n         initially for utilization by RelatedFieldListFilter.\n         \"\"\"\n+        qs = self.related_model._default_manager.all()\n+        if ordering:\n+            qs = qs.order_by(*ordering)\n         return (blank_choice if include_blank else []) + [\n-            (x.pk, str(x)) for x in self.related_model._default_manager.order_by(*ordering)\n+            (x.pk, str(x)) for x in qs\n         ]\n \n     def is_hidden(self):\ndiff --git a/docs/releases/2.2.5.txt b/docs/releases/2.2.5.txt\nindex 0b9310a34471..9f143c8d96d4 100644\n--- a/docs/releases/2.2.5.txt\n+++ b/docs/releases/2.2.5.txt\n@@ -17,3 +17,8 @@ Bugfixes\n   :class:`~django.contrib.postgres.fields.JSONField` and\n   :class:`~django.contrib.postgres.fields.HStoreField` when using on\n   expressions with params (:ticket:`30672`).\n+\n+* Fixed a regression in Django 2.2 where\n+  :attr:`ModelAdmin.list_filter <django.contrib.admin.ModelAdmin.list_filter>`\n+  choices to foreign objects don't respect a model's ``Meta.ordering``\n+  (:ticket:`30449`).\ndiff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py\nindex 4ff7d012e553..4e6f1f4732c9 100644\n--- a/tests/admin_filters/tests.py\n+++ b/tests/admin_filters/tests.py\n@@ -591,6 +591,22 @@ class BookAdmin(ModelAdmin):\n         expected = [(self.john.pk, 'John Blue'), (self.jack.pk, 'Jack Red')]\n         self.assertEqual(filterspec.lookup_choices, expected)\n \n+    def test_relatedfieldlistfilter_foreignkey_default_ordering(self):\n+        \"\"\"RelatedFieldListFilter ordering respects Model.ordering.\"\"\"\n+        class BookAdmin(ModelAdmin):\n+            list_filter = ('employee',)\n+\n+        self.addCleanup(setattr, Employee._meta, 'ordering', Employee._meta.ordering)\n+        Employee._meta.ordering = ('name',)\n+        modeladmin = BookAdmin(Book, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [(self.jack.pk, 'Jack Red'), (self.john.pk, 'John Blue')]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n     def test_relatedfieldlistfilter_manytomany(self):\n         modeladmin = BookAdmin(Book, site)\n \n@@ -696,6 +712,23 @@ def test_relatedfieldlistfilter_reverse_relationships(self):\n         filterspec = changelist.get_filters(request)[0]\n         self.assertEqual(len(filterspec), 0)\n \n+    def test_relatedfieldlistfilter_reverse_relationships_default_ordering(self):\n+        self.addCleanup(setattr, Book._meta, 'ordering', Book._meta.ordering)\n+        Book._meta.ordering = ('title',)\n+        modeladmin = CustomUserAdmin(User, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [\n+            (self.bio_book.pk, 'Django: a biography'),\n+            (self.djangonaut_book.pk, 'Djangonaut: an art of living'),\n+            (self.guitar_book.pk, 'Guitar for dummies'),\n+            (self.django_book.pk, 'The Django Book')\n+        ]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n     def test_relatedonlyfieldlistfilter_foreignkey(self):\n         modeladmin = BookAdminRelatedOnlyFilter(Book, site)\n \n@@ -708,6 +741,57 @@ def test_relatedonlyfieldlistfilter_foreignkey(self):\n         expected = [(self.alfred.pk, 'alfred'), (self.bob.pk, 'bob')]\n         self.assertEqual(sorted(filterspec.lookup_choices), sorted(expected))\n \n+    def test_relatedonlyfieldlistfilter_foreignkey_ordering(self):\n+        \"\"\"RelatedOnlyFieldListFilter ordering respects ModelAdmin.ordering.\"\"\"\n+        class EmployeeAdminWithOrdering(ModelAdmin):\n+            ordering = ('name',)\n+\n+        class BookAdmin(ModelAdmin):\n+            list_filter = (\n+                ('employee', RelatedOnlyFieldListFilter),\n+            )\n+\n+        albert = Employee.objects.create(name='Albert Green', department=self.dev)\n+        self.djangonaut_book.employee = albert\n+        self.djangonaut_book.save()\n+        self.bio_book.employee = self.jack\n+        self.bio_book.save()\n+\n+        site.register(Employee, EmployeeAdminWithOrdering)\n+        self.addCleanup(lambda: site.unregister(Employee))\n+        modeladmin = BookAdmin(Book, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [(albert.pk, 'Albert Green'), (self.jack.pk, 'Jack Red')]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n+    def test_relatedonlyfieldlistfilter_foreignkey_default_ordering(self):\n+        \"\"\"RelatedOnlyFieldListFilter ordering respects Meta.ordering.\"\"\"\n+        class BookAdmin(ModelAdmin):\n+            list_filter = (\n+                ('employee', RelatedOnlyFieldListFilter),\n+            )\n+\n+        albert = Employee.objects.create(name='Albert Green', department=self.dev)\n+        self.djangonaut_book.employee = albert\n+        self.djangonaut_book.save()\n+        self.bio_book.employee = self.jack\n+        self.bio_book.save()\n+\n+        self.addCleanup(setattr, Employee._meta, 'ordering', Employee._meta.ordering)\n+        Employee._meta.ordering = ('name',)\n+        modeladmin = BookAdmin(Book, site)\n+\n+        request = self.request_factory.get('/')\n+        request.user = self.alfred\n+        changelist = modeladmin.get_changelist_instance(request)\n+        filterspec = changelist.get_filters(request)[0][0]\n+        expected = [(albert.pk, 'Albert Green'), (self.jack.pk, 'Jack Red')]\n+        self.assertEqual(filterspec.lookup_choices, expected)\n+\n     def test_relatedonlyfieldlistfilter_underscorelookup_foreignkey(self):\n         Department.objects.create(code='TEST', description='Testing')\n         self.djangonaut_book.employee = self.john\ndiff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex bb82c7b93dac..abc5273d9021 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -222,9 +222,9 @@ class GetChoicesOrderingTests(TestCase):\n \n     @classmethod\n     def setUpTestData(cls):\n-        cls.foo1 = Foo.objects.create(a='a', d='12.34')\n+        cls.foo1 = Foo.objects.create(a='a', d='12.35')\n         cls.foo2 = Foo.objects.create(a='b', d='12.34')\n-        cls.bar1 = Bar.objects.create(a=cls.foo1, b='a')\n+        cls.bar1 = Bar.objects.create(a=cls.foo1, b='b')\n         cls.bar2 = Bar.objects.create(a=cls.foo2, b='a')\n         cls.field = Bar._meta.get_field('a')\n \n@@ -241,6 +241,14 @@ def test_get_choices(self):\n             [self.foo2, self.foo1]\n         )\n \n+    def test_get_choices_default_ordering(self):\n+        self.addCleanup(setattr, Foo._meta, 'ordering', Foo._meta.ordering)\n+        Foo._meta.ordering = ('d',)\n+        self.assertChoicesEqual(\n+            self.field.get_choices(include_blank=False),\n+            [self.foo2, self.foo1]\n+        )\n+\n     def test_get_choices_reverse_related_field(self):\n         self.assertChoicesEqual(\n             self.field.remote_field.get_choices(include_blank=False, ordering=('a',)),\n@@ -250,3 +258,11 @@ def test_get_choices_reverse_related_field(self):\n             self.field.remote_field.get_choices(include_blank=False, ordering=('-a',)),\n             [self.bar2, self.bar1]\n         )\n+\n+    def test_get_choices_reverse_related_field_default_ordering(self):\n+        self.addCleanup(setattr, Bar._meta, 'ordering', Bar._meta.ordering)\n+        Bar._meta.ordering = ('b',)\n+        self.assertChoicesEqual(\n+            self.field.remote_field.get_choices(include_blank=False),\n+            [self.bar2, self.bar1]\n+        )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11400"}