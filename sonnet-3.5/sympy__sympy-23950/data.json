{"instance_id": "sympy__sympy-23950", "score": "C", "diff": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex b2d4268d12..6a7db833b0 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,5 @@ def binary_symbols(self):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        from sympy import Intersection, S\n+        return Intersection(S.UniversalSet, self.args[1])\ndiff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 1973fed19c..88b1a82544 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -39,12 +39,11 @@ def test_binary_symbols():\n \n \n def test_as_set():\n+    from sympy import Intersection, FiniteSet, Interval\n     x = Symbol('x')\n     y = Symbol('y')\n-    # Contains is a BooleanFunction whose value depends on an arg's\n-    # containment in a Set -- rewriting as a Set is not yet implemented\n-    raises(NotImplementedError, lambda:\n-           Contains(x, FiniteSet(y)).as_set())\n+    assert Contains(x, FiniteSet(y)).as_set() == Intersection(S.UniversalSet, FiniteSet(y))\n+    assert Contains(x, Interval(0, 1)).as_set() == Interval(0, 1)\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n", "gold_standard_diff": "From 863f52014c3ce94e71ac6199dfee47a5d97854c0 Mon Sep 17 00:00:00 2001\nFrom: NotWearingPants <26556598+NotWearingPants@users.noreply.github.com>\nDate: Sat, 20 Aug 2022 21:15:24 +0300\nSubject: [PATCH] feat: support Contains.as_set\n\n---\n sympy/sets/contains.py            | 2 +-\n sympy/sets/tests/test_contains.py | 7 +++----\n 2 files changed, 4 insertions(+), 5 deletions(-)\n\ndiff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex b2d4268d1288..997a4d8e1685 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,4 @@ def binary_symbols(self):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        return self.args[1]\ndiff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 1973fed19c4e..cd56148d9d22 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -41,10 +41,9 @@ def test_binary_symbols():\n def test_as_set():\n     x = Symbol('x')\n     y = Symbol('y')\n-    # Contains is a BooleanFunction whose value depends on an arg's\n-    # containment in a Set -- rewriting as a Set is not yet implemented\n-    raises(NotImplementedError, lambda:\n-           Contains(x, FiniteSet(y)).as_set())\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/23950"}