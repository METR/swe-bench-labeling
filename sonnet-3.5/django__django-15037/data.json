{"instance_id": "django__django-15037", "score": "I", "diff": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477..f6410835e4 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -124,10 +124,15 @@ class Command(BaseCommand):\n                             \"self\" if relations[column_name][1] == table_name\n                             else table2model(relations[column_name][1])\n                         )\n+                        rel_field = relations[column_name][2]  # Get the referenced field\n                         if rel_to in known_models:\n                             field_type = '%s(%s' % (rel_type, rel_to)\n                         else:\n                             field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        if rel_field and rel_field != 'id':\n+                            field_type += \", to_field='%s'\" % rel_field\n+                        # Add a comment to explain the foreign key reference\n+                        comment_notes.append('Field references %s.%s' % (rel_to, rel_field))\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n", "gold_standard_diff": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477d4..d64725ca733a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -116,13 +116,17 @@ def table2model(table_name):\n                         extra_params['unique'] = True\n \n                     if is_relation:\n+                        ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop('unique', False) or extra_params.get('primary_key'):\n                             rel_type = 'OneToOneField'\n                         else:\n                             rel_type = 'ForeignKey'\n+                            ref_pk_column = connection.introspection.get_primary_key_column(cursor, ref_db_table)\n+                            if ref_pk_column and ref_pk_column != ref_db_column:\n+                                extra_params['to_field'] = ref_db_column\n                         rel_to = (\n-                            \"self\" if relations[column_name][1] == table_name\n-                            else table2model(relations[column_name][1])\n+                            'self' if ref_db_table == table_name\n+                            else table2model(ref_db_table)\n                         )\n                         if rel_to in known_models:\n                             field_type = '%s(%s' % (rel_type, rel_to)\ndiff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py\nindex 4d2c224da9dc..ac201eeaa259 100644\n--- a/tests/inspectdb/models.py\n+++ b/tests/inspectdb/models.py\n@@ -21,6 +21,12 @@ class PeopleMoreData(models.Model):\n     license = models.CharField(max_length=255)\n \n \n+class ForeignKeyToField(models.Model):\n+    to_field_fk = models.ForeignKey(\n+        PeopleMoreData, models.CASCADE, to_field='people_unique',\n+    )\n+\n+\n class DigitsInColumnName(models.Model):\n     all_digits = models.CharField(max_length=11, db_column='123')\n     leading_digit = models.CharField(max_length=11, db_column='4extra')\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 8be168110613..1deffff14047 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,6 +204,16 @@ def test_attribute_name_not_python_keyword(self):\n             output,\n         )\n \n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_field(self):\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', \"\n+            \"models.DO_NOTHING, to_field='people_unique_id')\",\n+            out.getvalue(),\n+        )\n+\n     def test_digits_column_name_introspection(self):\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15037"}