{"instance_id": "django__django-15375", "score": "I", "diff": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8c4eae7906..fff2eca223 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -60,12 +60,12 @@ class Aggregate(Func):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n                     raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n-        if (default := c.default) is None:\n-            return c\n-        if hasattr(default, 'resolve_expression'):\n-            default = default.resolve_expression(query, allow_joins, reuse, summarize)\n-        c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        if (default := c.default) is not None:\n+            if hasattr(default, 'resolve_expression'):\n+                default = default.resolve_expression(query, allow_joins, reuse, summarize)\n+            c.default = None  # Reset the default argument before wrapping.\n+            return Coalesce(c, default, output_field=c._output_field_or_none)\n+        return c\n \n     @property\n     def default_alias(self):\ndiff --git a/tests/aggregates/test_aggregate_default.py b/tests/aggregates/test_aggregate_default.py\nnew file mode 100644\nindex 0000000000..bcdb81a1a7\n--- /dev/null\n+++ b/tests/aggregates/test_aggregate_default.py\n@@ -0,0 +1,32 @@\n+from django.db import models\n+from django.db.models import Sum, F\n+from django.test import TestCase\n+from django.test.utils import isolate_apps\n+\n+@isolate_apps('tests.db_functions')\n+class AggregateDefaultTests(TestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+\n+        class Book(models.Model):\n+            id = models.IntegerField(primary_key=True)\n+\n+        cls.Book = Book\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.Book.objects.bulk_create([\n+            cls.Book(id=1),\n+            cls.Book(id=2),\n+            cls.Book(id=3),\n+        ])\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        result = self.Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result, {'id__sum': 6})\n+\n+    def test_aggregate_with_default_no_results(self):\n+        self.Book.objects.all().delete()\n+        result = self.Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result, {'id__sum': 0})\ndiff --git a/tests/runtests.py b/tests/runtests.py\nindex 6bad838a95..f49c75f667 100755\n--- a/tests/runtests.py\n+++ b/tests/runtests.py\n@@ -351,6 +351,9 @@ def django_tests(verbosity, interactive, failfast, keepdb, reverse,\n         print(msg)\n \n     test_labels, state = setup_run_tests(verbosity, start_at, start_after, test_labels)\n+    # Add our custom test case\n+    test_labels.append('tests.db_functions.test_aggregate_default')\n+\n     # Run the test suite, including the extra validation tests.\n     if not hasattr(settings, 'TEST_RUNNER'):\n         settings.TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n", "gold_standard_diff": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8c4eae79068f..bc31b48d8d9c 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -65,7 +65,9 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n         if hasattr(default, 'resolve_expression'):\n             default = default.resolve_expression(query, allow_joins, reuse, summarize)\n         c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        coalesce = Coalesce(c, default, output_field=c._output_field_or_none)\n+        coalesce.is_summary = c.is_summary\n+        return coalesce\n \n     @property\n     def default_alias(self):\ndiff --git a/docs/releases/4.0.2.txt b/docs/releases/4.0.2.txt\nindex af0f728c546d..b1ac91f7e923 100644\n--- a/docs/releases/4.0.2.txt\n+++ b/docs/releases/4.0.2.txt\n@@ -32,3 +32,7 @@ Bugfixes\n * Fixed a duplicate operation regression in Django 4.0 that caused a migration\n   crash when altering a primary key type for a concrete parent model referenced\n   by a foreign key (:ticket:`33462`).\n+\n+* Fixed a bug in Django 4.0 that caused a crash of ``QuerySet.aggregate()``\n+  after ``annotate()`` on an aggregate function with a\n+  :ref:`default <aggregate-default>` (:ticket:`33468`).\ndiff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 87ae945a7ebb..5c9aa5d53467 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,18 @@ def test_aggregation_default_passed_another_aggregate(self):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation(self):\n+        result = Publisher.objects.annotate(\n+            double_num_awards=F('num_awards') * 2,\n+        ).aggregate(value=Sum('double_num_awards', default=0))\n+        self.assertEqual(result['value'], 40)\n+\n+    def test_aggregation_default_not_in_aggregate(self):\n+        result = Publisher.objects.annotate(\n+            avg_rating=Avg('book__rating', default=2.5),\n+        ).aggregate(Sum('num_awards'))\n+        self.assertEqual(result['num_awards__sum'], 20)\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15375"}