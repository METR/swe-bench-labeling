{"instance_id": "matplotlib__matplotlib-26291", "score": "I", "diff": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..fcde99cfc5 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -291,10 +291,15 @@ def _add_inset_axes(parent_axes, axes_class, axes_kwargs, axes_locator):\n \n \n @_docstring.dedent_interpd\n-def inset_axes(parent_axes, width, height, loc='upper right',\n+def inset_axes(parent_axes, width, height, loc=\"upper right\",\n                bbox_to_anchor=None, bbox_transform=None,\n                axes_class=None, axes_kwargs=None,\n                borderpad=0.5):\n+    from matplotlib.backends.backend_agg import FigureCanvasAgg\n+    if not isinstance(parent_axes.figure.canvas, FigureCanvasAgg):\n+        parent_axes.figure.canvas = FigureCanvasAgg(parent_axes.figure)\n+    parent_axes.figure.canvas.draw()\n+    renderer = parent_axes.figure.canvas.get_renderer()\n     \"\"\"\n     Create an inset axes with a given width and height.\n \ndiff --git a/test_inset_axes.png b/test_inset_axes.png\nnew file mode 100644\nindex 0000000000..2c6dfb2c86\nBinary files /dev/null and b/test_inset_axes.png differ\ndiff --git a/test_inset_axes.py b/test_inset_axes.py\nnew file mode 100644\nindex 0000000000..f5ba014521\n--- /dev/null\n+++ b/test_inset_axes.py\n@@ -0,0 +1,7 @@\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+plt.savefig('test_inset_axes.png')\n+print(\"Test completed successfully.\")\n", "gold_standard_diff": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d350510742f..46284c6802f1 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -69,6 +69,8 @@ def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n     def __call__(self, ax, renderer):\n+        if renderer is None:\n+            renderer = ax.figure._get_renderer()\n         self.axes = ax\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\ndiff --git a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\nindex b61574787772..704130804c84 100644\n--- a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n@@ -1,4 +1,5 @@\n from itertools import product\n+import io\n import platform\n \n import matplotlib as mpl\n@@ -247,6 +248,15 @@ def test_inset_axes_complete():\n                          bbox_transform=ax.transAxes)\n \n \n+def test_inset_axes_tight():\n+    # gh-26287 found that inset_axes raised with bbox_inches=tight\n+    fig, ax = plt.subplots()\n+    inset_axes(ax, width=1.3, height=0.9)\n+\n+    f = io.BytesIO()\n+    fig.savefig(f, bbox_inches=\"tight\")\n+\n+\n @image_comparison(['fill_facecolor.png'], remove_text=True, style='mpl20')\n def test_fill_facecolor():\n     fig, ax = plt.subplots(1, 5)\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/26291"}