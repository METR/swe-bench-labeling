{"instance_id": "django__django-15268", "score": "I", "diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..0180685eb6 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -539,6 +539,19 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterUniqueTogether) and self.name == operation.name:\n+            # If the first operation sets unique_together to an empty set and the second one sets it to a non-empty set,\n+            # we can combine them into a single operation with the non-empty set\n+            if not self.unique_together and operation.unique_together:\n+                return [\n+                    AlterUniqueTogether(\n+                        name=self.name,\n+                        unique_together=operation.unique_together,\n+                    ),\n+                ]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n@@ -550,6 +563,19 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterIndexTogether) and self.name == operation.name:\n+            # If the first operation sets index_together to an empty set and the second one sets it to a non-empty set,\n+            # we can combine them into a single operation with the non-empty set\n+            if not self.index_together and operation.index_together:\n+                return [\n+                    AlterIndexTogether(\n+                        name=self.name,\n+                        index_together=operation.index_together,\n+                    ),\n+                ]\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n", "gold_standard_diff": "From 3249caa0d0210cbb1d93c1e93d8e1f5a5cd539e6 Mon Sep 17 00:00:00 2001\nFrom: David Wobrock <david.wobrock@gmail.com>\nDate: Sat, 1 Jan 2022 10:51:09 +0100\nSubject: [PATCH] Fixed #33402 -- Optimized multiple AlterFooTogether\n operations into one\n\n---\n django/db/migrations/operations/models.py | 13 +++++++-\n tests/migrations/test_autodetector.py     | 38 +++++------------------\n 2 files changed, 19 insertions(+), 32 deletions(-)\n\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32dff..01c44a9a261c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -34,9 +34,12 @@ def references_model(self, name, app_label):\n     def reduce(self, operation, app_label):\n         return (\n             super().reduce(operation, app_label) or\n-            not operation.references_model(self.name, app_label)\n+            self.can_reduce_through(operation, app_label)\n         )\n \n+    def can_reduce_through(self, operation, app_label):\n+        return not operation.references_model(self.name, app_label)\n+\n \n class CreateModel(ModelOperation):\n     \"\"\"Create a model's table.\"\"\"\n@@ -528,6 +531,14 @@ def describe(self):\n     def migration_name_fragment(self):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n+    def can_reduce_through(self, operation, app_label):\n+        return (\n+            super().can_reduce_through(operation, app_label) or (\n+                isinstance(operation, AlterTogetherOptionOperation) and\n+                type(operation) is not type(self)\n+            )\n+        )\n+\n \n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex d25b14cedb65..bb37af24e38d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1573,21 +1573,13 @@ def test_foo_together_ordering(self):\n         self.assertOperationTypes(changes, 'otherapp', 0, [\n             'AlterUniqueTogether',\n             'AlterIndexTogether',\n-            'AlterUniqueTogether',\n-            'AlterIndexTogether',\n         ])\n         self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 0, name='book', unique_together=set(),\n-        )\n-        self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 1, name='book', index_together=set(),\n-        )\n-        self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 2, name='book',\n+            changes, 'otherapp', 0, 0, name='book',\n             unique_together={('title', 'author')},\n         )\n         self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 3, name='book',\n+            changes, 'otherapp', 0, 1, name='book',\n             index_together={('title', 'author')},\n         )\n \n@@ -1637,28 +1629,20 @@ def test_remove_field_and_foo_together(self):\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, \"otherapp\", 1)\n         self.assertOperationTypes(changes, 'otherapp', 0, [\n-            'AlterUniqueTogether',\n-            'AlterIndexTogether',\n             'AlterUniqueTogether',\n             'AlterIndexTogether',\n             'RemoveField',\n         ])\n         self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 0, name='book', unique_together=set(),\n-        )\n-        self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 1, name='book', index_together=set(),\n-        )\n-        self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 2, name='book',\n+            changes, 'otherapp', 0, 0, name='book',\n             unique_together={('author', 'title')},\n         )\n         self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 3, name='book',\n+            changes, 'otherapp', 0, 1, name='book',\n             index_together={('author', 'title')},\n         )\n         self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 4, model_name='book', name='newfield',\n+            changes, 'otherapp', 0, 2, model_name='book', name='newfield',\n         )\n \n     def test_alter_field_and_foo_together(self):\n@@ -1744,21 +1728,13 @@ def test_rename_field_and_foo_together(self):\n             'RenameField',\n             'AlterUniqueTogether',\n             'AlterIndexTogether',\n-            'AlterUniqueTogether',\n-            'AlterIndexTogether',\n         ])\n         self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 1, name='book', unique_together=set(),\n-        )\n-        self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 2, name='book', index_together=set(),\n-        )\n-        self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 3, name='book',\n+            changes, 'otherapp', 0, 1, name='book',\n             unique_together={('title', 'newfield2')},\n         )\n         self.assertOperationAttributes(\n-            changes, 'otherapp', 0, 4, name='book',\n+            changes, 'otherapp', 0, 2, name='book',\n             index_together={('title', 'newfield2')},\n         )\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/15268"}