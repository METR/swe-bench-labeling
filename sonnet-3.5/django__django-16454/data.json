{"instance_id": "django__django-16454", "score": "C", "diff": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..880abdcee1 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,15 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        subparsers._parser_class = lambda **kw: self.__class__(\n+            missing_args_message=self.missing_args_message,\n+            called_from_command_line=self.called_from_command_line,\n+            **kw\n+        )\n+        return subparsers\n+\n \n def handle_default_options(options):\n     \"\"\"\ndiff --git a/django/core/management/commands/test_subparser.py b/django/core/management/commands/test_subparser.py\nnew file mode 100644\nindex 0000000000..6b8fd86ecc\n--- /dev/null\n+++ b/django/core/management/commands/test_subparser.py\n@@ -0,0 +1,18 @@\n+from django.core.management.base import BaseCommand, CommandError\n+\n+class Command(BaseCommand):\n+    help = 'Test command for subparser error formatting'\n+\n+    def add_arguments(self, parser):\n+        subparsers = parser.add_subparsers(dest='subcommand', required=True)\n+        \n+        create_parser = subparsers.add_parser('create')\n+        create_parser.add_argument('name', type=str)\n+\n+    def handle(self, *args, **options):\n+        subcommand = options['subcommand']\n+        if subcommand == 'create':\n+            name = options['name']\n+            self.stdout.write(self.style.SUCCESS(f'Created {name}'))\n+        else:\n+            raise CommandError('Unknown subcommand')\n", "gold_standard_diff": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a1570..631c761c004a 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -6,6 +6,7 @@\n import os\n import sys\n from argparse import ArgumentParser, HelpFormatter\n+from functools import partial\n from io import TextIOBase\n \n import django\n@@ -71,6 +72,15 @@ def error(self, message):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        parser_class = kwargs.get(\"parser_class\", type(self))\n+        if issubclass(parser_class, CommandParser):\n+            kwargs[\"parser_class\"] = partial(\n+                parser_class,\n+                called_from_command_line=self.called_from_command_line,\n+            )\n+        return super().add_subparsers(**kwargs)\n+\n \n def handle_default_options(options):\n     \"\"\"\ndiff --git a/tests/user_commands/management/commands/subparser_vanilla.py b/tests/user_commands/management/commands/subparser_vanilla.py\nnew file mode 100644\nindex 000000000000..1605f21cadcc\n--- /dev/null\n+++ b/tests/user_commands/management/commands/subparser_vanilla.py\n@@ -0,0 +1,13 @@\n+import argparse\n+\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+        parser_foo = subparsers.add_parser(\"foo\")\n+        parser_foo.add_argument(\"bar\", type=int)\n+\n+    def handle(self, *args, **options):\n+        pass\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex e40632385cb1..408108b5525f 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,30 @@ def test_skip_checks(self):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+    def test_subparser_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.maxDiff = None\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\",\n+        )\n+\n+    def test_subparser_non_django_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser_vanilla\", \"foo\", \"seven\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser_vanilla foo: error: argument bar: invalid int value: \"\n+            \"'seven'\",\n+        )\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16454"}