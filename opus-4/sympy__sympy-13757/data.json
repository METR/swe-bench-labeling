{"instance_id": "sympy__sympy-13757", "score": "I", "diff": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex d5ac051f63..12ffeb37af 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4055,7 +4055,7 @@ def __rmul__(f, g):\n             except PolynomialError:\n                 return g*f.as_expr()\n \n-        return g.mul(f)\n+        return f.mul(g)\n \n     @_sympifyit('n', NotImplemented)\n     def __pow__(f, n):\ndiff --git a/test_debug_conversion.py b/test_debug_conversion.py\nnew file mode 100644\nindex 0000000000..35b3371de0\n--- /dev/null\n+++ b/test_debug_conversion.py\n@@ -0,0 +1,25 @@\n+from sympy import Poly, S, symbols\n+from sympy.polys.polyerrors import PolynomialError\n+\n+x = symbols('x')\n+\n+# Test conversions that happen in __rmul__\n+p = Poly(x)\n+\n+test_cases = [\n+    (\"x\", x),\n+    (\"-2\", -2),\n+    (\"S(-2)\", S(-2))\n+]\n+\n+for name, expr in test_cases:\n+    print(f\"\\n=== Testing conversion of {name} to Poly ===\")\n+    try:\n+        converted = p.__class__(expr, *p.gens)\n+        print(f\"Success! Converted to: {converted}\")\n+        print(f\"Type: {type(converted)}\")\n+        print(f\"Is it a Poly? {converted.is_Poly}\")\n+    except PolynomialError as e:\n+        print(f\"Failed with PolynomialError: {e}\")\n+    except Exception as e:\n+        print(f\"Failed with {type(e).__name__}: {e}\")\ndiff --git a/test_debug_mul.py b/test_debug_mul.py\nnew file mode 100644\nindex 0000000000..8073cd3184\n--- /dev/null\n+++ b/test_debug_mul.py\n@@ -0,0 +1,50 @@\n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n+# Test what happens inside mul method\n+p = Poly(x)\n+\n+print(\"Testing p.mul(x):\")\n+try:\n+    result = p.mul(x)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nTesting p.mul(-2):\")\n+try:\n+    result = p.mul(-2)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nTesting p.mul(S(-2)):\")\n+try:\n+    result = p.mul(S(-2))\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+# Check what happens when we try to create Poly from these expressions\n+print(\"\\n\\nTesting Poly constructor:\")\n+print(\"Poly(x, x):\")\n+try:\n+    result = Poly(x, x)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nPoly(-2, x):\")\n+try:\n+    result = Poly(-2, x)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nPoly(S(-2), x):\")\n+try:\n+    result = Poly(S(-2), x)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\ndiff --git a/test_mul_behavior.py b/test_mul_behavior.py\nnew file mode 100644\nindex 0000000000..fed109139c\n--- /dev/null\n+++ b/test_mul_behavior.py\n@@ -0,0 +1,27 @@\n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n+# Let's trace what happens step by step\n+p = Poly(x)\n+\n+print(\"=== Case 1: Poly(x) * x ===\")\n+print(\"This calls Poly.__mul__ with g=x\")\n+print(\"Poly tries to convert x to Poly(x, x) and succeeds\")\n+print(\"Then calls p.mul(Poly(x, x))\")\n+result1 = p * x\n+print(f\"Result: {result1}\\n\")\n+\n+print(\"=== Case 2: x * Poly(x) ===\")\n+print(\"This calls Poly.__rmul__ with g=x\")\n+print(\"Currently: tries to convert x to Poly(x, x), and when that succeeds,\")\n+print(\"it should call g.mul(f), but g is the Symbol x, not a Poly!\")\n+print(\"That's the bug!\\n\")\n+\n+print(\"=== Case 3: -2 * Poly(x) ===\")\n+print(\"This calls Poly.__rmul__ with g=-2\")\n+print(\"Tries to convert -2 to Poly(-2, x) and succeeds\")\n+print(\"Then should call Poly(-2, x).mul(Poly(x, x))\")\n+result3 = Poly(-2, x).mul(p)\n+print(f\"Expected result: {result3}\")\n+print(f\"Actual result: {-2 * p}\")\ndiff --git a/test_mul_ground.py b/test_mul_ground.py\nnew file mode 100644\nindex 0000000000..8fe6c0322f\n--- /dev/null\n+++ b/test_mul_ground.py\n@@ -0,0 +1,27 @@\n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n+# Test mul_ground directly\n+p = Poly(x)\n+\n+print(\"Test mul_ground with x:\")\n+try:\n+    result = p.mul_ground(x)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nTest mul_ground with -2:\")\n+try:\n+    result = p.mul_ground(-2)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+print(\"\\nTest mul_ground with S(-2):\")\n+try:\n+    result = p.mul_ground(S(-2))\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\ndiff --git a/test_poly_mul_issue.py b/test_poly_mul_issue.py\nnew file mode 100644\nindex 0000000000..47995c94db\n--- /dev/null\n+++ b/test_poly_mul_issue.py\n@@ -0,0 +1,33 @@\n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n+# Test cases from the issue\n+print(\"Test 1: Poly(x)*x\")\n+result1 = Poly(x)*x\n+print(f\"Result: {result1}\")\n+print(f\"Type: {type(result1)}\")\n+print()\n+\n+print(\"Test 2: x*Poly(x)\")\n+result2 = x*Poly(x)\n+print(f\"Result: {result2}\")\n+print(f\"Type: {type(result2)}\")\n+print()\n+\n+print(\"Test 3: -2*Poly(x)\")\n+result3 = -2*Poly(x)\n+print(f\"Result: {result3}\")\n+print(f\"Type: {type(result3)}\")\n+print()\n+\n+print(\"Test 4: S(-2)*Poly(x)\")\n+result4 = S(-2)*Poly(x)\n+print(f\"Result: {result4}\")\n+print(f\"Type: {type(result4)}\")\n+print()\n+\n+print(\"Test 5: Poly(x)*S(-2)\")\n+result5 = Poly(x)*S(-2)\n+print(f\"Result: {result5}\")\n+print(f\"Type: {type(result5)}\")\ndiff --git a/test_trace_rmul.py b/test_trace_rmul.py\nnew file mode 100644\nindex 0000000000..eaa4abdda9\n--- /dev/null\n+++ b/test_trace_rmul.py\n@@ -0,0 +1,38 @@\n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n+# Let's add some debugging to understand what's happening\n+class DebugPoly(Poly):\n+    @staticmethod\n+    def _from_poly(poly, opt):\n+        \"\"\"Create a DebugPoly from a Poly.\"\"\"\n+        return DebugPoly(poly.as_expr(), *poly.gens, **opt)\n+    \n+    def __rmul__(f, g):\n+        print(f\"\\n__rmul__ called with:\")\n+        print(f\"  self (f) = {f}\")\n+        print(f\"  other (g) = {g}\")\n+        print(f\"  g.is_Poly = {g.is_Poly if hasattr(g, 'is_Poly') else 'N/A'}\")\n+        \n+        if not g.is_Poly:\n+            print(\"  g is not a Poly, trying to convert...\")\n+            try:\n+                g_converted = f.__class__(g, *f.gens)\n+                print(f\"  Conversion successful: {g_converted}\")\n+                print(f\"  Type of converted: {type(g_converted)}\")\n+            except Exception as e:\n+                print(f\"  Conversion failed: {e}\")\n+                return g*f.as_expr()\n+            \n+            g = g_converted\n+        \n+        print(f\"  Calling f.mul(g) with g = {g}\")\n+        result = f.mul(g)\n+        print(f\"  Result: {result}\")\n+        return result\n+\n+# Test with DebugPoly\n+p = DebugPoly(x)\n+print(\"Testing x * DebugPoly(x):\")\n+result = x * p\n", "gold_standard_diff": "diff --git a/sympy/core/tests/test_match.py b/sympy/core/tests/test_match.py\nindex 60e37094cc3a..324d66aed0b1 100644\n--- a/sympy/core/tests/test_match.py\n+++ b/sympy/core/tests/test_match.py\n@@ -134,7 +134,7 @@ def test_mul():\n     assert e.match(x**p*exp(x*q)) == {p: 0, q: 1}\n \n     e = I*Poly(x, x)\n-    assert e.match(I*p) == {p: Poly(x, x)}\n+    assert e.match(I*p) == {p: x}\n \n \n def test_mul_noncommutative():\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex d5ac051f636a..32b7027a285d 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -106,6 +106,7 @@ class Poly(Expr):\n \n     is_commutative = True\n     is_Poly = True\n+    _op_priority = 10.001\n \n     def __new__(cls, rep, *gens, **args):\n         \"\"\"Create a new polynomial instance out of something useful. \"\"\"\ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 1f889e9f18cc..371cba5844f7 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,6 +677,12 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n \n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13757"}