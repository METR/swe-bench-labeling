{"instance_id": "sphinx-doc__sphinx-7748", "score": "I", "diff": "diff --git a/doc/usage/extensions/autodoc.rst b/doc/usage/extensions/autodoc.rst\nindex 36be7568b..19e700d89 100644\n--- a/doc/usage/extensions/autodoc.rst\n+++ b/doc/usage/extensions/autodoc.rst\n@@ -456,6 +456,19 @@ There are also config values that you can set:\n \n    .. versionadded:: 1.1\n \n+.. confval:: autodoc_docstring_signature_multiple\n+\n+   This value controls whether multiple signatures in function/method\n+   docstrings should be extracted and rendered. It can have the following values:\n+\n+   * ``True`` (the default) automatically extract all signatures\n+   * ``False`` extract only the first signature\n+\n+   This option is particularly useful for documenting overloaded methods,\n+   such as those generated by SWIG for C++ classes.\n+\n+   .. versionadded:: 4.0\n+\n .. confval:: autodoc_mock_imports\n \n    This value contains a list of modules to be mocked up. This is useful when\ndiff --git a/setup.py b/setup.py\nindex 5e822fe9b..77b63df38 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be999..299b905a9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,39 +1037,40 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n+    def _find_signature(self, encoding: str = None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n                 continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n-            if base not in valid_names:\n-                continue\n-            # re-prepare docstring to ignore more leading indentation\n-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            # match lines of docstring against signature RE\n+            for j, line in enumerate(doclines):\n+                match = py_ext_sig_re.match(line)\n+                if not match:\n+                    continue\n+                exmod, path, base, args, retann = match.groups()\n+                # the base name must match ours\n+                valid_names = [self.objpath[-1]]  # type: ignore\n+                if isinstance(self, ClassDocumenter):\n+                    valid_names.append('__init__')\n+                    if hasattr(self.object, '__mro__'):\n+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+                if base not in valid_names:\n+                    continue\n+                results.append((args, retann))\n+            if results:\n+                # re-prepare docstring to ignore more leading indentation\n+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[len(results):]),\n+                                                            tabsize=tab_width)\n+                break\n+        return results\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1085,9 +1086,15 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results:\n+                signatures = []\n+                for args, retann in results:\n+                    sig = f\"({args})\"\n+                    if retann:\n+                        sig += f\" -> {retann}\"\n+                    signatures.append(sig)\n+                return \" or \".join(signatures)\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n@@ -1100,12 +1107,12 @@ class DocstringStripSignatureMixin(DocstringSignatureMixin):\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                # Discarding _args is a only difference with\n+            results = self._find_signature()\n+            if results:\n+                # Discarding args is the only difference with\n                 # DocstringSignatureMixin.format_signature.\n-                # Documenter.format_signature use self.args value to format.\n-                _args, self.retann = result\n+                # We only keep the return annotation from the last signature.\n+                self.retann = results[-1][1]\n         return super().format_signature(**kwargs)\n \n \n@@ -1157,8 +1164,9 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             self.add_line('   :async:', sourcename)\n \n     def format_signature(self, **kwargs: Any) -> str:\n-        sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        sigs = super().format_signature(**kwargs)\n+        if not isinstance(sigs, list):\n+            sigs = [sigs]\n \n         if inspect.is_singledispatch_function(self.object):\n             # append signature of singledispatch'ed functions\n@@ -1170,9 +1178,9 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n \n                     documenter = FunctionDocumenter(self.directive, '')\n                     documenter.object = func\n-                    sigs.append(documenter.format_signature())\n+                    sigs.extend(documenter.format_signature().split('\\n'))\n \n-        return \"\\n\".join(sigs)\n+        return \" or \".join(sigs)\n \n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n         \"\"\"Annotate type hint to the first argument of function if needed.\"\"\"\n@@ -1915,6 +1923,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n                          ENUM('alphabetic', 'alphabetical', 'bysource', 'groupwise'))\n     app.add_config_value('autodoc_default_options', {}, True)\n     app.add_config_value('autodoc_docstring_signature', True, True)\n+    app.add_config_value('autodoc_docstring_signature_multiple', True, True)\n     app.add_config_value('autodoc_mock_imports', [], True)\n     app.add_config_value('autodoc_typehints', \"signature\", True,\n                          ENUM(\"signature\", \"description\", \"none\"))\ndiff --git a/tox.ini b/tox.ini\nindex d9f040544..bf39854b6 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex 6c2761c53e8..70cb5dcbd36 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -49,6 +49,7 @@ Features added\n * #7143: autodoc: Support final classes and methods\n * #7384: autodoc: Support signatures defined by ``__new__()``, metaclasses and\n   builtin base classes\n+* #2106: autodoc: Support multiple signatures on docstring\n * #7466: autosummary: headings in generated documents are not translated\n * #7490: autosummary: Add ``:caption:`` option to autosummary directive to set a\n   caption to the toctree\ndiff --git a/doc/usage/extensions/autodoc.rst b/doc/usage/extensions/autodoc.rst\nindex 36be7568b13..ec1d6c9b559 100644\n--- a/doc/usage/extensions/autodoc.rst\n+++ b/doc/usage/extensions/autodoc.rst\n@@ -454,7 +454,14 @@ There are also config values that you can set:\n    looks like a signature, use the line as the signature and remove it from the\n    docstring content.\n \n+   If the signature line ends with backslash, autodoc considers the function has\n+   multiple signatures and look at the next line of the docstring.  It is useful\n+   for overloaded function.\n+\n    .. versionadded:: 1.1\n+   .. versionchanged:: 3.1\n+\n+      Support overloaded signatures\n \n .. confval:: autodoc_mock_imports\n \ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be99972..1bdac08a13b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1036,39 +1036,71 @@ class DocstringSignatureMixin:\n     Mixin for FunctionDocumenter and MethodDocumenter to provide the\n     feature of reading the signature from the docstring.\n     \"\"\"\n+    _new_docstrings = None  # type: List[List[str]]\n+    _signatures = None      # type: List[str]\n \n     def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n+\n+        # candidates of the object name\n+        valid_names = [self.objpath[-1]]  # type: ignore\n+        if isinstance(self, ClassDocumenter):\n+            valid_names.append('__init__')\n+            if hasattr(self.object, '__mro__'):\n+                valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n+        self._signatures = []\n         result = None\n         for i, doclines in enumerate(docstrings):\n-            # no lines in docstring, no match\n-            if not doclines:\n-                continue\n-            # match first line of docstring against signature RE\n-            match = py_ext_sig_re.match(doclines[0])\n-            if not match:\n-                continue\n-            exmod, path, base, args, retann = match.groups()\n-            # the base name must match ours\n-            valid_names = [self.objpath[-1]]  # type: ignore\n-            if isinstance(self, ClassDocumenter):\n-                valid_names.append('__init__')\n-                if hasattr(self.object, '__mro__'):\n-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n-            if base not in valid_names:\n-                continue\n-            # re-prepare docstring to ignore more leading indentation\n-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n+            for j, line in enumerate(doclines):\n+                if not line:\n+                    # no lines in docstring, no match\n+                    break\n+\n+                if line.endswith('\\\\'):\n+                    multiline = True\n+                    line = line.rstrip('\\\\').rstrip()\n+                else:\n+                    multiline = False\n+\n+                # match first line of docstring against signature RE\n+                match = py_ext_sig_re.match(line)\n+                if not match:\n+                    continue\n+                exmod, path, base, args, retann = match.groups()\n+\n+                # the base name must match ours\n+                if base not in valid_names:\n+                    continue\n+\n+                # re-prepare docstring to ignore more leading indentation\n+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+                self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[j + 1:]),\n+                                                            tabsize=tab_width)\n+\n+                if result is None:\n+                    # first signature\n+                    result = args, retann\n+                else:\n+                    # subsequent signatures\n+                    self._signatures.append(\"(%s) -> %s\" % (args, retann))\n+\n+                if multiline:\n+                    # the signature have multiple signatures on docstring\n+                    continue\n+                else:\n+                    # don't look any further\n+                    break\n+\n+            if result:\n+                # finish the loop when signature found\n+                break\n+\n         return result\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n@@ -1076,9 +1108,8 @@ def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n                           % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n-        lines = getattr(self, '_new_docstrings', None)\n-        if lines is not None:\n-            return lines\n+        if self._new_docstrings is not None:\n+            return self._new_docstrings\n         return super().get_doc(None, ignore)  # type: ignore\n \n     def format_signature(self, **kwargs: Any) -> str:\n@@ -1088,7 +1119,11 @@ def format_signature(self, **kwargs: Any) -> str:\n             result = self._find_signature()\n             if result is not None:\n                 self.args, self.retann = result\n-        return super().format_signature(**kwargs)  # type: ignore\n+        sig = super().format_signature(**kwargs)  # type: ignore\n+        if self._signatures:\n+            return \"\\n\".join([sig] + self._signatures)\n+        else:\n+            return sig\n \n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n@@ -1170,6 +1205,7 @@ def format_signature(self, **kwargs: Any) -> str:\n \n                     documenter = FunctionDocumenter(self.directive, '')\n                     documenter.object = func\n+                    documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n \n         return \"\\n\".join(sigs)\ndiff --git a/tests/roots/test-ext-autodoc/target/docstring_signature.py b/tests/roots/test-ext-autodoc/target/docstring_signature.py\nindex 2e5499770c3..244109629bc 100644\n--- a/tests/roots/test-ext-autodoc/target/docstring_signature.py\n+++ b/tests/roots/test-ext-autodoc/target/docstring_signature.py\n@@ -17,3 +17,9 @@ def __new__(cls):\n class D:\n     def __init__(self):\n         \"\"\"D(foo, bar, baz)\"\"\"\n+\n+\n+class E:\n+    def __init__(self):\n+        \"\"\"E(foo: int, bar: int, baz: int) -> None \\\\\n+        E(foo: str, bar: str, baz: str) -> None\"\"\"\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 22558885ba0..674620df043 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -346,6 +346,10 @@ def test_autoclass_content_and_docstring_signature_class(app):\n         '',\n         '.. py:class:: D()',\n         '   :module: target.docstring_signature',\n+        '',\n+        '',\n+        '.. py:class:: E()',\n+        '   :module: target.docstring_signature',\n         ''\n     ]\n \n@@ -375,6 +379,11 @@ def test_autoclass_content_and_docstring_signature_init(app):\n         '',\n         '.. py:class:: D(foo, bar, baz)',\n         '   :module: target.docstring_signature',\n+        '',\n+        '',\n+        '.. py:class:: E(foo: int, bar: int, baz: int) -> None',\n+        '              E(foo: str, bar: str, baz: str) -> None',\n+        '   :module: target.docstring_signature',\n         ''\n     ]\n \n@@ -409,6 +418,11 @@ def test_autoclass_content_and_docstring_signature_both(app):\n         '.. py:class:: D(foo, bar, baz)',\n         '   :module: target.docstring_signature',\n         '',\n+        '',\n+        '.. py:class:: E(foo: int, bar: int, baz: int) -> None',\n+        '              E(foo: str, bar: str, baz: str) -> None',\n+        '   :module: target.docstring_signature',\n+        '',\n     ]\n \n \n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7748"}