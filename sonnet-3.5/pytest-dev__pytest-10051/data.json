{"instance_id": "pytest-dev__pytest-10051", "score": "I", "diff": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..29974b793 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -396,7 +396,11 @@ class LogCaptureFixture:\n \n         .. versionadded:: 3.4\n         \"\"\"\n-        return self._item.stash[caplog_records_key].get(when, [])\n+        if when not in (\"setup\", \"call\", \"teardown\"):\n+            raise ValueError(\"Invalid value for 'when': {}\".format(when))\n+        \n+        self._item.stash[caplog_records_key][when] = self.records\n+        return self._item.stash[caplog_records_key][when]\n \n     @property\n     def text(self) -> str:\n@@ -441,6 +445,8 @@ class LogCaptureFixture:\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n+        for when in (\"setup\", \"call\", \"teardown\"):\n+            self._item.stash[caplog_records_key][when] = []\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n", "gold_standard_diff": "diff --git a/AUTHORS b/AUTHORS\nindex d1f1b5503f2..7d27f5adadf 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -363,5 +363,6 @@ Yuval Shimon\n Zac Hatfield-Dodds\n Zachary Kneupper\n Zachary OBrien\n+Zhouxin Qiu\n Zolt\u00e1n M\u00e1t\u00e9\n Zsolt Cserna\ndiff --git a/changelog/9877.bugfix.rst b/changelog/9877.bugfix.rst\nnew file mode 100644\nindex 00000000000..1d2264c6157\n--- /dev/null\n+++ b/changelog/9877.bugfix.rst\n@@ -0,0 +1 @@\n+Ensure ``caplog.get_records(when)`` returns current/correct data after invoking ``caplog.clear()``.\ndiff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b137..2eb69fdbfb4 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -40,7 +40,6 @@\n else:\n     logging_StreamHandler = logging.StreamHandler\n \n-\n DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n _ANSI_ESCAPE_SEQ = re.compile(r\"\\x1b\\[[\\d;]+m\")\n@@ -345,6 +344,10 @@ def reset(self) -> None:\n         self.records = []\n         self.stream = StringIO()\n \n+    def clear(self) -> None:\n+        self.records.clear()\n+        self.stream = StringIO()\n+\n     def handleError(self, record: logging.LogRecord) -> None:\n         if logging.raiseExceptions:\n             # Fail the test if the log message is bad (emit failed).\n@@ -440,7 +443,7 @@ def messages(self) -> List[str]:\n \n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n-        self.handler.reset()\n+        self.handler.clear()\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\ndiff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex bcb20de5805..e9e73d05f98 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -172,6 +172,24 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_clear_for_call_stage(caplog, logging_during_setup_and_teardown):\n+    logger.info(\"a_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+    caplog.clear()\n+\n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+    logging.info(\"a_call_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_after_clear\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n+\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/10051"}