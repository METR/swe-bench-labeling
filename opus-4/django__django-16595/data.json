{"instance_id": "django__django-16595", "score": "C", "diff": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab43ad..4f3d4c7fcc 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -251,6 +251,10 @@ class AlterField(FieldOperation):\n             operation\n         ):\n             return [operation]\n+        elif isinstance(operation, AlterField) and self.is_same_field_operation(\n+            operation\n+        ):\n+            return [operation]\n         elif (\n             isinstance(operation, RenameField)\n             and self.is_same_field_operation(operation)\ndiff --git a/test_alter_field_comprehensive.py b/test_alter_field_comprehensive.py\nnew file mode 100644\nindex 0000000000..1b23e3264c\n--- /dev/null\n+++ b/test_alter_field_comprehensive.py\n@@ -0,0 +1,149 @@\n+#!/usr/bin/env python\n+\"\"\"Comprehensive test script for AlterField optimization.\"\"\"\n+\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add the django directory to the Python path\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+optimizer = MigrationOptimizer()\n+\n+# Test 1: Multiple AlterField operations on the same field\n+print(\"Test 1: Multiple AlterField operations on the same field\")\n+operations = [\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128, null=True),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+    ),\n+]\n+result = optimizer.optimize(operations, \"books\")\n+print(f\"Original: {len(operations)} operations, Optimized: {len(result)} operation(s)\")\n+assert len(result) == 1\n+assert isinstance(result[0], migrations.AlterField)\n+assert result[0].field.help_text == \"help\"\n+assert result[0].field.default is None\n+print(\"\u2713 Passed\\n\")\n+\n+# Test 2: AlterField on different fields should not be optimized\n+print(\"Test 2: AlterField on different fields should not be optimized\")\n+operations = [\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"author\",\n+        field=models.CharField(max_length=256),\n+    ),\n+]\n+result = optimizer.optimize(operations, \"books\")\n+print(f\"Original: {len(operations)} operations, Optimized: {len(result)} operations\")\n+assert len(result) == 2\n+print(\"\u2713 Passed\\n\")\n+\n+# Test 3: AlterField on different models should not be optimized\n+print(\"Test 3: AlterField on different models should not be optimized\")\n+operations = [\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"author\",\n+        name=\"title\",\n+        field=models.CharField(max_length=256),\n+    ),\n+]\n+result = optimizer.optimize(operations, \"books\")\n+print(f\"Original: {len(operations)} operations, Optimized: {len(result)} operations\")\n+assert len(result) == 2\n+print(\"\u2713 Passed\\n\")\n+\n+# Test 4: AlterField followed by RemoveField\n+print(\"Test 4: AlterField followed by RemoveField\")\n+operations = [\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128),\n+    ),\n+    migrations.RemoveField(\n+        model_name=\"book\",\n+        name=\"title\",\n+    ),\n+]\n+result = optimizer.optimize(operations, \"books\")\n+print(f\"Original: {len(operations)} operations, Optimized: {len(result)} operation(s)\")\n+assert len(result) == 1\n+assert isinstance(result[0], migrations.RemoveField)\n+print(\"\u2713 Passed\\n\")\n+\n+# Test 5: Mixed operations with AlterField\n+print(\"Test 5: Mixed operations with AlterField\")\n+operations = [\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128),\n+    ),\n+    migrations.AddField(\n+        model_name=\"book\",\n+        name=\"isbn\",\n+        field=models.CharField(max_length=13),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=256),\n+    ),\n+]\n+result = optimizer.optimize(operations, \"books\")\n+print(f\"Original: {len(operations)} operations, Optimized: {len(result)} operations\")\n+# The two AlterField operations should be combined\n+assert len(result) == 2\n+assert any(isinstance(op, migrations.AddField) for op in result)\n+assert any(isinstance(op, migrations.AlterField) for op in result)\n+# Check that the AlterField has the final field definition\n+alter_field = next(op for op in result if isinstance(op, migrations.AlterField))\n+assert alter_field.field.max_length == 256\n+print(\"\u2713 Passed\\n\")\n+\n+print(\"All tests passed!\")\ndiff --git a/test_alter_field_optimizer.py b/test_alter_field_optimizer.py\nnew file mode 100644\nindex 0000000000..46742eacad\n--- /dev/null\n+++ b/test_alter_field_optimizer.py\n@@ -0,0 +1,75 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to reproduce the AlterField optimization issue.\"\"\"\n+\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add the django directory to the Python path\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+# Create the operations as described in the issue\n+operations = [\n+    migrations.AddField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=256, null=True),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128, null=True),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+    ),\n+]\n+\n+optimizer = MigrationOptimizer()\n+\n+# Test 1: All operations together (should optimize to just AddField)\n+print(\"Test 1: All operations together\")\n+result1 = optimizer.optimize(operations, \"books\")\n+print(f\"Original operations: {len(operations)}\")\n+print(f\"Optimized operations: {len(result1)}\")\n+for op in result1:\n+    print(f\"  - {op.__class__.__name__} on {op.name}\")\n+print()\n+\n+# Test 2: Only AlterField operations (should optimize to just the last one)\n+print(\"Test 2: Only AlterField operations\")\n+result2 = optimizer.optimize(operations[1:], \"books\")\n+print(f\"Original operations: {len(operations[1:])}\")\n+print(f\"Optimized operations: {len(result2)}\")\n+for op in result2:\n+    print(f\"  - {op.__class__.__name__} on {op.name}\")\n+print()\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..143ed196b8\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,88 @@\n+#!/usr/bin/env python\n+\"\"\"Test edge cases for AlterField optimization.\"\"\"\n+\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add the django directory to the Python path\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.db import migrations, models\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+optimizer = MigrationOptimizer()\n+\n+# Test: AlterField with preserve_default parameter\n+print(\"Test: AlterField with preserve_default parameter\")\n+operations = [\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128),\n+        preserve_default=False,\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=256),\n+        preserve_default=True,\n+    ),\n+]\n+result = optimizer.optimize(operations, \"books\")\n+print(f\"Original: {len(operations)} operations, Optimized: {len(result)} operation(s)\")\n+assert len(result) == 1\n+assert result[0].preserve_default is True  # The last operation's preserve_default should be used\n+print(\"\u2713 Passed\\n\")\n+\n+# Test: AlterField interleaved with other operations\n+print(\"Test: AlterField interleaved with operations on different fields\")\n+operations = [\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=128),\n+    ),\n+    migrations.AddField(\n+        model_name=\"book\",\n+        name=\"author\",\n+        field=models.CharField(max_length=100),\n+    ),\n+    migrations.AlterField(\n+        model_name=\"book\",\n+        name=\"title\",\n+        field=models.CharField(max_length=256),\n+    ),\n+    migrations.RemoveField(\n+        model_name=\"book\",\n+        name=\"author\",\n+    ),\n+]\n+result = optimizer.optimize(operations, \"books\")\n+print(f\"Original: {len(operations)} operations, Optimized: {len(result)} operation(s)\")\n+# The two AlterField operations should still be optimized\n+assert len(result) == 1\n+assert isinstance(result[0], migrations.AlterField)\n+assert result[0].field.max_length == 256\n+print(\"\u2713 Passed\\n\")\n+\n+print(\"All edge case tests passed!\")\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 6485009eb4..29273b0637 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -822,6 +822,21 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_alter_field_alter_field(self):\n+        \"\"\"\n+        Multiple AlterField operations on the same field should optimize to a single AlterField.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Foo\", \"age\", models.IntegerField()),\n+                migrations.AlterField(\"Foo\", \"age\", models.IntegerField(help_text=\"help\")),\n+                migrations.AlterField(\"Foo\", \"age\", models.IntegerField(help_text=\"help\", default=1)),\n+            ],\n+            [\n+                migrations.AlterField(\"Foo\", \"age\", models.IntegerField(help_text=\"help\", default=1)),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_field(self, alter):\n         \"\"\"\n         CreateModel, AlterFooTogether/AlterOrderWithRespectTo followed by an\n", "gold_standard_diff": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab43adde..fc5640bea99f 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -247,9 +247,9 @@ def migration_name_fragment(self):\n         return \"alter_%s_%s\" % (self.model_name_lower, self.name_lower)\n \n     def reduce(self, operation, app_label):\n-        if isinstance(operation, RemoveField) and self.is_same_field_operation(\n-            operation\n-        ):\n+        if isinstance(\n+            operation, (AlterField, RemoveField)\n+        ) and self.is_same_field_operation(operation):\n             return [operation]\n         elif (\n             isinstance(operation, RenameField)\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 6485009eb4ed..8cd4c67fbd0d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -221,10 +221,10 @@ def test_create_alter_owrt_delete_model(self):\n             migrations.AlterOrderWithRespectTo(\"Foo\", \"a\")\n         )\n \n-    def _test_alter_alter_model(self, alter_foo, alter_bar):\n+    def _test_alter_alter(self, alter_foo, alter_bar):\n         \"\"\"\n         Two AlterUniqueTogether/AlterIndexTogether/AlterOrderWithRespectTo\n-        should collapse into the second.\n+        /AlterField should collapse into the second.\n         \"\"\"\n         self.assertOptimizesTo(\n             [\n@@ -237,29 +237,35 @@ def _test_alter_alter_model(self, alter_foo, alter_bar):\n         )\n \n     def test_alter_alter_table_model(self):\n-        self._test_alter_alter_model(\n+        self._test_alter_alter(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n         )\n \n     def test_alter_alter_unique_model(self):\n-        self._test_alter_alter_model(\n+        self._test_alter_alter(\n             migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]),\n             migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"c\"]]),\n         )\n \n     def test_alter_alter_index_model(self):\n-        self._test_alter_alter_model(\n+        self._test_alter_alter(\n             migrations.AlterIndexTogether(\"Foo\", [[\"a\", \"b\"]]),\n             migrations.AlterIndexTogether(\"Foo\", [[\"a\", \"c\"]]),\n         )\n \n     def test_alter_alter_owrt_model(self):\n-        self._test_alter_alter_model(\n+        self._test_alter_alter(\n             migrations.AlterOrderWithRespectTo(\"Foo\", \"a\"),\n             migrations.AlterOrderWithRespectTo(\"Foo\", \"b\"),\n         )\n \n+    def test_alter_alter_field(self):\n+        self._test_alter_alter(\n+            migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+            migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+        )\n+\n     def test_optimize_through_create(self):\n         \"\"\"\n         We should be able to optimize away create/delete through a create or\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16595"}