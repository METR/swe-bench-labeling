{"instance_id": "sympy__sympy-24443", "score": "C", "diff": "diff --git a/check_gen_match.py b/check_gen_match.py\nnew file mode 100644\nindex 0000000000..313dfe45f5\n--- /dev/null\n+++ b/check_gen_match.py\n@@ -0,0 +1,27 @@\n+from sympy.combinatorics import DihedralGroup\n+\n+D3 = DihedralGroup(3)\n+presentation = D3.presentation()\n+gens = presentation.generators\n+\n+print(\"Presentation generators:\", gens)\n+for idx, gen in enumerate(gens):\n+    print(f\"  gen[{idx}] = {gen}\")\n+    print(f\"    group.symbols = {gen.group.symbols}\")\n+    print(f\"    gen.array_form = {gen.array_form}\")\n+    if len(gen.array_form) == 1:\n+        print(f\"    symbol from array_form = {gen.array_form[0][0]}\")\n+        \n+# Now check a relator\n+r = presentation.relators[2]\n+print(f\"\\nRelator: {r}\")\n+print(f\"Array form: {r.array_form}\")\n+\n+# Check each symbol in the relator\n+for sym, power in r.array_form:\n+    print(f\"\\nChecking symbol {sym} with power {power}\")\n+    for idx, gen in enumerate(gens):\n+        print(f\"  gen[{idx}].group.symbols[0] = {gen.group.symbols[0]}\")\n+        print(f\"  gen[{idx}].group.symbols[0] == sym? {gen.group.symbols[0] == sym}\")\n+        if len(gen.array_form) == 1:\n+            print(f\"  gen[{idx}].array_form[0][0] == sym? {gen.array_form[0][0] == sym}\")\ndiff --git a/check_symbols.py b/check_symbols.py\nnew file mode 100644\nindex 0000000000..a437ed1d40\n--- /dev/null\n+++ b/check_symbols.py\n@@ -0,0 +1,21 @@\n+from sympy.combinatorics import DihedralGroup\n+\n+D3 = DihedralGroup(3)\n+presentation = D3.presentation()\n+gens = presentation.generators\n+\n+print(\"Presentation generators:\", gens)\n+print(\"Type of gens:\", type(gens))\n+\n+for i, gen in enumerate(gens):\n+    print(f\"\\nGenerator {i}: {gen}\")\n+    print(f\"  Type: {type(gen)}\")\n+    print(f\"  Group: {gen.group}\")\n+    print(f\"  Group symbols: {gen.group.symbols}\")\n+    \n+# Check array form\n+r = presentation.relators[2]\n+print(f\"\\nRelator: {r}\")\n+print(f\"Array form: {r.array_form}\")\n+for j, (sym, pow) in enumerate(r.array_form):\n+    print(f\"  {j}: symbol={sym}, power={pow}, type={type(sym)}\")\ndiff --git a/debug_issue.py b/debug_issue.py\nnew file mode 100644\nindex 0000000000..b5015756a1\n--- /dev/null\n+++ b/debug_issue.py\n@@ -0,0 +1,41 @@\n+from sympy.combinatorics import DihedralGroup\n+from sympy.combinatorics.homomorphisms import homomorphism, _check_homomorphism\n+from sympy.combinatorics.perm_groups import PermutationGroup\n+\n+# Let's debug step by step\n+D3 = DihedralGroup(3)\n+print(\"D3 generators:\", D3.generators)\n+\n+# Create the images dict manually\n+images = dict(zip(D3.generators, D3.generators))\n+print(\"\\nImages mapping:\", images)\n+\n+# Now let's look at the presentation\n+presentation = D3.presentation()\n+print(\"\\nPresentation generators:\", presentation.generators)\n+print(\"Presentation relators:\", presentation.relators)\n+\n+# Let's see what happens in _check_homomorphism\n+print(\"\\nChecking each relator...\")\n+for r in presentation.relators:\n+    print(f\"\\nRelator: {r}\")\n+    print(f\"  array_form: {r.array_form}\")\n+    print(f\"  length: {len(r)}\")\n+    for i in range(len(r)):\n+        print(f\"  r[{i}] = {r[i]}, type = {type(r[i])}\")\n+        \n+# Let's also check if the generators match\n+print(\"\\nChecking generator matching...\")\n+gens = presentation.generators\n+print(\"Presentation generators:\", gens)\n+print(\"Domain generators:\", D3.generators)\n+\n+# Let's see what happens when we access elements\n+r = presentation.relators[0]\n+print(f\"\\nFirst relator: {r}\")\n+for i in range(len(r)):\n+    elem = r[i]\n+    print(f\"  r[{i}] = {elem}\")\n+    print(f\"  elem in gens? {elem in gens}\")\n+    print(f\"  elem in D3.generators? {elem in D3.generators}\")\n+    print(f\"  elem**-1 in images? {elem**-1 in images}\")\ndiff --git a/run_tests.py b/run_tests.py\nnew file mode 100644\nindex 0000000000..1c5c7cdc06\n--- /dev/null\n+++ b/run_tests.py\n@@ -0,0 +1,20 @@\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+from sympy.combinatorics.tests.test_homomorphisms import test_homomorphism, test_isomorphisms\n+\n+print(\"Running test_homomorphism...\")\n+try:\n+    test_homomorphism()\n+    print(\"  Passed!\")\n+except Exception as e:\n+    print(f\"  Failed: {e}\")\n+\n+print(\"\\nRunning test_isomorphisms...\")\n+try:\n+    test_isomorphisms()\n+    print(\"  Passed!\")\n+except Exception as e:\n+    print(f\"  Failed: {e}\")\n+    \n+print(\"\\nAll tests completed.\")\ndiff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf32ba..3ce7a15bed 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -333,8 +333,17 @@ def _image(r):\n             # both indices\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    # For PermutationGroups, we need to map from the FreeGroup\n+                    # generators to the actual domain generators\n+                    # r_arr[j][0] gives us the generator symbol (e.g., x_0, x_1)\n+                    # We need to find which presentation generator this corresponds to\n+                    sym = r_arr[j][0]\n+                    for idx, gen in enumerate(gens):\n+                        # Check if this generator corresponds to the symbol\n+                        if len(gen.array_form) == 1 and gen.array_form[0][0] == sym and gen.array_form[0][1] == 1:\n+                            s = domain.generators[idx]\n+                            break\n                 else:\n                     s = r[i]\n                 if s in images:\ndiff --git a/test_bug_fix.py b/test_bug_fix.py\nnew file mode 100644\nindex 0000000000..87ec2e860e\n--- /dev/null\n+++ b/test_bug_fix.py\n@@ -0,0 +1,30 @@\n+\"\"\"Test for the bug fix in _check_homomorphism for PermutationGroups\"\"\"\n+from sympy.combinatorics import DihedralGroup\n+from sympy.combinatorics.homomorphisms import homomorphism\n+\n+# This is the exact case from the issue report\n+D3 = DihedralGroup(3)\n+T = homomorphism(D3, D3, D3.generators, D3.generators)\n+print(\"Identity homomorphism on D3 created successfully!\")\n+\n+# Let's verify it works correctly\n+a, b = D3.generators\n+assert T(a) == a\n+assert T(b) == b\n+assert T(a*b) == a*b\n+assert T(a**2) == a**2\n+assert T(b*a*b) == b*a*b\n+\n+print(\"All verifications passed!\")\n+\n+# Test with a non-identity homomorphism as well\n+# D3 has a non-trivial automorphism that swaps the two reflections\n+# while keeping the rotation fixed\n+T2 = homomorphism(D3, D3, [a, b], [a, a*b*a**-1])\n+print(\"Non-identity automorphism created successfully!\")\n+\n+# Verify it's a homomorphism\n+assert T2(a) == a\n+assert T2(b) == a*b*a**-1\n+assert T2(a*b) == a*(a*b*a**-1)  # = a**2*b*a**-1\n+print(\"Non-identity automorphism verified!\")\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..0fbb61fe92\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,61 @@\n+from sympy.combinatorics import *\n+from sympy.combinatorics.homomorphisms import homomorphism\n+\n+# Test 1: Original failing case\n+print(\"Test 1: DihedralGroup(3) identity homomorphism\")\n+D3 = DihedralGroup(3)\n+try:\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    print(\"  Success!\")\n+except ValueError as e:\n+    print(f\"  Failed: {e}\")\n+\n+# Test 2: Different dihedral group\n+print(\"\\nTest 2: DihedralGroup(4) identity homomorphism\")\n+D4 = DihedralGroup(4)\n+try:\n+    T = homomorphism(D4, D4, D4.generators, D4.generators)\n+    print(\"  Success!\")\n+except ValueError as e:\n+    print(f\"  Failed: {e}\")\n+\n+# Test 3: Symmetric group\n+print(\"\\nTest 3: SymmetricGroup(3) identity homomorphism\")\n+S3 = SymmetricGroup(3)\n+try:\n+    T = homomorphism(S3, S3, S3.generators, S3.generators)\n+    print(\"  Success!\")\n+except ValueError as e:\n+    print(f\"  Failed: {e}\")\n+\n+# Test 4: Cyclic group\n+print(\"\\nTest 4: CyclicGroup(6) identity homomorphism\")\n+C6 = CyclicGroup(6)\n+try:\n+    T = homomorphism(C6, C6, C6.generators, C6.generators)\n+    print(\"  Success!\")\n+except ValueError as e:\n+    print(f\"  Failed: {e}\")\n+\n+# Test 5: Non-trivial homomorphism\n+print(\"\\nTest 5: Non-trivial homomorphism D4 -> D2\")\n+D4 = DihedralGroup(4)\n+D2 = DihedralGroup(2)\n+# Map the generators of D4 to appropriate elements of D2\n+try:\n+    # D4 has generators r (rotation) and s (reflection)\n+    # We map r -> identity (since r^2 would generate a cyclic subgroup of order 2)\n+    # and s -> s' (a reflection in D2)\n+    T = homomorphism(D4, D2, D4.generators, [D2.identity, D2.generators[1]])\n+    print(\"  Success!\")\n+except ValueError as e:\n+    print(f\"  Failed: {e}\")\n+    \n+# Test 6: AlternatingGroup\n+print(\"\\nTest 6: AlternatingGroup(4) identity homomorphism\")\n+A4 = AlternatingGroup(4)\n+try:\n+    T = homomorphism(A4, A4, A4.generators, A4.generators)\n+    print(\"  Success!\")\n+except ValueError as e:\n+    print(f\"  Failed: {e}\")\ndiff --git a/test_inverted_generators.py b/test_inverted_generators.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_inverted_generators.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..2a2d2bd765\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,12 @@\n+from sympy.combinatorics import DihedralGroup\n+from sympy.combinatorics.homomorphisms import homomorphism\n+\n+# This should work but raises ValueError\n+D3 = DihedralGroup(3)\n+print(\"D3 generators:\", D3.generators)\n+print(\"Testing homomorphism...\")\n+try:\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    print(\"Success!\")\n+except ValueError as e:\n+    print(f\"Error: {e}\")\ndiff --git a/trace_issue.py b/trace_issue.py\nnew file mode 100644\nindex 0000000000..cc1dd82ee1\n--- /dev/null\n+++ b/trace_issue.py\n@@ -0,0 +1,51 @@\n+from sympy.combinatorics import DihedralGroup\n+from sympy.combinatorics.perm_groups import PermutationGroup\n+\n+# Create test case\n+D3 = DihedralGroup(3)\n+images = dict(zip(D3.generators, D3.generators))\n+\n+# Now let's trace what happens in _check_homomorphism\n+presentation = D3.presentation()\n+gens = presentation.generators\n+identity = D3.identity\n+\n+# Test the _image function logic\n+r = presentation.relators[2]  # x_1*x_0*x_1**-1*x_0\n+print(f\"Relator: {r}\")\n+print(f\"Array form: {r.array_form}\")\n+\n+# Simulate the _image function\n+w = identity\n+r_arr = r.array_form\n+i = 0\n+j = 0\n+\n+print(\"\\nTracing through _image function:\")\n+while i < len(r):\n+    power = r_arr[j][1]\n+    print(f\"\\ni={i}, j={j}\")\n+    print(f\"  r[{i}] = {r[i]}\")\n+    print(f\"  power = {power}\")\n+    \n+    # This is the problematic part\n+    if isinstance(D3, PermutationGroup) and r[i] in gens:\n+        print(f\"  r[i] in gens? {r[i] in gens}\")\n+        s = D3.generators[gens.index(r[i])]\n+        print(f\"  Using generator: {s}\")\n+    else:\n+        s = r[i]\n+        print(f\"  Using r[i] directly: {s}\")\n+    \n+    # This is where it fails because s is a FreeGroupElement, not a Permutation\n+    print(f\"  s in images? {s in images}\")\n+    print(f\"  s**-1 in images? {s**-1 in images}\")\n+    \n+    i += abs(power)\n+    j += 1\n+\n+print(\"\\n\\nThe issue is that when r[i] is x_1**-1:\")\n+print(\"- r[i] in gens is False (because x_1**-1 != x_1)\")\n+print(\"- So s = r[i] = x_1**-1 (a FreeGroupElement)\")\n+print(\"- But images contains Permutation objects as keys\")\n+print(\"- So s in images and s**-1 in images both fail\")\n", "gold_standard_diff": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf32baa7..95b43c501300 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -308,42 +308,31 @@ def homomorphism(domain, codomain, gens, images=(), check=True):\n     return GroupHomomorphism(domain, codomain, images)\n \n def _check_homomorphism(domain, codomain, images):\n-    if hasattr(domain, 'relators'):\n-        rels = domain.relators\n-    else:\n-        gens = domain.presentation().generators\n-        rels = domain.presentation().relators\n+    \"\"\"\n+    Check that a given mapping of generators to images defines a homomorphism.\n+\n+    Parameters\n+    ==========\n+    domain : PermutationGroup, FpGroup, FreeGroup\n+    codomain : PermutationGroup, FpGroup, FreeGroup\n+    images : dict\n+        The set of keys must be equal to domain.generators.\n+        The values must be elements of the codomain.\n+\n+    \"\"\"\n+    pres = domain if hasattr(domain, 'relators') else domain.presentation()\n+    rels = pres.relators\n+    gens = pres.generators\n+    symbols = [g.ext_rep[0] for g in gens]\n+    symbols_to_domain_generators = dict(zip(symbols, domain.generators))\n     identity = codomain.identity\n \n     def _image(r):\n-        if r.is_identity:\n-            return identity\n-        else:\n-            w = identity\n-            r_arr = r.array_form\n-            i = 0\n-            j = 0\n-            # i is the index for r and j is for\n-            # r_arr. r_arr[j] is the tuple (sym, p)\n-            # where sym is the generator symbol\n-            # and p is the power to which it is\n-            # raised while r[i] is a generator\n-            # (not just its symbol) or the inverse of\n-            # a generator - hence the need for\n-            # both indices\n-            while i < len(r):\n-                power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n-                else:\n-                    s = r[i]\n-                if s in images:\n-                    w = w*images[s]**power\n-                elif s**-1 in images:\n-                    w = w*images[s**-1]**power\n-                i += abs(power)\n-                j += 1\n-            return w\n+        w = identity\n+        for symbol, power in r.array_form:\n+            g = symbols_to_domain_generators[symbol]\n+            w *= images[g]**power\n+        return w\n \n     for r in rels:\n         if isinstance(codomain, FpGroup):\ndiff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 800dfeeb1e8b..0936bbddf46a 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -57,6 +57,11 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+\n def test_isomorphisms():\n \n     F, a, b = free_group(\"a, b\")\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/24443"}