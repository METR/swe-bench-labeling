{"instance_id": "django__django-15022", "score": "C", "diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 66f3396a6b..7e25dced4b 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1031,14 +1031,16 @@ class ModelAdmin(BaseModelAdmin):\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\n-            for bit in smart_split(search_term):\n+            search_terms = smart_split(search_term)\n+            final_query = models.Q()\n+            for bit in search_terms:\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n-                or_queries = models.Q(\n-                    *((orm_lookup, bit) for orm_lookup in orm_lookups),\n-                    _connector=models.Q.OR,\n-                )\n-                queryset = queryset.filter(or_queries)\n+                or_queries = models.Q()\n+                for orm_lookup in orm_lookups:\n+                    or_queries |= models.Q(**{orm_lookup: bit})\n+                final_query &= or_queries\n+            queryset = queryset.filter(final_query)\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n", "gold_standard_diff": "From 76ccce64cc3d66cfec075651c3d2239fda747dc2 Mon Sep 17 00:00:00 2001\nFrom: Jacob Walls <jacobtylerwalls@gmail.com>\nDate: Tue, 5 Oct 2021 21:38:15 -0400\nSubject: [PATCH] Fixed #16063 -- Adjusted admin changelist searches spanning\n multi-valued relationships.\n\nThis reduces the likelihood of admin searches issuing queries with\nexcessive joins.\n---\n django/contrib/admin/options.py  |  4 ++-\n docs/ref/contrib/admin/index.txt | 32 ++++++++++++++++++++++++\n docs/releases/4.1.txt            | 20 +++++++++++++++\n docs/topics/db/queries.txt       |  2 ++\n tests/admin_changelist/admin.py  |  6 +++++\n tests/admin_changelist/tests.py  | 42 +++++++++++++++++++++++++++++---\n 6 files changed, 102 insertions(+), 4 deletions(-)\n\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 66f3396a6b31..c5968a79ed90 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1031,6 +1031,7 @@ def construct_search(field_name):\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\n+            term_queries = []\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n@@ -1038,7 +1039,8 @@ def construct_search(field_name):\n                     *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                     _connector=models.Q.OR,\n                 )\n-                queryset = queryset.filter(or_queries)\n+                term_queries.append(or_queries)\n+            queryset = queryset.filter(models.Q(*term_queries))\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\ndiff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt\nindex 5caea603c1ae..ac8f44b76560 100644\n--- a/docs/ref/contrib/admin/index.txt\n+++ b/docs/ref/contrib/admin/index.txt\n@@ -1185,6 +1185,22 @@ subclass::\n     :meth:`ModelAdmin.get_search_results` to provide additional or alternate\n     search behavior.\n \n+    .. versionchanged:: 4.1\n+\n+        Searches using multiple search terms are now applied in a single call\n+        to ``filter()``, rather than in sequential ``filter()`` calls.\n+\n+        For multi-valued relationships, this means that rows from the related\n+        model must match all terms rather than any term. For example, if\n+        ``search_fields`` is set to ``['child__name', 'child__age']``, and a\n+        user searches for ``'Jamal 17'``, parent rows will be returned only if\n+        there is a relationship to some 17-year-old child named Jamal, rather\n+        than also returning parents who merely have a younger or older child\n+        named Jamal in addition to some other 17-year-old.\n+\n+        See the :ref:`spanning-multi-valued-relationships` topic for more\n+        discussion of this difference.\n+\n .. attribute:: ModelAdmin.search_help_text\n \n     .. versionadded:: 4.0\n@@ -1403,6 +1419,22 @@ templates used by the :class:`ModelAdmin` views:\n     field, for example ``... OR UPPER(\"polls_choice\".\"votes\"::text) = UPPER('4')``\n     on PostgreSQL.\n \n+    .. versionchanged:: 4.1\n+\n+        Searches using multiple search terms are now applied in a single call\n+        to ``filter()``, rather than in sequential ``filter()`` calls.\n+\n+        For multi-valued relationships, this means that rows from the related\n+        model must match all terms rather than any term. For example, if\n+        ``search_fields`` is set to ``['child__name', 'child__age']``, and a\n+        user searches for ``'Jamal 17'``, parent rows will be returned only if\n+        there is a relationship to some 17-year-old child named Jamal, rather\n+        than also returning parents who merely have a younger or older child\n+        named Jamal in addition to some other 17-year-old.\n+\n+        See the :ref:`spanning-multi-valued-relationships` topic for more\n+        discussion of this difference.\n+\n .. method:: ModelAdmin.save_related(request, form, formsets, change)\n \n     The ``save_related`` method is given the ``HttpRequest``, the parent\ndiff --git a/docs/releases/4.1.txt b/docs/releases/4.1.txt\nindex 3fdd7f53c6fb..5f184d234904 100644\n--- a/docs/releases/4.1.txt\n+++ b/docs/releases/4.1.txt\n@@ -290,6 +290,26 @@ Dropped support for MariaDB 10.2\n Upstream support for MariaDB 10.2 ends in May 2022. Django 4.1 supports MariaDB\n 10.3 and higher.\n \n+Admin changelist searches spanning multi-valued relationships changes\n+---------------------------------------------------------------------\n+\n+Admin changelist searches using multiple search terms are now applied in a\n+single call to ``filter()``, rather than in sequential ``filter()`` calls.\n+\n+For multi-valued relationships, this means that rows from the related model\n+must match all terms rather than any term. For example, if ``search_fields``\n+is set to ``['child__name', 'child__age']``, and a user searches for\n+``'Jamal 17'``, parent rows will be returned only if there is a relationship to\n+some 17-year-old child named Jamal, rather than also returning parents who\n+merely have a younger or older child named Jamal in addition to some other\n+17-year-old.\n+\n+See the :ref:`spanning-multi-valued-relationships` topic for more discussion of\n+this difference. In Django 4.0 and earlier,\n+:meth:`~django.contrib.admin.ModelAdmin.get_search_results` followed the\n+second example query, but this undocumented behavior led to queries with\n+excessive joins.\n+\n Miscellaneous\n -------------\n \ndiff --git a/docs/topics/db/queries.txt b/docs/topics/db/queries.txt\nindex c24c06da686b..eb68c7b4dade 100644\n--- a/docs/topics/db/queries.txt\n+++ b/docs/topics/db/queries.txt\n@@ -525,6 +525,8 @@ those latter objects, you could write::\n \n     Blog.objects.filter(entry__authors__isnull=False, entry__authors__name__isnull=True)\n \n+.. _spanning-multi-valued-relationships:\n+\n Spanning multi-valued relationships\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex f8051f64fa07..929539ea88bc 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -36,6 +36,12 @@ class ParentAdmin(admin.ModelAdmin):\n     list_select_related = ['child']\n \n \n+class ParentAdminTwoSearchFields(admin.ModelAdmin):\n+    list_filter = ['child__name']\n+    search_fields = ['child__name', 'child__age']\n+    list_select_related = ['child']\n+\n+\n class ChildAdmin(admin.ModelAdmin):\n     list_display = ['name', 'parent']\n     list_per_page = 10\ndiff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 92ea0dd71874..86fcab531a93 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -30,8 +30,8 @@\n     DynamicListDisplayLinksChildAdmin, DynamicListFilterChildAdmin,\n     DynamicSearchFieldsChildAdmin, EmptyValueChildAdmin, EventAdmin,\n     FilteredChildAdmin, GroupAdmin, InvitationAdmin,\n-    NoListDisplayLinksParentAdmin, ParentAdmin, QuartetAdmin, SwallowAdmin,\n-    site as custom_site,\n+    NoListDisplayLinksParentAdmin, ParentAdmin, ParentAdminTwoSearchFields,\n+    QuartetAdmin, SwallowAdmin, site as custom_site,\n )\n from .models import (\n     Band, CharPK, Child, ChordsBand, ChordsMusician, Concert, CustomIdUser,\n@@ -153,6 +153,42 @@ def get_list_select_related(self, request):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n+    def test_many_search_terms(self):\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle')\n+        Child.objects.create(parent=parent, name='Daniel')\n+\n+        m = ParentAdmin(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel ' * 80})\n+        request.user = self.superuser\n+\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        self.assertEqual(object_count, 1)\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_related_field_multiple_search_terms(self):\n+        \"\"\"\n+        Searches over multi-valued relationships return rows from related\n+        models only when all searched fields match that row.\n+        \"\"\"\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'danielle 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 0)\n+\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 1)\n+\n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n@@ -555,7 +591,7 @@ def test_multiple_search_fields(self):\n             ('Finlayson', 1),\n             ('Finlayson Hype', 0),\n             ('Jonathan Finlayson Duo', 1),\n-            ('Mary Jonathan Duo', 1),\n+            ('Mary Jonathan Duo', 0),\n             ('Oscar Finlayson Duo', 0),\n         ):\n             with self.subTest(search_string=search_string):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15022"}