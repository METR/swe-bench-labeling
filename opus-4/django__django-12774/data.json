{"instance_id": "django__django-12774", "score": "C", "diff": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..6b21ef169d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -689,8 +689,17 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n-            raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n+        if field_name != 'pk':\n+            field = self.model._meta.get_field(field_name)\n+            if not field.unique:\n+                # Check if the field is part of a total unique constraint\n+                is_unique_by_constraint = False\n+                for constraint in self.model._meta.total_unique_constraints:\n+                    if constraint.fields == (field_name,):\n+                        is_unique_by_constraint = True\n+                        break\n+                if not is_unique_by_constraint:\n+                    raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n                 return {}\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..b332af0285\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,99 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+# Edge case 1: Multiple single-field unique constraints on different fields\n+class MultiConstraintModel(models.Model):\n+    field1 = models.CharField(max_length=255)\n+    field2 = models.CharField(max_length=255)\n+    field3 = models.CharField(max_length=255)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"field1\"], name=\"field1_unq\"),\n+            models.UniqueConstraint(fields=[\"field2\"], name=\"field2_unq\"),\n+        ]\n+\n+# Edge case 2: Field is part of multiple constraints\n+class ComplexConstraintModel(models.Model):\n+    field1 = models.CharField(max_length=255)\n+    field2 = models.CharField(max_length=255)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"field1\"], name=\"field1_single_unq\"),\n+            models.UniqueConstraint(fields=[\"field1\", \"field2\"], name=\"field1_field2_unq\"),\n+        ]\n+\n+# Create tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(MultiConstraintModel)\n+    schema_editor.create_model(ComplexConstraintModel)\n+\n+# Test edge cases\n+print(\"=== Testing Edge Cases ===\")\n+\n+# Edge case 1: Multiple single-field constraints\n+print(\"\\n1. Testing MultiConstraintModel with multiple single-field constraints:\")\n+m1 = MultiConstraintModel.objects.create(field1=\"a1\", field2=\"b1\", field3=\"c1\")\n+m2 = MultiConstraintModel.objects.create(field1=\"a2\", field2=\"b2\", field3=\"c2\")\n+\n+try:\n+    result = MultiConstraintModel.objects.in_bulk(field_name=\"field1\")\n+    print(f\"field1 in_bulk SUCCESS: {result}\")\n+except ValueError as e:\n+    print(f\"field1 in_bulk FAILED: {e}\")\n+\n+try:\n+    result = MultiConstraintModel.objects.in_bulk(field_name=\"field2\")\n+    print(f\"field2 in_bulk SUCCESS: {result}\")\n+except ValueError as e:\n+    print(f\"field2 in_bulk FAILED: {e}\")\n+\n+try:\n+    result = MultiConstraintModel.objects.in_bulk(field_name=\"field3\")\n+    print(\"field3 in_bulk UNEXPECTED SUCCESS - should have failed!\")\n+except ValueError as e:\n+    print(f\"field3 in_bulk Expected failure: {e}\")\n+\n+# Edge case 2: Field is part of both single and multi-field constraints\n+print(\"\\n2. Testing ComplexConstraintModel where field1 is in both single and multi-field constraints:\")\n+c1 = ComplexConstraintModel.objects.create(field1=\"x1\", field2=\"y1\")\n+c2 = ComplexConstraintModel.objects.create(field1=\"x2\", field2=\"y2\")\n+\n+try:\n+    result = ComplexConstraintModel.objects.in_bulk(field_name=\"field1\")\n+    print(f\"field1 in_bulk SUCCESS: {result}\")\n+except ValueError as e:\n+    print(f\"field1 in_bulk FAILED: {e}\")\n+\n+try:\n+    result = ComplexConstraintModel.objects.in_bulk(field_name=\"field2\")\n+    print(\"field2 in_bulk UNEXPECTED SUCCESS - should have failed!\")\n+except ValueError as e:\n+    print(f\"field2 in_bulk Expected failure: {e}\")\n+\n+print(\"\\n=== All edge case tests completed ===\")\ndiff --git a/test_in_bulk_fix.py b/test_in_bulk_fix.py\nnew file mode 100644\nindex 0000000000..cbf640c448\n--- /dev/null\n+++ b/test_in_bulk_fix.py\n@@ -0,0 +1,143 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+# Define test models\n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n+    title = models.CharField(max_length=255)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n+        ]\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=255, unique=True)  # Traditional unique\n+    email = models.CharField(max_length=255)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+class Book(models.Model):\n+    isbn = models.CharField(max_length=13)\n+    title = models.CharField(max_length=255)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        constraints = [\n+            # Multi-field constraint - should not work with in_bulk\n+            models.UniqueConstraint(fields=[\"isbn\", \"title\"], name=\"%(app_label)s_%(class)s_isbn_title_unq\")\n+        ]\n+\n+class Magazine(models.Model):\n+    code = models.CharField(max_length=10)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        constraints = [\n+            # Conditional constraint - should not work with in_bulk\n+            models.UniqueConstraint(\n+                fields=[\"code\"], \n+                condition=models.Q(code__startswith='MAG'),\n+                name=\"%(app_label)s_%(class)s_code_unq\"\n+            )\n+        ]\n+\n+# Create the tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Article)\n+    schema_editor.create_model(Author)\n+    schema_editor.create_model(Book)\n+    schema_editor.create_model(Magazine)\n+\n+# Create test data\n+article1 = Article.objects.create(slug=\"test-1\", title=\"Title 1\")\n+article2 = Article.objects.create(slug=\"test-2\", title=\"Title 2\")\n+article3 = Article.objects.create(slug=\"test-3\", title=\"Title 3\")\n+\n+author1 = Author.objects.create(name=\"John Doe\", email=\"john@example.com\")\n+author2 = Author.objects.create(name=\"Jane Smith\", email=\"jane@example.com\")\n+\n+book1 = Book.objects.create(isbn=\"123\", title=\"Book 1\")\n+book2 = Book.objects.create(isbn=\"456\", title=\"Book 2\")\n+\n+mag1 = Magazine.objects.create(code=\"MAG001\")\n+mag2 = Magazine.objects.create(code=\"OTHER001\")\n+\n+print(\"=== Testing in_bulk() with UniqueConstraint ===\")\n+\n+# Test 1: Single field UniqueConstraint (should work now)\n+print(\"\\n1. Testing Article with single-field UniqueConstraint on slug:\")\n+try:\n+    result = Article.objects.in_bulk(field_name=\"slug\")\n+    print(f\"SUCCESS: in_bulk(field_name='slug') worked!\")\n+    print(f\"Result: {result}\")\n+    \n+    # Test with specific IDs\n+    result = Article.objects.in_bulk(['test-1', 'test-3'], field_name=\"slug\")\n+    print(f\"Result with specific slugs: {result}\")\n+except ValueError as e:\n+    print(f\"FAILED: {e}\")\n+\n+# Test 2: Traditional unique=True field (should still work)\n+print(\"\\n2. Testing Author with traditional unique=True on name:\")\n+try:\n+    result = Author.objects.in_bulk(field_name=\"name\")\n+    print(f\"SUCCESS: in_bulk(field_name='name') worked!\")\n+    print(f\"Result: {result}\")\n+except ValueError as e:\n+    print(f\"FAILED: {e}\")\n+\n+# Test 3: Non-unique field (should fail)\n+print(\"\\n3. Testing Article with non-unique field title:\")\n+try:\n+    result = Article.objects.in_bulk(field_name=\"title\")\n+    print(f\"ERROR: This should have failed but didn't!\")\n+except ValueError as e:\n+    print(f\"Expected failure: {e}\")\n+\n+# Test 4: Multi-field UniqueConstraint (should fail)\n+print(\"\\n4. Testing Book with multi-field UniqueConstraint on isbn:\")\n+try:\n+    result = Book.objects.in_bulk(field_name=\"isbn\")\n+    print(f\"ERROR: This should have failed but didn't!\")\n+except ValueError as e:\n+    print(f\"Expected failure: {e}\")\n+\n+# Test 5: Conditional UniqueConstraint (should fail)\n+print(\"\\n5. Testing Magazine with conditional UniqueConstraint on code:\")\n+try:\n+    result = Magazine.objects.in_bulk(field_name=\"code\")\n+    print(f\"ERROR: This should have failed but didn't!\")\n+except ValueError as e:\n+    print(f\"Expected failure: {e}\")\n+\n+# Test 6: Default pk field (should always work)\n+print(\"\\n6. Testing default pk field:\")\n+result = Article.objects.in_bulk()\n+print(f\"in_bulk() with pk works: {result}\")\n+\n+print(\"\\n=== All tests completed ===\")\ndiff --git a/test_in_bulk_unique_constraint.py b/test_in_bulk_unique_constraint.py\nnew file mode 100644\nindex 0000000000..958a922acc\n--- /dev/null\n+++ b/test_in_bulk_unique_constraint.py\n@@ -0,0 +1,54 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+# Define the test model\n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n+        ]\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Article)\n+\n+# Create some test data\n+Article.objects.create(slug=\"test-1\")\n+Article.objects.create(slug=\"test-2\")\n+Article.objects.create(slug=\"test-3\")\n+\n+# Test the current behavior (should fail)\n+try:\n+    result = Article.objects.in_bulk(field_name=\"slug\")\n+    print(\"ERROR: This should have failed but didn't!\")\n+except ValueError as e:\n+    print(f\"Current behavior - ValueError: {e}\")\n+\n+# Test that it works with pk\n+result = Article.objects.in_bulk()\n+print(f\"in_bulk() with pk works: {result}\")\ndiff --git a/test_unique_constraint_in_bulk.py b/test_unique_constraint_in_bulk.py\nnew file mode 100644\nindex 0000000000..5bb46832ff\n--- /dev/null\n+++ b/test_unique_constraint_in_bulk.py\n@@ -0,0 +1,94 @@\n+\"\"\"\n+Test that in_bulk() works with fields that have UniqueConstraint.\n+This test can be added to Django's test suite.\n+\"\"\"\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class UniqueConstraintInBulkTest(TestCase):\n+    \"\"\"Test in_bulk() with UniqueConstraint fields.\"\"\"\n+    \n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create models dynamically for the test\n+        class Article(models.Model):\n+            slug = models.CharField(max_length=255)\n+            title = models.CharField(max_length=255)\n+            \n+            class Meta:\n+                app_label = 'test_unique_constraint'\n+                constraints = [\n+                    models.UniqueConstraint(fields=[\"slug\"], name=\"article_slug_unq\")\n+                ]\n+        \n+        class Magazine(models.Model):\n+            code = models.CharField(max_length=10)\n+            \n+            class Meta:\n+                app_label = 'test_unique_constraint'\n+                constraints = [\n+                    # Conditional constraint - should not work with in_bulk\n+                    models.UniqueConstraint(\n+                        fields=[\"code\"], \n+                        condition=models.Q(code__startswith='MAG'),\n+                        name=\"magazine_code_unq\"\n+                    )\n+                ]\n+        \n+        class Book(models.Model):\n+            isbn = models.CharField(max_length=13)\n+            title = models.CharField(max_length=255)\n+            \n+            class Meta:\n+                app_label = 'test_unique_constraint'\n+                constraints = [\n+                    # Multi-field constraint - should not work with in_bulk\n+                    models.UniqueConstraint(\n+                        fields=[\"isbn\", \"title\"], \n+                        name=\"book_isbn_title_unq\"\n+                    )\n+                ]\n+        \n+        cls.Article = Article\n+        cls.Magazine = Magazine\n+        cls.Book = Book\n+        \n+    def test_in_bulk_with_single_field_unique_constraint(self):\n+        \"\"\"in_bulk() should work with single-field UniqueConstraint.\"\"\"\n+        a1 = self.Article.objects.create(slug=\"test-1\", title=\"Title 1\")\n+        a2 = self.Article.objects.create(slug=\"test-2\", title=\"Title 2\")\n+        a3 = self.Article.objects.create(slug=\"test-3\", title=\"Title 3\")\n+        \n+        # Test with all objects\n+        result = self.Article.objects.in_bulk(field_name=\"slug\")\n+        self.assertEqual(result, {\n+            \"test-1\": a1,\n+            \"test-2\": a2,\n+            \"test-3\": a3,\n+        })\n+        \n+        # Test with specific slugs\n+        result = self.Article.objects.in_bulk([\"test-1\", \"test-3\"], field_name=\"slug\")\n+        self.assertEqual(result, {\n+            \"test-1\": a1,\n+            \"test-3\": a3,\n+        })\n+        \n+    def test_in_bulk_with_conditional_unique_constraint(self):\n+        \"\"\"in_bulk() should not work with conditional UniqueConstraint.\"\"\"\n+        self.Magazine.objects.create(code=\"MAG001\")\n+        self.Magazine.objects.create(code=\"OTHER001\")\n+        \n+        msg = \"in_bulk()'s field_name must be a unique field but 'code' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.Magazine.objects.in_bulk(field_name=\"code\")\n+            \n+    def test_in_bulk_with_multi_field_unique_constraint(self):\n+        \"\"\"in_bulk() should not work with multi-field UniqueConstraint.\"\"\"\n+        self.Book.objects.create(isbn=\"123\", title=\"Book 1\")\n+        self.Book.objects.create(isbn=\"456\", title=\"Book 2\")\n+        \n+        msg = \"in_bulk()'s field_name must be a unique field but 'isbn' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.Book.objects.in_bulk(field_name=\"isbn\")\ndiff --git a/tests/lookup/models.py b/tests/lookup/models.py\nindex fbc9fa606f..b6d96d07c8 100644\n--- a/tests/lookup/models.py\n+++ b/tests/lookup/models.py\n@@ -108,3 +108,15 @@ class Freebie(models.Model):\n         to_fields=['id', 'product'],\n         on_delete=models.CASCADE,\n     )\n+\n+\n+\n+class CustomArticle(models.Model):\n+    \"\"\"Article with unique constraint instead of unique=True.\"\"\"\n+    slug = models.CharField(max_length=255)\n+    title = models.CharField(max_length=255)\n+    \n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=['slug'], name='custom_article_slug_unq')\n+        ]\ndiff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex baefdf9701..af15f6bd38 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -194,6 +194,32 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n+    def test_in_bulk_with_unique_constraint(self):\n+        from .models import CustomArticle\n+        # Create some custom articles\n+        ca1 = CustomArticle.objects.create(slug='custom-1', title='Custom 1')\n+        ca2 = CustomArticle.objects.create(slug='custom-2', title='Custom 2')\n+        ca3 = CustomArticle.objects.create(slug='custom-3', title='Custom 3')\n+        \n+        # Test in_bulk with UniqueConstraint field\n+        self.assertEqual(\n+            CustomArticle.objects.in_bulk(field_name='slug'),\n+            {\n+                'custom-1': ca1,\n+                'custom-2': ca2,\n+                'custom-3': ca3,\n+            }\n+        )\n+        \n+        # Test with specific slugs\n+        self.assertEqual(\n+            CustomArticle.objects.in_bulk(['custom-1', 'custom-3'], field_name='slug'),\n+            {\n+                'custom-1': ca1,\n+                'custom-3': ca3,\n+            }\n+        )\n+\n     def test_values(self):\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n", "gold_standard_diff": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db043a..c1aa35270127 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -689,7 +689,17 @@ def in_bulk(self, id_list=None, *, field_name='pk'):\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n+        opts = self.model._meta\n+        unique_fields = [\n+            constraint.fields[0]\n+            for constraint in opts.total_unique_constraints\n+            if len(constraint.fields) == 1\n+        ]\n+        if (\n+            field_name != 'pk' and\n+            not opts.get_field(field_name).unique and\n+            field_name not in unique_fields\n+        ):\n             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\ndiff --git a/tests/lookup/models.py b/tests/lookup/models.py\nindex fbc9fa606f03..9fd3f14ed3d5 100644\n--- a/tests/lookup/models.py\n+++ b/tests/lookup/models.py\n@@ -67,6 +67,11 @@ class Season(models.Model):\n     gt = models.IntegerField(null=True, blank=True)\n     nulled_text_field = NulledTextField(null=True)\n \n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=['year'], name='season_year_unique'),\n+        ]\n+\n     def __str__(self):\n         return str(self.year)\n \ndiff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex baefdf9701c4..9ed91a6ee0a6 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -4,10 +4,11 @@\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n-from django.db import connection\n+from django.db import connection, models\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import (\n@@ -189,11 +190,49 @@ def test_in_bulk_with_field(self):\n             }\n         )\n \n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n     def test_in_bulk_non_unique_field(self):\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constaint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n+\n     def test_values(self):\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12774"}