{"instance_id": "django__django-11477", "score": "I", "diff": "diff --git a/django/urls/base.py b/django/urls/base.py\nindex 0e1c3d909c..0d8ec4bd74 100644\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -172,7 +172,9 @@ def translate_url(url, lang_code):\n         to_be_reversed = \"%s:%s\" % (match.namespace, match.url_name) if match.namespace else match.url_name\n         with override(lang_code):\n             try:\n-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)\n+                # Filter out None values from kwargs to handle optional named groups\n+                filtered_kwargs = {k: v for k, v in match.kwargs.items() if v is not None}\n+                url = reverse(to_be_reversed, args=match.args, kwargs=filtered_kwargs)\n             except NoReverseMatch:\n                 pass\n             else:\n", "gold_standard_diff": "From b24e7638465867a206f3654f61b6fb0abcc96022 Mon Sep 17 00:00:00 2001\nFrom: daniel a rios <misterrios@gmail.com>\nDate: Wed, 19 Jun 2019 10:59:55 +0200\nSubject: [PATCH 1/3] Added tests for terminated path with optional arguments\n in django.urls.reverse().\n\n---\n tests/urlpatterns_reverse/tests.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex ba8cbedf4a0d..d26923ab9d11 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -180,6 +180,8 @@\n     ('named_optional', '/optional/1/', [], {'arg1': 1}),\n     ('named_optional', '/optional/1/2/', [1, 2], {}),\n     ('named_optional', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),\n+    ('named_optional_terminated', '/optional/1/', [1], {}),\n+    ('named_optional_terminated', '/optional/1/', [], {'arg1': 1}),\n     ('named_optional_terminated', '/optional/1/2/', [1, 2], {}),\n     ('named_optional_terminated', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),\n     ('hardcoded', '/hardcoded/', [], {}),\n\nFrom d640c71fa35640b4c13107c074be2f52c52ad861 Mon Sep 17 00:00:00 2001\nFrom: daniel a rios <misterrios@gmail.com>\nDate: Fri, 21 Jun 2019 17:37:41 +0200\nSubject: [PATCH 2/3] Refs #26431 -- Added tests for resolving URL and\n translate_url() with provided optional parameter.\n\n---\n tests/i18n/patterns/tests.py        | 5 +++++\n tests/i18n/patterns/urls/default.py | 5 +++++\n tests/urlpatterns/path_urls.py      | 1 +\n tests/urlpatterns/tests.py          | 6 ++++++\n 4 files changed, 17 insertions(+)\n\ndiff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex 6ed2c4ffebd6..8e77d3fd8fb9 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -158,6 +158,11 @@ def test_translate_url_utility(self):\n             # path() URL pattern\n             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')\n             self.assertEqual(translation.get_language(), 'en')\n+            # URL with parameters.\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n \n         with translation.override('nl'):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\ndiff --git a/tests/i18n/patterns/urls/default.py b/tests/i18n/patterns/urls/default.py\nindex b0c2f2585ec4..22fff166b3cf 100644\n--- a/tests/i18n/patterns/urls/default.py\n+++ b/tests/i18n/patterns/urls/default.py\n@@ -15,6 +15,11 @@\n urlpatterns += i18n_patterns(\n     path('prefixed/', view, name='prefixed'),\n     path('prefixed.xml', view, name='prefixed_xml'),\n+    re_path(\n+        _(r'^with-arguments/(?P<argument>[\\w-]+)/(?:(?P<optional>[\\w-]+).html)?$'),\n+        view,\n+        name='with-arguments',\n+    ),\n     re_path(_(r'^users/$'), view, name='users'),\n     re_path(_(r'^account/'), include('i18n.patterns.urls.namespace', namespace='account')),\n )\ndiff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 953fe6b6d735..b40801b39d35 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -11,6 +11,7 @@\n     path('users/<id>/', views.empty_view, name='user-with-id'),\n     path('included_urls/', include('urlpatterns.included_urls')),\n     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),\n+    re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n ]\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 74503e451879..66212d7df8c8 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -54,6 +54,12 @@ def test_re_path(self):\n         self.assertEqual(match.kwargs, {'pk': '1'})\n         self.assertEqual(match.route, '^regex/(?P<pk>[0-9]+)/$')\n \n+    def test_re_path_with_optional_parameter(self):\n+        match = resolve('/regex_optional/1/2/')\n+        self.assertEqual(match.url_name, 'regex_optional')\n+        self.assertEqual(match.kwargs, {'arg1': '1', 'arg2': '2'})\n+        self.assertEqual(match.route, r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?')\n+\n     def test_path_lookup_with_inclusion(self):\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n\nFrom 76b993a117b61c41584e95149a67d8a1e9f49dd1 Mon Sep 17 00:00:00 2001\nFrom: daniel a rios <misterrios@gmail.com>\nDate: Wed, 24 Apr 2019 22:51:47 +0200\nSubject: [PATCH 3/3] Fixed #26431 -- Prevented django.urls.resolve() from\n returning missing optional parameters.\n\nPrevious behavior was inconsistent with django.urls.reverse() and\ncaused that translate_url() created an incorrect URL when an optional\nparameter was missing.\n---\n django/urls/resolvers.py     |  2 +-\n tests/i18n/patterns/tests.py |  4 ++++\n tests/urlpatterns/tests.py   | 16 ++++++++++++----\n 3 files changed, 17 insertions(+), 5 deletions(-)\n\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex af0508f94e3d..247e3680c0ae 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -153,7 +153,7 @@ def match(self, path):\n             # If there are any named groups, use those as kwargs, ignoring\n             # non-named groups. Otherwise, pass all non-named arguments as\n             # positional arguments.\n-            kwargs = match.groupdict()\n+            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n             args = () if kwargs else match.groups()\n             return path[match.end():], args, kwargs\n         return None\ndiff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex 8e77d3fd8fb9..866bcb0bb812 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -159,6 +159,10 @@ def test_translate_url_utility(self):\n             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')\n             self.assertEqual(translation.get_language(), 'en')\n             # URL with parameters.\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n             self.assertEqual(\n                 translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n                 '/nl/with-arguments/regular-argument/optional.html',\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 66212d7df8c8..214739f678c3 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -55,10 +55,18 @@ def test_re_path(self):\n         self.assertEqual(match.route, '^regex/(?P<pk>[0-9]+)/$')\n \n     def test_re_path_with_optional_parameter(self):\n-        match = resolve('/regex_optional/1/2/')\n-        self.assertEqual(match.url_name, 'regex_optional')\n-        self.assertEqual(match.kwargs, {'arg1': '1', 'arg2': '2'})\n-        self.assertEqual(match.route, r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?')\n+        for url, kwargs in (\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1'}),\n+        ):\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n+                )\n \n     def test_path_lookup_with_inclusion(self):\n         match = resolve('/included_urls/extra/something/')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11477"}