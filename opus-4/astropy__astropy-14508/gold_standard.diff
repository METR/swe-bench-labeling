From 3d8a2c6285e366d2b2f961343ef6e439a9d57b4d Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 11:00:06 +0000
Subject: [PATCH 01/11] Fixed incorrect string representation of floats in
 Cards

---
 astropy/io/fits/card.py              |  2 +-
 astropy/io/fits/tests/test_header.py | 21 +++++++++++++++++++++
 2 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89e8..de851737531f 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,7 +1299,7 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
+    value_str = str(value_str)
     if "." not in value_str and "E" not in value_str:
         value_str += ".0"
     elif "E" in value_str:
diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py
index a8f4e1160fcd..95ed9a64fde8 100644
--- a/astropy/io/fits/tests/test_header.py
+++ b/astropy/io/fits/tests/test_header.py
@@ -137,6 +137,27 @@ def test_floating_point_value_card(self):
         ):
             assert str(c) == _pad("FLOATNUM= -4.6737463674763E+32")
 
+    def test_floating_point_string_representation_card(self):
+        """
+        Ensures Card formats float values with the correct precision, avoiding
+        comment truncation
+
+        Regression test for https://github.com/astropy/astropy/issues/14507
+        """
+        k = "HIERARCH ABC DEF GH IJKLMN"
+        com = "[m] abcdef ghijklm nopqrstu vw xyzab"
+        c = fits.Card(k, 0.009125, com)
+        expected_str = f"{k} = 0.009125 / {com}    "
+        assert str(c) == expected_str
+
+        c = fits.Card(k, 8.95, com)
+        expected_str = f"{k} = 8.95 / {com}    "
+        assert str(c) == expected_str
+
+        c = fits.Card(k, -99.9, com)
+        expected_str = f"{k} = -99.9 / {com}    "
+        assert str(c) == expected_str
+
     def test_complex_value_card(self):
         """Test Card constructor with complex value"""
 

From 7566bc2d0c7876cd0dab79a85ff12003c44747bb Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 11:10:00 +0000
Subject: [PATCH 02/11] Fixed incorrect variable name

---
 astropy/io/fits/card.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index de851737531f..4fc408711f8a 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,7 +1299,7 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = str(value_str)
+    value_str = str(value)
     if "." not in value_str and "E" not in value_str:
         value_str += ".0"
     elif "E" in value_str:

From a65f074bc1b01973d6115e57687c9821976cb19c Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 11:15:24 +0000
Subject: [PATCH 03/11] Added changelog entry

---
 docs/changes/io.fits/14508.bugfix.rst | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 docs/changes/io.fits/14508.bugfix.rst

diff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst
new file mode 100644
index 000000000000..4fbca7b77c52
--- /dev/null
+++ b/docs/changes/io.fits/14508.bugfix.rst
@@ -0,0 +1,2 @@
+`fits.io.Card` float representation now uses the default Python representation
+for floating point values.

From 89d46911c1c313d401956a5c2a1f737719eaf244 Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 11:42:02 +0000
Subject: [PATCH 04/11] Fixed wrong check for exponent symbol

---
 astropy/io/fits/card.py | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 4fc408711f8a..78ecc7550235 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1300,19 +1300,20 @@ def _format_value(value):
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
     value_str = str(value)
-    if "." not in value_str and "E" not in value_str:
-        value_str += ".0"
-    elif "E" in value_str:
+
+    if "e" in value_str:
         # On some Windows builds of Python (and possibly other platforms?) the
         # exponent is zero-padded out to, it seems, three digits.  Normalize
         # the format to pad only to two digits.
-        significand, exponent = value_str.split("E")
+        significand, exponent = value_str.split("e")
         if exponent[0] in ("+", "-"):
             sign = exponent[0]
             exponent = exponent[1:]
         else:
             sign = ""
         value_str = f"{significand}E{sign}{int(exponent):02d}"
+    elif "." not in value_str:
+        value_str += ".0"
 
     # Limit the value string to at most 20 characters.
     str_len = len(value_str)

From 03730f37dff98ec3849f4e0efb3491ad1dfea782 Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 13:12:22 +0000
Subject: [PATCH 05/11] Fix test_floating_point_string_representation_card
 assertion

---
 astropy/io/fits/tests/test_header.py | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py
index 95ed9a64fde8..c573100c91d2 100644
--- a/astropy/io/fits/tests/test_header.py
+++ b/astropy/io/fits/tests/test_header.py
@@ -147,16 +147,16 @@ def test_floating_point_string_representation_card(self):
         k = "HIERARCH ABC DEF GH IJKLMN"
         com = "[m] abcdef ghijklm nopqrstu vw xyzab"
         c = fits.Card(k, 0.009125, com)
-        expected_str = f"{k} = 0.009125 / {com}    "
-        assert str(c) == expected_str
+        expected_str = f"{k} = 0.009125 / {com}"
+        assert str(c)[: len(expected_str)] == expected_str
 
         c = fits.Card(k, 8.95, com)
-        expected_str = f"{k} = 8.95 / {com}    "
-        assert str(c) == expected_str
+        expected_str = f"{k} = 8.95 / {com}"
+        assert str(c)[: len(expected_str)] == expected_str
 
         c = fits.Card(k, -99.9, com)
-        expected_str = f"{k} = -99.9 / {com}    "
-        assert str(c) == expected_str
+        expected_str = f"{k} = -99.9 / {com}"
+        assert str(c)[: len(expected_str)] == expected_str
 
     def test_complex_value_card(self):
         """Test Card constructor with complex value"""

From 50c51e336a2ed23dc3765fb606a4f9395d4cda18 Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 13:29:18 +0000
Subject: [PATCH 06/11] Fixed incorrect changelog

---
 docs/changes/io.fits/14508.bugfix.rst | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst
index 4fbca7b77c52..44946ade61c3 100644
--- a/docs/changes/io.fits/14508.bugfix.rst
+++ b/docs/changes/io.fits/14508.bugfix.rst
@@ -1,2 +1,2 @@
-`fits.io.Card` float representation now uses the default Python representation
-for floating point values.
+`io.fits.Card` now uses the default Python representation for floating point
+values.

From 60835aa8b73f64a7a4402a000605d2d0fa1105b9 Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 14:03:45 +0000
Subject: [PATCH 07/11] Fixed incorrect changelog reference

---
 docs/changes/io.fits/14508.bugfix.rst | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst
index 44946ade61c3..d75dbc26a3c5 100644
--- a/docs/changes/io.fits/14508.bugfix.rst
+++ b/docs/changes/io.fits/14508.bugfix.rst
@@ -1,2 +1,2 @@
-`io.fits.Card` now uses the default Python representation for floating point
+`Card` now uses the default Python representation for floating point
 values.

From b3cc12c818ebbf4a2dc1b1f25d29e22f7ddcfaaa Mon Sep 17 00:00:00 2001
From: Tiago Gomes <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 15:01:50 +0000
Subject: [PATCH 08/11] Fix Card reference in changelog

Co-authored-by: P. L. Lim <2090236+pllim@users.noreply.github.com>
---
 docs/changes/io.fits/14508.bugfix.rst | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst
index d75dbc26a3c5..b562e2c8b69d 100644
--- a/docs/changes/io.fits/14508.bugfix.rst
+++ b/docs/changes/io.fits/14508.bugfix.rst
@@ -1,2 +1,2 @@
-`Card` now uses the default Python representation for floating point
+``Card`` now uses the default Python representation for floating point
 values.

From 631b607f64aafed11003b5af722dbc4dd1df8051 Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 16:53:16 +0000
Subject: [PATCH 09/11] Simplify handling of scientific notation in cards

---
 astropy/io/fits/card.py | 32 +++++++++-----------------------
 1 file changed, 9 insertions(+), 23 deletions(-)

diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 78ecc7550235..1a9ce342f9e1 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1298,33 +1298,19 @@ def _format_value(value):
 
 
 def _format_float(value):
-    """Format a floating number to make sure it gets the decimal point."""
-    value_str = str(value)
-
-    if "e" in value_str:
-        # On some Windows builds of Python (and possibly other platforms?) the
-        # exponent is zero-padded out to, it seems, three digits.  Normalize
-        # the format to pad only to two digits.
-        significand, exponent = value_str.split("e")
-        if exponent[0] in ("+", "-"):
-            sign = exponent[0]
-            exponent = exponent[1:]
-        else:
-            sign = ""
-        value_str = f"{significand}E{sign}{int(exponent):02d}"
-    elif "." not in value_str:
-        value_str += ".0"
+    """Format a floating number to make sure it is at most 20 characters."""
+    value_str = str(value).replace("e", "E")
 
     # Limit the value string to at most 20 characters.
-    str_len = len(value_str)
-
-    if str_len > 20:
+    if str_len := len(value_str) > 20:
         idx = value_str.find("E")
-
-        if idx < 0:
-            value_str = value_str[:20]
-        else:
+        if idx > 0:
+            # truncate significand (mantissa)
             value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+        else:
+            # Python should never return a float representation larger than 20
+            # characters unless it is using scientific notation
+            raise RuntimeError("_format_float did not receive a float.")
 
     return value_str
 

From 13db4049c28d14104e8c8044009b50373f3d8fd4 Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 17:01:20 +0000
Subject: [PATCH 10/11] Fix incorrect assignment

---
 astropy/io/fits/card.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1a9ce342f9e1..12682534df4f 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1302,7 +1302,7 @@ def _format_float(value):
     value_str = str(value).replace("e", "E")
 
     # Limit the value string to at most 20 characters.
-    if str_len := len(value_str) > 20:
+    if (str_len := len(value_str)) > 20:
         idx = value_str.find("E")
         if idx > 0:
             # truncate significand (mantissa)

From 7054d58c980f240c81b53e4f4e95c675e19bb521 Mon Sep 17 00:00:00 2001
From: kYwzor <tiago_gomes_76@hotmail.com>
Date: Thu, 9 Mar 2023 17:50:57 +0000
Subject: [PATCH 11/11] Revert truncation

---
 astropy/io/fits/card.py | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 12682534df4f..1b3285ddce92 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1304,13 +1304,12 @@ def _format_float(value):
     # Limit the value string to at most 20 characters.
     if (str_len := len(value_str)) > 20:
         idx = value_str.find("E")
-        if idx > 0:
-            # truncate significand (mantissa)
-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
+        if idx < 0:
+            # No scientific notation, truncate decimal places
+            value_str = value_str[:20]
         else:
-            # Python should never return a float representation larger than 20
-            # characters unless it is using scientific notation
-            raise RuntimeError("_format_float did not receive a float.")
+            # Scientific notation, truncate significand (mantissa)
+            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
 
     return value_str
 
