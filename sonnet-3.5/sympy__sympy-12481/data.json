{"instance_id": "sympy__sympy-12481", "score": "I", "diff": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..9b8dac6141 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -843,6 +843,11 @@ def __new__(cls, *args, **kwargs):\n         Permutation([0, 4, 3, 5, 1, 2], size=10)\n         >>> _.array_form\n         [0, 4, 3, 5, 1, 2, 6, 7, 8, 9]\n+\n+        Non-disjoint cycles are allowed and applied in left-to-right order:\n+\n+        >>> Permutation([[0, 1], [0, 1]])\n+        Permutation([0, 1])\n         \"\"\"\n         size = kwargs.pop('size', None)\n         if size is not None:\n@@ -878,6 +883,29 @@ def __new__(cls, *args, **kwargs):\n             raise ValueError(\"Permutation argument must be a list of ints, \"\n                              \"a list of lists, Permutation or Cycle.\")\n \n+        # Handle cyclic form input, including non-disjoint cycles\n+        if is_sequence(a) and all(is_sequence(cycle) for cycle in a):\n+            max_element = max(max(cycle) for cycle in a)\n+            perm = list(range(max_element + 1))\n+            for cycle in a:\n+                # Apply the cycle to the current permutation\n+                new_perm = perm.copy()\n+                for i in range(len(cycle)):\n+                    new_perm[cycle[i]] = perm[cycle[(i + 1) % len(cycle)]]\n+                perm = new_perm\n+            if size is not None:\n+                if size < len(perm):\n+                    raise ValueError(\"Size must be at least %d\" % len(perm))\n+                perm.extend(range(len(perm), size))\n+            return cls._af_new(perm)\n+\n+        # Handle array form input\n+        if is_sequence(a) and all(isinstance(i, int) for i in a):\n+            if size is not None:\n+                if size < len(a):\n+                    raise ValueError(\"Size must be at least %d\" % len(a))\n+                a = list(a) + list(range(len(a), size))\n+            return cls._af_new(a)\n \n         # safe to assume args are valid; this also makes a copy\n         # of the args\n@@ -1298,11 +1326,12 @@ def __mul__(self, other):\n         \"\"\"\n         a = self.array_form\n         # __rmul__ makes sure the other is a Permutation\n-        b = other.array_form\n+        b = list(other.array_form)  # Convert to list to avoid range issues\n         if not b:\n             perm = a\n         else:\n-            b.extend(list(range(len(b), len(a))))\n+            if len(b) < len(a):\n+                b.extend(range(len(b), len(a)))\n             perm = [b[i] for i in a] + b[len(a):]\n         return _af_new(perm)\n \ndiff --git a/test_permutation.py b/test_permutation.py\nnew file mode 100644\nindex 0000000000..5413d32c1a\n--- /dev/null\n+++ b/test_permutation.py\n@@ -0,0 +1,21 @@\n+from sympy.combinatorics.permutations import Permutation\n+\n+def test_non_disjoint_cycles():\n+    # Test with non-disjoint cycles\n+    p = Permutation([[0, 1], [0, 1]])\n+    print(\"Test 1 result:\", p.array_form)\n+    assert p.array_form == [0, 1], f\"Expected [0, 1], but got {p.array_form}\"\n+\n+    # Test with more complex non-disjoint cycles\n+    p = Permutation([[0, 1, 2], [1, 3]])\n+    print(\"Test 2 result:\", p.array_form)\n+    assert p.array_form == [1, 3, 0, 2], f\"Expected [1, 3, 0, 2], but got {p.array_form}\"\n+\n+    # Test with disjoint cycles (should work as before)\n+    p = Permutation([[0, 1], [2, 3]])\n+    print(\"Test 3 result:\", p.array_form)\n+    assert p.array_form == [1, 0, 3, 2], f\"Expected [1, 0, 3, 2], but got {p.array_form}\"\n+\n+if __name__ == \"__main__\":\n+    test_non_disjoint_cycles()\n+    print(\"All tests passed!\")\n", "gold_standard_diff": "From 835464e50509414932edcde11911d52143a301dc Mon Sep 17 00:00:00 2001\nFrom: Val <valeriia.gladkova@gmail.com>\nDate: Mon, 3 Apr 2017 04:45:44 +0300\nSubject: [PATCH 1/2] permutations: allow non-disjoint lists in arguments for\n Permutation\n\n---\n sympy/combinatorics/permutations.py            | 8 ++------\n sympy/combinatorics/tests/test_permutations.py | 1 -\n 2 files changed, 2 insertions(+), 7 deletions(-)\n\ndiff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a47822..4ac1c2ef3b48 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,12 +895,8 @@ def __new__(cls, *args, **kwargs):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+        if has_dups(temp) and not is_cycle:\n+            raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n         if not is_cycle and \\\ndiff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 7f8cd572e749..beea1764734b 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -349,7 +349,6 @@ def test_args():\n     raises(ValueError, lambda: Permutation([[1, 2], 0]))\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n-    raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n\nFrom 85ca014a7759883fb0192d2a799f1c8a9c7941bd Mon Sep 17 00:00:00 2001\nFrom: Val <valeriia.gladkova@gmail.com>\nDate: Mon, 3 Apr 2017 04:49:04 +0300\nSubject: [PATCH 2/2] added test\n\n---\n sympy/combinatorics/tests/test_permutations.py | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex beea1764734b..968f046f8fb2 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -339,6 +339,7 @@ def test_args():\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n         [[1], [4, 2]], size=6) == Permutation([0, 1, 4, 3, 2, 5])\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation(0, 1, 2)\n     assert Permutation([], size=3) == Permutation([0, 1, 2])\n     assert Permutation(3).list(5) == [0, 1, 2, 3, 4]\n     assert Permutation(3).list(-1) == []\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/12481"}