diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index aaf35ee37c..646d7cf0f7 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -846,23 +846,37 @@ class Query(BaseExpression):
         relabelling any references to them in select columns and the where
         clause.
         """
-        assert set(change_map).isdisjoint(change_map.values())
+        # Create a new change_map that ensures no conflicts between keys and values
+        # This resolves issues where the original change_map might have overlapping
+        # keys and values, which could lead to alias conflicts and AssertionErrors
+        new_change_map = {}
+        used_aliases = set(change_map.values())
+        for old_alias, new_alias in change_map.items():
+            if new_alias in new_change_map:
+                # If the new_alias is already used, generate a unique alias
+                base_alias = new_alias
+                i = 1
+                while new_alias in used_aliases:
+                    new_alias = f"{base_alias}_{i}"
+                    i += 1
+            new_change_map[old_alias] = new_alias
+            used_aliases.add(new_alias)
 
         # 1. Update references in "select" (normal columns plus aliases),
         # "group by" and "where".
-        self.where.relabel_aliases(change_map)
+        self.where.relabel_aliases(new_change_map)
         if isinstance(self.group_by, tuple):
-            self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])
-        self.select = tuple([col.relabeled_clone(change_map) for col in self.select])
+            self.group_by = tuple([col.relabeled_clone(new_change_map) for col in self.group_by])
+        self.select = tuple([col.relabeled_clone(new_change_map) for col in self.select])
         self.annotations = self.annotations and {
-            key: col.relabeled_clone(change_map) for key, col in self.annotations.items()
+            key: col.relabeled_clone(new_change_map) for key, col in self.annotations.items()
         }
 
         # 2. Rename the alias in the internal table/alias datastructures.
-        for old_alias, new_alias in change_map.items():
+        for old_alias, new_alias in new_change_map.items():
             if old_alias not in self.alias_map:
                 continue
-            alias_data = self.alias_map[old_alias].relabeled_clone(change_map)
+            alias_data = self.alias_map[old_alias].relabeled_clone(new_change_map)
             self.alias_map[new_alias] = alias_data
             self.alias_refcount[new_alias] = self.alias_refcount[old_alias]
             del self.alias_refcount[old_alias]
@@ -875,7 +889,7 @@ class Query(BaseExpression):
                     break
         self.external_aliases = {
             # Table is aliased or it's being changed and thus is aliased.
-            change_map.get(alias, alias): (aliased or alias in change_map)
+            new_change_map.get(alias, alias): (aliased or alias in new_change_map)
             for alias, aliased in self.external_aliases.items()
         }
 
