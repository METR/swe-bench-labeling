From 53944e7c51500b80a7698de23938db485433faaa Mon Sep 17 00:00:00 2001
From: Marten van Kerkwijk <mhvk@astro.utoronto.ca>
Date: Fri, 29 Jun 2018 12:26:10 -0400
Subject: [PATCH] Ensure that UnrecognizedUnit.__eq__ never raises an
 exception.

---
 CHANGES.rst                       |  3 +++
 astropy/units/core.py             | 10 +++++++---
 astropy/units/tests/test_units.py |  7 +++++++
 3 files changed, 17 insertions(+), 3 deletions(-)

diff --git a/CHANGES.rst b/CHANGES.rst
index 12280ebeca51..bd2bc93e5fd2 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -1257,6 +1257,9 @@ astropy.time
 astropy.units
 ^^^^^^^^^^^^^
 
+- ``UnrecognizedUnit`` instances can now be compared to any other object
+  without raising `TypeError`. [#7606]
+
 astropy.utils
 ^^^^^^^^^^^^^
 
diff --git a/astropy/units/core.py b/astropy/units/core.py
index e9bd986d330a..533dac046dea 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -728,7 +728,7 @@ def __eq__(self, other):
         try:
             other = Unit(other, parse_strict='silent')
         except (ValueError, UnitsError, TypeError):
-            return False
+            return NotImplemented
 
         # Other is Unit-like, but the test below requires it is a UnitBase
         # instance; if it is not, give up (so that other can try).
@@ -1710,8 +1710,12 @@ def _unrecognized_operator(self, *args, **kwargs):
         _unrecognized_operator
 
     def __eq__(self, other):
-        other = Unit(other, parse_strict='silent')
-        return isinstance(other, UnrecognizedUnit) and self.name == other.name
+        try:
+            other = Unit(other, parse_strict='silent')
+        except (ValueError, UnitsError, TypeError):
+            return NotImplemented
+
+        return isinstance(other, type(self)) and self.name == other.name
 
     def __ne__(self, other):
         return not (self == other)
diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py
index 000c12d22125..1677d3aef7c4 100644
--- a/astropy/units/tests/test_units.py
+++ b/astropy/units/tests/test_units.py
@@ -185,6 +185,13 @@ def test_unknown_unit3():
     assert unit != unit3
     assert not unit.is_equivalent(unit3)
 
+    # Also test basic (in)equalities.
+    assert unit == "FOO"
+    assert unit != u.m
+    # next two from gh-7603.
+    assert unit != None  # noqa
+    assert unit not in (None, u.m)
+
     with pytest.raises(ValueError):
         unit._get_converter(unit3)
 
