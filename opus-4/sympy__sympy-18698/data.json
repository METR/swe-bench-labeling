{"instance_id": "sympy__sympy-18698", "score": "C", "diff": "diff --git a/fix_sqf.py b/fix_sqf.py\nnew file mode 100644\nindex 0000000000..21fcecff87\n--- /dev/null\n+++ b/fix_sqf.py\n@@ -0,0 +1,37 @@\n+def combine_same_multiplicity_factors(factors):\n+    \"\"\"\n+    Combine factors with the same multiplicity.\n+    \n+    Input: [(f1, k1), (f2, k2), ...]\n+    Output: [(g1, k1), (g2, k2), ...] where factors with same ki are multiplied\n+    \"\"\"\n+    from collections import defaultdict\n+    \n+    # Group factors by their multiplicity\n+    multiplicity_groups = defaultdict(list)\n+    for factor, mult in factors:\n+        multiplicity_groups[mult].append(factor)\n+    \n+    # Combine factors within each multiplicity group\n+    combined_factors = []\n+    for mult in sorted(multiplicity_groups.keys()):\n+        factors_list = multiplicity_groups[mult]\n+        if len(factors_list) == 1:\n+            combined_factors.append((factors_list[0], mult))\n+        else:\n+            # Multiply all factors with the same multiplicity\n+            combined = factors_list[0]\n+            for f in factors_list[1:]:\n+                combined = combined * f\n+            combined_factors.append((combined, mult))\n+    \n+    return combined_factors\n+\n+# Test the function\n+from sympy import symbols, Poly\n+x = symbols('x')\n+\n+# Test case from the issue\n+factors = [(Poly(x**2 + 1, x), 1), (Poly(x - 1, x), 2), (Poly(x - 3, x), 3), (Poly(x - 2, x), 3)]\n+print(\"Original factors:\", factors)\n+print(\"Combined factors:\", combine_same_multiplicity_factors(factors))\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f..f0bcd8eb98 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -5874,6 +5874,35 @@ def sqf_part(f, *gens, **args):\n         return result\n \n \n+def _combine_same_multiplicity_factors(factors):\n+    \"\"\"Combine factors with the same multiplicity for square-free decomposition.\n+    \n+    Input: [(f1, k1), (f2, k2), ...]\n+    Output: [(g1, k1), (g2, k2), ...] where factors with same ki are multiplied\n+    \"\"\"\n+    from collections import defaultdict\n+    \n+    # Group factors by their multiplicity\n+    multiplicity_groups = defaultdict(list)\n+    for factor, mult in factors:\n+        multiplicity_groups[mult].append(factor)\n+    \n+    # Combine factors within each multiplicity group\n+    combined_factors = []\n+    for mult in sorted(multiplicity_groups.keys()):\n+        factors_list = multiplicity_groups[mult]\n+        if len(factors_list) == 1:\n+            combined_factors.append((factors_list[0], mult))\n+        else:\n+            # Multiply all factors with the same multiplicity\n+            combined = factors_list[0]\n+            for f in factors_list[1:]:\n+                combined = combined * f\n+            combined_factors.append((combined, mult))\n+    \n+    return combined_factors\n+\n+\n def _sorted_factors(factors, method):\n     \"\"\"Sort a list of ``(expr, exp)`` pairs. \"\"\"\n     if method == 'sqf':\n@@ -5959,6 +5988,26 @@ def _symbolic_factor(expr, opt, method):\n         if hasattr(expr,'_eval_factor'):\n             return expr._eval_factor()\n         coeff, factors = _symbolic_factor_list(together(expr, fraction=opt['fraction']), opt, method)\n+        \n+        # For square-free decomposition, combine factors with the same multiplicity\n+        if method == 'sqf' and factors:\n+            # Convert to Poly if needed for combination\n+            poly_factors = []\n+            for f, k in factors:\n+                if not hasattr(f, 'is_Poly') or not f.is_Poly:\n+                    try:\n+                        from sympy.polys import Poly\n+                        poly_f = Poly(f)\n+                        poly_factors.append((poly_f, k))\n+                    except:\n+                        poly_factors.append((f, k))\n+                else:\n+                    poly_factors.append((f, k))\n+            \n+            # Combine factors with same multiplicity\n+            combined_factors = _combine_same_multiplicity_factors(poly_factors)\n+            factors = combined_factors\n+        \n         return _keep_coeff(coeff, _factors_product(factors))\n     elif hasattr(expr, 'args'):\n         return expr.func(*[_symbolic_factor(arg, opt, method) for arg in expr.args])\n@@ -5997,6 +6046,11 @@ def _generic_factor_list(expr, gens, args, method):\n \n         fp = _sorted_factors(fp, method)\n         fq = _sorted_factors(fq, method)\n+        \n+        # For square-free decomposition, combine factors with the same multiplicity\n+        if method == 'sqf':\n+            fp = _combine_same_multiplicity_factors(fp)\n+            fq = _combine_same_multiplicity_factors(fq)\n \n         if not opt.polys:\n             fp = [(f.as_expr(), k) for f, k in fp]\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..94b6d94f1a\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,69 @@\n+from sympy import symbols, sqf_list, expand, Poly\n+\n+x = symbols('x')\n+\n+# Test various cases\n+test_cases = [\n+    # Original issue test case\n+    ((x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3,\n+     (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])),\n+    \n+    # Test case with more factors of same multiplicity\n+    ((x - 1)**2 * (x - 2)**2 * (x - 3)**2,\n+     (1, [(x**3 - 6*x**2 + 11*x - 6, 2)])),\n+    \n+    # Test case with 3 factors of same multiplicity  \n+    ((x - 1)**3 * (x - 2)**3 * (x - 3)**3,\n+     (1, [(x**3 - 6*x**2 + 11*x - 6, 3)])),\n+    \n+    # Mixed multiplicities\n+    ((x - 1) * (x - 2)**2 * (x - 3)**2 * (x - 4)**3,\n+     (1, [(x - 1, 1), (x**2 - 5*x + 6, 2), (x - 4, 3)])),\n+    \n+    # No repeated multiplicities (should not change)\n+    ((x - 1) * (x - 2)**2 * (x - 3)**3,\n+     (1, [(x - 1, 1), (x - 2, 2), (x - 3, 3)])),\n+    \n+    # Edge case: single factor\n+    ((x - 1)**3,\n+     (1, [(x - 1, 3)])),\n+    \n+    # Edge case: no factors\n+    (x**0,\n+     (1, [])),\n+    \n+    # Test with leading coefficient\n+    (6 * (x - 1)**2 * (x - 2)**2,\n+     (6, [(x**2 - 3*x + 2, 2)])),\n+]\n+\n+print(\"Testing square-free decomposition with combined factors:\\n\")\n+for i, (expr, expected) in enumerate(test_cases):\n+    result = sqf_list(expr)\n+    print(f\"Test {i+1}:\")\n+    print(f\"  Input: {expr}\")\n+    print(f\"  Result: {result}\")\n+    print(f\"  Expected: {expected}\")\n+    \n+    # Check if coefficient matches\n+    if result[0] != expected[0]:\n+        print(f\"  ERROR: Coefficient mismatch! Got {result[0]}, expected {expected[0]}\")\n+    \n+    # Check factors\n+    result_factors = result[1]\n+    expected_factors = expected[1]\n+    \n+    if len(result_factors) != len(expected_factors):\n+        print(f\"  ERROR: Number of factors mismatch! Got {len(result_factors)}, expected {len(expected_factors)}\")\n+    else:\n+        for j, ((rf, rm), (ef, em)) in enumerate(zip(result_factors, expected_factors)):\n+            # Expand and compare factors\n+            rf_expanded = expand(rf)\n+            ef_expanded = expand(ef)\n+            if rf_expanded != ef_expanded or rm != em:\n+                print(f\"  ERROR: Factor {j} mismatch!\")\n+                print(f\"    Got: ({rf_expanded}, {rm})\")\n+                print(f\"    Expected: ({ef_expanded}, {em})\")\n+            else:\n+                print(f\"  Factor {j} OK: ({rf_expanded}, {rm})\")\n+    print()\ndiff --git a/test_sqf.py b/test_sqf.py\nnew file mode 100644\nindex 0000000000..1e5092df85\n--- /dev/null\n+++ b/test_sqf.py\n@@ -0,0 +1,25 @@\n+from sympy import symbols, sqf, expand\n+\n+x = symbols('x')\n+\n+# Test the sqf function which should return the factored form\n+test_cases = [\n+    # Original issue test case\n+    (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3,\n+    \n+    # Test case with more factors of same multiplicity\n+    (x - 1)**2 * (x - 2)**2 * (x - 3)**2,\n+    \n+    # Test case with 3 factors of same multiplicity  \n+    (x - 1)**3 * (x - 2)**3 * (x - 3)**3,\n+]\n+\n+print(\"Testing sqf function:\\n\")\n+for expr in test_cases:\n+    result = sqf(expr)\n+    print(f\"Input: {expr}\")\n+    print(f\"Result: {result}\")\n+    print(f\"Expanded result: {expand(result)}\")\n+    print(f\"Original expanded: {expand(expr)}\")\n+    print(f\"Equal? {expand(result) == expand(expr)}\")\n+    print()\ndiff --git a/test_sqf_include.py b/test_sqf_include.py\nnew file mode 100644\nindex 0000000000..86f523a4d4\n--- /dev/null\n+++ b/test_sqf_include.py\n@@ -0,0 +1,22 @@\n+from sympy import symbols, sqf_list_include\n+\n+x = symbols('x')\n+\n+# Test sqf_list_include which should also work with combined factors\n+test_cases = [\n+    # Original issue test case\n+    (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3,\n+    \n+    # Test case with more factors of same multiplicity\n+    (x - 1)**2 * (x - 2)**2 * (x - 3)**2,\n+    \n+    # Test with leading coefficient\n+    6 * (x - 1)**2 * (x - 2)**2,\n+]\n+\n+print(\"Testing sqf_list_include function:\\n\")\n+for expr in test_cases:\n+    result = sqf_list_include(expr)\n+    print(f\"Input: {expr}\")\n+    print(f\"Result: {result}\")\n+    print()\ndiff --git a/test_sqf_issue.py b/test_sqf_issue.py\nnew file mode 100644\nindex 0000000000..73dc09feaa\n--- /dev/null\n+++ b/test_sqf_issue.py\n@@ -0,0 +1,20 @@\n+from sympy import symbols, sqf_list, expand\n+\n+x = symbols('x')\n+\n+# Test case 1: The problematic case from the issue\n+f1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+print(\"Test 1: f =\", f1)\n+print(\"sqf_list(f) =\", sqf_list(f1))\n+print(\"Expected: (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\")\n+print()\n+\n+# Test case 2: The correct case from the issue  \n+f2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+print(\"Test 2: f =\", f2)\n+print(\"sqf_list(f) =\", sqf_list(f2))\n+print(\"Expected: (1, [(x - 2, 1), (x**2 - 1, 2)])\")\n+print()\n+\n+# Let's also expand (x - 2) * (x - 3) to see what it should be\n+print(\"(x - 2) * (x - 3) =\", expand((x - 2) * (x - 3)))\n", "gold_standard_diff": "From 4830b0ca454db91993134f63e955f9055d63c9c6 Mon Sep 17 00:00:00 2001\nFrom: Smit Lunagariya <smitlunagariya.mat18@itbhu.ac.in>\nDate: Fri, 21 Feb 2020 11:12:04 +0530\nSubject: [PATCH 1/4] issue 8695\n\n---\n sympy/polys/polytools.py            | 11 ++++++-----\n sympy/polys/tests/test_polytools.py |  7 ++++++-\n 2 files changed, 12 insertions(+), 6 deletions(-)\n\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f67..acb51d82c5a9 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -2,7 +2,8 @@\n \n from __future__ import print_function, division\n \n-from functools import wraps\n+from functools import wraps, reduce\n+from operator import mul\n \n from sympy.core import (\n     S, Basic, Expr, I, Integer, Add, Mul, Dummy, Tuple\n@@ -5905,10 +5906,7 @@ def _symbolic_factor_list(expr, opt, method):\n         if arg.is_Number:\n             coeff *= arg\n             continue\n-        if arg.is_Mul:\n-            args.extend(arg.args)\n-            continue\n-        if arg.is_Pow:\n+        elif arg.is_Pow:\n             base, exp = arg.args\n             if base.is_Number and exp.is_Number:\n                 coeff *= arg\n@@ -5949,6 +5947,9 @@ def _symbolic_factor_list(expr, opt, method):\n                         other.append((f, k))\n \n                 factors.append((_factors_product(other), exp))\n+    if method == 'sqf':\n+        factors = [(reduce(mul, (f for f, _ in factors if _ == k)), k)\n+                   for k in set(dict(factors).values())]\n \n     return coeff, factors\n \ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 82e5f4d6ddb7..50615368e9fd 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3273,7 +3273,7 @@ def test_to_rational_coeffs():\n def test_factor_terms():\n     # issue 7067\n     assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n-    assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n+    assert sqf_list(x*(x + y)) == (1, [(x**2 + x*y, 1)])\n \n \n def test_as_list():\n@@ -3333,3 +3333,8 @@ def test_issue_17988():\n def test_issue_18205():\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = r = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n\nFrom 583222d28b4b6b09cceefeae564da5598c92bb1a Mon Sep 17 00:00:00 2001\nFrom: Smit Lunagariya <smitlunagariya.mat18@itbhu.ac.in>\nDate: Fri, 21 Feb 2020 11:35:39 +0530\nSubject: [PATCH 2/4] typo\n\n---\n sympy/polys/tests/test_polytools.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 50615368e9fd..b0b4cd61322a 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3336,5 +3336,5 @@ def test_issue_18205():\n \n def test_issue_8695():\n     p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n-    result = r = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n     assert sqf_list(p) == result\n\nFrom 70b501ba7dcfd5b2ae39b4957cb6023d67446fb3 Mon Sep 17 00:00:00 2001\nFrom: Smit Lunagariya <smitlunagariya.mat18@itbhu.ac.in>\nDate: Fri, 21 Feb 2020 12:12:02 +0530\nSubject: [PATCH 3/4] corrected docs\n\n---\n doc/src/modules/polys/basics.rst | 8 +++++---\n 1 file changed, 5 insertions(+), 3 deletions(-)\n\ndiff --git a/doc/src/modules/polys/basics.rst b/doc/src/modules/polys/basics.rst\nindex 5b5a4e1635e8..6df5105390d8 100644\n--- a/doc/src/modules/polys/basics.rst\n+++ b/doc/src/modules/polys/basics.rst\n@@ -536,11 +536,13 @@ factors (not necessarily irreducible) of degree 1, 2 etc.::\n     >>> f = 2*x**2 + 5*x**3 + 4*x**4 + x**5\n \n     >>> sqf_list(f)\n-    (1, [(x + 2, 1), (x, 2), (x + 1, 2)])\n+                       2\n+    (1, [(x + 2, 1), (x  + x, 2)])\n \n     >>> sqf(f)\n-     2        2\n-    x *(x + 1) *(x + 2)\n+                    2\n+            / 2    \\\n+    (x + 2)*\\x  + x/\n \n Factorization\n -------------\n\nFrom 7dc6fd979304b76428243082672266ed096688d2 Mon Sep 17 00:00:00 2001\nFrom: Smit Lunagariya <smitlunagariya.mat18@itbhu.ac.in>\nDate: Fri, 21 Feb 2020 18:16:26 +0530\nSubject: [PATCH 4/4] removed dict\n\n---\n sympy/polys/polytools.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex acb51d82c5a9..68b69d1a241f 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -5949,7 +5949,7 @@ def _symbolic_factor_list(expr, opt, method):\n                 factors.append((_factors_product(other), exp))\n     if method == 'sqf':\n         factors = [(reduce(mul, (f for f, _ in factors if _ == k)), k)\n-                   for k in set(dict(factors).values())]\n+                   for k in set(i for _, i in factors)]\n \n     return coeff, factors\n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/18698"}