{"instance_id": "sphinx-doc__sphinx-7889", "score": "C", "diff": "diff --git a/setup.py b/setup.py\nindex 3d499983f..e07b2fd4f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 98a3a3a96..80c3a0b6a 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -70,10 +70,12 @@ class _MockObject:\n \n def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                    attributes: Any = None) -> Any:\n-    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n+    # Convert name to string to handle TypeVar and other non-string types\n+    name_str = str(name)\n+    attrs = {'__module__': module, '__display_name__': module + '.' + name_str}\n     attrs.update(attributes or {})\n \n-    return type(name, (superclass,), attrs)\n+    return type(name_str, (superclass,), attrs)\n \n \n class _MockModule(ModuleType):\ndiff --git a/test_before_fix.py b/test_before_fix.py\nnew file mode 100644\nindex 000000000..9dbdfcb73\n--- /dev/null\n+++ b/test_before_fix.py\n@@ -0,0 +1,31 @@\n+#!/usr/bin/env python3\n+\"\"\"Test that would fail before our fix but passes now\"\"\"\n+\n+from typing import TypeVar\n+\n+# Temporarily revert the fix to show the error would occur\n+def _make_subclass_broken(name, module, superclass=None, attributes=None):\n+    \"\"\"Original broken version\"\"\"\n+    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n+    attrs.update(attributes or {})\n+    return type(name, (superclass,), attrs)\n+\n+# Test the broken version\n+T = TypeVar('T')\n+try:\n+    result = _make_subclass_broken(T, \"mymodule\")\n+    print(\"ERROR: Should have failed but didn't!\")\n+except TypeError as e:\n+    print(f\"\u2713 Broken version correctly fails with: {e}\")\n+\n+# Now test with our fixed version\n+from sphinx.ext.autodoc.mock import _make_subclass\n+\n+try:\n+    result = _make_subclass(T, \"mymodule\")\n+    print(f\"\u2713 Fixed version works! Result: {result}\")\n+    print(f\"  Name: {result.__name__}\")\n+    print(f\"  Module: {result.__module__}\")\n+    print(f\"  Display name: {result.__display_name__}\")\n+except Exception as e:\n+    print(f\"ERROR: Fixed version failed with: {e}\")\ndiff --git a/test_comprehensive_generics.py b/test_comprehensive_generics.py\nnew file mode 100644\nindex 000000000..eb5dffc0a\n--- /dev/null\n+++ b/test_comprehensive_generics.py\n@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+\"\"\"Comprehensive test for generic types with autodoc mock\"\"\"\n+\n+from typing import TypeVar, Generic, List, Dict, Tuple, Union, Optional\n+from sphinx.ext.autodoc.mock import _MockObject, _MockModule, mock\n+\n+# Test TypeVars\n+T = TypeVar('T')\n+K = TypeVar('K')\n+V = TypeVar('V')\n+\n+# Test with _MockObject\n+print(\"Testing _MockObject with generics:\")\n+mock_obj = _MockObject()\n+mock_obj.__display_name__ = \"mymodule.MyClass\"\n+\n+# Test single TypeVar\n+result1 = mock_obj[T]\n+print(f\"mock_obj[T]: {result1}\")\n+\n+# Test multiple TypeVars (simulating Dict[K, V])\n+result2 = mock_obj[K]\n+result3 = result2[V]\n+print(f\"mock_obj[K][V]: {result3}\")\n+\n+# Test with _MockModule\n+print(\"\\nTesting _MockModule with generics:\")\n+mock_module = _MockModule(\"mymodule\")\n+\n+# Get a class from module\n+MyClass = mock_module.MyClass\n+print(f\"MyClass: {MyClass}\")\n+\n+# Use generics with the class\n+GenericClass = MyClass[T]\n+print(f\"MyClass[T]: {GenericClass}\")\n+\n+# Test nested generics\n+NestedGeneric = MyClass[List[T]]\n+print(f\"MyClass[List[T]]: {NestedGeneric}\")\n+\n+# Test with actual mock context\n+print(\"\\nTesting with mock context:\")\n+with mock(['external_module']):\n+    import external_module\n+    \n+    # Get a generic class\n+    GenericExternal = external_module.SomeGeneric\n+    print(f\"external_module.SomeGeneric: {GenericExternal}\")\n+    \n+    # Apply type parameter\n+    SpecializedExternal = GenericExternal[int]\n+    print(f\"external_module.SomeGeneric[int]: {SpecializedExternal}\")\n+    \n+    # Test with TypeVar\n+    SpecializedExternalT = GenericExternal[T]\n+    print(f\"external_module.SomeGeneric[T]: {SpecializedExternalT}\")\n+\n+print(\"\\nAll tests passed!\")\ndiff --git a/test_generic_detailed.py b/test_generic_detailed.py\nnew file mode 100644\nindex 000000000..0d003d64c\n--- /dev/null\n+++ b/test_generic_detailed.py\n@@ -0,0 +1,27 @@\n+#!/usr/bin/env python3\n+\"\"\"Test case to understand how generics interact with mock\"\"\"\n+\n+from typing import TypeVar, Generic\n+from sphinx.ext.autodoc.mock import _MockObject\n+\n+# Create a mock object\n+mock_obj = _MockObject()\n+mock_obj.__display_name__ = \"mymodule.MyClass\"\n+\n+# Create a TypeVar\n+T = TypeVar('T')\n+\n+print(f\"TypeVar T: {T}\")\n+print(f\"Type of T: {type(T)}\")\n+print(f\"str(T): {str(T)}\")\n+print(f\"repr(T): {repr(T)}\")\n+\n+# When autodoc processes Generic[T], it's essentially doing:\n+# mock_obj[T]\n+# which calls __getitem__ with T as the key\n+\n+try:\n+    result = mock_obj[T]\n+    print(f\"Result of mock_obj[T]: {result}\")\n+except TypeError as e:\n+    print(f\"Error when calling mock_obj[T]: {e}\")\ndiff --git a/test_generic_mock.py b/test_generic_mock.py\nnew file mode 100644\nindex 000000000..e5540f162\n--- /dev/null\n+++ b/test_generic_mock.py\n@@ -0,0 +1,18 @@\n+#!/usr/bin/env python3\n+\"\"\"Test case to reproduce the generic type issue with autodoc mock\"\"\"\n+\n+from typing import TypeVar, Generic\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass\n+\n+# Create a TypeVar\n+T = TypeVar('T')\n+\n+# Try to use _make_subclass with a TypeVar\n+try:\n+    # This should fail with TypeError: can only concatenate str (not \"TypeVar\") to str\n+    result = _make_subclass(T, \"mymodule\")\n+    print(f\"Result: {result}\")\n+except TypeError as e:\n+    print(f\"TypeError caught: {e}\")\n+    print(f\"Type of first argument: {type(T)}\")\n+    print(f\"Value of first argument: {T}\")\ndiff --git a/test_generic_typevar_fix.py b/test_generic_typevar_fix.py\nnew file mode 100644\nindex 000000000..ebea758e5\n--- /dev/null\n+++ b/test_generic_typevar_fix.py\n@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+\"\"\"Test to verify the fix for TypeVar handling in autodoc mock\"\"\"\n+\n+import pytest\n+from typing import TypeVar\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass\n+\n+\n+def test_mock_handles_typevar():\n+    \"\"\"Test that _MockObject can handle TypeVar as a key in __getitem__\"\"\"\n+    T = TypeVar('T')\n+    mock_obj = _MockObject()\n+    mock_obj.__display_name__ = \"mymodule.MyClass\"\n+    \n+    # This should not raise TypeError\n+    result = mock_obj[T]\n+    assert str(result) == \"mymodule.MyClass.~T\"\n+\n+\n+def test_make_subclass_handles_typevar():\n+    \"\"\"Test that _make_subclass can handle TypeVar as name parameter\"\"\"\n+    T = TypeVar('T')\n+    \n+    # This should not raise TypeError\n+    result = _make_subclass(T, \"mymodule\")\n+    assert result.__name__ == \"~T\"\n+    assert result.__module__ == \"mymodule\"\n+    assert result.__display_name__ == \"mymodule.~T\"\n+\n+\n+def test_make_subclass_preserves_string_behavior():\n+    \"\"\"Test that _make_subclass still works correctly with string names\"\"\"\n+    result = _make_subclass(\"MyClass\", \"mymodule\")\n+    assert result.__name__ == \"MyClass\"\n+    assert result.__module__ == \"mymodule\"\n+    assert result.__display_name__ == \"mymodule.MyClass\"\n+\n+\n+if __name__ == \"__main__\":\n+    test_mock_handles_typevar()\n+    print(\"\u2713 test_mock_handles_typevar passed\")\n+    \n+    test_make_subclass_handles_typevar()\n+    print(\"\u2713 test_make_subclass_handles_typevar passed\")\n+    \n+    test_make_subclass_preserves_string_behavior()\n+    print(\"\u2713 test_make_subclass_preserves_string_behavior passed\")\n+    \n+    print(\"\\nAll tests passed!\")\ndiff --git a/test_screenpy_case.py b/test_screenpy_case.py\nnew file mode 100644\nindex 000000000..efd2f49be\n--- /dev/null\n+++ b/test_screenpy_case.py\n@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+\"\"\"Test case simulating the screenpy generic-typed class issue\"\"\"\n+\n+from typing import TypeVar, Generic\n+from sphinx.ext.autodoc.mock import mock\n+\n+# Create a TypeVar like screenpy does\n+T = TypeVar('T')\n+\n+# Simulate what happens during autodoc processing of a generic class\n+print(\"Simulating autodoc processing of a generic class...\")\n+\n+# When sphinx autodoc processes a class like:\n+# class Actor(Generic[T]):\n+#     pass\n+# \n+# It needs to mock the Generic[T] part\n+\n+with mock(['some_external_module']):\n+    import some_external_module\n+    \n+    # Simulate getting a base class that's generic\n+    BaseClass = some_external_module.BaseClass\n+    print(f\"BaseClass: {BaseClass}\")\n+    \n+    # Apply generic typing\n+    GenericBase = BaseClass[T]\n+    print(f\"BaseClass[T]: {GenericBase}\")\n+    \n+    # Try to create a subclass (this is what autodoc does)\n+    try:\n+        # This simulates what happens when autodoc tries to process:\n+        # class MyClass(BaseClass[T]):\n+        #     pass\n+        attrs = {'__module__': 'test_module'}\n+        MyClass = type('MyClass', (GenericBase,), attrs)\n+        print(f\"Successfully created MyClass: {MyClass}\")\n+        print(f\"MyClass base classes: {MyClass.__bases__}\")\n+    except Exception as e:\n+        print(f\"Error creating class: {e}\")\n+\n+print(\"\\nTest completed successfully!\")\ndiff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 4760493cf..97a85c0df 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -117,3 +117,24 @@ def test_mock_decorator():\n     assert func.__doc__ == \"docstring\"\n     assert Foo.meth.__doc__ == \"docstring\"\n     assert Bar.__doc__ == \"docstring\"\n+\n+\n+\n+def test_MockObject_with_TypeVar():\n+    \"\"\"Test that _MockObject can handle TypeVar in __getitem__ (issue #7964).\"\"\"\n+    from typing import TypeVar\n+    from sphinx.ext.autodoc.mock import _make_subclass\n+    \n+    T = TypeVar('T')\n+    mock = _MockObject()\n+    mock.__display_name__ = \"mymodule.MyClass\"\n+    \n+    # This should not raise TypeError: can only concatenate str (not \"TypeVar\") to str\n+    result = mock[T]\n+    assert str(result) == \"mymodule.MyClass.~T\"\n+    \n+    # Test _make_subclass directly with TypeVar\n+    result = _make_subclass(T, \"mymodule\")\n+    assert result.__name__ == \"~T\"\n+    assert result.__module__ == \"mymodule\"\n+    assert result.__display_name__ == \"mymodule.~T\"\ndiff --git a/tox.ini b/tox.ini\nindex d9f040544..bf39854b6 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From d6ca2f97beeb4864b93872f46c8f1a1e10364263 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Tue, 30 Jun 2020 01:16:38 +0900\nSubject: [PATCH] Fix #7886: autodoc: TypeError is raised on mocking\n generic-typed classes\n\n---\n CHANGES                        |  1 +\n sphinx/ext/autodoc/mock.py     |  4 ++--\n tests/test_ext_autodoc_mock.py | 12 ++++++++++++\n 3 files changed, 15 insertions(+), 2 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex e6888146c73..32ce16917bb 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -19,6 +19,7 @@ Features added\n Bugs fixed\n ----------\n \n+* #7886: autodoc: TypeError is raised on mocking generic-typed classes\n * #7839: autosummary: cannot handle umlauts in function names\n * #7865: autosummary: Failed to extract summary line when abbreviations found\n * #7866: autosummary: Failed to extract correct summary line when docstring\ndiff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 98a3a3a96e5..40258a13577 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -52,8 +52,8 @@ def __iter__(self) -> Iterator:\n     def __mro_entries__(self, bases: Tuple) -> Tuple:\n         return (self.__class__,)\n \n-    def __getitem__(self, key: str) -> \"_MockObject\":\n-        return _make_subclass(key, self.__display_name__, self.__class__)()\n+    def __getitem__(self, key: Any) -> \"_MockObject\":\n+        return _make_subclass(str(key), self.__display_name__, self.__class__)()\n \n     def __getattr__(self, key: str) -> \"_MockObject\":\n         return _make_subclass(key, self.__display_name__, self.__class__)()\ndiff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 4760493cf10..a29170f752d 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -11,6 +11,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar\n \n import pytest\n \n@@ -39,6 +40,7 @@ def test_MockObject():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+    # subclassing\n     class SubClass(mock.SomeClass):\n         \"\"\"docstring of SubClass\"\"\"\n \n@@ -51,6 +53,16 @@ def method(self):\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n \n+    # parametrized type\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj2, SubClass2)\n+\n \n def test_mock():\n     modname = 'sphinx.unknown'\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7889"}