diff --git a/test_case.py b/test_case.py
new file mode 100644
index 0000000000..048bd98909
--- /dev/null
+++ b/test_case.py
@@ -0,0 +1,83 @@
+"""Test script to reproduce the issue"""
+import os
+import django
+from django.conf import settings
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+# Create test settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'DJ_RegLogin',
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        USE_TZ=True,
+        SECRET_KEY='test-secret-key',
+    )
+
+django.setup()
+
+# Create the app directory and files
+import os
+os.makedirs('DJ_RegLogin', exist_ok=True)
+
+# Create __init__.py
+with open('DJ_RegLogin/__init__.py', 'w') as f:
+    f.write('')
+
+# Create apps.py
+with open('DJ_RegLogin/apps.py', 'w') as f:
+    f.write('''from django.apps import AppConfig
+
+class DJ_RegLoginConfig(AppConfig):
+    name = 'DJ_RegLogin'
+    verbose_name = "Contents"
+''')
+
+# Create models.py
+with open('DJ_RegLogin/models.py', 'w') as f:
+    f.write('''from django.db import models
+from django.contrib.auth.models import User
+
+class Category(models.Model):
+    title = models.CharField(max_length=100, db_index=True)
+    slug = models.SlugField(max_length=100, db_index=True)
+    
+    class Meta:
+        verbose_name = 'Category'
+        verbose_name_plural = 'Categories'
+    
+    def __str__(self):
+        return self.title
+
+class Content(models.Model):
+    title = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(max_length=100, unique=True)
+    body = models.TextField()
+    posted = models.DateTimeField(db_index=True, auto_now_add=True)
+    ip = models.GenericIPAddressField(editable=False)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)
+    status = models.CharField(max_length=10, default='draft')
+    
+    def __str__(self):
+        return self.title
+''')
+
+# Try to make migrations
+from django.core.management import call_command
+try:
+    call_command('makemigrations', 'DJ_RegLogin')
+except Exception as e:
+    print(f"Error during makemigrations: {e}")
+    import traceback
+    traceback.print_exc()
diff --git a/test_project/DJ_RegLogin/__init__.py b/test_project/DJ_RegLogin/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/test_project/DJ_RegLogin/__init__.py
@@ -0,0 +1 @@
+
diff --git a/test_project/DJ_RegLogin/apps.py b/test_project/DJ_RegLogin/apps.py
new file mode 100644
index 0000000000..b41a0e5814
--- /dev/null
+++ b/test_project/DJ_RegLogin/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class DJ_RegLoginConfig(AppConfig):
+    name = 'DJ_RegLogin'
+    verbose_name = "Contents"
diff --git a/test_project/DJ_RegLogin/models.py b/test_project/DJ_RegLogin/models.py
new file mode 100644
index 0000000000..a738ce5219
--- /dev/null
+++ b/test_project/DJ_RegLogin/models.py
@@ -0,0 +1,26 @@
+from django.db import models
+from django.contrib.auth.models import User
+
+class Category(models.Model):
+    title = models.CharField(max_length=100, db_index=True)
+    slug = models.SlugField(max_length=100, db_index=True)
+    
+    class Meta:
+        verbose_name = 'Category'
+        verbose_name_plural = 'Categories'
+    
+    def __str__(self):
+        return self.title
+
+class Content(models.Model):
+    title = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(max_length=100, unique=True)
+    body = models.TextField()
+    posted = models.DateTimeField(db_index=True, auto_now_add=True)
+    ip = models.GenericIPAddressField(editable=False)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)
+    status = models.CharField(max_length=10, default='draft')
+    
+    def __str__(self):
+        return self.title
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100644
index 0000000000..d67a5361e9
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+if __name__ == '__main__':
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..01d6935d5f
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,57 @@
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+SECRET_KEY = 'test-secret-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'DJ_RegLogin',
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+USE_TZ = True
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..637600f58a
--- /dev/null
+++ b/test_project/urls.py
@@ -0,0 +1 @@
+urlpatterns = []
