From b894199eb08d9162e70f7115f91e1e9d2030fc9f Mon Sep 17 00:00:00 2001
From: Keryn Knight <keryn@kerynknight.com>
Date: Tue, 4 Jan 2022 05:30:16 +0100
Subject: [PATCH 1/2] Refs #33406 -- Added test for not creating broken
 validators when resolving Value.output_field.

---
 tests/expressions/tests.py | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index 13c7e2b2127b..b622c3a9aab7 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -1852,6 +1852,29 @@ def test_resolve_output_field_failure(self):
         with self.assertRaisesMessage(FieldError, msg):
             Value(object()).output_field
 
+    def test_output_field_does_not_create_broken_validators(self):
+        """
+        The output field for a given Value doesn't get cleaned & validated,
+        however validators may still be instantiated for a given field type
+        and this demonstrates that they don't throw an exception.
+        """
+        value_types = [
+            True,
+            42,
+            3.14,
+            datetime.date(2019, 5, 15),
+            datetime.datetime(2019, 5, 15),
+            datetime.time(3, 16),
+            datetime.timedelta(1),
+            Decimal('3.14'),
+            b'',
+            uuid.uuid4(),
+        ]
+        for value in value_types:
+            with self.subTest(type=type(value)):
+                field = Value(value)._resolve_output_field()
+                field.clean(value, model_instance=None)
+
 
 class ExistsTests(TestCase):
     def test_optimizations(self):

From 0ed2919814c80e31626dffdb6b80d0c20d43452f Mon Sep 17 00:00:00 2001
From: Keryn Knight <keryn@kerynknight.com>
Date: Mon, 3 Jan 2022 11:29:24 +0000
Subject: [PATCH 2/2] Fixed #33406 -- Avoided creation of
 MaxLengthValidator(None) when resolving Value.output_field for strings.

This brings the behaviour in line with Field subclasses which append to
the validators within __init__(), like BinaryField, and prevents the
creation of a validator which incorrectly throws a TypeError, if it
were used.
---
 django/db/models/fields/__init__.py | 3 ++-
 tests/expressions/tests.py          | 1 +
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b52334627..88c9ca9f2849 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,8 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index b622c3a9aab7..9fd31d550c9b 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -1859,6 +1859,7 @@ def test_output_field_does_not_create_broken_validators(self):
         and this demonstrates that they don't throw an exception.
         """
         value_types = [
+            'str',
             True,
             42,
             3.14,
