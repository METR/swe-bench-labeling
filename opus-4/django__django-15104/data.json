{"instance_id": "django__django-15104", "score": "C", "diff": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 97977d72ef..bf9c2acd26 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ class MigrationAutodetector:\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \ndiff --git a/test_autodetector_bug.py b/test_autodetector_bug.py\nnew file mode 100644\nindex 0000000000..2ba04c1586\n--- /dev/null\n+++ b/test_autodetector_bug.py\n@@ -0,0 +1,50 @@\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import TestCase\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class ReproTestCase(TestCase):\n+    def test_reprodution(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+\n+if __name__ == '__main__':\n+    import django\n+    from django.conf import settings\n+    \n+    if not settings.configured:\n+        settings.configure(\n+            DATABASES={\n+                'default': {\n+                    'ENGINE': 'django.db.backends.sqlite3',\n+                    'NAME': ':memory:',\n+                }\n+            },\n+            INSTALLED_APPS=[\n+                'django.contrib.contenttypes',\n+                'django.contrib.auth',\n+            ],\n+            SECRET_KEY='test-secret-key',\n+        )\n+    \n+    django.setup()\n+    \n+    # Run the test\n+    test = ReproTestCase()\n+    test.test_reprodution()\n+    print(\"Test passed!\")\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..2b62415418\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,86 @@\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import TestCase\n+\n+class CustomFKField(models.ForeignKey):\n+    \"\"\"A custom FK field that hardcodes its 'to' and removes it from deconstruct\"\"\"\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class ComprehensiveTestCase(TestCase):\n+    def test_custom_fk_without_to_key(self):\n+        \"\"\"Test that custom FK field without 'to' key in deconstruct works\"\"\"\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        print(\"\u2713 Custom FK field without 'to' key works\")\n+\n+    def test_normal_fk_with_to_key(self):\n+        \"\"\"Test that normal FK field with 'to' key still works\"\"\"\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'TargetModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'TargetModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [\n+            ('target', models.ForeignKey('testapp.TargetModel', on_delete=models.CASCADE))\n+        ]))\n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        print(\"\u2713 Normal FK field with 'to' key works\")\n+\n+    def test_model_rename_detection(self):\n+        \"\"\"Test that model rename detection still works properly\"\"\"\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'OldModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=100)),\n+        ]))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'NewModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=100)),\n+        ]))\n+        detector = MigrationAutodetector(before, after)\n+        changes = detector._detect_changes()\n+        # The autodetector should detect this as a rename\n+        self.assertIn('testapp', changes)\n+        print(\"\u2713 Model rename detection works\")\n+\n+if __name__ == '__main__':\n+    import django\n+    from django.conf import settings\n+    \n+    if not settings.configured:\n+        settings.configure(\n+            DATABASES={\n+                'default': {\n+                    'ENGINE': 'django.db.backends.sqlite3',\n+                    'NAME': ':memory:',\n+                }\n+            },\n+            INSTALLED_APPS=[\n+                'django.contrib.contenttypes',\n+                'django.contrib.auth',\n+            ],\n+            SECRET_KEY='test-secret-key',\n+        )\n+    \n+    django.setup()\n+    \n+    # Run the tests\n+    test = ComprehensiveTestCase()\n+    test.test_custom_fk_without_to_key()\n+    test.test_normal_fk_with_to_key()\n+    test.test_model_rename_detection()\n+    print(\"\\nAll tests passed!\")\ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 3b46601145..71bc98bc23 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2106,6 +2106,47 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"CreateModel\"])\n \n+    def test_custom_foreignkey_without_to_attribute(self):\n+        \"\"\"\n+        Custom ForeignKey fields without 'to' attribute in their deconstruct\n+        method should not cause KeyError in only_relation_agnostic_fields (#XXXXX).\n+        \"\"\"\n+        # Create a custom FK field class that removes 'to' from its deconstruct\n+        class CustomFKField(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Target'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                # Remove 'to' from kwargs, as might happen with hardcoded fields\n+                kwargs.pop('to', None)\n+                return name, path, args, kwargs\n+\n+        # Set up the test states\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'Target', [\n+            ('id', models.AutoField(primary_key=True)),\n+        ]))\n+        \n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'Target', [\n+            ('id', models.AutoField(primary_key=True)),\n+        ]))\n+        after.add_model(ModelState('testapp', 'Model', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('custom_fk', CustomFKField(on_delete=models.CASCADE)),\n+        ]))\n+        \n+        # This should not raise a KeyError\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        \n+        # Verify the migration was created correctly\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, [\"CreateModel\"])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Model')\n+\n     def test_replace_string_with_foreignkey(self):\n         \"\"\"\n         #22300 - Adding an FK in the same \"spot\" as a deleted CharField should\n", "gold_standard_diff": "From a0ed3cfad1ac4873ecfd2baebaa2e978e483ba99 Mon Sep 17 00:00:00 2001\nFrom: Baptiste Mispelon <bmispelon@gmail.com>\nDate: Fri, 19 Nov 2021 21:45:33 +0100\nSubject: [PATCH] Fixed #33305 -- Fixed autodetector crash for ForeignKey with\n hardcoded \"to\" attribute.\n\nCo-authored-by: Simon Charette <charette.s@gmail.com>\n---\n django/db/migrations/autodetector.py  |  2 +-\n tests/migrations/test_autodetector.py | 22 ++++++++++++++++++++++\n 2 files changed, 23 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 97977d72ef05..bf9c2acd2602 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ def only_relation_agnostic_fields(self, fields):\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 3b466011456f..18055f242b43 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,6 +2834,28 @@ def test_parse_number(self):\n                     expected_number,\n                 )\n \n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n \n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15104"}