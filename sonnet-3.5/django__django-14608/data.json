{"instance_id": "django__django-14608", "score": "I", "diff": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..35aed5c72b 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -295,6 +295,8 @@ class BaseFormSet:\n         \"\"\"\n         if self._non_form_errors is None:\n             self.full_clean()\n+        if not isinstance(self._non_form_errors, self.error_class):\n+            self._non_form_errors = self.error_class(self._non_form_errors, error_class='nonform')\n         return self._non_form_errors\n \n     @property\n@@ -333,7 +335,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\ndiff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt\nindex 1f2c7c3fad..083ca08ebf 100644\n--- a/docs/topics/forms/formsets.txt\n+++ b/docs/topics/forms/formsets.txt\n@@ -87,6 +87,20 @@ something like: ``ArticleFormSet(request.POST, initial=[...])``.\n .. seealso::\n \n     :ref:`Creating formsets from models with model formsets <model-formsets>`.\n+CSS classes for formset errors\n+==============================\n+\n+When rendering formset errors, Django adds CSS classes to help with styling. For non-form errors in formsets (errors that are not associated with a specific form), Django adds the ``nonform`` CSS class to the error list. This is similar to how Django adds the ``nonfield`` CSS class for non-field errors in individual forms.\n+\n+For example, if you have non-form errors in your formset, they might be rendered like this:\n+\n+.. code-block:: html\n+\n+    <ul class=\"errorlist nonform\">\n+        <li>Please correct the errors below.</li>\n+    </ul>\n+\n+You can use these CSS classes to style formset errors differently from form-specific errors in your templates.\n \n .. _formsets-max-num:\n \n", "gold_standard_diff": "From 84400d2e9db7c51fee4e9bb04c028f665b8e7624 Mon Sep 17 00:00:00 2001\nFrom: Ties Jan Hefting <hello@tiesjan.com>\nDate: Wed, 7 Jul 2021 22:50:30 +0200\nSubject: [PATCH] Fixed #32905 -- Added CSS class for non-form errors of\n formsets.\n\n---\n AUTHORS                                  |  1 +\n django/forms/formsets.py                 |  7 +++++--\n docs/releases/4.0.txt                    |  4 ++++\n docs/topics/forms/formsets.txt           | 14 ++++++++++++++\n tests/admin_views/tests.py               |  5 ++++-\n tests/forms_tests/tests/test_formsets.py | 14 ++++++++++++++\n 6 files changed, 42 insertions(+), 3 deletions(-)\n\ndiff --git a/AUTHORS b/AUTHORS\nindex 4e4dbc00fdc4..72a87ce7b730 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -906,6 +906,7 @@ answer newbie questions, and generally made Django that much better:\n     Thomas Stromberg <tstromberg@google.com>\n     Thomas Tanner <tanner@gmx.net>\n     tibimicu@gmx.net\n+    Ties Jan Hefting <hello@tiesjan.com>\n     Tim Allen <tim@pyphilly.org>\n     Tim Givois <tim.givois.mendez@gmail.com>\n     Tim Graham <timograham@gmail.com>\ndiff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f88..b8e0d62fd92c 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ def full_clean(self):\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,10 @@ def full_clean(self):\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(\n+                e.error_list,\n+                error_class='nonform'\n+            )\n \n     def clean(self):\n         \"\"\"\ndiff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt\nindex f0742db7bd85..ee3922c9b6b8 100644\n--- a/docs/releases/4.0.txt\n+++ b/docs/releases/4.0.txt\n@@ -218,6 +218,10 @@ Forms\n   error message. This allows custom error messages to use the ``%(value)s``\n   placeholder.\n \n+* :class:`~django.forms.formsets.BaseFormSet` now renders non-form errors with\n+  an additional class of ``nonform`` to help distinguish them from\n+  form-specific errors.\n+\n Generic Views\n ~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt\nindex 1f2c7c3fadc3..0281b6a4d6d4 100644\n--- a/docs/topics/forms/formsets.txt\n+++ b/docs/topics/forms/formsets.txt\n@@ -365,6 +365,20 @@ The formset ``clean`` method is called after all the ``Form.clean`` methods\n have been called. The errors will be found using the ``non_form_errors()``\n method on the formset.\n \n+Non-form errors will be rendered with an additional class of ``nonform`` to\n+help distinguish them from form-specific errors. For example,\n+``{{ formset.non_form_errors }}`` would look like:\n+\n+.. code-block:: html+django\n+\n+    <ul class=\"errorlist nonform\">\n+        <li>Articles in a set must have distinct titles.</li>\n+    </ul>\n+\n+.. versionchanged:: 4.0\n+\n+    The additional ``nonform`` class was added.\n+\n Validating the number of forms in a formset\n ===========================================\n \ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 880ba0b85f75..b277476296cf 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3348,7 +3348,10 @@ def test_non_form_errors_is_errorlist(self):\n         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n-        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n+        self.assertEqual(\n+            str(non_form_errors),\n+            str(ErrorList(['Grace is not a Zombie'], error_class='nonform')),\n+        )\n \n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\ndiff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 889560aa7427..5afb816f7fc9 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,10 @@ def test_formset_validate_max_flag(self):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +363,11 @@ def test_formset_validate_min_flag(self):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>'\n+            'Please submit at least 3 forms.</li></ul>',\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +992,11 @@ def test_non_form_errors(self):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>'\n+            'You may only specify a drink once.</li></ul>',\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14608"}