diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 8c3509c3b..cdff478ee 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -136,6 +136,19 @@ def merge_special_members_option(options: Dict) -> None:
             options['members'] = options['special-members']
 
 
+def merge_private_members_option(options: Dict) -> None:
+    """Merge :private-members: option to :members: option."""
+    if 'private-members' in options and options['private-members'] is not ALL:
+        if options.get('members') is ALL:
+            pass
+        elif options.get('members'):
+            for member in options['private-members']:
+                if member not in options['members']:
+                    options['members'].append(member)
+        else:
+            options['members'] = options['private-members']
+
+
 # Some useful event listener factories for autodoc-process-docstring.
 
 def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:
@@ -649,15 +662,27 @@ class Documenter:
             elif (namespace, membername) in attr_docs:
                 if want_all and isprivate:
                     # ignore members whose name starts with _ by default
-                    keep = self.options.private_members
+                    if self.options.private_members is ALL:
+                        keep = True
+                    elif self.options.private_members:
+                        keep = membername in self.options.private_members
+                    else:
+                        keep = False
                 else:
                     # keep documented attributes
                     keep = True
                 isattr = True
             elif want_all and isprivate:
                 # ignore members whose name starts with _ by default
-                keep = self.options.private_members and \
-                    (has_doc or self.options.undoc_members)
+                if self.options.private_members is ALL:
+                    keep = has_doc or self.options.undoc_members
+                elif self.options.private_members:
+                    if membername in self.options.private_members:
+                        keep = has_doc or self.options.undoc_members
+                    else:
+                        keep = False
+                else:
+                    keep = False
             else:
                 if self.options.members is ALL and is_filtered_inherited_member(membername):
                     keep = False
@@ -859,13 +884,14 @@ class ModuleDocumenter(Documenter):
         'show-inheritance': bool_option, 'synopsis': identity,
         'platform': identity, 'deprecated': bool_option,
         'member-order': member_order_option, 'exclude-members': members_set_option,
-        'private-members': bool_option, 'special-members': members_option,
+        'private-members': members_option, 'special-members': members_option,
         'imported-members': bool_option, 'ignore-module-all': bool_option
     }  # type: Dict[str, Callable]
 
     def __init__(self, *args: Any) -> None:
         super().__init__(*args)
         merge_special_members_option(self.options)
+        merge_private_members_option(self.options)
         self.__all__ = None
 
     @classmethod
@@ -1279,7 +1305,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
         'noindex': bool_option, 'inherited-members': inherited_members_option,
         'show-inheritance': bool_option, 'member-order': member_order_option,
         'exclude-members': members_set_option,
-        'private-members': bool_option, 'special-members': members_option,
+        'private-members': members_option, 'special-members': members_option,
     }  # type: Dict[str, Callable]
 
     _signature_class = None  # type: Any
@@ -1288,6 +1314,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:
     def __init__(self, *args: Any) -> None:
         super().__init__(*args)
         merge_special_members_option(self.options)
+        merge_private_members_option(self.options)
 
     @classmethod
     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
diff --git a/test_comprehensive_private_members.py b/test_comprehensive_private_members.py
new file mode 100644
index 000000000..a7e03f74f
--- /dev/null
+++ b/test_comprehensive_private_members.py
@@ -0,0 +1,114 @@
+"""Comprehensive test for private members feature"""
+import sys
+from pathlib import Path
+sys.path.insert(0, str(Path(__file__).parent / 'tests'))
+
+import pytest
+from test_ext_autodoc import do_autodoc
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_autoclass_private_members_specific(app):
+    """Test documenting specific private members in a class"""
+    # Setup test module
+    test_py = Path(app.srcdir) / 'target' / 'private_test.py'
+    test_py.parent.mkdir(exist_ok=True)
+    test_py.write_text('''
+class TestClass:
+    """Test class with private members"""
+    
+    public_attr = "public"
+    _private_attr1 = "private1"
+    _private_attr2 = "private2"
+    _private_attr3 = "private3"
+    
+    def public_method(self):
+        """Public method"""
+        pass
+        
+    def _private_method1(self):
+        """Private method 1"""
+        pass
+        
+    def _private_method2(self):
+        """Private method 2"""
+        pass
+        
+    def _private_method3(self):
+        """Private method 3"""
+        pass
+''')
+
+    # Test specifying only certain private members
+    options = {"members": None, "private-members": "_private_attr1,_private_method2"}
+    actual = do_autodoc(app, 'class', 'target.private_test.TestClass', options)
+    
+    # Check that only specified private members are included
+    output = '\n'.join(actual)
+    assert 'public_attr' in output
+    assert 'public_method' in output
+    assert '_private_attr1' in output
+    assert '_private_method2' in output
+    
+    # These should NOT be in the output
+    assert '_private_attr2' not in output
+    assert '_private_attr3' not in output
+    assert '_private_method1' not in output
+    assert '_private_method3' not in output
+    
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_automodule_private_members_specific(app):
+    """Test documenting specific private members in a module"""
+    # Setup test module
+    test_py = Path(app.srcdir) / 'target' / 'private_mod_test.py'
+    test_py.parent.mkdir(exist_ok=True)
+    test_py.write_text('''
+"""Test module with private members"""
+
+public_var = "public"
+_private_var1 = "private1"
+_private_var2 = "private2"
+
+def public_func():
+    """Public function"""
+    pass
+    
+def _private_func1():
+    """Private function 1"""
+    pass
+    
+def _private_func2():
+    """Private function 2"""
+    pass
+''')
+
+    # Test specifying only certain private members
+    options = {"members": None, "private-members": "_private_var1,_private_func2"}
+    actual = do_autodoc(app, 'module', 'target.private_mod_test', options)
+    
+    # Check that only specified private members are included
+    output = '\n'.join(actual)
+    assert 'public_var' in output
+    assert 'public_func' in output
+    assert '_private_var1' in output
+    assert '_private_func2' in output
+    
+    # These should NOT be in the output
+    assert '_private_var2' not in output
+    assert '_private_func1' not in output
+
+
+if __name__ == "__main__":
+    # Simple standalone test
+    from sphinx.ext.autodoc import Documenter, ClassDocumenter, ModuleDocumenter
+    
+    # Test that option specs were updated correctly
+    print("ModuleDocumenter private-members option:", ModuleDocumenter.option_spec['private-members'].__name__)
+    print("ClassDocumenter private-members option:", ClassDocumenter.option_spec['private-members'].__name__)
+    
+    # Both should use members_option now
+    from sphinx.ext.autodoc import members_option
+    assert ModuleDocumenter.option_spec['private-members'] is members_option
+    assert ClassDocumenter.option_spec['private-members'] is members_option
+    
+    print("Option spec tests passed!")
diff --git a/test_private_members.py b/test_private_members.py
new file mode 100644
index 000000000..0ce3a87b9
--- /dev/null
+++ b/test_private_members.py
@@ -0,0 +1,25 @@
+"""Test module for private members feature"""
+
+class TestClass:
+    """Test class with various members"""
+    
+    public_attr = "public"
+    _private_attr1 = "private1"
+    _private_attr2 = "private2"
+    __special_attr = "special"
+    
+    def public_method(self):
+        """A public method"""
+        pass
+        
+    def _private_method1(self):
+        """First private method"""
+        pass
+        
+    def _private_method2(self):
+        """Second private method"""
+        pass
+        
+    def __special_method(self):
+        """A special method"""
+        pass
diff --git a/test_private_members_specific.py b/test_private_members_specific.py
new file mode 100644
index 000000000..9fe40eb3d
--- /dev/null
+++ b/test_private_members_specific.py
@@ -0,0 +1,27 @@
+"""Test specific private members feature"""
+from pathlib import Path
+
+def test_specific_private_members():
+    """Test the ability to document specific private members"""
+    
+    # Run as a simple unit test instead of using full sphinx test framework
+    # This simulates the behavior we expect
+    from sphinx.ext.autodoc import members_option, ALL
+    
+    # Test that members_option parses the private-members correctly
+    result = members_option("_private_attr1, _private_method2")
+    assert result == ["_private_attr1", "_private_method2"]
+    
+    # Test that empty private-members returns ALL
+    result = members_option(None)
+    assert result is ALL
+    
+    # Test that True returns ALL
+    result = members_option(True)
+    assert result is ALL
+    
+    print("Basic option parsing tests passed!")
+    
+
+if __name__ == "__main__":
+    test_specific_private_members()
diff --git a/test_specific_private_members.py b/test_specific_private_members.py
new file mode 100644
index 000000000..dd4597881
--- /dev/null
+++ b/test_specific_private_members.py
@@ -0,0 +1,81 @@
+"""Test autodoc with specific private members"""
+import sys
+from pathlib import Path
+sys.path.insert(0, str(Path(__file__).parent / 'tests'))
+
+import pytest
+from test_ext_autodoc import do_autodoc
+
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')
+def test_private_members_specific_list(app):
+    """Test specifying a list of private members to document"""
+    # Test with class
+    options = {"members": None, "private-members": "_private_method"}
+    actual = do_autodoc(app, 'class', 'target.private.Foo', options)
+    output = '\n'.join(actual)
+    
+    # _private_method should be documented
+    assert '_private_method' in output
+    # but other private members should not
+    assert '_private_var' not in output
+    
+
+@pytest.mark.sphinx('html', testroot='ext-autodoc')  
+def test_private_members_all(app):
+    """Test that private-members without arguments still documents all"""
+    # Test backwards compatibility - no args means document all
+    options = {"members": None, "private-members": None}
+    actual = do_autodoc(app, 'module', 'target.private', options)
+    output = '\n'.join(actual)
+    
+    # Both functions should be present
+    assert 'private_function' in output
+    assert '_public_function' in output
+
+
+if __name__ == "__main__":
+    # First create a test file in the expected location
+    import os
+    os.makedirs('tests/roots/test-ext-autodoc/target', exist_ok=True)
+    
+    with open('tests/roots/test-ext-autodoc/target/private.py', 'w') as f:
+        f.write('''
+"""Test module for private members"""
+
+_private_var = "I am private"
+
+def private_function(name):
+    """private_function is a docstring().
+
+    :meta private:
+    """
+
+def _public_function(name):
+    """public_function is a docstring().
+
+    :meta public:
+    """
+    
+class Foo:
+    """Foo class"""
+    
+    _private_var = "private class var"
+    
+    def _private_method(self):
+        """A private method"""
+        pass
+        
+    def public_method(self):
+        """A public method"""
+        pass
+''')
+    
+    # Run pytest on this file
+    import subprocess
+    result = subprocess.run([sys.executable, '-m', 'pytest', __file__, '-xvs'], 
+                          capture_output=True, text=True)
+    print(result.stdout)
+    if result.stderr:
+        print("STDERR:", result.stderr)
+    print("Return code:", result.returncode)
diff --git a/tox.ini b/tox.ini
index bddd822a6..34baee205 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
