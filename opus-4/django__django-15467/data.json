{"instance_id": "django__django-15467", "score": "C", "diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087bf1..8990e95717 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                kwargs[\"empty_label\"] = (kwargs.get('empty_label') or _(\"None\")) if db_field.blank else None\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\ndiff --git a/test_comprehensive_radio_fields.py b/test_comprehensive_radio_fields.py\nnew file mode 100644\nindex 0000000000..e23ee906fc\n--- /dev/null\n+++ b/test_comprehensive_radio_fields.py\n@@ -0,0 +1,105 @@\n+#!/usr/bin/env python\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+from django.contrib import admin\n+from django.test import TestCase, RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+from django.utils.translation import gettext_lazy as _\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.messages',\n+            'django.contrib.sessions',\n+        ],\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+    django.setup()\n+\n+# Define test models\n+class RelatedModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class TestModel(models.Model):\n+    blank_field = models.ForeignKey(RelatedModel, on_delete=models.CASCADE, blank=True, null=True, related_name='blank_rel')\n+    required_field = models.ForeignKey(RelatedModel, on_delete=models.CASCADE, related_name='required_rel')\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Test 1: Custom empty label with blank field\n+class CustomEmptyLabelAdmin(admin.ModelAdmin):\n+    radio_fields = {'blank_field': admin.HORIZONTAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'blank_field':\n+            kwargs['empty_label'] = \"CUSTOM EMPTY LABEL\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+# Test 2: Default behavior with blank field (no custom empty_label)\n+class DefaultBlankAdmin(admin.ModelAdmin):\n+    radio_fields = {'blank_field': admin.HORIZONTAL}\n+\n+# Test 3: Required field (should have None as empty_label)\n+class RequiredFieldAdmin(admin.ModelAdmin):\n+    radio_fields = {'required_field': admin.HORIZONTAL}\n+\n+# Test 4: Custom empty label on required field (should be ignored)\n+class CustomEmptyLabelRequiredAdmin(admin.ModelAdmin):\n+    radio_fields = {'required_field': admin.HORIZONTAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'required_field':\n+            kwargs['empty_label'] = \"THIS SHOULD BE IGNORED\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+def run_tests():\n+    site = AdminSite()\n+    request = RequestFactory().get('/')\n+    \n+    print(\"Test 1: Custom empty label with blank field\")\n+    admin1 = CustomEmptyLabelAdmin(TestModel, site)\n+    field1 = admin1.formfield_for_foreignkey(TestModel._meta.get_field('blank_field'), request)\n+    assert field1.empty_label == \"CUSTOM EMPTY LABEL\", f\"Expected 'CUSTOM EMPTY LABEL' but got '{field1.empty_label}'\"\n+    print(f\"\u2713 Custom empty label preserved: '{field1.empty_label}'\")\n+    \n+    print(\"\\nTest 2: Default behavior with blank field\")\n+    admin2 = DefaultBlankAdmin(TestModel, site)\n+    field2 = admin2.formfield_for_foreignkey(TestModel._meta.get_field('blank_field'), request)\n+    assert field2.empty_label == _(\"None\"), f\"Expected translated 'None' but got '{field2.empty_label}'\"\n+    print(f\"\u2713 Default empty label used: '{field2.empty_label}'\")\n+    \n+    print(\"\\nTest 3: Required field (should have None as empty_label)\")\n+    admin3 = RequiredFieldAdmin(TestModel, site)\n+    field3 = admin3.formfield_for_foreignkey(TestModel._meta.get_field('required_field'), request)\n+    assert field3.empty_label is None, f\"Expected None but got '{field3.empty_label}'\"\n+    print(f\"\u2713 Required field has None empty_label: {field3.empty_label}\")\n+    \n+    print(\"\\nTest 4: Custom empty label on required field (should be ignored)\")\n+    admin4 = CustomEmptyLabelRequiredAdmin(TestModel, site)\n+    field4 = admin4.formfield_for_foreignkey(TestModel._meta.get_field('required_field'), request)\n+    assert field4.empty_label is None, f\"Expected None but got '{field4.empty_label}'\"\n+    print(f\"\u2713 Custom empty label correctly ignored for required field: {field4.empty_label}\")\n+    \n+    print(\"\\nAll tests passed!\")\n+\n+if __name__ == '__main__':\n+    run_tests()\ndiff --git a/test_django_models_corrected.py b/test_django_models_corrected.py\nnew file mode 100644\nindex 0000000000..61d5e1e610\n--- /dev/null\n+++ b/test_django_models_corrected.py\n@@ -0,0 +1,71 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add tests directory to path  \n+sys.path.insert(0, '/testbed/tests')\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_sqlite')\n+\n+# Import after settings configured\n+from django.contrib import admin\n+from django.test import RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+\n+# Initialize Django\n+django.setup()\n+\n+# Import the test models\n+from admin_widgets.models import Event, Band, Inventory\n+\n+# Test with a blank field\n+class InventoryAdmin(admin.ModelAdmin):\n+    radio_fields = {'parent': admin.HORIZONTAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'parent':\n+            kwargs['empty_label'] = \"MY CUSTOM LABEL FOR PARENT\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+# Test with a non-blank field\n+class EventAdmin(admin.ModelAdmin):\n+    radio_fields = {'main_band': admin.HORIZONTAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'main_band':\n+            kwargs['empty_label'] = \"THIS SHOULD BE IGNORED\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+def test_with_django_models():\n+    site = AdminSite()\n+    request = RequestFactory().get('/')\n+    \n+    # Check Inventory model - parent field is blank=True\n+    inventory_admin = InventoryAdmin(Inventory, site)\n+    parent_field = Inventory._meta.get_field('parent')\n+    print(f\"Inventory.parent field blank={parent_field.blank}\")\n+    \n+    form_field = inventory_admin.formfield_for_foreignkey(parent_field, request)\n+    print(f\"Inventory.parent empty_label: '{form_field.empty_label}'\")\n+    assert form_field.empty_label == \"MY CUSTOM LABEL FOR PARENT\", \\\n+        f\"Expected 'MY CUSTOM LABEL FOR PARENT' but got '{form_field.empty_label}'\"\n+    print(\"\u2713 Custom empty label preserved for blank field\")\n+    \n+    # Check Event model - main_band field is required (not blank)\n+    event_admin = EventAdmin(Event, site)\n+    main_band_field = Event._meta.get_field('main_band')\n+    print(f\"\\nEvent.main_band field blank={main_band_field.blank}\")\n+    \n+    form_field = event_admin.formfield_for_foreignkey(main_band_field, request)\n+    print(f\"Event.main_band empty_label: {form_field.empty_label}\")\n+    assert form_field.empty_label is None, \\\n+        f\"Expected None but got '{form_field.empty_label}'\"\n+    print(\"\u2713 Custom empty label correctly ignored for required field\")\n+    \n+    print(\"\\nAll tests with Django models passed!\")\n+\n+if __name__ == '__main__':\n+    test_with_django_models()\ndiff --git a/test_django_models_radio_fields.py b/test_django_models_radio_fields.py\nnew file mode 100644\nindex 0000000000..0d47e62e66\n--- /dev/null\n+++ b/test_django_models_radio_fields.py\n@@ -0,0 +1,71 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add tests directory to path  \n+sys.path.insert(0, '/testbed/tests')\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_sqlite')\n+\n+# Import after settings configured\n+from django.contrib import admin\n+from django.test import RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+\n+# Initialize Django\n+django.setup()\n+\n+# Import the test models\n+from admin_widgets.models import Event, Band, Album\n+\n+# Test with a blank field\n+class AlbumAdmin(admin.ModelAdmin):\n+    radio_fields = {'band': admin.HORIZONTAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'band':\n+            kwargs['empty_label'] = \"MY CUSTOM LABEL FOR BAND\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+# Test with a non-blank field\n+class EventAdmin(admin.ModelAdmin):\n+    radio_fields = {'main_band': admin.HORIZONTAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'main_band':\n+            kwargs['empty_label'] = \"THIS SHOULD BE IGNORED\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+def test_with_django_models():\n+    site = AdminSite()\n+    request = RequestFactory().get('/')\n+    \n+    # Check Album model - band field is blank=True\n+    album_admin = AlbumAdmin(Album, site)\n+    band_field = Album._meta.get_field('band')\n+    print(f\"Album.band field blank={band_field.blank}\")\n+    \n+    form_field = album_admin.formfield_for_foreignkey(band_field, request)\n+    print(f\"Album.band empty_label: '{form_field.empty_label}'\")\n+    assert form_field.empty_label == \"MY CUSTOM LABEL FOR BAND\", \\\n+        f\"Expected 'MY CUSTOM LABEL FOR BAND' but got '{form_field.empty_label}'\"\n+    print(\"\u2713 Custom empty label preserved for blank field\")\n+    \n+    # Check Event model - main_band field is required (not blank)\n+    event_admin = EventAdmin(Event, site)\n+    main_band_field = Event._meta.get_field('main_band')\n+    print(f\"\\nEvent.main_band field blank={main_band_field.blank}\")\n+    \n+    form_field = event_admin.formfield_for_foreignkey(main_band_field, request)\n+    print(f\"Event.main_band empty_label: {form_field.empty_label}\")\n+    assert form_field.empty_label is None, \\\n+        f\"Expected None but got '{form_field.empty_label}'\"\n+    print(\"\u2713 Custom empty label correctly ignored for required field\")\n+    \n+    print(\"\\nAll tests with Django models passed!\")\n+\n+if __name__ == '__main__':\n+    test_with_django_models()\ndiff --git a/test_radio_fields_empty_label.py b/test_radio_fields_empty_label.py\nnew file mode 100644\nindex 0000000000..dd72fd7a9c\n--- /dev/null\n+++ b/test_radio_fields_empty_label.py\n@@ -0,0 +1,79 @@\n+#!/usr/bin/env python\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+from django.contrib import admin\n+from django.test import TestCase, RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+from django.utils.translation import gettext_lazy as _\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.messages',\n+            'django.contrib.sessions',\n+        ],\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+    django.setup()\n+\n+# Define test models\n+class RelatedModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class TestModel(models.Model):\n+    myfield = models.ForeignKey(RelatedModel, on_delete=models.CASCADE, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Define ModelAdmin with radio_fields\n+class TestModelAdmin(admin.ModelAdmin):\n+    radio_fields = {'myfield': admin.HORIZONTAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+        if db_field.name == 'myfield':\n+            kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+# Test the issue\n+def test_custom_empty_label():\n+    site = AdminSite()\n+    model_admin = TestModelAdmin(TestModel, site)\n+    request = RequestFactory().get('/')\n+    \n+    # Get the db_field\n+    db_field = TestModel._meta.get_field('myfield')\n+    \n+    # Get the form field\n+    form_field = model_admin.formfield_for_foreignkey(db_field, request)\n+    \n+    # Check the empty_label\n+    print(f\"Empty label: {form_field.empty_label}\")\n+    print(f\"Expected: 'I WANT TO SET MY OWN EMPTY LABEL'\")\n+    print(f\"Actual: {form_field.empty_label}\")\n+    \n+    # This should be True but currently it's False due to the bug\n+    assert form_field.empty_label == \"I WANT TO SET MY OWN EMPTY LABEL\", \\\n+        f\"Expected 'I WANT TO SET MY OWN EMPTY LABEL' but got '{form_field.empty_label}'\"\n+\n+if __name__ == '__main__':\n+    test_custom_empty_label()\n+    print(\"Test passed!\")\n", "gold_standard_diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087bf106..63f5cb2b27e6 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,9 @@ def formfield_for_foreignkey(self, db_field, request, **kwargs):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                kwargs[\"empty_label\"] = (\n+                    kwargs.get(\"empty_label\", _(\"None\")) if db_field.blank else None\n+                )\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex db724b419649..cce759a9c870 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -21,6 +21,7 @@\n     CharField,\n     DateField,\n     DateTimeField,\n+    ForeignKey,\n     ManyToManyField,\n     UUIDField,\n )\n@@ -141,6 +142,17 @@ def test_radio_fields_ForeignKey(self):\n         )\n         self.assertIsNone(ff.empty_label)\n \n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n     def test_many_to_many(self):\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/15467"}