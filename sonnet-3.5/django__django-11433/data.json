{"instance_id": "django__django-11433", "score": "I", "diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..8d7fd226b3 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -49,7 +49,8 @@ def construct_instance(form, instance, fields=None, exclude=None):\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n         if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\n+                f.name not in cleaned_data):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n", "gold_standard_diff": "From aa94f7c899b98f547fc1d26797ba892c38eaf415 Mon Sep 17 00:00:00 2001\nFrom: RobertAKARobin <robertgfthomas@gmail.com>\nDate: Fri, 31 May 2019 12:05:37 -0500\nSubject: [PATCH] Fixed #30534 -- Fixed overriding a field's default in\n ModelForm.cleaned_data().\n\n---\n django/forms/models.py     |  7 +++++--\n tests/model_forms/tests.py | 26 ++++++++++++++++++++++++++\n 2 files changed, 31 insertions(+), 2 deletions(-)\n\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f34..3ad8cea9b619 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -48,8 +48,11 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+        if (\n+            f.has_default() and\n+            form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\n+            cleaned_data.get(f.name) in form[f.name].field.empty_values\n+        ):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 3893eb334c92..42b9cf2c45b1 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -585,6 +585,32 @@ class Meta:\n         m2 = mf2.save(commit=False)\n         self.assertEqual(m2.mode, '')\n \n+    def test_default_not_populated_on_non_empty_value_in_cleaned_data(self):\n+        class PubForm(forms.ModelForm):\n+            mode = forms.CharField(max_length=255, required=False)\n+            mocked_mode = None\n+\n+            def clean(self):\n+                self.cleaned_data['mode'] = self.mocked_mode\n+                return self.cleaned_data\n+\n+            class Meta:\n+                model = PublicationDefaults\n+                fields = ('mode',)\n+\n+        pub_form = PubForm({})\n+        pub_form.mocked_mode = 'de'\n+        pub = pub_form.save(commit=False)\n+        self.assertEqual(pub.mode, 'de')\n+        # Default should be populated on an empty value in cleaned_data.\n+        default_mode = 'di'\n+        for empty_value in pub_form.fields['mode'].empty_values:\n+            with self.subTest(empty_value=empty_value):\n+                pub_form = PubForm({})\n+                pub_form.mocked_mode = empty_value\n+                pub = pub_form.save(commit=False)\n+                self.assertEqual(pub.mode, default_mode)\n+\n     def test_default_not_populated_on_optional_checkbox_input(self):\n         class PubForm(forms.ModelForm):\n             class Meta:\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11433"}