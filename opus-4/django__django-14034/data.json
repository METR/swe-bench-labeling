{"instance_id": "django__django-14034", "score": "I", "diff": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..45ee6b5273 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1026,7 +1026,12 @@ class MultiValueField(Field):\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n                 else:\n-                    return self.compress([])\n+                    # When require_all_fields is False, we still need to check if any\n+                    # individual field is required, even when all values are empty.\n+                    # Don't return early - continue to field validation below.\n+                    if self.require_all_fields:\n+                        return self.compress([])\n+                    # else: fall through to validate individual fields\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\ndiff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 29287d0b01..eb9b8885ba 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -172,3 +172,43 @@ class MultiValueFieldTest(SimpleTestCase):\n         })\n         form.is_valid()\n         self.assertEqual(form.cleaned_data['field1'], 'some text,JP,2007-04-25 06:24:00')\n+\n+    def test_require_all_fields_false_with_required_subfield(self):\n+        \"\"\"\n+        When require_all_fields=False, if a subfield is required and all values\n+        are empty, the validation should fail.\n+        \"\"\"\n+        # Define a MultiValueField with one optional and one required field\n+        class TestMultiValueField(MultiValueField):\n+            def __init__(self):\n+                fields = [\n+                    CharField(required=False),\n+                    CharField(required=True),\n+                ]\n+                super().__init__(\n+                    fields=fields,\n+                    require_all_fields=False,\n+                    required=False,\n+                )\n+            \n+            def compress(self, data_list):\n+                return data_list\n+        \n+        # Test 1: Both fields empty - should fail because second field is required\n+        field = TestMultiValueField()\n+        with self.assertRaises(ValidationError) as cm:\n+            field.clean(['', ''])\n+        self.assertEqual(cm.exception.messages[0], 'Enter a complete value.')\n+        \n+        # Test 2: First field has value, second field empty - should fail\n+        with self.assertRaises(ValidationError) as cm:\n+            field.clean(['test', ''])\n+        self.assertEqual(cm.exception.messages[0], 'Enter a complete value.')\n+        \n+        # Test 3: Only second field (required) has value - should pass\n+        result = field.clean(['', 'test'])\n+        self.assertEqual(result, ['', 'test'])\n+        \n+        # Test 4: Both fields have values - should pass\n+        result = field.clean(['test1', 'test2'])\n+        self.assertEqual(result, ['test1', 'test2'])\n", "gold_standard_diff": "From 2d0ae8da80e1ed37e94f3abad5c80145a00e688f Mon Sep 17 00:00:00 2001\nFrom: Jacob Walls <jacobtylerwalls@gmail.com>\nDate: Mon, 22 Feb 2021 14:28:38 -0500\nSubject: [PATCH] Fixed #29205 -- Corrected rendering of required attributes\n for MultiValueField subfields.\n\n---\n django/forms/boundfield.py                    | 14 ++++++++++--\n .../field_tests/test_multivaluefield.py       | 22 +++++++++++++++++++\n 2 files changed, 34 insertions(+), 2 deletions(-)\n\ndiff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex a061f15f8711..3e92cba54978 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -2,7 +2,7 @@\n \n from django.core.exceptions import ValidationError\n from django.forms.utils import flatatt, pretty_name\n-from django.forms.widgets import Textarea, TextInput\n+from django.forms.widgets import MultiWidget, Textarea, TextInput\n from django.utils.functional import cached_property\n from django.utils.html import conditional_escape, format_html, html_safe\n from django.utils.safestring import mark_safe\n@@ -233,7 +233,17 @@ def build_widget_attrs(self, attrs, widget=None):\n         widget = widget or self.field.widget\n         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.\n         if widget.use_required_attribute(self.initial) and self.field.required and self.form.use_required_attribute:\n-            attrs['required'] = True\n+            # MultiValueField has require_all_fields: if False, fall back\n+            # on subfields.\n+            if (\n+                hasattr(self.field, 'require_all_fields') and\n+                not self.field.require_all_fields and\n+                isinstance(self.field.widget, MultiWidget)\n+            ):\n+                for subfield, subwidget in zip(self.field.fields, widget.widgets):\n+                    subwidget.attrs['required'] = subwidget.use_required_attribute(self.initial) and subfield.required\n+            else:\n+                attrs['required'] = True\n         if self.field.disabled:\n             attrs['disabled'] = True\n         return attrs\ndiff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 29287d0b014f..22e0892f68c1 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -10,6 +10,20 @@\n beatles = (('J', 'John'), ('P', 'Paul'), ('G', 'George'), ('R', 'Ringo'))\n \n \n+class PartiallyRequiredField(MultiValueField):\n+    def compress(self, data_list):\n+        return ','.join(data_list) if data_list else None\n+\n+\n+class PartiallyRequiredForm(Form):\n+    f = PartiallyRequiredField(\n+        fields=(CharField(required=True), CharField(required=False)),\n+        required=True,\n+        require_all_fields=False,\n+        widget=MultiWidget(widgets=[TextInput(), TextInput()]),\n+    )\n+\n+\n class ComplexMultiWidget(MultiWidget):\n     def __init__(self, attrs=None):\n         widgets = (\n@@ -172,3 +186,11 @@ def test_form_cleaned_data(self):\n         })\n         form.is_valid()\n         self.assertEqual(form.cleaned_data['field1'], 'some text,JP,2007-04-25 06:24:00')\n+\n+    def test_render_required_attributes(self):\n+        form = PartiallyRequiredForm({'f_0': 'Hello', 'f_1': ''})\n+        self.assertTrue(form.is_valid())\n+        self.assertInHTML('<input type=\"text\" name=\"f_0\" value=\"Hello\" required id=\"id_f_0\">', form.as_p())\n+        self.assertInHTML('<input type=\"text\" name=\"f_1\" id=\"id_f_1\">', form.as_p())\n+        form = PartiallyRequiredForm({'f_0': '', 'f_1': ''})\n+        self.assertFalse(form.is_valid())\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14034"}