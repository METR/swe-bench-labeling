{"instance_id": "django__django-12325", "score": "C", "diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05ef9..a8a7a6376b 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -200,9 +200,9 @@ class ModelBase(type):\n             # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n-            # Locate OneToOneField instances.\n+            # Locate OneToOneField instances with parent_link=True.\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n \ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..e8ea21b8b9\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,110 @@\n+import os\n+import django\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+django.setup()\n+\n+from django.db import models\n+\n+# Test 1: Multiple OneToOne fields - order shouldn't matter\n+print(\"Test 1: Multiple OneToOne fields with parent_link\")\n+try:\n+    class BaseModel1(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class Child1(BaseModel1):\n+        # parent_link field after non-parent_link field\n+        other_relation = models.OneToOneField(BaseModel1, on_delete=models.CASCADE, related_name='child1_other')\n+        basemodel1_ptr = models.OneToOneField(BaseModel1, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(\"  - parent_link after non-parent_link: SUCCESS\")\n+except Exception as e:\n+    print(f\"  - parent_link after non-parent_link: FAILED - {type(e).__name__}: {e}\")\n+\n+try:\n+    class BaseModel2(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    class Child2(BaseModel2):\n+        # parent_link field before non-parent_link field \n+        basemodel2_ptr = models.OneToOneField(BaseModel2, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        other_relation = models.OneToOneField(BaseModel2, on_delete=models.CASCADE, related_name='child2_other')\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(\"  - parent_link before non-parent_link: SUCCESS\")\n+except Exception as e:\n+    print(f\"  - parent_link before non-parent_link: FAILED - {type(e).__name__}: {e}\")\n+\n+# Test 2: Auto-generated parent link\n+print(\"\\nTest 2: Auto-generated parent link\")\n+try:\n+    class BaseModel3(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class Child3(BaseModel3):\n+        # No explicit parent link - should be auto-generated\n+        other_relation = models.OneToOneField(BaseModel3, on_delete=models.CASCADE, related_name='child3_other')\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    # Check if basemodel3_ptr was auto-generated\n+    assert hasattr(Child3, 'basemodel3_ptr'), \"Auto-generated parent link missing\"\n+    print(\"  - Auto-generated parent link with other OneToOne: SUCCESS\")\n+except Exception as e:\n+    print(f\"  - Auto-generated parent link with other OneToOne: FAILED - {type(e).__name__}: {e}\")\n+\n+# Test 3: Multiple inheritance\n+print(\"\\nTest 3: Multiple inheritance\")\n+try:\n+    class Parent1(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+            \n+    class Parent2(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class MultiChild(Parent1, Parent2):\n+        # Explicit parent links for both parents\n+        parent1_ptr = models.OneToOneField(Parent1, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        parent2_ptr = models.OneToOneField(Parent2, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(\"  - Multiple inheritance with explicit parent links: SUCCESS\")\n+except Exception as e:\n+    print(f\"  - Multiple inheritance with explicit parent links: FAILED - {type(e).__name__}: {e}\")\n+\n+# Test 4: Abstract base class shouldn't have parent links\n+print(\"\\nTest 4: Abstract base class\")\n+try:\n+    class AbstractBase(models.Model):\n+        name = models.CharField(max_length=100)\n+        \n+        class Meta:\n+            abstract = True\n+            app_label = 'test_app'\n+\n+    class ConcreteChild(AbstractBase):\n+        extra_field = models.CharField(max_length=100)\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    # Should not have any parent link to abstract base\n+    assert not hasattr(ConcreteChild, 'abstractbase_ptr'), \"Unexpected parent link to abstract base\"\n+    print(\"  - No parent link to abstract base: SUCCESS\")\n+except Exception as e:\n+    print(f\"  - Abstract base test: FAILED - {type(e).__name__}: {e}\")\n+\n+print(\"\\nAll tests completed!\")\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..70c4188ad6\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,67 @@\n+import os\n+import django\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+django.setup()\n+\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+\n+# Edge case 1: OneToOneField with parent_link but pointing to wrong model\n+print(\"Test 1: OneToOneField with parent_link pointing to wrong model\")\n+try:\n+    class Parent1(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+            \n+    class Parent2(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class Child1(Parent1):\n+        # This should work - auto-generated parent1_ptr\n+        other = models.OneToOneField(Parent2, on_delete=models.CASCADE, parent_link=True)\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(\"  SUCCESS - No exception for parent_link to different model\")\n+except Exception as e:\n+    print(f\"  FAILED - {type(e).__name__}: {e}\")\n+\n+# Edge case 2: Multiple parent_link fields to same parent\n+print(\"\\nTest 2: Multiple parent_link fields to same parent\")\n+try:\n+    class Parent3(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class Child2(Parent3):\n+        ptr1 = models.OneToOneField(Parent3, on_delete=models.CASCADE, parent_link=True, related_name='child2_1')\n+        ptr2 = models.OneToOneField(Parent3, on_delete=models.CASCADE, parent_link=True, related_name='child2_2')\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(\"  SUCCESS - Multiple parent_link fields allowed\")\n+except Exception as e:\n+    print(f\"  FAILED - {type(e).__name__}: {e}\")\n+\n+# Edge case 3: Wrong field name with parent_link in options.py scenario\n+print(\"\\nTest 3: Explicit parent_link field\")\n+try:\n+    class Parent4(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class Child3(Parent4):\n+        # Explicit parent link with custom name\n+        my_parent_ptr = models.OneToOneField(Parent4, on_delete=models.CASCADE, parent_link=True, primary_key=True)\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(f\"  SUCCESS - Custom parent link field created\")\n+    print(f\"  Primary key: {Child3._meta.pk.name}\")\n+except Exception as e:\n+    print(f\"  FAILED - {type(e).__name__}: {e}\")\ndiff --git a/test_issue_reproduction.py b/test_issue_reproduction.py\nnew file mode 100644\nindex 0000000000..39b4e9590f\n--- /dev/null\n+++ b/test_issue_reproduction.py\n@@ -0,0 +1,41 @@\n+import os\n+import django\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+django.setup()\n+\n+from django.db import models\n+\n+# Test case 1: document_ptr defined before origin (should fail according to issue)\n+try:\n+    class Document(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class Picking1(Document):\n+        document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        origin = models.OneToOneField(Document, related_name='picking1', on_delete=models.PROTECT)\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(\"Test case 1: document_ptr before origin - SUCCESS (no exception)\")\n+except Exception as e:\n+    print(f\"Test case 1: document_ptr before origin - FAILED with: {type(e).__name__}: {e}\")\n+\n+# Test case 2: origin defined before document_ptr (should work according to issue)\n+try:\n+    class Document2(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+            \n+    class Picking2(Document2):\n+        origin = models.OneToOneField(Document2, related_name='picking2', on_delete=models.PROTECT)\n+        document_ptr = models.OneToOneField(Document2, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    print(\"Test case 2: origin before document_ptr - SUCCESS (no exception)\")\n+except Exception as e:\n+    print(f\"Test case 2: origin before document_ptr - FAILED with: {type(e).__name__}: {e}\")\ndiff --git a/test_no_parent_link.py b/test_no_parent_link.py\nnew file mode 100644\nindex 0000000000..6ce571c787\n--- /dev/null\n+++ b/test_no_parent_link.py\n@@ -0,0 +1,27 @@\n+import os\n+import django\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+django.setup()\n+\n+from django.db import models\n+\n+# Test: Model with OneToOne but no parent_link should auto-generate parent link\n+try:\n+    class Place(models.Model):\n+        class Meta:\n+            app_label = 'test_app'\n+\n+    class ParkingLot(Place):\n+        # No parent_link=True, so this shouldn't be treated as the parent link\n+        parent = models.OneToOneField(Place, on_delete=models.CASCADE)\n+        \n+        class Meta:\n+            app_label = 'test_app'\n+    \n+    # Check if place_ptr was auto-generated\n+    print(f\"Has place_ptr: {hasattr(ParkingLot, 'place_ptr')}\")\n+    print(f\"Fields: {[f.name for f in ParkingLot._meta.get_fields()]}\")\n+    print(\"SUCCESS - No exception raised, parent link auto-generated\")\n+except Exception as e:\n+    print(f\"FAILED - {type(e).__name__}: {e}\")\n", "gold_standard_diff": "From d15ccb47ac0608032227dcee76bcdecef2a548a9 Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Wed, 15 Jan 2020 14:46:32 +0100\nSubject: [PATCH] Fixed #29998 -- Allowed multiple OneToOneField to the parent\n model.\n\nWe assumed that any OneToOneField's in a child model must be the\nparent link and raised an error when parent_link=True was not\nspecified. This patch allows to specify multiple OneToOneField's to\nthe parent model.\n\nOneToOneField's without a custom related_name will raise fields.E304\nand fields.E305 so this should warn users when they try to override\nthe automatically-created OneToOneField.\n---\n django/db/models/base.py                      |  2 +-\n django/db/models/options.py                   |  6 +----\n tests/invalid_models_tests/test_models.py     | 25 +++++++++++------\n .../test_relative_fields.py                   | 27 +++++++++++++++++++\n tests/migrations/test_state.py                |  1 +\n 5 files changed, 47 insertions(+), 14 deletions(-)\n\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05ef948..24453e218a43 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -202,7 +202,7 @@ def __new__(cls, name, bases, attrs, **kwargs):\n                 continue\n             # Locate OneToOneField instances.\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n \ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6ba1dd8..08c80bb6c852 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -5,7 +5,7 @@\n \n from django.apps import apps\n from django.conf import settings\n-from django.core.exceptions import FieldDoesNotExist, ImproperlyConfigured\n+from django.core.exceptions import FieldDoesNotExist\n from django.db import connections\n from django.db.models import Manager\n from django.db.models.fields import AutoField\n@@ -251,10 +251,6 @@ def _prepare(self, model):\n                     field = already_created[0]\n                 field.primary_key = True\n                 self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n-                    raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n-                    )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 60b89b6f2ec4..ec2d345d5a9c 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -3,7 +3,6 @@\n from django.conf import settings\n from django.core.checks import Error, Warning\n from django.core.checks.model_checks import _check_lazy_references\n-from django.core.exceptions import ImproperlyConfigured\n from django.db import connection, connections, models\n from django.db.models.functions import Lower\n from django.db.models.signals import post_init\n@@ -1006,14 +1005,24 @@ class ShippingMethodPrice(models.Model):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n-    def test_missing_parent_link(self):\n-        msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n-        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n-            class Place(models.Model):\n-                pass\n+    def test_onetoone_with_parent_model(self):\n+        class Place(models.Model):\n+            pass\n+\n+        class ParkingLot(Place):\n+            other_place = models.OneToOneField(Place, models.CASCADE, related_name='other_parking')\n+\n+        self.assertEqual(ParkingLot.check(), [])\n+\n+    def test_onetoone_with_explicit_parent_link_parent_model(self):\n+        class Place(models.Model):\n+            pass\n+\n+        class ParkingLot(Place):\n+            place = models.OneToOneField(Place, models.CASCADE, parent_link=True, primary_key=True)\n+            other_place = models.OneToOneField(Place, models.CASCADE, related_name='other_parking')\n \n-            class ParkingLot(Place):\n-                parent = models.OneToOneField(Place, models.CASCADE)\n+        self.assertEqual(ParkingLot.check(), [])\n \n     def test_m2m_table_name_clash(self):\n         class Foo(models.Model):\ndiff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 4ac0c547a9e3..786573672f38 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -1291,6 +1291,33 @@ class Model(models.Model):\n             ),\n         ])\n \n+    def test_clash_parent_link(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            other_parent = models.OneToOneField(Parent, models.CASCADE)\n+\n+        errors = [\n+            ('fields.E304', 'accessor', 'parent_ptr', 'other_parent'),\n+            ('fields.E305', 'query name', 'parent_ptr', 'other_parent'),\n+            ('fields.E304', 'accessor', 'other_parent', 'parent_ptr'),\n+            ('fields.E305', 'query name', 'other_parent', 'parent_ptr'),\n+        ]\n+        self.assertEqual(Child.check(), [\n+            Error(\n+                \"Reverse %s for 'Child.%s' clashes with reverse %s for \"\n+                \"'Child.%s'.\" % (attr, field_name, attr, clash_name),\n+                hint=(\n+                    \"Add or change a related_name argument to the definition \"\n+                    \"for 'Child.%s' or 'Child.%s'.\" % (field_name, clash_name)\n+                ),\n+                obj=Child._meta.get_field(field_name),\n+                id=error_id,\n+            )\n+            for error_id, attr, field_name, clash_name in errors\n+        ])\n+\n \n @isolate_apps('invalid_models_tests')\n class M2mThroughFieldsTests(SimpleTestCase):\ndiff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 267b75c811c2..ef198eb0b687 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -345,6 +345,7 @@ def test_render(self):\n                     'migrations.Tag',\n                     models.CASCADE,\n                     auto_created=True,\n+                    parent_link=True,\n                     primary_key=True,\n                     to_field='id',\n                     serialize=False,\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12325"}