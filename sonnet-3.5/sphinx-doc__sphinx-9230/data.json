{"instance_id": "sphinx-doc__sphinx-9230", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 2538952e3..94e1d8b32 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 7d39d80ed..17d100f77 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -83,6 +83,13 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if text == 'None':\n         reftype = 'obj'\n+    elif text.startswith('dict(') and text.endswith(')'):\n+        # Special case for dict(str, str)\n+        inner_types = text[5:-1].split(',')\n+        if len(inner_types) == 2:\n+            key_type = type_to_xref(inner_types[0].strip(), env)\n+            value_type = type_to_xref(inner_types[1].strip(), env)\n+            return nodes.literal('', 'dict(', key_type, ', ', value_type, ')')\n     else:\n         reftype = 'class'\n \n@@ -92,7 +99,7 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         kwargs = {}\n \n-    if env.config.python_use_unqualified_type_names:\n+    if env and env.config.python_use_unqualified_type_names:\n         # Note: It would be better to use qualname to describe the object to support support\n         # nested classes.  But python domain can't access the real python object because this\n         # module should work not-dynamically.\n@@ -122,7 +129,7 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n             else:\n-                return [nodes.Text(node.value)]\n+                return [type_to_xref(str(node.value), env)]\n         elif isinstance(node, ast.Expr):\n             return unparse(node.value)\n         elif isinstance(node, ast.Index):\n@@ -138,11 +145,20 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         elif isinstance(node, ast.Module):\n             return sum((unparse(e) for e in node.body), [])\n         elif isinstance(node, ast.Name):\n-            return [nodes.Text(node.id)]\n+            return [type_to_xref(node.id, env)]\n         elif isinstance(node, ast.Subscript):\n-            result = unparse(node.value)\n+            value = unparse(node.value)\n+            slice = unparse(node.slice)\n+            if isinstance(node.value, ast.Name) and node.value.id == 'dict':\n+                # Special case for dict(str, str)\n+                inner_types = ''.join(str(n) for n in slice).split(',')\n+                if len(inner_types) == 2:\n+                    key_type = type_to_xref(inner_types[0].strip(), env)\n+                    value_type = type_to_xref(inner_types[1].strip(), env)\n+                    return [nodes.Text('dict('), key_type, nodes.Text(', '), value_type, nodes.Text(')')]\n+            result = value\n             result.append(addnodes.desc_sig_punctuation('', '['))\n-            result.extend(unparse(node.slice))\n+            result.extend(slice)\n             result.append(addnodes.desc_sig_punctuation('', ']'))\n             return result\n         elif isinstance(node, ast.Tuple):\n@@ -162,7 +178,7 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n                 if isinstance(node, ast.Ellipsis):\n                     return [addnodes.desc_sig_punctuation('', \"...\")]\n                 elif isinstance(node, ast.NameConstant):\n-                    return [nodes.Text(node.value)]\n+                    return [type_to_xref(str(node.value), env)]\n \n             raise SyntaxError  # unsupported syntax\n \ndiff --git a/tox.ini b/tox.ini\nindex a363e187f..3b8bc12d0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex 2d41dd93ad4..c3a34ee021d 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -53,6 +53,8 @@ Bugs fixed\n * #9185: autodoc: typehints for overloaded functions and methods are inaccurate\n * #9217: manpage: The name of manpage directory that is generated by\n   :confval:`man_make_section_directory` is not correct\n+* #9224: ``:param:`` and ``:type:`` fields does not support a type containing\n+  whitespace (ex. ``Dict[str, str]``)\n \n Testing\n --------\ndiff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py\nindex 3a3367ebe5d..6d48e910c1b 100644\n--- a/sphinx/util/docfields.py\n+++ b/sphinx/util/docfields.py\n@@ -298,7 +298,7 @@ def transform(self, node: nodes.field_list) -> None:\n             # also support syntax like ``:param type name:``\n             if typedesc.is_typed:\n                 try:\n-                    argtype, argname = fieldarg.split(None, 1)\n+                    argtype, argname = fieldarg.rsplit(None, 1)\n                 except ValueError:\n                     pass\n                 else:\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 569390c403d..2614c8ff6c2 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,7 +922,8 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param Dict[str, str] params: blah blah\\n\")\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n@@ -936,6 +937,7 @@ def test_info_field_list(app):\n     assert_node(doctree[3][1][0][0],\n                 ([nodes.field_name, \"Parameters\"],\n                  [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph],\n                                                         [nodes.list_item, nodes.paragraph],\n                                                         [nodes.list_item, nodes.paragraph])]))\n \n@@ -983,6 +985,29 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+    # :param Dict[str, str] params:\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"params\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"Dict\"],\n+                 [addnodes.literal_emphasis, \"[\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \"]\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9230"}