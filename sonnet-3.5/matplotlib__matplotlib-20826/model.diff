diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 802fd3c997..1d632589d3 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -1192,6 +1192,10 @@ class _AxesBase(martist.Artist):
         xaxis_visible = self.xaxis.get_visible()
         yaxis_visible = self.yaxis.get_visible()
 
+        # Store shared axes information
+        sharex = self._sharex
+        sharey = self._sharey
+
         self.xaxis.clear()
         self.yaxis.clear()
 
@@ -1201,16 +1205,16 @@ class _AxesBase(martist.Artist):
         self.ignore_existing_data_limits = True
         self.callbacks = cbook.CallbackRegistry()
 
-        if self._sharex is not None:
-            self.sharex(self._sharex)
+        if sharex is not None:
+            self.sharex(sharex)
         else:
             self.xaxis._set_scale('linear')
             try:
                 self.set_xlim(0, 1)
             except TypeError:
                 pass
-        if self._sharey is not None:
-            self.sharey(self._sharey)
+        if sharey is not None:
+            self.sharey(sharey)
         else:
             self.yaxis._set_scale('linear')
             try:
@@ -1218,18 +1222,31 @@ class _AxesBase(martist.Artist):
             except TypeError:
                 pass
 
+        # Restore shared axes properties
+        if sharex is not None:
+            self._sharex = sharex
+            self.xaxis.set_visible(xaxis_visible)
+        if sharey is not None:
+            self._sharey = sharey
+            self.yaxis.set_visible(yaxis_visible)
+
         # update the minor locator for x and y axis based on rcParams
         if mpl.rcParams['xtick.minor.visible']:
             self.xaxis.set_minor_locator(mticker.AutoMinorLocator())
         if mpl.rcParams['ytick.minor.visible']:
             self.yaxis.set_minor_locator(mticker.AutoMinorLocator())
 
-        if self._sharex is None:
+        if sharex is None:
             self._autoscaleXon = True
-        if self._sharey is None:
+        if sharey is None:
             self._autoscaleYon = True
         self._xmargin = mpl.rcParams['axes.xmargin']
         self._ymargin = mpl.rcParams['axes.ymargin']
+
+        # Restore visibility states
+        self.patch.set_visible(patch_visible)
+        self.xaxis.set_visible(xaxis_visible)
+        self.yaxis.set_visible(yaxis_visible)
         self._tight = None
         self._use_sticky_edges = True
         self._update_transScale()  # needed?
