{"instance_id": "sympy__sympy-14248", "score": "C", "diff": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612..d4933105c5 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -819,7 +819,41 @@ def _print_BlockMatrix(self, B):\n         return self._print(B.blocks)\n \n     def _print_MatAdd(self, expr):\n-        return self._print_seq(expr.args, None, None, ' + ')\n+        # Similar logic to _print_Add to handle negative terms\n+        pforms = []\n+        for i, arg in enumerate(expr.args):\n+            pform = self._print(arg)\n+            \n+            # Check if this is a negative term\n+            if hasattr(arg, 'as_coeff_mmul'):\n+                coeff, rest = arg.as_coeff_mmul()\n+                if coeff == S.NegativeOne:\n+                    # This is a negative term\n+                    if i == 0:\n+                        if rest.is_MatMul:\n+                            # Multiple matrices being multiplied\n+                            pform = self._print(rest)\n+                        else:\n+                            # Single matrix\n+                            pform = self._print(rest)\n+                        pform = prettyForm(*stringPict.next('-', pform))\n+                    else:\n+                        if rest.is_MatMul:\n+                            pform = self._print(rest)\n+                        else:\n+                            pform = self._print(rest)\n+                        pform = prettyForm(*stringPict.next(' - ', pform))\n+                    pforms.append(pform)\n+                    continue\n+            \n+            # Regular positive term\n+            if i == 0:\n+                pforms.append(pform)\n+            else:\n+                pform = prettyForm(*stringPict.next(' + ', pform))\n+                pforms.append(pform)\n+        \n+        return prettyForm.__add__(*pforms)\n \n     def _print_MatMul(self, expr):\n         args = list(expr.args)\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7f..8f1c807e90 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -304,16 +304,46 @@ def _print_Mul(self, expr):\n             return sign + '*'.join(a_str) + \"/(%s)\" % '*'.join(b_str)\n \n     def _print_MatMul(self, expr):\n-        return '*'.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        # Check for negative leading coefficient like regular Mul\n+        from sympy.matrices.expressions.matmul import MatMul\n+        c, e = expr.as_coeff_mmul()\n+        if c == S.One:\n+            # No special coefficient, print normally\n+            return '*'.join([self.parenthesize(arg, precedence(expr))\n+                for arg in expr.args])\n+        elif c == S.NegativeOne:\n+            # Negative coefficient, print without it\n+            if isinstance(e, MatMul):\n+                return \"-\" + '*'.join([self.parenthesize(arg, precedence(expr))\n+                    for arg in e.args])\n+            else:\n+                # Single matrix\n+                return \"-\" + self._print(e)\n+        else:\n+            # Other coefficient, include it\n+            return '*'.join([self.parenthesize(arg, precedence(expr))\n+                for arg in expr.args])\n \n     def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        # Logic similar to _print_Add to handle negative terms properly\n+        PREC = precedence(expr)\n+        l = []\n+        for arg in expr.args:\n+            t = self.parenthesize(arg, PREC)\n+            if t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/test_matrix_print.py b/test_matrix_print.py\nnew file mode 100644\nindex 0000000000..e384c479b8\n--- /dev/null\n+++ b/test_matrix_print.py\n@@ -0,0 +1,6 @@\n+from sympy import *\n+A = MatrixSymbol('A', 2, 2)\n+B = MatrixSymbol('B', 2, 2)\n+print(\"str:\", A - A*B - B)\n+pprint(A - A*B - B)\n+print(\"latex:\", latex(A - A*B - B))\n", "gold_standard_diff": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8253b2f68215..e4081553542b 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1477,18 +1477,33 @@ def _print_Adjoint(self, expr):\n             return r\"%s^\\dagger\" % self._print(mat)\n \n     def _print_MatAdd(self, expr):\n-        terms = list(expr.args)\n-        tex = \" + \".join(map(self._print, terms))\n-        return tex\n+        terms = [self._print(t) for t in expr.args]\n+        l = []\n+        for t in terms:\n+            if t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_MatMul(self, expr):\n-        from sympy import Add, MatAdd, HadamardProduct\n+        from sympy import Add, MatAdd, HadamardProduct, MatMul, Mul\n \n         def parens(x):\n             if isinstance(x, (Add, MatAdd, HadamardProduct)):\n                 return r\"\\left(%s\\right)\" % self._print(x)\n             return self._print(x)\n-        return ' '.join(map(parens, expr.args))\n+\n+        if isinstance(expr, MatMul) and expr.args[0].is_Number and expr.args[0]<0:\n+            expr = Mul(-1*expr.args[0], MatMul(*expr.args[1:]))\n+            return '-' + ' '.join(map(parens, expr.args))\n+        else:\n+            return ' '.join(map(parens, expr.args))\n \n     def _print_Mod(self, expr, exp=None):\n         if exp is not None:\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex db24f4c612ad..e0c0fc860bc5 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -819,7 +819,20 @@ def _print_BlockMatrix(self, B):\n         return self._print(B.blocks)\n \n     def _print_MatAdd(self, expr):\n-        return self._print_seq(expr.args, None, None, ' + ')\n+        s = None\n+        for item in expr.args:\n+            pform = self._print(item)\n+            if s is None:\n+                s = pform     # First element\n+            else:\n+                if S(item.args[0]).is_negative:\n+                    s = prettyForm(*stringPict.next(s, ' '))\n+                    pform = self._print(item)\n+                else:\n+                    s = prettyForm(*stringPict.next(s, ' + '))\n+                s = prettyForm(*stringPict.next(s, pform))\n+\n+        return s\n \n     def _print_MatMul(self, expr):\n         args = list(expr.args)\ndiff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 4ffa965026a3..0b7e84500f78 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6089,6 +6089,17 @@ def test_MatrixElement_printing():\n     assert upretty(F) == ucode_str1\n \n \n+def test_MatrixSymbol_printing():\n+    # test cases for issue #14237\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    C = MatrixSymbol(\"C\", 3, 3)\n+\n+    assert pretty(-A*B*C) == \"-A*B*C\"\n+    assert pretty(A - B) == \"-B + A\"\n+    assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n+\n+\n def test_degree_printing():\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 0baefe0f7fc2..cc1d19fcce99 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -304,7 +304,14 @@ def _print_Mul(self, expr):\n             return sign + '*'.join(a_str) + \"/(%s)\" % '*'.join(b_str)\n \n     def _print_MatMul(self, expr):\n-        return '*'.join([self.parenthesize(arg, precedence(expr))\n+        c, m = expr.as_coeff_mmul()\n+        if c.is_number and c < 0:\n+            expr = _keep_coeff(-c, m)\n+            sign = \"-\"\n+        else:\n+            sign = \"\"\n+\n+        return sign + '*'.join([self.parenthesize(arg, precedence(expr))\n             for arg in expr.args])\n \n     def _print_HadamardProduct(self, expr):\n@@ -312,8 +319,20 @@ def _print_HadamardProduct(self, expr):\n             for arg in expr.args])\n \n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        terms = [self.parenthesize(arg, precedence(expr))\n+             for arg in expr.args]\n+        l = []\n+        for t in terms:\n+            if t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_NaN(self, expr):\n         return 'nan'\ndiff --git a/sympy/printing/tests/test_ccode.py b/sympy/printing/tests/test_ccode.py\nindex a473f800fbd5..f2f4a34c1952 100644\n--- a/sympy/printing/tests/test_ccode.py\n+++ b/sympy/printing/tests/test_ccode.py\n@@ -755,7 +755,7 @@ def test_MatrixElement_printing():\n     assert(ccode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(ccode(F) == \"((-1)*B + A)[0]\")\n+    assert(ccode(F) == \"(-B + A)[0]\")\n \n \n def test_subclass_CCodePrinter():\ndiff --git a/sympy/printing/tests/test_fcode.py b/sympy/printing/tests/test_fcode.py\nindex b2dc07ce6fa2..d3f4a07a3ab3 100644\n--- a/sympy/printing/tests/test_fcode.py\n+++ b/sympy/printing/tests/test_fcode.py\n@@ -756,4 +756,4 @@ def test_MatrixElement_printing():\n     assert(fcode(3 * A[0, 0]) == \"      3*A(1, 1)\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(fcode(F) == \"      ((-1)*B + A)(1, 1)\")\n+    assert(fcode(F) == \"      (-B + A)(1, 1)\")\ndiff --git a/sympy/printing/tests/test_jscode.py b/sympy/printing/tests/test_jscode.py\nindex 64e47aa62c7a..3eda9fe7ae52 100644\n--- a/sympy/printing/tests/test_jscode.py\n+++ b/sympy/printing/tests/test_jscode.py\n@@ -382,4 +382,4 @@ def test_MatrixElement_printing():\n     assert(jscode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(jscode(F) == \"((-1)*B + A)[0]\")\n+    assert(jscode(F) == \"(-B + A)[0]\")\ndiff --git a/sympy/printing/tests/test_julia.py b/sympy/printing/tests/test_julia.py\nindex 80c1ddfe14a9..c70c08a79823 100644\n--- a/sympy/printing/tests/test_julia.py\n+++ b/sympy/printing/tests/test_julia.py\n@@ -374,4 +374,4 @@ def test_MatrixElement_printing():\n     assert(julia_code(3 * A[0, 0]) == \"3*A[1,1]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(julia_code(F) == \"((-1)*B + A)[1,1]\")\n+    assert(julia_code(F) == \"(-B + A)[1,1]\")\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 0f07d5e3a950..12d484e51862 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1710,7 +1710,18 @@ def test_MatrixElement_printing():\n     assert latex(3 * A[0, 0]) == r\"3 A_{0, 0}\"\n \n     F = C[0, 0].subs(C, A - B)\n-    assert latex(F) == r\"\\left(-1 B + A\\right)_{0, 0}\"\n+    assert latex(F) == r\"\\left(-B + A\\right)_{0, 0}\"\n+\n+\n+def test_MatrixSymbol_printing():\n+    # test cases for issue #14237\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    C = MatrixSymbol(\"C\", 3, 3)\n+\n+    assert latex(-A) == r\"-A\"\n+    assert latex(A - A*B - B) == r\"-B - A B + A\"\n+    assert latex(-A*B - A*B*C - B) == r\"-B - A B - A B C\"\n \n \n def test_Quaternion_latex_printing():\ndiff --git a/sympy/printing/tests/test_octave.py b/sympy/printing/tests/test_octave.py\nindex a7d9f81c7b11..3166a4935e47 100644\n--- a/sympy/printing/tests/test_octave.py\n+++ b/sympy/printing/tests/test_octave.py\n@@ -394,4 +394,4 @@ def test_MatrixElement_printing():\n     assert mcode(3 * A[0, 0]) == \"3*A(1, 1)\"\n \n     F = C[0, 0].subs(C, A - B)\n-    assert mcode(F) == \"((-1)*B + A)(1, 1)\"\n+    assert mcode(F) == \"(-B + A)(1, 1)\"\ndiff --git a/sympy/printing/tests/test_rcode.py b/sympy/printing/tests/test_rcode.py\nindex 1292bbd2ef49..bbc0ec964430 100644\n--- a/sympy/printing/tests/test_rcode.py\n+++ b/sympy/printing/tests/test_rcode.py\n@@ -488,4 +488,4 @@ def test_MatrixElement_printing():\n     assert(rcode(3 * A[0, 0]) == \"3*A[0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert(rcode(F) == \"((-1)*B + A)[0]\")\n+    assert(rcode(F) == \"(-B + A)[0]\")\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 884c09d9413e..95e13e70f566 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -784,4 +784,12 @@ def test_MatrixElement_printing():\n     assert(str(3 * A[0, 0]) == \"3*A[0, 0]\")\n \n     F = C[0, 0].subs(C, A - B)\n-    assert str(F) == \"((-1)*B + A)[0, 0]\"\n+    assert str(F) == \"(-B + A)[0, 0]\"\n+\n+\n+def test_MatrixSymbol_printing():\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+\n+    assert str(A - A*B - B) == \"-B - A*B + A\"\n+    assert str(A*B - (A+B)) == \"-(A + B) + A*B\"\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/14248"}