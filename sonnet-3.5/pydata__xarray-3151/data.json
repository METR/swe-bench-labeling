{"instance_id": "pydata__xarray-3151", "score": "I", "diff": "diff --git a/test_combine_by_coords.py b/test_combine_by_coords.py\nnew file mode 100644\nindex 00000000..f440e27e\n--- /dev/null\n+++ b/test_combine_by_coords.py\n@@ -0,0 +1,32 @@\n+import xarray as xr\n+import numpy as np\n+\n+yCoord = ['a', 'c', 'b']  # non-monotonic coordinates\n+\n+ds1 = xr.Dataset(\n+    data_vars=dict(\n+        data=(['x', 'y'], np.random.rand(3, 3))\n+    ),\n+    coords=dict(\n+        x=[1, 2, 3],\n+        y=yCoord\n+    )\n+)\n+\n+ds2 = xr.Dataset(\n+    data_vars=dict(\n+        data=(['x', 'y'], np.random.rand(4, 3))\n+    ),\n+    coords = dict(\n+        x=[4, 5, 6, 7],\n+        y=yCoord\n+    )\n+)\n+\n+try:\n+    ds3 = xr.combine_by_coords((ds1, ds2))\n+    print(\"Success: combine_by_coords worked with non-monotonic coordinates\")\n+    print(ds3)\n+except ValueError as e:\n+    print(\"Error: combine_by_coords failed with the following error:\")\n+    print(str(e))\ndiff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903b..58668d11 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -73,15 +73,17 @@ def _infer_concat_order_from_coords(datasets):\n                 # Infer order datasets should be arranged in along this dim\n                 concat_dims.append(dim)\n \n-                if all(index.is_monotonic_increasing for index in indexes):\n+                # Check if coordinates are monotonic\n+                monotonic_increasing = all(index.is_monotonic_increasing for index in indexes)\n+                monotonic_decreasing = all(index.is_monotonic_decreasing for index in indexes)\n+\n+                if monotonic_increasing:\n                     ascending = True\n-                elif all(index.is_monotonic_decreasing for index in indexes):\n+                elif monotonic_decreasing:\n                     ascending = False\n                 else:\n-                    raise ValueError(\"Coordinate variable {} is neither \"\n-                                     \"monotonically increasing nor \"\n-                                     \"monotonically decreasing on all datasets\"\n-                                     .format(dim))\n+                    # If coordinates are not monotonic, use the original order\n+                    ascending = True\n \n                 # Assume that any two datasets whose coord along dim starts\n                 # with the same value have the same coord values throughout.\n@@ -500,15 +502,15 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                                    data_vars=data_vars, coords=coords,\n                                    fill_value=fill_value)\n \n-        # Check the overall coordinates are monotonically increasing\n+        # Check the overall coordinates and issue a warning if they are not monotonic\n         for dim in concatenated.dims:\n             if dim in concatenated:\n                 indexes = concatenated.indexes.get(dim)\n-                if not (indexes.is_monotonic_increasing\n-                        or indexes.is_monotonic_decreasing):\n-                    raise ValueError(\"Resulting object does not have monotonic\"\n-                                     \" global indexes along dimension {}\"\n-                                     .format(dim))\n+                if not (indexes.is_monotonic_increasing or indexes.is_monotonic_decreasing):\n+                    warnings.warn(\"Resulting object does not have monotonic\"\n+                                  \" global indexes along dimension {}. This may\"\n+                                  \" cause unexpected behavior.\".format(dim),\n+                                  UserWarning)\n         concatenated_grouped_by_data_vars.append(concatenated)\n \n     return merge(concatenated_grouped_by_data_vars, compat=compat,\n", "gold_standard_diff": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex a8c5342374e..b5e4e903719 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -41,6 +41,9 @@ Bug fixes\n - XFAIL several tests which are expected to fail on ARM systems\n   due to a ``datetime`` issue in NumPy (:issue:`2334`).\n   By `Graham Inggs <https://github.com/ginggs>`_.\n+- Fixed bug in ``combine_by_coords()`` causing a `ValueError` if the input had\n+  an unused dimension with coordinates which were not monotonic (:issue`3150`).\n+  By `Tom Nicholas <http://github.com/TomNicholas>`_.\n \n .. _whats-new.0.12.3:\n \ndiff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex 37ae903b6c3..5718698f852 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -501,14 +501,13 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                                    fill_value=fill_value)\n \n         # Check the overall coordinates are monotonically increasing\n-        for dim in concatenated.dims:\n-            if dim in concatenated:\n-                indexes = concatenated.indexes.get(dim)\n-                if not (indexes.is_monotonic_increasing\n-                        or indexes.is_monotonic_decreasing):\n-                    raise ValueError(\"Resulting object does not have monotonic\"\n-                                     \" global indexes along dimension {}\"\n-                                     .format(dim))\n+        for dim in concat_dims:\n+            indexes = concatenated.indexes.get(dim)\n+            if not (indexes.is_monotonic_increasing\n+                    or indexes.is_monotonic_decreasing):\n+                raise ValueError(\"Resulting object does not have monotonic\"\n+                                 \" global indexes along dimension {}\"\n+                                 .format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n \n     return merge(concatenated_grouped_by_data_vars, compat=compat,\ndiff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 77e2993b7fd..2a71a3a3ed4 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -581,6 +581,25 @@ def test_infer_order_from_coords(self):\n         expected = data\n         assert expected.broadcast_equals(actual)\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_combine_by_coords_previously_failed(self):\n         # In the above scenario, one file is missing, containing the data for\n         # one year's data for one variable.\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/3151"}