diff --git a/setup.py b/setup.py
index 2538952e3..94e1d8b32 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index d8cb75a5f..704b8e811 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -56,15 +56,18 @@ _SINGLETONS = ("None", "True", "False", "Ellipsis")
 
 def _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:
     """Convert type specification to reference in reST."""
+    if '|' in _type:
+        # Handle union types
+        types = [t.strip() for t in _type.split('|')]
+        converted_types = [_convert_type_spec(t, translations) for t in types]
+        return ' | '.join(converted_types)
+    
     if _type in translations:
         return translations[_type]
+    elif _type == 'None':
+        return ':obj:`None`'
     else:
-        if _type == 'None':
-            return ':obj:`None`'
-        else:
-            return ':class:`%s`' % _type
-
-    return _type
+        return f':class:`{_type}`'
 
 
 class GoogleDocstring:
@@ -424,7 +427,8 @@ class GoogleDocstring:
                 lines.append(':%s %s:' % (field_role, _name))
 
             if _type:
-                lines.append(':%s %s: %s' % (type_role, _name, _type))
+                converted_type = _convert_type_spec(_type)
+                lines.append(':%s %s: %s' % (type_role, _name, converted_type))
         return lines + ['']
 
     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
@@ -622,7 +626,8 @@ class GoogleDocstring:
         _type, _desc = self._consume_inline_attribute()
         lines = self._format_field('', '', _desc)
         if _type:
-            lines.extend(['', ':type: %s' % _type])
+            converted_type = _convert_type_spec(_type)
+            lines.extend(['', ':type: %s' % converted_type])
         return lines
 
     def _parse_attributes_section(self, section: str) -> List[str]:
diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py
index acf000178..dd04d5ca5 100644
--- a/tests/test_ext_napoleon_docstring.py
+++ b/tests/test_ext_napoleon_docstring.py
@@ -134,6 +134,16 @@ class InlineAttributeTest(BaseDocstringTest):
         :type: :class:`int`""")
         self.assertEqual(expected, actual)
 
+    def test_class_data_member_inline_union_type(self):
+        config = Config()
+        docstring = """bytes | str: data member description with union type"""
+        actual = str(GoogleDocstring(docstring, config=config, app=None,
+                     what='attribute', name='some_data', obj=0))
+        expected = dedent("""\
+        data member description with union type
+
+        :type: :class:`bytes` | :class:`str`""")
+        self.assertEqual(expected, actual)
 
 class GoogleDocstringTest(BaseDocstringTest):
     docstrings = [(
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
