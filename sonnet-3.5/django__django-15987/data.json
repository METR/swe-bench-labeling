{"instance_id": "django__django-15987", "score": "I", "diff": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..8216465656 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,7 +362,9 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+        # Convert Path objects to strings for duplicate checking\n+        fixture_dirs_str = [str(d) for d in fixture_dirs]\n+        if len(fixture_dirs_str) != len(set(fixture_dirs_str)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n", "gold_standard_diff": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f1316159..6fae25540748 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -367,7 +367,7 @@ def fixture_dirs(self):\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n-            if app_dir in fixture_dirs:\n+            if app_dir in [str(d) for d in fixture_dirs]:\n                 raise ImproperlyConfigured(\n                     \"'%s' is a default fixture directory for the '%s' app \"\n                     \"and cannot be listed in settings.FIXTURE_DIRS.\"\ndiff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 8c9228f67517..ff796feb94f6 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -569,6 +569,20 @@ def test_fixture_dirs_with_default_fixture_path(self):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n     @override_settings(\n         FIXTURE_DIRS=[\n             os.path.join(_cur_dir, \"fixtures_1\"),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15987"}