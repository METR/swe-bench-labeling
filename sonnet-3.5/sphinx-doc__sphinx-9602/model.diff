diff --git a/setup.py b/setup.py
index 4a1d5aeed..3faa58e79 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index af4b47bb0..ec550f900 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -66,6 +66,18 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
             else:
                 augment_descriptions_with_types(field_list, annotations[fullname])
 
+    # Add a check for Literal annotations
+    for field_list in field_lists:
+        for field in field_list:
+            field_name = field[0].astext()
+            if field_name.startswith('type '):
+                field_body = field[1]
+                if 'Literal' in field_body.astext():
+                    # Remove py:class role from Literal values
+                    for node in field_body.traverse(addnodes.pending_xref):
+                        if node['reftype'] == 'class' and node['reftarget'].startswith('Literal['):
+                            node.replace_self(nodes.Text(node['reftarget']))
+
 
 def insert_field_list(node: Element) -> nodes.field_list:
     field_list = nodes.field_list()
@@ -107,6 +119,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No
     for name, annotation in annotations.items():
         if name == 'return':
             continue
+        
+        # Handle Literal annotations
+        if 'Literal' in annotation:
+            literal_match = re.match(r'Literal\[(.*)\]', annotation)
+            if literal_match:
+                literal_value = literal_match.group(1)
+                annotation = f'Literal[{literal_value}]'
+            else:
+                annotation = 'Literal'
 
         arg = arguments.get(name, {})
         if not arg.get('type'):
@@ -155,21 +176,38 @@ def augment_descriptions_with_types(
             has_type.add('return')
 
     # Add 'type' for parameters with a description but no declared type.
-    for name in annotations:
+    for name, annotation in annotations.items():
         if name == 'return':
             continue
+        # Handle Literal annotations
+        if 'Literal' in annotation:
+            literal_match = re.match(r'Literal\[(.*)\]', annotation)
+            if literal_match:
+                literal_value = literal_match.group(1)
+                annotation = f'Literal[{literal_value}]'
+            else:
+                annotation = 'Literal'
         if name in has_description and name not in has_type:
             field = nodes.field()
             field += nodes.field_name('', 'type ' + name)
-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))
+            field += nodes.field_body('', nodes.paragraph('', annotation))
             node += field
 
     # Add 'rtype' if 'return' is present and 'rtype' isn't.
     if 'return' in annotations:
+        return_annotation = annotations['return']
+        # Handle Literal annotations for return type
+        if 'Literal' in return_annotation:
+            literal_match = re.match(r'Literal\[(.*)\]', return_annotation)
+            if literal_match:
+                literal_value = literal_match.group(1)
+                return_annotation = f'Literal[{literal_value}]'
+            else:
+                return_annotation = 'Literal'
         if 'return' in has_description and 'return' not in has_type:
             field = nodes.field()
             field += nodes.field_name('', 'rtype')
-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))
+            field += nodes.field_body('', nodes.paragraph('', return_annotation))
             node += field
 
 
diff --git a/tox.ini b/tox.ini
index b6a67fd85..483f2df92 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
