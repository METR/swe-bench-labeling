{"instance_id": "astropy__astropy-14182", "score": "I", "diff": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..79b4b07aab 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,20 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n \n     def write(self, lines):\n+        if self.header_rows:\n+            header = lines[0]\n+            data = lines[1:]\n+            new_header = []\n+            for row in self.header_rows:\n+                new_header.append(' '.join(f'{col:{width}}' for col, width in zip(row, self.col_widths)))\n+            separator = ' '.join('=' * width for width in self.col_widths)\n+            lines = [separator] + new_header + [separator] + data\n+\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        lines = [lines[0]] + lines + [lines[0]]\n         return lines\ndiff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py\nindex 993dacf512..86399eef10 100644\n--- a/astropy/io/ascii/ui.py\n+++ b/astropy/io/ascii/ui.py\n@@ -888,6 +888,8 @@ def get_writer(Writer=None, fast_writer=True, **kwargs):\n         List of names to exclude from output (applied after ``include_names``)\n     fast_writer : bool\n         Whether to use the fast Cython writer.\n+    header_rows : list\n+        List of header rows for RST writer (only applicable for RST writer)\n \n     Returns\n     -------\n@@ -898,7 +900,14 @@ def get_writer(Writer=None, fast_writer=True, **kwargs):\n         Writer = basic.Basic\n     if \"strip_whitespace\" not in kwargs:\n         kwargs[\"strip_whitespace\"] = True\n-    writer = core._get_writer(Writer, fast_writer, **kwargs)\n+\n+    # Handle header_rows for RST writer\n+    if 'header_rows' in kwargs and Writer == rst.RST:\n+        header_rows = kwargs.pop('header_rows')\n+        writer = core._get_writer(Writer, fast_writer, **kwargs)\n+        writer.header.header_rows = header_rows\n+    else:\n+        writer = core._get_writer(Writer, fast_writer, **kwargs)\n \n     # Handle the corner case of wanting to disable writing table comments for the\n     # commented_header format.  This format *requires* a string for `write_comment`\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 0d1ee66ab9..ec234472e2 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\n", "gold_standard_diff": "From 193f3123b0ddb5a20dfb30cca19c52259844df3a Mon Sep 17 00:00:00 2001\nFrom: Tom Aldcroft <taldcroft@gmail.com>\nDate: Fri, 16 Dec 2022 06:06:04 -0500\nSubject: [PATCH 1/2] Allow RST header rows to be specified via header_rows\n argument\n\n---\n astropy/io/ascii/rst.py                 | 41 +++++++++++++++++++------\n astropy/io/ascii/tests/test_rst.py      | 28 +++++++++++++++++\n docs/changes/io.ascii/14182.feature.rst |  4 +++\n docs/io/ascii/fixed_width_gallery.rst   |  6 ++--\n 4 files changed, 66 insertions(+), 13 deletions(-)\n create mode 100644 docs/changes/io.ascii/14182.feature.rst\n\ndiff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb7f..d765e369e38d 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -27,7 +27,6 @@ def get_fixedwidth_params(self, line):\n \n \n class SimpleRSTData(FixedWidthData):\n-    start_line = 3\n     end_line = -1\n     splitter_class = FixedWidthTwoLineDataSplitter\n \n@@ -39,12 +38,29 @@ class RST(FixedWidth):\n \n     Example::\n \n-        ==== ===== ======\n-        Col1  Col2  Col3\n-        ==== ===== ======\n-          1    2.3  Hello\n-          2    4.5  Worlds\n-        ==== ===== ======\n+      >>> from astropy.table import QTable\n+      >>> import astropy.units as u\n+      >>> import sys\n+      >>> tbl = QTable({\"wave\": [350, 950] * u.nm, \"response\": [0.7, 1.2] * u.count})\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\")\n+      ===== ========\n+       wave response\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n+\n+    Like other fixed-width formats, when writing a table you can provide ``header_rows``\n+    to specify a list of table rows to output as the header.  For example::\n+\n+      >>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=['name', 'unit'])\n+      ===== ========\n+       wave response\n+         nm       ct\n+      ===== ========\n+      350.0      0.7\n+      950.0      1.2\n+      ===== ========\n \n     Currently there is no support for reading tables which utilize continuation lines,\n     or for ones which define column spans through the use of an additional\n@@ -57,10 +73,15 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        idx = len(self.header.header_rows)\n+        lines = [lines[idx]] + lines + [lines[idx]]\n         return lines\n+\n+    def read(self, table):\n+        self.data.start_line = 2 + len(self.header.header_rows)\n+        return super().read(table)\ndiff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex 84d6fed401a6..852316ee32f3 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -2,7 +2,10 @@\n \n from io import StringIO\n \n+import astropy.units as u\n+import numpy as np\n from astropy.io import ascii\n+from astropy.table import QTable\n \n from .common import assert_almost_equal, assert_equal\n \n@@ -185,3 +188,28 @@ def test_write_normal():\n ==== ========= ==== ====\n \"\"\",\n     )\n+\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl['wave'].unit == u.nm\n+    assert tbl['response'].unit == u.ct\n+    assert tbl['wave'].dtype == np.float64\n+    assert tbl['response'].dtype == np.float32\n+    assert tbl['ints'].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\ndiff --git a/docs/changes/io.ascii/14182.feature.rst b/docs/changes/io.ascii/14182.feature.rst\nnew file mode 100644\nindex 000000000000..35c0d12ed075\n--- /dev/null\n+++ b/docs/changes/io.ascii/14182.feature.rst\n@@ -0,0 +1,4 @@\n+Add ability to read and write an RST (reStructuredText) ASCII table that\n+includes additional header rows specifying any or all of the column dtype, unit,\n+format, and description. This is available via the new ``header_rows`` keyword\n+argument.\ndiff --git a/docs/io/ascii/fixed_width_gallery.rst b/docs/io/ascii/fixed_width_gallery.rst\nindex b0e266cddec0..c6b3375bd7b7 100644\n--- a/docs/io/ascii/fixed_width_gallery.rst\n+++ b/docs/io/ascii/fixed_width_gallery.rst\n@@ -463,9 +463,9 @@ Fixed Width Two Line\n Custom Header Rows\n ==================\n \n-The ``fixed_width`` and ``fixed_width_two_line`` formats normally include a\n-single initial row with the column names in the header.  However, it is possible\n-to customize the column attributes which appear as header rows. The available\n+The ``fixed_width``, ``fixed_width_two_line``, and ``rst`` formats normally include a\n+single row with the column names in the header.  However, for these formats you can\n+customize the column attributes which appear as header rows. The available\n column attributes are ``name``, ``dtype``, ``format``, ``description`` and\n ``unit``.  This is done by listing the desired the header rows using the\n ``header_rows`` keyword argument.\n\nFrom 8b30eac848aa0ce951c4dd40fae276c7fb034e0f Mon Sep 17 00:00:00 2001\nFrom: \"pre-commit-ci[bot]\"\n <66853113+pre-commit-ci[bot]@users.noreply.github.com>\nDate: Fri, 16 Dec 2022 11:34:59 +0000\nSubject: [PATCH 2/2] [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n---\n astropy/io/ascii/tests/test_rst.py | 14 +++++++-------\n 1 file changed, 7 insertions(+), 7 deletions(-)\n\ndiff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex 852316ee32f3..8643ff9bdac3 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -2,8 +2,9 @@\n \n from io import StringIO\n \n-import astropy.units as u\n import numpy as np\n+\n+import astropy.units as u\n from astropy.io import ascii\n from astropy.table import QTable\n \n@@ -203,13 +204,12 @@ def test_rst_with_header_rows():\n         \"======= ======== ====\",\n     ]\n     tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n-    assert tbl['wave'].unit == u.nm\n-    assert tbl['response'].unit == u.ct\n-    assert tbl['wave'].dtype == np.float64\n-    assert tbl['response'].dtype == np.float32\n-    assert tbl['ints'].dtype == np.int8\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n \n     out = StringIO()\n     tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n     assert out.getvalue().splitlines() == lines\n-\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/14182"}