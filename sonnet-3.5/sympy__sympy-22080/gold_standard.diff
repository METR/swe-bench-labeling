From 82faea5dae02409a198d6315e0eae16c30879ae7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Ingvar=20Dahlgren?= <bjodah@gmail.com>
Date: Sun, 12 Sep 2021 09:10:44 +0200
Subject: [PATCH 1/3] Add precedence for Mod, fix unary minus printing (fixes
 gh-17737)

---
 sympy/printing/codeprinter.py          | 11 +++++++++--
 sympy/printing/precedence.py           |  1 +
 sympy/utilities/tests/test_lambdify.py | 10 +++++++++-
 3 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py
index ba0e746f5dac..4b300f4a2fed 100644
--- a/sympy/printing/codeprinter.py
+++ b/sympy/printing/codeprinter.py
@@ -9,7 +9,7 @@
 from sympy.core.mul import _keep_coeff
 from sympy.core.symbol import Symbol
 from sympy.printing.str import StrPrinter
-from sympy.printing.precedence import precedence
+from sympy.printing.precedence import precedence, PRECEDENCE
 
 
 class requires:
@@ -487,7 +487,14 @@ def _print_Mul(self, expr):
 
         a = a or [S.One]
 
-        a_str = [self.parenthesize(x, prec) for x in a]
+        if len(a) == 1 and sign == "-":
+            # Unary minus does not have a SymPy class, and hence there's no
+            # precedence weight associated with it, Python's unary minus has
+            # an operator precedence between multiplication and exponentiation,
+            # so we use this to compute a weight.
+            a_str = [self.parenthesize(a[0], 0.5*(PRECEDENCE["Pow"]+PRECEDENCE["Mul"]))]
+        else:
+            a_str = [self.parenthesize(x, prec) for x in a]
         b_str = [self.parenthesize(x, prec) for x in b]
 
         # To parenthesize Pow with exp = -1 and having more than one Symbol
diff --git a/sympy/printing/precedence.py b/sympy/printing/precedence.py
index 47ff463faf3f..bddc43048f1d 100644
--- a/sympy/printing/precedence.py
+++ b/sympy/printing/precedence.py
@@ -40,6 +40,7 @@
     "MatAdd": PRECEDENCE["Add"],
     "MatPow": PRECEDENCE["Pow"],
     "MatrixSolve": PRECEDENCE["Mul"],
+    "Mod": PRECEDENCE["Mul"],
     "TensAdd": PRECEDENCE["Add"],
     # As soon as `TensMul` is a subclass of `Mul`, remove this:
     "TensMul": PRECEDENCE["Mul"],
diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py
index e25986b4a00e..524e9d1220df 100644
--- a/sympy/utilities/tests/test_lambdify.py
+++ b/sympy/utilities/tests/test_lambdify.py
@@ -264,7 +264,15 @@ def test_issue_12984():
         warnings.simplefilter("ignore", RuntimeWarning)
         assert str(func_numexpr(-1, 24, 42)) == 'nan'
 
-#================== Test some functions ============================
+
+def test_empty_modules():
+    x, y = symbols('x y')
+    expr = -(x % y)
+
+    no_modules = lambdify([x, y], expr)
+    empty_modules = lambdify([x, y], expr, modules=[])
+    assert no_modules(3, 7) == empty_modules(3, 7)
+    assert no_modules(3, 7) == -3
 
 
 def test_exponentiation():

From a265281fc7bc29215cb5bc04ac92e3584798fac7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Ingvar=20Dahlgren?= <bjodah@gmail.com>
Date: Sun, 12 Sep 2021 11:56:24 +0200
Subject: [PATCH 2/3] update tests: ccode now output parenthesis for
 UnevaluatedExpr

---
 sympy/codegen/tests/test_rewriting.py | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/sympy/codegen/tests/test_rewriting.py b/sympy/codegen/tests/test_rewriting.py
index c8af626b7e50..32dfa8395e7b 100644
--- a/sympy/codegen/tests/test_rewriting.py
+++ b/sympy/codegen/tests/test_rewriting.py
@@ -266,10 +266,10 @@ def test_create_expand_pow_optimization():
     # gh issue 15335
     assert cc(x**(-4)) == '1.0/(x*x*x*x)'
     assert cc(x**(-5)) == 'pow(x, -5)'
-    assert cc(-x**4) == '-x*x*x*x'
-    assert cc(x**4 - x**2) == '-x*x + x*x*x*x'
+    assert cc(-x**4) == '-(x*x*x*x)'
+    assert cc(x**4 - x**2) == '-(x*x) + x*x*x*x'
     i = Symbol('i', integer=True)
-    assert cc(x**i - x**2) == 'pow(x, i) - x*x'
+    assert cc(x**i - x**2) == 'pow(x, i) - (x*x)'
     # gh issue 20753
     cc2 = lambda x: ccode(optimize(x, [create_expand_pow_optimization(
         4, base_req=lambda b: b.is_Function)]))

From d11dd0cf34ce16baa220f4aa4df9029173d3b3ce Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bj=C3=B6rn=20Ingvar=20Dahlgren?= <bjodah@gmail.com>
Date: Sun, 12 Sep 2021 22:16:13 +0200
Subject: [PATCH 3/3] Add test for pycode on -Mod(x,y) and Mod(-x, y)

---
 sympy/printing/tests/test_pycode.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py
index cf18825eb1b6..847ea41b12ff 100644
--- a/sympy/printing/tests/test_pycode.py
+++ b/sympy/printing/tests/test_pycode.py
@@ -30,6 +30,8 @@ def test_PythonCodePrinter():
 
     assert prntr.doprint(x**y) == 'x**y'
     assert prntr.doprint(Mod(x, 2)) == 'x % 2'
+    assert prntr.doprint(-Mod(x, y)) == '-(x % y)'
+    assert prntr.doprint(Mod(-x, y)) == '(-x) % y'
     assert prntr.doprint(And(x, y)) == 'x and y'
     assert prntr.doprint(Or(x, y)) == 'x or y'
     assert not prntr.module_imports
