{"instance_id": "sympy__sympy-20916", "score": "C", "diff": "diff --git a/run_convention_tests.py b/run_convention_tests.py\nnew file mode 100644\nindex 0000000000..840f6c8822\n--- /dev/null\n+++ b/run_convention_tests.py\n@@ -0,0 +1,39 @@\n+from sympy.printing.tests.test_conventions import test_super_sub, test_requires_partial\n+\n+# Run the tests\n+print(\"Running test_super_sub...\")\n+try:\n+    test_super_sub()\n+    print(\"\u2713 test_super_sub passed\")\n+except Exception as e:\n+    print(f\"\u2717 test_super_sub failed: {e}\")\n+\n+print(\"\\nRunning test_requires_partial...\")\n+try:\n+    test_requires_partial()\n+    print(\"\u2713 test_requires_partial passed\")\n+except Exception as e:\n+    print(f\"\u2717 test_requires_partial failed: {e}\")\n+\n+# Additional tests for Unicode support\n+from sympy.printing.conventions import split_super_sub\n+\n+print(\"\\nRunning additional Unicode tests...\")\n+try:\n+    # Test Unicode Greek letters\n+    assert split_super_sub(\"\u03c90\") == (\"\u03c9\", [], [\"0\"])\n+    assert split_super_sub(\"\u03b11\") == (\"\u03b1\", [], [\"1\"])\n+    assert split_super_sub(\"\u03b22\") == (\"\u03b2\", [], [\"2\"])\n+    assert split_super_sub(\"\u03a999\") == (\"\u03a9\", [], [\"99\"])\n+    \n+    # Test other Unicode characters\n+    assert split_super_sub(\"\u03b80\") == (\"\u03b8\", [], [\"0\"])\n+    assert split_super_sub(\"\u044f1\") == (\"\u044f\", [], [\"1\"])  # Cyrillic\n+    \n+    # Make sure it still works with ASCII\n+    assert split_super_sub(\"omega0\") == (\"omega\", [], [\"0\"])\n+    assert split_super_sub(\"x1\") == (\"x\", [], [\"1\"])\n+    \n+    print(\"\u2713 Unicode tests passed\")\n+except AssertionError as e:\n+    print(f\"\u2717 Unicode tests failed: {e}\")\ndiff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 9a3be6bbe9..994dfe4dd6 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -7,7 +7,9 @@\n from collections.abc import Iterable\n from sympy import Derivative\n \n-_name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')\n+# Match any Unicode letter characters followed by digits\n+# Using negative lookahead to ensure we don't match digits at the start\n+_name_with_digits_p = re.compile(r'^(\\D+?)(\\d+)$', re.UNICODE)\n \n \n def split_super_sub(text):\ndiff --git a/test_debug.py b/test_debug.py\nnew file mode 100644\nindex 0000000000..4eb5602f81\n--- /dev/null\n+++ b/test_debug.py\n@@ -0,0 +1,29 @@\n+from sympy import symbols\n+from sympy.printing.pretty import pretty\n+from sympy.printing.pretty.pretty_symbology import pretty_symbol, pretty_use_unicode\n+\n+# Enable unicode\n+pretty_use_unicode(True)\n+\n+# Test the pretty_symbol function directly\n+print(\"Direct pretty_symbol calls:\")\n+print(\"w0:\", repr(pretty_symbol('w0')))\n+print(\"omega0:\", repr(pretty_symbol('omega0')))\n+\n+# Check if Greek names are recognized properly\n+from sympy.printing.pretty.pretty_symbology import greek_unicode\n+print(\"\\nGreek unicode mapping for 'omega':\", greek_unicode.get('omega'))\n+\n+# Test with actual symbols\n+omega0 = symbols('omega0')\n+w0 = symbols('w0')\n+\n+# Check the symbol names\n+print(\"\\nSymbol names:\")\n+print(\"omega0.name:\", omega0.name)\n+print(\"w0.name:\", w0.name)\n+\n+# Test pretty printing\n+print(\"\\nPretty printing:\")\n+print(\"w0:\", pretty(w0, use_unicode=True))\n+print(\"omega0:\", pretty(omega0, use_unicode=True))\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..15eb45195b\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,41 @@\n+from sympy import symbols\n+from sympy.printing.pretty import pretty\n+from sympy.printing.pretty.pretty_symbology import pretty_use_unicode, pretty_symbol\n+from sympy.printing.conventions import split_super_sub, _name_with_digits_p\n+\n+pretty_use_unicode(False)  # ASCII mode\n+\n+# Test in ASCII mode\n+omega0 = symbols('omega0')\n+print(\"ASCII mode:\")\n+print(\"omega0:\", pretty(omega0))\n+\n+pretty_use_unicode(True)  # Unicode mode\n+\n+# Check the regex pattern\n+print(\"\\nChecking _name_with_digits_p pattern:\")\n+print(\"Pattern:\", _name_with_digits_p.pattern)\n+\n+# Test various symbol names\n+test_names = ['omega0', '\u03a90', '\u03c90', '\u03b1\u03b2\u03b3123', 'w0']\n+for name in test_names:\n+    match = _name_with_digits_p.match(name)\n+    print(f\"{name:10} matches: {bool(match)}\", end='')\n+    if match:\n+        print(f\" -> groups: {match.groups()}\")\n+    else:\n+        print()\n+\n+# Now let's modify the pattern to support Unicode letters\n+import re\n+# Create a pattern that supports Unicode letters\n+unicode_name_with_digits_p = re.compile(r'^(\\w+?)(\\d+)$', re.UNICODE)\n+\n+print(\"\\nChecking Unicode-aware pattern:\")\n+for name in test_names:\n+    match = unicode_name_with_digits_p.match(name)\n+    print(f\"{name:10} matches: {bool(match)}\", end='')\n+    if match:\n+        print(f\" -> groups: {match.groups()}\")\n+    else:\n+        print()\ndiff --git a/test_exact_issue.py b/test_exact_issue.py\nnew file mode 100644\nindex 0000000000..45b5cd689e\n--- /dev/null\n+++ b/test_exact_issue.py\n@@ -0,0 +1,23 @@\n+from sympy import symbols, Matrix, pprint\n+\n+# Create symbols exactly as shown in the issue\n+t0, t1, t2 = symbols('t_0 t_1 t_2')  # Using underscore for subscripts\n+w0 = symbols('w_0')\n+omega0 = symbols('omega_0')  # Using omega with underscore\n+\n+# Create matrices\n+matrix_w = Matrix([[-t0*w0, -t1*w0, -t2*w0]])\n+matrix_omega = Matrix([[-t0*omega0, -t1*omega0, -t2*omega0]])\n+\n+print(\"With w_0:\")\n+pprint(matrix_w, use_unicode=True)\n+\n+print(\"\\nWith omega_0:\")\n+pprint(matrix_omega, use_unicode=True)\n+\n+# Also test without explicit underscore\n+omega0_no_underscore = symbols('omega0')\n+matrix_omega_no_underscore = Matrix([[-t0*omega0_no_underscore, -t1*omega0_no_underscore, -t2*omega0_no_underscore]])\n+\n+print(\"\\nWith omega0 (no underscore):\")\n+pprint(matrix_omega_no_underscore, use_unicode=True)\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..21a02f0a11\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,38 @@\n+from sympy import symbols, Matrix, pprint\n+from sympy.printing.pretty import pretty\n+\n+# Test case for the issue - Greek letter omega with subscript\n+omega0 = symbols('omega0')\n+w0 = symbols('w0')\n+t0, t1, t2 = symbols('t0 t1 t2')\n+\n+# Create matrices with both regular and Greek letters\n+matrix_regular = Matrix([[-t0*w0, -t1*w0, -t2*w0]])\n+matrix_greek = Matrix([[-t0*omega0, -t1*omega0, -t2*omega0]])\n+\n+print(\"Regular letter w with subscript 0:\")\n+pprint(matrix_regular, use_unicode=True)\n+\n+print(\"\\nGreek letter omega with subscript 0:\")\n+pprint(matrix_greek, use_unicode=True)\n+\n+print(\"\\nDirect pretty print of omega0:\")\n+print(pretty(omega0, use_unicode=True))\n+\n+print(\"\\nDirect pretty print of w0:\")\n+print(pretty(w0, use_unicode=True))\n+\n+# Test with other Greek letters\n+alpha0 = symbols('alpha0')\n+beta1 = symbols('beta1')\n+gamma2 = symbols('gamma2')\n+\n+print(\"\\nOther Greek letters with subscripts:\")\n+print(\"alpha0:\", pretty(alpha0, use_unicode=True))\n+print(\"beta1:\", pretty(beta1, use_unicode=True))  \n+print(\"gamma2:\", pretty(gamma2, use_unicode=True))\n+\n+# Test expression\n+expr = t0*omega0 + t1*alpha0\n+print(\"\\nExpression with Greek letters:\")\n+pprint(expr, use_unicode=True)\ndiff --git a/test_regex_edge_cases.py b/test_regex_edge_cases.py\nnew file mode 100644\nindex 0000000000..009e94105c\n--- /dev/null\n+++ b/test_regex_edge_cases.py\n@@ -0,0 +1,53 @@\n+from sympy import symbols, pprint\n+from sympy.printing.conventions import split_super_sub\n+\n+# Test various edge cases with the new regex\n+test_cases = [\n+    # Standard cases\n+    'x0', 'y1', 'z99',\n+    # Greek letters\n+    'omega0', 'alpha1', 'beta2',\n+    # Unicode Greek letters\n+    '\u03c90', '\u03b11', '\u03b22', '\u03a999',\n+    # Mixed Unicode \n+    '\u03b1\u03b2\u03b3123',\n+    # With underscores\n+    'x_0', 'omega_1', '\u03c9_2',\n+    # With carets\n+    'x^2', 'y_1^2',\n+    # Special cases\n+    'x', 'y', 'omega', '\u03c9',  # No digits\n+    '123',  # Only digits (should not match)\n+    '_sub', '^sup',  # Starting with special chars\n+    # Other Unicode characters\n+    '\u03b80', '\u03c61', '\u03c82', '\u03933', '\u03944',\n+    # Cyrillic\n+    '\u044f0', '\u04361',\n+    # Complex cases\n+    'x_sub0', 'omega_sub0', '\u03c9_sub0'\n+]\n+\n+print(\"Testing split_super_sub with new regex:\")\n+print(\"-\" * 60)\n+for test in test_cases:\n+    try:\n+        result = split_super_sub(test)\n+        print(f\"{test:15} -> {result}\")\n+    except Exception as e:\n+        print(f\"{test:15} -> ERROR: {e}\")\n+\n+# Test with actual symbols\n+print(\"\\n\" + \"=\" * 60)\n+print(\"Testing pretty printing:\")\n+print(\"-\" * 60)\n+\n+# Select some test cases for pretty printing\n+pretty_test_cases = ['x0', 'omega0', '\u03c90', '\u03b11', '\u03b82', '\u03933']\n+\n+for name in pretty_test_cases:\n+    try:\n+        sym = symbols(name)\n+        print(f\"{name:10} -> \", end='')\n+        pprint(sym, use_unicode=True)\n+    except Exception as e:\n+        print(f\"{name:10} -> ERROR: {e}\")\ndiff --git a/test_split.py b/test_split.py\nnew file mode 100644\nindex 0000000000..ab2bc21386\n--- /dev/null\n+++ b/test_split.py\n@@ -0,0 +1,10 @@\n+from sympy.printing.conventions import split_super_sub\n+\n+# Test with regular letter\n+print(\"Testing 'w0':\", split_super_sub('w0'))\n+\n+# Test with Greek letter\n+print(\"Testing 'omega0':\", split_super_sub('omega0'))\n+\n+# Test with explicit subscript\n+print(\"Testing 'omega_0':\", split_super_sub('omega_0'))\ndiff --git a/test_unicode_symbols.py b/test_unicode_symbols.py\nnew file mode 100644\nindex 0000000000..e8191b57f4\n--- /dev/null\n+++ b/test_unicode_symbols.py\n@@ -0,0 +1,42 @@\n+from sympy import symbols, pprint, Matrix\n+from sympy.printing.pretty import pretty\n+\n+# Test creating a symbol with Greek Unicode character directly\n+try:\n+    # Some users might create symbols with Greek Unicode characters directly\n+    omega0_unicode = symbols('\u03c90')  # Using actual Greek omega character\n+    print(\"Symbol with Unicode Greek letter \u03c90:\")\n+    print(\"Symbol name:\", repr(omega0_unicode.name))\n+    print(\"Pretty print:\", pretty(omega0_unicode, use_unicode=True))\n+    \n+    # Test in a matrix\n+    t0 = symbols('t_0')\n+    matrix = Matrix([[-t0*omega0_unicode]])\n+    print(\"\\nIn matrix:\")\n+    pprint(matrix, use_unicode=True)\n+    \n+except Exception as e:\n+    print(\"Error:\", e)\n+\n+# Also test the case from the issue more carefully\n+print(\"\\n\" + \"=\"*50)\n+print(\"Reproducing issue pattern:\")\n+\n+# The issue shows this as \"Bad\":\n+# [ -t\u2080\u22c5\u03c90   -t\u2081\u22c5\u03c90   -t\u2082\u22c5\u03c90]\n+# Note that omega is shown as \u03c9 but 0 is not subscripted\n+\n+# Let's see if we can reproduce this\n+t0, t1, t2 = symbols('t_0 t_1 t_2')\n+# Using Unicode omega in symbol name\n+omega0_bad = symbols('\u03c90')\n+w0_good = symbols('w_0')\n+\n+matrix_bad = Matrix([[-t0*omega0_bad, -t1*omega0_bad, -t2*omega0_bad]])\n+matrix_good = Matrix([[-t0*w0_good, -t1*w0_good, -t2*w0_good]])\n+\n+print(\"\\nWith Unicode omega in symbol name (\u03c90):\")\n+pprint(matrix_bad, use_unicode=True)\n+\n+print(\"\\nWith ASCII w_0:\")\n+pprint(matrix_good, use_unicode=True)\ndiff --git a/test_variations.py b/test_variations.py\nnew file mode 100644\nindex 0000000000..47cef454da\n--- /dev/null\n+++ b/test_variations.py\n@@ -0,0 +1,38 @@\n+from sympy import symbols, pprint\n+from sympy.printing.pretty.pretty_symbology import pretty_symbol, pretty_use_unicode\n+from sympy.printing.conventions import split_super_sub\n+\n+pretty_use_unicode(True)\n+\n+# Test various naming patterns\n+patterns = [\n+    'omega0',     # Greek letter with digit\n+    'omega_0',    # Greek letter with underscore and digit\n+    'Omega0',     # Capital Greek letter with digit\n+    'alpha1',     # Another Greek letter\n+    'w0',         # Regular letter with digit\n+    'omega',      # Just Greek letter\n+]\n+\n+print(\"Testing split_super_sub:\")\n+for p in patterns:\n+    print(f\"{p:10} -> {split_super_sub(p)}\")\n+\n+print(\"\\nTesting pretty_symbol:\")\n+for p in patterns:\n+    print(f\"{p:10} -> {repr(pretty_symbol(p))}\")\n+\n+print(\"\\nTesting actual symbols:\")\n+for p in patterns:\n+    sym = symbols(p)\n+    print(f\"{p:10} -> {pprint(sym, use_unicode=True)}\", end='')\n+    print()\n+\n+# Check a specific case mentioned in the issue\n+print(\"\\nChecking issue pattern:\")\n+# The issue shows omega0 rendering as \u03c90 (without subscript)\n+# Let's check if there's a context where this happens\n+import re\n+pattern = re.compile(r'^([a-zA-Z]+)([0-9]+)$')\n+print(f\"Pattern matches 'omega0': {bool(pattern.match('omega0'))}\")\n+print(f\"Pattern matches '\u03c90': {bool(pattern.match('\u03c90'))}\")\n", "gold_standard_diff": "From 8a168ffa00bef8f19e80b0867cc06745dd2bb843 Mon Sep 17 00:00:00 2001\nFrom: Constantin Mateescu <costica1234@me.com>\nDate: Sat, 6 Feb 2021 07:41:39 +0200\nSubject: [PATCH 1/2] Fixed regular expression in conventions.py to match\n Unicode characters.\n\n---\n sympy/printing/conventions.py            | 4 ++--\n sympy/printing/tests/test_conventions.py | 8 ++++++++\n sympy/testing/quality_unicode.py         | 1 +\n 3 files changed, 11 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 9a3be6bbe936..68986693df60 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -7,7 +7,7 @@\n from collections.abc import Iterable\n from sympy import Derivative\n \n-_name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')\n+_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)([0-9]+)$', re.U)\n \n \n def split_super_sub(text):\n@@ -60,7 +60,7 @@ def split_super_sub(text):\n         else:\n             raise RuntimeError(\"This should never happen.\")\n \n-    # make a little exception when a name ends with digits, i.e. treat them\n+    # Make a little exception when a name ends with digits, i.e. treat them\n     # as a subscript too.\n     m = _name_with_digits_p.match(name)\n     if m:\ndiff --git a/sympy/printing/tests/test_conventions.py b/sympy/printing/tests/test_conventions.py\nindex 87689aa8fce4..a8090556cd6d 100644\n--- a/sympy/printing/tests/test_conventions.py\n+++ b/sympy/printing/tests/test_conventions.py\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n from sympy import symbols, Derivative, Integral, exp, cos, oo, Function\n from sympy.functions.special.bessel import besselj\n from sympy.functions.special.polynomials import legendre\n@@ -29,6 +31,12 @@ def test_super_sub():\n     assert split_super_sub(\"x__a__b__c__d\") == (\"x\", [\"a\", \"b\", \"c\", \"d\"], [])\n     assert split_super_sub(\"alpha_11\") == (\"alpha\", [], [\"11\"])\n     assert split_super_sub(\"alpha_11_11\") == (\"alpha\", [], [\"11\", \"11\"])\n+    assert split_super_sub(\"w1\") == (\"w\", [], [\"1\"])\n+    assert split_super_sub(\"w11\") == (\"w\", [], [\"11\"])\n+    assert split_super_sub(\"w1^a\") == (\"w\", [\"a\"], [\"1\"])\n+    assert split_super_sub(\"\u03c91\") == (\"\u03c9\", [], [\"1\"])\n+    assert split_super_sub(\"\u03c911\") == (\"\u03c9\", [], [\"11\"])\n+    assert split_super_sub(\"\u03c91^a\") == (\"\u03c9\", [\"a\"], [\"1\"])\n     assert split_super_sub(\"\") == (\"\", [], [])\n \n \ndiff --git a/sympy/testing/quality_unicode.py b/sympy/testing/quality_unicode.py\nindex 755837ebb50a..6adf22ad52f4 100644\n--- a/sympy/testing/quality_unicode.py\n+++ b/sympy/testing/quality_unicode.py\n@@ -44,6 +44,7 @@\n     r'*/sympy/vector/tests/test_printing.py',\n     r'*/sympy/parsing/tests/test_sympy_parser.py',\n     r'*/sympy/printing/pretty/tests/test_pretty.py',\n+    r'*/sympy/printing/tests/test_conventions.py',\n     r'*/sympy/printing/tests/test_preview.py',\n     r'*/liealgebras/type_g.py',\n     r'*/liealgebras/weyl_group.py',\n\nFrom cf8a148b80048c0a53af05ae075424b2240339c5 Mon Sep 17 00:00:00 2001\nFrom: Constantin Mateescu <costica1234@me.com>\nDate: Sat, 13 Feb 2021 09:54:34 +0200\nSubject: [PATCH 2/2] Replaced [0-9] with \\d to cover Unicode digits.\n\n---\n sympy/printing/conventions.py            | 2 +-\n sympy/printing/tests/test_conventions.py | 5 +++++\n 2 files changed, 6 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 68986693df60..dbaaaf3f027f 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -7,7 +7,7 @@\n from collections.abc import Iterable\n from sympy import Derivative\n \n-_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)([0-9]+)$', re.U)\n+_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)(\\d+)$', re.U)\n \n \n def split_super_sub(text):\ndiff --git a/sympy/printing/tests/test_conventions.py b/sympy/printing/tests/test_conventions.py\nindex a8090556cd6d..7990a04b1e62 100644\n--- a/sympy/printing/tests/test_conventions.py\n+++ b/sympy/printing/tests/test_conventions.py\n@@ -32,11 +32,16 @@ def test_super_sub():\n     assert split_super_sub(\"alpha_11\") == (\"alpha\", [], [\"11\"])\n     assert split_super_sub(\"alpha_11_11\") == (\"alpha\", [], [\"11\", \"11\"])\n     assert split_super_sub(\"w1\") == (\"w\", [], [\"1\"])\n+    assert split_super_sub(\"w\ud835\udfd9\") == (\"w\", [], [\"\ud835\udfd9\"])\n     assert split_super_sub(\"w11\") == (\"w\", [], [\"11\"])\n+    assert split_super_sub(\"w\ud835\udfd9\ud835\udfd9\") == (\"w\", [], [\"\ud835\udfd9\ud835\udfd9\"])\n+    assert split_super_sub(\"w\ud835\udfd92\ud835\udfd9\") == (\"w\", [], [\"\ud835\udfd92\ud835\udfd9\"])\n     assert split_super_sub(\"w1^a\") == (\"w\", [\"a\"], [\"1\"])\n     assert split_super_sub(\"\u03c91\") == (\"\u03c9\", [], [\"1\"])\n     assert split_super_sub(\"\u03c911\") == (\"\u03c9\", [], [\"11\"])\n     assert split_super_sub(\"\u03c91^a\") == (\"\u03c9\", [\"a\"], [\"1\"])\n+    assert split_super_sub(\"\u03c9\ud835\udfd9^\u03b1\") == (\"\u03c9\", [\"\u03b1\"], [\"\ud835\udfd9\"])\n+    assert split_super_sub(\"\u03c9\ud835\udfd92^3\u03b1\") == (\"\u03c9\", [\"3\u03b1\"], [\"\ud835\udfd92\"])\n     assert split_super_sub(\"\") == (\"\", [], [])\n \n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/20916"}