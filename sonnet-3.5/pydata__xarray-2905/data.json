{"instance_id": "pydata__xarray-2905", "score": "I", "diff": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 45553eb9..8ceeb0d9 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -855,7 +855,12 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n+            if hasattr(value, 'values') and not isinstance(value, (np.ndarray, pd.Index)):\n+                # If the value has a 'values' property but is not a numpy array or pandas Index,\n+                # use the object itself instead of its 'values' attribute\n+                value = np.array(value, dtype=object)\n+            else:\n+                value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError(\n                     \"shape mismatch: value array of shape %s could not be \"\n", "gold_standard_diff": "From c770858c3c2fdc5215d33a9bb5697a130cacfea5 Mon Sep 17 00:00:00 2001\nFrom: Yunus Sevinchan <yunussevinchan@gmail.com>\nDate: Wed, 17 Apr 2019 23:33:52 +0200\nSubject: [PATCH 1/8] In as_compatible_data, check explicitly for nested\n self-described types\n\nThis change was prompted by the fact that `getattr(data, 'values', data)`\naffected any kind of data with a `values` attribute, which is not the\ndesired behaviour at that point.\n\nThis also extends tests to assert that custom objects with such an\nattribute are not attempted to be converted\n---\n xarray/core/variable.py       |  3 ++-\n xarray/tests/test_variable.py | 11 ++++++++++-\n 2 files changed, 12 insertions(+), 2 deletions(-)\n\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 96c6b7bd59b..244892714c1 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -171,7 +171,8 @@ def as_compatible_data(data, fastpath=False):\n         data = np.timedelta64(getattr(data, 'value', data), 'ns')\n \n     # we don't want nested self-described arrays\n-    data = getattr(data, 'values', data)\n+    if isinstance(data, (pd.Series, pd.Index, pd.DataFrame)):\n+        data = data.values\n \n     if isinstance(data, np.ma.MaskedArray):\n         mask = np.ma.getmaskarray(data)\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex eec8d268026..ee208e32e07 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2018,13 +2018,22 @@ def __init__(self, array):\n         class CustomIndexable(CustomArray, indexing.ExplicitlyIndexed):\n             pass\n \n+        # Type with data stored in values attribute\n+        class CustomWithValuesAttr:\n+            def __init__(self, array):\n+                self.values = array\n+\n         array = CustomArray(np.arange(3))\n         orig = Variable(dims=('x'), data=array, attrs={'foo': 'bar'})\n         assert isinstance(orig._data, np.ndarray)  # should not be CustomArray\n \n         array = CustomIndexable(np.arange(3))\n         orig = Variable(dims=('x'), data=array, attrs={'foo': 'bar'})\n-        assert isinstance(orig._data, CustomIndexable)\n+        assert isinstance(orig._data, CustomIndexable)        \n+\n+        array = CustomWithValuesAttr(np.arange(3))\n+        orig = Variable(dims=('x'), data=array, attrs={'foo': 'bar'})\n+        assert isinstance(orig._data, CustomWithValuesAttr)\n \n \n def test_raise_no_warning_for_nan_in_binary_ops():\n\nFrom 69ed5e5a418ab2b5de2fb6d43080371d62e5bc89 Mon Sep 17 00:00:00 2001\nFrom: Yunus Sevinchan <yunussevinchan@gmail.com>\nDate: Wed, 17 Apr 2019 23:49:50 +0200\nSubject: [PATCH 2/8] Add whats-new entry\n\n---\n doc/whats-new.rst | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex e9bdc710029..d5492c0aa51 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -28,6 +28,10 @@ Bug fixes\n   By `Mayeul d'Avezac <https://github.com/mdavezac>`_.\n - Return correct count for scalar datetime64 arrays (:issue:`2770`)\n   By `Dan Nowacki <https://github.com/dnowacki-usgs>`_.\n+- Use specific type checks in\n+  :py:func:`~xarray.core.variable.as_compatible_data` instead of blanket\n+  access to ``values`` attribute (:issue:`2097`)\n+  By `Yunus Sevinchan <https://github.com/blusquare>`_.\n \n .. _whats-new.0.12.1:\n \n\nFrom b890edea09c532a8dc8fcad56260f91799de161d Mon Sep 17 00:00:00 2001\nFrom: Yunus Sevinchan <yunussevinchan@gmail.com>\nDate: Wed, 17 Apr 2019 23:54:35 +0200\nSubject: [PATCH 3/8] Remove trailing whitespace\n\n---\n xarray/tests/test_variable.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex ee208e32e07..b7938567391 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2029,7 +2029,7 @@ def __init__(self, array):\n \n         array = CustomIndexable(np.arange(3))\n         orig = Variable(dims=('x'), data=array, attrs={'foo': 'bar'})\n-        assert isinstance(orig._data, CustomIndexable)        \n+        assert isinstance(orig._data, CustomIndexable)\n \n         array = CustomWithValuesAttr(np.arange(3))\n         orig = Variable(dims=('x'), data=array, attrs={'foo': 'bar'})\n\nFrom 7905c6f418ac4e32478dfed339272d8a27f23626 Mon Sep 17 00:00:00 2001\nFrom: Yunus Sevinchan <yunussevinchan@gmail.com>\nDate: Wed, 17 Apr 2019 23:33:52 +0200\nSubject: [PATCH 4/8] In as_compatible_data, check explicitly for nested\n self-described types\n\nThis change was prompted by the fact that `getattr(data, 'values', data)`\naffected any kind of data with a `values` attribute, which is not the\ndesired behaviour at that point.\n\nThis also extends tests to assert that custom objects with such an\nattribute are not attempted to be converted\n---\n xarray/core/variable.py       | 3 ++-\n xarray/tests/test_variable.py | 9 +++++++++\n 2 files changed, 11 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 041c303dd3a..ab5cda38783 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -199,7 +199,8 @@ def as_compatible_data(data, fastpath=False):\n         data = np.timedelta64(getattr(data, \"value\", data), \"ns\")\n \n     # we don't want nested self-described arrays\n-    data = getattr(data, \"values\", data)\n+    if isinstance(data, (pd.Series, pd.Index, pd.DataFrame)):\n+        data = data.values\n \n     if isinstance(data, np.ma.MaskedArray):\n         mask = np.ma.getmaskarray(data)\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 245dc1acc42..4982cccda26 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2129,6 +2129,11 @@ def __init__(self, array):\n         class CustomIndexable(CustomArray, indexing.ExplicitlyIndexed):\n             pass\n \n+        # Type with data stored in values attribute\n+        class CustomWithValuesAttr:\n+            def __init__(self, array):\n+                self.values = array\n+\n         array = CustomArray(np.arange(3))\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, np.ndarray)  # should not be CustomArray\n@@ -2137,6 +2142,10 @@ class CustomIndexable(CustomArray, indexing.ExplicitlyIndexed):\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+        array = CustomWithValuesAttr(np.arange(3))\n+        orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n+        assert isinstance(orig._data, CustomWithValuesAttr)\n+\n \n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n\nFrom 2dc7f9f9a92368b35f4e06b06f8e80623046ac3d Mon Sep 17 00:00:00 2001\nFrom: dcherian <deepak@cherian.net>\nDate: Sat, 30 Nov 2019 15:49:04 -0500\nSubject: [PATCH 5/8] whats-new\n\n---\n doc/whats-new.rst | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 884c3cef91c..8024eaafc61 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -32,7 +32,10 @@ New Features\n \n Bug fixes\n ~~~~~~~~~\n-\n+- Use specific type checks in\n+  :py:func:`~xarray.core.variable.as_compatible_data` instead of blanket\n+  access to ``values`` attribute (:issue:`2097`)\n+  By `Yunus Sevinchan <https://github.com/blusquare>`_.\n \n Documentation\n ~~~~~~~~~~~~~\n\nFrom 9d7eaacc11baef837c280bdd920cf9dd7e114806 Mon Sep 17 00:00:00 2001\nFrom: dcherian <deepak@cherian.net>\nDate: Sat, 30 Nov 2019 17:58:15 -0500\nSubject: [PATCH 6/8] Fix test.\n\n---\n xarray/tests/test_variable.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 4982cccda26..9a401455c9b 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2143,8 +2143,8 @@ def __init__(self, array):\n         assert isinstance(orig._data, CustomIndexable)\n \n         array = CustomWithValuesAttr(np.arange(3))\n-        orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n-        assert isinstance(orig._data, CustomWithValuesAttr)\n+        orig = Variable(dims=(\"x\"), data=[array], attrs={\"foo\": \"bar\"})\n+        assert isinstance(orig._data.item(), CustomWithValuesAttr)\n \n \n def test_raise_no_warning_for_nan_in_binary_ops():\n\nFrom 55ce662477a089b405bdbc4d90cbb4746c7d0469 Mon Sep 17 00:00:00 2001\nFrom: Yunus Sevinchan <yunussevinchan@gmail.com>\nDate: Sun, 1 Dec 2019 16:57:47 +0100\nSubject: [PATCH 7/8] Update @blsqr github URL in whats-new\n\n---\n doc/whats-new.rst | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex d9a2abe1d84..691107545fd 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -35,7 +35,7 @@ Bug fixes\n - Use specific type checks in\n   :py:func:`~xarray.core.variable.as_compatible_data` instead of blanket\n   access to ``values`` attribute (:issue:`2097`)\n-  By `Yunus Sevinchan <https://github.com/blusquare>`_.\n+  By `Yunus Sevinchan <https://github.com/blsqr>`_.\n \n Documentation\n ~~~~~~~~~~~~~\n\nFrom ad71bb2da711434989f872531c220c3bbe9374d5 Mon Sep 17 00:00:00 2001\nFrom: Keewis <keewis@posteo.de>\nDate: Wed, 17 Feb 2021 23:47:35 +0100\nSubject: [PATCH 8/8] actually check that values is not extracted\n\n---\n xarray/tests/test_variable.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 57afb13f7c6..0d4c8662d21 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2314,7 +2314,7 @@ def __init__(self, array):\n         assert isinstance(orig._data, CustomIndexable)\n \n         array = CustomWithValuesAttr(np.arange(3))\n-        orig = Variable(dims=(\"x\"), data=[array], attrs={\"foo\": \"bar\"})\n+        orig = Variable(dims=(), data=array)\n         assert isinstance(orig._data.item(), CustomWithValuesAttr)\n \n \n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/2905"}