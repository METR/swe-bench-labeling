{"instance_id": "sphinx-doc__sphinx-10435", "score": "I", "diff": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8..94facf320 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -1709,10 +1709,16 @@ class LaTeXTranslator(SphinxTranslator):\n             node.astext(), lang, opts=opts, location=node)\n         # TODO: Use nowrap option once LaTeX formatter supports it\n         # https://github.com/pygments/pygments/pull/1343\n+        # Remove the newline after \\begin{Verbatim}[...] to avoid inline code whitespace\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]' + '\\n',\n+                                r'\\sphinxcode{\\sphinxupquote{')\n+        # If no newline after the pattern, replace without it\n         hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n                                 r'\\sphinxcode{\\sphinxupquote{')\n-        # get consistent trailer\n-        hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n+        # get consistent trailer - strip newline before \\end{Verbatim}\n+        hlcode = hlcode.rstrip()\n+        if hlcode.endswith(r'\\end{Verbatim}'):\n+            hlcode = hlcode[:-14]  # strip \\end{Verbatim}\n         self.body.append(hlcode)\n         self.body.append('}}')\n         raise nodes.SkipNode\ndiff --git a/test_inline_code.py b/test_inline_code.py\nnew file mode 100644\nindex 000000000..c1b26065a\n--- /dev/null\n+++ b/test_inline_code.py\n@@ -0,0 +1,63 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to reproduce the inline code highlighting issue.\"\"\"\n+\n+import tempfile\n+import os\n+import shutil\n+from sphinx.application import Sphinx\n+\n+# Create a temporary directory\n+tmpdir = tempfile.mkdtemp()\n+srcdir = os.path.join(tmpdir, 'source')\n+outdir = os.path.join(tmpdir, 'build')\n+os.makedirs(srcdir)\n+\n+# Create conf.py\n+conf_content = \"\"\"\n+project = 'Test'\n+extensions = []\n+master_doc = 'index'\n+exclude_patterns = []\n+html_theme = 'alabaster'\n+\"\"\"\n+\n+with open(os.path.join(srcdir, 'conf.py'), 'w') as f:\n+    f.write(conf_content)\n+\n+# Create index.rst with the test content\n+index_content = \"\"\"\n+.. role:: python(code)\n+   :language: python\n+   :class: highlight\n+\n+Inline :python:`def foo(1 + 2 + None + \"abc\"): pass` code block\n+\n+.. code-block:: python\n+\n+   def foo(1 + 2 + None + \"abc\"): pass\n+\"\"\"\n+\n+with open(os.path.join(srcdir, 'index.rst'), 'w') as f:\n+    f.write(index_content)\n+\n+# Build LaTeX\n+app = Sphinx(srcdir, srcdir, outdir, outdir + '/.doctrees', 'latex')\n+app.build()\n+\n+# Read the generated LaTeX file\n+latex_file = os.path.join(outdir, 'test.tex')\n+with open(latex_file, 'r') as f:\n+    content = f.read()\n+\n+# Look for the inline code part\n+import re\n+pattern = r'Inline\\\\sphinxcode\\{\\\\sphinxupquote\\{([^}]+)\\}\\}'\n+match = re.search(pattern, content)\n+if match:\n+    print(\"Found inline code:\")\n+    print(repr(match.group(1)))\n+    print(\"\\nFull match:\")\n+    print(repr(match.group(0)))\n+\n+# Clean up\n+shutil.rmtree(tmpdir)\ndiff --git a/test_inline_code_fix.py b/test_inline_code_fix.py\nnew file mode 100644\nindex 000000000..6fe2a0bf4\n--- /dev/null\n+++ b/test_inline_code_fix.py\n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python\n+\"\"\"Test to verify the inline code highlighting fix.\"\"\"\n+\n+import tempfile\n+import os\n+import shutil\n+from sphinx.application import Sphinx\n+import re\n+\n+def test_inline_code_no_whitespace():\n+    # Create a temporary directory\n+    tmpdir = tempfile.mkdtemp()\n+    srcdir = os.path.join(tmpdir, 'source')\n+    outdir = os.path.join(tmpdir, 'build')\n+    os.makedirs(srcdir)\n+\n+    # Create conf.py\n+    conf_content = \"\"\"\n+project = 'Test'\n+extensions = []\n+master_doc = 'index'\n+exclude_patterns = []\n+html_theme = 'alabaster'\n+\"\"\"\n+\n+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:\n+        f.write(conf_content)\n+\n+    # Create index.rst with the test content\n+    index_content = \"\"\"\n+.. role:: python(code)\n+   :language: python\n+   :class: highlight\n+\n+Inline :python:`def foo(1 + 2 + None + \"abc\"): pass` code block\n+\n+.. code-block:: python\n+\n+   def foo(1 + 2 + None + \"abc\"): pass\n+\"\"\"\n+\n+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:\n+        f.write(index_content)\n+\n+    # Build LaTeX\n+    app = Sphinx(srcdir, srcdir, outdir, outdir + '/.doctrees', 'latex')\n+    app.build()\n+\n+    # Read the generated LaTeX file\n+    latex_file = os.path.join(outdir, 'test.tex')\n+    with open(latex_file, 'r') as f:\n+        content = f.read()\n+\n+    # Check that inline code doesn't have newlines after \\sphinxcode{\\sphinxupquote{\n+    # Look for the specific pattern\n+    lines = content.split('\\n')\n+    found_inline = False\n+    \n+    for i, line in enumerate(lines):\n+        if 'Inline' in line and r'\\sphinxcode{\\sphinxupquote{' in line:\n+            found_inline = True\n+            # Check if the highlighted code is on the same line\n+            if r'\\PYG{k}{def}' in line:\n+                print(\"SUCCESS: Inline code is on the same line as the command\")\n+                print(f\"Line {i}: {repr(line)}\")\n+                # Make sure no newline before the code\n+                assert not line.endswith(r'\\sphinxcode{\\sphinxupquote{'), \\\n+                    \"Code should not be on a separate line from \\\\sphinxcode{\\\\sphinxupquote{\"\n+            else:\n+                # Check next line\n+                if i + 1 < len(lines) and r'\\PYG{k}{def}' in lines[i+1]:\n+                    print(\"FAIL: Inline code is on the next line (whitespace issue)\")\n+                    print(f\"Line {i}: {repr(line)}\")\n+                    print(f\"Line {i+1}: {repr(lines[i+1])}\")\n+                    assert False, \"Inline code has unwanted newline after \\\\sphinxcode{\\\\sphinxupquote{\"\n+                    \n+    assert found_inline, \"Could not find inline code in LaTeX output\"\n+    print(\"Test passed! Inline code has no extra whitespace.\")\n+\n+    # Clean up\n+    shutil.rmtree(tmpdir)\n+\n+if __name__ == '__main__':\n+    test_inline_code_no_whitespace()\ndiff --git a/tox.ini b/tox.ini\nindex 105a02597..90ada0821 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -29,7 +29,7 @@ setenv =\n     PYTHONWARNINGS = all\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:du-latest]\n commands =\n", "gold_standard_diff": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex e0c7d56f8ec..f275100e9d7 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -1710,11 +1710,11 @@ def visit_literal(self, node: Element) -> None:\n         # TODO: Use nowrap option once LaTeX formatter supports it\n         # https://github.com/pygments/pygments/pull/1343\n         hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n-                                r'\\sphinxcode{\\sphinxupquote{')\n+                                r'\\sphinxcode{\\sphinxupquote{%')\n         # get consistent trailer\n-        hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n+        hlcode = hlcode.rstrip()[:-15]  # strip \\n\\end{Verbatim}\n         self.body.append(hlcode)\n-        self.body.append('}}')\n+        self.body.append('%' + CR + '}}')\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\ndiff --git a/tests/test_build_latex.py b/tests/test_build_latex.py\nindex dd0db8aeffd..709dce05db4 100644\n--- a/tests/test_build_latex.py\n+++ b/tests/test_build_latex.py\n@@ -1623,7 +1623,7 @@ def test_latex_code_role(app):\n         r'\\PYG{p}{)}'\n         r'\\PYG{p}{:} '\n         r'\\PYG{k}{pass}')\n-    assert (r'Inline \\sphinxcode{\\sphinxupquote{' + '\\n' +\n-            common_content + '\\n}} code block') in content\n+    assert (r'Inline \\sphinxcode{\\sphinxupquote{%' + '\\n' +\n+            common_content + '%\\n}} code block') in content\n     assert (r'\\begin{sphinxVerbatim}[commandchars=\\\\\\{\\}]' +\n             '\\n' + common_content + '\\n' + r'\\end{sphinxVerbatim}') in content\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/10435"}