{"instance_id": "matplotlib__matplotlib-20826", "score": "I", "diff": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 802fd3c997..1d632589d3 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1192,6 +1192,10 @@ class _AxesBase(martist.Artist):\n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n \n+        # Store shared axes information\n+        sharex = self._sharex\n+        sharey = self._sharey\n+\n         self.xaxis.clear()\n         self.yaxis.clear()\n \n@@ -1201,16 +1205,16 @@ class _AxesBase(martist.Artist):\n         self.ignore_existing_data_limits = True\n         self.callbacks = cbook.CallbackRegistry()\n \n-        if self._sharex is not None:\n-            self.sharex(self._sharex)\n+        if sharex is not None:\n+            self.sharex(sharex)\n         else:\n             self.xaxis._set_scale('linear')\n             try:\n                 self.set_xlim(0, 1)\n             except TypeError:\n                 pass\n-        if self._sharey is not None:\n-            self.sharey(self._sharey)\n+        if sharey is not None:\n+            self.sharey(sharey)\n         else:\n             self.yaxis._set_scale('linear')\n             try:\n@@ -1218,18 +1222,31 @@ class _AxesBase(martist.Artist):\n             except TypeError:\n                 pass\n \n+        # Restore shared axes properties\n+        if sharex is not None:\n+            self._sharex = sharex\n+            self.xaxis.set_visible(xaxis_visible)\n+        if sharey is not None:\n+            self._sharey = sharey\n+            self.yaxis.set_visible(yaxis_visible)\n+\n         # update the minor locator for x and y axis based on rcParams\n         if mpl.rcParams['xtick.minor.visible']:\n             self.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n         if mpl.rcParams['ytick.minor.visible']:\n             self.yaxis.set_minor_locator(mticker.AutoMinorLocator())\n \n-        if self._sharex is None:\n+        if sharex is None:\n             self._autoscaleXon = True\n-        if self._sharey is None:\n+        if sharey is None:\n             self._autoscaleYon = True\n         self._xmargin = mpl.rcParams['axes.xmargin']\n         self._ymargin = mpl.rcParams['axes.ymargin']\n+\n+        # Restore visibility states\n+        self.patch.set_visible(patch_visible)\n+        self.xaxis.set_visible(xaxis_visible)\n+        self.yaxis.set_visible(yaxis_visible)\n         self._tight = None\n         self._use_sticky_edges = True\n         self._update_transScale()  # needed?\n", "gold_standard_diff": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex 887cf97ef140..7feca94bd9d8 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -806,8 +806,13 @@ def clear(self):\n         # Clear the callback registry for this axis, or it may \"leak\"\n         self.callbacks = cbook.CallbackRegistry()\n \n-        self._reset_major_tick_kw()\n-        self._reset_minor_tick_kw()\n+        # whether the grids are on\n+        self._major_tick_kw['gridOn'] = (\n+                mpl.rcParams['axes.grid'] and\n+                mpl.rcParams['axes.grid.which'] in ('both', 'major'))\n+        self._minor_tick_kw['gridOn'] = (\n+                mpl.rcParams['axes.grid'] and\n+                mpl.rcParams['axes.grid.which'] in ('both', 'minor'))\n         self.reset_ticks()\n \n         self.converter = None\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex db7050f732f3..aad699d35594 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,21 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/20826"}