From 1061f5243646b4c9b8a758f8a36c9e2ccdded1cf Mon Sep 17 00:00:00 2001
From: Nick Pope <nick@nickpope.me.uk>
Date: Mon, 10 May 2021 21:32:10 +0100
Subject: [PATCH] Fixed #32732 -- Removed usage of deprecated 'db' and 'passwd'
 connection options in MySQL backend.

The 'db' and 'passwd' connection options have been deprecated, use
'database' and 'password' instead (available since mysqlclient >= 1.3.8).

This also allows the 'database' option in DATABASES['OPTIONS'] on MySQL.
---
 django/db/backends/mysql/base.py   |  4 +--
 django/db/backends/mysql/client.py |  9 ++++--
 docs/releases/3.2.3.txt            |  2 +-
 tests/dbshell/test_mysql.py        | 50 +++++++++++++++++-------------
 4 files changed, 38 insertions(+), 27 deletions(-)

diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py
index 2c62182d31c6..8b28a6048568 100644
--- a/django/db/backends/mysql/base.py
+++ b/django/db/backends/mysql/base.py
@@ -200,9 +200,9 @@ def get_connection_params(self):
         if settings_dict['USER']:
             kwargs['user'] = settings_dict['USER']
         if settings_dict['NAME']:
-            kwargs['db'] = settings_dict['NAME']
+            kwargs['database'] = settings_dict['NAME']
         if settings_dict['PASSWORD']:
-            kwargs['passwd'] = settings_dict['PASSWORD']
+            kwargs['password'] = settings_dict['PASSWORD']
         if settings_dict['HOST'].startswith('/'):
             kwargs['unix_socket'] = settings_dict['HOST']
         elif settings_dict['HOST']:
diff --git a/django/db/backends/mysql/client.py b/django/db/backends/mysql/client.py
index 95442a32b06f..7cbe314afea2 100644
--- a/django/db/backends/mysql/client.py
+++ b/django/db/backends/mysql/client.py
@@ -8,7 +8,10 @@ class DatabaseClient(BaseDatabaseClient):
     def settings_to_cmd_args_env(cls, settings_dict, parameters):
         args = [cls.executable_name]
         env = None
-        db = settings_dict['OPTIONS'].get('db', settings_dict['NAME'])
+        database = settings_dict['OPTIONS'].get(
+            'database',
+            settings_dict['OPTIONS'].get('db', settings_dict['NAME']),
+        )
         user = settings_dict['OPTIONS'].get('user', settings_dict['USER'])
         password = settings_dict['OPTIONS'].get(
             'password',
@@ -51,7 +54,7 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):
             args += ["--ssl-key=%s" % client_key]
         if charset:
             args += ['--default-character-set=%s' % charset]
-        if db:
-            args += [db]
+        if database:
+            args += [database]
         args.extend(parameters)
         return args, env
diff --git a/docs/releases/3.2.3.txt b/docs/releases/3.2.3.txt
index 9b1d9521d143..14a143b203d5 100644
--- a/docs/releases/3.2.3.txt
+++ b/docs/releases/3.2.3.txt
@@ -9,4 +9,4 @@ Django 3.2.3 fixes several bugs in 3.2.2.
 Bugfixes
 ========
 
-* ...
+* Prepared for ``mysqlclient`` > 2.0.3 support (:ticket:`32732`).
diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py
index c3ecc6503bec..b1e8e8a5c981 100644
--- a/tests/dbshell/test_mysql.py
+++ b/tests/dbshell/test_mysql.py
@@ -50,41 +50,49 @@ def test_options_override_settings_proper_values(self):
             'optiondbname',
         ]
         expected_env = {'MYSQL_PWD': 'optionpassword'}
-        self.assertEqual(
-            self.settings_to_cmd_args_env({
-                'NAME': 'settingdbname',
-                'USER': 'settinguser',
-                'PASSWORD': 'settingpassword',
-                'HOST': 'settinghost',
-                'PORT': settings_port,
-                'OPTIONS': {
-                    'db': 'optiondbname',
-                    'user': 'optionuser',
-                    'passwd': 'optionpassword',
-                    'host': 'optionhost',
-                    'port': options_port,
-                },
-            }),
-            (expected_args, expected_env),
-        )
+        for keys in [('database', 'password'), ('db', 'passwd')]:
+            with self.subTest(keys=keys):
+                database, password = keys
+                self.assertEqual(
+                    self.settings_to_cmd_args_env({
+                        'NAME': 'settingdbname',
+                        'USER': 'settinguser',
+                        'PASSWORD': 'settingpassword',
+                        'HOST': 'settinghost',
+                        'PORT': settings_port,
+                        'OPTIONS': {
+                            database: 'optiondbname',
+                            'user': 'optionuser',
+                            password: 'optionpassword',
+                            'host': 'optionhost',
+                            'port': options_port,
+                        },
+                    }),
+                    (expected_args, expected_env),
+                )
 
-    def test_options_password(self):
+    def test_options_non_deprecated_keys_preferred(self):
         expected_args = [
             'mysql',
             '--user=someuser',
             '--host=somehost',
             '--port=444',
-            'somedbname',
+            'optiondbname',
         ]
         expected_env = {'MYSQL_PWD': 'optionpassword'}
         self.assertEqual(
             self.settings_to_cmd_args_env({
-                'NAME': 'somedbname',
+                'NAME': 'settingdbname',
                 'USER': 'someuser',
                 'PASSWORD': 'settingpassword',
                 'HOST': 'somehost',
                 'PORT': 444,
-                'OPTIONS': {'password': 'optionpassword'},
+                'OPTIONS': {
+                    'database': 'optiondbname',
+                    'db': 'deprecatedoptiondbname',
+                    'password': 'optionpassword',
+                    'passwd': 'deprecatedoptionpassword',
+                },
             }),
             (expected_args, expected_env),
         )
