{"instance_id": "sphinx-doc__sphinx-8548", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 8d40de1a8..03f325278 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b365..6cb57dd3b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -756,6 +756,36 @@ class Documenter:\n                     # keep documented attributes\n                     keep = True\n                 isattr = True\n+            elif self.options.inherited_members and inspect.isclass(self.object):\n+                # Check if the attribute is documented in any base class\n+                for cls in self.object.__mro__[1:]:  # Skip the current class\n+                    if cls.__module__ in ('__builtin__', 'builtins'):\n+                        # Skip built-in classes\n+                        continue\n+                    try:\n+                        analyzer = ModuleAnalyzer.for_module(cls.__module__)\n+                        analyzer.analyze()\n+                        base_attr_docs = analyzer.find_attr_docs()\n+                    except (PycodeError, Exception):\n+                        # Failed to analyze the module, skip\n+                        base_attr_docs = {}\n+                    \n+                    if hasattr(cls, '__qualname__'):\n+                        base_namespace = cls.__qualname__\n+                    else:\n+                        base_namespace = cls.__name__\n+                    \n+                    if (base_namespace, membername) in base_attr_docs:\n+                        if want_all and isprivate:\n+                            if self.options.private_members is None:\n+                                keep = False\n+                            else:\n+                                keep = membername in self.options.private_members\n+                        else:\n+                            # keep documented attributes from base classes\n+                            keep = True\n+                        isattr = True\n+                        break\n             elif want_all and isprivate:\n                 if has_doc or self.options.undoc_members:\n                     if self.options.private_members is None:\ndiff --git a/test.rst b/test.rst\nnew file mode 100644\nindex 000000000..e846bcdcc\n--- /dev/null\n+++ b/test.rst\n@@ -0,0 +1,23 @@\n+Test Documentation\n+==================\n+\n+.. automodule:: test_inherited_attrs\n+   :members:\n+   :inherited-members:\n+   :show-inheritance:\n+\n+Base Class\n+----------\n+\n+.. autoclass:: test_inherited_attrs.Base\n+   :members:\n+   :inherited-members:\n+   :show-inheritance:\n+\n+Derived Class\n+-------------\n+\n+.. autoclass:: test_inherited_attrs.Derived\n+   :members:\n+   :inherited-members:\n+   :show-inheritance:\ndiff --git a/test_conf.py b/test_conf.py\nnew file mode 100644\nindex 000000000..6fb2746af\n--- /dev/null\n+++ b/test_conf.py\n@@ -0,0 +1,8 @@\n+\"\"\"Sphinx configuration for testing.\"\"\"\n+\n+extensions = ['sphinx.ext.autodoc']\n+autodoc_default_options = {\n+    'members': True,\n+    'inherited-members': True,\n+    'show-inheritance': True,\n+}\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 000000000..e10ab2dc1\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,119 @@\n+#!/usr/bin/env python\n+\"\"\"Test that the fix works for inherited documented attributes.\"\"\"\n+\n+import os\n+import sys\n+import tempfile\n+import shutil\n+\n+# Create test modules in a temporary directory\n+test_dir = tempfile.mkdtemp()\n+sys.path.insert(0, test_dir)\n+\n+# Create base module\n+base_module = '''\n+\"\"\"Base module with documented attributes.\"\"\"\n+\n+class Base:\n+    \"\"\"Base class with documented attributes.\"\"\"\n+    \n+    #: This is a documented base attribute\n+    base_attr = \"base value\"\n+    \n+    #: Another documented base attribute\n+    another_base_attr = 42\n+    \n+    def __init__(self):\n+        \"\"\"Initialize base.\"\"\"\n+        pass\n+'''\n+\n+with open(os.path.join(test_dir, 'base_module.py'), 'w') as f:\n+    f.write(base_module)\n+\n+# Create derived module\n+derived_module = '''\n+\"\"\"Derived module.\"\"\"\n+\n+from base_module import Base\n+\n+class Derived(Base):\n+    \"\"\"Derived class that should inherit base_attr documentation.\"\"\"\n+    \n+    #: This is a documented derived attribute\n+    derived_attr = \"derived value\"\n+    \n+    def __init__(self):\n+        \"\"\"Initialize derived.\"\"\"\n+        super().__init__()\n+'''\n+\n+with open(os.path.join(test_dir, 'derived_module.py'), 'w') as f:\n+    f.write(derived_module)\n+\n+# Test autodoc functionality\n+from sphinx.ext.autodoc import ModuleLevelDocumenter, ClassDocumenter\n+from sphinx.testing.fixtures import make_app\n+from sphinx.testing.path import path\n+from docutils.statemachine import StringList\n+\n+# Create a minimal Sphinx app for testing\n+confdir = path(test_dir)\n+outdir = path(test_dir) / '_build'\n+\n+app = make_app('dummy', srcdir=test_dir, confdir=confdir, \n+                confoverrides={'extensions': ['sphinx.ext.autodoc']})\n+\n+app.env.temp_data['docname'] = 'test'\n+\n+# Test ClassDocumenter with inherited-members\n+options = {\n+    'members': True,\n+    'inherited-members': True,\n+    'show-inheritance': True,\n+}\n+\n+# Document the Derived class\n+documenter = ClassDocumenter(None, 'derived_module.Derived', options=options)\n+documenter.env = app.env\n+documenter.generate()\n+\n+# Check if base_attr is documented\n+members = []\n+if hasattr(documenter, 'filter_members'):\n+    from sphinx.ext.autodoc.importer import get_object_members\n+    \n+    documenter.parse_name()\n+    documenter.import_object()\n+    \n+    members_check_module, all_members = documenter.get_object_members(True)\n+    filtered = documenter.filter_members(all_members, True)\n+    \n+    for name, obj, isattr in filtered:\n+        members.append((name, isattr))\n+        print(f\"Member: {name}, isattr: {isattr}\")\n+\n+# Check results\n+print(\"\\nFound members:\")\n+for name, isattr in members:\n+    print(f\"  {name} (attribute: {isattr})\")\n+\n+# Verify that base_attr is found and marked as attribute\n+base_attr_found = any(name == 'base_attr' and isattr for name, isattr in members)\n+another_base_attr_found = any(name == 'another_base_attr' and isattr for name, isattr in members)\n+derived_attr_found = any(name == 'derived_attr' and isattr for name, isattr in members)\n+\n+print(f\"\\nResults:\")\n+print(f\"  base_attr found as attribute: {base_attr_found}\")\n+print(f\"  another_base_attr found as attribute: {another_base_attr_found}\")\n+print(f\"  derived_attr found as attribute: {derived_attr_found}\")\n+\n+# Cleanup\n+shutil.rmtree(test_dir)\n+\n+if base_attr_found and another_base_attr_found and derived_attr_found:\n+    print(\"\\nSUCCESS: Inherited documented attributes are now recognized!\")\n+    sys.exit(0)\n+else:\n+    print(\"\\nFAILED: Inherited documented attributes are not recognized\")\n+    sys.exit(1)\ndiff --git a/test_inherited_attrs.py b/test_inherited_attrs.py\nnew file mode 100644\nindex 000000000..f4ba42d84\n--- /dev/null\n+++ b/test_inherited_attrs.py\n@@ -0,0 +1,30 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to reproduce the inherited-members issue with attributes.\"\"\"\n+\n+class Base:\n+    \"\"\"Base class with documented attributes.\"\"\"\n+    \n+    #: This is a documented base attribute\n+    base_attr = \"base value\"\n+    \n+    def __init__(self):\n+        \"\"\"Initialize base.\"\"\"\n+        pass\n+\n+\n+class Derived(Base):\n+    \"\"\"Derived class that should inherit base_attr documentation.\"\"\"\n+    \n+    #: This is a documented derived attribute\n+    derived_attr = \"derived value\"\n+    \n+    def __init__(self):\n+        \"\"\"Initialize derived.\"\"\"\n+        super().__init__()\n+\n+\n+if __name__ == \"__main__\":\n+    # Test that we can access the attributes\n+    d = Derived()\n+    print(f\"base_attr: {d.base_attr}\")\n+    print(f\"derived_attr: {d.derived_attr}\")\ndiff --git a/test_simple.py b/test_simple.py\nnew file mode 100644\nindex 000000000..3531688ed\n--- /dev/null\n+++ b/test_simple.py\n@@ -0,0 +1,117 @@\n+#!/usr/bin/env python\n+\"\"\"Simple test that the fix works for inherited documented attributes.\"\"\"\n+\n+import os\n+import sys\n+import tempfile\n+import shutil\n+\n+# Create test modules in a temporary directory\n+test_dir = tempfile.mkdtemp()\n+sys.path.insert(0, test_dir)\n+\n+# Create base module\n+base_module = '''\n+\"\"\"Base module with documented attributes.\"\"\"\n+\n+class Base:\n+    \"\"\"Base class with documented attributes.\"\"\"\n+    \n+    #: This is a documented base attribute\n+    base_attr = \"base value\"\n+    \n+    #: Another documented base attribute  \n+    another_base_attr = 42\n+    \n+    def __init__(self):\n+        \"\"\"Initialize base.\"\"\"\n+        pass\n+'''\n+\n+with open(os.path.join(test_dir, 'base_module.py'), 'w') as f:\n+    f.write(base_module)\n+\n+# Create derived module\n+derived_module = '''\n+\"\"\"Derived module.\"\"\"\n+\n+from base_module import Base\n+\n+class Derived(Base):\n+    \"\"\"Derived class that should inherit base_attr documentation.\"\"\"\n+    \n+    #: This is a documented derived attribute\n+    derived_attr = \"derived value\"\n+    \n+    def __init__(self):\n+        \"\"\"Initialize derived.\"\"\"\n+        super().__init__()\n+'''\n+\n+with open(os.path.join(test_dir, 'derived_module.py'), 'w') as f:\n+    f.write(derived_module)\n+\n+# Test by importing and checking analyzer\n+from sphinx.pycode import ModuleAnalyzer, PycodeError\n+from sphinx.ext.autodoc.importer import get_object_members\n+\n+# First check that base module attributes are documented\n+try:\n+    base_analyzer = ModuleAnalyzer.for_module('base_module')\n+    base_analyzer.analyze()\n+    base_attr_docs = base_analyzer.find_attr_docs()\n+    print(\"Base module attr_docs:\")\n+    for key, value in base_attr_docs.items():\n+        print(f\"  {key}: {value}\")\n+except Exception as e:\n+    print(f\"Error analyzing base module: {e}\")\n+\n+# Import the Derived class\n+import derived_module\n+\n+# Get members\n+members = get_object_members(derived_module.Derived, ['Derived'], lambda obj, name: getattr(obj, name, None), None)\n+\n+print(\"\\nDerived class members:\")\n+for name, member in members.items():\n+    print(f\"  {name}: {member}\")\n+\n+# Check if inherited members would be detected with the fix\n+# This simulates what filter_members does\n+print(\"\\nChecking inherited documented attributes:\")\n+\n+# For the Derived class\n+namespace = 'Derived'\n+for member_name in ['base_attr', 'another_base_attr', 'derived_attr']:\n+    print(f\"\\nChecking {member_name}:\")\n+    \n+    # Check in current class namespace (won't find base_attr)\n+    key = (namespace, member_name)\n+    \n+    # Simulate checking base classes\n+    for cls in derived_module.Derived.__mro__[1:]:\n+        if cls.__module__ in ('__builtin__', 'builtins'):\n+            continue\n+            \n+        print(f\"  Checking in {cls.__module__}.{cls.__name__}\")\n+        try:\n+            analyzer = ModuleAnalyzer.for_module(cls.__module__)\n+            analyzer.analyze()\n+            base_attr_docs = analyzer.find_attr_docs()\n+            \n+            if hasattr(cls, '__qualname__'):\n+                base_namespace = cls.__qualname__\n+            else:\n+                base_namespace = cls.__name__\n+                \n+            base_key = (base_namespace, member_name)\n+            if base_key in base_attr_docs:\n+                print(f\"    Found documented attribute: {base_key}\")\n+                break\n+        except Exception as e:\n+            print(f\"    Error: {e}\")\n+\n+# Cleanup\n+shutil.rmtree(test_dir)\n+\n+print(\"\\nTest completed successfully - the fix should work!\")\ndiff --git a/tox.ini b/tox.ini\nindex dbb705a3a..9f4fc3a32 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex b4dbf1ef7d7..327dc5e43ee 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -80,6 +80,8 @@ Bugs fixed\n * #8067: autodoc: A typehint for the instance variable having type_comment on\n   super class is not displayed\n * #8545: autodoc: a __slots__ attribute is not documented even having docstring\n+* #741: autodoc: inherited-members doesn't work for instance attributes on super\n+  class\n * #8477: autosummary: non utf-8 reST files are generated when template contains\n   multibyte characters\n * #8501: autosummary: summary extraction splits text after \"el at.\" unexpectedly\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b365b4..a23547a6169 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1584,7 +1584,7 @@ def add_directive_header(self, sig: str) -> None:\n                 self.add_line('   ' + _('Bases: %s') % ', '.join(bases), sourcename)\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n-        members = get_class_members(self.object, self.objpath, self.get_attr, self.analyzer)\n+        members = get_class_members(self.object, self.objpath, self.get_attr)\n         if not want_all:\n             if not self.options.members:\n                 return False, []  # type: ignore\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex d6e73d36abc..1c5ea979e60 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -14,7 +14,7 @@\n from typing import Any, Callable, Dict, List, Mapping, NamedTuple, Optional, Tuple\n \n from sphinx.deprecation import RemovedInSphinx40Warning, deprecated_alias\n-from sphinx.pycode import ModuleAnalyzer\n+from sphinx.pycode import ModuleAnalyzer, PycodeError\n from sphinx.util import logging\n from sphinx.util.inspect import (getannotations, getmro, getslots, isclass, isenumclass,\n                                  safe_getattr)\n@@ -251,8 +251,8 @@ def __init__(self, cls: Any, name: str, value: Any, docstring: Optional[str] = N\n         self.docstring = docstring\n \n \n-def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n-                      analyzer: ModuleAnalyzer = None) -> Dict[str, ClassAttribute]:\n+def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n+                      ) -> Dict[str, ClassAttribute]:\n     \"\"\"Get members and attributes of target class.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n \n@@ -297,23 +297,31 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         except AttributeError:\n             continue\n \n-    # annotation only member (ex. attr: int)\n-    for cls in getmro(subject):\n-        try:\n-            for name in getannotations(cls):\n-                name = unmangle(cls, name)\n-                if name and name not in members:\n-                    members[name] = ClassAttribute(cls, name, INSTANCEATTR)\n-        except AttributeError:\n-            pass\n-\n-    if analyzer:\n-        # append instance attributes (cf. self.attr1) if analyzer knows\n-        namespace = '.'.join(objpath)\n-        for (ns, name), docstring in analyzer.attr_docs.items():\n-            if namespace == ns and name not in members:\n-                members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n-                                               '\\n'.join(docstring))\n+    try:\n+        for cls in getmro(subject):\n+            # annotation only member (ex. attr: int)\n+            try:\n+                for name in getannotations(cls):\n+                    name = unmangle(cls, name)\n+                    if name and name not in members:\n+                        members[name] = ClassAttribute(cls, name, INSTANCEATTR)\n+            except AttributeError:\n+                pass\n+\n+            # append instance attributes (cf. self.attr1) if analyzer knows\n+            try:\n+                modname = safe_getattr(cls, '__module__')\n+                qualname = safe_getattr(cls, '__qualname__')\n+                analyzer = ModuleAnalyzer.for_module(modname)\n+                analyzer.analyze()\n+                for (ns, name), docstring in analyzer.attr_docs.items():\n+                    if ns == qualname and name not in members:\n+                        members[name] = ClassAttribute(cls, name, INSTANCEATTR,\n+                                                       '\\n'.join(docstring))\n+            except (AttributeError, PycodeError):\n+                pass\n+    except AttributeError:\n+        pass\n \n     return members\n \ndiff --git a/tests/roots/test-ext-autodoc/target/instance_variable.py b/tests/roots/test-ext-autodoc/target/instance_variable.py\nnew file mode 100644\nindex 00000000000..ae86d1edb1e\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/instance_variable.py\n@@ -0,0 +1,10 @@\n+class Foo:\n+    def __init__(self):\n+        self.attr1 = None  #: docstring foo\n+        self.attr2 = None  #: docstring foo\n+\n+\n+class Bar(Foo):\n+    def __init__(self):\n+        self.attr2 = None  #: docstring bar\n+        self.attr3 = None  #: docstring bar\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex c36305de34c..6130f233a47 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -51,6 +51,61 @@ def test_classes(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_instance_variable(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_instance_variable(app):\n+    options = {'members': True,\n+               'inherited-members': True}\n+    actual = do_autodoc(app, 'class', 'target.instance_variable.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.instance_variable',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring foo',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr3',\n+        '      :module: target.instance_variable',\n+        '',\n+        '      docstring bar',\n+        '',\n+    ]\n+\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8548"}