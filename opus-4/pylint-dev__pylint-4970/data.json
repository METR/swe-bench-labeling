{"instance_id": "pylint-dev__pylint-4970", "score": "I", "diff": "diff --git a/.pylintrc b/.pylintrc\nnew file mode 100644\nindex 000000000..2b7dcccaf\n--- /dev/null\n+++ b/.pylintrc\n@@ -0,0 +1,2 @@\n+[SIMILARITIES]\n+min-similarity-lines=0\ndiff --git a/test_direct_similar.py b/test_direct_similar.py\nnew file mode 100644\nindex 000000000..809fff9c8\n--- /dev/null\n+++ b/test_direct_similar.py\n@@ -0,0 +1,52 @@\n+\"\"\"Test the Similar class directly\"\"\"\n+import sys\n+import os\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+from pylint.checkers.similar import Similar\n+from io import StringIO\n+\n+# Test code with duplicates\n+code1 = '''def func1():\n+    x = 1\n+    y = 2\n+    z = 3\n+    return x + y + z\n+'''\n+\n+code2 = '''def func2():\n+    x = 1\n+    y = 2\n+    z = 3\n+    return x + y + z\n+'''\n+\n+# Test with min_lines=4\n+print(\"Testing with min_lines=4:\")\n+sim = Similar(min_lines=4)\n+sim.append_stream(\"code1.py\", StringIO(code1))\n+sim.append_stream(\"code2.py\", StringIO(code2))\n+sims = sim._compute_sims()\n+print(f\"Found {len(sims)} similarities\")\n+for num, couples in sims:\n+    print(f\"  {num} similar lines in {len(couples)} files\")\n+\n+# Test with min_lines=0\n+print(\"\\nTesting with min_lines=0:\")\n+sim = Similar(min_lines=0)\n+sim.append_stream(\"code1.py\", StringIO(code1))\n+sim.append_stream(\"code2.py\", StringIO(code2))\n+sims = sim._compute_sims()\n+print(f\"Found {len(sims)} similarities\")\n+for num, couples in sims:\n+    print(f\"  {num} similar lines in {len(couples)} files\")\n+\n+# Test with min_lines=1\n+print(\"\\nTesting with min_lines=1:\")\n+sim = Similar(min_lines=1)\n+sim.append_stream(\"code1.py\", StringIO(code1))\n+sim.append_stream(\"code2.py\", StringIO(code2))\n+sims = sim._compute_sims()\n+print(f\"Found {len(sims)} similarities\")\n+for num, couples in sims:\n+    print(f\"  {num} similar lines in {len(couples)} files\")\ndiff --git a/test_min_lines_zero.py b/test_min_lines_zero.py\nnew file mode 100644\nindex 000000000..2214d033d\n--- /dev/null\n+++ b/test_min_lines_zero.py\n@@ -0,0 +1,70 @@\n+\"\"\"Test that min-similarity-lines=0 works\"\"\"\n+import subprocess\n+import sys\n+import tempfile\n+import os\n+\n+# Create test files with duplicate code\n+test_file1 = '''\"\"\"Test file 1\"\"\"\n+def func1():\n+    x = 1\n+    y = 2\n+    z = 3\n+    return x + y + z\n+\n+def func2():\n+    x = 1\n+    y = 2\n+    z = 3\n+    return x + y + z\n+'''\n+\n+test_file2 = '''\"\"\"Test file 2\"\"\"\n+def func3():\n+    x = 1\n+    y = 2\n+    z = 3\n+    return x + y + z\n+'''\n+\n+# Test with min-similarity-lines=4 (default)\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    # Create test files\n+    with open(os.path.join(tmpdir, 'test1.py'), 'w') as f:\n+        f.write(test_file1)\n+    with open(os.path.join(tmpdir, 'test2.py'), 'w') as f:\n+        f.write(test_file2)\n+    \n+    # Create pylintrc with min-similarity-lines=4\n+    with open(os.path.join(tmpdir, '.pylintrc'), 'w') as f:\n+        f.write('[SIMILARITIES]\\nmin-similarity-lines=4\\n')\n+    \n+    # Run pylint\n+    result = subprocess.run(\n+        [sys.executable, '-m', 'pylint', 'test1.py', 'test2.py', '--disable=all', '--enable=duplicate-code'],\n+        cwd=tmpdir,\n+        capture_output=True,\n+        text=True\n+    )\n+    \n+    print(\"Test with min-similarity-lines=4:\")\n+    print(\"STDOUT:\", result.stdout)\n+    print(\"STDERR:\", result.stderr)\n+    print(\"Has R0801:\", 'R0801' in result.stdout)\n+    print()\n+    \n+    # Now test with min-similarity-lines=0\n+    with open(os.path.join(tmpdir, '.pylintrc'), 'w') as f:\n+        f.write('[SIMILARITIES]\\nmin-similarity-lines=0\\n')\n+    \n+    result = subprocess.run(\n+        [sys.executable, '-m', 'pylint', 'test1.py', 'test2.py', '--disable=all', '--enable=duplicate-code'],\n+        cwd=tmpdir,\n+        capture_output=True,\n+        text=True\n+    )\n+    \n+    print(\"Test with min-similarity-lines=0:\")\n+    print(\"STDOUT:\", result.stdout)\n+    print(\"STDERR:\", result.stderr)\n+    print(\"Has R0801:\", 'R0801' in result.stdout)\ndiff --git a/test_similar.py b/test_similar.py\nnew file mode 100644\nindex 000000000..30dd10023\n--- /dev/null\n+++ b/test_similar.py\n@@ -0,0 +1,9 @@\n+\"\"\"Test script to verify min-similarity-lines behavior\"\"\"\n+\n+def hello():\n+    print(\"Hello\")\n+    return 1\n+\n+def world():\n+    print(\"World\")\n+    return 2\ndiff --git a/test_similar2.py b/test_similar2.py\nnew file mode 100644\nindex 000000000..c5a2c7b8b\n--- /dev/null\n+++ b/test_similar2.py\n@@ -0,0 +1,19 @@\n+\"\"\"Test script to verify min-similarity-lines behavior\"\"\"\n+\n+def hello():\n+    print(\"Hello\")\n+    print(\"Hello again\")\n+    print(\"And again\")\n+    print(\"Once more\")\n+    return 1\n+\n+def hello2():\n+    print(\"Hello\")\n+    print(\"Hello again\")\n+    print(\"And again\")\n+    print(\"Once more\")\n+    return 1\n+\n+def world():\n+    print(\"World\")\n+    return 2\n", "gold_standard_diff": "From c81eecff6ff1f515f8d645bae52d63022c4da884 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Dani=C3=ABl=20van=20Noord?=\n <13665637+DanielNoord@users.noreply.github.com>\nDate: Sun, 5 Sep 2021 21:43:24 +0200\nSubject: [PATCH 1/3] Make ``min-similarity-lines == 0`` stop similarity check\n This makes it so that setting ``min-similarity-lines`` to zero exit the\n similarity code checker with a successful exit. This closes #4901\n\n---\n ChangeLog                          | 4 ++++\n doc/whatsnew/2.11.rst              | 4 ++++\n pylint/checkers/similar.py         | 2 ++\n tests/checkers/unittest_similar.py | 8 ++++++++\n 4 files changed, 18 insertions(+)\n\ndiff --git a/ChangeLog b/ChangeLog\nindex ee1b82af53..818e08af1a 100644\n--- a/ChangeLog\n+++ b/ChangeLog\n@@ -63,6 +63,10 @@ Release date: TBA\n \n   Closes #4907\n \n+* Setting ``min-similarity-lines`` to 0 now makes the similarty checker stop checking for duplicate code\n+\n+  Closes #4901\n+\n \n What's New in Pylint 2.10.3?\n ============================\ndiff --git a/doc/whatsnew/2.11.rst b/doc/whatsnew/2.11.rst\nindex cdbba865d4..ac98463027 100644\n--- a/doc/whatsnew/2.11.rst\n+++ b/doc/whatsnew/2.11.rst\n@@ -69,3 +69,7 @@ Other Changes\n * Fix false positive ``superfluous-parens`` for tuples created with inner tuples\n \n   Closes #4907\n+\n+* Setting ``min-similarity-lines`` to 0 now makes the similarty checker stop checking for duplicate code\n+\n+  Closes #4901\ndiff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex c65b1c8933..cb002c3db5 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -919,6 +919,8 @@ def Run(argv=None):\n             ignore_signatures = True\n     if not args:\n         usage(1)\n+    if min_lines == 0:\n+        sys.exit(0)\n     sim = Similar(\n         min_lines, ignore_comments, ignore_docstrings, ignore_imports, ignore_signatures\n     )\ndiff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 4ddf2029a2..c98ea15df5 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -502,3 +502,11 @@ def test_get_map_data() -> None:\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n         assert tuple(expected_lines) == tuple(lines)\n+\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n\nFrom 695809cee4ba6ea166446d9daa47a953f3b5dc03 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Dani=C3=ABl=20van=20Noord?=\n <13665637+DanielNoord@users.noreply.github.com>\nDate: Mon, 6 Sep 2021 00:16:30 +0200\nSubject: [PATCH 2/3] Move check to `run()`\n\n---\n pylint/checkers/similar.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex cb002c3db5..20419a67cd 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -390,6 +390,8 @@ def append_stream(self, streamid: str, stream: TextIO, encoding=None) -> None:\n \n     def run(self) -> None:\n         \"\"\"start looking for similarities and display results on stdout\"\"\"\n+        if self.min_lines == 0:\n+            sys.exit(0)\n         self._display_sims(self._compute_sims())\n \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n@@ -919,8 +921,6 @@ def Run(argv=None):\n             ignore_signatures = True\n     if not args:\n         usage(1)\n-    if min_lines == 0:\n-        sys.exit(0)\n     sim = Similar(\n         min_lines, ignore_comments, ignore_docstrings, ignore_imports, ignore_signatures\n     )\n\nFrom 595556861fe8813de1c3162133fef7135b7cca79 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Dani=C3=ABl=20van=20Noord?=\n <13665637+DanielNoord@users.noreply.github.com>\nDate: Mon, 6 Sep 2021 00:20:11 +0200\nSubject: [PATCH 3/3] Update similar.py\n\n---\n pylint/checkers/similar.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 20419a67cd..88d7eac525 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -391,7 +391,7 @@ def append_stream(self, streamid: str, stream: TextIO, encoding=None) -> None:\n     def run(self) -> None:\n         \"\"\"start looking for similarities and display results on stdout\"\"\"\n         if self.min_lines == 0:\n-            sys.exit(0)\n+            return\n         self._display_sims(self._compute_sims())\n \n     def _compute_sims(self) -> List[Tuple[int, Set[LinesChunkLimits_T]]]:\n", "gold_standard_pr_link": "https://github.com/pylint-dev/pylint/pull/4970"}