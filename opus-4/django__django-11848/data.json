{"instance_id": "django__django-11848", "score": "I", "diff": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..42dc82a0ce 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,23 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n+            # RFC 7231 compliance: if a two-digit year appears to be more\n+            # than 50 years in the future, interpret it as the most recent\n+            # year in the past that had the same last two digits.\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100 * 100\n+            year_in_current_century = current_century + year\n+            \n+            # If the year is more than 50 years in the future,\n+            # use the previous century\n+            if year_in_current_century > current_year + 50:\n+                year = year_in_current_century - 100\n+            # If the year would be more than 50 years in the past,\n+            # use the next century\n+            elif year_in_current_century <= current_year - 50:\n+                year = year_in_current_century + 100\n             else:\n-                year += 1900\n+                year = year_in_current_century\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\ndiff --git a/test_rfc7231_demo.py b/test_rfc7231_demo.py\nnew file mode 100644\nindex 0000000000..46cf0e50c3\n--- /dev/null\n+++ b/test_rfc7231_demo.py\n@@ -0,0 +1,46 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Demonstration of RFC 7231 compliance for two-digit year parsing.\n+\n+According to RFC 7231:\n+\"Recipients of a timestamp value in rfc850-date format, which uses a\n+two-digit year, MUST interpret a timestamp that appears to be more\n+than 50 years in the future as representing the most recent year in\n+the past that had the same last two digits.\"\n+\"\"\"\n+\n+import datetime\n+from django.utils.http import parse_http_date\n+\n+print(\"RFC 7231 Two-Digit Year Parsing Demonstration\")\n+print(\"=\" * 50)\n+print(f\"Current year: {datetime.datetime.now().year}\")\n+print()\n+\n+# Test various two-digit years\n+test_dates = [\n+    ('Sunday, 06-Nov-20 08:49:37 GMT', 'Within 50 years'),\n+    ('Sunday, 06-Nov-50 08:49:37 GMT', 'Within 50 years'),\n+    ('Sunday, 06-Nov-75 08:49:37 GMT', 'Exactly 50 years in future'),\n+    ('Sunday, 06-Nov-76 08:49:37 GMT', 'More than 50 years in future'),\n+    ('Sunday, 06-Nov-90 08:49:37 GMT', 'More than 50 years in future'),\n+    ('Sunday, 06-Nov-99 08:49:37 GMT', 'More than 50 years in future'),\n+    ('Sunday, 06-Nov-00 08:49:37 GMT', 'Recent past'),\n+    ('Sunday, 06-Nov-10 08:49:37 GMT', 'Recent past'),\n+]\n+\n+print(\"Test Results:\")\n+print(\"-\" * 50)\n+for date_str, description in test_dates:\n+    parsed = parse_http_date(date_str)\n+    result_dt = datetime.datetime.utcfromtimestamp(parsed)\n+    two_digit_year = date_str.split('-')[2][:2]\n+    print(f\"Input year: {two_digit_year} ({description})\")\n+    print(f\"  -> Interpreted as: {result_dt.year}\")\n+    print()\n+\n+print(\"Summary:\")\n+print(\"-\" * 50)\n+print(\"Years within 50 years of the current year stay in the current/next century\")\n+print(\"Years more than 50 years in the future are interpreted as the previous century\")\n+print(\"Years that would be too far in the past are interpreted as the next century\")\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex bc8bcfe977..a5a495a9fa 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -327,6 +327,43 @@ class HttpDateProcessingTests(unittest.TestCase):\n     def test_parsing_year_less_than_70(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n+    \n+    def test_parsing_rfc7231_compliance(self):\n+        # Test RFC 7231 compliance for two-digit year interpretation\n+        # Save the current time and mock it for consistent testing\n+        from unittest.mock import patch\n+        \n+        # Mock datetime to be 2025-01-01\n+        with patch('django.utils.http.datetime') as mock_datetime:\n+            mock_datetime.datetime.now.return_value = datetime(2025, 1, 1)\n+            mock_datetime.datetime.side_effect = lambda *args, **kwargs: datetime(*args, **kwargs)\n+            \n+            # Years that should be in the future (within 50 years)\n+            future_cases = [\n+                ('Sunday, 06-Nov-25 08:49:37 GMT', 2025),\n+                ('Sunday, 06-Nov-50 08:49:37 GMT', 2050),\n+                ('Sunday, 06-Nov-75 08:49:37 GMT', 2075),\n+            ]\n+            \n+            # Years that should be in the past (more than 50 years in future)\n+            past_cases = [\n+                ('Sunday, 06-Nov-76 08:49:37 GMT', 1976),\n+                ('Sunday, 06-Nov-94 08:49:37 GMT', 1994),\n+                ('Sunday, 06-Nov-99 08:49:37 GMT', 1999),\n+            ]\n+            \n+            # Years that should be in the future (would be too far in the past)\n+            future_from_past_cases = [\n+                ('Sunday, 06-Nov-00 08:49:37 GMT', 2000),\n+                ('Sunday, 06-Nov-10 08:49:37 GMT', 2010),\n+                ('Sunday, 06-Nov-24 08:49:37 GMT', 2024),\n+            ]\n+            \n+            for date_str, expected_year in future_cases + past_cases + future_from_past_cases:\n+                with self.subTest(date=date_str, expected_year=expected_year):\n+                    parsed = parse_http_date(date_str)\n+                    result_dt = datetime.utcfromtimestamp(parsed)\n+                    self.assertEqual(result_dt.year, expected_year)\n \n \n class EscapeLeadingSlashesTests(unittest.TestCase):\n", "gold_standard_diff": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb434729..ff2f08ac1e84 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,14 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n+            current_year = datetime.datetime.utcnow().year\n+            current_century = current_year - (current_year % 100)\n+            if year - (current_year % 100) > 50:\n+                # year that appears to be more than 50 years in the future are\n+                # interpreted as representing the past.\n+                year += current_century - 100\n             else:\n-                year += 1900\n+                year += current_century\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\ndiff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex bc8bcfe977a9..ed6824429d51 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,27 @@ def test_parsing_rfc1123(self):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11848"}