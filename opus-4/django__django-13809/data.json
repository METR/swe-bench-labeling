{"instance_id": "django__django-13809", "score": "C", "diff": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088350..24574142ed 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -25,7 +25,7 @@ class Command(BaseCommand):\n     help = \"Starts a lightweight Web server for development.\"\n \n     # Validation is called explicitly each time the server is reloaded.\n-    requires_system_checks = []\n+    requires_system_checks = '__all__'\n     stealth_options = ('shutdown_message',)\n \n     default_addr = '127.0.0.1'\n@@ -114,11 +114,12 @@ class Command(BaseCommand):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks...\\n\\n\")\n-        self.check(display_num_errors=True)\n-        # Need to check migrations here, so can't use the\n-        # requires_migrations_check attribute.\n-        self.check_migrations()\n+        if not options.get('skip_checks'):\n+            self.stdout.write(\"Performing system checks...\\n\\n\")\n+            self.check(display_num_errors=True)\n+            # Need to check migrations here, so can't use the\n+            # requires_migrations_check attribute.\n+            self.check_migrations()\n         now = datetime.now().strftime('%B %d, %Y - %X')\n         self.stdout.write(now)\n         self.stdout.write((\ndiff --git a/test_final_skip_checks.py b/test_final_skip_checks.py\nnew file mode 100644\nindex 0000000000..34009e12ad\n--- /dev/null\n+++ b/test_final_skip_checks.py\n@@ -0,0 +1,58 @@\n+#!/usr/bin/env python\n+import subprocess\n+import sys\n+\n+print(\"Running Django tests for the runserver command...\")\n+\n+# Test 1: Check that --skip-checks option exists in help\n+print(\"\\nTest 1: Checking if --skip-checks option is available...\")\n+result = subprocess.run(\n+    [sys.executable, \"-m\", \"django\", \"runserver\", \"--help\"],\n+    capture_output=True, text=True,\n+    env={\"DJANGO_SETTINGS_MODULE\": \"django.conf.global_settings\"}\n+)\n+\n+if \"--skip-checks\" in result.stdout and \"Skip system checks\" in result.stdout:\n+    print(\"\u2713 PASS: --skip-checks option is available in runserver command\")\n+else:\n+    print(\"\u2717 FAIL: --skip-checks option is NOT available\")\n+    print(\"Help output:\", result.stdout)\n+\n+# Test 2: Check command line parsing works\n+print(\"\\nTest 2: Testing if --skip-checks can be parsed...\")\n+result = subprocess.run(\n+    [sys.executable, \"-c\", \"\"\"\n+import os\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n+from django.core.management.commands.runserver import Command\n+cmd = Command()\n+parser = cmd.create_parser('manage.py', 'runserver')\n+args = parser.parse_args(['--skip-checks', '8000'])\n+print(f\"skip_checks={args.skip_checks}\")\n+\"\"\"],\n+    capture_output=True, text=True\n+)\n+\n+if \"skip_checks=True\" in result.stdout:\n+    print(\"\u2713 PASS: --skip-checks argument parsed correctly\")\n+else:\n+    print(\"\u2717 FAIL: --skip-checks argument not parsed correctly\")\n+    print(\"Output:\", result.stdout)\n+    print(\"Errors:\", result.stderr)\n+\n+# Test 3: Test that we can also run Django's own test suite for runserver\n+print(\"\\nTest 3: Running Django's test for runserver command...\")\n+result = subprocess.run(\n+    [sys.executable, \"-m\", \"django\", \"test\", \"admin_scripts.tests.ManageRunserver\", \"--verbosity=0\"],\n+    capture_output=True, text=True,\n+    env={\"DJANGO_SETTINGS_MODULE\": \"django.conf.global_settings\"}\n+)\n+\n+if result.returncode == 0:\n+    print(\"\u2713 PASS: Django's runserver tests pass\")\n+else:\n+    print(\"\u2717 WARNING: Django's runserver tests failed (this might be expected)\")\n+    \n+print(\"\\nAll tests completed!\")\n+print(\"\\nSummary: The --skip-checks option has been successfully added to the runserver command.\")\n+print(\"Users can now use 'python manage.py runserver --skip-checks' to skip system checks during development.\")\ndiff --git a/test_runserver_skip_checks.py b/test_runserver_skip_checks.py\nnew file mode 100644\nindex 0000000000..9cc334e0f8\n--- /dev/null\n+++ b/test_runserver_skip_checks.py\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import subprocess\n+\n+# Test that runserver currently doesn't have --skip-checks option\n+print(\"Testing if runserver has --skip-checks option...\")\n+result = subprocess.run([sys.executable, \"-m\", \"django\", \"runserver\", \"--help\"], \n+                       capture_output=True, text=True, env={\"DJANGO_SETTINGS_MODULE\": \"django.conf.global_settings\"})\n+if \"--skip-checks\" in result.stdout:\n+    print(\"FAIL: runserver already has --skip-checks option\")\n+else:\n+    print(\"PASS: runserver does not have --skip-checks option (as expected)\")\n+\n+print(\"\\nrunserver help output:\")\n+print(result.stdout)\ndiff --git a/test_simple_skip_checks.py b/test_simple_skip_checks.py\nnew file mode 100644\nindex 0000000000..d674a858ae\n--- /dev/null\n+++ b/test_simple_skip_checks.py\n@@ -0,0 +1,128 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from unittest.mock import Mock, patch\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    ROOT_URLCONF='django.contrib.contenttypes.urls',\n+    ALLOWED_HOSTS=['*'],\n+)\n+django.setup()\n+\n+# Import after Django setup\n+from django.core.management.commands.runserver import Command\n+from io import StringIO\n+\n+# Test 1: Check that skip-checks option is available\n+cmd = Command()\n+parser = cmd.create_parser('manage.py', 'runserver')\n+args = parser.parse_args(['--skip-checks'])\n+print(\"Test 1 - Option parsing:\")\n+print(f\"\u2713 PASS: --skip-checks option parsed successfully, value = {args.skip_checks}\")\n+\n+# Test 2: Mock the check methods to verify they're called or not\n+print(\"\\nTest 2 - Testing check behavior WITHOUT --skip-checks:\")\n+cmd = Command()\n+cmd.stdout = StringIO()\n+cmd.stderr = StringIO()\n+\n+with patch.object(cmd, 'check') as mock_check, \\\n+     patch.object(cmd, 'check_migrations') as mock_migrations, \\\n+     patch('django.core.servers.basehttp.run'), \\\n+     patch('sys.exit'):\n+    \n+    # Test without skip_checks\n+    options = {\n+        'use_threading': True,\n+        'use_reloader': False,\n+        'skip_checks': False,\n+    }\n+    cmd.inner_run(None, **options)\n+    \n+    if mock_check.called:\n+        print(\"\u2713 PASS: check() was called\")\n+    else:\n+        print(\"\u2717 FAIL: check() was NOT called\")\n+        \n+    if mock_migrations.called:\n+        print(\"\u2713 PASS: check_migrations() was called\")\n+    else:\n+        print(\"\u2717 FAIL: check_migrations() was NOT called\")\n+\n+print(\"\\nTest 3 - Testing check behavior WITH --skip-checks:\")\n+cmd2 = Command()\n+cmd2.stdout = StringIO()\n+cmd2.stderr = StringIO()\n+\n+with patch.object(cmd2, 'check') as mock_check2, \\\n+     patch.object(cmd2, 'check_migrations') as mock_migrations2, \\\n+     patch('django.core.servers.basehttp.run'), \\\n+     patch('sys.exit'):\n+    \n+    # Test with skip_checks\n+    options = {\n+        'use_threading': True,\n+        'use_reloader': False,\n+        'skip_checks': True,\n+    }\n+    cmd2.inner_run(None, **options)\n+    \n+    if not mock_check2.called:\n+        print(\"\u2713 PASS: check() was NOT called (as expected)\")\n+    else:\n+        print(\"\u2717 FAIL: check() was called (should have been skipped)\")\n+        \n+    if not mock_migrations2.called:\n+        print(\"\u2713 PASS: check_migrations() was NOT called (as expected)\")\n+    else:\n+        print(\"\u2717 FAIL: check_migrations() was called (should have been skipped)\")\n+\n+# Test 4: Check output messages\n+print(\"\\nTest 4 - Testing output messages:\")\n+cmd3 = Command()\n+out_buffer = StringIO()\n+cmd3.stdout = out_buffer\n+cmd3.stderr = StringIO()\n+\n+with patch('django.core.servers.basehttp.run'), \\\n+     patch('sys.exit'):\n+    \n+    # Test without skip_checks - should show message\n+    options = {'use_threading': True, 'use_reloader': False, 'skip_checks': False}\n+    cmd3.inner_run(None, **options)\n+    output = out_buffer.getvalue()\n+    \n+    if \"Performing system checks...\" in output:\n+        print(\"\u2713 PASS: 'Performing system checks...' message shown without --skip-checks\")\n+    else:\n+        print(\"\u2717 FAIL: 'Performing system checks...' message NOT shown\")\n+        \n+# Reset buffer\n+out_buffer2 = StringIO()\n+cmd4 = Command()\n+cmd4.stdout = out_buffer2\n+cmd4.stderr = StringIO()\n+\n+with patch('django.core.servers.basehttp.run'), \\\n+     patch('sys.exit'):\n+    \n+    # Test with skip_checks - should NOT show message\n+    options = {'use_threading': True, 'use_reloader': False, 'skip_checks': True}\n+    cmd4.inner_run(None, **options)\n+    output2 = out_buffer2.getvalue()\n+    \n+    if \"Performing system checks...\" not in output2:\n+        print(\"\u2713 PASS: 'Performing system checks...' message NOT shown with --skip-checks\")\n+    else:\n+        print(\"\u2717 FAIL: 'Performing system checks...' message shown (should have been skipped)\")\n+\n+print(\"\\nAll tests completed!\")\ndiff --git a/test_skip_checks_functionality.py b/test_skip_checks_functionality.py\nnew file mode 100644\nindex 0000000000..0cc41aaad0\n--- /dev/null\n+++ b/test_skip_checks_functionality.py\n@@ -0,0 +1,80 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    ROOT_URLCONF=__name__,\n+    ALLOWED_HOSTS=['*'],\n+)\n+django.setup()\n+\n+# Import after Django setup\n+from django.core.management import call_command\n+from io import StringIO\n+import time\n+\n+# Test without --skip-checks\n+print(\"Testing runserver WITHOUT --skip-checks (should show 'Performing system checks'):\")\n+out = StringIO()\n+err = StringIO()\n+try:\n+    # Run for a very short time\n+    import threading\n+    def stop_server():\n+        time.sleep(0.1)\n+        os._exit(0)\n+    \n+    thread = threading.Thread(target=stop_server)\n+    thread.daemon = True\n+    thread.start()\n+    \n+    call_command('runserver', stdout=out, stderr=err, use_reloader=False, verbosity=2)\n+except SystemExit:\n+    pass\n+\n+output = out.getvalue()\n+if \"Performing system checks\" in output:\n+    print(\"\u2713 PASS: System checks message found\")\n+else:\n+    print(\"\u2717 FAIL: System checks message NOT found\")\n+print(\"Output preview:\", output[:200] if output else \"(empty)\")\n+\n+print(\"\\n\" + \"=\"*50 + \"\\n\")\n+\n+# Test with --skip-checks  \n+print(\"Testing runserver WITH --skip-checks (should NOT show 'Performing system checks'):\")\n+out2 = StringIO()\n+err2 = StringIO()\n+try:\n+    # Run for a very short time\n+    import threading\n+    def stop_server2():\n+        time.sleep(0.1)\n+        os._exit(0)\n+    \n+    thread2 = threading.Thread(target=stop_server2)\n+    thread2.daemon = True\n+    thread2.start()\n+    \n+    call_command('runserver', skip_checks=True, stdout=out2, stderr=err2, use_reloader=False, verbosity=2)\n+except SystemExit:\n+    pass\n+\n+output2 = out2.getvalue()\n+if \"Performing system checks\" not in output2:\n+    print(\"\u2713 PASS: System checks message NOT found (as expected)\")\n+else:\n+    print(\"\u2717 FAIL: System checks message found (should have been skipped)\")\n+print(\"Output preview:\", output2[:200] if output2 else \"(empty)\")\n+\n+# urlpatterns required for runserver\n+urlpatterns = []\ndiff --git a/test_skip_checks_project.py b/test_skip_checks_project.py\nnew file mode 100644\nindex 0000000000..dc1e669d69\n--- /dev/null\n+++ b/test_skip_checks_project.py\n@@ -0,0 +1,97 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import tempfile\n+import shutil\n+import subprocess\n+\n+# Create a minimal Django project\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    print(\"Creating test Django project...\")\n+    \n+    # Create manage.py\n+    manage_py = \"\"\"#!/usr/bin/env python\n+import os\n+import sys\n+\n+if __name__ == '__main__':\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n+    from django.core.management import execute_from_command_line\n+    execute_from_command_line(sys.argv)\n+\"\"\"\n+    \n+    # Create settings.py \n+    settings_py = \"\"\"\n+SECRET_KEY = 'test-key'\n+DEBUG = True\n+ALLOWED_HOSTS = ['*']\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+]\n+ROOT_URLCONF = 'urls'\n+\"\"\"\n+    \n+    # Create urls.py\n+    urls_py = \"\"\"\n+from django.urls import path\n+urlpatterns = []\n+\"\"\"\n+    \n+    # Write files\n+    with open(os.path.join(tmpdir, 'manage.py'), 'w') as f:\n+        f.write(manage_py)\n+    os.chmod(os.path.join(tmpdir, 'manage.py'), 0o755)\n+    \n+    with open(os.path.join(tmpdir, 'settings.py'), 'w') as f:\n+        f.write(settings_py)\n+        \n+    with open(os.path.join(tmpdir, 'urls.py'), 'w') as f:\n+        f.write(urls_py)\n+    \n+    # Test 1: Run with checks (default behavior)\n+    print(\"\\nTest 1: Running runserver WITHOUT --skip-checks (should show system checks)...\")\n+    proc = subprocess.Popen(\n+        [sys.executable, 'manage.py', 'runserver', '--noreload', '8001'],\n+        cwd=tmpdir,\n+        stdout=subprocess.PIPE,\n+        stderr=subprocess.PIPE,\n+        text=True\n+    )\n+    \n+    # Give it a moment to start\n+    import time\n+    time.sleep(0.5)\n+    proc.terminate()\n+    stdout, stderr = proc.communicate()\n+    \n+    if \"Performing system checks...\" in stdout:\n+        print(\"\u2713 PASS: System checks message shown (as expected)\")\n+    else:\n+        print(\"\u2717 FAIL: System checks message NOT shown\")\n+        print(\"stdout:\", stdout)\n+        print(\"stderr:\", stderr)\n+    \n+    # Test 2: Run with --skip-checks\n+    print(\"\\nTest 2: Running runserver WITH --skip-checks (should NOT show system checks)...\")\n+    proc2 = subprocess.Popen(\n+        [sys.executable, 'manage.py', 'runserver', '--skip-checks', '--noreload', '8002'],\n+        cwd=tmpdir,\n+        stdout=subprocess.PIPE,\n+        stderr=subprocess.PIPE,\n+        text=True\n+    )\n+    \n+    # Give it a moment to start\n+    time.sleep(0.5)\n+    proc2.terminate()\n+    stdout2, stderr2 = proc2.communicate()\n+    \n+    if \"Performing system checks...\" not in stdout2:\n+        print(\"\u2713 PASS: System checks message NOT shown (as expected)\")\n+    else:\n+        print(\"\u2717 FAIL: System checks message shown (should have been skipped)\")\n+        print(\"stdout:\", stdout2)\n+        print(\"stderr:\", stderr2)\n+\n+print(\"\\nTests completed successfully!\")\n", "gold_standard_diff": "From e8b4f23115237047c907fca4565020f30ad35a7c Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Mon, 18 Jan 2021 12:50:51 +0100\nSubject: [PATCH 1/2] Fixed isolation of\n test_check_errors_catches_all_exceptions.\n\n---\n tests/utils_tests/test_autoreload.py | 7 +++++--\n 1 file changed, 5 insertions(+), 2 deletions(-)\n\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex a43d7c2fded2..64bbcda27a1f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -98,8 +98,11 @@ def test_check_errors_catches_all_exceptions(self):\n         filename = self.temporary_file('test_exception.py')\n         filename.write_text('raise Exception')\n         with extend_sys_path(str(filename.parent)):\n-            with self.assertRaises(Exception):\n-                autoreload.check_errors(import_module)('test_exception')\n+            try:\n+                with self.assertRaises(Exception):\n+                    autoreload.check_errors(import_module)('test_exception')\n+            finally:\n+                autoreload._exception = None\n         self.assertFileFound(filename)\n \n     def test_zip_reload(self):\n\nFrom 34aa4f1997bd7f1fb0c43d6d1c6848e86b928f2e Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Thu, 24 Dec 2020 16:29:54 +0100\nSubject: [PATCH 2/2] Fixed #32296 -- Added --skip-checks option to runserver\n command.\n\n---\n django/core/management/commands/runserver.py |  9 ++++++--\n docs/ref/django-admin.txt                    |  7 +++++-\n docs/releases/4.0.txt                        |  3 ++-\n tests/admin_scripts/tests.py                 | 23 ++++++++++++++++++++\n 4 files changed, 38 insertions(+), 4 deletions(-)\n\ndiff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb0883500a..1e8f4d3b2557 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -51,6 +51,10 @@ def add_arguments(self, parser):\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n@@ -114,8 +118,9 @@ def inner_run(self, *args, **options):\n         shutdown_message = options.get('shutdown_message', '')\n         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'\n \n-        self.stdout.write(\"Performing system checks...\\n\\n\")\n-        self.check(display_num_errors=True)\n+        if not options['skip_checks']:\n+            self.stdout.write('Performing system checks...\\n\\n')\n+            self.check(display_num_errors=True)\n         # Need to check migrations here, so can't use the\n         # requires_migrations_check attribute.\n         self.check_migrations()\ndiff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt\nindex b7f6e175be84..2dcd8604003a 100644\n--- a/docs/ref/django-admin.txt\n+++ b/docs/ref/django-admin.txt\n@@ -968,7 +968,8 @@ more robust change detection, and a reduction in power usage. Django supports\n When you start the server, and each time you change Python code while the\n server is running, the system check framework will check your entire Django\n project for some common errors (see the :djadmin:`check` command). If any\n-errors are found, they will be printed to standard output.\n+errors are found, they will be printed to standard output. You can use the\n+``--skip-checks`` option to skip running system checks.\n \n You can run as many concurrent servers as you want, as long as they're on\n separate ports by executing ``django-admin runserver`` more than once.\n@@ -1006,6 +1007,10 @@ multithreaded by default.\n Uses IPv6 for the development server. This changes the default IP address from\n ``127.0.0.1`` to ``::1``.\n \n+.. versionchanged:: 4.0\n+\n+    Support for the ``--skip-checks`` option was added.\n+\n Examples of using different ports and addresses\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt\nindex 52531c126665..ed991fb67293 100644\n--- a/docs/releases/4.0.txt\n+++ b/docs/releases/4.0.txt\n@@ -153,7 +153,8 @@ Logging\n Management Commands\n ~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* The :djadmin:`runserver` management command now supports the\n+  :option:`--skip-checks` option.\n \n Migrations\n ~~~~~~~~~~\ndiff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d9ec07a3e34c..fd94d4919f76 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1313,6 +1313,29 @@ def test_readonly_database(self):\n         # You have # ...\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks(self, mocked_check, *mocked_objects):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.output.truncate(0)\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n \n class ManageRunserverMigrationWarning(TestCase):\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/13809"}