{"instance_id": "sympy__sympy-13480", "score": "C", "diff": "diff --git a/run_test_coth.py b/run_test_coth.py\nnew file mode 100644\nindex 0000000000..4320a4cd2c\n--- /dev/null\n+++ b/run_test_coth.py\n@@ -0,0 +1,37 @@\n+from sympy import *\n+from sympy.functions.elementary.hyperbolic import coth\n+from sympy.core.singleton import S\n+from sympy.core.symbol import Symbol\n+from sympy.core.numbers import I, pi, zoo, nan, oo, Rational, E\n+from sympy.functions.elementary.trigonometric import cot, cos, sin, tan\n+from sympy.functions.elementary.exponential import exp\n+from sympy.functions.elementary.miscellaneous import sqrt\n+\n+# Running tests from test_coth\n+x = Symbol('x')\n+k = Symbol('k', integer=True)\n+\n+# Basic tests\n+assert coth(nan) == nan\n+assert coth(zoo) == nan\n+assert coth(oo) == 1\n+assert coth(-oo) == -1\n+assert coth(0) == zoo\n+assert coth(-x) == -coth(x)\n+\n+# Tests with imaginary unit\n+assert coth(pi*I) == -I*cot(pi)\n+assert coth(-pi*I) == I*cot(pi)\n+assert coth(pi*I/2) == 0\n+assert coth(-pi*I/2) == 0\n+\n+# Test the specific case from the issue\n+x = Symbol('x')\n+e = coth(log(tan(x)))\n+try:\n+    result = e.subs(x, 2)\n+    print(f\"\u2713 coth(log(tan(2))) = {result}\")\n+except Exception as ex:\n+    print(f\"\u2717 Error evaluating coth(log(tan(2))): {ex}\")\n+    \n+print(\"All basic coth tests passed!\")\ndiff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d919..5fbb73c786 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..702b48aa33\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,41 @@\n+from sympy import *\n+from sympy.abc import x, y, z\n+\n+# Test various coth expressions\n+test_cases = [\n+    coth(0),  # Should be zoo\n+    coth(x + y),  # Add expression\n+    coth(x*y),  # Mul expression\n+    coth(log(x)),  # Log expression\n+    coth(exp(x)),  # Exp expression\n+    coth(sin(x)),  # Trig expression\n+    coth(x + I*pi),  # Complex add with I*pi\n+    coth(x + 2*I*pi),  # Complex add with 2*I*pi\n+    coth(asinh(x)),  # With inverse hyperbolic\n+    coth(acosh(x)),  # With inverse hyperbolic\n+    coth(atanh(x)),  # With inverse hyperbolic\n+    coth(acoth(x)),  # With inverse hyperbolic\n+]\n+\n+print(\"Testing various coth expressions:\")\n+for i, expr in enumerate(test_cases):\n+    try:\n+        # Just evaluate to make sure no errors\n+        str(expr)  # Force evaluation\n+        print(f\"\u2713 Test {i+1}: {expr}\")\n+    except Exception as ex:\n+        print(f\"\u2717 Test {i+1}: {expr} - ERROR: {ex}\")\n+\n+# Test the specific problematic case with different values\n+print(\"\\nTesting coth(log(tan(x))) with various x values:\")\n+e = coth(log(tan(x)))\n+test_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n+\n+for val in test_values:\n+    try:\n+        result = e.subs(x, val)\n+        print(f\"\u2713 x={val}: {result}\")\n+    except Exception as ex:\n+        print(f\"\u2717 x={val}: ERROR - {type(ex).__name__}: {ex}\")\n+\n+print(\"\\nAll tests completed!\")\ndiff --git a/test_coth_issue.py b/test_coth_issue.py\nnew file mode 100644\nindex 0000000000..86c43e28ed\n--- /dev/null\n+++ b/test_coth_issue.py\n@@ -0,0 +1,15 @@\n+from sympy import *\n+\n+x = Symbol('x')\n+e = coth(log(tan(x)))\n+\n+# Test the problematic values\n+test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+print(\"Testing coth(log(tan(x))) for various values:\")\n+for val in test_values:\n+    try:\n+        result = e.subs(x, val)\n+        print(f\"x={val}: {result}\")\n+    except Exception as ex:\n+        print(f\"x={val}: ERROR - {type(ex).__name__}: {ex}\")\ndiff --git a/test_peeloff.py b/test_peeloff.py\nnew file mode 100644\nindex 0000000000..6ff5d385bf\n--- /dev/null\n+++ b/test_peeloff.py\n@@ -0,0 +1,31 @@\n+from sympy import *\n+from sympy.functions.elementary.hyperbolic import _peeloff_ipi\n+\n+# Test that the coth function properly handles expressions with I*pi components\n+x = Symbol('x')\n+\n+# Test expressions that will trigger the _peeloff_ipi code path\n+test_exprs = [\n+    x + I*pi/2,  # Should have m = I*pi/2\n+    x + I*pi,    # Should have m = I*pi\n+    x + 3*I*pi/2, # Should have m = 3*I*pi/2\n+    x + 2*I*pi,   # Should have m = 2*I*pi\n+]\n+\n+print(\"Testing coth with expressions containing I*pi:\")\n+for expr in test_exprs:\n+    try:\n+        x_part, m_part = _peeloff_ipi(expr)\n+        result = coth(expr)\n+        print(f\"\u2713 coth({expr}) = {result}\")\n+        print(f\"  Peeled off: x={x_part}, m={m_part}\")\n+    except Exception as ex:\n+        print(f\"\u2717 coth({expr}) - ERROR: {ex}\")\n+        \n+# Test the original issue expressions more directly\n+print(\"\\nTesting the original issue case:\")\n+try:\n+    result = coth(log(tan(2)))\n+    print(f\"\u2713 coth(log(tan(2))) = {result}\")\n+except Exception as ex:\n+    print(f\"\u2717 coth(log(tan(2))) - ERROR: {ex}\")\ndiff --git a/test_specific_case.py b/test_specific_case.py\nnew file mode 100644\nindex 0000000000..f405c055ed\n--- /dev/null\n+++ b/test_specific_case.py\n@@ -0,0 +1,4 @@\n+from sympy import *\n+x = Symbol('x')\n+e = coth(log(tan(x)))\n+print(e.subs(x, 2))\n", "gold_standard_diff": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d91919..5fbb73c7862a 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\ndiff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex dd9ebd72a29c..73c7190bcfdc 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,6 +272,8 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n \n def test_coth_series():\n     x = Symbol('x')\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13480"}