From 422e07e174d171307d292d7632af641dec0bdd18 Mon Sep 17 00:00:00 2001
From: Antoine Lorence <contact@alorence.me>
Date: Thu, 29 Sep 2022 12:10:02 +0200
Subject: [PATCH] Fixed #34062 -- Updated View.http_method_not_allowed() to
 support async.

As with the options() methods, wrap the response in a coroutine if
the view is async.

Co-authored-by: Carlton Gibson <carlton.gibson@noumenal.es>
---
 django/views/generic/base.py | 11 ++++++++++-
 docs/releases/4.1.2.txt      |  4 ++++
 tests/async/tests.py         | 23 +++++++++++++++++++++--
 3 files changed, 35 insertions(+), 3 deletions(-)

diff --git a/django/views/generic/base.py b/django/views/generic/base.py
index db1842e3e5e7..3a3afb0c7347 100644
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -148,7 +148,16 @@ def http_method_not_allowed(self, request, *args, **kwargs):
             request.path,
             extra={"status_code": 405, "request": request},
         )
-        return HttpResponseNotAllowed(self._allowed_methods())
+        response = HttpResponseNotAllowed(self._allowed_methods())
+
+        if self.view_is_async:
+
+            async def func():
+                return response
+
+            return func()
+        else:
+            return response
 
     def options(self, request, *args, **kwargs):
         """Handle responding to requests for the OPTIONS HTTP verb."""
diff --git a/docs/releases/4.1.2.txt b/docs/releases/4.1.2.txt
index 57b0b6c6e808..d607c34c920f 100644
--- a/docs/releases/4.1.2.txt
+++ b/docs/releases/4.1.2.txt
@@ -39,3 +39,7 @@ Bugfixes
 * Fixed a regression in Django 4.1 that didn't alter a sequence type when
   altering type of pre-Django 4.1 serial columns on PostgreSQL
   (:ticket:`34058`).
+
+* Fixed a regression in Django 4.1 that caused a crash for :class:`View`
+  subclasses with asynchronous handlers when handling non-allowed HTTP methods
+  (:ticket:`34062`).
diff --git a/tests/async/tests.py b/tests/async/tests.py
index 66eece4b975f..559f21b8b10b 100644
--- a/tests/async/tests.py
+++ b/tests/async/tests.py
@@ -6,8 +6,8 @@
 
 from django.core.cache import DEFAULT_CACHE_ALIAS, caches
 from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation
-from django.http import HttpResponse
-from django.test import SimpleTestCase
+from django.http import HttpResponse, HttpResponseNotAllowed
+from django.test import RequestFactory, SimpleTestCase
 from django.utils.asyncio import async_unsafe
 from django.views.generic.base import View
 
@@ -119,6 +119,25 @@ def test_options_handler_responds_correctly(self):
 
                 self.assertIsInstance(response, HttpResponse)
 
+    def test_http_method_not_allowed_responds_correctly(self):
+        request_factory = RequestFactory()
+        tests = [
+            (SyncView, False),
+            (AsyncView, True),
+        ]
+        for view_cls, is_coroutine in tests:
+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):
+                instance = view_cls()
+                response = instance.http_method_not_allowed(request_factory.post("/"))
+                self.assertIs(
+                    asyncio.iscoroutine(response),
+                    is_coroutine,
+                )
+                if is_coroutine:
+                    response = asyncio.run(response)
+
+                self.assertIsInstance(response, HttpResponseNotAllowed)
+
     def test_base_view_class_is_sync(self):
         """
         View and by extension any subclasses that don't define handlers are
