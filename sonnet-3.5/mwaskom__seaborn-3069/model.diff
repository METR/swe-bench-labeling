diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py
index 4f0290a4..bc26c4cc 100644
--- a/seaborn/_core/plot.py
+++ b/seaborn/_core/plot.py
@@ -1631,10 +1631,11 @@ class Plotter:
             ax = sub["ax"]
             for axis in "xy":
                 axis_key = sub[axis]
+                axis_obj = getattr(ax, f"{axis}axis")
 
                 # Axis limits
                 if axis_key in p._limits:
-                    convert_units = getattr(ax, f"{axis}axis").convert_units
+                    convert_units = axis_obj.convert_units
                     a, b = p._limits[axis_key]
                     lo = a if a is None else convert_units(a)
                     hi = b if b is None else convert_units(b)
@@ -1644,6 +1645,11 @@ class Plotter:
                         hi = cast(float, hi) + 0.5
                     ax.set(**{f"{axis}lim": (lo, hi)})
 
+                # Apply NominalScale settings
+                scale = axis_obj.get_scale()
+                if isinstance(scale, mpl.scale.LinearScale) and hasattr(scale, '_setup_nominal_axis'):
+                    scale._setup_nominal_axis(axis_obj)
+
         engine_default = None if p._target is not None else "tight"
         layout_engine = p._layout_spec.get("engine", engine_default)
         set_layout_engine(self._figure, layout_engine)
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index bbd71ec1..be7999c1 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -156,56 +156,38 @@ class Nominal(Scale):
         if new._label_params is None:
             new = new.label()
 
-        # TODO flexibility over format() which isn't great for numbers / dates
         stringify = np.vectorize(format)
 
         units_seed = categorical_order(data, new.order)
 
-        # TODO move to Nominal._get_scale?
-        # TODO this needs some more complicated rethinking about how to pass
-        # a unit dictionary down to these methods, along with how much we want
-        # to invest in their API. What is it useful for tick() to do here?
-        # (Ordinal may be different if we draw that contrast).
-        # Any customization we do to allow, e.g., label wrapping will probably
-        # require defining our own Formatter subclass.
-        # We could also potentially implement auto-wrapping in an Axis subclass
-        # (see Axis.draw ... it already is computing the bboxes).
-        # major_locator, minor_locator = new._get_locators(**new._tick_params)
-        # major_formatter = new._get_formatter(major_locator, **new._label_params)
-
-        class CatScale(mpl.scale.LinearScale):
+        class NominalScale(mpl.scale.LinearScale):
             name = None  # To work around mpl<3.4 compat issues
 
             def set_default_locators_and_formatters(self, axis):
-                ...
-                # axis.set_major_locator(major_locator)
-                # if minor_locator is not None:
-                #     axis.set_minor_locator(minor_locator)
-                # axis.set_major_formatter(major_formatter)
+                super().set_default_locators_and_formatters(axis)
+                self._setup_nominal_axis(axis)
 
-        mpl_scale = CatScale(data.name)
+            def _setup_nominal_axis(self, axis):
+                # 1. Extend the scale to +/- 0.5 from the first and last tick
+                first_tick, last_tick = 0, len(units_seed) - 1
+                axis.set_view_interval(first_tick - 0.5, last_tick + 0.5)
+
+                # 2. Disable grid
+                axis.grid(False)
+
+                # 3. Invert y-axis if necessary
+                if axis.axis_name == 'y':
+                    axis.invert_axis()
+
+        mpl_scale = NominalScale(data.name)
         if axis is None:
             axis = PseudoAxis(mpl_scale)
 
-            # TODO Currently just used in non-Coordinate contexts, but should
-            # we use this to (A) set the padding we want for categorial plots
-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim
-            axis.set_view_interval(0, len(units_seed) - 1)
-
         new._matplotlib_scale = mpl_scale
 
-        # TODO array cast necessary to handle float/int mixture, which we need
-        # to solve in a more systematic way probably
-        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)
         axis.update_units(stringify(np.array(units_seed)))
 
-        # TODO define this more centrally
         def convert_units(x):
-            # TODO only do this with explicit order?
-            # (But also category dtype?)
-            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)
-            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)
-            # keep = x.isin(units_seed)
             keep = np.array([x_ in units_seed for x_ in x], bool)
             out = np.full(len(x), np.nan)
             out[keep] = axis.convert_units(stringify(x[keep]))
@@ -214,7 +196,6 @@ class Nominal(Scale):
         new._pipeline = [
             convert_units,
             prop.get_mapping(new, data),
-            # TODO how to handle color representation consistency?
         ]
 
         def spacer(x):
