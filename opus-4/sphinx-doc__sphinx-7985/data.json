{"instance_id": "sphinx-doc__sphinx-7985", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex a404f1fa5..2c6848797 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd5317087..ac2819da4 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -208,12 +208,59 @@ class CheckExternalLinksBuilder(Builder):\n                 else:\n                     return 'redirected', new_url, 0\n \n+        def check_local() -> Tuple[str, str, int]:\n+            \"\"\"Check if a local link (reference to doc/label/anchor) exists.\"\"\"\n+            # Check for fragment (anchor) in the same document\n+            if uri.startswith('#'):\n+                anchor = uri[1:]\n+                # Get the current document's doctree\n+                doctree = self.env.get_doctree(docname)\n+                # Check if the anchor exists as an ID in the document\n+                if anchor in doctree.ids:\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', __(\"Anchor '%s' not found\") % anchor, 0\n+            \n+            # Handle other local references\n+            # First check if it's a document reference (without extension)\n+            if '/' not in uri and '#' not in uri:\n+                # Check if it's a valid document name\n+                if uri in self.env.found_docs:\n+                    return 'working', '', 0\n+                \n+                # Check if it's a label in the standard domain\n+                std_domain = self.env.get_domain('std')\n+                if uri in std_domain.labels or uri in std_domain.anonlabels:\n+                    return 'working', '', 0\n+            \n+            # Check for document#anchor pattern\n+            if '#' in uri and not uri.startswith('#'):\n+                doc_name, anchor = uri.split('#', 1)\n+                # Check if document exists\n+                if doc_name in self.env.found_docs:\n+                    # Get the target document's doctree\n+                    target_doctree = self.env.get_doctree(doc_name)\n+                    # Check if anchor exists in the target document\n+                    if anchor in target_doctree.ids:\n+                        return 'working', '', 0\n+                    else:\n+                        return 'broken', __(\"Anchor '%s' not found in document '%s'\") % (anchor, doc_name), 0\n+                else:\n+                    return 'broken', __(\"Document '%s' not found\") % doc_name, 0\n+            \n+            # If we reach here, it's an unknown local reference format\n+            return 'broken', __(\"Local reference '%s' not found\") % uri, 0\n+\n         def check() -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check local links only if they don't have a protocol\n+                if '://' not in uri:\n+                    return check_local()\n+                # URLs with other protocols are unchecked\n+                return 'unchecked', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n@@ -267,10 +314,7 @@ class CheckExternalLinksBuilder(Builder):\n             else:\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n-        elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n-            self.write_linkstat(linkstat)\n+\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\ndiff --git a/test_doctree_refs.py b/test_doctree_refs.py\nnew file mode 100644\nindex 000000000..d080eff57\n--- /dev/null\n+++ b/test_doctree_refs.py\n@@ -0,0 +1,49 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to analyze doctree references.\"\"\"\n+\n+import os\n+import tempfile\n+import shutil\n+from sphinx.application import Sphinx\n+from docutils import nodes\n+\n+# Create a temporary directory\n+tmpdir = tempfile.mkdtemp()\n+print(f\"Working in {tmpdir}\")\n+\n+# Create conf.py\n+with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:\n+    f.write(\"\"\"\n+project = 'Test'\n+extensions = []\n+master_doc = 'index'\n+\"\"\")\n+\n+# Create index.rst with a simple link\n+with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:\n+    f.write(\"\"\"\n+Test Local Links\n+================\n+\n+Reference to target_\n+Reference to broken_target_\n+\n+.. _target: #anchor\n+.. _broken_target: doesntexist\n+\"\"\")\n+\n+# Build the doctree\n+app = Sphinx(tmpdir, tmpdir, os.path.join(tmpdir, '_build/doctrees'),\n+             os.path.join(tmpdir, '_build'), 'linkcheck')\n+app.build()\n+\n+# Analyze the doctree\n+doctree = app.env.get_doctree('index')\n+print(\"\\nAnalyzing reference nodes in doctree:\")\n+for refnode in doctree.traverse(nodes.reference):\n+    print(f\"Reference node: {refnode}\")\n+    print(f\"  attributes: {refnode.attributes}\")\n+    print()\n+\n+# Clean up\n+shutil.rmtree(tmpdir)\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..e2875783b\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,97 @@\n+#!/usr/bin/env python\n+\"\"\"Test script for edge cases in local link checking.\"\"\"\n+\n+import os\n+import tempfile\n+import shutil\n+from sphinx.cmd.build import build_main\n+\n+# Create a temporary directory\n+tmpdir = tempfile.mkdtemp()\n+print(f\"Working in {tmpdir}\")\n+\n+# Create conf.py\n+with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:\n+    f.write(\"\"\"\n+project = 'Test'\n+extensions = []\n+master_doc = 'index'\n+\"\"\")\n+\n+# Create index.rst with various link types\n+with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:\n+    f.write(\"\"\"\n+Test Local Links Edge Cases\n+===========================\n+\n+Working Links\n+-------------\n+\n+1. Link to existing anchor in same document: `existing-anchor`_\n+2. Link to existing document: doc1_\n+3. Link to anchor in another document: `doc2#anchor`_\n+4. Fragment-only link to existing: `#test-local-links-edge-cases`_\n+\n+Broken Links\n+------------\n+\n+1. Link to non-existing anchor in same document: `broken-anchor`_\n+2. Link to non-existing document: missing_\n+3. Link to non-existing anchor in existing doc: `doc2#missing`_\n+4. Fragment-only link to non-existing: `#missing-section`_\n+\n+.. _existing-anchor: #test-local-links-edge-cases\n+.. _doc1: doc1\n+.. _doc2#anchor: doc2#existing-anchor  \n+.. _broken-anchor: #does-not-exist\n+.. _missing: missing-doc\n+.. _doc2#missing: doc2#missing-anchor\n+\n+.. _test-label:\n+\n+Label Section\n+-------------\n+\n+This section has a label.\n+\"\"\")\n+\n+# Create doc1.rst\n+with open(os.path.join(tmpdir, 'doc1.rst'), 'w') as f:\n+    f.write(\"\"\"\n+Document 1\n+==========\n+\n+This is document 1.\n+\"\"\")\n+\n+# Create doc2.rst with an anchor\n+with open(os.path.join(tmpdir, 'doc2.rst'), 'w') as f:\n+    f.write(\"\"\"\n+Document 2\n+==========\n+\n+.. _existing-anchor:\n+\n+Section with Anchor\n+-------------------\n+\n+This section has an anchor.\n+\"\"\")\n+\n+# Run linkcheck\n+print(\"\\nRunning linkcheck...\")\n+result = build_main(['-b', 'linkcheck', tmpdir, os.path.join(tmpdir, '_build')])\n+\n+# Check output\n+output_file = os.path.join(tmpdir, '_build', 'output.txt')\n+if os.path.exists(output_file):\n+    print(\"\\nLinkcheck output:\")\n+    with open(output_file, 'r') as f:\n+        content = f.read()\n+        if content:\n+            print(content)\n+        else:\n+            print(\"(No broken links found)\")\n+\n+# Clean up\n+shutil.rmtree(tmpdir)\ndiff --git a/test_local_links.py b/test_local_links.py\nnew file mode 100644\nindex 000000000..c95b8ebcb\n--- /dev/null\n+++ b/test_local_links.py\n@@ -0,0 +1,46 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to reproduce the local link issue.\"\"\"\n+\n+import os\n+import tempfile\n+import shutil\n+from sphinx.cmd.build import build_main\n+\n+# Create a temporary directory\n+tmpdir = tempfile.mkdtemp()\n+print(f\"Working in {tmpdir}\")\n+\n+# Create conf.py\n+with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:\n+    f.write(\"\"\"\n+project = 'Test'\n+extensions = []\n+master_doc = 'index'\n+\"\"\")\n+\n+# Create index.rst with broken links\n+with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:\n+    f.write(\"\"\"\n+Test Local Links\n+================\n+\n+broken external-link_\n+broken local-link_\n+\n+.. _external-link: https://lkfqhlkghflkhs\n+.. _local-link: doesntexist\n+\"\"\")\n+\n+# Run linkcheck\n+print(\"\\nRunning linkcheck...\")\n+result = build_main(['-b', 'linkcheck', tmpdir, os.path.join(tmpdir, '_build')])\n+\n+# Check output\n+output_file = os.path.join(tmpdir, '_build', 'output.txt')\n+if os.path.exists(output_file):\n+    print(\"\\nLinkcheck output:\")\n+    with open(output_file, 'r') as f:\n+        print(f.read())\n+\n+# Clean up\n+shutil.rmtree(tmpdir)\ndiff --git a/test_local_links_comprehensive.py b/test_local_links_comprehensive.py\nnew file mode 100644\nindex 000000000..d4b120ec9\n--- /dev/null\n+++ b/test_local_links_comprehensive.py\n@@ -0,0 +1,68 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to reproduce various local link issues.\"\"\"\n+\n+import os\n+import tempfile\n+import shutil\n+from sphinx.cmd.build import build_main\n+\n+# Create a temporary directory\n+tmpdir = tempfile.mkdtemp()\n+print(f\"Working in {tmpdir}\")\n+\n+# Create conf.py\n+with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:\n+    f.write(\"\"\"\n+project = 'Test'\n+extensions = []\n+master_doc = 'index'\n+\"\"\")\n+\n+# Create index.rst with various types of links\n+with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:\n+    f.write(\"\"\"\n+Test Local Links\n+================\n+\n+Reference to existing target_\n+Reference to broken_target_\n+\n+Cross-reference to a document :doc:`existing`\n+Cross-reference to missing doc :doc:`missing`\n+\n+Reference to section ref :ref:`existing-section`\n+Reference to missing section :ref:`missing-section`\n+\n+.. _existing target: #existing-anchor\n+.. _broken_target: #non-existing-anchor\n+\n+.. _existing-section:\n+\n+Existing Section\n+----------------\n+\n+Some content here.\n+\"\"\")\n+\n+# Create existing.rst\n+with open(os.path.join(tmpdir, 'existing.rst'), 'w') as f:\n+    f.write(\"\"\"\n+Existing Document\n+=================\n+\n+This document exists.\n+\"\"\")\n+\n+# Run linkcheck\n+print(\"\\nRunning linkcheck...\")\n+result = build_main(['-b', 'linkcheck', tmpdir, os.path.join(tmpdir, '_build')])\n+\n+# Check output\n+output_file = os.path.join(tmpdir, '_build', 'output.txt')\n+if os.path.exists(output_file):\n+    print(\"\\nLinkcheck output:\")\n+    with open(output_file, 'r') as f:\n+        print(f.read())\n+\n+# Clean up\n+shutil.rmtree(tmpdir)\ndiff --git a/tox.ini b/tox.ini\nindex bddd822a6..34baee205 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex bc932a7d48c..7af591708c3 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -27,6 +27,7 @@ Features added\n * #7902: html theme: Add a new option :confval:`globaltoc_maxdepth` to control\n   the behavior of globaltoc in sidebar\n * #7840: i18n: Optimize the dependencies check on bootstrap\n+* #5208: linkcheck: Support checks for local links\n * #7052: add ``:noindexentry:`` to the Python, C, C++, and Javascript domains.\n   Update the documentation to better reflect the relationship between this option\n   and the ``:noindex:`` option.\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex dd531708729..ef8f9d90222 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -35,6 +35,8 @@\n \n logger = logging.getLogger(__name__)\n \n+uri_re = re.compile('[a-z]+://')\n+\n \n DEFAULT_REQUEST_HEADERS = {\n     'Accept': 'text/html,application/xhtml+xml;q=0.9,*/*;q=0.8',\n@@ -210,10 +212,21 @@ def check_uri() -> Tuple[str, str, int]:\n \n         def check() -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n-            if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n+            if len(uri) == 0 or uri.startswith(('#', 'mailto:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                if uri_re.match(uri):\n+                    # non supported URI schemes (ex. ftp)\n+                    return 'unchecked', '', 0\n+                else:\n+                    if path.exists(path.join(self.srcdir, uri)):\n+                        return 'working', '', 0\n+                    else:\n+                        for rex in self.to_ignore:\n+                            if rex.match(uri):\n+                                return 'ignored', '', 0\n+                        else:\n+                            return 'broken', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\ndiff --git a/tests/roots/test-linkcheck/links.txt b/tests/roots/test-linkcheck/links.txt\nindex fa8f11e4cf4..90759ee6369 100644\n--- a/tests/roots/test-linkcheck/links.txt\n+++ b/tests/roots/test-linkcheck/links.txt\n@@ -11,6 +11,8 @@ Some additional anchors to exercise ignore code\n * `Example Bar invalid <https://www.google.com/#top>`_\n * `Example anchor invalid <http://www.sphinx-doc.org/en/1.7/intro.html#does-not-exist>`_\n * `Complete nonsense <https://localhost:7777/doesnotexist>`_\n+* `Example valid local file <conf.py>`_\n+* `Example invalid local file <path/to/notfound>`_\n \n .. image:: https://www.google.com/image.png\n .. figure:: https://www.google.com/image2.png\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex d1fec550f7b..7d85f10c53a 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -30,7 +30,9 @@ def test_defaults(app, status, warning):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in content\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    # looking for local file should fail\n+    assert \"[broken] path/to/notfound\" in content\n+    assert len(content.splitlines()) == 6\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n@@ -47,8 +49,8 @@ def test_defaults_json(app, status, warning):\n                  \"info\"]:\n         assert attr in row\n \n-    assert len(content.splitlines()) == 8\n-    assert len(rows) == 8\n+    assert len(content.splitlines()) == 10\n+    assert len(rows) == 10\n     # the output order of the rows is not stable\n     # due to possible variance in network latency\n     rowsby = {row[\"uri\"]:row for row in rows}\n@@ -69,7 +71,7 @@ def test_defaults_json(app, status, warning):\n     assert dnerow['uri'] == 'https://localhost:7777/doesnotexist'\n     assert rowsby['https://www.google.com/image2.png'] == {\n         'filename': 'links.txt',\n-        'lineno': 16,\n+        'lineno': 18,\n         'status': 'broken',\n         'code': 0,\n         'uri': 'https://www.google.com/image2.png',\n@@ -92,7 +94,8 @@ def test_defaults_json(app, status, warning):\n                        'https://localhost:7777/doesnotexist',\n                        'http://www.sphinx-doc.org/en/1.7/intro.html#',\n                        'https://www.google.com/image.png',\n-                       'https://www.google.com/image2.png']\n+                       'https://www.google.com/image2.png',\n+                       'path/to/notfound']\n                    })\n def test_anchors_ignored(app, status, warning):\n     app.builder.build_all()\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7985"}