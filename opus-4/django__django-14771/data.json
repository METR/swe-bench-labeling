{"instance_id": "django__django-14771", "score": "C", "diff": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..b159ac984b 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -220,6 +220,14 @@ def get_child_arguments():\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+    # sys._xoptions is a dict of {name: value} where value can be True or a string\n+    # Convert to command line options: -Xname or -Xname=value\n+    if hasattr(sys, '_xoptions'):\n+        for name, value in sys._xoptions.items():\n+            if value is True:\n+                args.append('-X%s' % name)\n+            else:\n+                args.append('-X%s=%s' % (name, value))\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\ndiff --git a/test_autoreload_xoptions.py b/test_autoreload_xoptions.py\nnew file mode 100644\nindex 0000000000..1d43e060d2\n--- /dev/null\n+++ b/test_autoreload_xoptions.py\n@@ -0,0 +1,38 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to verify X options are passed through autoreload\"\"\"\n+import sys\n+import os\n+import subprocess\n+\n+# Import Django autoreload module\n+sys.path.insert(0, '/testbed')\n+from django.utils import autoreload\n+\n+print(\"=== Original process ===\")\n+print(\"sys._xoptions:\", sys._xoptions)\n+\n+# Get child arguments as autoreload would\n+args = autoreload.get_child_arguments()\n+print(\"\\nChild arguments:\", args)\n+\n+# Simulate what autoreload does: run child process\n+print(\"\\n=== Running child process ===\")\n+env = {**os.environ, autoreload.DJANGO_AUTORELOAD_ENV: 'true'}\n+# Find where the script name is in args and replace it with our test command\n+# We need to keep all the -W and -X options intact\n+script_idx = None\n+for i, arg in enumerate(args):\n+    if arg == 'test_autoreload_xoptions.py':\n+        script_idx = i\n+        break\n+\n+if script_idx is not None:\n+    cmd = args[:script_idx] + ['-c', 'import sys; print(\"Child sys._xoptions:\", sys._xoptions)']\n+else:\n+    # Fallback\n+    cmd = args[:-1] + ['-c', 'import sys; print(\"Child sys._xoptions:\", sys._xoptions)']\n+print(\"Running command:\", cmd)\n+result = subprocess.run(cmd, capture_output=True, text=True, env=env)\n+print(result.stdout)\n+if result.stderr:\n+    print(\"stderr:\", result.stderr)\ndiff --git a/test_encoding.py b/test_encoding.py\nnew file mode 100644\nindex 0000000000..3e04e69c7c\n--- /dev/null\n+++ b/test_encoding.py\n@@ -0,0 +1,55 @@\n+#!/usr/bin/env python\n+\"\"\"Test encoding behavior with and without X options\"\"\"\n+import sys\n+import os\n+import subprocess\n+\n+# Import Django autoreload module\n+sys.path.insert(0, '/testbed')\n+from django.utils import autoreload\n+\n+print(\"=== Parent process ===\")\n+print(\"sys._xoptions:\", sys._xoptions)\n+print(\"Default encoding:\", sys.getdefaultencoding())\n+print(\"Stdout encoding:\", sys.stdout.encoding)\n+\n+# Write a test file to check file encoding\n+test_content = \"# -*- coding: utf-8 -*-\\n# Test file with special chars: \u00e0\u00e9\u00ee\u00f6\u00fc\"\n+with open('/tmp/test_encoding.txt', 'w', encoding='utf-8') as f:\n+    f.write(test_content)\n+\n+# Read back to check encoding\n+with open('/tmp/test_encoding.txt', 'r') as f:\n+    print(\"File encoding when reading:\", f.encoding)\n+\n+# Get child arguments\n+args = autoreload.get_child_arguments()\n+print(\"\\nChild command:\", ' '.join(args))\n+\n+# Simulate child process\n+print(\"\\n=== Child process (simulated autoreload) ===\")\n+env = {**os.environ, autoreload.DJANGO_AUTORELOAD_ENV: 'true'}\n+child_test = \"\"\"\n+import sys\n+print(\"Child sys._xoptions:\", sys._xoptions)\n+print(\"Child default encoding:\", sys.getdefaultencoding()) \n+print(\"Child stdout encoding:\", sys.stdout.encoding)\n+with open('/tmp/test_encoding.txt', 'r') as f:\n+    print(\"Child file encoding:\", f.encoding)\n+\"\"\"\n+\n+script_idx = None\n+for i, arg in enumerate(args):\n+    if arg == 'test_encoding.py':\n+        script_idx = i\n+        break\n+\n+if script_idx is not None:\n+    cmd = args[:script_idx] + ['-c', child_test]\n+else:\n+    cmd = args[:-1] + ['-c', child_test]\n+\n+result = subprocess.run(cmd, capture_output=True, text=True, env=env)\n+print(result.stdout)\n+if result.stderr:\n+    print(\"stderr:\", result.stderr)\ndiff --git a/test_project/db.sqlite3 b/test_project/db.sqlite3\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_project/manage.py b/test_project/manage.py\nnew file mode 100755\nindex 0000000000..b455bc84e6\n--- /dev/null\n+++ b/test_project/manage.py\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python\n+\"\"\"Django's command-line utility for administrative tasks.\"\"\"\n+import os\n+import sys\n+\n+\n+def main():\n+    \"\"\"Run administrative tasks.\"\"\"\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed and \"\n+            \"available on your PYTHONPATH environment variable? Did you \"\n+            \"forget to activate a virtual environment?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\n+\n+\n+if __name__ == '__main__':\n+    main()\ndiff --git a/test_project/test_app/__init__.py b/test_project/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_project/test_app/admin.py b/test_project/test_app/admin.py\nnew file mode 100644\nindex 0000000000..8c38f3f3da\n--- /dev/null\n+++ b/test_project/test_app/admin.py\n@@ -0,0 +1,3 @@\n+from django.contrib import admin\n+\n+# Register your models here.\ndiff --git a/test_project/test_app/apps.py b/test_project/test_app/apps.py\nnew file mode 100644\nindex 0000000000..29f4426412\n--- /dev/null\n+++ b/test_project/test_app/apps.py\n@@ -0,0 +1,13 @@\n+from django.apps import AppConfig\n+import sys\n+\n+\n+class TestAppConfig(AppConfig):\n+    default_auto_field = 'django.db.models.BigAutoField'\n+    name = 'test_app'\n+\n+# Demo for xoptions\n+print(\"=== test_app apps.py loaded ===\")\n+print(\"sys._xoptions:\", sys._xoptions)\n+with open(\"manage.py\", mode=\"r\") as stream:\n+    print(\"File encoding:\", stream.encoding)\ndiff --git a/test_project/test_app/migrations/__init__.py b/test_project/test_app/migrations/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_project/test_app/models.py b/test_project/test_app/models.py\nnew file mode 100644\nindex 0000000000..71a8362390\n--- /dev/null\n+++ b/test_project/test_app/models.py\n@@ -0,0 +1,3 @@\n+from django.db import models\n+\n+# Create your models here.\ndiff --git a/test_project/test_app/tests.py b/test_project/test_app/tests.py\nnew file mode 100644\nindex 0000000000..7ce503c2dd\n--- /dev/null\n+++ b/test_project/test_app/tests.py\n@@ -0,0 +1,3 @@\n+from django.test import TestCase\n+\n+# Create your tests here.\ndiff --git a/test_project/test_app/views.py b/test_project/test_app/views.py\nnew file mode 100644\nindex 0000000000..91ea44a218\n--- /dev/null\n+++ b/test_project/test_app/views.py\n@@ -0,0 +1,3 @@\n+from django.shortcuts import render\n+\n+# Create your views here.\ndiff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_project/test_project/asgi.py b/test_project/test_project/asgi.py\nnew file mode 100644\nindex 0000000000..342a9c9009\n--- /dev/null\n+++ b/test_project/test_project/asgi.py\n@@ -0,0 +1,16 @@\n+\"\"\"\n+ASGI config for test_project project.\n+\n+It exposes the ASGI callable as a module-level variable named ``application``.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/\n+\"\"\"\n+\n+import os\n+\n+from django.core.asgi import get_asgi_application\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n+\n+application = get_asgi_application()\ndiff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py\nnew file mode 100644\nindex 0000000000..496908e1d5\n--- /dev/null\n+++ b/test_project/test_project/settings.py\n@@ -0,0 +1,124 @@\n+\"\"\"\n+Django settings for test_project project.\n+\n+Generated by 'django-admin startproject' using Django 4.1.dev20210929060442.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/topics/settings/\n+\n+For the full list of settings and their values, see\n+https://docs.djangoproject.com/en/dev/ref/settings/\n+\"\"\"\n+\n+from pathlib import Path\n+\n+# Build paths inside the project like this: BASE_DIR / 'subdir'.\n+BASE_DIR = Path(__file__).resolve().parent.parent\n+\n+\n+# Quick-start development settings - unsuitable for production\n+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/\n+\n+# SECURITY WARNING: keep the secret key used in production secret!\n+SECRET_KEY = 'django-insecure-sf6%8^7he6kmi8u8_7rqe5co-68a=c#e*-d1sh7ba_zmxv!mg6'\n+\n+# SECURITY WARNING: don't run with debug turned on in production!\n+DEBUG = True\n+\n+ALLOWED_HOSTS = []\n+\n+\n+# Application definition\n+\n+INSTALLED_APPS = [\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.staticfiles',\n+    'test_app',\n+]\n+\n+MIDDLEWARE = [\n+    'django.middleware.security.SecurityMiddleware',\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.middleware.common.CommonMiddleware',\n+    'django.middleware.csrf.CsrfViewMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n+]\n+\n+ROOT_URLCONF = 'test_project.urls'\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n+\n+WSGI_APPLICATION = 'test_project.wsgi.application'\n+\n+\n+# Database\n+# https://docs.djangoproject.com/en/dev/ref/settings/#databases\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': BASE_DIR / 'db.sqlite3',\n+    }\n+}\n+\n+\n+# Password validation\n+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators\n+\n+AUTH_PASSWORD_VALIDATORS = [\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n+    },\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n+    },\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n+    },\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n+    },\n+]\n+\n+\n+# Internationalization\n+# https://docs.djangoproject.com/en/dev/topics/i18n/\n+\n+LANGUAGE_CODE = 'en-us'\n+\n+TIME_ZONE = 'UTC'\n+\n+USE_I18N = True\n+\n+USE_TZ = True\n+\n+\n+# Static files (CSS, JavaScript, Images)\n+# https://docs.djangoproject.com/en/dev/howto/static-files/\n+\n+STATIC_URL = 'static/'\n+\n+# Default primary key field type\n+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field\n+\n+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\ndiff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py\nnew file mode 100644\nindex 0000000000..cc86b838e7\n--- /dev/null\n+++ b/test_project/test_project/urls.py\n@@ -0,0 +1,21 @@\n+\"\"\"test_project URL Configuration\n+\n+The `urlpatterns` list routes URLs to views. For more information please see:\n+    https://docs.djangoproject.com/en/dev/topics/http/urls/\n+Examples:\n+Function views\n+    1. Add an import:  from my_app import views\n+    2. Add a URL to urlpatterns:  path('', views.home, name='home')\n+Class-based views\n+    1. Add an import:  from other_app.views import Home\n+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\n+Including another URLconf\n+    1. Import the include() function: from django.urls import include, path\n+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n+\"\"\"\n+from django.contrib import admin\n+from django.urls import path\n+\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+]\ndiff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py\nnew file mode 100644\nindex 0000000000..7050af9edd\n--- /dev/null\n+++ b/test_project/test_project/wsgi.py\n@@ -0,0 +1,16 @@\n+\"\"\"\n+WSGI config for test_project project.\n+\n+It exposes the WSGI callable as a module-level variable named ``application``.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/\n+\"\"\"\n+\n+import os\n+\n+from django.core.wsgi import get_wsgi_application\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n+\n+application = get_wsgi_application()\ndiff --git a/test_xoptions.py b/test_xoptions.py\nnew file mode 100644\nindex 0000000000..6721d59f4c\n--- /dev/null\n+++ b/test_xoptions.py\n@@ -0,0 +1,12 @@\n+#!/usr/bin/env python\n+import sys\n+import os\n+\n+# Test script to verify X options are passed\n+print(\"Python executable:\", sys.executable)\n+print(\"sys._xoptions:\", sys._xoptions)\n+print(\"Environment PYTHONIOENCODING:\", os.environ.get('PYTHONIOENCODING'))\n+\n+# Test encoding\n+with open(__file__, 'r') as f:\n+    print(\"File encoding:\", f.encoding)\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 7c28a9d4d0..cc370f4f77 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -203,6 +203,26 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': '1', 'dev': True})\n+    def test_xoptions_with_values(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8=1', '-Xdev', __file__, 'runserver']\n+        )\n+\n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n", "gold_standard_diff": "From 36d54b7a142689e0f882338159bca879d8b6d783 Mon Sep 17 00:00:00 2001\nFrom: Chenyang Yan <memory.yancy@gmail.com>\nDate: Sun, 15 Aug 2021 10:48:23 +0800\nSubject: [PATCH] Fixed #33027 -- Made autoreloader pass -X options.\n\n---\n django/utils/autoreload.py           |  5 +++++\n tests/utils_tests/test_autoreload.py | 16 ++++++++++++++++\n 2 files changed, 21 insertions(+)\n\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab30..583c2be647ba 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -220,6 +220,11 @@ def get_child_arguments():\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+    if sys.implementation.name == 'cpython':\n+        args.extend(\n+            f'-X{key}' if value is True else f'-X{key}={value}'\n+            for key, value in sys._xoptions.items()\n+        )\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 7c28a9d4d098..9b318722c0ed 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -170,6 +170,7 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -179,6 +180,7 @@ def test_run_as_module(self):\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -188,6 +190,7 @@ def test_run_as_non_django_module(self):\n     @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n     def test_run_as_non_django_module_non_package(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -197,12 +200,22 @@ def test_run_as_non_django_module_non_package(self):\n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n+    @mock.patch('sys._xoptions', {})\n     def test_warnoptions(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n@@ -217,6 +230,7 @@ def test_exe_fallback(self):\n \n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n@@ -237,6 +251,7 @@ def test_raises_runtimeerror(self):\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n@@ -468,6 +483,7 @@ def patch_autoreload(self, argv):\n             mock.patch('django.utils.autoreload.sys.argv', argv),\n             mock.patch('django.utils.autoreload.sys.executable', self.executable),\n             mock.patch('django.utils.autoreload.sys.warnoptions', ['all']),\n+            mock.patch('django.utils.autoreload.sys._xoptions', {}),\n         ]\n         for p in patches:\n             p.start()\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14771"}