{"instance_id": "django__django-11728", "score": "I", "diff": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..a776e6ab88 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -166,11 +166,13 @@ def replace_named_groups(pattern):\n     for start, end, group_name in named_group_indices:\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n         unmatched_open_brackets, prev_char = 1, None\n+        found_end = False\n         for idx, val in enumerate(pattern[end:]):\n             # If brackets are balanced, the end of the string for the current\n             # named capture group pattern has been reached.\n             if unmatched_open_brackets == 0:\n                 group_pattern_and_name.append((pattern[start:end + idx], group_name))\n+                found_end = True\n                 break\n \n             # Check for unescaped `(` and `)`. They mark the start and end of a\n@@ -180,6 +182,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        \n+        # If we've processed the whole remaining string and haven't found the end\n+        # (i.e., the pattern ends with this group), add it now\n+        if not found_end and unmatched_open_brackets == 0:\n+            group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..fc9dd6880d\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,63 @@\n+from django.contrib.admindocs.utils import replace_named_groups\n+\n+test_cases = [\n+    # Test case 1: Original issue - no trailing character\n+    (r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)', \n+     'entries/<pk>/relationships/<related_field>'),\n+    \n+    # Test case 2: With trailing slash\n+    (r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)/',\n+     'entries/<pk>/relationships/<related_field>/'),\n+    \n+    # Test case 3: With anchors\n+    (r'^(?P<a>\\w+)/b/(?P<c>\\w+)$',\n+     '^<a>/b/<c>$'),\n+    \n+    # Test case 4: Single named group at end\n+    (r'test/(?P<id>\\d+)',\n+     'test/<id>'),\n+    \n+    # Test case 5: Nested parentheses\n+    (r'^(?P<a>(x|y))/b',\n+     '^<a>/b'),\n+    \n+    # Test case 6: Multiple groups with nested parentheses\n+    (r'^(?P<a>(x|y))/(?P<b>\\w+)',\n+     '^<a>/<b>'),\n+    \n+    # Test case 7: Groups with special characters in pattern\n+    (r'(?P<year>\\d{4})/(?P<month>\\d{2})',\n+     '<year>/<month>'),\n+    \n+    # Test case 8: Mixed named and unnamed groups (unnamed groups should remain)\n+    (r'^(?P<a>\\w+)/b/(\\w+)$',\n+     '^<a>/b/(\\w+)$'),\n+    \n+    # Test case 9: Empty pattern after group\n+    (r'(?P<everything>.*)',\n+     '<everything>'),\n+    \n+    # Test case 10: Escaped parentheses should not affect counting\n+    (r'(?P<test>\\(.*\\))',\n+     '<test>'),\n+]\n+\n+print(\"Testing replace_named_groups function:\")\n+print(\"=\" * 50)\n+\n+all_passed = True\n+for i, (pattern, expected) in enumerate(test_cases, 1):\n+    result = replace_named_groups(pattern)\n+    passed = result == expected\n+    all_passed = all_passed and passed\n+    \n+    print(f\"\\nTest {i}: {'PASSED' if passed else 'FAILED'}\")\n+    print(f\"  Pattern:  {pattern}\")\n+    print(f\"  Expected: {expected}\")\n+    print(f\"  Result:   {result}\")\n+    \n+    if not passed:\n+        print(f\"  ERROR: Result doesn't match expected!\")\n+\n+print(\"\\n\" + \"=\" * 50)\n+print(f\"Overall: {'ALL TESTS PASSED' if all_passed else 'SOME TESTS FAILED'}\")\ndiff --git a/test_replace_named_groups.py b/test_replace_named_groups.py\nnew file mode 100644\nindex 0000000000..ed1c9b5527\n--- /dev/null\n+++ b/test_replace_named_groups.py\n@@ -0,0 +1,24 @@\n+from django.contrib.admindocs.utils import replace_named_groups\n+\n+# Test the issue described in the bug report\n+pattern1 = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)'\n+result1 = replace_named_groups(pattern1)\n+print(f\"Pattern without trailing slash: {pattern1}\")\n+print(f\"Result: {result1}\")\n+print(f\"Expected: entries/<pk>/relationships/<related_field>\")\n+print()\n+\n+# Test with trailing slash (workaround mentioned in issue)\n+pattern2 = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)/'\n+result2 = replace_named_groups(pattern2)\n+print(f\"Pattern with trailing slash: {pattern2}\")\n+print(f\"Result: {result2}\")\n+print(f\"Expected: entries/<pk>/relationships/<related_field>/\")\n+print()\n+\n+# Additional test cases\n+pattern3 = r'^(?P<a>\\w+)/b/(?P<c>\\w+)$'\n+result3 = replace_named_groups(pattern3)\n+print(f\"Pattern with ^ and $: {pattern3}\")\n+print(f\"Result: {result3}\")\n+print(f\"Expected: ^<a>/b/<c>$\")\ndiff --git a/test_simplify_regex.py b/test_simplify_regex.py\nnew file mode 100644\nindex 0000000000..44b369bfa5\n--- /dev/null\n+++ b/test_simplify_regex.py\n@@ -0,0 +1,15 @@\n+from django.contrib.admindocs.views import simplify_regex\n+\n+# Test the issue with simplify_regex\n+pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)'\n+result = simplify_regex(pattern)\n+print(f\"Pattern: {pattern}\")\n+print(f\"Result: {result}\")\n+print(f\"Expected: /entries/<pk>/relationships/<related_field>/\")\n+\n+# Test with trailing slash\n+pattern2 = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)/'\n+result2 = simplify_regex(pattern2)\n+print(f\"\\nPattern with slash: {pattern2}\")\n+print(f\"Result: {result2}\")\n+print(f\"Expected: /entries/<pk>/relationships/<related_field>/\")\ndiff --git a/tests/admin_docs/test_replace_named_groups.py b/tests/admin_docs/test_replace_named_groups.py\nnew file mode 100644\nindex 0000000000..cb969d7d29\n--- /dev/null\n+++ b/tests/admin_docs/test_replace_named_groups.py\n@@ -0,0 +1,50 @@\n+import unittest\n+\n+from django.contrib.admindocs.utils import replace_named_groups\n+from django.test import SimpleTestCase\n+\n+\n+class TestReplaceNamedGroups(SimpleTestCase):\n+    def test_replace_named_groups_trailing_group(self):\n+        \"\"\"\n+        Test that replace_named_groups() correctly replaces named groups, \n+        including those at the end of the pattern without trailing characters.\n+        \"\"\"\n+        # Test the original issue - pattern ending with a named group\n+        pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)'\n+        expected = 'entries/<pk>/relationships/<related_field>'\n+        self.assertEqual(replace_named_groups(pattern), expected)\n+\n+        # Test with trailing slash\n+        pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\\w+)/'\n+        expected = 'entries/<pk>/relationships/<related_field>/'\n+        self.assertEqual(replace_named_groups(pattern), expected)\n+\n+        # Test with multiple named groups ending the pattern\n+        pattern = r'^(?P<a>\\w+)/b/(?P<c>\\w+)$'\n+        expected = '^<a>/b/<c>$'\n+        self.assertEqual(replace_named_groups(pattern), expected)\n+\n+        # Test single named group at end\n+        pattern = r'test/(?P<id>\\d+)'\n+        expected = 'test/<id>'\n+        self.assertEqual(replace_named_groups(pattern), expected)\n+\n+        # Test with nested parentheses\n+        pattern = r'^(?P<a>(x|y))/b'\n+        expected = '^<a>/b'\n+        self.assertEqual(replace_named_groups(pattern), expected)\n+\n+        # Test with escaped parentheses  \n+        pattern = r'(?P<test>\\(.*\\))'\n+        expected = '<test>'\n+        self.assertEqual(replace_named_groups(pattern), expected)\n+\n+        # Existing examples from docstring\n+        pattern = r'^(?P<a>\\w+)/b/(\\w+)$'\n+        expected = '^<a>/b/(\\w+)$'\n+        self.assertEqual(replace_named_groups(pattern), expected)\n+\n+        pattern = r'^(?P<a>\\w+)/b/(?P<c>\\w+)/$'\n+        expected = '^<a>/b/<c>/$'\n+        self.assertEqual(replace_named_groups(pattern), expected)\ndiff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 17ea912015..abfdda1002 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,7 +1,8 @@\n import unittest\n \n from django.contrib.admindocs.utils import (\n-    docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n+    docutils_is_available, parse_docstring, parse_rst, replace_named_groups,\n+    trim_docstring,\n )\n \n from .tests import AdminDocsSimpleTestCase\n", "gold_standard_diff": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501ae..a3155e5c8cc3 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -155,6 +155,8 @@ def replace_named_groups(pattern):\n     Find named groups in `pattern` and replace them with the group name. E.g.,\n     1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^<a>/b/(\\w+)$\n     2. ^(?P<a>\\w+)/b/(?P<c>\\w+)/$ ==> ^<a>/b/<c>/$\n+    3. ^(?P<a>\\w+)/b/(\\w+) ==> ^<a>/b/(\\w+)\n+    4. ^(?P<a>\\w+)/b/(?P<c>\\w+) ==> ^<a>/b/<c>\n     \"\"\"\n     named_group_indices = [\n         (m.start(0), m.end(0), m.group(1))\n@@ -167,12 +169,6 @@ def replace_named_groups(pattern):\n         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.\n         unmatched_open_brackets, prev_char = 1, None\n         for idx, val in enumerate(pattern[end:]):\n-            # If brackets are balanced, the end of the string for the current\n-            # named capture group pattern has been reached.\n-            if unmatched_open_brackets == 0:\n-                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n-                break\n-\n             # Check for unescaped `(` and `)`. They mark the start and end of a\n             # nested group.\n             if val == '(' and prev_char != '\\\\':\n@@ -180,6 +176,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+            # If brackets are balanced, the end of the string for the current\n+            # named capture group pattern has been reached.\n+            if unmatched_open_brackets == 0:\n+                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))\n+                break\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n@@ -192,6 +193,8 @@ def replace_unnamed_groups(pattern):\n     Find unnamed groups in `pattern` and replace them with '<var>'. E.g.,\n     1. ^(?P<a>\\w+)/b/(\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$\n     2. ^(?P<a>\\w+)/b/((x|y)\\w+)$ ==> ^(?P<a>\\w+)/b/<var>$\n+    3. ^(?P<a>\\w+)/b/(\\w+) ==> ^(?P<a>\\w+)/b/<var>\n+    4. ^(?P<a>\\w+)/b/((x|y)\\w+) ==> ^(?P<a>\\w+)/b/<var>\n     \"\"\"\n     unnamed_group_indices = [m.start(0) for m in unnamed_group_matcher.finditer(pattern)]\n     # Indices of the start of unnamed capture groups.\n@@ -201,10 +204,6 @@ def replace_unnamed_groups(pattern):\n         # Handle nested parentheses, e.g. '^b/((x|y)\\w+)$'.\n         unmatched_open_brackets, prev_char = 1, None\n         for idx, val in enumerate(pattern[start + 1:]):\n-            if unmatched_open_brackets == 0:\n-                group_indices.append((start, start + 1 + idx))\n-                break\n-\n             # Check for unescaped `(` and `)`. They mark the start and end of\n             # a nested group.\n             if val == '(' and prev_char != '\\\\':\n@@ -213,6 +212,9 @@ def replace_unnamed_groups(pattern):\n                 unmatched_open_brackets -= 1\n             prev_char = val\n \n+            if unmatched_open_brackets == 0:\n+                group_indices.append((start, start + 2 + idx))\n+                break\n     # Remove unnamed group matches inside other unnamed capture groups.\n     group_start_end_indices = []\n     prev_end = None\ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\nindex 144517ab0a5a..fb021f3dd2f2 100644\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -348,9 +348,13 @@ def test_simplify_regex(self):\n             (r'^a', '/a'),\n             (r'^(?P<a>\\w+)/b/(?P<c>\\w+)/$', '/<a>/b/<c>/'),\n             (r'^(?P<a>\\w+)/b/(?P<c>\\w+)$', '/<a>/b/<c>'),\n+            (r'^(?P<a>\\w+)/b/(?P<c>\\w+)', '/<a>/b/<c>'),\n             (r'^(?P<a>\\w+)/b/(\\w+)$', '/<a>/b/<var>'),\n+            (r'^(?P<a>\\w+)/b/(\\w+)', '/<a>/b/<var>'),\n             (r'^(?P<a>\\w+)/b/((x|y)\\w+)$', '/<a>/b/<var>'),\n+            (r'^(?P<a>\\w+)/b/((x|y)\\w+)', '/<a>/b/<var>'),\n             (r'^(?P<a>(x|y))/b/(?P<c>\\w+)$', '/<a>/b/<c>'),\n+            (r'^(?P<a>(x|y))/b/(?P<c>\\w+)', '/<a>/b/<c>'),\n             (r'^(?P<a>(x|y))/b/(?P<c>\\w+)ab', '/<a>/b/<c>ab'),\n             (r'^(?P<a>(x|y)(\\(|\\)))/b/(?P<c>\\w+)ab', '/<a>/b/<c>ab'),\n             (r'^a/?$', '/a/'),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11728"}