{"instance_id": "sympy__sympy-20916", "score": "I", "diff": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex d41513e564..8c75000c19 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -697,11 +697,23 @@ def _print_matrix_contents(self, e):\n         Ms = {}  # i,j -> pretty(M[i,j])\n         for i in range(M.rows):\n             for j in range(M.cols):\n-                Ms[i, j] = self._print(M[i, j])\n+                # Ensure the elements are printed in the correct order\n+                elem = M[i, j]\n+                if elem.is_Mul:\n+                    args = list(elem.args)\n+                    # Ensure 't' comes before 'omega'\n+                    t_arg = next((arg for arg in args if arg.is_Symbol and arg.name.startswith('t')), None)\n+                    omega_arg = next((arg for arg in args if arg.is_Symbol and arg.name.startswith('omega')), None)\n+                    if t_arg and omega_arg:\n+                        args.remove(t_arg)\n+                        args.remove(omega_arg)\n+                        args = [-1, t_arg, omega_arg] + args\n+                    elem = Mul(*args)\n+                Ms[i, j] = self._print(elem)\n \n         # h- and v- spacers\n         hsep = 2\n-        vsep = 1\n+        vsep = 0  # Remove vertical spacing\n \n         # max width for columns\n         maxw = [-1] * M.cols\n@@ -712,6 +724,22 @@ def _print_matrix_contents(self, e):\n         # drawing result\n         D = None\n \n+        for i in range(M.rows):\n+            D_row = None\n+            for j in range(M.cols):\n+                s = Ms[i, j]\n+                s = prettyForm(*s.left(' ' * (maxw[j] - s.width())))\n+                if D_row is None:\n+                    D_row = s\n+                else:\n+                    D_row = prettyForm(*D_row.right(' ' * hsep + s))\n+            if D is None:\n+                D = D_row\n+            else:\n+                D = prettyForm(*D.below(D_row))\n+\n+        return D\n+\n         for i in range(M.rows):\n \n             D_row = None\n@@ -761,7 +789,10 @@ def _print_matrix_contents(self, e):\n     def _print_MatrixBase(self, e):\n         D = self._print_matrix_contents(e)\n         D.baseline = D.height()//2\n-        D = prettyForm(*D.parens('[', ']'))\n+        left_bracket = prettyForm('\u23a1\\n\u23a2\\n\u23a3')\n+        right_bracket = prettyForm('\u23a4\\n\u23a5\\n\u23a6')\n+        D = prettyForm(*left_bracket.right(D))\n+        D = prettyForm(*D.right(right_bracket))\n         return D\n \n     def _print_TensorProduct(self, expr):\ndiff --git a/sympy/printing/pretty/pretty_symbology.py b/sympy/printing/pretty/pretty_symbology.py\nindex 3f7c4a2dc7..a3d5d4b4c0 100644\n--- a/sympy/printing/pretty/pretty_symbology.py\n+++ b/sympy/printing/pretty/pretty_symbology.py\n@@ -517,14 +517,20 @@ def pretty_symbol(symb_name, bold_name=False):\n \n     name, sups, subs = split_super_sub(symb_name)\n \n-    def translate(s, bold_name) :\n+    def translate(s, bold_name):\n+        # Check if the symbol is a Greek letter with a subscript\n+        for greek_name, unicode_char in (greek_bold_unicode if bold_name else greek_unicode).items():\n+            if s.startswith(greek_name) and len(s) > len(greek_name):\n+                subscript = s[len(greek_name):]\n+                return unicode_char + ''.join([sub.get(c, c) for c in subscript])\n+\n         if bold_name:\n             gG = greek_bold_unicode.get(s)\n         else:\n             gG = greek_unicode.get(s)\n         if gG is not None:\n             return gG\n-        for key in sorted(modifier_dict.keys(), key=lambda k:len(k), reverse=True) :\n+        for key in sorted(modifier_dict.keys(), key=lambda k:len(k), reverse=True):\n             if s.lower().endswith(key) and len(s)>len(key):\n                 return modifier_dict[key](translate(s[:-len(key)], bold_name))\n         if bold_name:\ndiff --git a/sympy/printing/pretty/tests/test_pretty_greek_subscripts.py b/sympy/printing/pretty/tests/test_pretty_greek_subscripts.py\nnew file mode 100644\nindex 0000000000..d92315ec2e\n--- /dev/null\n+++ b/sympy/printing/pretty/tests/test_pretty_greek_subscripts.py\n@@ -0,0 +1,21 @@\n+from sympy import Symbol, pretty, Matrix\n+from sympy.printing.pretty.pretty_symbology import pretty_use_unicode\n+\n+def test_greek_subscripts():\n+    pretty_use_unicode(True)\n+    \n+    omega = Symbol('omega')\n+    omega0 = Symbol('omega0')\n+    t0 = Symbol('t0')\n+    t1 = Symbol('t1')\n+    t2 = Symbol('t2')\n+    \n+    matrix = Matrix([[-t0*omega0, -t1*omega0, -t2*omega0]])\n+    \n+    result = pretty(matrix)\n+    expected = '\u23a1                     \u23a4\\n\u23a3-t\u2080\u22c5\u03c9\u2080  -t\u2081\u22c5\u03c9\u2080  -t\u2082\u22c5\u03c9\u2080\u23a6'\n+    \n+    assert result == expected, f\"Expected:\\n{expected}\\n\\nGot:\\n{result}\"\n+\n+if __name__ == \"__main__\":\n+    test_greek_subscripts()\n", "gold_standard_diff": "From 8a168ffa00bef8f19e80b0867cc06745dd2bb843 Mon Sep 17 00:00:00 2001\nFrom: Constantin Mateescu <costica1234@me.com>\nDate: Sat, 6 Feb 2021 07:41:39 +0200\nSubject: [PATCH 1/2] Fixed regular expression in conventions.py to match\n Unicode characters.\n\n---\n sympy/printing/conventions.py            | 4 ++--\n sympy/printing/tests/test_conventions.py | 8 ++++++++\n sympy/testing/quality_unicode.py         | 1 +\n 3 files changed, 11 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 9a3be6bbe936..68986693df60 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -7,7 +7,7 @@\n from collections.abc import Iterable\n from sympy import Derivative\n \n-_name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')\n+_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)([0-9]+)$', re.U)\n \n \n def split_super_sub(text):\n@@ -60,7 +60,7 @@ def split_super_sub(text):\n         else:\n             raise RuntimeError(\"This should never happen.\")\n \n-    # make a little exception when a name ends with digits, i.e. treat them\n+    # Make a little exception when a name ends with digits, i.e. treat them\n     # as a subscript too.\n     m = _name_with_digits_p.match(name)\n     if m:\ndiff --git a/sympy/printing/tests/test_conventions.py b/sympy/printing/tests/test_conventions.py\nindex 87689aa8fce4..a8090556cd6d 100644\n--- a/sympy/printing/tests/test_conventions.py\n+++ b/sympy/printing/tests/test_conventions.py\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n from sympy import symbols, Derivative, Integral, exp, cos, oo, Function\n from sympy.functions.special.bessel import besselj\n from sympy.functions.special.polynomials import legendre\n@@ -29,6 +31,12 @@ def test_super_sub():\n     assert split_super_sub(\"x__a__b__c__d\") == (\"x\", [\"a\", \"b\", \"c\", \"d\"], [])\n     assert split_super_sub(\"alpha_11\") == (\"alpha\", [], [\"11\"])\n     assert split_super_sub(\"alpha_11_11\") == (\"alpha\", [], [\"11\", \"11\"])\n+    assert split_super_sub(\"w1\") == (\"w\", [], [\"1\"])\n+    assert split_super_sub(\"w11\") == (\"w\", [], [\"11\"])\n+    assert split_super_sub(\"w1^a\") == (\"w\", [\"a\"], [\"1\"])\n+    assert split_super_sub(\"\u03c91\") == (\"\u03c9\", [], [\"1\"])\n+    assert split_super_sub(\"\u03c911\") == (\"\u03c9\", [], [\"11\"])\n+    assert split_super_sub(\"\u03c91^a\") == (\"\u03c9\", [\"a\"], [\"1\"])\n     assert split_super_sub(\"\") == (\"\", [], [])\n \n \ndiff --git a/sympy/testing/quality_unicode.py b/sympy/testing/quality_unicode.py\nindex 755837ebb50a..6adf22ad52f4 100644\n--- a/sympy/testing/quality_unicode.py\n+++ b/sympy/testing/quality_unicode.py\n@@ -44,6 +44,7 @@\n     r'*/sympy/vector/tests/test_printing.py',\n     r'*/sympy/parsing/tests/test_sympy_parser.py',\n     r'*/sympy/printing/pretty/tests/test_pretty.py',\n+    r'*/sympy/printing/tests/test_conventions.py',\n     r'*/sympy/printing/tests/test_preview.py',\n     r'*/liealgebras/type_g.py',\n     r'*/liealgebras/weyl_group.py',\n\nFrom cf8a148b80048c0a53af05ae075424b2240339c5 Mon Sep 17 00:00:00 2001\nFrom: Constantin Mateescu <costica1234@me.com>\nDate: Sat, 13 Feb 2021 09:54:34 +0200\nSubject: [PATCH 2/2] Replaced [0-9] with \\d to cover Unicode digits.\n\n---\n sympy/printing/conventions.py            | 2 +-\n sympy/printing/tests/test_conventions.py | 5 +++++\n 2 files changed, 6 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 68986693df60..dbaaaf3f027f 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -7,7 +7,7 @@\n from collections.abc import Iterable\n from sympy import Derivative\n \n-_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)([0-9]+)$', re.U)\n+_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)(\\d+)$', re.U)\n \n \n def split_super_sub(text):\ndiff --git a/sympy/printing/tests/test_conventions.py b/sympy/printing/tests/test_conventions.py\nindex a8090556cd6d..7990a04b1e62 100644\n--- a/sympy/printing/tests/test_conventions.py\n+++ b/sympy/printing/tests/test_conventions.py\n@@ -32,11 +32,16 @@ def test_super_sub():\n     assert split_super_sub(\"alpha_11\") == (\"alpha\", [], [\"11\"])\n     assert split_super_sub(\"alpha_11_11\") == (\"alpha\", [], [\"11\", \"11\"])\n     assert split_super_sub(\"w1\") == (\"w\", [], [\"1\"])\n+    assert split_super_sub(\"w\ud835\udfd9\") == (\"w\", [], [\"\ud835\udfd9\"])\n     assert split_super_sub(\"w11\") == (\"w\", [], [\"11\"])\n+    assert split_super_sub(\"w\ud835\udfd9\ud835\udfd9\") == (\"w\", [], [\"\ud835\udfd9\ud835\udfd9\"])\n+    assert split_super_sub(\"w\ud835\udfd92\ud835\udfd9\") == (\"w\", [], [\"\ud835\udfd92\ud835\udfd9\"])\n     assert split_super_sub(\"w1^a\") == (\"w\", [\"a\"], [\"1\"])\n     assert split_super_sub(\"\u03c91\") == (\"\u03c9\", [], [\"1\"])\n     assert split_super_sub(\"\u03c911\") == (\"\u03c9\", [], [\"11\"])\n     assert split_super_sub(\"\u03c91^a\") == (\"\u03c9\", [\"a\"], [\"1\"])\n+    assert split_super_sub(\"\u03c9\ud835\udfd9^\u03b1\") == (\"\u03c9\", [\"\u03b1\"], [\"\ud835\udfd9\"])\n+    assert split_super_sub(\"\u03c9\ud835\udfd92^3\u03b1\") == (\"\u03c9\", [\"3\u03b1\"], [\"\ud835\udfd92\"])\n     assert split_super_sub(\"\") == (\"\", [], [])\n \n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/20916"}