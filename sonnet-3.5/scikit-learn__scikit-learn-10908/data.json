{"instance_id": "scikit-learn__scikit-learn-10908", "score": "I", "diff": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 22fbd3f17..7decc9b93 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -1019,3 +1019,22 @@ def test_vectorizers_invalid_ngram_range(vec):\n     if isinstance(vec, HashingVectorizer):\n         assert_raise_message(\n             ValueError, message, vec.transform, [\"good news everyone\"])\n+\n+def test_countvectorizer_get_feature_names_with_vocabulary():\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # Check that get_feature_names works without fitting\n+    feature_names = vectorizer.get_feature_names()\n+    assert_equal(feature_names, vocabulary)\n+    \n+    # Check that it still works after fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    vectorizer.fit(corpus)\n+    feature_names_after_fit = vectorizer.get_feature_names()\n+    assert_equal(feature_names_after_fit, vocabulary)\n\\ No newline at end of file\n", "gold_standard_diff": "From f9100a6ee5c8bd44c7be13974c3306b1e1badca9 Mon Sep 17 00:00:00 2001\nFrom: Maskani Filali Mohamed <maskani.mohamed@gmail.com>\nDate: Mon, 2 Apr 2018 23:51:14 -0400\nSubject: [PATCH 1/6] Add validation of vocabulary in get_feature_names\n\n---\n sklearn/feature_extraction/text.py | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex a1e0845abe9ac..920a18b1fab5d 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -971,6 +971,9 @@ def inverse_transform(self, X):\n \n     def get_feature_names(self):\n         \"\"\"Array mapping from feature integer indices to feature name\"\"\"\n+        if not hasattr(self, 'vocabulary_'):\n+            self._validate_vocabulary()\n+\n         self._check_vocabulary()\n \n         return [t for t, i in sorted(six.iteritems(self.vocabulary_),\n\nFrom 8a38cd28ef8edd4790d49ded0792a94b9e8b6715 Mon Sep 17 00:00:00 2001\nFrom: Maskani Filali Mohamed <maskani.mohamed@gmail.com>\nDate: Tue, 3 Apr 2018 00:08:10 -0400\nSubject: [PATCH 2/6] Add validation of vocabulary in inverse_transform\n\n---\n sklearn/feature_extraction/text.py | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex 920a18b1fab5d..feca973dc7608 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -951,6 +951,9 @@ def inverse_transform(self, X):\n         X_inv : list of arrays, len = n_samples\n             List of arrays of terms.\n         \"\"\"\n+        if not hasattr(self, 'vocabulary_'):\n+            self._validate_vocabulary()\n+\n         self._check_vocabulary()\n \n         if sp.issparse(X):\n\nFrom 65ff2069e6d3be9b403eb87b22d6ec11fc6e0a34 Mon Sep 17 00:00:00 2001\nFrom: Maskani Filali Mohamed <maskani.mohamed@gmail.com>\nDate: Tue, 3 Apr 2018 12:07:54 -0400\nSubject: [PATCH 3/6] Remove custom vocab check in inverse_transform\n\n---\n sklearn/feature_extraction/text.py | 3 ---\n 1 file changed, 3 deletions(-)\n\ndiff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\nindex feca973dc7608..920a18b1fab5d 100644\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -951,9 +951,6 @@ def inverse_transform(self, X):\n         X_inv : list of arrays, len = n_samples\n             List of arrays of terms.\n         \"\"\"\n-        if not hasattr(self, 'vocabulary_'):\n-            self._validate_vocabulary()\n-\n         self._check_vocabulary()\n \n         if sp.issparse(X):\n\nFrom c7f32bc2f4e0bfb9804c84c766e6661886b6770e Mon Sep 17 00:00:00 2001\nFrom: Maskani Filali Mohamed <maskani.mohamed@gmail.com>\nDate: Tue, 3 Apr 2018 12:09:32 -0400\nSubject: [PATCH 4/6] Add test for custom vocabulary in get_feature_names\n\n---\n sklearn/feature_extraction/tests/test_text.py | 18 +++++++++++++++++-\n 1 file changed, 17 insertions(+), 1 deletion(-)\n\ndiff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex ff13cd6e00179..563f101ed235a 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -269,7 +269,7 @@ def test_countvectorizer_custom_vocabulary_pipeline():\n     assert_equal(X.shape[1], len(what_we_like))\n \n \n-def test_countvectorizer_custom_vocabulary_repeated_indeces():\n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n     vocab = {\"pizza\": 0, \"beer\": 0}\n     try:\n         CountVectorizer(vocabulary=vocab)\n@@ -543,7 +543,9 @@ def test_feature_names():\n \n     # test for Value error on unfitted/empty vocabulary\n     assert_raises(ValueError, cv.get_feature_names)\n+    assert_false(cv.fixed_vocabulary_)\n \n+    # test for vocabulary learned from data\n     X = cv.fit_transform(ALL_FOOD_DOCS)\n     n_samples, n_features = X.shape\n     assert_equal(len(cv.vocabulary_), n_features)\n@@ -557,6 +559,20 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+    # test for custom vocabulary\n+    vocab = ['beer', 'burger', 'celeri', 'coke', 'pizza',\n+             'salad', 'sparkling', 'tomato', 'water']\n+\n+    cv = CountVectorizer(vocabulary=vocab)\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['beer', 'burger', 'celeri', 'coke', 'pizza',\n+                        'salad', 'sparkling', 'tomato', 'water'],\n+                        feature_names)\n+    assert_true(cv.fixed_vocabulary_)\n+\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n+\n \n def test_vectorizer_max_features():\n     vec_factories = (\n\nFrom 6b63776a337995002d7de622a7643d73f36291b4 Mon Sep 17 00:00:00 2001\nFrom: Maskani Filali Mohamed <maskani.mohamed@gmail.com>\nDate: Tue, 3 Apr 2018 12:33:00 -0400\nSubject: [PATCH 5/6] Fix pep8\n\n---\n sklearn/feature_extraction/tests/test_text.py | 5 ++---\n 1 file changed, 2 insertions(+), 3 deletions(-)\n\ndiff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 563f101ed235a..756748dc35e30 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -565,9 +565,8 @@ def test_feature_names():\n \n     cv = CountVectorizer(vocabulary=vocab)\n     feature_names = cv.get_feature_names()\n-    assert_array_equal(['beer', 'burger', 'celeri', 'coke', 'pizza',\n-                        'salad', 'sparkling', 'tomato', 'water'],\n-                        feature_names)\n+    assert_array_equal(['beer', 'burger', 'celeri', 'coke', 'pizza', 'salad',\n+                        'sparkling', 'tomato', 'water'], feature_names)\n     assert_true(cv.fixed_vocabulary_)\n \n     for idx, name in enumerate(feature_names):\n\nFrom 78c53e4f769236057497ccf123ac3adb895ba80e Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Tom=20Dupr=C3=A9=20la=20Tour?= <tom.dupre-la-tour@m4x.org>\nDate: Wed, 25 Apr 2018 19:56:16 +0200\nSubject: [PATCH 6/6] whats new entry\n\n---\n doc/whats_new/v0.20.rst | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a/doc/whats_new/v0.20.rst b/doc/whats_new/v0.20.rst\nindex dfba937a361ad..a5a0b3feec3b7 100644\n--- a/doc/whats_new/v0.20.rst\n+++ b/doc/whats_new/v0.20.rst\n@@ -140,6 +140,10 @@ Preprocessing\n \n - :class:`preprocessing.PolynomialFeatures` now supports sparse input.\n   :issue:`10452` by :user:`Aman Dalmia <dalmia>` and `Joel Nothman`_.\n+  \n+- Enable the call to :meth:`get_feature_names` in unfitted\n+  :class:`feature_extraction.text.CountVectorizer` initialized with a\n+  vocabulary. :issue:`10908` by :user:`chkoar <chkoar>`.\n \n Model evaluation and meta-estimators\n \n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/10908"}