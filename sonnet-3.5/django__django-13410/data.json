{"instance_id": "django__django-13410", "score": "C", "diff": "diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b905..5a79ef73d0 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,16 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+            try:\n+                ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return ret is None\n+            except OSError:\n+                return False\n             return ret == 0\n", "gold_standard_diff": "From 7be6a6a4d665061e8bc6a741b16ff92353f5d19e Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Fri, 11 Sep 2020 11:48:40 +0200\nSubject: [PATCH] Fixed #31989 -- Fixed return value of\n django.core.files.locks.lock()/unlock() on POSIX systems.\n\n---\n django/core/files/locks.py | 11 +++++++----\n docs/releases/3.2.txt      |  4 ++++\n tests/files/tests.py       | 18 +++++++++++++++++-\n 3 files changed, 28 insertions(+), 5 deletions(-)\n\ndiff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b90576..b02faaa181e5 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,12 @@ def unlock(f):\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except BlockingIOError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+            return True\ndiff --git a/docs/releases/3.2.txt b/docs/releases/3.2.txt\nindex 30cc6a401ae2..e77785f8e2a8 100644\n--- a/docs/releases/3.2.txt\n+++ b/docs/releases/3.2.txt\n@@ -504,6 +504,10 @@ Miscellaneous\n   distinguishes inherited field instances across models. Additionally, the\n   ordering of such fields is now defined.\n \n+* The undocumented ``django.core.files.locks.lock()`` function now returns\n+  ``False`` if the file cannot be locked, instead of raising\n+  :exc:`BlockingIOError`.\n+\n .. _deprecated-features-3.2:\n \n Features deprecated in 3.2\ndiff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 047c8935b827..dfb007f2fcd5 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -8,7 +8,7 @@\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -169,6 +169,22 @@ def test_io_wrapper(self):\n             test_file.seek(0)\n             self.assertEqual(test_file.read(), (content * 2).encode())\n \n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n \n class NoNameFileTestCase(unittest.TestCase):\n     \"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13410"}