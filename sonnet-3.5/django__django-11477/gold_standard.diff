From b24e7638465867a206f3654f61b6fb0abcc96022 Mon Sep 17 00:00:00 2001
From: daniel a rios <misterrios@gmail.com>
Date: Wed, 19 Jun 2019 10:59:55 +0200
Subject: [PATCH 1/3] Added tests for terminated path with optional arguments
 in django.urls.reverse().

---
 tests/urlpatterns_reverse/tests.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py
index ba8cbedf4a0d..d26923ab9d11 100644
--- a/tests/urlpatterns_reverse/tests.py
+++ b/tests/urlpatterns_reverse/tests.py
@@ -180,6 +180,8 @@
     ('named_optional', '/optional/1/', [], {'arg1': 1}),
     ('named_optional', '/optional/1/2/', [1, 2], {}),
     ('named_optional', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),
+    ('named_optional_terminated', '/optional/1/', [1], {}),
+    ('named_optional_terminated', '/optional/1/', [], {'arg1': 1}),
     ('named_optional_terminated', '/optional/1/2/', [1, 2], {}),
     ('named_optional_terminated', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),
     ('hardcoded', '/hardcoded/', [], {}),

From d640c71fa35640b4c13107c074be2f52c52ad861 Mon Sep 17 00:00:00 2001
From: daniel a rios <misterrios@gmail.com>
Date: Fri, 21 Jun 2019 17:37:41 +0200
Subject: [PATCH 2/3] Refs #26431 -- Added tests for resolving URL and
 translate_url() with provided optional parameter.

---
 tests/i18n/patterns/tests.py        | 5 +++++
 tests/i18n/patterns/urls/default.py | 5 +++++
 tests/urlpatterns/path_urls.py      | 1 +
 tests/urlpatterns/tests.py          | 6 ++++++
 4 files changed, 17 insertions(+)

diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py
index 6ed2c4ffebd6..8e77d3fd8fb9 100644
--- a/tests/i18n/patterns/tests.py
+++ b/tests/i18n/patterns/tests.py
@@ -158,6 +158,11 @@ def test_translate_url_utility(self):
             # path() URL pattern
             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')
             self.assertEqual(translation.get_language(), 'en')
+            # URL with parameters.
+            self.assertEqual(
+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),
+                '/nl/with-arguments/regular-argument/optional.html',
+            )
 
         with translation.override('nl'):
             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')
diff --git a/tests/i18n/patterns/urls/default.py b/tests/i18n/patterns/urls/default.py
index b0c2f2585ec4..22fff166b3cf 100644
--- a/tests/i18n/patterns/urls/default.py
+++ b/tests/i18n/patterns/urls/default.py
@@ -15,6 +15,11 @@
 urlpatterns += i18n_patterns(
     path('prefixed/', view, name='prefixed'),
     path('prefixed.xml', view, name='prefixed_xml'),
+    re_path(
+        _(r'^with-arguments/(?P<argument>[\w-]+)/(?:(?P<optional>[\w-]+).html)?$'),
+        view,
+        name='with-arguments',
+    ),
     re_path(_(r'^users/$'), view, name='users'),
     re_path(_(r'^account/'), include('i18n.patterns.urls.namespace', namespace='account')),
 )
diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py
index 953fe6b6d735..b40801b39d35 100644
--- a/tests/urlpatterns/path_urls.py
+++ b/tests/urlpatterns/path_urls.py
@@ -11,6 +11,7 @@
     path('users/<id>/', views.empty_view, name='user-with-id'),
     path('included_urls/', include('urlpatterns.included_urls')),
     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),
+    re_path(r'^regex_optional/(?P<arg1>\d+)/(?:(?P<arg2>\d+)/)?', views.empty_view, name='regex_optional'),
     path('', include('urlpatterns.more_urls')),
     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),
 ]
diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py
index 74503e451879..66212d7df8c8 100644
--- a/tests/urlpatterns/tests.py
+++ b/tests/urlpatterns/tests.py
@@ -54,6 +54,12 @@ def test_re_path(self):
         self.assertEqual(match.kwargs, {'pk': '1'})
         self.assertEqual(match.route, '^regex/(?P<pk>[0-9]+)/$')
 
+    def test_re_path_with_optional_parameter(self):
+        match = resolve('/regex_optional/1/2/')
+        self.assertEqual(match.url_name, 'regex_optional')
+        self.assertEqual(match.kwargs, {'arg1': '1', 'arg2': '2'})
+        self.assertEqual(match.route, r'^regex_optional/(?P<arg1>\d+)/(?:(?P<arg2>\d+)/)?')
+
     def test_path_lookup_with_inclusion(self):
         match = resolve('/included_urls/extra/something/')
         self.assertEqual(match.url_name, 'inner-extra')

From 76b993a117b61c41584e95149a67d8a1e9f49dd1 Mon Sep 17 00:00:00 2001
From: daniel a rios <misterrios@gmail.com>
Date: Wed, 24 Apr 2019 22:51:47 +0200
Subject: [PATCH 3/3] Fixed #26431 -- Prevented django.urls.resolve() from
 returning missing optional parameters.

Previous behavior was inconsistent with django.urls.reverse() and
caused that translate_url() created an incorrect URL when an optional
parameter was missing.
---
 django/urls/resolvers.py     |  2 +-
 tests/i18n/patterns/tests.py |  4 ++++
 tests/urlpatterns/tests.py   | 16 ++++++++++++----
 3 files changed, 17 insertions(+), 5 deletions(-)

diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index af0508f94e3d..247e3680c0ae 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -153,7 +153,7 @@ def match(self, path):
             # If there are any named groups, use those as kwargs, ignoring
             # non-named groups. Otherwise, pass all non-named arguments as
             # positional arguments.
-            kwargs = match.groupdict()
+            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}
             args = () if kwargs else match.groups()
             return path[match.end():], args, kwargs
         return None
diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py
index 8e77d3fd8fb9..866bcb0bb812 100644
--- a/tests/i18n/patterns/tests.py
+++ b/tests/i18n/patterns/tests.py
@@ -159,6 +159,10 @@ def test_translate_url_utility(self):
             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')
             self.assertEqual(translation.get_language(), 'en')
             # URL with parameters.
+            self.assertEqual(
+                translate_url('/en/with-arguments/regular-argument/', 'nl'),
+                '/nl/with-arguments/regular-argument/',
+            )
             self.assertEqual(
                 translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),
                 '/nl/with-arguments/regular-argument/optional.html',
diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py
index 66212d7df8c8..214739f678c3 100644
--- a/tests/urlpatterns/tests.py
+++ b/tests/urlpatterns/tests.py
@@ -55,10 +55,18 @@ def test_re_path(self):
         self.assertEqual(match.route, '^regex/(?P<pk>[0-9]+)/$')
 
     def test_re_path_with_optional_parameter(self):
-        match = resolve('/regex_optional/1/2/')
-        self.assertEqual(match.url_name, 'regex_optional')
-        self.assertEqual(match.kwargs, {'arg1': '1', 'arg2': '2'})
-        self.assertEqual(match.route, r'^regex_optional/(?P<arg1>\d+)/(?:(?P<arg2>\d+)/)?')
+        for url, kwargs in (
+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),
+            ('/regex_optional/1/', {'arg1': '1'}),
+        ):
+            with self.subTest(url=url):
+                match = resolve(url)
+                self.assertEqual(match.url_name, 'regex_optional')
+                self.assertEqual(match.kwargs, kwargs)
+                self.assertEqual(
+                    match.route,
+                    r'^regex_optional/(?P<arg1>\d+)/(?:(?P<arg2>\d+)/)?',
+                )
 
     def test_path_lookup_with_inclusion(self):
         match = resolve('/included_urls/extra/something/')
