diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..8920bef18 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                 best_params = self._get_parameters()
                 best_n_iter = n_iter
 
-        # Always do a final e-step to guarantee that the labels returned by
-        # fit_predict(X) are always consistent with fit(X).predict(X)
-        # for any value of max_iter and tol (and any random_state).
-        _, log_resp = self._e_step(X)
-
         if not self.converged_:
             warnings.warn('Initialization %d did not converge. '
                           'Try different init parameters, '
@@ -273,6 +268,11 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
 
+        # Always do a final e-step to guarantee that the labels returned by
+        # fit_predict(X) are always consistent with fit(X).predict(X)
+        # for any value of max_iter and tol (and any random_state).
+        _, log_resp = self._e_step(X)
+
         return log_resp.argmax(axis=1)
 
     def _e_step(self, X):
diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py
index 4d549ccd7..51bfa173c 100644
--- a/sklearn/mixture/tests/test_gaussian_mixture.py
+++ b/sklearn/mixture/tests/test_gaussian_mixture.py
@@ -598,6 +598,21 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):
         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)
 
 
+def test_gaussian_mixture_fit_predict_n_init():
+    # Test that fit_predict and predict are consistent when n_init > 1
+    rng = np.random.RandomState(42)
+    X = rng.randn(1000, 5)
+    
+    # Test with various n_init values
+    for n_init in [1, 5, 10]:
+        for covar_type in COVARIANCE_TYPE:
+            gm = GaussianMixture(n_components=3, n_init=n_init, 
+                                covariance_type=covar_type, random_state=rng)
+            labels_fit_predict = gm.fit_predict(X)
+            labels_predict = gm.predict(X)
+            assert_array_equal(labels_fit_predict, labels_predict)
+
+
 def test_gaussian_mixture_fit():
     # recover the ground truth
     rng = np.random.RandomState(0)
diff --git a/test_bayesian_issue.py b/test_bayesian_issue.py
new file mode 100644
index 000000000..d517c161b
--- /dev/null
+++ b/test_bayesian_issue.py
@@ -0,0 +1,17 @@
+from sklearn.mixture import BayesianGaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+np.random.seed(42)
+X = np.random.randn(1000, 5)
+
+print('BayesianGaussianMixture with n_init=5')
+bgm = BayesianGaussianMixture(n_components=5, n_init=5)
+c1 = bgm.fit_predict(X)
+c2 = bgm.predict(X)
+try:
+    assert_array_equal(c1, c2)
+    print('Arrays are equal')
+except AssertionError as e:
+    print('Arrays are NOT equal')
+    print('Number of differences:', np.sum(c1 != c2))
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..e7706d656
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,44 @@
+from sklearn.mixture import GaussianMixture, BayesianGaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+# Test with different seeds and settings
+test_cases = [
+    {'n_components': 3, 'n_init': 5, 'seed': 0},
+    {'n_components': 5, 'n_init': 10, 'seed': 42},
+    {'n_components': 2, 'n_init': 3, 'seed': 123},
+]
+
+for case in test_cases:
+    print(f"\nTesting with n_components={case['n_components']}, n_init={case['n_init']}, seed={case['seed']}")
+    
+    np.random.seed(case['seed'])
+    X = np.random.randn(500, 4)
+    
+    # Test GaussianMixture
+    gm = GaussianMixture(n_components=case['n_components'], 
+                         n_init=case['n_init'], 
+                         random_state=case['seed'])
+    c1 = gm.fit_predict(X)
+    c2 = gm.predict(X)
+    
+    try:
+        assert_array_equal(c1, c2)
+        print("  GaussianMixture: PASS")
+    except AssertionError:
+        print(f"  GaussianMixture: FAIL (differences: {np.sum(c1 != c2)})")
+    
+    # Test BayesianGaussianMixture
+    bgm = BayesianGaussianMixture(n_components=case['n_components'], 
+                                  n_init=case['n_init'], 
+                                  random_state=case['seed'])
+    c1 = bgm.fit_predict(X)
+    c2 = bgm.predict(X)
+    
+    try:
+        assert_array_equal(c1, c2)
+        print("  BayesianGaussianMixture: PASS")
+    except AssertionError:
+        print(f"  BayesianGaussianMixture: FAIL (differences: {np.sum(c1 != c2)})")
+
+print("\nAll tests completed!")
diff --git a/test_issue.py b/test_issue.py
new file mode 100644
index 000000000..ff99d0b39
--- /dev/null
+++ b/test_issue.py
@@ -0,0 +1,23 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy as np
+
+np.random.seed(42)
+X = np.random.randn(1000, 5)
+
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
+
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+try:
+    assert_array_equal(c1, c2)
+    print('Arrays are equal')
+except AssertionError as e:
+    print('Arrays are NOT equal')
+    print('Number of differences:', np.sum(c1 != c2))
diff --git a/test_original_issue.py b/test_original_issue.py
new file mode 100644
index 000000000..4102b232b
--- /dev/null
+++ b/test_original_issue.py
@@ -0,0 +1,15 @@
+from sklearn.mixture import GaussianMixture
+from sklearn.utils.testing import assert_array_equal
+import numpy
+X = numpy.random.randn(1000,5)
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1,c2)
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1,c2)
+print('All tests passed!')
