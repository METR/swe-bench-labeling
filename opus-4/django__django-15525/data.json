{"instance_id": "django__django-15525", "score": "C", "diff": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex da85cb4b92..a53789b578 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,7 +336,11 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        # Create a temporary instance for computing the natural key\n+        # Set the database so that foreign key lookups use the correct database\n+        temp_instance = Model(**data)\n+        temp_instance._state.db = db\n+        natural_key = temp_instance.natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\ndiff --git a/test_loaddata_natural_keys.py b/test_loaddata_natural_keys.py\nnew file mode 100644\nindex 0000000000..4c26f6b245\n--- /dev/null\n+++ b/test_loaddata_natural_keys.py\n@@ -0,0 +1,81 @@\n+from django.db import models\n+from django.test import TestCase, TransactionTestCase\n+from django.core import serializers\n+from django.core.management import call_command\n+from io import StringIO\n+import json\n+\n+\n+class AuthorManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n+\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+    \n+    objects = AuthorManager()\n+    \n+    def natural_key(self):\n+        return (self.name,)\n+    \n+    class Meta:\n+        app_label = 'test_loaddata'\n+\n+\n+class BookManager(models.Manager):\n+    def get_by_natural_key(self, title, author):\n+        return self.get(title=title, author__name=author)\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=255)\n+    author = models.ForeignKey(Author, models.CASCADE, related_name=\"books\")\n+    \n+    objects = BookManager()\n+    \n+    def natural_key(self):\n+        return (self.title,) + self.author.natural_key()\n+    \n+    natural_key.dependencies = [\"test_loaddata.Author\"]\n+    \n+    class Meta:\n+        app_label = 'test_loaddata'\n+        unique_together = [[\"title\", \"author\"]]\n+\n+\n+class LoadDataNaturalKeysTest(TransactionTestCase):\n+    databases = {'default', 'other'}\n+    \n+    def test_loaddata_with_natural_keys_on_non_default_db(self):\n+        # Create test data\n+        data = [\n+            {\n+                \"model\": \"test_loaddata.author\",\n+                \"fields\": {\n+                    \"name\": \"JR Tolkien\"\n+                }\n+            },\n+            {\n+                \"model\": \"test_loaddata.book\",\n+                \"fields\": {\n+                    \"title\": \"The Ring\",\n+                    \"author\": [\"JR Tolkien\"]\n+                }\n+            }\n+        ]\n+        \n+        json_data = json.dumps(data)\n+        \n+        # Load data into 'other' database\n+        out = StringIO()\n+        call_command('loaddata', '-', format='json', database='other', \n+                     stdin=StringIO(json_data), stdout=out)\n+        \n+        # Verify data was loaded correctly\n+        from django.db import connections\n+        with connections['other'].cursor() as cursor:\n+            cursor.execute(\"SELECT COUNT(*) FROM test_loaddata_author\")\n+            self.assertEqual(cursor.fetchone()[0], 1)\n+            cursor.execute(\"SELECT COUNT(*) FROM test_loaddata_book\")\n+            self.assertEqual(cursor.fetchone()[0], 1)\ndiff --git a/test_natural_key_fix.py b/test_natural_key_fix.py\nnew file mode 100644\nindex 0000000000..ed45ec0e75\n--- /dev/null\n+++ b/test_natural_key_fix.py\n@@ -0,0 +1,119 @@\n+\"\"\"\n+Test script to verify the natural key foreign key fix\n+\"\"\"\n+import os\n+import sys\n+import django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'\n+\n+# Add the tests directory to the path\n+sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'tests'))\n+\n+import django\n+django.setup()\n+\n+from django.test import TransactionTestCase\n+from django.db import models, connections\n+from django.core import serializers\n+import json\n+from io import StringIO\n+\n+\n+class AuthorManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n+\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+    \n+    objects = AuthorManager()\n+    \n+    def natural_key(self):\n+        return (self.name,)\n+    \n+    class Meta:\n+        app_label = 'fixtures'\n+\n+\n+class BookManager(models.Manager):\n+    def get_by_natural_key(self, title, author):\n+        return self.get(title=title, author__name=author)\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=255)\n+    author = models.ForeignKey(Author, models.CASCADE, related_name=\"books\")\n+    \n+    objects = BookManager()\n+    \n+    def natural_key(self):\n+        return (self.title,) + self.author.natural_key()\n+    \n+    natural_key.dependencies = [\"fixtures.Author\"]\n+    \n+    class Meta:\n+        app_label = 'fixtures'\n+        unique_together = [[\"title\", \"author\"]]\n+\n+\n+# Create tables in both databases\n+print(\"Creating tables...\")\n+with connections['default'].schema_editor() as editor:\n+    editor.create_model(Author)\n+    editor.create_model(Book)\n+    \n+with connections['other'].schema_editor() as editor:\n+    editor.create_model(Author)\n+    editor.create_model(Book)\n+\n+# Test data\n+data = [\n+    {\n+        \"model\": \"fixtures.author\",\n+        \"fields\": {\n+            \"name\": \"JR Tolkien\"\n+        }\n+    },\n+    {\n+        \"model\": \"fixtures.book\", \n+        \"fields\": {\n+            \"title\": \"The Ring\",\n+            \"author\": [\"JR Tolkien\"]\n+        }\n+    }\n+]\n+\n+json_data = json.dumps(data)\n+\n+print(\"\\nTesting loaddata with natural keys on non-default database...\")\n+try:\n+    # This should work now with our fix\n+    objs = list(serializers.deserialize(\"json\", json_data, using=\"other\"))\n+    print(f\"\u2713 Successfully deserialized {len(objs)} objects\")\n+    \n+    for obj in objs:\n+        obj.save()\n+    print(\"\u2713 Successfully saved objects to 'other' database\")\n+    \n+    # Verify data was saved to the correct database\n+    authors_in_other = Author.objects.using('other').count()\n+    books_in_other = Book.objects.using('other').count()\n+    print(f\"\u2713 Verified: {authors_in_other} authors and {books_in_other} books in 'other' database\")\n+    \n+    # Ensure nothing was saved to default database\n+    authors_in_default = Author.objects.using('default').count()\n+    books_in_default = Book.objects.using('default').count()\n+    print(f\"\u2713 Verified: {authors_in_default} authors and {books_in_default} books in 'default' database (should be 0)\")\n+    \n+    print(\"\\n\u2705 TEST PASSED: Natural keys with foreign keys now work correctly on non-default databases!\")\n+    \n+except Exception as e:\n+    print(f\"\\n\u274c TEST FAILED: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\n+\n+# Clean up\n+print(\"\\nCleaning up...\")\n+Author.objects.using('other').all().delete()\n+Book.objects.using('other').all().delete()\ndiff --git a/test_natural_key_fk_fix.py b/test_natural_key_fk_fix.py\nnew file mode 100644\nindex 0000000000..670e3a1c22\n--- /dev/null\n+++ b/test_natural_key_fk_fix.py\n@@ -0,0 +1,122 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        },\n+        'other': {\n+            'ENGINE': 'django.db.backends.sqlite3', \n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django.db import models, connections\n+from django.core import serializers\n+from io import StringIO\n+import json\n+\n+\n+class AuthorManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n+\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+    \n+    objects = AuthorManager()\n+    \n+    def natural_key(self):\n+        return (self.name,)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        db_table = 'testapp_author'\n+\n+\n+class BookManager(models.Manager):\n+    def get_by_natural_key(self, title, author):\n+        return self.get(title=title, author__name=author)\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=255)\n+    author = models.ForeignKey(Author, models.CASCADE, related_name=\"books\")\n+    \n+    objects = BookManager()\n+    \n+    def natural_key(self):\n+        return (self.title,) + self.author.natural_key()\n+    \n+    natural_key.dependencies = [\"testapp.Author\"]\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+        db_table = 'testapp_book'\n+        unique_together = [[\"title\", \"author\"]]\n+\n+\n+# Create tables\n+with connections['default'].schema_editor() as editor:\n+    editor.create_model(Author)\n+    editor.create_model(Book)\n+\n+with connections['other'].schema_editor() as editor:\n+    editor.create_model(Author)\n+    editor.create_model(Book)\n+\n+# Test data\n+data = [\n+    {\n+        \"model\": \"testapp.author\",\n+        \"fields\": {\n+            \"name\": \"JR Tolkien\"\n+        }\n+    },\n+    {\n+        \"model\": \"testapp.book\", \n+        \"fields\": {\n+            \"title\": \"The Ring\",\n+            \"author\": [\"JR Tolkien\"]\n+        }\n+    }\n+]\n+\n+json_data = json.dumps(data)\n+\n+print(\"Testing loaddata with natural keys on non-default database...\")\n+try:\n+    # This should fail with the current implementation\n+    objs = list(serializers.deserialize(\"json\", json_data, using=\"other\"))\n+    print(f\"Deserialized {len(objs)} objects\")\n+    for obj in objs:\n+        obj.save()\n+    print(\"SUCCESS: Data loaded into 'other' database\")\n+    \n+    # Verify\n+    with connections['other'].cursor() as cursor:\n+        cursor.execute(\"SELECT COUNT(*) FROM testapp_author\")\n+        print(f\"Authors in 'other' DB: {cursor.fetchone()[0]}\")\n+        cursor.execute(\"SELECT COUNT(*) FROM testapp_book\") \n+        print(f\"Books in 'other' DB: {cursor.fetchone()[0]}\")\n+        \n+except Exception as e:\n+    print(f\"FAILED with error: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/test_natural_key_fk_nondefault_db.py b/test_natural_key_fk_nondefault_db.py\nnew file mode 100644\nindex 0000000000..02c6892762\n--- /dev/null\n+++ b/test_natural_key_fk_nondefault_db.py\n@@ -0,0 +1,136 @@\n+\"\"\"\n+Test to verify natural keys with foreign keys work on non-default databases\n+\"\"\"\n+import os\n+import django\n+from django.test import TransactionTestCase\n+from django.db import models\n+from django.core import serializers\n+import json\n+\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+django.setup()\n+\n+\n+class NaturalKeyFKTests(TransactionTestCase):\n+    databases = {'default', 'other'}\n+    \n+    def setUp(self):\n+        # Define models dynamically for the test\n+        class AuthorManager(models.Manager):\n+            def get_by_natural_key(self, name):\n+                return self.get(name=name)\n+\n+        class Author(models.Model):\n+            name = models.CharField(max_length=255, unique=True)\n+            \n+            objects = AuthorManager()\n+            \n+            def natural_key(self):\n+                return (self.name,)\n+            \n+            class Meta:\n+                app_label = 'fixtures'\n+                db_table = 'test_nk_author'\n+\n+        class BookManager(models.Manager):\n+            def get_by_natural_key(self, title, author):\n+                return self.get(title=title, author__name=author)\n+\n+        class Book(models.Model):\n+            title = models.CharField(max_length=255)\n+            author = models.ForeignKey(Author, models.CASCADE, related_name=\"test_books\")\n+            \n+            objects = BookManager()\n+            \n+            def natural_key(self):\n+                # This is the problematic case - natural key accesses foreign key\n+                return (self.title,) + self.author.natural_key()\n+            \n+            natural_key.dependencies = [\"fixtures.Author\"]\n+            \n+            class Meta:\n+                app_label = 'fixtures'\n+                db_table = 'test_nk_book'\n+                unique_together = [[\"title\", \"author\"]]\n+\n+        self.Author = Author\n+        self.Book = Book\n+        \n+        # Create tables\n+        from django.db import connections\n+        with connections['default'].schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Book)\n+            \n+        with connections['other'].schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Book)\n+\n+    def tearDown(self):\n+        # Clean up tables\n+        from django.db import connections\n+        with connections['default'].schema_editor() as editor:\n+            editor.delete_model(self.Book)\n+            editor.delete_model(self.Author)\n+            \n+        with connections['other'].schema_editor() as editor:\n+            editor.delete_model(self.Book)\n+            editor.delete_model(self.Author)\n+\n+    def test_natural_key_with_fk_on_non_default_db(self):\n+        \"\"\"Test that natural keys that access foreign keys work on non-default databases\"\"\"\n+        # Test data with natural keys\n+        data = [\n+            {\n+                \"model\": \"fixtures.author\",\n+                \"fields\": {\n+                    \"name\": \"JR Tolkien\"\n+                }\n+            },\n+            {\n+                \"model\": \"fixtures.book\",\n+                \"fields\": {\n+                    \"title\": \"The Lord of the Rings\",\n+                    \"author\": [\"JR Tolkien\"]  # Natural key reference\n+                }\n+            }\n+        ]\n+        \n+        json_data = json.dumps(data)\n+        \n+        # Deserialize and save to 'other' database\n+        # This should work with our fix (previously would fail with DoesNotExist)\n+        objs = list(serializers.deserialize(\"json\", json_data, using=\"other\"))\n+        \n+        # Save objects\n+        for obj in objs:\n+            obj.save()\n+        \n+        # Verify data was saved to correct database\n+        self.assertEqual(self.Author.objects.using('other').count(), 1)\n+        self.assertEqual(self.Book.objects.using('other').count(), 1)\n+        \n+        # Verify correct relationships\n+        book = self.Book.objects.using('other').get(title=\"The Lord of the Rings\")\n+        self.assertEqual(book.author.name, \"JR Tolkien\")\n+        \n+        # Ensure nothing was saved to default database\n+        self.assertEqual(self.Author.objects.using('default').count(), 0)\n+        self.assertEqual(self.Book.objects.using('default').count(), 0)\n+\n+\n+if __name__ == '__main__':\n+    # Run the test\n+    test = NaturalKeyFKTests()\n+    test.setUp()\n+    try:\n+        test.test_natural_key_with_fk_on_non_default_db()\n+        print(\"\u2705 TEST PASSED: Natural keys with foreign keys work correctly on non-default databases!\")\n+    except Exception as e:\n+        print(f\"\u274c TEST FAILED: {type(e).__name__}: {e}\")\n+        import traceback\n+        traceback.print_exc()\n+    finally:\n+        test.tearDown()\n", "gold_standard_diff": "From ed6db5354294b5492423027d60a60b787b6cdc42 Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Fri, 18 Mar 2022 20:56:10 +0100\nSubject: [PATCH 1/2] Fixed isolation of\n FeaturesTests.test_supports_json_field_operational_error().\n\n---\n tests/backends/sqlite/test_features.py | 5 +++--\n 1 file changed, 3 insertions(+), 2 deletions(-)\n\ndiff --git a/tests/backends/sqlite/test_features.py b/tests/backends/sqlite/test_features.py\nindex 50ccbbd3ccf9..5bc891f5eed9 100644\n--- a/tests/backends/sqlite/test_features.py\n+++ b/tests/backends/sqlite/test_features.py\n@@ -10,8 +10,9 @@ def test_supports_json_field_operational_error(self):\n         if hasattr(connection.features, \"supports_json_field\"):\n             del connection.features.supports_json_field\n         msg = \"unable to open database file\"\n-        with mock.patch(\n-            \"django.db.backends.base.base.BaseDatabaseWrapper.cursor\",\n+        with mock.patch.object(\n+            connection,\n+            \"cursor\",\n             side_effect=OperationalError(msg),\n         ):\n             with self.assertRaisesMessage(OperationalError, msg):\n\nFrom 4b8e4f506079419c7995107fad46416ee5add951 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Fran=C3=A7ois=20Granade?= <fgranade@lmad.eu>\nDate: Fri, 18 Mar 2022 11:17:54 +0100\nSubject: [PATCH 2/2] Fixed #33582 -- Fixed deserializing natural keys with\n foreing key dependencies in a multiple database setup.\n\n---\n django/core/serializers/base.py               |  4 +++-\n .../fixtures/nk_with_foreign_key.json         | 15 ++++++++++++++\n tests/fixtures_regress/models.py              | 20 +++++++++++++++++++\n tests/fixtures_regress/tests.py               | 20 +++++++++++++++++++\n 4 files changed, 58 insertions(+), 1 deletion(-)\n create mode 100644 tests/fixtures_regress/fixtures/nk_with_foreign_key.json\n\ndiff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex da85cb4b92ff..517d2cad851b 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,7 +336,9 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        obj = Model(**data)\n+        obj._state.db = db\n+        natural_key = obj.natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\ndiff --git a/tests/fixtures_regress/fixtures/nk_with_foreign_key.json b/tests/fixtures_regress/fixtures/nk_with_foreign_key.json\nnew file mode 100644\nindex 000000000000..3e24c189dfa5\n--- /dev/null\n+++ b/tests/fixtures_regress/fixtures/nk_with_foreign_key.json\n@@ -0,0 +1,15 @@\n+[\n+  {\n+    \"model\": \"fixtures_regress.person\",\n+    \"fields\": {\n+      \"name\": \"J.R.R. Tolkien\"\n+    }\n+  },\n+  {\n+    \"model\": \"fixtures_regress.naturalkeywithfkdependency\",\n+    \"fields\": {\n+      \"name\": \"The Lord of the Rings\",\n+      \"author\": [\"J.R.R. Tolkien\"]\n+    }\n+  }\n+]\ndiff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex bccf93f7c120..c82ebf387ec1 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -147,6 +147,26 @@ def __str__(self):\n         )\n \n \n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n+\n+\n class NKManager(models.Manager):\n     def get_by_natural_key(self, data):\n         return self.get(data=data)\ndiff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 61dd12754c7a..8c9228f67517 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -44,6 +44,7 @@\n     M2MSimpleCircularA,\n     M2MSimpleCircularB,\n     M2MThroughAB,\n+    NaturalKeyWithFKDependency,\n     NKChild,\n     Parent,\n     Person,\n@@ -791,6 +792,25 @@ def test_normal_pk(self):\n         )\n \n \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreing keys in dependencies works in a multiple\n+        database setup.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/15525"}