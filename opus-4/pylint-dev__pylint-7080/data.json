{"instance_id": "pylint-dev__pylint-7080", "score": "I", "diff": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..1f93254b2 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -610,11 +610,16 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        for file in files:\n+                            if file.endswith(\".py\"):\n+                                filepath = os.path.join(root, file)\n+                                if not _is_ignored_file(\n+                                    filepath,\n+                                    self.config.ignore,\n+                                    self.config.ignore_patterns,\n+                                    self.config.ignore_paths,\n+                                ):\n+                                    yield filepath\n             else:\n                 yield something\n \ndiff --git a/test_comprehensive_ignore_paths.py b/test_comprehensive_ignore_paths.py\nnew file mode 100644\nindex 000000000..04a735787\n--- /dev/null\n+++ b/test_comprehensive_ignore_paths.py\n@@ -0,0 +1,150 @@\n+#!/usr/bin/env python3\n+\"\"\"Comprehensive test of ignore-paths functionality with recursive option\"\"\"\n+\n+import os\n+import tempfile\n+import re\n+from pylint.lint.pylinter import PyLinter\n+\n+def test_ignore_paths():\n+    \"\"\"Test various ignore-paths scenarios\"\"\"\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        # Create directory structure\n+        # src/\n+        #   regular.py\n+        #   gen/\n+        #     generated.py\n+        #     subdir/\n+        #       another.py\n+        #   tests/\n+        #     test_file.py\n+        #   vendor/\n+        #     external.py\n+        \n+        src_dir = os.path.join(tmpdir, \"src\")\n+        os.makedirs(src_dir)\n+        \n+        # Regular files that should be checked\n+        with open(os.path.join(src_dir, \"regular.py\"), \"w\") as f:\n+            f.write(\"# regular file\\n\")\n+        \n+        # Files in gen/ that should be ignored\n+        gen_dir = os.path.join(src_dir, \"gen\")\n+        os.makedirs(gen_dir)\n+        with open(os.path.join(gen_dir, \"generated.py\"), \"w\") as f:\n+            f.write(\"# generated file\\n\")\n+        \n+        gen_subdir = os.path.join(gen_dir, \"subdir\")\n+        os.makedirs(gen_subdir)\n+        with open(os.path.join(gen_subdir, \"another.py\"), \"w\") as f:\n+            f.write(\"# another generated file\\n\")\n+        \n+        # Files in tests/ that should be checked\n+        tests_dir = os.path.join(src_dir, \"tests\")\n+        os.makedirs(tests_dir)\n+        with open(os.path.join(tests_dir, \"test_file.py\"), \"w\") as f:\n+            f.write(\"# test file\\n\")\n+        \n+        # Files in vendor/ that should be ignored\n+        vendor_dir = os.path.join(src_dir, \"vendor\")\n+        os.makedirs(vendor_dir)\n+        with open(os.path.join(vendor_dir, \"external.py\"), \"w\") as f:\n+            f.write(\"# vendor file\\n\")\n+        \n+        # Change to temp directory\n+        os.chdir(tmpdir)\n+        \n+        # Test 1: Basic ignore-paths\n+        print(\"Test 1: Basic ignore-paths with gen directory\")\n+        linter = PyLinter()\n+        linter.config.ignore_paths = [re.compile(r\"^src/gen/.*$\")]\n+        linter.config.ignore = []\n+        linter.config.ignore_patterns = []\n+        \n+        discovered = list(linter._discover_files([\"src/\"]))\n+        print(f\"  Discovered {len(discovered)} files:\")\n+        for f in sorted(discovered):\n+            print(f\"    {f}\")\n+        \n+        assert \"src/regular.py\" in discovered\n+        assert \"src/tests/test_file.py\" in discovered\n+        assert \"src/vendor/external.py\" in discovered\n+        assert not any(\"gen\" in f for f in discovered), \"gen files should be ignored\"\n+        print(\"  \u2713 gen/ files correctly ignored\")\n+        \n+        # Test 2: Multiple ignore patterns\n+        print(\"\\nTest 2: Multiple ignore patterns (gen and vendor)\")\n+        linter2 = PyLinter()\n+        linter2.config.ignore_paths = [\n+            re.compile(r\"^src/gen/.*$\"),\n+            re.compile(r\"^src/vendor/.*$\")\n+        ]\n+        linter2.config.ignore = []\n+        linter2.config.ignore_patterns = []\n+        \n+        discovered2 = list(linter2._discover_files([\"src/\"]))\n+        print(f\"  Discovered {len(discovered2)} files:\")\n+        for f in sorted(discovered2):\n+            print(f\"    {f}\")\n+        \n+        assert \"src/regular.py\" in discovered2\n+        assert \"src/tests/test_file.py\" in discovered2\n+        assert not any(\"gen\" in f for f in discovered2), \"gen files should be ignored\"\n+        assert not any(\"vendor\" in f for f in discovered2), \"vendor files should be ignored\"\n+        print(\"  \u2713 Both gen/ and vendor/ files correctly ignored\")\n+        \n+        # Test 3: Test with packages (directories with __init__.py)\n+        print(\"\\nTest 3: Package directories (with __init__.py)\")\n+        \n+        # Create a package\n+        pkg_dir = os.path.join(src_dir, \"mypackage\")\n+        os.makedirs(pkg_dir)\n+        with open(os.path.join(pkg_dir, \"__init__.py\"), \"w\") as f:\n+            f.write(\"# package init\\n\")\n+        with open(os.path.join(pkg_dir, \"module.py\"), \"w\") as f:\n+            f.write(\"# module in package\\n\")\n+        \n+        # Create an ignored package\n+        ignored_pkg = os.path.join(src_dir, \"gen_pkg\")\n+        os.makedirs(ignored_pkg)\n+        with open(os.path.join(ignored_pkg, \"__init__.py\"), \"w\") as f:\n+            f.write(\"# ignored package init\\n\")\n+        with open(os.path.join(ignored_pkg, \"module.py\"), \"w\") as f:\n+            f.write(\"# module in ignored package\\n\")\n+        \n+        linter3 = PyLinter()\n+        linter3.config.ignore_paths = [re.compile(r\"^src/gen_pkg.*$\")]\n+        linter3.config.ignore = []\n+        linter3.config.ignore_patterns = []\n+        \n+        discovered3 = list(linter3._discover_files([\"src/\"]))\n+        print(f\"  Discovered {len(discovered3)} files/packages:\")\n+        for f in sorted(discovered3):\n+            print(f\"    {f}\")\n+        \n+        assert any(\"mypackage\" in f for f in discovered3), \"mypackage should be discovered\"\n+        assert not any(\"gen_pkg\" in f for f in discovered3), \"gen_pkg should be ignored\"\n+        print(\"  \u2713 Package handling works correctly with ignore-paths\")\n+        \n+        # Test 4: Absolute paths\n+        print(\"\\nTest 4: Absolute path patterns\")\n+        abs_pattern = os.path.join(tmpdir, \"src\", \"gen\", \".*\")\n+        # Escape backslashes for Windows paths\n+        abs_pattern = abs_pattern.replace(\"\\\\\", \"\\\\\\\\\")\n+        \n+        linter4 = PyLinter()\n+        linter4.config.ignore_paths = [re.compile(f\"^{abs_pattern}$\")]\n+        linter4.config.ignore = []\n+        linter4.config.ignore_patterns = []\n+        \n+        discovered4 = list(linter4._discover_files([os.path.join(tmpdir, \"src\")]))\n+        has_gen = any(\"gen\" in f for f in discovered4)\n+        print(f\"  Pattern: ^{abs_pattern}$\")\n+        print(f\"  Has gen files: {has_gen}\")\n+        if has_gen:\n+            print(\"  Note: Absolute path pattern may need adjustment for this platform\")\n+        \n+        print(\"\\nAll tests completed!\")\n+\n+if __name__ == \"__main__\":\n+    test_ignore_paths()\ndiff --git a/test_discover_files.py b/test_discover_files.py\nnew file mode 100644\nindex 000000000..db60064c3\n--- /dev/null\n+++ b/test_discover_files.py\n@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+\"\"\"Direct test of the _discover_files method to see the bug\"\"\"\n+\n+import os\n+import tempfile\n+import re\n+from pylint.lint.pylinter import PyLinter\n+\n+# Create a temporary directory structure\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    # Create src directory\n+    src_dir = os.path.join(tmpdir, \"src\")\n+    os.makedirs(src_dir)\n+    \n+    # Create a regular Python file\n+    regular_file = os.path.join(src_dir, \"regular.py\")\n+    with open(regular_file, \"w\") as f:\n+        f.write(\"x = 1\\n\")\n+    \n+    # Create gen directory\n+    gen_dir = os.path.join(src_dir, \"gen\")\n+    os.makedirs(gen_dir)\n+    \n+    # Create a generated file that should be ignored\n+    gen_file = os.path.join(gen_dir, \"generated.py\")\n+    with open(gen_file, \"w\") as f:\n+        f.write(\"y = 2\\n\")\n+    \n+    # Create another test file in gen\n+    gen_file2 = os.path.join(gen_dir, \"another.py\")\n+    with open(gen_file2, \"w\") as f:\n+        f.write(\"z = 3\\n\")\n+    \n+    # Change to temp directory\n+    os.chdir(tmpdir)\n+    \n+    # Create a PyLinter instance with ignore-paths configuration\n+    linter = PyLinter()\n+    linter.config.ignore_paths = [re.compile(r\"^src/gen/.*$\")]\n+    linter.config.ignore = []\n+    linter.config.ignore_patterns = []\n+    \n+    # Test _discover_files\n+    discovered = list(linter._discover_files([\"src/\"]))\n+    \n+    print(\"Discovered files:\")\n+    for f in discovered:\n+        print(f\"  {f}\")\n+    \n+    # Check results\n+    print(\"\\nAnalysis:\")\n+    if any(\"gen\" in f for f in discovered):\n+        print(\"BUG CONFIRMED: Files in src/gen/ were discovered despite ignore-paths!\")\n+        print(\"Files in gen that should have been ignored:\")\n+        for f in discovered:\n+            if \"gen\" in f:\n+                print(f\"  {f}\")\n+    else:\n+        print(\"No bug: Files in src/gen/ were correctly ignored.\")\ndiff --git a/test_ignore_paths_recursive.py b/test_ignore_paths_recursive.py\nnew file mode 100644\nindex 000000000..fbc505f18\n--- /dev/null\n+++ b/test_ignore_paths_recursive.py\n@@ -0,0 +1,63 @@\n+#!/usr/bin/env python3\n+\"\"\"Test script to reproduce the ignore-paths issue with --recursive=y\"\"\"\n+\n+import os\n+import tempfile\n+import subprocess\n+\n+# Create a temporary directory structure\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    # Create src directory\n+    src_dir = os.path.join(tmpdir, \"src\")\n+    os.makedirs(src_dir)\n+    \n+    # Create a regular Python file\n+    regular_file = os.path.join(src_dir, \"regular.py\")\n+    with open(regular_file, \"w\") as f:\n+        f.write(\"# This file should be checked\\nx = 1\\n\")\n+    \n+    # Create gen directory\n+    gen_dir = os.path.join(src_dir, \"gen\")\n+    os.makedirs(gen_dir)\n+    \n+    # Create a generated file that should be ignored\n+    gen_file = os.path.join(gen_dir, \"generated.py\")\n+    with open(gen_file, \"w\") as f:\n+        f.write(\"# This file should be ignored\\n\")\n+        f.write(\"#\\n\")  # Empty comment that would trigger R2044\n+        f.write(\"# Bad indentation and long line\" + \"x\" * 200 + \"\\n\")\n+        f.write(\"x = 1\\n\")\n+    \n+    # Create pyproject.toml with ignore-paths configuration\n+    pyproject_file = os.path.join(tmpdir, \"pyproject.toml\")\n+    with open(pyproject_file, \"w\") as f:\n+        f.write('''[tool.pylint.MASTER]\n+ignore-paths = [\n+  # Auto generated\n+  \"^src/gen/.*$\",\n+]\n+\n+[tool.pylint.'MESSAGES CONTROL']\n+enable = [\"empty-comment\", \"line-too-long\"]\n+''')\n+    \n+    # Change to temp directory\n+    os.chdir(tmpdir)\n+    \n+    # Test 1: Run without recursive (should not check gen directory)\n+    print(\"Test 1: Running pylint without --recursive\")\n+    result1 = subprocess.run([\"pylint\", \"src/\"], capture_output=True, text=True)\n+    print(\"Output:\", result1.stdout)\n+    print(\"Errors:\", result1.stderr)\n+    \n+    # Test 2: Run with recursive (should also ignore gen directory but currently doesn't)\n+    print(\"\\nTest 2: Running pylint with --recursive=y\")\n+    result2 = subprocess.run([\"pylint\", \"--recursive=y\", \"src/\"], capture_output=True, text=True)\n+    print(\"Output:\", result2.stdout)\n+    print(\"Errors:\", result2.stderr)\n+    \n+    # Check if gen/generated.py was checked (it shouldn't be)\n+    if \"generated.py\" in result2.stdout:\n+        print(\"\\nBUG CONFIRMED: Files in src/gen/ were checked despite ignore-paths configuration!\")\n+    else:\n+        print(\"\\nNo bug: Files in src/gen/ were correctly ignored.\")\ndiff --git a/test_issue_reproduction.py b/test_issue_reproduction.py\nnew file mode 100644\nindex 000000000..2740c90e8\n--- /dev/null\n+++ b/test_issue_reproduction.py\n@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+\"\"\"Reproduce the exact issue from the bug report\"\"\"\n+\n+import os\n+import tempfile\n+import subprocess\n+\n+# Create the exact directory structure from the issue\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    # Create src directory\n+    src_dir = os.path.join(tmpdir, \"src\")\n+    os.makedirs(src_dir)\n+    \n+    # Create region_selection.py (should be checked)\n+    with open(os.path.join(src_dir, \"region_selection.py\"), \"w\") as f:\n+        f.write(\"\"\"# region_selection.py\n+def my_function():\n+    # This function has too many local variables (17)\n+    var1 = 1\n+    var2 = 2\n+    var3 = 3\n+    var4 = 4\n+    var5 = 5\n+    var6 = 6\n+    var7 = 7\n+    var8 = 8\n+    var9 = 9\n+    var10 = 10\n+    var11 = 11\n+    var12 = 12\n+    var13 = 13\n+    var14 = 14\n+    var15 = 15\n+    var16 = 16\n+    var17 = 17\n+    return var1 + var2\n+\"\"\")\n+    \n+    # Create gen directory\n+    gen_dir = os.path.join(src_dir, \"gen\")\n+    os.makedirs(gen_dir)\n+    \n+    # Create about.py in gen (should be ignored)\n+    with open(os.path.join(gen_dir, \"about.py\"), \"w\") as f:\n+        f.write(\"\"\"# about.py - auto-generated file\n+#\n+# Empty comment above should trigger R2044\n+#\n+class Ui_AboutAutoSplitWidget(object):  # Should trigger various warnings\n+    def setupUi(self, AboutAutoSplitWidget):  # Bad naming\n+        self.ok_button = None  # Should trigger W0201\n+\"\"\")\n+    \n+    # Create pyproject.toml with ignore-paths configuration\n+    pyproject_file = os.path.join(tmpdir, \"pyproject.toml\")\n+    with open(pyproject_file, \"w\") as f:\n+        f.write('''[tool.pylint.MASTER]\n+ignore-paths = [\n+  # Auto generated\n+  \"^src/gen/.*$\",\n+]\n+''')\n+    \n+    # Change to temp directory\n+    os.chdir(tmpdir)\n+    \n+    # Run pylint with --recursive=y\n+    print(\"Running: pylint --recursive=y src/\")\n+    print(\"=\" * 60)\n+    result = subprocess.run([\"pylint\", \"--recursive=y\", \"src/\"], capture_output=True, text=True)\n+    \n+    # Check the output\n+    output = result.stdout\n+    print(output)\n+    \n+    # Analysis\n+    print(\"\\n\" + \"=\" * 60)\n+    print(\"ANALYSIS:\")\n+    \n+    if \"region_selection.py\" in output:\n+        print(\"\u2713 region_selection.py was checked (as expected)\")\n+    else:\n+        print(\"\u2717 region_selection.py was NOT checked (unexpected)\")\n+    \n+    if \"about.py\" in output or \"gen/about.py\" in output or \"gen\\\\about.py\" in output:\n+        print(\"\u2717 about.py in gen/ was checked (BUG - it should be ignored!)\")\n+    else:\n+        print(\"\u2713 about.py in gen/ was correctly ignored\")\n+    \n+    # Count violations\n+    region_violations = output.count(\"region_selection.py\")\n+    gen_violations = output.count(\"about.py\") + output.count(\"gen/about.py\") + output.count(\"gen\\\\about.py\")\n+    \n+    print(f\"\\nViolations found:\")\n+    print(f\"  - region_selection.py: {region_violations} (should be > 0)\")\n+    print(f\"  - gen/*.py files: {gen_violations} (should be 0)\")\n+    \n+    if gen_violations == 0:\n+        print(\"\\n\u2713 SUCCESS: The bug has been fixed!\")\n+    else:\n+        print(\"\\n\u2717 FAILURE: The bug still exists!\")\n", "gold_standard_diff": "diff --git a/doc/whatsnew/2/2.14/full.rst b/doc/whatsnew/2/2.14/full.rst\nindex 77d8bf9d71..953f17688a 100644\n--- a/doc/whatsnew/2/2.14/full.rst\n+++ b/doc/whatsnew/2/2.14/full.rst\n@@ -5,6 +5,11 @@ What's New in Pylint 2.14.4?\n ----------------------------\n Release date: TBA\n \n+* Fixed an issue where scanning `.` directory recursively with ``--ignore-path=^path/to/dir`` is not\n+  ignoring the `path/to/dir` directory.\n+\n+  Closes #6964\n+\n * Fixed regression that didn't allow quoted ``init-hooks`` in option files.\n \n   Closes #7006\ndiff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 5cacc0371e..289e1afce5 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -52,6 +52,7 @@ def _is_ignored_file(\n     ignore_list_re: list[Pattern[str]],\n     ignore_list_paths_re: list[Pattern[str]],\n ) -> bool:\n+    element = os.path.normpath(element)\n     basename = os.path.basename(element)\n     return (\n         basename in ignore_list\ndiff --git a/tests/test_self.py b/tests/test_self.py\nindex c18a04aef6..d745161c54 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,27 @@ def test_recursive_current_dir(self):\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_current_dir(self) -> None:\n+        \"\"\"Tests that path is normalized before checked that is ignored. GitHub issue #6964\"\"\"\n+        with _test_sys_path():\n+            # pytest is including directory HERE/regrtest_data to sys.path which causes\n+            # astroid to believe that directory is a package.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n", "gold_standard_pr_link": "https://github.com/pylint-dev/pylint/pull/7080"}