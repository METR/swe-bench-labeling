diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index da2dea6f57..d295cdfcd6 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -3588,6 +3588,56 @@ class _AxesBase(martist.Artist):
 
         Examples
         --------
+        """
+        if ymin is not None:
+            if bottom is not None:
+                raise ValueError("Cannot pass both `ymin` and `bottom`")
+            bottom = ymin
+        if ymax is not None:
+            if top is not None:
+                raise ValueError("Cannot pass both `ymax` and `top`")
+            top = ymax
+
+        if bottom is None and top is None:
+            return self.get_ylim()
+
+        if bottom is None:
+            bottom = self.get_ylim()[0]
+        if top is None:
+            top = self.get_ylim()[1]
+
+        # If the scale is log, convert the limits to log space
+        if self.get_yscale() == "log":
+            if bottom <= 0 or top <= 0:
+                raise ValueError("Cannot set non-positive limits on a log scale")
+            bottom = np.log10(bottom)
+            top = np.log10(top)
+
+        if bottom > top:
+            bottom, top = top, bottom
+            self.invert_yaxis()
+        else:
+            self.invert_yaxis(False)
+
+        # Convert back to linear space if the scale is log
+        if self.get_yscale() == "log":
+            bottom = 10 ** bottom
+            top = 10 ** top
+
+        self.yaxis.set_bounds(bottom, top)
+        self.yaxis.set_view_interval(bottom, top, ignore=True)
+
+        if auto is not None:
+            self.set_autoscaley_on(auto)
+
+        if emit:
+            self.yaxis.axes.stale = True
+            self.yaxis._set_scale(self.yaxis._scale)
+            self.yaxis.axes.viewLim.intervaly = (bottom, top)
+            self.yaxis.axes.autoscale_view(scaley=True)
+
+        return bottom, top
+
         >>> set_ylim(bottom, top)
         >>> set_ylim((bottom, top))
         >>> bottom, top = set_ylim(bottom, top)
