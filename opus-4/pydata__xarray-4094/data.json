{"instance_id": "pydata__xarray-4094", "score": "C", "diff": "diff --git a/debug_empty_sample_dims.py b/debug_empty_sample_dims.py\nnew file mode 100644\nindex 00000000..d097ae8c\n--- /dev/null\n+++ b/debug_empty_sample_dims.py\n@@ -0,0 +1,50 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Test with empty sample_dims\n+arr = xr.DataArray(\n+    np.arange(3),\n+    coords=[(\"x\", [0, 1, 2])],\n+)\n+data = xr.Dataset({\"a\": arr, \"b\": arr * 2})\n+\n+print(\"Original dataset:\")\n+print(data)\n+\n+# Stack with empty sample_dims\n+stacked = data.to_stacked_array('y', sample_dims=[])\n+print(\"\\nStacked array:\")\n+print(stacked)\n+print(\"\\nStacked dims:\", stacked.dims)\n+print(\"Stacked coords:\", list(stacked.coords))\n+print(\"Stacked indexes:\", list(stacked.indexes.keys()))\n+\n+# Look at what happens when we select\n+idx = stacked.indexes['y']\n+print(f\"\\nMultiIndex levels: {idx.levels}\")\n+print(f\"MultiIndex names: {idx.names}\")\n+\n+level_number = idx._get_level_number(0)\n+variables = idx.levels[level_number]\n+variable_dim = idx.names[level_number]\n+\n+print(f\"\\nlevel_number: {level_number}\")\n+print(f\"variables: {variables}\")\n+print(f\"variable_dim: {variable_dim}\")\n+\n+# Test selecting a variable\n+selected = stacked.sel({variable_dim: 'a'})\n+print(f\"\\nSelected variable 'a':\")\n+print(f\"  Shape: {selected.shape}\")\n+print(f\"  Dims: {selected.dims}\")\n+print(f\"  Coords: {list(selected.coords)}\")\n+\n+squeezed = selected.squeeze(drop=True)\n+print(f\"\\nAfter squeeze:\")\n+print(f\"  Shape: {squeezed.shape}\")\n+print(f\"  Dims: {squeezed.dims}\")\n+print(f\"  Coords: {list(squeezed.coords)}\")\n+\n+# Check if 'y' is in coords to drop\n+print(f\"\\n'y' in squeezed.coords: {'y' in squeezed.coords}\")\n+print(f\"'y' in squeezed.dims: {'y' in squeezed.dims}\")\ndiff --git a/debug_issue.py b/debug_issue.py\nnew file mode 100644\nindex 00000000..e7c3f31e\n--- /dev/null\n+++ b/debug_issue.py\n@@ -0,0 +1,46 @@\n+import xarray as xr\n+import numpy as np\n+import pandas as pd\n+\n+# Reproduce the issue with debugging\n+arr = xr.DataArray(\n+    np.arange(3),\n+    coords=[(\"x\", [0, 1, 2])],\n+)\n+data = xr.Dataset({\"a\": arr, \"b\": arr})\n+print(\"Original dataset:\")\n+print(data)\n+\n+stacked = data.to_stacked_array('y', sample_dims=['x'])\n+print(\"\\nStacked array:\")\n+print(stacked)\n+print(\"\\nStacked array dimensions:\", stacked.dims)\n+print(\"Stacked array coords:\", list(stacked.coords))\n+\n+# Look at the MultiIndex\n+idx = stacked.indexes['y']\n+print(f\"\\nMultiIndex levels: {idx.levels}\")\n+print(f\"MultiIndex names: {idx.names}\")\n+\n+# Try to understand what happens in to_unstacked_dataset\n+level_number = idx._get_level_number(0)\n+variables = idx.levels[level_number]\n+variable_dim = idx.names[level_number]\n+\n+print(f\"\\nlevel_number: {level_number}\")\n+print(f\"variables: {variables}\")\n+print(f\"variable_dim: {variable_dim}\")\n+\n+# Test selecting each variable\n+for k in variables:\n+    print(f\"\\nSelecting {variable_dim}={k}\")\n+    selected = stacked.sel({variable_dim: k})\n+    print(f\"  Shape: {selected.shape}\")\n+    print(f\"  Dims: {selected.dims}\")\n+    print(f\"  Coords: {list(selected.coords)}\")\n+    \n+    squeezed = selected.squeeze(drop=True)\n+    print(f\"  After squeeze - Shape: {squeezed.shape}\")\n+    print(f\"  After squeeze - Dims: {squeezed.dims}\")\n+    print(f\"  After squeeze - Coords: {list(squeezed.coords)}\")\n+    print(f\"  After squeeze - Coord 'y' in coords: {'y' in squeezed.coords}\")\ndiff --git a/debug_issue2.py b/debug_issue2.py\nnew file mode 100644\nindex 00000000..4bd924df\n--- /dev/null\n+++ b/debug_issue2.py\n@@ -0,0 +1,33 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Reproduce the issue with more debugging\n+arr = xr.DataArray(\n+    np.arange(3),\n+    coords=[(\"x\", [0, 1, 2])],\n+)\n+data = xr.Dataset({\"a\": arr, \"b\": arr})\n+\n+stacked = data.to_stacked_array('y', sample_dims=['x'])\n+\n+# Look at the y coordinate after selection\n+for var in ['a', 'b']:\n+    selected = stacked.sel(variable=var)\n+    squeezed = selected.squeeze(drop=True)\n+    print(f\"\\nVariable '{var}':\")\n+    print(f\"  y coord value: {squeezed.coords['y'].values}\")\n+    print(f\"  y coord dims: {squeezed.coords['y'].dims}\")\n+    \n+# Try creating a dataset manually\n+data_dict = {}\n+for var in ['a', 'b']:\n+    selected = stacked.sel(variable=var)\n+    squeezed = selected.squeeze(drop=True)\n+    data_dict[var] = squeezed\n+    \n+print(\"\\nTrying to create Dataset from data_dict:\")\n+try:\n+    result = xr.Dataset(data_dict)\n+    print(\"Success!\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 00000000..51be4b90\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,22 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Reproduce the issue\n+arr = xr.DataArray(\n+    np.arange(3),\n+    coords=[(\"x\", [0, 1, 2])],\n+)\n+data = xr.Dataset({\"a\": arr, \"b\": arr})\n+print(\"Original dataset:\")\n+print(data)\n+\n+stacked = data.to_stacked_array('y', sample_dims=['x'])\n+print(\"\\nStacked array:\")\n+print(stacked)\n+\n+try:\n+    unstacked = stacked.to_unstacked_dataset('y')\n+    print(\"\\nUnstacked dataset:\")\n+    print(unstacked)\n+except Exception as e:\n+    print(f\"\\nError: {type(e).__name__}: {e}\")\ndiff --git a/test_roundtrip.py b/test_roundtrip.py\nnew file mode 100644\nindex 00000000..7443b280\n--- /dev/null\n+++ b/test_roundtrip.py\n@@ -0,0 +1,39 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Test the roundtrip\n+arr = xr.DataArray(\n+    np.arange(3),\n+    coords=[(\"x\", [0, 1, 2])],\n+)\n+data = xr.Dataset({\"a\": arr, \"b\": arr})\n+\n+stacked = data.to_stacked_array('y', sample_dims=['x'])\n+unstacked = stacked.to_unstacked_dataset('y')\n+\n+print(\"Original dataset:\")\n+print(data)\n+print(\"\\nUnstacked dataset:\")\n+print(unstacked)\n+print(\"\\nAre they identical?\", data.identical(unstacked))\n+\n+# Test with multiple dimensions\n+print(\"\\n\" + \"=\"*50)\n+print(\"Testing with multiple dimensions:\")\n+\n+arr2d = xr.DataArray(\n+    np.arange(12).reshape(3, 4),\n+    coords=[(\"x\", [0, 1, 2]), (\"z\", list(\"abcd\"))]\n+)\n+data2d = xr.Dataset({\"var1\": arr2d, \"var2\": arr2d * 2})\n+\n+print(\"\\nOriginal 2D dataset:\")\n+print(data2d)\n+\n+stacked2d = data2d.to_stacked_array('y', sample_dims=['x', 'z'])\n+print(\"\\nStacked 2D array shape:\", stacked2d.shape)\n+\n+unstacked2d = stacked2d.to_unstacked_dataset('y')\n+print(\"\\nUnstacked 2D dataset:\")\n+print(unstacked2d)\n+print(\"\\nAre they identical?\", data2d.identical(unstacked2d))\ndiff --git a/test_single_dim_fix.py b/test_single_dim_fix.py\nnew file mode 100644\nindex 00000000..83a1c44f\n--- /dev/null\n+++ b/test_single_dim_fix.py\n@@ -0,0 +1,68 @@\n+import pytest\n+import xarray as xr\n+import numpy as np\n+from xarray.tests import assert_identical\n+\n+\n+class TestToUnstackedDatasetSingleDim:\n+    \"\"\"Test cases for the single-dimension variable bug fix\"\"\"\n+    \n+    def test_to_stacked_array_to_unstacked_dataset_single_dim(self):\n+        \"\"\"Test roundtrip for single-dimension variables.\"\"\"\n+        # This is the issue reported - single dimension variables\n+        arr = xr.DataArray(\n+            np.arange(3),\n+            coords=[(\"x\", [0, 1, 2])],\n+        )\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        \n+        # Stack and unstack  \n+        stacked = data.to_stacked_array('y', sample_dims=['x'])\n+        unstacked = stacked.to_unstacked_dataset('y')\n+        \n+        # Check roundtrip\n+        assert_identical(data, unstacked)\n+\n+    def test_to_stacked_array_to_unstacked_dataset_empty_sample_dims(self):\n+        \"\"\"Test roundtrip when sample_dims is empty (all dims are stacked).\"\"\"\n+        # Single dimension case with empty sample_dims\n+        arr = xr.DataArray(\n+            np.arange(3),\n+            coords=[(\"x\", [0, 1, 2])],\n+        )\n+        data = xr.Dataset({\"a\": arr, \"b\": arr * 2})\n+        \n+        # Stack with empty sample_dims\n+        stacked = data.to_stacked_array('y', sample_dims=[])\n+        unstacked = stacked.to_unstacked_dataset('y')\n+        \n+        # Check roundtrip\n+        assert_identical(data, unstacked)\n+        \n+    def test_original_multidim_cases_still_work(self):\n+        \"\"\"Ensure the fix doesn't break existing multi-dimensional cases.\"\"\"\n+        # 2D case\n+        arr2d = xr.DataArray(\n+            np.arange(12).reshape(3, 4),\n+            coords=[(\"x\", [0, 1, 2]), (\"z\", list(\"abcd\"))]\n+        )\n+        data2d = xr.Dataset({\"var1\": arr2d, \"var2\": arr2d * 2})\n+        \n+        stacked2d = data2d.to_stacked_array('y', sample_dims=['x', 'z'])\n+        unstacked2d = stacked2d.to_unstacked_dataset('y')\n+        \n+        assert_identical(data2d, unstacked2d)\n+\n+if __name__ == \"__main__\":\n+    # Run tests\n+    test = TestToUnstackedDatasetSingleDim()\n+    test.test_to_stacked_array_to_unstacked_dataset_single_dim()\n+    print(\"\u2713 Single dimension test passed\")\n+    \n+    test.test_to_stacked_array_to_unstacked_dataset_empty_sample_dims()\n+    print(\"\u2713 Empty sample_dims test passed\")\n+    \n+    test.test_original_multidim_cases_still_work()\n+    print(\"\u2713 Multi-dimensional test passed\")\n+    \n+    print(\"\\nAll tests passed!\")\ndiff --git a/test_single_dim_roundtrip.py b/test_single_dim_roundtrip.py\nnew file mode 100644\nindex 00000000..4adb3bc5\n--- /dev/null\n+++ b/test_single_dim_roundtrip.py\n@@ -0,0 +1,45 @@\n+import pytest\n+import xarray as xr\n+import numpy as np\n+from xarray.tests import assert_identical\n+\n+def test_to_stacked_array_to_unstacked_dataset_single_dim():\n+    \"\"\"Test roundtrip for single-dimension variables.\"\"\"\n+    # This is the issue reported - single dimension variables\n+    arr = xr.DataArray(\n+        np.arange(3),\n+        coords=[(\"x\", [0, 1, 2])],\n+    )\n+    data = xr.Dataset({\"a\": arr, \"b\": arr})\n+    \n+    # Stack and unstack  \n+    stacked = data.to_stacked_array('y', sample_dims=['x'])\n+    unstacked = stacked.to_unstacked_dataset('y')\n+    \n+    # Check roundtrip\n+    assert_identical(data, unstacked)\n+\n+def test_to_stacked_array_to_unstacked_dataset_empty_sample_dims():\n+    \"\"\"Test roundtrip when sample_dims is empty (all dims are stacked).\"\"\"\n+    # Single dimension case with empty sample_dims\n+    arr = xr.DataArray(\n+        np.arange(3),\n+        coords=[(\"x\", [0, 1, 2])],\n+    )\n+    data = xr.Dataset({\"a\": arr, \"b\": arr * 2})\n+    \n+    # Stack with empty sample_dims\n+    stacked = data.to_stacked_array('y', sample_dims=[])\n+    unstacked = stacked.to_unstacked_dataset('y')\n+    \n+    # Check roundtrip\n+    assert_identical(data, unstacked)\n+\n+if __name__ == \"__main__\":\n+    test_to_stacked_array_to_unstacked_dataset_single_dim()\n+    print(\"Single dimension test passed!\")\n+    \n+    test_to_stacked_array_to_unstacked_dataset_empty_sample_dims()\n+    print(\"Empty sample_dims test passed!\")\n+    \n+    print(\"\\nAll tests passed!\")\ndiff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..f002a2dd 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,14 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # after squeezing, we need to drop the stacked coordinate \n+            # to avoid conflicts when merging into a dataset\n+            squeezed = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only drop the stacked dim if it's still in the coordinates\n+            if dim in squeezed.coords:\n+                data_dict[k] = squeezed.drop_vars(dim)\n+            else:\n+                data_dict[k] = squeezed\n \n         # unstacked dataset\n         return Dataset(data_dict)\n", "gold_standard_diff": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex c1440ec1108..126ea28d416 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -160,6 +160,8 @@ Bug fixes\n   By `Mathias Hauser <https://github.com/mathause>`_.\n - Fix html repr in untrusted notebooks: fallback to plain text repr. (:pull:`4053`)\n   By `Benoit Bovy <https://github.com/benbovy>`_.\n+- Fix :py:meth:`DataArray.to_unstacked_dataset` for single-dimension variables. (:issue:`4049`)\n+  By `Deepak Cherian <https://github.com/dcherian>`_\n - Fix :py:func:`open_rasterio` for ``WarpedVRT`` with specified ``src_crs``. (:pull:`4104`)\n   By `Dave Cole <https://github.com/dtpc>`_.\n \ndiff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df874953b..3be9bb79c60 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,7 @@ def to_unstacked_dataset(self, dim, level=0):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k}, drop=True).squeeze(drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\ndiff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 9c8d40724da..9d2623d99e8 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3031,6 +3031,14 @@ def test_to_stacked_array_dtype_dims(self):\n         assert y.dims == (\"x\", \"features\")\n \n     def test_to_stacked_array_to_unstacked_dataset(self):\n+\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n         # make a two dimensional dataset\n         a, b = create_test_stacked_array()\n         D = xr.Dataset({\"a\": a, \"b\": b})\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/4094"}