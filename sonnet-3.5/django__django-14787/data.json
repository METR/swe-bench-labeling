{"instance_id": "django__django-14787", "score": "I", "diff": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..ba80b98094 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -47,6 +47,15 @@ def _multi_decorate(decorators, method):\n         _update_method_wrapper(_wrapper, dec)\n     # Preserve any existing attributes of 'method', including the name.\n     update_wrapper(_wrapper, method)\n+    \n+    # Preserve wrapper assignments\n+    if hasattr(method, '__wrapped__'):\n+        _wrapper.__wrapped__ = method.__wrapped__\n+    elif isinstance(method, partial):\n+        _wrapper.__wrapped__ = method.func\n+    else:\n+        _wrapper.__wrapped__ = method\n+    \n     return _wrapper\n \n \n", "gold_standard_diff": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c76e..69aca10a4d56 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,7 +37,7 @@ def _wrapper(self, *args, **kwargs):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = wraps(method)(partial(method.__get__(self, type(self))))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\ndiff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 46b01c18521f..e496e2c79015 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,6 +425,29 @@ class Test:\n                 def __module__(cls):\n                     return \"tests\"\n \n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n \n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14787"}