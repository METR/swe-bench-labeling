{"instance_id": "django__django-11999", "score": "I", "diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff673..9d701a6009 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -939,6 +939,12 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n \n     def _get_FIELD_display(self, field):\n+        # Check if there's a custom method defined for this field\n+        custom_method = getattr(self, f'get_{field.name}_display', None)\n+        if custom_method and callable(custom_method):\n+            return custom_method()\n+        \n+        # If no custom method, use the default implementation\n         value = getattr(self, field.attname)\n         # force_str() to coerce lazy strings.\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n", "gold_standard_diff": "From 2d38eb0ab9f78d68c083a5b78b1eca39027b279a Mon Sep 17 00:00:00 2001\nFrom: Carlton Gibson <carlton.gibson@noumenal.es>\nDate: Thu, 31 Oct 2019 11:34:56 +0100\nSubject: [PATCH] Fixed #30931 -- Restored ability to override\n Model.get_FIELD_display().\n\nThanks Sergey Fedoseev for the implementation idea.\n\nRegression in a68ea231012434b522ce45c513d84add516afa60.\n---\n django/db/models/fields/__init__.py |  8 ++++++--\n docs/releases/2.2.7.txt             |  3 +++\n tests/model_fields/tests.py         | 10 ++++++++++\n 3 files changed, 19 insertions(+), 2 deletions(-)\n\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex ee45bb941ebe..fe550169bd95 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,8 +763,12 @@ def contribute_to_class(self, cls, name, private_only=False):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            setattr(cls, 'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self))\n+            if not hasattr(cls, 'get_%s_display' % self.name):\n+                setattr(\n+                    cls,\n+                    'get_%s_display' % self.name,\n+                    partialmethod(cls._get_FIELD_display, field=self),\n+                )\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\ndiff --git a/docs/releases/2.2.7.txt b/docs/releases/2.2.7.txt\nindex cf1f52a685e7..537508225b32 100644\n--- a/docs/releases/2.2.7.txt\n+++ b/docs/releases/2.2.7.txt\n@@ -21,3 +21,6 @@ Bugfixes\n * Fixed migrations crash on PostgreSQL when adding an\n   :class:`~django.db.models.Index` with fields ordering and\n   :attr:`~.Index.opclasses` (:ticket:`30903`).\n+\n+* Restored the ability to override\n+  :meth:`~django.db.models.Model.get_FOO_display` (:ticket:`30931`).\ndiff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 0d6e930b06a4..a3b805409c55 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,6 +168,16 @@ def test_get_FIELD_display_translated(self):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_iterator_choices(self):\n         \"\"\"\n         get_choices() works with Iterators.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11999"}