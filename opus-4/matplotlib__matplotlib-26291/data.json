{"instance_id": "matplotlib__matplotlib-26291", "score": "C", "diff": "diff --git a/bug_test.png b/bug_test.png\nnew file mode 100644\nindex 0000000000..9458d4343e\nBinary files /dev/null and b/bug_test.png differ\ndiff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d35051074..59bcafc4d9 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -70,6 +70,9 @@ class AnchoredLocatorBase(AnchoredOffsetbox):\n \n     def __call__(self, ax, renderer):\n         self.axes = ax\n+        self.figure = ax.figure\n+        if renderer is None:\n+            renderer = self.figure._get_renderer()\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\n         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)\ndiff --git a/test.png b/test.png\nnew file mode 100644\nindex 0000000000..ebd310be7e\nBinary files /dev/null and b/test.png differ\ndiff --git a/test1.png b/test1.png\nnew file mode 100644\nindex 0000000000..ebd310be7e\nBinary files /dev/null and b/test1.png differ\ndiff --git a/test2.png b/test2.png\nnew file mode 100644\nindex 0000000000..5536c9d315\nBinary files /dev/null and b/test2.png differ\ndiff --git a/test_bug.py b/test_bug.py\nnew file mode 100644\nindex 0000000000..1d7e425220\n--- /dev/null\n+++ b/test_bug.py\n@@ -0,0 +1,6 @@\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+plt.savefig('test.png')\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..49eccfc78c\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,52 @@\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+# Test 1: Basic example from the issue\n+print(\"Test 1: Basic inset axes creation\")\n+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+plt.savefig('test1.png')\n+plt.close()\n+print(\"\u2713 Test 1 passed\")\n+\n+# Test 2: Multiple inset axes with different parameters\n+print(\"\\nTest 2: Multiple inset axes\")\n+fig, ax = plt.subplots()\n+# Create inset with percentage width/height\n+axins1 = inset_axes(ax, width=\"30%\", height=\"40%\", loc=3)\n+# Create inset with mixed units\n+axins2 = inset_axes(ax, width=\"30%\", height=1., loc=2)\n+# Create inset with borderpad\n+axins3 = inset_axes(ax, width=\"20%\", height=\"20%\", loc=4, borderpad=1)\n+plt.savefig('test2.png')\n+plt.close()\n+print(\"\u2713 Test 2 passed\")\n+\n+# Test 3: Test with None renderer directly\n+print(\"\\nTest 3: Direct None renderer test\")\n+fig, ax = plt.subplots()\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+locator = axins.get_axes_locator()\n+if locator:\n+    try:\n+        result = locator(axins, None)\n+        print(\"\u2713 Test 3 passed - locator works with None renderer\")\n+    except Exception as e:\n+        print(f\"\u2717 Test 3 failed: {e}\")\n+plt.close()\n+\n+# Test 4: Verify we can still use explicit renderer\n+print(\"\\nTest 4: Explicit renderer test\")\n+fig, ax = plt.subplots()\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+renderer = fig.canvas.get_renderer()\n+locator = axins.get_axes_locator()\n+if locator:\n+    try:\n+        result = locator(axins, renderer)\n+        print(\"\u2713 Test 4 passed - locator works with explicit renderer\")\n+    except Exception as e:\n+        print(f\"\u2717 Test 4 failed: {e}\")\n+plt.close()\n+\n+print(\"\\nAll tests completed successfully!\")\ndiff --git a/test_debug.py b/test_debug.py\nnew file mode 100644\nindex 0000000000..a358a40952\n--- /dev/null\n+++ b/test_debug.py\n@@ -0,0 +1,30 @@\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+# This is the code that reproduces the issue\n+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+\n+# Test the underlying issue\n+print(f\"axins.figure: {axins.figure}\")\n+print(f\"ax.figure: {ax.figure}\")\n+\n+# Test get_renderer\n+try:\n+    renderer = axins.figure._get_renderer()\n+    print(f\"Got renderer: {renderer}\")\n+except Exception as e:\n+    print(f\"Error getting renderer: {e}\")\n+\n+# Print call stack of the error\n+import traceback\n+locator = axins.get_axes_locator()\n+if locator:\n+    try:\n+        # This will fail with AttributeError\n+        result = locator(axins, None)\n+        print(\"Success: locator worked with None renderer\")\n+    except Exception as e:\n+        print(f\"Error: {e}\")\n+        print(\"Traceback:\")\n+        traceback.print_exc()\ndiff --git a/test_issue_fix.py b/test_issue_fix.py\nnew file mode 100644\nindex 0000000000..3aeabd0afb\n--- /dev/null\n+++ b/test_issue_fix.py\n@@ -0,0 +1,27 @@\n+\"\"\"\n+Test that reproduces the exact issue from the bug report and verifies it's fixed\n+\"\"\"\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+# This is the exact code from the bug report\n+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+\n+# The issue was that when saving or showing the figure, it would fail\n+# with AttributeError: 'NoneType' object has no attribute '_get_renderer'\n+# This should now work without errors\n+try:\n+    # Using savefig which triggers the same code path that caused the error\n+    plt.savefig('bug_test.png', bbox_inches='tight')\n+    print(\"SUCCESS: The bug has been fixed!\")\n+    print(\"The inset axes can now be created and the figure can be saved without errors.\")\n+except AttributeError as e:\n+    if \"'NoneType' object has no attribute '_get_renderer'\" in str(e):\n+        print(\"FAILED: The original bug still exists!\")\n+    else:\n+        print(f\"FAILED: Different AttributeError: {e}\")\n+except Exception as e:\n+    print(f\"FAILED: Unexpected error: {type(e).__name__}: {e}\")\n+finally:\n+    plt.close()\ndiff --git a/test_renderer_bug.py b/test_renderer_bug.py\nnew file mode 100644\nindex 0000000000..56ba5cfe6d\n--- /dev/null\n+++ b/test_renderer_bug.py\n@@ -0,0 +1,17 @@\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n+\n+# This is the code that reproduces the issue\n+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])\n+axins = inset_axes(ax, width=1.3, height=0.9)\n+\n+# Test the axes_locator with None renderer\n+locator = axins.get_axes_locator()\n+if locator:\n+    try:\n+        # This will fail with AttributeError\n+        result = locator(axins, None)\n+        print(\"Success: locator worked with None renderer\")\n+    except AttributeError as e:\n+        print(f\"Error: {e}\")\n+        print(\"This is the bug we need to fix!\")\n", "gold_standard_diff": "diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py\nindex 9d350510742f..46284c6802f1 100644\n--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py\n+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py\n@@ -69,6 +69,8 @@ def draw(self, renderer):\n         raise RuntimeError(\"No draw method should be called\")\n \n     def __call__(self, ax, renderer):\n+        if renderer is None:\n+            renderer = ax.figure._get_renderer()\n         self.axes = ax\n         bbox = self.get_window_extent(renderer)\n         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)\ndiff --git a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\nindex b61574787772..704130804c84 100644\n--- a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n@@ -1,4 +1,5 @@\n from itertools import product\n+import io\n import platform\n \n import matplotlib as mpl\n@@ -247,6 +248,15 @@ def test_inset_axes_complete():\n                          bbox_transform=ax.transAxes)\n \n \n+def test_inset_axes_tight():\n+    # gh-26287 found that inset_axes raised with bbox_inches=tight\n+    fig, ax = plt.subplots()\n+    inset_axes(ax, width=1.3, height=0.9)\n+\n+    f = io.BytesIO()\n+    fig.savefig(f, bbox_inches=\"tight\")\n+\n+\n @image_comparison(['fill_facecolor.png'], remove_text=True, style='mpl20')\n def test_fill_facecolor():\n     fig, ax = plt.subplots(1, 5)\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/26291"}