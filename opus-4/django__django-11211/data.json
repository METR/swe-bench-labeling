{"instance_id": "django__django-11211", "score": "C", "diff": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb48c..e68d2498ab 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -191,6 +191,12 @@ class GenericForeignKey(FieldCacheMixin):\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n+            # Convert foreign keys to the appropriate type for the model's primary key field\n+            model = ct.model_class()\n+            if model:\n+                pk_field = model._meta.pk\n+                # Convert each fkey value using the pk field's to_python method\n+                fkeys = [pk_field.to_python(fk) for fk in fkeys]\n             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n \n         # For doing the join in Python, we have to match both the FK val and the\n@@ -202,7 +208,9 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n+                # Use to_python to ensure the fk value is in the correct Python type\n+                fk_val = getattr(obj, self.fk_field)\n+                return (model._meta.pk.to_python(fk_val),\n                         model)\n \n         return (\ndiff --git a/test_uuid_prefetch.py b/test_uuid_prefetch.py\nnew file mode 100644\nindex 0000000000..21dd96ac97\n--- /dev/null\n+++ b/test_uuid_prefetch.py\n@@ -0,0 +1,80 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.test.utils import get_runner\n+\n+if __name__ == \"__main__\":\n+    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'\n+    django.setup()\n+    \n+    # Create the test\n+    from django.test import TestCase\n+    from django.contrib.contenttypes.fields import GenericForeignKey\n+    from django.contrib.contenttypes.models import ContentType\n+    from django.db import models\n+    import uuid\n+    \n+    class UUIDModel(models.Model):\n+        id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+        name = models.CharField(max_length=100)\n+        \n+        class Meta:\n+            app_label = 'contenttypes'\n+    \n+    class GFKModel(models.Model):\n+        content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n+        object_id = models.CharField(max_length=255)\n+        content_object = GenericForeignKey('content_type', 'object_id')\n+        \n+        class Meta:\n+            app_label = 'contenttypes'\n+    \n+    class TestUUIDPrefetch(TestCase):\n+        @classmethod\n+        def setUpClass(cls):\n+            super().setUpClass()\n+            # Create the tables\n+            from django.db import connection\n+            with connection.schema_editor() as schema_editor:\n+                schema_editor.create_model(UUIDModel)\n+                schema_editor.create_model(GFKModel)\n+        \n+        @classmethod\n+        def tearDownClass(cls):\n+            super().tearDownClass()\n+            # Drop the tables\n+            from django.db import connection\n+            with connection.schema_editor() as schema_editor:\n+                schema_editor.delete_model(GFKModel)\n+                schema_editor.delete_model(UUIDModel)\n+        \n+        def test_uuid_prefetch_related(self):\n+            # Create a UUID model instance\n+            uuid_obj = UUIDModel.objects.create(name=\"Test UUID Object\")\n+            self.assertIsInstance(uuid_obj.id, uuid.UUID)\n+            \n+            # Create a GFK model pointing to the UUID model\n+            gfk_obj = GFKModel()\n+            gfk_obj.content_object = uuid_obj\n+            gfk_obj.save()\n+            \n+            # Test direct access (should work)\n+            gfk_obj_direct = GFKModel.objects.get(pk=gfk_obj.pk)\n+            self.assertIsNotNone(gfk_obj_direct.content_object)\n+            self.assertEqual(gfk_obj_direct.content_object.name, \"Test UUID Object\")\n+            \n+            # Test prefetch_related (this is where the bug occurs)\n+            gfk_objs = GFKModel.objects.all().prefetch_related('content_object')\n+            for obj in gfk_objs:\n+                self.assertIsNotNone(obj.content_object, \"content_object should not be None when using prefetch_related\")\n+                self.assertEqual(obj.content_object.name, \"Test UUID Object\")\n+    \n+    # Run the test\n+    from django.test.runner import DiscoverRunner\n+    test_runner = DiscoverRunner(verbosity=2)\n+    failures = test_runner.run_tests([\"__main__.TestUUIDPrefetch\"])\n+    \n+    if failures:\n+        sys.exit(1)\n", "gold_standard_diff": "From 1d870ff901f5d05fe4bbe4c8b13101189ec7cba5 Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Wed, 10 Apr 2019 07:13:16 +0200\nSubject: [PATCH] Fixed #30343 -- Fixed prefetch_related() for\n GenericForeignKey when PK of related field is UUIDField.\n\n---\n django/db/models/fields/__init__.py |  4 ++++\n tests/prefetch_related/models.py    | 10 +++++++++-\n tests/prefetch_related/tests.py     | 14 ++++++++++----\n 3 files changed, 23 insertions(+), 5 deletions(-)\n\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 2307dcae2500..0d8612532df5 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2325,6 +2325,10 @@ def deconstruct(self):\n     def get_internal_type(self):\n         return \"UUIDField\"\n \n+    def get_prep_value(self, value):\n+        value = super().get_prep_value(value)\n+        return self.to_python(value)\n+\n     def get_db_prep_value(self, value, connection, prepared=False):\n         if value is None:\n             return None\ndiff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 091d600475ef..5540dfecf189 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -172,6 +172,11 @@ def __str__(self):\n         return self.tag\n \n \n+class Article(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=20)\n+\n+\n class Bookmark(models.Model):\n     url = models.URLField()\n     tags = GenericRelation(TaggedItem, related_query_name='bookmarks')\n@@ -188,9 +193,12 @@ class Comment(models.Model):\n     comment = models.TextField()\n \n     # Content-object field\n-    content_type = models.ForeignKey(ContentType, models.CASCADE)\n+    content_type = models.ForeignKey(ContentType, models.CASCADE, null=True)\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n+    content_type_uuid = models.ForeignKey(ContentType, models.CASCADE, related_name='comments', null=True)\n+    object_pk_uuid = models.TextField()\n+    content_object_uuid = GenericForeignKey(ct_field='content_type_uuid', fk_field='object_pk_uuid')\n \n     class Meta:\n         ordering = ['id']\ndiff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 24982dda1419..a32ac81d126f 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -7,10 +7,10 @@\n from django.test.utils import CaptureQueriesContext\n \n from .models import (\n-    Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book, Bookmark,\n-    BookReview, BookWithYear, Comment, Department, Employee, FavoriteAuthors,\n-    House, LessonEntry, ModelIterableSubclass, Person, Qualification, Reader,\n-    Room, TaggedItem, Teacher, WordEntry,\n+    Article, Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book,\n+    Bookmark, BookReview, BookWithYear, Comment, Department, Employee,\n+    FavoriteAuthors, House, LessonEntry, ModelIterableSubclass, Person,\n+    Qualification, Reader, Room, TaggedItem, Teacher, WordEntry,\n )\n \n \n@@ -885,6 +885,12 @@ def test_prefetch_GFK_nonint_pk(self):\n             qs = Comment.objects.prefetch_related('content_object')\n             [c.content_object for c in qs]\n \n+    def test_prefetch_GFK_uuid_pk(self):\n+        article = Article.objects.create(name='Django')\n+        Comment.objects.create(comment='awesome', content_object_uuid=article)\n+        qs = Comment.objects.prefetch_related('content_object_uuid')\n+        self.assertEqual([c.content_object_uuid for c in qs], [article])\n+\n     def test_traverse_GFK(self):\n         \"\"\"\n         A 'content_object' can be traversed with prefetch_related() and\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11211"}