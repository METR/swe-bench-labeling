{"instance_id": "sympy__sympy-23534", "score": "I", "diff": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex f4a555c13f..b284c3e2c5 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -617,6 +617,12 @@ def symbols(names, *, cls=Symbol, **args) -> Any:\n         >>> symbols('x', seq=True)\n         (x,)\n \n+    To create Function objects, use the cls parameter::\n+\n+        >>> q, u = symbols(('q:2', 'u:2'), cls=Function)\n+        >>> [type(s) for s in (q[0], q[1], u[0], u[1])]\n+        [Function, Function, Function, Function]\n+\n     To reduce typing, range syntax is supported to create indexed symbols.\n     Ranges are indicated by a colon and the type of range is determined by\n     the character to the right of the colon. If the character is a digit\n@@ -790,8 +796,11 @@ def literal(s):\n \n         return tuple(result)\n     else:\n+        if isinstance(names, tuple) and len(names) == 1 and isinstance(names[0], str):\n+            # Handle the case of a single-element tuple containing a string\n+            return symbols(names[0], cls=cls, **args)\n         for name in names:\n-            result.append(symbols(name, **args))\n+            result.append(symbols(name, cls=cls, **args))\n \n         return type(names)(result)\n \ndiff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 19494c2083..d175f57165 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -335,6 +335,15 @@ def test_symbols_become_functions_issue_3539():\n     raises(TypeError, lambda: alpha(2.5))\n     raises(TypeError, lambda: phi(t))\n \n+def test_symbols_single_element_tuple():\n+    from sympy import symbols, Function\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert all(isinstance(s, Function) for s in (q[0], q[1], u[0], u[1]))\n+    assert str(q[0]) == 'q0'\n+    assert str(q[1]) == 'q1'\n+    assert str(u[0]) == 'u0'\n+    assert str(u[1]) == 'u1'\n+\n \n def test_unicode():\n     xu = Symbol('x')\n", "gold_standard_diff": "From 9d96b1cf2232ad9c06efd22fade4ca13c0808cf4 Mon Sep 17 00:00:00 2001\nFrom: Qijia Liu <liumeo@pku.edu.cn>\nDate: Sat, 21 May 2022 20:10:19 -0400\nSubject: [PATCH] fix symbols recursion not pass cls parameter\n\n---\n sympy/core/symbol.py            | 2 +-\n sympy/core/tests/test_symbol.py | 2 ++\n 2 files changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex f4a555c13fe4..2aca8bab2736 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -791,7 +791,7 @@ def literal(s):\n         return tuple(result)\n     else:\n         for name in names:\n-            result.append(symbols(name, **args))\n+            result.append(symbols(name, cls=cls, **args))\n \n         return type(names)(result)\n \ndiff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 19494c208383..2b7bca85dc01 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,3 +1,4 @@\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n@@ -294,6 +295,7 @@ def test_symbols():\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n+    assert type(symbols(('q:2', 'u:2'), cls=Function)[0][0]) == UndefinedFunction  # issue 23532\n \n     # issue 6675\n     def sym(s):\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/23534"}