{"instance_id": "pytest-dev__pytest-6197", "score": "I", "diff": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 306e5f217..78836a78c 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -444,6 +444,8 @@ class Module(nodes.File, PyCollector):\n         return self._importtestmodule()\n \n     def collect(self):\n+        if self.obj is None:\n+            return []\n         self._inject_setup_module_fixture()\n         self._inject_setup_function_fixture()\n         self.session._fixturemanager.parsefactories(self)\n@@ -507,6 +509,8 @@ class Module(nodes.File, PyCollector):\n \n     def _importtestmodule(self):\n         # we assume we are only called once per module\n+        if self.fspath.basename == \"__init__.py\":\n+            return None\n         importmode = self.config.getoption(\"--import-mode\")\n         try:\n             mod = self.fspath.pyimport(ensuresyspath=importmode)\n", "gold_standard_diff": "diff --git a/changelog/6194.bugfix.rst b/changelog/6194.bugfix.rst\nnew file mode 100644\nindex 00000000000..92e6aec7828\n--- /dev/null\n+++ b/changelog/6194.bugfix.rst\n@@ -0,0 +1 @@\n+Fix incorrect discovery of non-test ``__init__.py`` files.\ndiff --git a/changelog/6197.bugfix.rst b/changelog/6197.bugfix.rst\nnew file mode 100644\nindex 00000000000..9bd0a5a6510\n--- /dev/null\n+++ b/changelog/6197.bugfix.rst\n@@ -0,0 +1 @@\n+Revert \"The first test in a package (``__init__.py``) marked with ``@pytest.mark.skip`` is now correctly skipped.\".\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 306e5f217ce..b8b365ad34d 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -251,21 +251,18 @@ class PyobjMixin(PyobjContext):\n     @property\n     def obj(self):\n         \"\"\"Underlying Python object.\"\"\"\n-        self._mount_obj_if_needed()\n-        return self._obj\n-\n-    @obj.setter\n-    def obj(self, value):\n-        self._obj = value\n-\n-    def _mount_obj_if_needed(self):\n         obj = getattr(self, \"_obj\", None)\n         if obj is None:\n             self._obj = obj = self._getobj()\n             # XXX evil hack\n             # used to avoid Instance collector marker duplication\n             if self._ALLOW_MARKERS:\n-                self.own_markers.extend(get_unpacked_marks(obj))\n+                self.own_markers.extend(get_unpacked_marks(self.obj))\n+        return obj\n+\n+    @obj.setter\n+    def obj(self, value):\n+        self._obj = value\n \n     def _getobj(self):\n         \"\"\"Gets the underlying Python object. May be overwritten by subclasses.\"\"\"\n@@ -432,14 +429,6 @@ def _genfunctions(self, name, funcobj):\n class Module(nodes.File, PyCollector):\n     \"\"\" Collector for test classes and functions. \"\"\"\n \n-    def __init__(self, fspath, parent=None, config=None, session=None, nodeid=None):\n-        if fspath.basename == \"__init__.py\":\n-            self._ALLOW_MARKERS = False\n-\n-        nodes.FSCollector.__init__(\n-            self, fspath, parent=parent, config=config, session=session, nodeid=nodeid\n-        )\n-\n     def _getobj(self):\n         return self._importtestmodule()\n \n@@ -639,7 +628,6 @@ def isinitpath(self, path):\n         return path in self.session._initialpaths\n \n     def collect(self):\n-        self._mount_obj_if_needed()\n         this_path = self.fspath.dirpath()\n         init_module = this_path.join(\"__init__.py\")\n         if init_module.check(file=1) and path_matches_patterns(\ndiff --git a/testing/test_collection.py b/testing/test_collection.py\nindex dee07d5c715..8050e80f989 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1257,3 +1257,24 @@ def test_collector_respects_tbstyle(testdir):\n             \"*= 1 error in *\",\n         ]\n     )\n+\n+\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\"\n+        \"def test():\\n\"\n+        \"    with pytest.raises(ImportError):\\n\"\n+        \"        import nope\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\ndiff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 371c3a4dbce..8bba479f1b0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1162,26 +1162,3 @@ def test_importorskip():\n         match=\"^could not import 'doesnotexist': No module named .*\",\n     ):\n         pytest.importorskip(\"doesnotexist\")\n-\n-\n-def test_skip_package(testdir):\n-    testdir.makepyfile(\n-        __init__=\"\"\"\n-        import pytest\n-        pytestmark = pytest.mark.skip\n-    \"\"\"\n-    )\n-\n-    testdir.makepyfile(\n-        \"\"\"\n-        import pytest\n-        def test_skip1():\n-            assert 0\n-        def test_skip2():\n-            assert 0\n-    \"\"\"\n-    )\n-\n-    result = testdir.inline_run()\n-    _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/6197"}