{"instance_id": "sphinx-doc__sphinx-8638", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex a0c8ac102..2ef89ef1a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/test_instance_var_xref.py b/test_instance_var_xref.py\nnew file mode 100644\nindex 000000000..c9c48aead\n--- /dev/null\n+++ b/test_instance_var_xref.py\n@@ -0,0 +1,96 @@\n+#!/usr/bin/env python\n+\"\"\"Test case for instance variable cross-reference issue.\"\"\"\n+\n+import os\n+import tempfile\n+import shutil\n+from pathlib import Path\n+\n+# Create test project structure\n+test_dir = tempfile.mkdtemp()\n+print(f\"Test directory: {test_dir}\")\n+\n+# Create package structure\n+package_dir = Path(test_dir) / \"mypackage\"\n+package_dir.mkdir()\n+\n+# Create __init__.py\n+(package_dir / \"__init__.py\").write_text(\"\")\n+\n+# Create subpackage A\n+sub_a = package_dir / \"sub_a\"\n+sub_a.mkdir()\n+(sub_a / \"__init__.py\").write_text(\"\")\n+\n+# Create module in subpackage A with a class that has 'limit' attribute\n+(sub_a / \"module_a.py\").write_text('''\n+\"\"\"Module A.\"\"\"\n+\n+class FooA:\n+    \"\"\"Class FooA.\"\"\"\n+    \n+    def __init__(self):\n+        self.limit = 10  #: The limit for FooA\n+''')\n+\n+# Create subpackage B\n+sub_b = package_dir / \"sub_b\"\n+sub_b.mkdir()\n+(sub_b / \"__init__.py\").write_text(\"\")\n+\n+# Create module in subpackage B with a class that has 'limit' attribute\n+(sub_b / \"module_b.py\").write_text('''\n+\"\"\"Module B.\"\"\"\n+\n+class BarB:\n+    \"\"\"Class BarB.\"\"\"\n+    \n+    def __init__(self):\n+        self.limit = 20  #: The limit for BarB\n+''')\n+\n+# Create docs directory\n+docs_dir = Path(test_dir) / \"docs\"\n+docs_dir.mkdir()\n+\n+# Create conf.py\n+(docs_dir / \"conf.py\").write_text('''\n+import sys\n+import os\n+sys.path.insert(0, os.path.abspath('..'))\n+\n+extensions = ['sphinx.ext.autodoc']\n+master_doc = 'index'\n+html_theme = 'alabaster'\n+''')\n+\n+# Create index.rst\n+(docs_dir / \"index.rst\").write_text('''\n+Test Documentation\n+==================\n+\n+.. automodule:: mypackage.sub_a.module_a\n+   :members:\n+   :undoc-members:\n+\n+.. automodule:: mypackage.sub_b.module_b\n+   :members:\n+   :undoc-members:\n+''')\n+\n+# Build the documentation\n+os.chdir(docs_dir)\n+os.system(\"sphinx-build -b html . _build/html\")\n+\n+# Check the generated HTML\n+html_file = docs_dir / \"_build/html/index.html\"\n+if html_file.exists():\n+    content = html_file.read_text()\n+    # Look for cross-references in the HTML\n+    if 'href=' in content and 'limit' in content:\n+        print(\"\\nFound cross-references in HTML - this demonstrates the bug!\")\n+        print(\"Instance variables are being linked to each other.\")\n+        \n+# Clean up\n+os.chdir(\"/\")\n+shutil.rmtree(test_dir)\ndiff --git a/test_simple.py b/test_simple.py\nnew file mode 100644\nindex 000000000..668a081b0\n--- /dev/null\n+++ b/test_simple.py\n@@ -0,0 +1,76 @@\n+\"\"\"Simple test to understand the cross-referencing issue.\"\"\"\n+import os\n+import sys\n+import tempfile\n+from pathlib import Path\n+import shutil\n+\n+# Create a test directory\n+test_dir = Path(tempfile.mkdtemp())\n+print(f\"Test directory: {test_dir}\")\n+\n+# Create test module with global variable and class with same-named instance variable\n+test_module = test_dir / \"test_module.py\"\n+test_module.write_text('''\n+\"\"\"Test module.\"\"\"\n+\n+limit = 100  #: Global limit variable\n+\n+class MyClass:\n+    \"\"\"A test class.\"\"\"\n+    \n+    def __init__(self):\n+        self.limit = 50  #: Instance limit variable\n+''')\n+\n+# Create minimal Sphinx docs\n+docs_dir = test_dir / \"docs\"\n+docs_dir.mkdir()\n+\n+conf_py = docs_dir / \"conf.py\"\n+conf_py.write_text(f'''\n+import sys\n+sys.path.insert(0, '{test_dir}')\n+extensions = ['sphinx.ext.autodoc']\n+master_doc = 'index'\n+''')\n+\n+index_rst = docs_dir / \"index.rst\"\n+index_rst.write_text('''\n+Test Module\n+===========\n+\n+.. automodule:: test_module\n+   :members:\n+   :undoc-members:\n+''')\n+\n+# Build docs with text output to see the structure\n+os.chdir(docs_dir)\n+os.system(\"sphinx-build -b text . _build/text\")\n+\n+# Read the text output\n+text_file = docs_dir / \"_build/text/index.txt\"\n+if text_file.exists():\n+    print(\"\\n--- Generated documentation ---\")\n+    print(text_file.read_text())\n+\n+# Also build HTML to check for links\n+os.system(\"sphinx-build -b html . _build/html > /dev/null 2>&1\")\n+html_file = docs_dir / \"_build/html/index.html\"\n+if html_file.exists():\n+    content = html_file.read_text()\n+    # Extract the relevant part with limit\n+    import re\n+    # Find all occurrences of \"limit\" with context\n+    pattern = r'(.{50}limit.{50})'\n+    matches = re.findall(pattern, content, re.DOTALL)\n+    if matches:\n+        print(\"\\n--- HTML snippets containing 'limit' ---\")\n+        for i, match in enumerate(matches):\n+            print(f\"\\nSnippet {i+1}:\")\n+            print(repr(match))\n+\n+# Cleanup\n+os.chdir(\"/testbed\")\n+shutil.rmtree(test_dir)\ndiff --git a/test_var_xref_detailed.py b/test_var_xref_detailed.py\nnew file mode 100644\nindex 000000000..8b1378917\n--- /dev/null\n+++ b/test_var_xref_detailed.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_xref_check.py b/test_xref_check.py\nnew file mode 100644\nindex 000000000..dec1e0db9\n--- /dev/null\n+++ b/test_xref_check.py\n@@ -0,0 +1,91 @@\n+\"\"\"Check for cross-references in generated HTML.\"\"\"\n+import os\n+import tempfile\n+from pathlib import Path\n+import shutil\n+import re\n+\n+# Create a test directory\n+test_dir = Path(tempfile.mkdtemp())\n+\n+# Create package with two modules that have same-named attributes\n+pkg_dir = test_dir / \"mypkg\"\n+pkg_dir.mkdir()\n+(pkg_dir / \"__init__.py\").write_text(\"\")\n+\n+# Module A\n+(pkg_dir / \"module_a.py\").write_text('''\n+\"\"\"Module A.\"\"\"\n+\n+class ClassA:\n+    \"\"\"Class A.\"\"\"\n+    def __init__(self):\n+        self.value = 1  #: Value in ClassA\n+''')\n+\n+# Module B - reference to value should create a cross-ref\n+(pkg_dir / \"module_b.py\").write_text('''\n+\"\"\"Module B.\"\"\"\n+\n+class ClassB:\n+    \"\"\"Class B with reference to value.\"\"\"\n+    def __init__(self):\n+        self.value = 2  #: Value in ClassB - see value\n+''')\n+\n+# Create Sphinx docs\n+docs_dir = test_dir / \"docs\"\n+docs_dir.mkdir()\n+\n+(docs_dir / \"conf.py\").write_text(f'''\n+import sys\n+sys.path.insert(0, '{test_dir}')\n+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx']\n+master_doc = 'index'\n+''')\n+\n+(docs_dir / \"index.rst\").write_text('''\n+Documentation\n+=============\n+\n+.. automodule:: mypkg.module_a\n+   :members:\n+\n+.. automodule:: mypkg.module_b\n+   :members:\n+''')\n+\n+# Build HTML\n+os.chdir(docs_dir)\n+os.system(\"sphinx-build -b html . _build/html > /dev/null 2>&1\")\n+\n+# Check HTML\n+html_file = docs_dir / \"_build/html/index.html\"\n+if html_file.exists():\n+    content = html_file.read_text()\n+    \n+    # Find all hrefs to #-anchors (internal links)\n+    href_pattern = r'<a[^>]*href=\"#([^\"]*)\"[^>]*>([^<]*)</a>'\n+    hrefs = re.findall(href_pattern, content)\n+    \n+    print(\"Found internal links:\")\n+    for target, text in hrefs:\n+        if \"value\" in target or \"value\" in text:\n+            print(f\"  Link to {target} with text '{text}'\")\n+    \n+    # Check if instance variables have become links\n+    # Look for the pattern where autodoc puts instance variable docs\n+    instance_var_pattern = r'<dd><p>Value in Class[AB].*?</p>'\n+    matches = re.findall(instance_var_pattern, content, re.DOTALL)\n+    \n+    print(\"\\nInstance variable documentation:\")\n+    for match in matches:\n+        # Check if there's an unexpected link in the description\n+        if '<a' in match and 'href=' in match:\n+            print(f\"  Found unexpected link in: {match}\")\n+        else:\n+            print(f\"  No links in: {match[:50]}...\")\n+\n+# Cleanup\n+os.chdir(\"/testbed\")\n+shutil.rmtree(test_dir)\ndiff --git a/tox.ini b/tox.ini\nindex bdf4c2ad3..b12166264 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -26,7 +26,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex 9c889420fd6..d8a0675836e 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -22,6 +22,8 @@ Incompatible changes\n   ``<div>``\n * #8508: LaTeX: uplatex becomes a default setting of latex_engine for Japanese\n   documents\n+* #5977: py domain: ``:var:``, ``:cvar:`` and ``:ivar:`` fields do not create\n+  cross-references\n \n Deprecated\n ----------\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 000e2e8d34f..5afe2993a4f 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -354,7 +354,7 @@ class PyObject(ObjectDescription):\n                             'keyword', 'kwarg', 'kwparam'),\n                      typerolename='class', typenames=('paramtype', 'type'),\n                      can_collapse=True),\n-        PyTypedField('variable', label=_('Variables'), rolename='obj',\n+        PyTypedField('variable', label=_('Variables'),\n                      names=('var', 'ivar', 'cvar'),\n                      typerolename='class', typenames=('vartype',),\n                      can_collapse=True),\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e0c690518f6..537bae15bb6 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -838,6 +838,30 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_info_field_list_var(app):\n+    text = (\".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :var int attr: blah blah\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Variables\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+\n+    # :var int attr:\n+    assert_node(doctree[1][1][0][0][1][0],\n+                ([addnodes.literal_strong, \"attr\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\", **{\"py:class\": \"Class\"})\n+\n+\n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8638"}