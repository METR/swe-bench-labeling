{"instance_id": "django__django-15382", "score": "C", "diff": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 81f8f79c71..c6712bce2e 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1211,6 +1211,9 @@ class Exists(Subquery):\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n+        if query.is_empty():\n+            sql = 'FALSE' if not self.negated else 'TRUE'\n+            return sql, []\n         sql, params = super().as_sql(\n             compiler,\n             connection,\n", "gold_standard_diff": "From b7d1da5a62fe4141beff2bfea565f7ef0038c94c Mon Sep 17 00:00:00 2001\nFrom: Simon Charette <charette.s@gmail.com>\nDate: Tue, 1 Feb 2022 13:27:41 -0500\nSubject: [PATCH] Fixed #33482 -- Fixed QuerySet filtering againts negated\n Exists() with empty queryset.\n\nThanks Tobias Bengfort for the report.\n---\n django/db/models/expressions.py | 19 ++++++++++++-------\n tests/expressions/tests.py      |  7 +++++++\n 2 files changed, 19 insertions(+), 7 deletions(-)\n\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 81f8f79c71a7..c71970636ca7 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1211,13 +1211,18 @@ def __invert__(self):\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(\n-            compiler,\n-            connection,\n-            template=template,\n-            query=query,\n-            **extra_context,\n-        )\n+        try:\n+            sql, params = super().as_sql(\n+                compiler,\n+                connection,\n+                template=template,\n+                query=query,\n+                **extra_context,\n+            )\n+        except EmptyResultSet:\n+            if self.negated:\n+                return '', ()\n+            raise\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5cf9dd1ea59c..89c6a7c8de1c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,6 +1905,13 @@ def test_optimizations(self):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n \n class FieldTransformTests(TestCase):\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/15382"}