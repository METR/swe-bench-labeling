{"instance_id": "django__django-13023", "score": "I", "diff": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 36dad72704..4e06c9b296 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -341,6 +341,8 @@ class DecimalField(IntegerField):\n         \"\"\"\n         if value in self.empty_values:\n             return None\n+        if isinstance(value, dict):\n+            raise ValidationError(self.error_messages['invalid'], code='invalid')\n         if self.localize:\n             value = formats.sanitize_separators(value)\n         value = str(value).strip()\n", "gold_standard_diff": "From cf81dd37dd83c14e1906c855dcbe7dc589a21de7 Mon Sep 17 00:00:00 2001\nFrom: Sasha Pachev <spachev@gmail.com>\nDate: Thu, 4 Jun 2020 14:38:18 -0600\nSubject: [PATCH 1/3] If a dictionary was being passed to\n DecimalField.to_python() it failed to generate the ValidationError, and\n instead was propagating the TypeError from the lower-level code, thus hiding\n the specifics of which value exacly caused the error. This - for example -\n affects debugging a save() on an improperly initialized object with many\n fields.\n\n---\n django/db/models/fields/__init__.py     | 2 +-\n tests/model_fields/test_decimalfield.py | 8 +++++---\n 2 files changed, 6 insertions(+), 4 deletions(-)\n\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0fd69059eec6..f358e6e0e9ba 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1501,7 +1501,7 @@ def to_python(self, value):\n             return self.context.create_decimal_from_float(value)\n         try:\n             return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n+        except (decimal.InvalidOperation,TypeError):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n                 code='invalid',\ndiff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex e284005aa06b..ccd10fbc4ada 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -21,9 +21,11 @@ def test_to_python(self):\n         # Uses default rounding of ROUND_HALF_EVEN.\n         self.assertEqual(f.to_python(2.0625), Decimal('2.062'))\n         self.assertEqual(f.to_python(2.1875), Decimal('2.188'))\n-        msg = '\u201cabc\u201d value must be a decimal number.'\n-        with self.assertRaisesMessage(ValidationError, msg):\n-            f.to_python('abc')\n+        bad_values = [\"abc\", {}]\n+        for bad_value in bad_values:\n+            msg = '\u201c{}\u201d value must be a decimal number.'.format(bad_value)\n+            with self.assertRaisesMessage(ValidationError, msg):\n+                f.to_python(bad_value)\n \n     def test_default(self):\n         f = models.DecimalField(default=Decimal('0.00'))\n\nFrom d5a0515fff27dfd1ab3ae5aa8a2604e46ead3b4d Mon Sep 17 00:00:00 2001\nFrom: Sasha Pachev <spachev@gmail.com>\nDate: Thu, 4 Jun 2020 15:46:30 -0600\nSubject: [PATCH 2/3] Appease flake8\n\n---\n django/db/models/fields/__init__.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f358e6e0e9ba..693eee36a76d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1501,7 +1501,7 @@ def to_python(self, value):\n             return self.context.create_decimal_from_float(value)\n         try:\n             return decimal.Decimal(value)\n-        except (decimal.InvalidOperation,TypeError):\n+        except (decimal.InvalidOperation, TypeError):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n                 code='invalid',\n\nFrom dd8f334ace82b09ff015aafb33688a3d501c7267 Mon Sep 17 00:00:00 2001\nFrom: Sasha Pachev <spachev@gmail.com>\nDate: Fri, 5 Jun 2020 11:28:40 -0600\nSubject: [PATCH 3/3] Updated according to review to test more invalid types\n and catch ValueError\n\n---\n django/db/models/fields/__init__.py     |  2 +-\n tests/model_fields/test_decimalfield.py | 23 ++++++++++++++++++-----\n 2 files changed, 19 insertions(+), 6 deletions(-)\n\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 693eee36a76d..28374272f436 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1501,7 +1501,7 @@ def to_python(self, value):\n             return self.context.create_decimal_from_float(value)\n         try:\n             return decimal.Decimal(value)\n-        except (decimal.InvalidOperation, TypeError):\n+        except (decimal.InvalidOperation, TypeError, ValueError):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n                 code='invalid',\ndiff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ccd10fbc4ada..729b5e570aaa 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -21,11 +21,24 @@ def test_to_python(self):\n         # Uses default rounding of ROUND_HALF_EVEN.\n         self.assertEqual(f.to_python(2.0625), Decimal('2.062'))\n         self.assertEqual(f.to_python(2.1875), Decimal('2.188'))\n-        bad_values = [\"abc\", {}]\n-        for bad_value in bad_values:\n-            msg = '\u201c{}\u201d value must be a decimal number.'.format(bad_value)\n-            with self.assertRaisesMessage(ValidationError, msg):\n-                f.to_python(bad_value)\n+\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n \n     def test_default(self):\n         f = models.DecimalField(default=Decimal('0.00'))\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13023"}