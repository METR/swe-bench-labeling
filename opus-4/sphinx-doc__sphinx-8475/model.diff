diff --git a/setup.py b/setup.py
index ca08a6d4a..21cb67b8f 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 1dc0337c3..daf70d9a7 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -20,7 +20,7 @@ from urllib.parse import unquote, urlparse
 
 from docutils import nodes
 from docutils.nodes import Node
-from requests.exceptions import HTTPError
+from requests.exceptions import HTTPError, TooManyRedirects
 
 from sphinx.application import Sphinx
 from sphinx.builders import Builder
@@ -172,9 +172,9 @@ class CheckExternalLinksBuilder(Builder):
                                                  config=self.app.config, auth=auth_info,
                                                  **kwargs)
                         response.raise_for_status()
-                    except HTTPError:
+                    except (HTTPError, TooManyRedirects):
                         # retry with GET request if that fails, some servers
-                        # don't like HEAD requests.
+                        # don't like HEAD requests or they enter redirect loops.
                         response = requests.get(req_url, stream=True, config=self.app.config,
                                                 auth=auth_info, **kwargs)
                         response.raise_for_status()
diff --git a/test_toomanyredirects.py b/test_toomanyredirects.py
new file mode 100644
index 000000000..e5bc076fa
--- /dev/null
+++ b/test_toomanyredirects.py
@@ -0,0 +1,110 @@
+#!/usr/bin/env python3
+"""
+Test script to verify that TooManyRedirects exceptions are handled properly
+"""
+
+import http.server
+import socketserver
+import threading
+import time
+from urllib.parse import urlparse
+
+# Create a simple HTTP server that causes infinite redirects for HEAD requests
+class RedirectHandler(http.server.BaseHTTPRequestHandler):
+    def do_HEAD(self):
+        # Always redirect HEAD requests to create an infinite loop
+        self.send_response(301)
+        self.send_header('Location', self.path)
+        self.end_headers()
+    
+    def do_GET(self):
+        # GET requests return OK
+        self.send_response(200)
+        self.send_header('Content-Type', 'text/html')
+        self.end_headers()
+        self.wfile.write(b'<html><body>Success!</body></html>')
+    
+    def log_message(self, format, *args):
+        # Suppress logging
+        pass
+
+# Start the test server
+PORT = 8899
+Handler = RedirectHandler
+
+def start_server():
+    with socketserver.TCPServer(("", PORT), Handler) as httpd:
+        httpd.serve_forever()
+
+# Run server in background thread
+server_thread = threading.Thread(target=start_server, daemon=True)
+server_thread.start()
+time.sleep(1)  # Give server time to start
+
+# Now test with sphinx linkcheck
+print("Starting test server on port", PORT)
+print("Server will cause infinite redirects for HEAD requests but work for GET requests")
+
+# Create a simple sphinx project to test
+import os
+import tempfile
+import shutil
+
+# Create temporary directory
+tmpdir = tempfile.mkdtemp()
+print(f"Created temp directory: {tmpdir}")
+
+# Create minimal sphinx project
+os.makedirs(os.path.join(tmpdir, 'source'), exist_ok=True)
+
+# Create conf.py
+conf_content = """
+project = 'Test'
+extensions = []
+"""
+with open(os.path.join(tmpdir, 'source', 'conf.py'), 'w') as f:
+    f.write(conf_content)
+
+# Create index.rst with link to our test server
+index_content = f"""
+Test Document
+=============
+
+This is a test link: http://localhost:{PORT}/test
+"""
+with open(os.path.join(tmpdir, 'source', 'index.rst'), 'w') as f:
+    f.write(index_content)
+
+# Run sphinx linkcheck
+import subprocess
+print("\nRunning sphinx linkcheck...")
+result = subprocess.run(
+    ['sphinx-build', '-b', 'linkcheck', 'source', 'build'],
+    cwd=tmpdir,
+    capture_output=True,
+    text=True
+)
+
+print("\nSTDOUT:")
+print(result.stdout)
+print("\nSTDERR:")
+print(result.stderr)
+
+# Check the output
+output_file = os.path.join(tmpdir, 'build', 'output.txt')
+if os.path.exists(output_file):
+    with open(output_file, 'r') as f:
+        output = f.read()
+        print("\nLinkcheck output:")
+        print(output)
+        
+        # The output.txt might be empty if everything is OK
+        # Check the build output instead
+        if f"ok        http://localhost:{PORT}/test" in result.stdout:
+            print("\n✓ SUCCESS: Link was correctly marked as OK after GET fallback!")
+        else:
+            print("\n✗ FAILED: Link was not marked as working")
+
+# Cleanup
+shutil.rmtree(tmpdir)
+print(f"\nCleaned up {tmpdir}")
diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py
index c09c81fe0..f531fd79c 100644
--- a/tests/test_build_linkcheck.py
+++ b/tests/test_build_linkcheck.py
@@ -274,6 +274,42 @@ def test_follows_redirects_on_GET(app, capsys):
     )
 
 
+def make_too_many_redirects_handler():
+    class TooManyRedirectsHandler(http.server.BaseHTTPRequestHandler):
+        def do_HEAD(self):
+            # Always redirect HEAD requests to cause infinite loop
+            self.send_response(301, "Moved Permanently")
+            self.send_header("Location", self.path)
+            self.end_headers()
+
+        def do_GET(self):
+            # GET requests return OK
+            self.send_response(200, "OK") 
+            self.send_header("Content-Type", "text/html")
+            self.end_headers()
+            self.wfile.write(b"<html><body>Success!</body></html>")
+
+        def log_date_time_string(self):
+            """Strip date and time from logged messages for assertions."""
+            return ""
+
+    return TooManyRedirectsHandler
+
+
+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)
+def test_too_many_redirects_fallback_to_GET(app, capsys):
+    # Test that TooManyRedirects from HEAD requests fall back to GET
+    with http_server(make_too_many_redirects_handler()):
+        app.builder.build_all()
+    stdout, stderr = capsys.readouterr()
+    content = (app.outdir / 'output.txt').read_text()
+    # Should be marked as working after GET fallback
+    assert content == ""
+    # stderr should show HEAD requests followed by GET
+    assert "HEAD / HTTP/1.1" in stderr
+    assert "GET / HTTP/1.1" in stderr
+
+
 class OKHandler(http.server.BaseHTTPRequestHandler):
     def do_HEAD(self):
         self.send_response(200, "OK")
diff --git a/tox.ini b/tox.ini
index dbb705a3a..9f4fc3a32 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
