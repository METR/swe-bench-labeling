{"instance_id": "sympy__sympy-18698", "score": "I", "diff": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f..20e32447d2 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -3234,7 +3234,8 @@ def sqf_list(f, all=False):\n         else:  # pragma: no cover\n             raise OperationNotSupported(f, 'sqf_list')\n \n-        return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]\n+        factors = [(f.per(g), k) for g, k in factors]\n+        return f.rep.dom.to_sympy(coeff), combine_sqf_factors(factors)\n \n     def sqf_list_include(f, all=False):\n         \"\"\"\n@@ -3267,7 +3268,8 @@ def sqf_list_include(f, all=False):\n         else:  # pragma: no cover\n             raise OperationNotSupported(f, 'sqf_list_include')\n \n-        return [(f.per(g), k) for g, k in factors]\n+        factors = [(f.per(g), k) for g, k in factors]\n+        return combine_sqf_factors(factors)\n \n     def factor_list(f):\n         \"\"\"\n@@ -6200,6 +6202,17 @@ def _torational_factor_list(p, x):\n     return (c, a)\n \n \n+def combine_sqf_factors(factors):\n+    \"\"\"\n+    Combine square-free factors with the same multiplicity.\n+    \"\"\"\n+    from sympy import Mul\n+    from collections import defaultdict\n+    combined = defaultdict(list)\n+    for factor, multiplicity in factors:\n+        combined[multiplicity].append(factor)\n+    return [(Mul(*factors), multiplicity) for multiplicity, factors in combined.items()]\n+\n @public\n def sqf_list(f, *gens, **args):\n     \"\"\"\n@@ -6215,7 +6228,8 @@ def sqf_list(f, *gens, **args):\n     (2, [(x + 1, 2), (x + 2, 3)])\n \n     \"\"\"\n-    return _generic_factor_list(f, gens, args, method='sqf')\n+    coeff, factors = _generic_factor_list(f, gens, args, method='sqf')\n+    return coeff, combine_sqf_factors(factors)\n \n \n @public\n", "gold_standard_diff": "diff --git a/doc/src/modules/polys/basics.rst b/doc/src/modules/polys/basics.rst\nindex 5b5a4e1635e8..6df5105390d8 100644\n--- a/doc/src/modules/polys/basics.rst\n+++ b/doc/src/modules/polys/basics.rst\n@@ -536,11 +536,13 @@ factors (not necessarily irreducible) of degree 1, 2 etc.::\n     >>> f = 2*x**2 + 5*x**3 + 4*x**4 + x**5\n \n     >>> sqf_list(f)\n-    (1, [(x + 2, 1), (x, 2), (x + 1, 2)])\n+                       2\n+    (1, [(x + 2, 1), (x  + x, 2)])\n \n     >>> sqf(f)\n-     2        2\n-    x *(x + 1) *(x + 2)\n+                    2\n+            / 2    \\\n+    (x + 2)*\\x  + x/\n \n Factorization\n -------------\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f67..68b69d1a241f 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -2,7 +2,8 @@\n \n from __future__ import print_function, division\n \n-from functools import wraps\n+from functools import wraps, reduce\n+from operator import mul\n \n from sympy.core import (\n     S, Basic, Expr, I, Integer, Add, Mul, Dummy, Tuple\n@@ -5905,10 +5906,7 @@ def _symbolic_factor_list(expr, opt, method):\n         if arg.is_Number:\n             coeff *= arg\n             continue\n-        if arg.is_Mul:\n-            args.extend(arg.args)\n-            continue\n-        if arg.is_Pow:\n+        elif arg.is_Pow:\n             base, exp = arg.args\n             if base.is_Number and exp.is_Number:\n                 coeff *= arg\n@@ -5949,6 +5947,9 @@ def _symbolic_factor_list(expr, opt, method):\n                         other.append((f, k))\n \n                 factors.append((_factors_product(other), exp))\n+    if method == 'sqf':\n+        factors = [(reduce(mul, (f for f, _ in factors if _ == k)), k)\n+                   for k in set(i for _, i in factors)]\n \n     return coeff, factors\n \ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 82e5f4d6ddb7..b0b4cd61322a 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3273,7 +3273,7 @@ def test_to_rational_coeffs():\n def test_factor_terms():\n     # issue 7067\n     assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n-    assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n+    assert sqf_list(x*(x + y)) == (1, [(x**2 + x*y, 1)])\n \n \n def test_as_list():\n@@ -3333,3 +3333,8 @@ def test_issue_17988():\n def test_issue_18205():\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/18698"}