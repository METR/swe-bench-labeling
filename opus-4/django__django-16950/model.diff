diff --git a/test_uuid_inline_bug/admin.py b/test_uuid_inline_bug/admin.py
new file mode 100644
index 0000000000..ebd38d2470
--- /dev/null
+++ b/test_uuid_inline_bug/admin.py
@@ -0,0 +1,11 @@
+from django.contrib import admin
+from .models import Thing, SubThing
+
+class SubThingInline(admin.StackedInline):
+    model = SubThing
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    list_display = ('name',)
+    ordering = ('pkid',)
+    inlines = (SubThingInline,)
diff --git a/test_uuid_inline_bug/models.py b/test_uuid_inline_bug/models.py
new file mode 100644
index 0000000000..aef3188ff9
--- /dev/null
+++ b/test_uuid_inline_bug/models.py
@@ -0,0 +1,21 @@
+import uuid
+from django.db import models
+
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+    
+    class Meta:
+        abstract = True
+
+class Thing(UUIDModel):
+    name = models.CharField(max_length=191)
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        'Thing',
+        to_field='id',
+        on_delete = models.CASCADE,
+        related_name='subthings',
+    )
diff --git a/test_uuid_inline_bug/test_issue.py b/test_uuid_inline_bug/test_issue.py
new file mode 100644
index 0000000000..3cb0e12d26
--- /dev/null
+++ b/test_uuid_inline_bug/test_issue.py
@@ -0,0 +1,45 @@
+import uuid
+from django.test import TestCase
+from django.db import models
+
+class UUIDModel(models.Model):
+    pkid = models.BigAutoField(primary_key=True, editable=False)
+    id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)
+    
+    class Meta:
+        abstract = True
+        app_label = 'test_uuid_inline_bug'
+
+class Thing(UUIDModel):
+    name = models.CharField(max_length=191)
+    
+    class Meta:
+        app_label = 'test_uuid_inline_bug'
+
+class SubThing(models.Model):
+    name = models.CharField(max_length=191)
+    thing = models.ForeignKey(
+        'Thing',
+        to_field='id',
+        on_delete = models.CASCADE,
+        related_name='subthings',
+    )
+    
+    class Meta:
+        app_label = 'test_uuid_inline_bug'
+
+class TestUUIDDefault(TestCase):
+    def test_uuid_default_before_save(self):
+        # Create a new instance without saving
+        thing = Thing(name="Test Thing")
+        
+        # Check if the UUID field has a value before saving
+        print(f"Before save - id attribute exists: {hasattr(thing, 'id')}")
+        print(f"Before save - id value: {thing.id}")
+        print(f"Before save - id type: {type(thing.id)}")
+        
+        # Now save it
+        thing.save()
+        
+        print(f"After save - id value: {thing.id}")
+        print(f"After save - id type: {type(thing.id)}")
