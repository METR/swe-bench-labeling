{"instance_id": "scikit-learn__scikit-learn-9288", "score": "C", "diff": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex b7fbdf7da..af6a8775d 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -360,41 +360,24 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n     else:\n         raise ValueError(\"Algorithm must be 'auto', 'full' or 'elkan', got\"\n                          \" %s\" % str(algorithm))\n-    if effective_n_jobs(n_jobs) == 1:\n-        # For a single thread, less memory is needed if we just store one set\n-        # of the best results (as opposed to one set per run per thread).\n-        for it in range(n_init):\n-            # run a k-means once\n-            labels, inertia, centers, n_iter_ = kmeans_single(\n-                X, sample_weight, n_clusters, max_iter=max_iter, init=init,\n-                verbose=verbose, precompute_distances=precompute_distances,\n-                tol=tol, x_squared_norms=x_squared_norms,\n-                random_state=random_state)\n-            # determine if these results are the best so far\n-            if best_inertia is None or inertia < best_inertia:\n-                best_labels = labels.copy()\n-                best_centers = centers.copy()\n-                best_inertia = inertia\n-                best_n_iter = n_iter_\n-    else:\n-        # parallelisation of k-means runs\n-        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n-        results = Parallel(n_jobs=n_jobs, verbose=0)(\n-            delayed(kmeans_single)(X, sample_weight, n_clusters,\n-                                   max_iter=max_iter, init=init,\n-                                   verbose=verbose, tol=tol,\n-                                   precompute_distances=precompute_distances,\n-                                   x_squared_norms=x_squared_norms,\n-                                   # Change seed to ensure variety\n-                                   random_state=seed)\n-            for seed in seeds)\n-        # Get results with the lowest inertia\n-        labels, inertia, centers, n_iters = zip(*results)\n-        best = np.argmin(inertia)\n-        best_labels = labels[best]\n-        best_inertia = inertia[best]\n-        best_centers = centers[best]\n-        best_n_iter = n_iters[best]\n+    # Use the same implementation for both parallel and non-parallel cases\n+    seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n+    results = Parallel(n_jobs=n_jobs, verbose=0)(\n+        delayed(kmeans_single)(X, sample_weight, n_clusters,\n+                               max_iter=max_iter, init=init,\n+                               verbose=verbose, tol=tol,\n+                               precompute_distances=precompute_distances,\n+                               x_squared_norms=x_squared_norms,\n+                               # Change seed to ensure variety\n+                               random_state=seed)\n+        for seed in seeds)\n+    # Get results with the lowest inertia\n+    labels, inertia, centers, n_iters = zip(*results)\n+    best = np.argmin(inertia)\n+    best_labels = labels[best]\n+    best_inertia = inertia[best]\n+    best_centers = centers[best]\n+    best_n_iter = n_iters[best]\n \n     if not sp.issparse(X):\n         if not copy_x:\n", "gold_standard_diff": "From 2848aba70bdc05da1518eef4df75323f1d00dfeb Mon Sep 17 00:00:00 2001\nFrom: Bryan <kenshin2004528@gmail.com>\nDate: Mon, 12 Aug 2019 19:30:05 +0800\nSubject: [PATCH 1/4] use seed even if n_jobs=1\n\n---\n sklearn/cluster/k_means_.py | 7 ++++---\n 1 file changed, 4 insertions(+), 3 deletions(-)\n\ndiff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex b7fbdf7da3ad1..4a76a40cc87c1 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -360,16 +360,18 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n     else:\n         raise ValueError(\"Algorithm must be 'auto', 'full' or 'elkan', got\"\n                          \" %s\" % str(algorithm))\n+\n+    seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n     if effective_n_jobs(n_jobs) == 1:\n         # For a single thread, less memory is needed if we just store one set\n         # of the best results (as opposed to one set per run per thread).\n-        for it in range(n_init):\n+        for seed in seeds:\n             # run a k-means once\n             labels, inertia, centers, n_iter_ = kmeans_single(\n                 X, sample_weight, n_clusters, max_iter=max_iter, init=init,\n                 verbose=verbose, precompute_distances=precompute_distances,\n                 tol=tol, x_squared_norms=x_squared_norms,\n-                random_state=random_state)\n+                random_state=seed)\n             # determine if these results are the best so far\n             if best_inertia is None or inertia < best_inertia:\n                 best_labels = labels.copy()\n@@ -378,7 +380,6 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n                 best_n_iter = n_iter_\n     else:\n         # parallelisation of k-means runs\n-        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n         results = Parallel(n_jobs=n_jobs, verbose=0)(\n             delayed(kmeans_single)(X, sample_weight, n_clusters,\n                                    max_iter=max_iter, init=init,\n\nFrom 1ca7e97b7945c86fa89959bf57490da093483c79 Mon Sep 17 00:00:00 2001\nFrom: Bryan <kenshin2004528@gmail.com>\nDate: Mon, 12 Aug 2019 19:30:18 +0800\nSubject: [PATCH 2/4] add test case for diff n_jobs\n\n---\n sklearn/cluster/tests/test_k_means.py | 10 ++++++++++\n 1 file changed, 10 insertions(+)\n\ndiff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex 362b0a9145fca..2b3d2a0642ba7 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -951,3 +951,13 @@ def test_minibatch_kmeans_partial_fit_int_data():\n     km = MiniBatchKMeans(n_clusters=2)\n     km.partial_fit(X)\n     assert km.cluster_centers_.dtype.kind == \"f\"\n+\n+\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n\nFrom aebff534318f54c6060b75595d94c1484401af0a Mon Sep 17 00:00:00 2001\nFrom: bryanyang0528 <kenshin2004528@hotmail.com>\nDate: Fri, 16 Aug 2019 00:16:17 +0800\nSubject: [PATCH 3/4] updated doc\n\n---\n doc/whats_new/v0.22.rst | 7 +++++++\n 1 file changed, 7 insertions(+)\n\ndiff --git a/doc/whats_new/v0.22.rst b/doc/whats_new/v0.22.rst\nindex 7be27894abe0f..f40a448007f40 100644\n--- a/doc/whats_new/v0.22.rst\n+++ b/doc/whats_new/v0.22.rst\n@@ -26,6 +26,8 @@ random sampling procedures.\n \n - :class:`linear_model.Ridge` when `X` is sparse. |Fix|\n \n+- :class:`cluster.KMeans` when `n_jobs=1`. |Fix|\n+\n Details are listed in the changelog below.\n \n (While we are trying to better inform users by providing this information, we\n@@ -283,6 +285,11 @@ Changelog\n   match `spectral_clustering`.\n   :pr:`13726` by :user:`Shuzhe Xiao <fdas3213>`.\n \n+- |Fix| Fixed a bug where :class:`cluster.KMeans` produced inconsistent results\n+  between `n_jobs=1` and `n_jobs>1` due to the random seed which did not be used\n+  when `n_jobs=1` before.\n+  :pr:`9288` by :user:`Bryan Yang <bryanyang0528>`.\n+\n :mod:`sklearn.feature_selection`\n ................................\n \n\nFrom b685401fb210bf3b295b05b67b04060258d4f541 Mon Sep 17 00:00:00 2001\nFrom: Andreas Mueller <t3kcit@gmail.com>\nDate: Thu, 15 Aug 2019 12:21:13 -0400\nSubject: [PATCH 4/4] Update v0.22.rst\n\nslight phrasing\n---\n doc/whats_new/v0.22.rst | 3 +--\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\ndiff --git a/doc/whats_new/v0.22.rst b/doc/whats_new/v0.22.rst\nindex f40a448007f40..0e4cee72c4c1e 100644\n--- a/doc/whats_new/v0.22.rst\n+++ b/doc/whats_new/v0.22.rst\n@@ -286,8 +286,7 @@ Changelog\n   :pr:`13726` by :user:`Shuzhe Xiao <fdas3213>`.\n \n - |Fix| Fixed a bug where :class:`cluster.KMeans` produced inconsistent results\n-  between `n_jobs=1` and `n_jobs>1` due to the random seed which did not be used\n-  when `n_jobs=1` before.\n+  between `n_jobs=1` and `n_jobs>1` due to the handling of the random state.\n   :pr:`9288` by :user:`Bryan Yang <bryanyang0528>`.\n \n :mod:`sklearn.feature_selection`\n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/9288"}