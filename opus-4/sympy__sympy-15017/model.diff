diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py
index 9be94a8631..a3b91d09df 100644
--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -121,7 +121,7 @@ def reshape(self, *newshape):
         [[1, 2], [3, 4], [5, 6]]
 
         """
-        new_total_size = functools.reduce(lambda x,y: x*y, newshape)
+        new_total_size = functools.reduce(lambda x,y: x*y, newshape, 1)
         if new_total_size != self._loop_size:
             raise ValueError("Invalid reshape parameters " + newshape)
 
@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)
         return self
 
     def __setitem__(self, index, value):
@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):
         self._shape = shape
         self._array = list(flat_list)
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)
         return self
 
     def __setitem__(self, index, value):
diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py
index 099b291167..1b68b5e657 100644
--- a/sympy/tensor/array/ndim_array.py
+++ b/sympy/tensor/array/ndim_array.py
@@ -66,6 +66,8 @@ def __new__(cls, iterable, shape=None, **kwargs):
     def _parse_index(self, index):
 
         if isinstance(index, (SYMPY_INTS, Integer)):
+            if self._rank == 0:
+                raise ValueError("index out of range")
             if index >= self._loop_size:
                 raise ValueError("index out of range")
             return index
diff --git a/sympy/tensor/array/sparse_ndim_array.py b/sympy/tensor/array/sparse_ndim_array.py
index 72b5d51299..2b9c38fe11 100644
--- a/sympy/tensor/array/sparse_ndim_array.py
+++ b/sympy/tensor/array/sparse_ndim_array.py
@@ -116,7 +116,7 @@ def iterator():
         return iterator()
 
     def reshape(self, *newshape):
-        new_total_size = functools.reduce(lambda x,y: x*y, newshape)
+        new_total_size = functools.reduce(lambda x,y: x*y, newshape, 1)
         if new_total_size != self._loop_size:
             raise ValueError("Invalid reshape parameters " + newshape)
 
@@ -130,7 +130,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
 
         shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
         shape = Tuple(*map(_sympify, shape))
-        loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        loop_size = functools.reduce(lambda x,y: x*y, shape, 1)
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
@@ -167,7 +167,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):
         self = object.__new__(cls)
         self._shape = shape
         self._rank = len(shape)
-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0
+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)
 
         # Sparse array:
         if isinstance(flat_list, (dict, Dict)):
diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py
index 5a576c44f0..44b317a4c7 100644
--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py
+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py
@@ -73,7 +73,7 @@ def test_ndim_array_initiation():
 
     from sympy.abc import x
     rank_zero_array = ImmutableDenseNDimArray(x)
-    assert len(rank_zero_array) == 0
+    assert len(rank_zero_array) == 1
     assert rank_zero_array.shape == ()
     assert rank_zero_array.rank() == 0
     assert rank_zero_array[()] == x
diff --git a/test_issue_fix.py b/test_issue_fix.py
new file mode 100644
index 0000000000..edeffbe0b4
--- /dev/null
+++ b/test_issue_fix.py
@@ -0,0 +1,26 @@
+#!/usr/bin/env python
+"""Test script to verify the fix for rank-0 array len() issue"""
+
+import sympy
+
+print("Testing the issue fix:")
+print("=" * 50)
+
+# Create a rank-0 array as shown in the issue
+a = sympy.Array(3)
+print(f"a = sympy.Array(3)")
+print(f"a = {a}")
+print(f"len(a) = {len(a)}")
+print(f"len(list(a)) = {len(list(a))}")
+print(f"list(a) = {list(a)}")
+
+print("\nExpected behavior:")
+print("- len(a) should return 1 (not 0)")
+print("- This matches len(list(a)) which is 1")
+print("- This is consistent with numpy where np.asarray(1).size == 1")
+
+# Test that the fix is correct
+assert len(a) == 1, "len(rank-0 array) should be 1"
+assert len(a) == len(list(a)), "len(a) should match len(list(a))"
+
+print("\nâœ“ All tests passed! The issue has been fixed.")
