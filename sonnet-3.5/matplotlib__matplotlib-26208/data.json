{"instance_id": "matplotlib__matplotlib-26208", "score": "I", "diff": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e3232c..34520520ea 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -4431,16 +4431,26 @@ class _AxesBase(martist.Artist):\n         Notes\n         -----\n         For those who are 'picking' artists while using twinx, pick\n-        events are only called for the artists in the top-most Axes.\n+        events are only called for the artists in the top-most axes.\n         \"\"\"\n         ax2 = self._make_twin_axes(sharex=self)\n         ax2.yaxis.tick_right()\n         ax2.yaxis.set_label_position('right')\n         ax2.yaxis.set_offset_position('right')\n-        ax2.set_autoscalex_on(self.get_autoscalex_on())\n+        ax2.set_autoscaley_on(self.get_autoscaley_on())\n         self.yaxis.tick_left()\n         ax2.xaxis.set_visible(False)\n         ax2.patch.set_visible(False)\n+\n+        # Store the original data limits of the first axis\n+        original_dataLim = self.dataLim.frozen()\n+\n+        # Update the new axis to use the original data limits\n+        ax2.update_datalim(original_dataLim.get_points())\n+\n+        return ax2\n+        ax2.xaxis.set_visible(False)\n+        ax2.patch.set_visible(False)\n         return ax2\n \n     def twiny(self):\n", "gold_standard_diff": "From 5570743e720121455f6937ef5e5fa9267451b57a Mon Sep 17 00:00:00 2001\nFrom: Thomas A Caswell <tcaswell@gmail.com>\nDate: Wed, 28 Jun 2023 17:19:21 -0400\nSubject: [PATCH] FIX: also copy the axis units when creating twins\n\ncloses #26194\n---\n lib/matplotlib/axes/_base.py      |  2 ++\n lib/matplotlib/tests/test_axes.py | 17 +++++++++++++++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 5203e3232c84..0d6e5d167772 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -4441,6 +4441,7 @@ def twinx(self):\n         self.yaxis.tick_left()\n         ax2.xaxis.set_visible(False)\n         ax2.patch.set_visible(False)\n+        ax2.xaxis.units = self.xaxis.units\n         return ax2\n \n     def twiny(self):\n@@ -4470,6 +4471,7 @@ def twiny(self):\n         self.xaxis.tick_bottom()\n         ax2.yaxis.set_visible(False)\n         ax2.patch.set_visible(False)\n+        ax2.yaxis.units = self.yaxis.units\n         return ax2\n \n     def get_shared_x_axes(self):\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 4f01752819f4..0bdbeaed234e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -376,6 +376,23 @@ def test_twinx_cla():\n     assert ax.yaxis.get_visible()\n \n \n+@pytest.mark.parametrize('twin', ('x', 'y'))\n+def test_twin_units(twin):\n+    axis_name = f'{twin}axis'\n+    twin_func = f'twin{twin}'\n+\n+    a = ['0', '1']\n+    b = ['a', 'b']\n+\n+    fig = Figure()\n+    ax1 = fig.subplots()\n+    ax1.plot(a, b)\n+    assert getattr(ax1, axis_name).units is not None\n+    ax2 = getattr(ax1, twin_func)()\n+    assert getattr(ax2, axis_name).units is not None\n+    assert getattr(ax2, axis_name).units is getattr(ax1, axis_name).units\n+\n+\n @pytest.mark.parametrize('twin', ('x', 'y'))\n @check_figures_equal(extensions=['png'], tol=0.19)\n def test_twin_logscale(fig_test, fig_ref, twin):\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/26208"}