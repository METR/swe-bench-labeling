diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index cc65c043ab..b159ac984b 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -220,6 +220,14 @@ def get_child_arguments():
     py_script = Path(sys.argv[0])
 
     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
+    # sys._xoptions is a dict of {name: value} where value can be True or a string
+    # Convert to command line options: -Xname or -Xname=value
+    if hasattr(sys, '_xoptions'):
+        for name, value in sys._xoptions.items():
+            if value is True:
+                args.append('-X%s' % name)
+            else:
+                args.append('-X%s=%s' % (name, value))
     # __spec__ is set when the server was started with the `-m` option,
     # see https://docs.python.org/3/reference/import.html#main-spec
     # __spec__ may not exist, e.g. when running in a Conda env.
diff --git a/test_autoreload_xoptions.py b/test_autoreload_xoptions.py
new file mode 100644
index 0000000000..1d43e060d2
--- /dev/null
+++ b/test_autoreload_xoptions.py
@@ -0,0 +1,38 @@
+#!/usr/bin/env python
+"""Test script to verify X options are passed through autoreload"""
+import sys
+import os
+import subprocess
+
+# Import Django autoreload module
+sys.path.insert(0, '/testbed')
+from django.utils import autoreload
+
+print("=== Original process ===")
+print("sys._xoptions:", sys._xoptions)
+
+# Get child arguments as autoreload would
+args = autoreload.get_child_arguments()
+print("\nChild arguments:", args)
+
+# Simulate what autoreload does: run child process
+print("\n=== Running child process ===")
+env = {**os.environ, autoreload.DJANGO_AUTORELOAD_ENV: 'true'}
+# Find where the script name is in args and replace it with our test command
+# We need to keep all the -W and -X options intact
+script_idx = None
+for i, arg in enumerate(args):
+    if arg == 'test_autoreload_xoptions.py':
+        script_idx = i
+        break
+
+if script_idx is not None:
+    cmd = args[:script_idx] + ['-c', 'import sys; print("Child sys._xoptions:", sys._xoptions)']
+else:
+    # Fallback
+    cmd = args[:-1] + ['-c', 'import sys; print("Child sys._xoptions:", sys._xoptions)']
+print("Running command:", cmd)
+result = subprocess.run(cmd, capture_output=True, text=True, env=env)
+print(result.stdout)
+if result.stderr:
+    print("stderr:", result.stderr)
diff --git a/test_encoding.py b/test_encoding.py
new file mode 100644
index 0000000000..3e04e69c7c
--- /dev/null
+++ b/test_encoding.py
@@ -0,0 +1,55 @@
+#!/usr/bin/env python
+"""Test encoding behavior with and without X options"""
+import sys
+import os
+import subprocess
+
+# Import Django autoreload module
+sys.path.insert(0, '/testbed')
+from django.utils import autoreload
+
+print("=== Parent process ===")
+print("sys._xoptions:", sys._xoptions)
+print("Default encoding:", sys.getdefaultencoding())
+print("Stdout encoding:", sys.stdout.encoding)
+
+# Write a test file to check file encoding
+test_content = "# -*- coding: utf-8 -*-\n# Test file with special chars: àéîöü"
+with open('/tmp/test_encoding.txt', 'w', encoding='utf-8') as f:
+    f.write(test_content)
+
+# Read back to check encoding
+with open('/tmp/test_encoding.txt', 'r') as f:
+    print("File encoding when reading:", f.encoding)
+
+# Get child arguments
+args = autoreload.get_child_arguments()
+print("\nChild command:", ' '.join(args))
+
+# Simulate child process
+print("\n=== Child process (simulated autoreload) ===")
+env = {**os.environ, autoreload.DJANGO_AUTORELOAD_ENV: 'true'}
+child_test = """
+import sys
+print("Child sys._xoptions:", sys._xoptions)
+print("Child default encoding:", sys.getdefaultencoding()) 
+print("Child stdout encoding:", sys.stdout.encoding)
+with open('/tmp/test_encoding.txt', 'r') as f:
+    print("Child file encoding:", f.encoding)
+"""
+
+script_idx = None
+for i, arg in enumerate(args):
+    if arg == 'test_encoding.py':
+        script_idx = i
+        break
+
+if script_idx is not None:
+    cmd = args[:script_idx] + ['-c', child_test]
+else:
+    cmd = args[:-1] + ['-c', child_test]
+
+result = subprocess.run(cmd, capture_output=True, text=True, env=env)
+print(result.stdout)
+if result.stderr:
+    print("stderr:", result.stderr)
diff --git a/test_project/db.sqlite3 b/test_project/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..b455bc84e6
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_project/test_app/__init__.py b/test_project/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_app/admin.py b/test_project/test_app/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/test_project/test_app/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/test_project/test_app/apps.py b/test_project/test_app/apps.py
new file mode 100644
index 0000000000..29f4426412
--- /dev/null
+++ b/test_project/test_app/apps.py
@@ -0,0 +1,13 @@
+from django.apps import AppConfig
+import sys
+
+
+class TestAppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'test_app'
+
+# Demo for xoptions
+print("=== test_app apps.py loaded ===")
+print("sys._xoptions:", sys._xoptions)
+with open("manage.py", mode="r") as stream:
+    print("File encoding:", stream.encoding)
diff --git a/test_project/test_app/migrations/__init__.py b/test_project/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_app/models.py b/test_project/test_app/models.py
new file mode 100644
index 0000000000..71a8362390
--- /dev/null
+++ b/test_project/test_app/models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/test_project/test_app/tests.py b/test_project/test_app/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/test_project/test_app/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/test_project/test_app/views.py b/test_project/test_app/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/test_project/test_app/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/test_project/asgi.py b/test_project/test_project/asgi.py
new file mode 100644
index 0000000000..342a9c9009
--- /dev/null
+++ b/test_project/test_project/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for test_project project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_asgi_application()
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..496908e1d5
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for test_project project.
+
+Generated by 'django-admin startproject' using Django 4.1.dev20210929060442.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-sf6%8^7he6kmi8u8_7rqe5co-68a=c#e*-d1sh7ba_zmxv!mg6'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_app',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..cc86b838e7
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,21 @@
+"""test_project URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py
new file mode 100644
index 0000000000..7050af9edd
--- /dev/null
+++ b/test_project/test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+
+application = get_wsgi_application()
diff --git a/test_xoptions.py b/test_xoptions.py
new file mode 100644
index 0000000000..6721d59f4c
--- /dev/null
+++ b/test_xoptions.py
@@ -0,0 +1,12 @@
+#!/usr/bin/env python
+import sys
+import os
+
+# Test script to verify X options are passed
+print("Python executable:", sys.executable)
+print("sys._xoptions:", sys._xoptions)
+print("Environment PYTHONIOENCODING:", os.environ.get('PYTHONIOENCODING'))
+
+# Test encoding
+with open(__file__, 'r') as f:
+    print("File encoding:", f.encoding)
diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py
index 7c28a9d4d0..cc370f4f77 100644
--- a/tests/utils_tests/test_autoreload.py
+++ b/tests/utils_tests/test_autoreload.py
@@ -203,6 +203,26 @@ class TestChildArguments(SimpleTestCase):
             [sys.executable, '-Werror', __file__, 'runserver']
         )
 
+    @mock.patch('__main__.__spec__', None)
+    @mock.patch('sys.argv', [__file__, 'runserver'])
+    @mock.patch('sys.warnoptions', [])
+    @mock.patch('sys._xoptions', {'utf8': True})
+    def test_xoptions(self):
+        self.assertEqual(
+            autoreload.get_child_arguments(),
+            [sys.executable, '-Xutf8', __file__, 'runserver']
+        )
+
+    @mock.patch('__main__.__spec__', None)
+    @mock.patch('sys.argv', [__file__, 'runserver'])
+    @mock.patch('sys.warnoptions', [])
+    @mock.patch('sys._xoptions', {'utf8': '1', 'dev': True})
+    def test_xoptions_with_values(self):
+        self.assertEqual(
+            autoreload.get_child_arguments(),
+            [sys.executable, '-Xutf8=1', '-Xdev', __file__, 'runserver']
+        )
+
     @mock.patch('__main__.__spec__', None)
     @mock.patch('sys.warnoptions', [])
     def test_exe_fallback(self):
