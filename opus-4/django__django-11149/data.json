{"instance_id": "django__django-11149", "score": "C", "diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b..9ed469d9f9 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2115,27 +2115,48 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to add to the intermediate model.\n+            opts = self.opts\n+            # The model was auto-created as intermediary for a many-to-many\n+            # relationship; find the target model.\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    opts = field.remote_field.model._meta\n+                    break\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to change the intermediate model.\n+            opts = self.opts\n+            # The model was auto-created as intermediary for a many-to-many\n+            # relationship; find the target model.\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    opts = field.remote_field.model._meta\n+                    break\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to delete from the intermediate model.\n+            opts = self.opts\n+            # The model was auto-created as intermediary for a many-to-many\n+            # relationship; find the target model.\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    opts = field.remote_field.model._meta\n+                    break\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_delete_permission(request, obj)\n \n     def has_view_permission(self, request, obj=None):\ndiff --git a/test_m2m_bug.py b/test_m2m_bug.py\nnew file mode 100644\nindex 0000000000..fbd2201106\n--- /dev/null\n+++ b/test_m2m_bug.py\n@@ -0,0 +1,88 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test to demonstrate the M2M inline permissions bug\n+\"\"\"\n+\n+# Import Django and configure it for testing\n+import os\n+import sys\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.admin_inlines.test_settings')\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+\n+import django\n+django.setup()\n+\n+from django.contrib.auth.models import User, Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.test import RequestFactory\n+from tests.admin_inlines.models import Author, Book\n+from tests.admin_inlines.admin import BookInline\n+from django.contrib.admin import site\n+\n+# Create a user with only view permission\n+user = User.objects.create_user('viewer', 'viewer@example.com', 'password')\n+\n+# Get or create some test data\n+author = Author.objects.first()\n+if not author:\n+    author = Author.objects.create(name='Test Author')\n+\n+book = Book.objects.first()\n+if not book:\n+    book = Book.objects.create(title='Test Book', author=author)\n+\n+# Create request\n+rf = RequestFactory()\n+request = rf.get('/admin/')\n+request.user = user\n+\n+# Create inline instance\n+inline = BookInline(Author, site)\n+\n+# First let's check what model the inline is for\n+print(f\"Inline model: {inline.model}\")\n+print(f\"Is auto_created: {inline.opts.auto_created}\")\n+\n+# Check permissions without any permissions\n+print(\"\\n=== Without any permissions ===\")\n+print(f\"has_view_permission: {inline.has_view_permission(request, author)}\")\n+print(f\"has_add_permission: {inline.has_add_permission(request, author)}\")\n+print(f\"has_change_permission: {inline.has_change_permission(request, author)}\")\n+print(f\"has_delete_permission: {inline.has_delete_permission(request, author)}\")\n+\n+# Give view permission for Book\n+book_ct = ContentType.objects.get_for_model(Book)\n+user.user_permissions.add(\n+    Permission.objects.get(content_type=book_ct, codename='view_book')\n+)\n+user = User.objects.get(pk=user.pk)  # Refresh from DB to clear cache\n+request.user = user\n+\n+print(\"\\n=== With view_book permission ===\")\n+print(f\"has_view_permission: {inline.has_view_permission(request, author)}\")\n+print(f\"has_add_permission: {inline.has_add_permission(request, author)}\")\n+print(f\"has_change_permission: {inline.has_change_permission(request, author)}\")\n+print(f\"has_delete_permission: {inline.has_delete_permission(request, author)}\")\n+\n+# Now let's test with a ManyToMany field through model\n+from django.db import models\n+from django.contrib import admin\n+\n+# We need to find a M2M through model in the test suite\n+print(\"\\n=== Looking for M2M through models ===\")\n+for model in django.apps.apps.get_models():\n+    if hasattr(model._meta, 'auto_created') and model._meta.auto_created:\n+        print(f\"Found auto-created model: {model}\")\n+        # Create an inline for this model\n+        class TestInline(admin.TabularInline):\n+            model = model\n+        \n+        # Test permissions\n+        test_inline = TestInline(model._meta.auto_created, site)\n+        print(f\"  Is auto_created: {test_inline.opts.auto_created}\")\n+        print(f\"  has_view_permission: {test_inline.has_view_permission(request, None)}\")\n+        print(f\"  has_add_permission: {test_inline.has_add_permission(request, None)}\")\n+        print(f\"  has_change_permission: {test_inline.has_change_permission(request, None)}\")\n+        print(f\"  has_delete_permission: {test_inline.has_delete_permission(request, None)}\")\n+        print()\n+        break\ndiff --git a/test_m2m_fix.py b/test_m2m_fix.py\nnew file mode 100644\nindex 0000000000..6b8352edb7\n--- /dev/null\n+++ b/test_m2m_fix.py\n@@ -0,0 +1,128 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test to verify the M2M inline permissions fix\n+\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Minimal Django configuration\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-key',\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.admin',\n+        'django.contrib.sessions',\n+        'django.contrib.messages',\n+    ],\n+    MIDDLEWARE=[],\n+    ROOT_URLCONF=[],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django.db import models\n+from django.contrib import admin\n+from django.contrib.auth.models import User, Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.test import RequestFactory\n+\n+# Create the models dynamically\n+class Photo(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Report(models.Model):\n+    title = models.CharField(max_length=100)\n+    photos = models.ManyToManyField(Photo)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Create the through model (this happens automatically but we'll access it)\n+ThroughModel = Report.photos.through\n+\n+# Create inline admin\n+class ReportPhotoInline(admin.TabularInline):\n+    model = ThroughModel\n+\n+# Create tables\n+from django.db import connection\n+from django.apps import apps\n+\n+# Create all tables\n+with connection.schema_editor() as schema_editor:\n+    for model in apps.get_models():\n+        try:\n+            schema_editor.create_model(model)\n+        except:\n+            pass  # Table might already exist\n+\n+# Create permissions manually\n+photo_ct = ContentType.objects.create(app_label='test_app', model='photo')\n+report_ct = ContentType.objects.create(app_label='test_app', model='report')\n+\n+Permission.objects.create(codename='view_photo', name='Can view photo', content_type=photo_ct)\n+Permission.objects.create(codename='change_photo', name='Can change photo', content_type=photo_ct)\n+Permission.objects.create(codename='add_photo', name='Can add photo', content_type=photo_ct)\n+Permission.objects.create(codename='delete_photo', name='Can delete photo', content_type=photo_ct)\n+\n+# Create a user with only view permission\n+user = User.objects.create_user('viewer', 'viewer@example.com', 'password')\n+\n+# Create request\n+rf = RequestFactory()\n+request = rf.get('/admin/')\n+request.user = user\n+\n+# Create inline instance\n+inline = ReportPhotoInline(Report, admin.site)\n+\n+print(\"=== Testing M2M Inline Permissions Fix ===\")\n+print(f\"Inline model: {inline.model}\")\n+print(f\"Is auto_created: {inline.opts.auto_created}\")\n+\n+# Test 1: User with no permissions\n+print(\"\\n--- Test 1: User with no permissions ---\")\n+print(f\"has_view_permission: {inline.has_view_permission(request, None)}\")\n+print(f\"has_add_permission: {inline.has_add_permission(request, None)}\")\n+print(f\"has_change_permission: {inline.has_change_permission(request, None)}\")\n+print(f\"has_delete_permission: {inline.has_delete_permission(request, None)}\")\n+\n+# Test 2: User with only view permission\n+user.user_permissions.add(Permission.objects.get(content_type=photo_ct, codename='view_photo'))\n+user = User.objects.get(pk=user.pk)  # Refresh from DB\n+request.user = user\n+\n+print(\"\\n--- Test 2: User with only view_photo permission ---\")\n+print(f\"has_view_permission: {inline.has_view_permission(request, None)}\")\n+print(f\"has_add_permission: {inline.has_add_permission(request, None)}\")\n+print(f\"has_change_permission: {inline.has_change_permission(request, None)}\")\n+print(f\"has_delete_permission: {inline.has_delete_permission(request, None)}\")\n+print(\"^ Good! With only view permission, add/change/delete should be False\")\n+\n+# Test 3: User with change permission\n+user.user_permissions.add(Permission.objects.get(content_type=photo_ct, codename='change_photo'))\n+user = User.objects.get(pk=user.pk)  # Refresh from DB\n+request.user = user\n+\n+print(\"\\n--- Test 3: User with view_photo and change_photo permissions ---\")\n+print(f\"has_view_permission: {inline.has_view_permission(request, None)}\")\n+print(f\"has_add_permission: {inline.has_add_permission(request, None)}\")\n+print(f\"has_change_permission: {inline.has_change_permission(request, None)}\")\n+print(f\"has_delete_permission: {inline.has_delete_permission(request, None)}\")\n+print(\"^ Good! With change permission, user can view/add/change/delete\")\ndiff --git a/test_m2m_inline_bug.py b/test_m2m_inline_bug.py\nnew file mode 100644\nindex 0000000000..703b07551e\n--- /dev/null\n+++ b/test_m2m_inline_bug.py\n@@ -0,0 +1,118 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test to demonstrate the M2M inline permissions bug\n+\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Minimal Django configuration\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-key',\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.admin',\n+        'django.contrib.sessions',\n+        'django.contrib.messages',\n+    ],\n+    MIDDLEWARE=[],\n+    ROOT_URLCONF=[],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django.db import models\n+from django.contrib import admin\n+from django.contrib.auth.models import User\n+from django.test import RequestFactory\n+\n+# Create the models dynamically\n+class Photo(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Report(models.Model):\n+    title = models.CharField(max_length=100)\n+    photos = models.ManyToManyField(Photo)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Create the through model (this happens automatically but we'll access it)\n+ThroughModel = Report.photos.through\n+\n+# Create inline admin\n+class ReportPhotoInline(admin.TabularInline):\n+    model = ThroughModel\n+\n+# Create tables\n+from django.db import connection\n+from django.apps import apps\n+\n+# Create all tables\n+with connection.schema_editor() as schema_editor:\n+    for model in apps.get_models():\n+        try:\n+            schema_editor.create_model(model)\n+        except:\n+            pass  # Table might already exist\n+\n+# Create a user with only view permission\n+user = User.objects.create_user('viewer', 'viewer@example.com', 'password')\n+\n+# Create request\n+rf = RequestFactory()\n+request = rf.get('/admin/')\n+request.user = user\n+\n+# Create inline instance\n+inline = ReportPhotoInline(Report, admin.site)\n+\n+print(\"=== Testing M2M Inline Permissions Bug ===\")\n+print(f\"Inline model: {inline.model}\")\n+print(f\"Is auto_created: {inline.opts.auto_created}\")\n+\n+print(\"\\n--- Current behavior (buggy) ---\")\n+print(f\"has_view_permission: {inline.has_view_permission(request, None)}\")\n+print(f\"has_add_permission: {inline.has_add_permission(request, None)}\")\n+print(f\"has_change_permission: {inline.has_change_permission(request, None)}\")\n+print(f\"has_delete_permission: {inline.has_delete_permission(request, None)}\")\n+\n+# Let's give the user view permission on Photo to see the bug\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n+\n+photo_ct = ContentType.objects.get_for_model(Photo)\n+user.user_permissions.add(\n+    Permission.objects.get(content_type=photo_ct, codename='view_photo')\n+)\n+\n+# Refresh user\n+user = User.objects.get(pk=user.pk)\n+request.user = user\n+\n+print(\"\\n--- With view_photo permission (shows the bug) ---\")\n+print(f\"has_view_permission: {inline.has_view_permission(request, None)}\")\n+print(f\"has_add_permission: {inline.has_add_permission(request, None)}\")\n+print(f\"has_change_permission: {inline.has_change_permission(request, None)}\")\n+print(f\"has_delete_permission: {inline.has_delete_permission(request, None)}\")\n+\n+print(\"\\nThe bug: Even without any permissions, has_view_permission returns True,\")\n+print(\"and because of the buggy code, all other permissions also return True!\")\n+print(\"\\nThis happens because for auto_created models (M2M through tables),\")\n+print(\"has_add_permission, has_change_permission, and has_delete_permission\")\n+print(\"all just return has_view_permission, which defaults to True for auto_created models.\")\ndiff --git a/test_m2m_permissions.py b/test_m2m_permissions.py\nnew file mode 100644\nindex 0000000000..8605017012\n--- /dev/null\n+++ b/test_m2m_permissions.py\n@@ -0,0 +1,197 @@\n+\"\"\"\n+Test for ManyToMany inline permissions issue\n+\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Create test app\n+sys.path.insert(0, '.')\n+\n+# Create test_app directory\n+os.makedirs('test_app', exist_ok=True)\n+\n+# Create __init__.py\n+with open('test_app/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Create models.py first (before Django setup)\n+with open('test_app/models.py', 'w') as f:\n+    f.write('''\n+from django.db import models\n+\n+class Photo(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class Report(models.Model):\n+    title = models.CharField(max_length=100)\n+    photos = models.ManyToManyField(Photo)\n+    \n+    def __str__(self):\n+        return self.title\n+''')\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.admin',\n+        'django.contrib.sessions',\n+        'django.contrib.messages',\n+        'test_app',\n+    ],\n+    MIDDLEWARE=[\n+        'django.contrib.sessions.middleware.SessionMiddleware',\n+        'django.contrib.auth.middleware.AuthenticationMiddleware',\n+        'django.contrib.messages.middleware.MessageMiddleware',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+    ROOT_URLCONF='test_app.urls',\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    }],\n+)\n+\n+django.setup()\n+\n+# Create test app\n+import sys\n+sys.path.insert(0, '.')\n+\n+# Create test_app directory\n+os.makedirs('test_app', exist_ok=True)\n+\n+# Create __init__.py\n+with open('test_app/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Create models.py\n+with open('test_app/models.py', 'w') as f:\n+    f.write('''\n+from django.db import models\n+\n+class Photo(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    def __str__(self):\n+        return self.name\n+\n+class Report(models.Model):\n+    title = models.CharField(max_length=100)\n+    photos = models.ManyToManyField(Photo)\n+    \n+    def __str__(self):\n+        return self.title\n+''')\n+\n+# Create admin.py\n+with open('test_app/admin.py', 'w') as f:\n+    f.write('''\n+from django.contrib import admin\n+from .models import Photo, Report\n+\n+class ReportPhotoInlineModelAdmin(admin.TabularInline):\n+    model = Report.photos.through\n+    show_change_link = True\n+\n+class ReportAdmin(admin.ModelAdmin):\n+    inlines = [ReportPhotoInlineModelAdmin]\n+\n+admin.site.register(Photo)\n+admin.site.register(Report, ReportAdmin)\n+''')\n+\n+# Create urls.py\n+with open('test_app/urls.py', 'w') as f:\n+    f.write('''\n+from django.urls import path\n+from django.contrib import admin\n+\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+]\n+''')\n+\n+# Run the actual test\n+from django.test import TestCase, RequestFactory\n+from django.contrib.auth.models import User, Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib import admin\n+from test_app.models import Photo, Report\n+from test_app.admin import ReportPhotoInlineModelAdmin, ReportAdmin\n+\n+# Create tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    from django.apps import apps\n+    for model in apps.get_models():\n+        if model._meta.db_table not in connection.introspection.table_names():\n+            schema_editor.create_model(model)\n+\n+# Run test\n+class M2MPermissionTest(TestCase):\n+    def test_m2m_inline_permissions(self):\n+        # Create user with only view permission\n+        user = User.objects.create_user('viewer', 'viewer@example.com', 'password')\n+        report_ct = ContentType.objects.get_for_model(Report)\n+        photo_ct = ContentType.objects.get_for_model(Photo)\n+        \n+        # Give view permissions\n+        user.user_permissions.add(\n+            Permission.objects.get(content_type=report_ct, codename='view_report'),\n+            Permission.objects.get(content_type=photo_ct, codename='view_photo')\n+        )\n+        \n+        # Create test data\n+        photo = Photo.objects.create(name='Test Photo')\n+        report = Report.objects.create(title='Test Report')\n+        report.photos.add(photo)\n+        \n+        # Create request\n+        rf = RequestFactory()\n+        request = rf.get('/admin/')\n+        request.user = user\n+        \n+        # Create admin instances\n+        admin_site = admin.site\n+        report_admin = ReportAdmin(Report, admin_site)\n+        inline = ReportPhotoInlineModelAdmin(Report, admin_site)\n+        \n+        # Check permissions for the inline\n+        print(\"Testing inline permissions for user with only view permission:\")\n+        print(f\"has_view_permission: {inline.has_view_permission(request, report)}\")\n+        print(f\"has_add_permission: {inline.has_add_permission(request, report)}\")\n+        print(f\"has_change_permission: {inline.has_change_permission(request, report)}\")\n+        print(f\"has_delete_permission: {inline.has_delete_permission(request, report)}\")\n+        \n+        # The bug: these should all be False except has_view_permission\n+        assert inline.has_view_permission(request, report) == True\n+        assert inline.has_add_permission(request, report) == False  # This will fail due to bug\n+        assert inline.has_change_permission(request, report) == False  # This will fail due to bug\n+        assert inline.has_delete_permission(request, report) == False  # This will fail due to bug\n+\n+# Run the test\n+test = M2MPermissionTest()\n+test.test_m2m_inline_permissions()\ndiff --git a/test_m2m_permissions_inline.py b/test_m2m_permissions_inline.py\nnew file mode 100644\nindex 0000000000..5d0d7d5cda\n--- /dev/null\n+++ b/test_m2m_permissions_inline.py\n@@ -0,0 +1,65 @@\n+\"\"\"\n+Test for ManyToMany inline permissions\n+\"\"\"\n+from django.contrib.auth.models import User, Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.test import TestCase, RequestFactory\n+from tests.admin_inlines.models import Author, Book\n+from tests.admin_inlines.admin import AuthorBookInline\n+from django.contrib.admin import site\n+\n+\n+class M2MInlinePermissionsTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.user = User.objects.create_user('testuser', 'test@example.com', 'password')\n+        self.author = Author.objects.create(name='Test Author')\n+        self.book = Book.objects.create(name='Test Book')\n+        self.author.books.add(self.book)\n+        \n+    def test_m2m_inline_permissions_view_only(self):\n+        \"\"\"Test that view-only permission doesn't grant edit access to M2M inlines\"\"\"\n+        # Create inline instance for the M2M through model\n+        class AuthorBooksInline(site.admin.TabularInline):\n+            model = Author.books.through\n+            \n+        inline = AuthorBooksInline(Author, site)\n+        \n+        # Give user only view permission on Book\n+        book_ct = ContentType.objects.get_for_model(Book)\n+        self.user.user_permissions.add(\n+            Permission.objects.get(content_type=book_ct, codename='view_book')\n+        )\n+        \n+        request = self.factory.get('/admin/')\n+        request.user = self.user\n+        \n+        # User should be able to view but not add/change/delete\n+        self.assertTrue(inline.has_view_permission(request, self.author))\n+        self.assertFalse(inline.has_add_permission(request, self.author))\n+        self.assertFalse(inline.has_change_permission(request, self.author))\n+        self.assertFalse(inline.has_delete_permission(request, self.author))\n+        \n+    def test_m2m_inline_permissions_with_change(self):\n+        \"\"\"Test that change permission grants full edit access to M2M inlines\"\"\"\n+        # Create inline instance for the M2M through model\n+        class AuthorBooksInline(site.admin.TabularInline):\n+            model = Author.books.through\n+            \n+        inline = AuthorBooksInline(Author, site)\n+        \n+        # Give user view and change permissions on Book\n+        book_ct = ContentType.objects.get_for_model(Book)\n+        self.user.user_permissions.add(\n+            Permission.objects.get(content_type=book_ct, codename='view_book'),\n+            Permission.objects.get(content_type=book_ct, codename='change_book')\n+        )\n+        \n+        request = self.factory.get('/admin/')\n+        request.user = self.user\n+        \n+        # User should be able to view/add/change/delete\n+        self.assertTrue(inline.has_view_permission(request, self.author))\n+        self.assertTrue(inline.has_add_permission(request, self.author))\n+        self.assertTrue(inline.has_change_permission(request, self.author))\n+        self.assertTrue(inline.has_delete_permission(request, self.author))\n", "gold_standard_diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b9e..5e7b23f9a00a 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2111,46 +2111,50 @@ def get_queryset(self, request):\n             queryset = queryset.none()\n         return queryset\n \n+    def _has_any_perms_for_target_model(self, request, perms):\n+        \"\"\"\n+        This method is called only when the ModelAdmin's model is for an\n+        ManyToManyField's implicit through model (if self.opts.auto_created).\n+        Return True if the user has any of the given permissions ('add',\n+        'change', etc.) for the model that points to the through model.\n+        \"\"\"\n+        opts = self.opts\n+        # Find the target model of an auto-created many-to-many relationship.\n+        for field in opts.fields:\n+            if field.remote_field and field.remote_field.model != self.parent_model:\n+                opts = field.remote_field.model._meta\n+                break\n+        return any(\n+            request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename(perm, opts)))\n+            for perm in perms\n+        )\n+\n     def has_add_permission(self, request, obj):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # Auto-created intermediate models don't have their own\n+            # permissions. The user needs to have the change permission for the\n+            # related model in order to be able to do anything with the\n+            # intermediate model.\n+            return self._has_any_perms_for_target_model(request, ['change'])\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # Same comment as has_add_permission().\n+            return self._has_any_perms_for_target_model(request, ['change'])\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # Same comment as has_add_permission().\n+            return self._has_any_perms_for_target_model(request, ['change'])\n         return super().has_delete_permission(request, obj)\n \n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            opts = self.opts\n-            # The model was auto-created as intermediary for a many-to-many\n-            # Many-relationship; find the target model.\n-            for field in opts.fields:\n-                if field.remote_field and field.remote_field.model != self.parent_model:\n-                    opts = field.remote_field.model._meta\n-                    break\n-            return (\n-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or\n-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n-            )\n+            # Same comment as has_add_permission(). The 'change' permission\n+            # also implies the 'view' permission.\n+            return self._has_any_perms_for_target_model(request, ['view', 'change'])\n         return super().has_view_permission(request)\n \n \ndiff --git a/docs/releases/2.1.8.txt b/docs/releases/2.1.8.txt\nindex dc6d2f7b44a3..b8774c6f46ed 100644\n--- a/docs/releases/2.1.8.txt\n+++ b/docs/releases/2.1.8.txt\n@@ -9,4 +9,6 @@ Django 2.1.8 fixes a bug in 2.1.7.\n Bugfixes\n ========\n \n-*\n+* Prevented admin inlines for a ``ManyToManyField``\\'s implicit through model\n+  from being editable if the user only has the view permission\n+  (:ticket:`30289`).\ndiff --git a/tests/admin_inlines/models.py b/tests/admin_inlines/models.py\nindex 38b2999f794c..a42e2588e9e9 100644\n--- a/tests/admin_inlines/models.py\n+++ b/tests/admin_inlines/models.py\n@@ -37,6 +37,9 @@ def __str__(self):\n class Book(models.Model):\n     name = models.CharField(max_length=50)\n \n+    def __str__(self):\n+        return self.name\n+\n \n class Author(models.Model):\n     name = models.CharField(max_length=50)\ndiff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 5272d44f3524..736c2eab89eb 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -595,10 +595,10 @@ def setUpTestData(cls):\n         cls.user.user_permissions.add(permission)\n \n         author = Author.objects.create(pk=1, name='The Author')\n-        book = author.books.create(name='The inline Book')\n+        cls.book = author.books.create(name='The inline Book')\n         cls.author_change_url = reverse('admin:admin_inlines_author_change', args=(author.id,))\n         # Get the ID of the automatically created intermediate model for the Author-Book m2m\n-        author_book_auto_m2m_intermediate = Author.books.through.objects.get(author=author, book=book)\n+        author_book_auto_m2m_intermediate = Author.books.through.objects.get(author=author, book=cls.book)\n         cls.author_book_auto_m2m_intermediate_id = author_book_auto_m2m_intermediate.pk\n \n         cls.holder = Holder2.objects.create(dummy=13)\n@@ -636,6 +636,25 @@ def test_inline_change_fk_noperm(self):\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n \n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines. (It could be nicer to hide the empty, non-editable\n+        # inlines on the add page.)\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n     def test_inline_add_m2m_add_perm(self):\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n@@ -665,11 +684,39 @@ def test_inline_change_m2m_add_perm(self):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n+\n     def test_inline_change_m2m_change_perm(self):\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n         # We have change perm on books, so we can add/change/delete inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, True)\n         self.assertContains(response, '<h2>Author-book relationships</h2>')\n         self.assertContains(response, 'Add another Author-book relationship')\n         self.assertContains(response, '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" '\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11149"}