{"instance_id": "psf__requests-1724", "score": "I", "diff": "diff --git a/requests/models.py b/requests/models.py\nindex f82f56a3..2d49061f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -307,7 +307,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP method.\"\"\"\n         self.method = method\n         if self.method is not None:\n-            self.method = self.method.upper()\n+            self.method = to_native_string(self.method.upper())\n \n     def prepare_url(self, url, params):\n         \"\"\"Prepares the given HTTP URL.\"\"\"\ndiff --git a/requests/sessions.py b/requests/sessions.py\nindex cc72f65d..c6700dec 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -16,7 +16,7 @@ from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse\n from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n-from .utils import to_key_val_list, default_headers\n+from .utils import to_key_val_list, default_headers, to_native_string\n from .exceptions import TooManyRedirects, InvalidSchema\n from .structures import CaseInsensitiveDict\n \n@@ -311,7 +311,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"\n         # Create the Request.\n         req = Request(\n-            method = method.upper(),\n+            method = to_native_string(method.upper()),\n             url = url,\n             headers = headers,\n             files = files,\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 00000000..0273f907\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,41 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+Test edge cases for the unicode method fix\n+\"\"\"\n+import sys\n+from requests.models import PreparedRequest\n+from requests.utils import to_native_string\n+\n+print(\"Python version:\", sys.version)\n+print(\"\\nTesting edge cases...\")\n+\n+# Test 1: Empty string\n+print(\"\\n1. Empty string method:\")\n+p = PreparedRequest()\n+p.prepare_method(u'')\n+print(\"   Result:\", repr(p.method), \"type:\", type(p.method).__name__)\n+\n+# Test 2: Method with non-ASCII characters (should still work)\n+print(\"\\n2. Method with non-ASCII unicode characters:\")\n+try:\n+    p = PreparedRequest()\n+    p.prepare_method(u'P\u00d6ST')  # Method with umlaut\n+    print(\"   Result:\", repr(p.method), \"type:\", type(p.method).__name__)\n+except Exception as e:\n+    print(\"   Error:\", type(e).__name__, str(e))\n+\n+# Test 3: to_native_string behavior\n+print(\"\\n3. Testing to_native_string directly:\")\n+test_cases = [\n+    u'POST',\n+    'POST',\n+    u'',\n+    u'M\u00c9TODO',  # Spanish method with accent\n+]\n+\n+for test in test_cases:\n+    result = to_native_string(test)\n+    print(f\"   Input: {repr(test)} ({type(test).__name__}) -> Output: {repr(result)} ({type(result).__name__})\")\n+\n+print(\"\\nAll edge cases tested.\")\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 00000000..e4bb9d3a\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,74 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+import sys\n+import tempfile\n+import requests\n+from requests.models import Request, PreparedRequest\n+from requests.sessions import Session\n+\n+print(\"Python version:\", sys.version)\n+print(\"\\nTesting the fix for unicode method names...\")\n+\n+# Test 1: PreparedRequest.prepare_method() with unicode\n+print(\"\\n1. Testing PreparedRequest.prepare_method() with unicode:\")\n+p = PreparedRequest()\n+p.prepare_method(u'POST')\n+print(\"   Result: method =\", repr(p.method), \"type =\", type(p.method).__name__)\n+if sys.version_info[0] == 2:\n+    assert isinstance(p.method, str), \"Method should be native str in Python 2\"\n+else:\n+    assert isinstance(p.method, str), \"Method should be str in Python 3\"\n+print(\"   \u2713 PASS\")\n+\n+# Test 2: Request with unicode method through prepare()\n+print(\"\\n2. Testing Request with unicode method through prepare():\")\n+req = Request(method=u'POST', url=u'http://example.com')\n+prep = req.prepare()\n+print(\"   Result: method =\", repr(prep.method), \"type =\", type(prep.method).__name__)\n+if sys.version_info[0] == 2:\n+    assert isinstance(prep.method, str), \"Method should be native str in Python 2\"\n+else:\n+    assert isinstance(prep.method, str), \"Method should be str in Python 3\"\n+print(\"   \u2713 PASS\")\n+\n+# Test 3: Session.request() with unicode method\n+print(\"\\n3. Testing Session.request() with unicode method:\")\n+with tempfile.NamedTemporaryFile(delete=False) as f:\n+    f.write(b'\\xcf\\x84\\xce\\xbf\\xcf\\x81\\xce\\xbf\\xcf\\x82')\n+    temp_file = f.name\n+\n+try:\n+    files = {u'file': open(temp_file, 'rb')}\n+    session = Session()\n+    \n+    # Create a mock adapter to avoid actual network calls\n+    from requests.adapters import HTTPAdapter\n+    from requests.models import Response\n+    \n+    class MockAdapter(HTTPAdapter):\n+        def send(self, request, **kwargs):\n+            # Just return a dummy response\n+            resp = Response()\n+            resp.status_code = 200\n+            resp._content = b'{\"success\": true}'\n+            resp.headers['Content-Type'] = 'application/json'\n+            return resp\n+    \n+    session.mount('http://', MockAdapter())\n+    session.mount('https://', MockAdapter())\n+    \n+    # This should not raise UnicodeDecodeError anymore\n+    response = session.request(method=u'POST', url=u'http://example.com', files=files)\n+    print(\"   Response status:\", response.status_code)\n+    print(\"   \u2713 PASS - No UnicodeDecodeError!\")\n+    \n+except UnicodeDecodeError as e:\n+    print(\"   \u2717 FAIL - UnicodeDecodeError:\", str(e))\n+    sys.exit(1)\n+except Exception as e:\n+    print(\"   Other error:\", type(e).__name__, str(e))\n+finally:\n+    import os\n+    os.unlink(temp_file)\n+\n+print(\"\\nAll tests passed! The unicode method fix is working correctly.\")\ndiff --git a/test_issue_scenario.py b/test_issue_scenario.py\nnew file mode 100644\nindex 00000000..8e840503\n--- /dev/null\n+++ b/test_issue_scenario.py\n@@ -0,0 +1,65 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+Test the exact scenario from the issue report.\n+\"\"\"\n+import sys\n+import tempfile\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.models import Response\n+\n+print(\"Python version:\", sys.version)\n+print(\"\\nReproducing the issue scenario...\")\n+\n+# Create a temporary binary file\n+with tempfile.NamedTemporaryFile(delete=False) as f:\n+    # Write binary data that contains byte 0xcf (the one mentioned in the error)\n+    f.write(b'\\xcf\\x84\\xce\\xbf\\xcf\\x81\\xce\\xbf\\xcf\\x82')\n+    temp_file = f.name\n+\n+# Mock adapter to avoid actual network calls\n+class MockAdapter(HTTPAdapter):\n+    def send(self, request, **kwargs):\n+        # Check that the method is the correct type\n+        print(\"  Method type in adapter:\", type(request.method).__name__)\n+        print(\"  Method value:\", repr(request.method))\n+        \n+        # Just return a dummy response\n+        resp = Response()\n+        resp.status_code = 200\n+        resp._content = b'{\"success\": true}'\n+        resp.headers['Content-Type'] = 'application/json'\n+        resp.url = request.url\n+        return resp\n+\n+# Install mock adapter\n+session = requests.Session()\n+session.mount('http://', MockAdapter())\n+session.mount('https://', MockAdapter())\n+\n+# Scenario 1: Normal string method (should work)\n+print(\"\\n1. Testing with normal string method='POST':\")\n+try:\n+    files = {u'file': open(temp_file, 'rb')}\n+    response = session.request(method='POST', url=u'http://httpbin.org/post', files=files)\n+    print(\"  \u2713 SUCCESS - Status code:\", response.status_code)\n+except Exception as e:\n+    print(\"  \u2717 FAILED -\", type(e).__name__, str(e))\n+\n+# Scenario 2: Unicode method (this was causing the issue)\n+print(\"\\n2. Testing with unicode method=u'POST':\")\n+try:\n+    files = {u'file': open(temp_file, 'rb')}\n+    response = session.request(method=u'POST', url=u'http://httpbin.org/post', files=files)\n+    print(\"  \u2713 SUCCESS - Status code:\", response.status_code)\n+    print(\"\\nThe fix is working! Unicode method names no longer cause UnicodeDecodeError.\")\n+except UnicodeDecodeError as e:\n+    print(\"  \u2717 FAILED - UnicodeDecodeError:\", str(e))\n+    print(\"  This is the original issue - unicode method names cause errors with binary data\")\n+except Exception as e:\n+    print(\"  \u2717 FAILED -\", type(e).__name__, str(e))\n+\n+# Clean up\n+import os\n+os.unlink(temp_file)\ndiff --git a/test_python2_simulation.py b/test_python2_simulation.py\nnew file mode 100644\nindex 00000000..da5b280d\n--- /dev/null\n+++ b/test_python2_simulation.py\n@@ -0,0 +1,54 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+Simulate the Python 2.7 issue to demonstrate the fix\n+\"\"\"\n+import sys\n+\n+print(\"Python version:\", sys.version)\n+print(\"\\nSimulating the Python 2.7 unicode issue...\")\n+\n+# In Python 2.7, the issue occurred when:\n+# 1. method was unicode (u'POST')\n+# 2. The method was concatenated with binary data in httplib\n+# 3. This caused implicit ASCII decoding which failed\n+\n+# Simulate what would happen in Python 2.7 without our fix\n+print(\"\\n1. Simulating the bug (what would happen without the fix):\")\n+try:\n+    # Simulate httplib's behavior in Python 2.7\n+    unicode_method = u'POST'\n+    binary_data = b'\\xcf\\x84\\xce\\xbf\\xcf\\x81\\xce\\xbf\\xcf\\x82'\n+    \n+    # This is similar to what httplib does internally\n+    # In Python 2.7, concatenating unicode + bytes causes implicit decoding\n+    if sys.version_info[0] == 2:\n+        # This would fail in Python 2.7\n+        result = unicode_method + binary_data\n+    else:\n+        # Python 3 doesn't allow this operation at all\n+        print(\"   In Python 3, unicode + bytes is not allowed (TypeError)\")\n+        print(\"   But in Python 2.7, it would try ASCII decode and fail with UnicodeDecodeError\")\n+except Exception as e:\n+    print(\"   Error:\", type(e).__name__, \"-\", str(e))\n+\n+# Show how our fix prevents the issue\n+print(\"\\n2. With our fix (converting to native string):\")\n+from requests.utils import to_native_string\n+\n+unicode_method = u'POST'\n+# Convert to native string type\n+native_method = to_native_string(unicode_method)\n+\n+print(f\"   Original: {repr(unicode_method)} ({type(unicode_method).__name__})\")\n+print(f\"   Converted: {repr(native_method)} ({type(native_method).__name__})\")\n+\n+if sys.version_info[0] == 2:\n+    print(\"   In Python 2: unicode 'POST' -> bytes 'POST'\")\n+    print(\"   This prevents the UnicodeDecodeError when mixed with binary data\")\n+else:\n+    print(\"   In Python 3: str 'POST' -> str 'POST' (no conversion needed)\")\n+    print(\"   But the consistent handling ensures compatibility\")\n+\n+print(\"\\nThe fix ensures the method is always the native string type,\"\n+      \"\\npreventing UnicodeDecodeError in Python 2.7 when handling binary data.\")\ndiff --git a/test_unicode_method.py b/test_unicode_method.py\nnew file mode 100644\nindex 00000000..9b444717\n--- /dev/null\n+++ b/test_unicode_method.py\n@@ -0,0 +1,52 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+import sys\n+import tempfile\n+from requests.models import Request, PreparedRequest\n+from requests.sessions import Session\n+\n+# Create a temporary file with binary data\n+with tempfile.NamedTemporaryFile(delete=False) as f:\n+    # Write some binary data that would trigger the issue\n+    f.write(b'\\xcf\\x84\\xce\\xbf\\xcf\\x81\\xce\\xbf\\xcf\\x82')\n+    temp_file = f.name\n+\n+print(\"Python version:\", sys.version)\n+print(\"Testing unicode method issue...\")\n+\n+# Test prepare_method directly\n+print(\"\\nTesting PreparedRequest.prepare_method():\")\n+p = PreparedRequest()\n+try:\n+    p.prepare_method(u'POST')\n+    print(\"  Unicode method: method =\", repr(p.method), \"type =\", type(p.method))\n+except Exception as e:\n+    print(\"  Failed:\", type(e).__name__, str(e))\n+\n+# Test with Request\n+print(\"\\nTesting Request creation with unicode method:\")\n+try:\n+    files = {u'file': open(temp_file, 'rb')}\n+    req = Request(method=u'POST', url=u'http://httpbin.org/post', files=files)\n+    print(\"  Request created, method =\", repr(req.method), \"type =\", type(req.method))\n+    \n+    # Prepare the request\n+    prep = req.prepare()\n+    print(\"  PreparedRequest method =\", repr(prep.method), \"type =\", type(prep.method))\n+except Exception as e:\n+    print(\"  Failed:\", type(e).__name__, str(e))\n+\n+# Test with Session\n+print(\"\\nTesting Session.request() with unicode method:\")\n+try:\n+    files = {u'file': open(temp_file, 'rb')}\n+    session = Session()\n+    # This will call method.upper() in sessions.py\n+    req = session.request(method=u'POST', url=u'http://httpbin.org/post', files=files)\n+    print(\"  Session request created successfully\")\n+except Exception as e:\n+    print(\"  Failed:\", type(e).__name__, str(e))\n+\n+# Clean up\n+import os\n+os.unlink(temp_file)\ndiff --git a/test_unicode_method_unit.py b/test_unicode_method_unit.py\nnew file mode 100644\nindex 00000000..060bc05c\n--- /dev/null\n+++ b/test_unicode_method_unit.py\n@@ -0,0 +1,80 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+Unit tests for the unicode method fix\n+\"\"\"\n+import sys\n+import unittest\n+from requests.models import PreparedRequest\n+from requests.sessions import Session\n+from requests import Request\n+\n+class TestUnicodeMethod(unittest.TestCase):\n+    \n+    def test_prepared_request_unicode_method(self):\n+        \"\"\"Test PreparedRequest.prepare_method with unicode input\"\"\"\n+        p = PreparedRequest()\n+        p.prepare_method(u'POST')\n+        \n+        # In Python 2, should be native str (bytes)\n+        # In Python 3, should be native str (unicode)\n+        self.assertIsInstance(p.method, str)\n+        self.assertEqual(p.method, 'POST')\n+        \n+    def test_prepared_request_str_method(self):\n+        \"\"\"Test PreparedRequest.prepare_method with str input\"\"\"\n+        p = PreparedRequest()\n+        p.prepare_method('POST')\n+        \n+        self.assertIsInstance(p.method, str)\n+        self.assertEqual(p.method, 'POST')\n+        \n+    def test_request_prepare_unicode_method(self):\n+        \"\"\"Test Request.prepare() with unicode method\"\"\"\n+        req = Request(method=u'POST', url='http://example.com')\n+        prep = req.prepare()\n+        \n+        self.assertIsInstance(prep.method, str)\n+        self.assertEqual(prep.method, 'POST')\n+        \n+    def test_session_prepare_request_unicode_method(self):\n+        \"\"\"Test Session.prepare_request with Request having unicode method\"\"\"\n+        session = Session()\n+        req = Request(method=u'POST', url='http://example.com')\n+        prep = session.prepare_request(req)\n+        \n+        self.assertIsInstance(prep.method, str)\n+        self.assertEqual(prep.method, 'POST')\n+        \n+    def test_various_http_methods(self):\n+        \"\"\"Test various HTTP methods as unicode strings\"\"\"\n+        methods = [u'GET', u'POST', u'PUT', u'DELETE', u'PATCH', u'HEAD', u'OPTIONS']\n+        \n+        for method in methods:\n+            p = PreparedRequest()\n+            p.prepare_method(method)\n+            self.assertIsInstance(p.method, str)\n+            self.assertEqual(p.method, method.upper())\n+            \n+    def test_lowercase_unicode_method(self):\n+        \"\"\"Test that lowercase unicode methods are uppercased correctly\"\"\"\n+        p = PreparedRequest()\n+        p.prepare_method(u'post')\n+        \n+        self.assertIsInstance(p.method, str)\n+        self.assertEqual(p.method, 'POST')\n+        \n+    def test_none_method(self):\n+        \"\"\"Test that None method is handled correctly\"\"\"\n+        p = PreparedRequest()\n+        p.prepare_method(None)\n+        \n+        self.assertIsNone(p.method)\n+\n+if __name__ == '__main__':\n+    # Print Python version for reference\n+    print(\"Python version:\", sys.version)\n+    print()\n+    \n+    # Run the tests\n+    unittest.main(verbosity=2)\n", "gold_standard_diff": "From 495f87363b3a8b5856850aea5db15df15d597f77 Mon Sep 17 00:00:00 2001\nFrom: daftshady <daftonshady@gmail.com>\nDate: Mon, 4 Nov 2013 18:32:45 +0900\nSubject: [PATCH 1/2] fixed #1723\n\n---\n requests/api.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/requests/api.py b/requests/api.py\nindex baf43dd613..33b7b2a306 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -12,7 +12,7 @@\n \"\"\"\n \n from . import sessions\n-\n+from .compat import builtin_str\n \n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n@@ -41,7 +41,7 @@ def request(method, url, **kwargs):\n     \"\"\"\n \n     session = sessions.Session()\n-    return session.request(method=method, url=url, **kwargs)\n+    return session.request(method=builtin_str(method), url=url, **kwargs)\n \n \n def get(url, **kwargs):\n\nFrom 1511dfa637643bae5b6111a20ecb80ec9ae26032 Mon Sep 17 00:00:00 2001\nFrom: daftshady <daftonshady@gmail.com>\nDate: Mon, 4 Nov 2013 22:32:17 +0900\nSubject: [PATCH 2/2] moved logic to Session object and added test case\n\n---\n requests/api.py      | 4 ++--\n requests/sessions.py | 5 ++++-\n test_requests.py     | 5 +++++\n 3 files changed, 11 insertions(+), 3 deletions(-)\n\ndiff --git a/requests/api.py b/requests/api.py\nindex 33b7b2a306..baf43dd613 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -12,7 +12,7 @@\n \"\"\"\n \n from . import sessions\n-from .compat import builtin_str\n+\n \n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n@@ -41,7 +41,7 @@ def request(method, url, **kwargs):\n     \"\"\"\n \n     session = sessions.Session()\n-    return session.request(method=builtin_str(method), url=url, **kwargs)\n+    return session.request(method=method, url=url, **kwargs)\n \n \n def get(url, **kwargs):\ndiff --git a/requests/sessions.py b/requests/sessions.py\nindex cc72f65d9d..175712f976 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -12,7 +12,7 @@\n from collections import Mapping\n from datetime import datetime\n \n-from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse\n+from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse, builtin_str\n from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n@@ -309,6 +309,9 @@ def request(self, method, url,\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n+\n+        method = builtin_str(method)\n+\n         # Create the Request.\n         req = Request(\n             method = method.upper(),\ndiff --git a/test_requests.py b/test_requests.py\nindex a593db30a2..754581e1a9 100755\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -433,6 +433,11 @@ def test_unicode_multipart_post_fieldnames(self):\n         prep = r.prepare()\n         assert b'name=\"stuff\"' in prep.body\n         assert b'name=\"b\\'stuff\\'\"' not in prep.body\n+    \n+    def test_unicode_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n \n     def test_custom_content_type(self):\n         r = requests.post(httpbin('post'),\n", "gold_standard_pr_link": "https://github.com/psf/requests/pull/1724"}