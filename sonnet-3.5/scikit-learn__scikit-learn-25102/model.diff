diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..fd3680928 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
@@ -36,6 +37,10 @@ def _wrap_in_pandas_container(
     index : array-like, default=None
         Index for data.
 
+    dtypes : dict, default=None
+        A dictionary mapping column names to their desired dtypes. If provided,
+        the output DataFrame will use these dtypes for the specified columns.
+
     Returns
     -------
     dataframe : DataFrame
@@ -57,9 +62,14 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        if dtypes is not None:
+            data_to_wrap = data_to_wrap.astype(dtypes)
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    if dtypes is not None:
+        df = df.astype(dtypes)
+    return df
 
 
 def _get_output_config(method, estimator=None):
@@ -127,10 +137,15 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         return data_to_wrap
 
     # dense_config == "pandas"
+    dtypes = None
+    if hasattr(original_input, "dtypes"):
+        dtypes = original_input.dtypes.to_dict()
+
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
 
 
diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py
index ac73ca094..d85bee8ce 100644
--- a/sklearn/utils/tests/test_set_output.py
+++ b/sklearn/utils/tests/test_set_output.py
@@ -239,6 +239,31 @@ def test__wrap_in_pandas_container_column_errors():
     assert_array_equal(X_wrapped.columns, range(X_np.shape[1]))
 
 
+
+def test_preserve_dtypes():
+    """Check that dtypes are preserved when using pandas output."""
+    pd = pytest.importorskip("pandas")
+    np = pytest.importorskip("numpy")
+
+    X = pd.DataFrame({
+        "float_col": [1.0, 2.0, 3.0],
+        "int_col": [1, 2, 3],
+        "category_col": pd.Categorical(["A", "B", "C"]),
+        "float16_col": np.array([1, 2, 3], dtype=np.float16),
+    })
+
+    class SimpleTransformer(EstimatorWithSetOutput):
+        def transform(self, X):
+            return X.copy()
+
+    transformer = SimpleTransformer().fit(X)
+    _safe_set_output(transformer, transform="pandas")
+
+    X_transformed = transformer.transform(X)
+
+    assert X_transformed.dtypes.equals(X.dtypes)
+    assert X_transformed["float16_col"].dtype == np.float16
+    assert X_transformed["category_col"].dtype.name == "category"
 def test_set_output_mro():
     """Check that multi-inheritance resolves to the correct class method.
 
