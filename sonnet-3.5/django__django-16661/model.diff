diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..8b3f521299 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -466,7 +466,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             # then the id value would be found already from employee__department_id.
             if not prev_field or (
                 prev_field.is_relation
-                and field not in prev_field.path_infos[-1].target_fields
+                and (field not in prev_field.path_infos[-1].target_fields or field.primary_key)
             ):
                 relation_parts.append(part)
             if not getattr(field, "path_infos", None):
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..8bd034f0d2
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/testproject/testapp/__init__.py b/testproject/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testapp/admin.py b/testproject/testapp/admin.py
new file mode 100644
index 0000000000..f2f7084413
--- /dev/null
+++ b/testproject/testapp/admin.py
@@ -0,0 +1,23 @@
+from django.contrib import admin
+
+# Register your models here.
+from .models import Country, Place, Restaurant, Waiter
+
+class CountryAdmin(admin.ModelAdmin):
+    pass
+
+class PlaceAdmin(admin.ModelAdmin):
+    pass
+
+class RestaurantAdmin(admin.ModelAdmin):
+    pass
+
+class WaiterAdmin(admin.ModelAdmin):
+    list_filter = [
+        'restaurant__place__country',
+    ]
+
+admin.site.register(Country, CountryAdmin)
+admin.site.register(Place, PlaceAdmin)
+admin.site.register(Restaurant, RestaurantAdmin)
+admin.site.register(Waiter, WaiterAdmin)
\ No newline at end of file
diff --git a/testproject/testapp/apps.py b/testproject/testapp/apps.py
new file mode 100644
index 0000000000..5876911b2d
--- /dev/null
+++ b/testproject/testapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class TestappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "testapp"
diff --git a/testproject/testapp/migrations/__init__.py b/testproject/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testapp/models.py b/testproject/testapp/models.py
new file mode 100644
index 0000000000..3146d5bb19
--- /dev/null
+++ b/testproject/testapp/models.py
@@ -0,0 +1,14 @@
+from django.db import models
+
+# Create your models here.
+class Country(models.Model):
+    name = models.CharField(max_length=256)
+
+class Place(models.Model):
+    country = models.ForeignKey(Country, on_delete=models.CASCADE)
+
+class Restaurant(models.Model):
+    place = models.OneToOneField(Place, on_delete=models.CASCADE, primary_key=True)
+
+class Waiter(models.Model):
+    restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE)
\ No newline at end of file
diff --git a/testproject/testapp/tests.py b/testproject/testapp/tests.py
new file mode 100644
index 0000000000..6e5ab9be1b
--- /dev/null
+++ b/testproject/testapp/tests.py
@@ -0,0 +1,15 @@
+from django.test import TestCase
+
+# Create your tests here.
+from django.contrib.admin.sites import AdminSite
+from .admin import WaiterAdmin
+from .models import Waiter
+
+class LookupAllowedTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.site = AdminSite()
+
+    def test_lookup_allowed_foreign_primary(self):
+        ma = WaiterAdmin(Waiter, self.site)
+        self.assertIs(ma.lookup_allowed('restaurant__place__country', 'test_value'), True)
\ No newline at end of file
diff --git a/testproject/testapp/views.py b/testproject/testapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/testproject/testapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py
new file mode 100644
index 0000000000..7f8fbc1461
--- /dev/null
+++ b/testproject/testproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+
+application = get_asgi_application()
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..cc57b3df48
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 5.0.dev20230327120524.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-s5z@%aji$+xyr7ti&1*@ms537k0)^yrzmk#xcqi8@k$a)bh9u5"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+    "testapp",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "testproject.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "testproject.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..0127e6d889
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,23 @@
+"""
+URL configuration for testproject project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..c24d0012dc
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+
+application = get_wsgi_application()
diff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py
index aa8b183f14..51647fa40e 100644
--- a/tests/admin_views/admin.py
+++ b/tests/admin_views/admin.py
@@ -1416,3 +1416,24 @@ site9.register(Actor, ActorAdmin9)
 site10 = admin.AdminSite(name="admin10")
 site10.final_catch_all_view = False
 site10.register(Article, ArticleAdminWithExtraUrl)
+from .models import Country, Place, Restaurant, Waiter
+
+class CountryAdmin(admin.ModelAdmin):
+    pass
+
+class PlaceAdmin(admin.ModelAdmin):
+    pass
+
+class RestaurantAdmin(admin.ModelAdmin):
+    pass
+
+class WaiterAdmin(admin.ModelAdmin):
+    list_filter = [
+        'restaurant__place__country',
+    ]
+
+# Register the new admin classes
+admin.site.register(Country, CountryAdmin)
+admin.site.register(Place, PlaceAdmin)
+admin.site.register(Restaurant, RestaurantAdmin)
+admin.site.register(Waiter, WaiterAdmin)
\ No newline at end of file
diff --git a/tests/admin_views/models.py b/tests/admin_views/models.py
index 85facf8821..b281926b91 100644
--- a/tests/admin_views/models.py
+++ b/tests/admin_views/models.py
@@ -1134,3 +1134,15 @@ class Traveler(models.Model):
         related_name="favorite_country_to_vacation_set",
         limit_choices_to={"continent": Country.ASIA},
     )
+
+class Country(models.Model):
+    name = models.CharField(max_length=256)
+
+class Place(models.Model):
+    country = models.ForeignKey(Country, models.CASCADE)
+
+class Restaurant(models.Model):
+    place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+
+class Waiter(models.Model):
+    restaurant = models.ForeignKey(Restaurant, models.CASCADE)
\ No newline at end of file
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index ea38b62a72..89825fe495 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -8684,3 +8684,16 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):
         response = self.client.get(unknown_url)
         # Does not redirect to the admin login.
         self.assertEqual(response.status_code, 404)
+from django.contrib.admin.sites import AdminSite
+from django.test import TestCase
+from .admin import WaiterAdmin
+from .models import Country, Place, Restaurant, Waiter
+
+class LookupAllowedTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.site = AdminSite()
+
+    def test_lookup_allowed_foreign_primary(self):
+        ma = WaiterAdmin(Waiter, self.site)
+        self.assertIs(ma.lookup_allowed('restaurant__place__country', 'test_value'), True)
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..8ce127bccd
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,63 @@
+
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'dummy_secret_key_for_tests'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'tests.admin_views',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'tests.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
