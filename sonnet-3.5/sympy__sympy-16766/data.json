{"instance_id": "sympy__sympy-16766", "score": "C", "diff": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310735..a284707d60 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,10 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n", "gold_standard_diff": "From 20658480bb912b68ec87871e2f629ec9b9f73eed Mon Sep 17 00:00:00 2001\nFrom: kkkkx <709563092@qq.com>\nDate: Sat, 30 Mar 2019 02:14:42 +0100\nSubject: [PATCH 1/4] Fixed 'indices' parameter optional\n\nMake 'indices' parameter optional in .replace_with_arrays\nAdd tests about this change\n---\n sympy/tensor/tensor.py            | 5 +++--\n sympy/tensor/tests/test_tensor.py | 2 ++\n 2 files changed, 5 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/tensor/tensor.py b/sympy/tensor/tensor.py\nindex ecd47e7d599d..6c825494de74 100644\n--- a/sympy/tensor/tensor.py\n+++ b/sympy/tensor/tensor.py\n@@ -2110,7 +2110,7 @@ def contract_and_permute(metric, array, pos):\n \n         return free_ind2, array\n \n-    def replace_with_arrays(self, replacement_dict, indices):\n+    def replace_with_arrays(self, replacement_dict, indices=[]):\n         \"\"\"\n         Replace the tensorial expressions with arrays. The final array will\n         correspond to the N-dimensional array with indices arranged according\n@@ -2122,7 +2122,8 @@ def replace_with_arrays(self, replacement_dict, indices):\n         replacement_dict\n             dictionary containing the replacement rules for tensors.\n         indices\n-            the index order with respect to which the array is read.\n+            the index order with respect to which the array is read. The\n+            original index order will be used if no value is passed.\n \n         Examples\n         ========\ndiff --git a/sympy/tensor/tests/test_tensor.py b/sympy/tensor/tests/test_tensor.py\nindex a3856c1e11da..49e5ed8b607a 100644\n--- a/sympy/tensor/tests/test_tensor.py\n+++ b/sympy/tensor/tests/test_tensor.py\n@@ -1897,6 +1897,7 @@ def test_tensor_replacement():\n     repl = {H(i,-j): [[1,2],[3,4]], L: diag(1, -1)}\n     assert expr._extract_data(repl) == ([i, j], Array([[1, -2], [3, -4]]))\n \n+    assert expr.replace_with_arrays(repl) == Array([[1, -2], [3, -4]])\n     assert expr.replace_with_arrays(repl, [i, j]) == Array([[1, -2], [3, -4]])\n     assert expr.replace_with_arrays(repl, [i, -j]) == Array([[1, 2], [3, 4]])\n     assert expr.replace_with_arrays(repl, [-i, j]) == Array([[1, -2], [-3, 4]])\n@@ -1910,6 +1911,7 @@ def test_tensor_replacement():\n     repl = {H(i,j): [[1,2],[3,4]], L: diag(1, -1)}\n     assert expr._extract_data(repl) == ([i, j], Array([[1, 2], [3, 4]]))\n \n+    assert expr.replace_with_arrays(repl) == Array([[1, 2], [3, 4]])\n     assert expr.replace_with_arrays(repl, [i, j]) == Array([[1, 2], [3, 4]])\n     assert expr.replace_with_arrays(repl, [i, -j]) == Array([[1, -2], [3, -4]])\n     assert expr.replace_with_arrays(repl, [-i, j]) == Array([[1, 2], [-3, -4]])\n\nFrom 789b0eb8e022a91ce78d1d7ff932bc7096975f11 Mon Sep 17 00:00:00 2001\nFrom: kkkkx <709563092@qq.com>\nDate: Sat, 30 Mar 2019 02:16:57 +0100\nSubject: [PATCH 2/4] Revert \"Fixed 'indices' parameter optional\"\n\nThis reverts commit 20658480bb912b68ec87871e2f629ec9b9f73eed.\n---\n sympy/tensor/tensor.py            | 5 ++---\n sympy/tensor/tests/test_tensor.py | 2 --\n 2 files changed, 2 insertions(+), 5 deletions(-)\n\ndiff --git a/sympy/tensor/tensor.py b/sympy/tensor/tensor.py\nindex 6c825494de74..ecd47e7d599d 100644\n--- a/sympy/tensor/tensor.py\n+++ b/sympy/tensor/tensor.py\n@@ -2110,7 +2110,7 @@ def contract_and_permute(metric, array, pos):\n \n         return free_ind2, array\n \n-    def replace_with_arrays(self, replacement_dict, indices=[]):\n+    def replace_with_arrays(self, replacement_dict, indices):\n         \"\"\"\n         Replace the tensorial expressions with arrays. The final array will\n         correspond to the N-dimensional array with indices arranged according\n@@ -2122,8 +2122,7 @@ def replace_with_arrays(self, replacement_dict, indices=[]):\n         replacement_dict\n             dictionary containing the replacement rules for tensors.\n         indices\n-            the index order with respect to which the array is read. The\n-            original index order will be used if no value is passed.\n+            the index order with respect to which the array is read.\n \n         Examples\n         ========\ndiff --git a/sympy/tensor/tests/test_tensor.py b/sympy/tensor/tests/test_tensor.py\nindex 49e5ed8b607a..a3856c1e11da 100644\n--- a/sympy/tensor/tests/test_tensor.py\n+++ b/sympy/tensor/tests/test_tensor.py\n@@ -1897,7 +1897,6 @@ def test_tensor_replacement():\n     repl = {H(i,-j): [[1,2],[3,4]], L: diag(1, -1)}\n     assert expr._extract_data(repl) == ([i, j], Array([[1, -2], [3, -4]]))\n \n-    assert expr.replace_with_arrays(repl) == Array([[1, -2], [3, -4]])\n     assert expr.replace_with_arrays(repl, [i, j]) == Array([[1, -2], [3, -4]])\n     assert expr.replace_with_arrays(repl, [i, -j]) == Array([[1, 2], [3, 4]])\n     assert expr.replace_with_arrays(repl, [-i, j]) == Array([[1, -2], [-3, 4]])\n@@ -1911,7 +1910,6 @@ def test_tensor_replacement():\n     repl = {H(i,j): [[1,2],[3,4]], L: diag(1, -1)}\n     assert expr._extract_data(repl) == ([i, j], Array([[1, 2], [3, 4]]))\n \n-    assert expr.replace_with_arrays(repl) == Array([[1, 2], [3, 4]])\n     assert expr.replace_with_arrays(repl, [i, j]) == Array([[1, 2], [3, 4]])\n     assert expr.replace_with_arrays(repl, [i, -j]) == Array([[1, -2], [3, -4]])\n     assert expr.replace_with_arrays(repl, [-i, j]) == Array([[1, 2], [-3, -4]])\n\nFrom 0a84019ad782e462fb579a33ca873bb3c97981f6 Mon Sep 17 00:00:00 2001\nFrom: kkkkx <709563092@qq.com>\nDate: Wed, 1 May 2019 22:21:55 +0200\nSubject: [PATCH 3/4] Added function _print_Indexed and test\n\n-made PythonCodePrinter support Indexed by adding _print_Indexed\nfunction\n-added test to _print_Indexed\n---\n sympy/printing/pycode.py            | 4 ++++\n sympy/printing/tests/test_pycode.py | 4 +++-\n 2 files changed, 7 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 6f50380a093e..bb7f67fef800 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,10 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex f1a9a3789807..a489ae80f130 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -12,9 +12,10 @@\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n-\n+p = IndexedBase(\"p\")\n \n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n@@ -34,6 +35,7 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+    assert prntr.doprint(p[0]) == 'p[0]'\n \n \n def test_MpmathPrinter():\n\nFrom b2b3a6d6cf9e274f063d57ff368c7caab9c3f249 Mon Sep 17 00:00:00 2001\nFrom: kangzhia <709563092@qq.com>\nDate: Thu, 2 May 2019 18:23:23 +0200\nSubject: [PATCH 4/4] Change asterisk to index syntax\n\n---\n sympy/printing/pycode.py            | 3 ++-\n sympy/printing/tests/test_pycode.py | 2 +-\n 2 files changed, 3 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a284707d6075..a96d4a2fbe83 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -358,7 +358,8 @@ def _print_Not(self, expr):\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n     def _print_Indexed(self, expr):\n-        base, *index = expr.args\n+        base = expr.args[0]\n+        index = expr.args[1:]\n         return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n \n \ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex a489ae80f130..0253d7218f5a 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -35,7 +35,7 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n-    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n \n \n def test_MpmathPrinter():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/16766"}