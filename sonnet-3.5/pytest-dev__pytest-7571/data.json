{"instance_id": "pytest-dev__pytest-7571", "score": "I", "diff": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 11031f2f2..5291660f3 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -346,6 +346,7 @@ class LogCaptureFixture:\n         self._item = item\n         # dict of log name -> log level\n         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]\n+        self._initial_handler_level = self.handler.level  # Store initial handler level\n \n     def _finalize(self) -> None:\n         \"\"\"Finalizes the fixture.\n@@ -356,6 +357,9 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        \n+        # restore handler level\n+        self.handler.setLevel(self._initial_handler_level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n@@ -435,6 +439,9 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        # Update the initial handler level if it's the first time set_level is called\n+        if len(self._initial_logger_levels) == 1:\n+            self._initial_handler_level = self.handler.level\n \n     @contextmanager\n     def at_level(\n", "gold_standard_diff": "From 0e0275d8d999863921121d08baab8231f8fa27d8 Mon Sep 17 00:00:00 2001\nFrom: Ran Benita <ran@unusedvar.com>\nDate: Wed, 29 Jul 2020 14:46:11 +0300\nSubject: [PATCH] logging: fix capture handler level not reset on teardown\n after caplog.set_level()\n\nThis probably regressed in fcbaab8.\n---\n src/_pytest/logging.py          |  4 ++++\n testing/logging/test_fixture.py | 35 +++++++++++++++++++++++++++++++--\n 2 files changed, 37 insertions(+), 2 deletions(-)\n\ndiff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 11031f2f229..0ee9457ea72 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -345,6 +345,7 @@ def __init__(self, item: nodes.Node) -> None:\n         \"\"\"Creates a new funcarg.\"\"\"\n         self._item = item\n         # dict of log name -> log level\n+        self._initial_handler_level = None  # type: Optional[int]\n         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]\n \n     def _finalize(self) -> None:\n@@ -353,6 +354,8 @@ def _finalize(self) -> None:\n         This restores the log levels changed by :meth:`set_level`.\n         \"\"\"\n         # restore log levels\n+        if self._initial_handler_level is not None:\n+            self.handler.setLevel(self._initial_handler_level)\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n@@ -434,6 +437,7 @@ def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> Non\n         # save the original log-level to restore it during teardown\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n \n     @contextmanager\ndiff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex da5303302b6..6e5e9c2b42a 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -2,6 +2,7 @@\n \n import pytest\n from _pytest.logging import caplog_records_key\n+from _pytest.pytester import Testdir\n \n logger = logging.getLogger(__name__)\n sublogger = logging.getLogger(__name__ + \".baz\")\n@@ -27,8 +28,11 @@ def test_change_level(caplog):\n     assert \"CRITICAL\" in caplog.text\n \n \n-def test_change_level_undo(testdir):\n-    \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n+def test_change_level_undo(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test.\n+\n+    Tests the logging output themselves (affacted both by logger and handler levels).\n+    \"\"\"\n     testdir.makepyfile(\n         \"\"\"\n         import logging\n@@ -50,6 +54,33 @@ def test2(caplog):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/7571"}