{"instance_id": "django__django-11133", "score": "I", "diff": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..1cf8df1633 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -8,6 +8,7 @@ import time\n from email.header import Header\n from http.client import responses\n from urllib.parse import quote, urlparse\n+from memoryview import memoryview\n \n from django.conf import settings\n from django.core import signals, signing\n@@ -304,7 +305,10 @@ class HttpResponse(HttpResponseBase):\n \n     @property\n     def content(self):\n-        return b''.join(self._container)\n+        content = b''.join(self._container)\n+        if isinstance(content, memoryview):\n+            return content.tobytes()\n+        return content\n \n     @content.setter\n     def content(self, value):\n", "gold_standard_diff": "From 9aa56cb0d5dede7fc176a46c745dfd3dacdad773 Mon Sep 17 00:00:00 2001\nFrom: sage <laymonage@gmail.com>\nDate: Wed, 27 Mar 2019 11:40:10 +0700\nSubject: [PATCH] Fixed #30294 -- Allowed HttpResponse to accept memoryview\n content.\n\n---\n django/http/response.py       |  2 +-\n docs/ref/request-response.txt | 21 +++++++++++++++------\n docs/releases/3.0.txt         |  3 ++-\n tests/httpwrappers/tests.py   |  4 ++++\n 4 files changed, 22 insertions(+), 8 deletions(-)\n\ndiff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193bafc..a9ede09dd959 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -229,7 +229,7 @@ def make_bytes(self, value):\n         # Handle string types -- we can't rely on force_bytes here because:\n         # - Python attempts str conversion first\n         # - when self._charset != 'utf-8' it re-encodes the content\n-        if isinstance(value, bytes):\n+        if isinstance(value, (bytes, memoryview)):\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\ndiff --git a/docs/ref/request-response.txt b/docs/ref/request-response.txt\nindex 4adc20bb25bd..d6a336178e36 100644\n--- a/docs/ref/request-response.txt\n+++ b/docs/ref/request-response.txt\n@@ -631,13 +631,18 @@ Usage\n Passing strings\n ~~~~~~~~~~~~~~~\n \n-Typical usage is to pass the contents of the page, as a string or bytestring,\n-to the :class:`HttpResponse` constructor::\n+Typical usage is to pass the contents of the page, as a string, bytestring,\n+or :class:`memoryview`, to the :class:`HttpResponse` constructor::\n \n     >>> from django.http import HttpResponse\n     >>> response = HttpResponse(\"Here's the text of the Web page.\")\n     >>> response = HttpResponse(\"Text only, please.\", content_type=\"text/plain\")\n     >>> response = HttpResponse(b'Bytestrings are also accepted.')\n+    >>> response = HttpResponse(memoryview(b'Memoryview as well.'))\n+\n+.. versionchanged:: 3.0\n+\n+    Support for :class:`memoryview` was added.\n \n But if you want to add content incrementally, you can use ``response`` as a\n file-like object::\n@@ -741,10 +746,10 @@ Methods\n     Instantiates an ``HttpResponse`` object with the given page content and\n     content type.\n \n-    ``content`` is most commonly an iterator, bytestring, or string. Other\n-    types will be converted to a bytestring by encoding their string\n-    representation. Iterators should return strings or bytestrings and those\n-    will be joined together to form the content of the response.\n+    ``content`` is most commonly an iterator, bytestring, :class:`memoryview`,\n+    or string. Other types will be converted to a bytestring by encoding their\n+    string representation. Iterators should return strings or bytestrings and\n+    those will be joined together to form the content of the response.\n \n     ``content_type`` is the MIME type optionally completed by a character set\n     encoding and is used to fill the HTTP ``Content-Type`` header. If not\n@@ -760,6 +765,10 @@ Methods\n     given it will be extracted from ``content_type``, and if that\n     is unsuccessful, the :setting:`DEFAULT_CHARSET` setting will be used.\n \n+    .. versionchanged:: 3.0\n+\n+        Support for :class:`memoryview` ``content`` was added.\n+\n .. method:: HttpResponse.__setitem__(header, value)\n \n     Sets the given header name to the given value. Both ``header`` and\ndiff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt\nindex 33fa6ddfe0f9..11257b70be29 100644\n--- a/docs/releases/3.0.txt\n+++ b/docs/releases/3.0.txt\n@@ -188,7 +188,8 @@ Models\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* Allowed :class:`~django.http.HttpResponse` to be initialized with\n+  :class:`memoryview` content.\n \n Serialization\n ~~~~~~~~~~~~~\ndiff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex e6c629789888..0c81cd034183 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,6 +366,10 @@ def test_non_string_content(self):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11133"}