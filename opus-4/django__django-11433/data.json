{"instance_id": "django__django-11433", "score": "I", "diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..c621e60578 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -42,13 +42,13 @@ def construct_instance(form, instance, fields=None, exclude=None):\n         if not f.editable or isinstance(f, models.AutoField) \\\n                 or f.name not in cleaned_data:\n             continue\n-        if fields is not None and f.name not in fields:\n-            continue\n+        # Don't skip fields based on the fields list if they are in cleaned_data.\n+        # This allows cleaned_data to override default values for fields not in the form.\n         if exclude and f.name in exclude:\n             continue\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n+        if (f.has_default() and f.name in form.fields and\n                 form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\ndiff --git a/test_cleaned_data_default.py b/test_cleaned_data_default.py\nnew file mode 100644\nindex 0000000000..ca7b60b9c9\n--- /dev/null\n+++ b/test_cleaned_data_default.py\n@@ -0,0 +1,65 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+from django.forms import ModelForm\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel)\n+\n+# Create a form that doesn't include the 'status' field\n+class TestForm(ModelForm):\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']\n+    \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Try to set status in cleaned_data\n+        cleaned_data['status'] = 'active'\n+        return cleaned_data\n+\n+# Test the issue\n+print(\"Testing the issue...\")\n+form = TestForm(data={'name': 'Test Name'})\n+if form.is_valid():\n+    instance = form.save(commit=False)\n+    print(f\"Instance name: {instance.name}\")\n+    print(f\"Instance status: {instance.status}\")\n+    print(f\"Expected status: active\")\n+    print(f\"Actual status: {instance.status}\")\n+    print(f\"Status was overridden: {instance.status == 'active'}\")\n+else:\n+    print(\"Form is not valid\")\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..2f04560867\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,128 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+from django.forms import ModelForm\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+    priority = models.IntegerField(default=5)\n+    active = models.BooleanField(default=False)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel)\n+\n+print(\"=== Test 1: Basic cleaned_data override ===\")\n+# Test 1: Form that doesn't include fields with defaults\n+class TestForm1(ModelForm):\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']\n+    \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Set values for fields not in the form\n+        cleaned_data['status'] = 'active'\n+        cleaned_data['priority'] = 10\n+        cleaned_data['active'] = True\n+        return cleaned_data\n+\n+form1 = TestForm1(data={'name': 'Test Name'})\n+if form1.is_valid():\n+    instance = form1.save(commit=False)\n+    print(f\"Instance name: {instance.name}\")\n+    print(f\"Instance status: {instance.status} (expected: active)\")\n+    print(f\"Instance priority: {instance.priority} (expected: 10)\")\n+    print(f\"Instance active: {instance.active} (expected: True)\")\n+    print(f\"Test 1 passed: {instance.status == 'active' and instance.priority == 10 and instance.active == True}\")\n+else:\n+    print(\"Form is not valid\")\n+\n+print(\"\\n=== Test 2: Override with excluded fields ===\")\n+# Test 2: Form with excluded fields  \n+class TestForm2(ModelForm):\n+    class Meta:\n+        model = TestModel\n+        exclude = ['status', 'priority']\n+    \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Try to set excluded fields - these should NOT be saved\n+        cleaned_data['status'] = 'excluded'\n+        cleaned_data['priority'] = 99\n+        return cleaned_data\n+\n+form2 = TestForm2(data={'name': 'Test Name 2', 'active': True})\n+if form2.is_valid():\n+    instance = form2.save(commit=False)\n+    print(f\"Instance name: {instance.name}\")\n+    print(f\"Instance status: {instance.status} (expected: pending - excluded fields should not be saved)\")\n+    print(f\"Instance priority: {instance.priority} (expected: 5 - excluded fields should not be saved)\")\n+    print(f\"Instance active: {instance.active} (expected: True)\")\n+    print(f\"Test 2 passed: {instance.status == 'pending' and instance.priority == 5}\")\n+else:\n+    print(\"Form is not valid\")\n+\n+print(\"\\n=== Test 3: Fields without defaults ===\")\n+# Create another model without defaults\n+class TestModel2(models.Model):\n+    name = models.CharField(max_length=100)\n+    description = models.TextField()\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Create the table\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel2)\n+\n+class TestForm3(ModelForm):\n+    class Meta:\n+        model = TestModel2\n+        fields = ['name']\n+    \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Set a field that doesn't have a default\n+        cleaned_data['description'] = 'Added via cleaned_data'\n+        return cleaned_data\n+\n+form3 = TestForm3(data={'name': 'Test Name 3'})\n+if form3.is_valid():\n+    instance = form3.save(commit=False)\n+    print(f\"Instance name: {instance.name}\")\n+    print(f\"Instance description: {instance.description} (expected: Added via cleaned_data)\")\n+    print(f\"Test 3 passed: {instance.description == 'Added via cleaned_data'}\")\n+else:\n+    print(\"Form is not valid\")\n+\n+print(\"\\n=== All tests completed ===\")\ndiff --git a/test_debug.py b/test_debug.py\nnew file mode 100644\nindex 0000000000..151ad35ab0\n--- /dev/null\n+++ b/test_debug.py\n@@ -0,0 +1,70 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+from django.forms import ModelForm\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel)\n+\n+# Create a form that doesn't include the 'status' field\n+class TestForm(ModelForm):\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']\n+    \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Try to set status in cleaned_data\n+        cleaned_data['status'] = 'active'\n+        print(f\"In clean(), cleaned_data: {cleaned_data}\")\n+        return cleaned_data\n+\n+# Test the issue\n+print(\"Testing the issue...\")\n+form = TestForm(data={'name': 'Test Name'})\n+print(f\"Form fields: {list(form.fields.keys())}\")\n+if form.is_valid():\n+    print(f\"Form cleaned_data: {form.cleaned_data}\")\n+    print(f\"'status' in form.fields: {'status' in form.fields}\")\n+    print(f\"'status' in form.cleaned_data: {'status' in form.cleaned_data}\")\n+    instance = form.save(commit=False)\n+    print(f\"Instance name: {instance.name}\")\n+    print(f\"Instance status: {instance.status}\")\n+    print(f\"Expected status: active\")\n+    print(f\"Actual status: {instance.status}\")\n+    print(f\"Status was overridden: {instance.status == 'active'}\")\n+else:\n+    print(\"Form is not valid\")\ndiff --git a/test_direct_debug.py b/test_direct_debug.py\nnew file mode 100644\nindex 0000000000..255766ecab\n--- /dev/null\n+++ b/test_direct_debug.py\n@@ -0,0 +1,122 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+from django.forms import ModelForm, model_to_dict\n+\n+# Add debugging code to construct_instance\n+from django.forms import models as forms_models\n+original_construct_instance = forms_models.construct_instance\n+\n+def debug_construct_instance(form, instance, fields=None, exclude=None):\n+    from django.db import models\n+    opts = instance._meta\n+    \n+    cleaned_data = form.cleaned_data\n+    print(f\"[DEBUG] construct_instance called\")\n+    print(f\"[DEBUG] cleaned_data: {cleaned_data}\")\n+    print(f\"[DEBUG] form.fields: {list(form.fields.keys())}\")\n+    \n+    file_field_list = []\n+    for f in opts.fields:\n+        print(f\"[DEBUG] Processing field: {f.name}\")\n+        \n+        if not f.editable or isinstance(f, models.AutoField) or f.name not in cleaned_data:\n+            print(f\"[DEBUG]   Skipping {f.name}: editable={f.editable}, AutoField={isinstance(f, models.AutoField)}, in_cleaned_data={f.name in cleaned_data}\")\n+            continue\n+            \n+        if fields is not None and f.name not in fields:\n+            print(f\"[DEBUG]   Skipping {f.name}: not in fields list\")\n+            continue\n+            \n+        if exclude and f.name in exclude:\n+            print(f\"[DEBUG]   Skipping {f.name}: in exclude list\")\n+            continue\n+            \n+        # Check the condition that's causing the issue\n+        has_default = f.has_default()\n+        in_form_fields = f.name in form.fields\n+        if has_default and in_form_fields:\n+            value_omitted = form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))\n+            print(f\"[DEBUG]   {f.name}: has_default={has_default}, in_form_fields={in_form_fields}, value_omitted={value_omitted}\")\n+            if value_omitted:\n+                print(f\"[DEBUG]   Skipping {f.name}: value omitted from data\")\n+                continue\n+        else:\n+            print(f\"[DEBUG]   {f.name}: has_default={has_default}, in_form_fields={in_form_fields} - proceeding\")\n+        \n+        # Defer saving file-type fields until after the other fields, so a\n+        # callable upload_to can use the values from other fields.\n+        if isinstance(f, models.FileField):\n+            file_field_list.append(f)\n+        else:\n+            print(f\"[DEBUG]   Saving {f.name} = {cleaned_data[f.name]}\")\n+            f.save_form_data(instance, cleaned_data[f.name])\n+    \n+    for f in file_field_list:\n+        f.save_form_data(instance, cleaned_data[f.name])\n+    \n+    return instance\n+\n+# Monkey patch for debugging\n+forms_models.construct_instance = debug_construct_instance\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel)\n+\n+# Create a form that doesn't include the 'status' field\n+class TestForm(ModelForm):\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']\n+    \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Try to set status in cleaned_data\n+        cleaned_data['status'] = 'active'\n+        return cleaned_data\n+\n+# Test the issue\n+print(\"\\n=== Testing the issue ===\")\n+form = TestForm(data={'name': 'Test Name'})\n+if form.is_valid():\n+    instance = form.save(commit=False)\n+    print(f\"\\nResult:\")\n+    print(f\"  Instance name: {instance.name}\")\n+    print(f\"  Instance status: {instance.status}\")\n+    print(f\"  Expected status: active\")\n+    print(f\"  Status was overridden: {instance.status == 'active'}\")\n+else:\n+    print(\"Form is not valid\")\ndiff --git a/test_field_access.py b/test_field_access.py\nnew file mode 100644\nindex 0000000000..ca73f21de4\n--- /dev/null\n+++ b/test_field_access.py\n@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+from django.forms import ModelForm\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Create a form that doesn't include the 'status' field\n+class TestForm(ModelForm):\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']\n+\n+# Test if accessing form['status'] raises an error\n+print(\"Testing field access...\")\n+form = TestForm(data={'name': 'Test Name'})\n+try:\n+    field = form['status']\n+    print(f\"form['status'] = {field}\")\n+except KeyError as e:\n+    print(f\"KeyError: {e}\")\n", "gold_standard_diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f34..3ad8cea9b619 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -48,8 +48,11 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n-        if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+        if (\n+            f.has_default() and\n+            form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\n+            cleaned_data.get(f.name) in form[f.name].field.empty_values\n+        ):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 3893eb334c92..42b9cf2c45b1 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -585,6 +585,32 @@ class Meta:\n         m2 = mf2.save(commit=False)\n         self.assertEqual(m2.mode, '')\n \n+    def test_default_not_populated_on_non_empty_value_in_cleaned_data(self):\n+        class PubForm(forms.ModelForm):\n+            mode = forms.CharField(max_length=255, required=False)\n+            mocked_mode = None\n+\n+            def clean(self):\n+                self.cleaned_data['mode'] = self.mocked_mode\n+                return self.cleaned_data\n+\n+            class Meta:\n+                model = PublicationDefaults\n+                fields = ('mode',)\n+\n+        pub_form = PubForm({})\n+        pub_form.mocked_mode = 'de'\n+        pub = pub_form.save(commit=False)\n+        self.assertEqual(pub.mode, 'de')\n+        # Default should be populated on an empty value in cleaned_data.\n+        default_mode = 'di'\n+        for empty_value in pub_form.fields['mode'].empty_values:\n+            with self.subTest(empty_value=empty_value):\n+                pub_form = PubForm({})\n+                pub_form.mocked_mode = empty_value\n+                pub = pub_form.save(commit=False)\n+                self.assertEqual(pub.mode, default_mode)\n+\n     def test_default_not_populated_on_optional_checkbox_input(self):\n         class PubForm(forms.ModelForm):\n             class Meta:\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11433"}