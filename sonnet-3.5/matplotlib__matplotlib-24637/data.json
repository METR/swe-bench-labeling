{"instance_id": "matplotlib__matplotlib-24637", "score": "I", "diff": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd078..68bd08b511 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -361,6 +361,9 @@ class OffsetBox(martist.Artist):\n         return mtransforms.Bbox.from_bounds(px - xd, py - yd, w, h)\n \n     def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         \"\"\"\n         Update the location of children if necessary and draw them\n         to the given *renderer*.\n@@ -546,6 +549,12 @@ class PaddedBox(OffsetBox):\n                 [(0, 0)])\n \n     def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         # docstring inherited\n         w, h, xdescent, ydescent, offsets = self.get_extent_offsets(renderer)\n         px, py = self.get_offset(w, h, xdescent, ydescent, renderer)\n@@ -659,6 +668,9 @@ class DrawingArea(OffsetBox):\n             a.set_figure(fig)\n \n     def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         # docstring inherited\n \n         dpi_cor = renderer.points_to_pixels(1.)\n@@ -798,6 +810,9 @@ class TextArea(OffsetBox):\n         return w, h, xd, yd\n \n     def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         # docstring inherited\n         self._text.draw(renderer)\n         _bbox_artist(self, renderer, fill=False, props=dict(pad=0.))\n@@ -880,6 +895,9 @@ class AuxTransformBox(OffsetBox):\n         return ub.width, ub.height, 0., 0.\n \n     def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         # docstring inherited\n         for c in self._children:\n             c.draw(renderer)\n@@ -1056,6 +1074,9 @@ class AnchoredOffsetbox(OffsetBox):\n             self.patch.set_mutation_scale(fontsize)\n \n     def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         # docstring inherited\n         if not self.get_visible():\n             return\n@@ -1202,6 +1223,12 @@ class OffsetImage(OffsetBox):\n         return w, h, 0, 0\n \n     def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         # docstring inherited\n         self.image.draw(renderer)\n         # bbox_artist(self, renderer, fill=False, props=dict(pad=0.))\n@@ -1446,7 +1473,12 @@ or callable, default: value of *xycoords*\n             patchA = self.arrowprops.get(\"patchA\", self.patch)\n             self.arrow_patch.set_patchA(patchA)\n \n-    def draw(self, renderer):\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n+        if self.get_gid() is not None:\n+            renderer.start_rasterizing()\n+            renderer.set_gid(self.get_gid())\n         # docstring inherited\n         if renderer is not None:\n             self._renderer = renderer\n", "gold_standard_diff": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex db64888ff5f6..8a9db63ccca7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1446,6 +1446,7 @@ def draw(self, renderer):\n             self._renderer = renderer\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n+        renderer.open_group(self.__class__.__name__, gid=self.get_gid())\n         self.update_positions(renderer)\n         if self.arrow_patch is not None:\n             if self.arrow_patch.figure is None and self.figure is not None:\n@@ -1453,6 +1454,7 @@ def draw(self, renderer):\n             self.arrow_patch.draw(renderer)\n         self.patch.draw(renderer)\n         self.offsetbox.draw(renderer)\n+        renderer.close_group(self.__class__.__name__)\n         self.stale = False\n \n \ndiff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 680efd67379b..c0fe8549c2f3 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -15,6 +15,7 @@\n from matplotlib.testing.decorators import check_figures_equal, image_comparison\n from matplotlib.testing._markers import needs_usetex\n from matplotlib import font_manager as fm\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n \n \n def test_visibility():\n@@ -588,3 +589,34 @@ def test_svg_font_string(font_str, include_generic):\n \n         assert font_info == f\"{size}px {font_str}\"\n     assert text_count == len(ax.texts)\n+\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/24637"}