{"instance_id": "pydata__xarray-6461", "score": "I", "diff": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 7676d8e5..7b1a9513 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1829,7 +1829,7 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: attrs[1]\n+        keep_attrs = lambda attrs, context: attrs[1] if len(attrs) > 1 else (attrs[0] if attrs else {})\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\ndiff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 6a86738a..fa266a16 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1929,6 +1929,27 @@ def test_where_attrs() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    \"\"\"Test for issue where xr.where fails with scalar arguments when keep_attrs=True.\"\"\"\n+    # Test with explicit keep_attrs=True and scalar x, y\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"cond\": \"attr\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"cond\": \"attr\"})\n+    assert_identical(expected, actual)\n+    \n+    # Test with x as DataArray and y as scalar\n+    x = xr.DataArray([10, 20, 30], dims=\"x\", attrs={\"x\": \"attr\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([10, 0, 30], dims=\"x\", attrs={\"x\": \"attr\"})\n+    assert_identical(expected, actual)\n+    \n+    # Test with global keep_attrs=True\n+    with xr.set_options(keep_attrs=True):\n+        actual = xr.where(cond, 1, 0)\n+        expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"cond\": \"attr\"})\n+        assert_identical(expected, actual)\n+\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n", "gold_standard_diff": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex c84a0549774..d5f00432c85 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -73,6 +73,8 @@ Bug fixes\n - In the API for backends, support dimensions that express their preferred chunk sizes\n   as a tuple of integers. (:issue:`6333`, :pull:`6334`)\n   By `Stan West <https://github.com/stanwest>`_.\n+- Fix bug in :py:func:`where` when passing non-xarray objects with ``keep_attrs=True``. (:issue:`6444`, :pull:`6461`)\n+  By `Sam Levang <https://github.com/slevang>`_.\n \n Documentation\n ~~~~~~~~~~~~~\ndiff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 7676d8e558c..1834622d96e 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1825,11 +1825,10 @@ def where(cond, x, y, keep_attrs=None):\n     \"\"\"\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n-\n     if keep_attrs is True:\n         # keep the attributes of x, the second parameter, by default to\n         # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: attrs[1]\n+        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\ndiff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 6a86738ab2f..7a397428ba3 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,10 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    assert actual.attrs == {}\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/6461"}