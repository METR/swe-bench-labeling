{"instance_id": "pydata__xarray-7233", "score": "C", "diff": "diff --git a/test_coarsen_construct.py b/test_coarsen_construct.py\nnew file mode 100644\nindex 00000000..9e3f64e0\n--- /dev/null\n+++ b/test_coarsen_construct.py\n@@ -0,0 +1,17 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Create a sample dataset\n+da = xr.DataArray(np.arange(24), dims=[\"time\"])\n+da = da.assign_coords(day=365 * da)\n+ds = da.to_dataset(name=\"T\")\n+\n+# Apply coarsen.construct\n+result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+\n+# Check if 'day' is still a coordinate\n+assert 'day' in result.coords, \"day should be a coordinate after coarsen.construct\"\n+\n+print(\"Test passed: 'day' is still a coordinate after coarsen.construct\")\n+print(\"Result:\")\n+print(result)\ndiff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex c194ec08..b86f1e12 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -960,6 +960,9 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):\n             obj = self.obj\n \n         reshaped.attrs = obj.attrs if keep_attrs else {}\n+        \n+        # Store the original coordinates\n+        original_coords = set(obj.coords)\n \n         for key, var in obj.variables.items():\n             reshaped_dims = tuple(\n@@ -974,6 +977,8 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):\n                 reshaped[key] = var\n \n         should_be_coords = set(window_dim) & set(self.obj.coords)\n+        # Include all original coordinates\n+        should_be_coords = should_be_coords.union(original_coords)\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n", "gold_standard_diff": "From be0749c197b09b1c820d4c19042895dc93d68c4b Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <thomas.nicholas@columbia.edu>\nDate: Thu, 27 Oct 2022 19:25:24 -0400\nSubject: [PATCH 1/7] test\n\n---\n xarray/tests/test_coarsen.py | 12 ++++++++++++\n 1 file changed, 12 insertions(+)\n\ndiff --git a/xarray/tests/test_coarsen.py b/xarray/tests/test_coarsen.py\nindex d44499856c6..c59e752c061 100644\n--- a/xarray/tests/test_coarsen.py\n+++ b/xarray/tests/test_coarsen.py\n@@ -318,3 +318,15 @@ def test_coarsen_construct(dask: bool) -> None:\n \n     with pytest.raises(ValueError):\n         ds.coarsen(time=12).construct(time=(\"bar\",))\n+\n+\n+def test_coarsen_construct_keeps_all_coords():\n+    da = xr.DataArray(np.arange(24), dims=[\"time\"])\n+    da = da.assign_coords(day=365 * da)\n+\n+    result = da.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+    assert list(da.coords) == list(result.coords)\n+\n+    ds = da.to_dataset(name=\"T\")\n+    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+    assert list(da.coords) == list(result.coords)\n\nFrom 498c90abbbba0aa43b9af37b32806686c89920b9 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <thomas.nicholas@columbia.edu>\nDate: Thu, 27 Oct 2022 19:35:19 -0400\nSubject: [PATCH 2/7] fix\n\n---\n xarray/core/rolling.py | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex c194ec084db..d5b006be832 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -973,7 +973,9 @@ def construct(\n             else:\n                 reshaped[key] = var\n \n-        should_be_coords = set(window_dim) & set(self.obj.coords)\n+        should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(\n+            self.obj.coords\n+        )\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n\nFrom 34ec8b73657581cb9bcaf6352f88062b72cbb294 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <thomas.nicholas@columbia.edu>\nDate: Thu, 27 Oct 2022 19:48:47 -0400\nSubject: [PATCH 3/7] whatsnew\n\n---\n doc/whats-new.rst | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 37ea949ab9d..6b96ee696df 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -57,6 +57,8 @@ Bug fixes\n   now reopens the file from scratch for h5netcdf and scipy netCDF backends,\n   rather than reusing a cached version (:issue:`4240`, :issue:`4862`).\n   By `Stephan Hoyer <https://github.com/shoyer>`_.\n+- Fixed bug where :py:meth:`Dataset.coarsen.construct` would demote non-dimension coordinates to variables. (:pull:`7233`)\n+  By `Tom Nicholas <https://github.com/TomNicholas>`_.\n \n Documentation\n ~~~~~~~~~~~~~\n\nFrom e6cc06c3f3cc06a87904d791d5c462c4e8f07013 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <thomas.nicholas@columbia.edu>\nDate: Thu, 27 Oct 2022 19:51:52 -0400\nSubject: [PATCH 4/7] group related tests into a class\n\n---\n xarray/tests/test_coarsen.py | 158 ++++++++++++++++++-----------------\n 1 file changed, 83 insertions(+), 75 deletions(-)\n\ndiff --git a/xarray/tests/test_coarsen.py b/xarray/tests/test_coarsen.py\nindex c59e752c061..542f6815597 100644\n--- a/xarray/tests/test_coarsen.py\n+++ b/xarray/tests/test_coarsen.py\n@@ -250,83 +250,91 @@ def test_coarsen_da_reduce(da, window, name) -> None:\n     assert_allclose(actual, expected)\n \n \n-@pytest.mark.parametrize(\"dask\", [True, False])\n-def test_coarsen_construct(dask: bool) -> None:\n-\n-    ds = Dataset(\n-        {\n-            \"vart\": (\"time\", np.arange(48), {\"a\": \"b\"}),\n-            \"varx\": (\"x\", np.arange(10), {\"a\": \"b\"}),\n-            \"vartx\": ((\"x\", \"time\"), np.arange(480).reshape(10, 48), {\"a\": \"b\"}),\n-            \"vary\": (\"y\", np.arange(12)),\n-        },\n-        coords={\"time\": np.arange(48), \"y\": np.arange(12)},\n-        attrs={\"foo\": \"bar\"},\n-    )\n-\n-    if dask and has_dask:\n-        ds = ds.chunk({\"x\": 4, \"time\": 10})\n-\n-    expected = xr.Dataset(attrs={\"foo\": \"bar\"})\n-    expected[\"vart\"] = ((\"year\", \"month\"), ds.vart.data.reshape((-1, 12)), {\"a\": \"b\"})\n-    expected[\"varx\"] = ((\"x\", \"x_reshaped\"), ds.varx.data.reshape((-1, 5)), {\"a\": \"b\"})\n-    expected[\"vartx\"] = (\n-        (\"x\", \"x_reshaped\", \"year\", \"month\"),\n-        ds.vartx.data.reshape(2, 5, 4, 12),\n-        {\"a\": \"b\"},\n-    )\n-    expected[\"vary\"] = ds.vary\n-    expected.coords[\"time\"] = ((\"year\", \"month\"), ds.time.data.reshape((-1, 12)))\n-\n-    with raise_if_dask_computes():\n-        actual = ds.coarsen(time=12, x=5).construct(\n-            {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+class TestCoarsenConstruct:\n+    @pytest.mark.parametrize(\"dask\", [True, False])\n+    def test_coarsen_construct(self, dask: bool) -> None:\n+\n+        ds = Dataset(\n+            {\n+                \"vart\": (\"time\", np.arange(48), {\"a\": \"b\"}),\n+                \"varx\": (\"x\", np.arange(10), {\"a\": \"b\"}),\n+                \"vartx\": ((\"x\", \"time\"), np.arange(480).reshape(10, 48), {\"a\": \"b\"}),\n+                \"vary\": (\"y\", np.arange(12)),\n+            },\n+            coords={\"time\": np.arange(48), \"y\": np.arange(12)},\n+            attrs={\"foo\": \"bar\"},\n         )\n-    assert_identical(actual, expected)\n \n-    with raise_if_dask_computes():\n-        actual = ds.coarsen(time=12, x=5).construct(\n-            time=(\"year\", \"month\"), x=(\"x\", \"x_reshaped\")\n-        )\n-    assert_identical(actual, expected)\n+        if dask and has_dask:\n+            ds = ds.chunk({\"x\": 4, \"time\": 10})\n \n-    with raise_if_dask_computes():\n-        actual = ds.coarsen(time=12, x=5).construct(\n-            {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}, keep_attrs=False\n+        expected = xr.Dataset(attrs={\"foo\": \"bar\"})\n+        expected[\"vart\"] = (\n+            (\"year\", \"month\"),\n+            ds.vart.data.reshape((-1, 12)),\n+            {\"a\": \"b\"},\n         )\n-        for var in actual:\n-            assert actual[var].attrs == {}\n-        assert actual.attrs == {}\n-\n-    with raise_if_dask_computes():\n-        actual = ds.vartx.coarsen(time=12, x=5).construct(\n-            {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+        expected[\"varx\"] = (\n+            (\"x\", \"x_reshaped\"),\n+            ds.varx.data.reshape((-1, 5)),\n+            {\"a\": \"b\"},\n         )\n-    assert_identical(actual, expected[\"vartx\"])\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct(foo=\"bar\")\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12, x=2).construct(time=(\"year\", \"month\"))\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct()\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct(time=\"bar\")\n-\n-    with pytest.raises(ValueError):\n-        ds.coarsen(time=12).construct(time=(\"bar\",))\n-\n-\n-def test_coarsen_construct_keeps_all_coords():\n-    da = xr.DataArray(np.arange(24), dims=[\"time\"])\n-    da = da.assign_coords(day=365 * da)\n-\n-    result = da.coarsen(time=12).construct(time=(\"year\", \"month\"))\n-    assert list(da.coords) == list(result.coords)\n-\n-    ds = da.to_dataset(name=\"T\")\n-    result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n-    assert list(da.coords) == list(result.coords)\n+        expected[\"vartx\"] = (\n+            (\"x\", \"x_reshaped\", \"year\", \"month\"),\n+            ds.vartx.data.reshape(2, 5, 4, 12),\n+            {\"a\": \"b\"},\n+        )\n+        expected[\"vary\"] = ds.vary\n+        expected.coords[\"time\"] = ((\"year\", \"month\"), ds.time.data.reshape((-1, 12)))\n+\n+        with raise_if_dask_computes():\n+            actual = ds.coarsen(time=12, x=5).construct(\n+                {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+            )\n+        assert_identical(actual, expected)\n+\n+        with raise_if_dask_computes():\n+            actual = ds.coarsen(time=12, x=5).construct(\n+                time=(\"year\", \"month\"), x=(\"x\", \"x_reshaped\")\n+            )\n+        assert_identical(actual, expected)\n+\n+        with raise_if_dask_computes():\n+            actual = ds.coarsen(time=12, x=5).construct(\n+                {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}, keep_attrs=False\n+            )\n+            for var in actual:\n+                assert actual[var].attrs == {}\n+            assert actual.attrs == {}\n+\n+        with raise_if_dask_computes():\n+            actual = ds.vartx.coarsen(time=12, x=5).construct(\n+                {\"time\": (\"year\", \"month\"), \"x\": (\"x\", \"x_reshaped\")}\n+            )\n+        assert_identical(actual, expected[\"vartx\"])\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct(foo=\"bar\")\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12, x=2).construct(time=(\"year\", \"month\"))\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct()\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct(time=\"bar\")\n+\n+        with pytest.raises(ValueError):\n+            ds.coarsen(time=12).construct(time=(\"bar\",))\n+\n+    def test_coarsen_construct_keeps_all_coords(self):\n+        da = xr.DataArray(np.arange(24), dims=[\"time\"])\n+        da = da.assign_coords(day=365 * da)\n+\n+        result = da.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+        assert list(da.coords) == list(result.coords)\n+\n+        ds = da.to_dataset(name=\"T\")\n+        result = ds.coarsen(time=12).construct(time=(\"year\", \"month\"))\n+        assert list(da.coords) == list(result.coords)\n\nFrom 8b65ee2a678bd061b972ee121448a930431fab45 Mon Sep 17 00:00:00 2001\nFrom: Deepak Cherian <dcherian@users.noreply.github.com>\nDate: Fri, 28 Oct 2022 10:27:00 -0600\nSubject: [PATCH 5/7] Update xarray/core/rolling.py\n\n---\n xarray/core/rolling.py | 4 +---\n 1 file changed, 1 insertion(+), 3 deletions(-)\n\ndiff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex d5b006be832..049b7e1638e 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -973,9 +973,7 @@ def construct(\n             else:\n                 reshaped[key] = var\n \n-        should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(\n-            self.obj.coords\n-        )\n+        should_be_coords = set(window_dim) | set(self.obj.coords)\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n\nFrom ff4e54da664c270a4b3acc25d1089969be8cfd24 Mon Sep 17 00:00:00 2001\nFrom: Deepak Cherian <dcherian@users.noreply.github.com>\nDate: Fri, 28 Oct 2022 10:31:32 -0600\nSubject: [PATCH 6/7] Update xarray/core/rolling.py\n\n---\n xarray/core/rolling.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 049b7e1638e..efa8e6924e6 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -973,7 +973,8 @@ def construct(\n             else:\n                 reshaped[key] = var\n \n-        should_be_coords = set(window_dim) | set(self.obj.coords)\n+        # should handle window_dim being unindexed\n+        should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(self.obj.coords)\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n\nFrom 873356151fa3eca2efcb656d026b7aa3862a8cc2 Mon Sep 17 00:00:00 2001\nFrom: \"pre-commit-ci[bot]\"\n <66853113+pre-commit-ci[bot]@users.noreply.github.com>\nDate: Fri, 28 Oct 2022 16:34:42 +0000\nSubject: [PATCH 7/7] [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n---\n xarray/core/rolling.py | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex efa8e6924e6..57a5456b70a 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -974,7 +974,9 @@ def construct(\n                 reshaped[key] = var\n \n         # should handle window_dim being unindexed\n-        should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(self.obj.coords)\n+        should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(\n+            self.obj.coords\n+        )\n         result = reshaped.set_coords(should_be_coords)\n         if isinstance(self.obj, DataArray):\n             return self.obj._from_temp_dataset(result)\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/7233"}