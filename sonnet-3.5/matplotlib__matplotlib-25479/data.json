{"instance_id": "matplotlib__matplotlib-25479", "score": "I", "diff": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db956..81bd92ed5b 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -226,8 +226,8 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):\n \n     Register a new colormap to be accessed by name ::\n \n-        LinearSegmentedColormap('swirly', data, lut)\n-        register_cmap(cmap=swirly_cmap)\n+        LinearSegmentedColormap(\"swirly\", data, lut)\n+        register_cmap(name=\"swirly\", cmap=swirly_cmap)\n \n     Parameters\n     ----------\n@@ -255,6 +255,10 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):\n         except AttributeError as err:\n             raise ValueError(\"Arguments must include a name or a \"\n                              \"Colormap\") from err\n+\n+    # Update the colormap's internal name to match the registered name\n+    cmap.name = name\n+\n     # override_builtin is allowed here for backward compatibility\n     # this is just a shim to enable that to work privately in\n     # the global ColormapRegistry\n@@ -262,15 +266,6 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):\n     _colormaps.register(cmap, name=name, force=override_builtin)\n     _colormaps._allow_override_builtin = False\n \n-\n-def _get_cmap(name=None, lut=None):\n-    \"\"\"\n-    Get a colormap instance, defaulting to rc values if *name* is None.\n-\n-    Parameters\n-    ----------\n-    name : `matplotlib.colors.Colormap` or str or None, default: None\n-        If a `.Colormap` instance, it will be returned. Otherwise, the name of\n         a colormap known to Matplotlib, which will be resampled by *lut*. The\n         default, None, means :rc:`image.cmap`.\n     lut : int or None, default: None\n", "gold_standard_diff": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db9564a..78c4ce163579 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -146,6 +146,11 @@ def register(self, cmap, *, name=None, force=False):\n                                \"that was already in the registry.\")\n \n         self._cmaps[name] = cmap.copy()\n+        # Someone may set the extremes of a builtin colormap and want to register it\n+        # with a different name for future lookups. The object would still have the\n+        # builtin name, so we should update it to the registered name\n+        if self._cmaps[name].name != name:\n+            self._cmaps[name].name = name\n \n     def unregister(self, name):\n         \"\"\"\ndiff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 05922c93dfda..434bb5423543 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -774,7 +774,7 @@ def __copy__(self):\n         return cmapobject\n \n     def __eq__(self, other):\n-        if (not isinstance(other, Colormap) or self.name != other.name or\n+        if (not isinstance(other, Colormap) or\n                 self.colorbar_extend != other.colorbar_extend):\n             return False\n         # To compare lookup tables the Colormaps have to be initialized\ndiff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2e841699cdd4..4f441f8a05a9 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -195,10 +195,10 @@ def test_colormap_equals():\n     # Make sure we can compare different sizes without failure\n     cm_copy._lut = cm_copy._lut[:10, :]\n     assert cm_copy != cmap\n-    # Test different names are not equal\n+    # Test different names are equal if the lookup table is the same\n     cm_copy = cmap.copy()\n     cm_copy.name = \"Test\"\n-    assert cm_copy != cmap\n+    assert cm_copy == cmap\n     # Test colorbar extends\n     cm_copy = cmap.copy()\n     cm_copy.colorbar_extend = not cmap.colorbar_extend\n@@ -1649,3 +1649,15 @@ def test_cm_set_cmap_error():\n     bad_cmap = 'AardvarksAreAwkward'\n     with pytest.raises(ValueError, match=bad_cmap):\n         sm.set_cmap(bad_cmap)\n+\n+\n+def test_set_cmap_mismatched_name():\n+    cmap = matplotlib.colormaps[\"viridis\"].with_extremes(over='r')\n+    # register it with different names\n+    cmap.name = \"test-cmap\"\n+    matplotlib.colormaps.register(name='wrong-cmap', cmap=cmap)\n+\n+    plt.set_cmap(\"wrong-cmap\")\n+    cmap_returned = plt.get_cmap(\"wrong-cmap\")\n+    assert cmap_returned == cmap\n+    assert cmap_returned.name == \"wrong-cmap\"\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/25479"}