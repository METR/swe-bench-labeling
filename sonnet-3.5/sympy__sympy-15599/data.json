{"instance_id": "sympy__sympy-15599", "score": "I", "diff": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc..3da85b9823 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -113,8 +113,11 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n             # if q same for all\n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n-                net = Add(*non_mod_l) + Add(*[i.args[0] for i in mod_l])\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n+                net = Add(*[i.args[0] for i in non_mod_l]) + Add(*[i.args[0] for i in mod_l])\n                 return cls(net, q)\n \n         elif isinstance(p, Mul):\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 04d3b1ab9f..7fe6447ee7 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1623,6 +1623,8 @@ def test_Mod():\n     assert Mod(5.0*x, 0.1*y) == 0.1*Mod(50*x, y)\n     i = Symbol('i', integer=True)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n+    # New test case for Mod(3*i, 2)\n+    assert Mod(3*i, 2).doit() == Mod(i, 2)\n     assert Mod(4*i, 4) == 0\n \n     # issue 8677\n", "gold_standard_diff": "From ae4b6d621df6a919555e219470d241aa9eb128c3 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Thu, 6 Dec 2018 10:48:04 +0530\nSubject: [PATCH 01/15] modified mod\n\n---\n sympy/core/mod.py | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc21..6d035dbff2fd 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -123,6 +123,9 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n+            if q.is_Number:\n+                non_mod_l = [(x%q if x.is_Number else x) for x in non_mod_l]\n+\n             if mod_l and all(inner.args[1] == q for inner in mod_l):\n                 # finding distributive term\n                 non_mod_l = [cls(x, q) for x in non_mod_l]\n@@ -138,6 +141,8 @@ def doit(p, q):\n                 prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n+            print(\"here\")\n+            return Mul(*non_mod_l)*cls(Mul(*mod_l), q)\n \n         # XXX other possibilities?\n \n\nFrom bb205305ba5214507d964895e3afd699c4e5f1f2 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Thu, 6 Dec 2018 11:15:55 +0530\nSubject: [PATCH 02/15] issue with Mod(e/2, 2)\n\n---\n sympy/core/mod.py | 6 +++---\n 1 file changed, 3 insertions(+), 3 deletions(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 6d035dbff2fd..9ba8a26d2a8d 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -124,7 +124,7 @@ def doit(p, q):\n                 both_l[isinstance(arg, cls)].append(arg)\n \n             if q.is_Number:\n-                non_mod_l = [(x%q if x.is_Number else x) for x in non_mod_l]\n+                non_mod_l = [(x%q if x.is_Integer else x) for x in non_mod_l]\n \n             if mod_l and all(inner.args[1] == q for inner in mod_l):\n                 # finding distributive term\n@@ -141,8 +141,8 @@ def doit(p, q):\n                 prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n-            print(\"here\")\n-            return Mul(*non_mod_l)*cls(Mul(*mod_l), q)\n+\n+            return cls(Mul(*non_mod_l), q)\n \n         # XXX other possibilities?\n \n\nFrom b3c0f9625574b550a467c6f99c1baa7851983207 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Thu, 6 Dec 2018 23:03:22 +0530\nSubject: [PATCH 03/15] added test into test_arit\n\n---\n sympy/core/tests/test_arit.py | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 04d3b1ab9fe5..314c85e62bb9 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1662,6 +1662,9 @@ def test_Mod():\n     assert Mod(Mod(x + 2, 4)*(x + 4), 4) == Mod(x*(x + 2), 4)\n     assert Mod(Mod(x + 2, 4)*4, 4) == 0\n \n+    # issue 15493\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+\n \n def test_Mod_is_integer():\n     p = Symbol('p', integer=True)\n\nFrom 54377c89fb3985afbbc9fc47f7a87427eb4ba4c8 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Thu, 6 Dec 2018 23:04:31 +0530\nSubject: [PATCH 04/15] optimized function of Mod\n\n---\n sympy/core/mod.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 9ba8a26d2a8d..fd2b9c691400 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -142,7 +142,7 @@ def doit(p, q):\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n \n-            return cls(Mul(*non_mod_l), q)\n+            p = Mul(*non_mod_l)\n \n         # XXX other possibilities?\n \n\nFrom 2d51c4da3ddd9b61c973ed5d987d70a99ceceee6 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Sun, 16 Dec 2018 14:27:40 +0530\nSubject: [PATCH 05/15] bug with mod fixed\n\n---\n sympy/core/mod.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex fd2b9c691400..1eb0a0082442 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -123,7 +123,7 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if q.is_Number:\n+            if q is 2:\n                 non_mod_l = [(x%q if x.is_Integer else x) for x in non_mod_l]\n \n             if mod_l and all(inner.args[1] == q for inner in mod_l):\n\nFrom 461af761b2e8cf7ddcd5d3e835ffe03d2cad9f02 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Wed, 19 Dec 2018 19:03:51 +0530\nSubject: [PATCH 06/15] bug with q as 1 fixed\n\n---\n sympy/core/mod.py | 15 ++++++++++-----\n 1 file changed, 10 insertions(+), 5 deletions(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 1eb0a0082442..6afe2e836832 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -44,8 +44,6 @@ def doit(p, q):\n                 return S.Zero\n \n             if q.is_Number:\n-                if p.is_Number:\n-                    return (p % q)\n                 if q == 2:\n                     if p.is_even:\n                         return S.Zero\n@@ -123,8 +121,15 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if q is 2:\n-                non_mod_l = [(x%q if x.is_Integer else x) for x in non_mod_l]\n+            if q.is_Integer and q is not S.One:\n+                _ = []\n+                for i in non_mod_l:\n+                    if i.is_Integer:\n+                        # and (i % q is not S.Zero)\n+                        _.append(i%q)\n+                    else:\n+                        _.append(i)\n+                non_mod_l = _\n \n             if mod_l and all(inner.args[1] == q for inner in mod_l):\n                 # finding distributive term\n@@ -142,7 +147,7 @@ def doit(p, q):\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n \n-            p = Mul(*non_mod_l)\n+            p = Mul(*non_mod_l, *mod_l)\n \n         # XXX other possibilities?\n \n\nFrom 29906201099dfb2a32ef30148e94593648b11583 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Wed, 19 Dec 2018 23:56:49 +0530\nSubject: [PATCH 07/15] bug with Mul\n\n---\n sympy/core/mod.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 6afe2e836832..a5a024d9ae6c 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -147,7 +147,7 @@ def doit(p, q):\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n \n-            p = Mul(*non_mod_l, *mod_l)\n+            p = Mul(*non_mod_l)\n \n         # XXX other possibilities?\n \n\nFrom 83e2a00808a7cbfd024974d4122e032687b2bf33 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Thu, 20 Dec 2018 11:41:26 +0530\nSubject: [PATCH 08/15] resolved bug with unpacking of vars\n\n---\n sympy/core/mod.py | 22 +++++++++++-----------\n 1 file changed, 11 insertions(+), 11 deletions(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex a5a024d9ae6c..fc63babc0fbc 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -121,16 +121,6 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if q.is_Integer and q is not S.One:\n-                _ = []\n-                for i in non_mod_l:\n-                    if i.is_Integer:\n-                        # and (i % q is not S.Zero)\n-                        _.append(i%q)\n-                    else:\n-                        _.append(i)\n-                non_mod_l = _\n-\n             if mod_l and all(inner.args[1] == q for inner in mod_l):\n                 # finding distributive term\n                 non_mod_l = [cls(x, q) for x in non_mod_l]\n@@ -147,7 +137,17 @@ def doit(p, q):\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n \n-            p = Mul(*non_mod_l)\n+            if q.is_Integer and q is not S.One:\n+                _ = []\n+                for i in non_mod_l:\n+                    if i.is_Integer:\n+                        # and (i % q is not S.Zero)\n+                        _.append(i%q)\n+                    else:\n+                        _.append(i)\n+                non_mod_l = _\n+\n+            p = Mul(* [*non_mod_l, *mod_l])\n \n         # XXX other possibilities?\n \n\nFrom 88167fba955a145e481f6f36ea72bf8d5be90c30 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Thu, 20 Dec 2018 21:39:29 +0530\nSubject: [PATCH 09/15] bug with concatination of list\n\n---\n sympy/core/mod.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex fc63babc0fbc..5c5ce3fc2463 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -147,7 +147,7 @@ def doit(p, q):\n                         _.append(i)\n                 non_mod_l = _\n \n-            p = Mul(* [*non_mod_l, *mod_l])\n+            p = Mul(*(non_mod_l + mod_l))\n \n         # XXX other possibilities?\n \n\nFrom cf02bc619981dc3edfbe71442a1ca5037232f0a7 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Sat, 22 Dec 2018 21:35:12 +0530\nSubject: [PATCH 10/15] bug with usage og long in python2.7\n\n---\n sympy/core/mod.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 5c5ce3fc2463..f2844602f661 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,6 +1,6 @@\n from __future__ import print_function, division\n \n-from sympy.core.numbers import nan\n+from sympy.core.numbers import nan, Integer\n from .function import Function\n \n \n@@ -62,7 +62,7 @@ def doit(p, q):\n             except TypeError:\n                 pass\n             else:\n-                if type(d) is int:\n+                if type(d) is int or type(d) is long:\n                     rv = p - d*q\n                     if (rv*q < 0) == True:\n                         rv += q\n\nFrom d82b63b4aee4eeaf6a9739dbb13185397b6a7519 Mon Sep 17 00:00:00 2001\nFrom: kunal <kunalgk1999@protonmail.com>\nDate: Wed, 2 Jan 2019 11:30:15 +0530\nSubject: [PATCH 11/15] quick exit if p and q both are numbers\n\n---\n sympy/core/mod.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex f2844602f661..6befbddc0a8a 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -44,6 +44,8 @@ def doit(p, q):\n                 return S.Zero\n \n             if q.is_Number:\n+                if p.is_Number:\n+                    return p%q\n                 if q == 2:\n                     if p.is_even:\n                         return S.Zero\n\nFrom 5864a845774f6c597dca3e96ad67a3b21b9ea57b Mon Sep 17 00:00:00 2001\nFrom: kunal <kunalgk1999@protonmail.com>\nDate: Wed, 2 Jan 2019 11:32:05 +0530\nSubject: [PATCH 12/15] conflict with long resolved\n\n---\n sympy/core/mod.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 6befbddc0a8a..d38c30e11714 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,6 +1,7 @@\n from __future__ import print_function, division\n \n from sympy.core.numbers import nan, Integer\n+from sympy.core.compatibility import integer_types\n from .function import Function\n \n \n@@ -64,7 +65,7 @@ def doit(p, q):\n             except TypeError:\n                 pass\n             else:\n-                if type(d) is int or type(d) is long:\n+                if isinstance(d, integer_types):\n                     rv = p - d*q\n                     if (rv*q < 0) == True:\n                         rv += q\n\nFrom 32624236975a1ab0c4f677a5a974d1586ddded88 Mon Sep 17 00:00:00 2001\nFrom: Christopher Smith <smichr@gmail.com>\nDate: Thu, 3 Jan 2019 06:22:14 -0600\nSubject: [PATCH 13/15] Update test_arit.py\n\n---\n sympy/core/tests/test_arit.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 314c85e62bb9..c6c1b02c411a 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1663,7 +1663,9 @@ def test_Mod():\n     assert Mod(Mod(x + 2, 4)*4, 4) == 0\n \n     # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n     assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n \n \n def test_Mod_is_integer():\n\nFrom 595b35aad5b4938c2b4494041cbcd977d8784484 Mon Sep 17 00:00:00 2001\nFrom: rationa-kunal <kunalgk1999@gmail.com>\nDate: Sat, 5 Jan 2019 18:21:04 +0530\nSubject: [PATCH 14/15] multiplication with denom\n\n---\n sympy/core/mod.py | 3 +--\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\ndiff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex d38c30e11714..0498f7a75dbe 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -143,8 +143,7 @@ def doit(p, q):\n             if q.is_Integer and q is not S.One:\n                 _ = []\n                 for i in non_mod_l:\n-                    if i.is_Integer:\n-                        # and (i % q is not S.Zero)\n+                    if i.is_Integer and (i % q is not S.Zero):\n                         _.append(i%q)\n                     else:\n                         _.append(i)\n\nFrom 6858e5c6b47f323c07fa821ec559c8c2d7890b39 Mon Sep 17 00:00:00 2001\nFrom: Christopher Smith <smichr@gmail.com>\nDate: Sun, 6 Jan 2019 06:05:20 -0600\nSubject: [PATCH 15/15] Update test_arit.py\n\n---\n sympy/core/tests/test_arit.py | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex c6c1b02c411a..5f58f9284c9a 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1666,6 +1666,7 @@ def test_Mod():\n     i, j = symbols('i j', integer=True, positive=True)\n     assert Mod(3*i, 2) == Mod(i, 2)\n     assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n \n \n def test_Mod_is_integer():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/15599"}