{"instance_id": "django__django-11206", "score": "I", "diff": "diff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..178165ff8e\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,37 @@\n+from decimal import Decimal\n+from django.conf import settings\n+\n+# Configure minimal settings\n+settings.configure(\n+    USE_L10N=False,\n+    USE_THOUSAND_SEPARATOR=False,\n+)\n+\n+from django.utils.numberformat import format as nformat\n+\n+def test_small_decimals():\n+    \"\"\"Test that small decimals are formatted as 0.00... when decimal_pos is specified\"\"\"\n+    test_cases = [\n+        # (number, decimal_pos, expected)\n+        (Decimal('1e-199'), 2, '0.00'),\n+        (Decimal('1e-200'), 2, '0.00'),  # This currently returns '1.00e-200'\n+        (Decimal('1e-201'), 2, '0.00'),  # This currently returns '1.00e-201'\n+        (Decimal('1e-250'), 2, '0.00'),  # This currently returns '1.00e-250'\n+        (Decimal('1e-200'), 0, '0'),     # This currently returns '1e-200'\n+        (Decimal('1e-200'), 5, '0.00000'),  # This currently returns '1.00000e-200'\n+        (Decimal('5e-200'), 2, '0.00'),  # This currently returns '5.00e-200'\n+        (Decimal('-1e-200'), 2, '0.00'), # Test negative number\n+        # Test edge case where the value can be represented\n+        (Decimal('0.01'), 2, '0.01'),\n+        (Decimal('0.001'), 2, '0.00'),\n+        (Decimal('0.001'), 3, '0.001'),\n+    ]\n+    \n+    print(\"Testing small decimal formatting:\")\n+    for number, decimal_pos, expected in test_cases:\n+        result = nformat(number, '.', decimal_pos=decimal_pos)\n+        status = \"OK\" if result == expected else \"FAIL\"\n+        print(f\"{status} nformat({number}, '.', decimal_pos={decimal_pos}) = {repr(result)} (expected {repr(expected)})\")\n+\n+if __name__ == \"__main__\":\n+    test_small_decimals()\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..ab2b1e5f1a\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,30 @@\n+from decimal import Decimal\n+from django.conf import settings\n+\n+# Configure minimal settings\n+settings.configure(\n+    USE_L10N=False,\n+    USE_THOUSAND_SEPARATOR=False,\n+)\n+\n+from django.utils.numberformat import format as nformat\n+\n+# Test the issue\n+print('Testing the issue:')\n+print('1e-199 with decimal_pos=2:', repr(nformat(Decimal('1e-199'), '.', decimal_pos=2)))\n+print('1e-200 with decimal_pos=2:', repr(nformat(Decimal('1e-200'), '.', decimal_pos=2)))\n+print('1e-201 with decimal_pos=2:', repr(nformat(Decimal('1e-201'), '.', decimal_pos=2)))\n+print()\n+\n+# Also test some edge cases\n+print('Edge cases:')\n+print('1e-100 with decimal_pos=2:', repr(nformat(Decimal('1e-100'), '.', decimal_pos=2)))\n+print('1e-150 with decimal_pos=2:', repr(nformat(Decimal('1e-150'), '.', decimal_pos=2)))\n+print('1e-198 with decimal_pos=2:', repr(nformat(Decimal('1e-198'), '.', decimal_pos=2)))\n+print('1e-250 with decimal_pos=2:', repr(nformat(Decimal('1e-250'), '.', decimal_pos=2)))\n+\n+# Test with different decimal positions\n+print('\\nWith different decimal_pos:')\n+print('1e-200 with decimal_pos=0:', repr(nformat(Decimal('1e-200'), '.', decimal_pos=0)))\n+print('1e-200 with decimal_pos=5:', repr(nformat(Decimal('1e-200'), '.', decimal_pos=5)))\n+print('1e-200 with decimal_pos=10:', repr(nformat(Decimal('1e-200'), '.', decimal_pos=10)))\ndiff --git a/test_negative.py b/test_negative.py\nnew file mode 100644\nindex 0000000000..d29c9fed67\n--- /dev/null\n+++ b/test_negative.py\n@@ -0,0 +1,17 @@\n+from decimal import Decimal\n+from django.conf import settings\n+\n+# Configure minimal settings\n+settings.configure(\n+    USE_L10N=False,\n+    USE_THOUSAND_SEPARATOR=False,\n+)\n+\n+from django.utils.numberformat import format as nformat\n+\n+# Test negative small decimals\n+print(\"Testing negative small decimals:\")\n+print(\"nformat(Decimal('-1e-200'), '.', decimal_pos=2):\", repr(nformat(Decimal('-1e-200'), '.', decimal_pos=2)))\n+print(\"nformat(Decimal('-5e-201'), '.', decimal_pos=3):\", repr(nformat(Decimal('-5e-201'), '.', decimal_pos=3)))\n+print(\"nformat(Decimal('-0.001'), '.', decimal_pos=2):\", repr(nformat(Decimal('-0.001'), '.', decimal_pos=2)))\n+print(\"nformat(Decimal('-0.001'), '.', decimal_pos=3):\", repr(nformat(Decimal('-0.001'), '.', decimal_pos=3)))\n", "gold_standard_diff": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435c9..961a60e37d65 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -27,6 +27,14 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     # sign\n     sign = ''\n     if isinstance(number, Decimal):\n+\n+        if decimal_pos is not None:\n+            # If the provided number is too small to affect any of the visible\n+            # decimal places, consider it equal to '0'.\n+            cutoff = Decimal('0.' + '1'.rjust(decimal_pos, '0'))\n+            if abs(number) < cutoff:\n+                number = Decimal('0')\n+\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n         # scientific notation to avoid high memory usage in {:f}'.format().\n         _, digits, exponent = number.as_tuple()\ndiff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 3d656025ab58..1dac45e89019 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -94,7 +94,7 @@ def test_decimal_numbers(self):\n             ('1e-10', 8, '0.00000000'),\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n-            ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1234'.format('0' * 299), 3, '0.000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11206"}