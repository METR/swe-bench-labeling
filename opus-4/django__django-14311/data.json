{"instance_id": "django__django-14311", "score": "C", "diff": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5491..14ba427420 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -223,9 +223,17 @@ def get_child_arguments():\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n-    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n-        args += sys.argv[1:]\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if spec.name.endswith('.__main__'):\n+            # Package with __main__.py executed\n+            module_name = spec.parent\n+        else:\n+            # Module executed directly\n+            module_name = spec.name\n+        if module_name:\n+            args += ['-m', module_name]\n+            args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n         # It may exist with a .exe extension or have a -script.py suffix.\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 7b91686bf5..464ec72744 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -230,6 +230,22 @@ class TestChildArguments(SimpleTestCase):\n                 [sys.executable, __file__, 'runserver']\n             )\n \n+    @mock.patch('sys.argv', ['mymodule.py', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_package_module(self):\n+        \"\"\"Test a module like 'python -m foo.bar.baz' where baz is a module, not a package.\"\"\"\n+        module = types.ModuleType('__main__')\n+        module.__spec__ = types.SimpleNamespace(\n+            name='foo.bar.baz',\n+            parent='foo.bar',\n+            loader=None\n+        )\n+        with mock.patch.dict(sys.modules, {'__main__': module}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar.baz', 'runserver']\n+            )\n+\n \n class TestUtilities(SimpleTestCase):\n     def test_is_django_module(self):\n", "gold_standard_diff": "From 9e4780dedac15adcc04309d0198f4ae34e04cc2a Mon Sep 17 00:00:00 2001\nFrom: Moriyoshi Koizumi <mozo@mozo.jp>\nDate: Sun, 25 Apr 2021 11:52:18 +0900\nSubject: [PATCH] Fixed #32669 -- Fixed detection when started non-django\n modules which aren't packages with \"python -m\" in autoreloader.\n\n---\n django/utils/autoreload.py                   |  9 +++++++--\n tests/utils_tests/test_autoreload.py         | 11 ++++++++++-\n tests/utils_tests/test_module/main_module.py |  0\n 3 files changed, 17 insertions(+), 3 deletions(-)\n create mode 100644 tests/utils_tests/test_module/main_module.py\n\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f549131..15df088c4812 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -223,8 +223,13 @@ def get_child_arguments():\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n-    if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n+    if getattr(__main__, '__spec__', None) is not None:\n+        spec = __main__.__spec__\n+        if (spec.name == '__main__' or spec.name.endswith('.__main__')) and spec.parent:\n+            name = spec.parent\n+        else:\n+            name = spec.name\n+        args += ['-m', name]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 7b91686bf521..af439d8b1887 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -23,7 +23,7 @@\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n-from .test_module import __main__ as test_main\n+from .test_module import __main__ as test_main, main_module as test_main_module\n from .utils import on_macos_with_hfs\n \n \n@@ -182,6 +182,15 @@ def test_run_as_non_django_module(self):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\ndiff --git a/tests/utils_tests/test_module/main_module.py b/tests/utils_tests/test_module/main_module.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14311"}