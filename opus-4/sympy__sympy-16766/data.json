{"instance_id": "sympy__sympy-16766", "score": "C", "diff": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310735..f7e17b3707 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,13 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(self._print(base), \", \".join([self._print(ind) for ind in index]))\n+    \n+    def _print_IndexedBase(self, expr):\n+        return str(expr)\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex f1a9a37898..69b260d6eb 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -96,3 +96,37 @@ def test_NumPyPrinter_print_seq():\n     n = NumPyPrinter()\n \n     assert n._print_seq(range(2)) == '(0, 1,)'\n+\n+\n+def test_PythonCodePrinter_Indexed():\n+    from sympy.tensor.indexed import IndexedBase\n+    prntr = PythonCodePrinter()\n+    \n+    p = IndexedBase(\"p\")\n+    q = IndexedBase(\"q\")\n+    i, j, k = symbols('i j k')\n+    \n+    # Test basic indexed access\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[0, 1, 2]) == 'p[0, 1, 2]'\n+    \n+    # Test with symbolic indices\n+    assert prntr.doprint(p[i]) == 'p[i]'\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+    assert prntr.doprint(p[i, j, k]) == 'p[i, j, k]'\n+    \n+    # Test with expression indices\n+    assert prntr.doprint(p[i+1]) == 'p[i + 1]'\n+    assert prntr.doprint(p[2*i, j-1]) == 'p[2*i, j - 1]'\n+    \n+    # Test nested indexed\n+    assert prntr.doprint(p[q[0]]) == 'p[q[0]]'\n+    \n+    # Test IndexedBase alone\n+    assert prntr.doprint(p) == 'p'\n+    assert prntr.doprint(q) == 'q'\n+    \n+    # Test using pycode function\n+    assert pycode(p[0]) == 'p[0]'\n+    assert pycode(p[i, j]) == 'p[i, j]'\ndiff --git a/test_indexed_comprehensive.py b/test_indexed_comprehensive.py\nnew file mode 100644\nindex 0000000000..5acc5bd627\n--- /dev/null\n+++ b/test_indexed_comprehensive.py\n@@ -0,0 +1,49 @@\n+from sympy import *\n+\n+# Test basic indexed access\n+p = IndexedBase(\"p\")\n+print(\"Basic single index:\")\n+print(f\"pycode(p[0]) = {pycode(p[0])}\")\n+print()\n+\n+# Test multiple indices\n+print(\"Multiple indices:\")\n+print(f\"pycode(p[0, 1]) = {pycode(p[0, 1])}\")\n+print(f\"pycode(p[0, 1, 2]) = {pycode(p[0, 1, 2])}\")\n+print()\n+\n+# Test with symbols as indices\n+i, j, k = symbols('i j k')\n+print(\"Symbolic indices:\")\n+print(f\"pycode(p[i]) = {pycode(p[i])}\")\n+print(f\"pycode(p[i, j]) = {pycode(p[i, j])}\")\n+print(f\"pycode(p[i, j, k]) = {pycode(p[i, j, k])}\")\n+print()\n+\n+# Test with expressions as indices\n+print(\"Expression indices:\")\n+print(f\"pycode(p[i+1]) = {pycode(p[i+1])}\")\n+print(f\"pycode(p[2*i, j-1]) = {pycode(p[2*i, j-1])}\")\n+print()\n+\n+# Test nested indexed\n+q = IndexedBase(\"q\")\n+print(\"Nested indexed:\")\n+print(f\"pycode(p[q[0]]) = {pycode(p[q[0]])}\")\n+print()\n+\n+# Test in expressions\n+print(\"In expressions:\")\n+print(f\"pycode(p[0] + p[1]) = {pycode(p[0] + p[1])}\")\n+print(f\"pycode(p[i] * q[j]) = {pycode(p[i] * q[j])}\")\n+print()\n+\n+# Test with lambdify\n+print(\"Test with lambdify:\")\n+expr = p[0] + p[1] * 2\n+f = lambdify([p], expr, modules='numpy')\n+print(f\"Expression: {expr}\")\n+print(f\"Generated code: {pycode(expr)}\")\n+import numpy as np\n+test_array = np.array([1, 2, 3])\n+print(f\"f([1, 2, 3]) = {f(test_array)}\")\ndiff --git a/test_indexed_simple.py b/test_indexed_simple.py\nnew file mode 100644\nindex 0000000000..a71d6096bc\n--- /dev/null\n+++ b/test_indexed_simple.py\n@@ -0,0 +1,44 @@\n+from sympy import *\n+\n+# Test basic indexed access\n+p = IndexedBase(\"p\")\n+print(\"Basic single index:\")\n+print(f\"pycode(p[0]) = {pycode(p[0])}\")\n+print()\n+\n+# Test multiple indices\n+print(\"Multiple indices:\")\n+print(f\"pycode(p[0, 1]) = {pycode(p[0, 1])}\")\n+print(f\"pycode(p[0, 1, 2]) = {pycode(p[0, 1, 2])}\")\n+print()\n+\n+# Test with symbols as indices\n+i, j, k = symbols('i j k')\n+print(\"Symbolic indices:\")\n+print(f\"pycode(p[i]) = {pycode(p[i])}\")\n+print(f\"pycode(p[i, j]) = {pycode(p[i, j])}\")\n+print(f\"pycode(p[i, j, k]) = {pycode(p[i, j, k])}\")\n+print()\n+\n+# Test with expressions as indices\n+print(\"Expression indices:\")\n+print(f\"pycode(p[i+1]) = {pycode(p[i+1])}\")\n+print(f\"pycode(p[2*i, j-1]) = {pycode(p[2*i, j-1])}\")\n+print()\n+\n+# Test nested indexed\n+q = IndexedBase(\"q\")\n+print(\"Nested indexed:\")\n+print(f\"pycode(p[q[0]]) = {pycode(p[q[0]])}\")\n+print()\n+\n+# Test in expressions\n+print(\"In expressions:\")\n+print(f\"pycode(p[0] + p[1]) = {pycode(p[0] + p[1])}\")\n+print(f\"pycode(p[i] * q[j]) = {pycode(p[i] * q[j])}\")\n+print()\n+\n+# Test IndexedBase alone\n+print(\"IndexedBase alone:\")\n+print(f\"pycode(p) = {pycode(p)}\")\n+print(f\"pycode(q) = {pycode(q)}\")\ndiff --git a/test_inheritance.py b/test_inheritance.py\nnew file mode 100644\nindex 0000000000..ca15590f7b\n--- /dev/null\n+++ b/test_inheritance.py\n@@ -0,0 +1,23 @@\n+from sympy import *\n+from sympy.printing.pycode import NumPyPrinter, MpmathPrinter, SciPyPrinter\n+\n+# Test that subclasses also work\n+p = IndexedBase(\"p\")\n+i = symbols('i')\n+\n+print(\"NumPyPrinter:\")\n+np_printer = NumPyPrinter()\n+print(f\"p[0] = {np_printer.doprint(p[0])}\")\n+print(f\"p[i] = {np_printer.doprint(p[i])}\")\n+print()\n+\n+print(\"MpmathPrinter:\")\n+mp_printer = MpmathPrinter()\n+print(f\"p[0] = {mp_printer.doprint(p[0])}\")\n+print(f\"p[i] = {mp_printer.doprint(p[i])}\")\n+print()\n+\n+print(\"SciPyPrinter:\")\n+sp_printer = SciPyPrinter()\n+print(f\"p[0] = {sp_printer.doprint(p[0])}\")\n+print(f\"p[i] = {sp_printer.doprint(p[i])}\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..5126e5575b\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,10 @@\n+from sympy import *\n+p = IndexedBase(\"p\")\n+\n+print(\"Testing pycode(p[0]):\")\n+print(pycode(p[0]))\n+print()\n+\n+# Let's also test with multiple indices\n+print(\"Testing pycode(p[0, 1]):\")\n+print(pycode(p[0, 1]))\ndiff --git a/test_lambdify.py b/test_lambdify.py\nnew file mode 100644\nindex 0000000000..c3726a689e\n--- /dev/null\n+++ b/test_lambdify.py\n@@ -0,0 +1,23 @@\n+from sympy import *\n+from sympy.utilities.lambdify import lambdastr\n+\n+# Test with lambdify's string generation\n+p = IndexedBase(\"p\")\n+i = symbols('i')\n+\n+# Simple indexed expression\n+expr1 = p[0] + p[1]\n+print(\"Expression:\", expr1)\n+print(\"lambdastr:\", lambdastr([p], expr1))\n+print()\n+\n+# More complex expression\n+expr2 = p[i] + p[i+1] * 2\n+print(\"Expression:\", expr2)\n+print(\"lambdastr:\", lambdastr([p, i], expr2))\n+print()\n+\n+# Test that pycode works as expected (which lambdify uses internally)\n+print(\"pycode(p[0]):\", pycode(p[0]))\n+print(\"pycode(p[i]):\", pycode(p[i]))\n+print(\"pycode(expr1):\", pycode(expr1))\n", "gold_standard_diff": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f031073523..a96d4a2fbe83 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,11 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base = expr.args[0]\n+        index = expr.args[1:]\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex f1a9a3789807..0253d7218f5a 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -12,9 +12,10 @@\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n-\n+p = IndexedBase(\"p\")\n \n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n@@ -34,6 +35,7 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n \n \n def test_MpmathPrinter():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/16766"}