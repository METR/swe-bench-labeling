diff --git a/bug_test.png b/bug_test.png
new file mode 100644
index 0000000000..9458d4343e
Binary files /dev/null and b/bug_test.png differ
diff --git a/lib/mpl_toolkits/axes_grid1/inset_locator.py b/lib/mpl_toolkits/axes_grid1/inset_locator.py
index 9d35051074..59bcafc4d9 100644
--- a/lib/mpl_toolkits/axes_grid1/inset_locator.py
+++ b/lib/mpl_toolkits/axes_grid1/inset_locator.py
@@ -70,6 +70,9 @@ class AnchoredLocatorBase(AnchoredOffsetbox):
 
     def __call__(self, ax, renderer):
         self.axes = ax
+        self.figure = ax.figure
+        if renderer is None:
+            renderer = self.figure._get_renderer()
         bbox = self.get_window_extent(renderer)
         px, py = self.get_offset(bbox.width, bbox.height, 0, 0, renderer)
         bbox_canvas = Bbox.from_bounds(px, py, bbox.width, bbox.height)
diff --git a/test.png b/test.png
new file mode 100644
index 0000000000..ebd310be7e
Binary files /dev/null and b/test.png differ
diff --git a/test1.png b/test1.png
new file mode 100644
index 0000000000..ebd310be7e
Binary files /dev/null and b/test1.png differ
diff --git a/test2.png b/test2.png
new file mode 100644
index 0000000000..5536c9d315
Binary files /dev/null and b/test2.png differ
diff --git a/test_bug.py b/test_bug.py
new file mode 100644
index 0000000000..1d7e425220
--- /dev/null
+++ b/test_bug.py
@@ -0,0 +1,6 @@
+import matplotlib.pyplot as plt
+from mpl_toolkits.axes_grid1.inset_locator import inset_axes
+
+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])
+axins = inset_axes(ax, width=1.3, height=0.9)
+plt.savefig('test.png')
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..49eccfc78c
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,52 @@
+import matplotlib.pyplot as plt
+from mpl_toolkits.axes_grid1.inset_locator import inset_axes
+
+# Test 1: Basic example from the issue
+print("Test 1: Basic inset axes creation")
+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])
+axins = inset_axes(ax, width=1.3, height=0.9)
+plt.savefig('test1.png')
+plt.close()
+print("✓ Test 1 passed")
+
+# Test 2: Multiple inset axes with different parameters
+print("\nTest 2: Multiple inset axes")
+fig, ax = plt.subplots()
+# Create inset with percentage width/height
+axins1 = inset_axes(ax, width="30%", height="40%", loc=3)
+# Create inset with mixed units
+axins2 = inset_axes(ax, width="30%", height=1., loc=2)
+# Create inset with borderpad
+axins3 = inset_axes(ax, width="20%", height="20%", loc=4, borderpad=1)
+plt.savefig('test2.png')
+plt.close()
+print("✓ Test 2 passed")
+
+# Test 3: Test with None renderer directly
+print("\nTest 3: Direct None renderer test")
+fig, ax = plt.subplots()
+axins = inset_axes(ax, width=1.3, height=0.9)
+locator = axins.get_axes_locator()
+if locator:
+    try:
+        result = locator(axins, None)
+        print("✓ Test 3 passed - locator works with None renderer")
+    except Exception as e:
+        print(f"✗ Test 3 failed: {e}")
+plt.close()
+
+# Test 4: Verify we can still use explicit renderer
+print("\nTest 4: Explicit renderer test")
+fig, ax = plt.subplots()
+axins = inset_axes(ax, width=1.3, height=0.9)
+renderer = fig.canvas.get_renderer()
+locator = axins.get_axes_locator()
+if locator:
+    try:
+        result = locator(axins, renderer)
+        print("✓ Test 4 passed - locator works with explicit renderer")
+    except Exception as e:
+        print(f"✗ Test 4 failed: {e}")
+plt.close()
+
+print("\nAll tests completed successfully!")
diff --git a/test_debug.py b/test_debug.py
new file mode 100644
index 0000000000..a358a40952
--- /dev/null
+++ b/test_debug.py
@@ -0,0 +1,30 @@
+import matplotlib.pyplot as plt
+from mpl_toolkits.axes_grid1.inset_locator import inset_axes
+
+# This is the code that reproduces the issue
+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])
+axins = inset_axes(ax, width=1.3, height=0.9)
+
+# Test the underlying issue
+print(f"axins.figure: {axins.figure}")
+print(f"ax.figure: {ax.figure}")
+
+# Test get_renderer
+try:
+    renderer = axins.figure._get_renderer()
+    print(f"Got renderer: {renderer}")
+except Exception as e:
+    print(f"Error getting renderer: {e}")
+
+# Print call stack of the error
+import traceback
+locator = axins.get_axes_locator()
+if locator:
+    try:
+        # This will fail with AttributeError
+        result = locator(axins, None)
+        print("Success: locator worked with None renderer")
+    except Exception as e:
+        print(f"Error: {e}")
+        print("Traceback:")
+        traceback.print_exc()
diff --git a/test_issue_fix.py b/test_issue_fix.py
new file mode 100644
index 0000000000..3aeabd0afb
--- /dev/null
+++ b/test_issue_fix.py
@@ -0,0 +1,27 @@
+"""
+Test that reproduces the exact issue from the bug report and verifies it's fixed
+"""
+import matplotlib.pyplot as plt
+from mpl_toolkits.axes_grid1.inset_locator import inset_axes
+
+# This is the exact code from the bug report
+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])
+axins = inset_axes(ax, width=1.3, height=0.9)
+
+# The issue was that when saving or showing the figure, it would fail
+# with AttributeError: 'NoneType' object has no attribute '_get_renderer'
+# This should now work without errors
+try:
+    # Using savefig which triggers the same code path that caused the error
+    plt.savefig('bug_test.png', bbox_inches='tight')
+    print("SUCCESS: The bug has been fixed!")
+    print("The inset axes can now be created and the figure can be saved without errors.")
+except AttributeError as e:
+    if "'NoneType' object has no attribute '_get_renderer'" in str(e):
+        print("FAILED: The original bug still exists!")
+    else:
+        print(f"FAILED: Different AttributeError: {e}")
+except Exception as e:
+    print(f"FAILED: Unexpected error: {type(e).__name__}: {e}")
+finally:
+    plt.close()
diff --git a/test_renderer_bug.py b/test_renderer_bug.py
new file mode 100644
index 0000000000..56ba5cfe6d
--- /dev/null
+++ b/test_renderer_bug.py
@@ -0,0 +1,17 @@
+import matplotlib.pyplot as plt
+from mpl_toolkits.axes_grid1.inset_locator import inset_axes
+
+# This is the code that reproduces the issue
+fig, (ax, ax2) = plt.subplots(1, 2, figsize=[5.5, 2.8])
+axins = inset_axes(ax, width=1.3, height=0.9)
+
+# Test the axes_locator with None renderer
+locator = axins.get_axes_locator()
+if locator:
+    try:
+        # This will fail with AttributeError
+        result = locator(axins, None)
+        print("Success: locator worked with None renderer")
+    except AttributeError as e:
+        print(f"Error: {e}")
+        print("This is the bug we need to fix!")
