{"instance_id": "django__django-13449", "score": "I", "diff": "diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 1f77b3109f..143f204b3d 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -22,6 +22,32 @@ class DatabaseOperations(BaseDatabaseOperations):\n     }\n     explain_prefix = 'EXPLAIN QUERY PLAN'\n \n+    def window_frame_range_start_end(self, start=None, end=None):\n+        return ' '.join(expr for expr in (start, end) if expr)\n+\n+    def window_frame_rows_range_rank(self, sql, frame):\n+        if frame and frame != 'RANGE UNBOUNDED PRECEDING':\n+            return '{} {}'.format(sql, frame)\n+        return sql\n+\n+    def window_function_over(self, sql, partition_by=None, order_by=None, frame=None):\n+        if order_by:\n+            sql = '{} ORDER BY {}'.format(sql, ', '.join(order_by))\n+        if partition_by:\n+            sql = '{} PARTITION BY {}'.format(sql, ', '.join(partition_by))\n+        if frame:\n+            sql = '{} {}'.format(sql, self.window_frame_rows_range_rank('', frame))\n+        over_clause = ''\n+        if partition_by or order_by or frame:\n+            over_clause = ' OVER ({})'.format(' '.join(filter(None, (\n+                'PARTITION BY {}'.format(', '.join(partition_by)) if partition_by else None,\n+                'ORDER BY {}'.format(', '.join(order_by)) if order_by else None,\n+                frame,\n+            ))))\n+        if sql.startswith('LAG('):\n+            return 'CAST({}{} AS NUMERIC)'.format(sql, over_clause)\n+        return '{}{}'.format(sql, over_clause)\n+\n     def bulk_batch_size(self, fields, objs):\n         \"\"\"\n         SQLite has a compile-time default (SQLITE_LIMIT_VARIABLE_NUMBER) of\ndiff --git a/run_test.py b/run_test.py\nnew file mode 100644\nindex 0000000000..86daefc673\n--- /dev/null\n+++ b/run_test.py\n@@ -0,0 +1,87 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.test import TestCase\n+from django.db import connection, transaction\n+from django.db import models\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+\n+# Configure Django settings\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+            'OPTIONS': {\n+                'isolation_level': None,\n+            },\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+    class Meta:\n+        app_label = 'sqlite_lag_test'\n+\n+class SQLiteOperationsTests(TestCase):\n+    def test_lag_with_decimal_field(self):\n+        with connection.cursor() as cursor:\n+            # Create the table\n+            cursor.execute('''\n+                CREATE TABLE lag_test (\n+                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n+                    modified DATE,\n+                    data FLOAT,\n+                    amount DECIMAL(7, 4)\n+                )\n+            ''')\n+\n+            # Insert some test data\n+            cursor.executemany('''\n+                INSERT INTO lag_test (modified, data, amount)\n+                VALUES (?, ?, ?)\n+            ''', [\n+                ('2023-01-01', 1.0, 10.5),\n+                ('2023-01-02', 2.0, 20.5),\n+                ('2023-01-03', 3.0, 30.5),\n+            ])\n+\n+            # Run the query with Lag function\n+            cursor.execute('''\n+                SELECT modified, data, amount,\n+                    LAG(amount, 1) OVER (ORDER BY modified) as lag_amount\n+                FROM lag_test\n+                ORDER BY modified\n+            ''')\n+\n+            # Fetch the results\n+            results = cursor.fetchall()\n+\n+            # Verify the results\n+            self.assertEqual(len(results), 3)\n+            self.assertIsNone(results[0][3])  # lag_amount\n+            self.assertEqual(results[1][3], 10.5)\n+            self.assertEqual(results[2][3], 20.5)\n+\n+        # Clean up: drop the temporary table\n+        with connection.cursor() as cursor:\n+            cursor.execute('DROP TABLE lag_test')\n+\n+if __name__ == '__main__':\n+    from django.test.runner import DiscoverRunner\n+    test_runner = DiscoverRunner(verbosity=2)\n+    failures = test_runner.run_tests(['__main__.SQLiteOperationsTests'])\n+    if failures:\n+        exit(1)\n+    print(\"All tests passed!\")\ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..2e242b8178\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,14 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'tests',\n+]\n+\n+SECRET_KEY = 'fake-key'\n+USE_TZ = True\ndiff --git a/tests/backends/sqlite/test_operations.py b/tests/backends/sqlite/test_operations.py\nindex 863a978580..afc46e45ee 100644\n--- a/tests/backends/sqlite/test_operations.py\n+++ b/tests/backends/sqlite/test_operations.py\n@@ -83,3 +83,46 @@ class SQLiteOperationsTests(TestCase):\n             \"zzz'\",\n             statements[-1],\n         )\n+\n+    def test_lag_with_decimal_field(self):\n+        from django.db import models\n+        from django.db.models import F, Window\n+        from django.db.models.functions import Lag\n+\n+        class LagTest(models.Model):\n+            modified = models.DateField()\n+            data = models.FloatField()\n+            amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+            class Meta:\n+                app_label = 'sqlite_lag_test'\n+\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(LagTest)\n+\n+        try:\n+            # Insert some test data\n+            LagTest.objects.bulk_create([\n+                LagTest(modified='2023-01-01', data=1.0, amount=10.5),\n+                LagTest(modified='2023-01-02', data=2.0, amount=20.5),\n+                LagTest(modified='2023-01-03', data=3.0, amount=30.5),\n+            ])\n+\n+            # Run the query with Lag function\n+            w = Window(expression=Lag('amount', 1), partition_by=[F('modified')], order_by=F('modified').asc())\n+            queryset = LagTest.objects.annotate(lag_amount=w).order_by('modified')\n+\n+            # Check if the query executes without errors\n+            results = list(queryset)\n+\n+            # Verify the results\n+            self.assertEqual(len(results), 3)\n+            self.assertIsNone(results[0].lag_amount)\n+            self.assertEqual(results[1].lag_amount, 10.5)\n+            self.assertEqual(results[2].lag_amount, 20.5)\n+\n+        finally:\n+            # Clean up: drop the temporary table\n+            with connection.schema_editor() as editor:\n+                editor.delete_model(LagTest)\n\\ No newline at end of file\n", "gold_standard_diff": "From 71d10ca8c90ccc1fd0ccd6683716dd3c3116ae6a Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Tue, 22 Sep 2020 15:01:52 +0200\nSubject: [PATCH] Fixed #31723 -- Fixed window functions crash with\n DecimalField on SQLite.\n\nThanks Simon Charette for the initial patch.\n---\n django/db/models/expressions.py    | 12 +++++++++++-\n tests/expressions_window/models.py |  1 +\n tests/expressions_window/tests.py  | 31 +++++++++++++++++++++++++++++-\n 3 files changed, 42 insertions(+), 2 deletions(-)\n\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 90d90119d0f3..bf5ed49719d5 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1253,7 +1253,7 @@ def desc(self):\n         self.descending = True\n \n \n-class Window(Expression):\n+class Window(SQLiteNumericMixin, Expression):\n     template = '%(expression)s OVER (%(window)s)'\n     # Although the main expression may either be an aggregate or an\n     # expression with an aggregate function, the GROUP BY that will\n@@ -1332,6 +1332,16 @@ def as_sql(self, compiler, connection, template=None):\n             'window': ''.join(window_sql).strip()\n         }, params\n \n+    def as_sqlite(self, compiler, connection):\n+        if isinstance(self.output_field, fields.DecimalField):\n+            # Casting to numeric must be outside of the window expression.\n+            copy = self.copy()\n+            source_expressions = copy.get_source_expressions()\n+            source_expressions[0].output_field = fields.FloatField()\n+            copy.set_source_expressions(source_expressions)\n+            return super(Window, copy).as_sqlite(compiler, connection)\n+        return self.as_sql(compiler, connection)\n+\n     def __str__(self):\n         return '{} OVER ({}{}{})'.format(\n             str(self.source_expression),\ndiff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex ce6f6621e978..d9c7568d10cb 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -12,3 +12,4 @@ class Employee(models.Model):\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n     classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\ndiff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex 30ed64f52978..6d00d6543c60 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,4 +1,5 @@\n import datetime\n+from decimal import Decimal\n from unittest import mock, skipIf\n \n from django.core.exceptions import FieldError\n@@ -21,7 +22,14 @@ class WindowFunctionTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n         Employee.objects.bulk_create([\n-            Employee(name=e[0], salary=e[1], department=e[2], hire_date=e[3], age=e[4])\n+            Employee(\n+                name=e[0],\n+                salary=e[1],\n+                department=e[2],\n+                hire_date=e[3],\n+                age=e[4],\n+                bonus=Decimal(e[1]) / 400,\n+            )\n             for e in [\n                 ('Jones', 45000, 'Accounting', datetime.datetime(2005, 11, 1), 20),\n                 ('Williams', 37000, 'Accounting', datetime.datetime(2009, 6, 1), 20),\n@@ -202,6 +210,27 @@ def test_lag(self):\n             ('Smith', 55000, 'Sales', 53000),\n         ], transform=lambda row: (row.name, row.salary, row.department, row.lag))\n \n+    def test_lag_decimalfield(self):\n+        qs = Employee.objects.annotate(lag=Window(\n+            expression=Lag(expression='bonus', offset=1),\n+            partition_by=F('department'),\n+            order_by=[F('bonus').asc(), F('name').asc()],\n+        )).order_by('department', F('bonus').asc(), F('name').asc())\n+        self.assertQuerysetEqual(qs, [\n+            ('Williams', 92.5, 'Accounting', None),\n+            ('Jenson', 112.5, 'Accounting', 92.5),\n+            ('Jones', 112.5, 'Accounting', 112.5),\n+            ('Adams', 125, 'Accounting', 112.5),\n+            ('Moore', 85, 'IT', None),\n+            ('Wilkinson', 150, 'IT', 85),\n+            ('Johnson', 200, 'Management', None),\n+            ('Miller', 250, 'Management', 200),\n+            ('Smith', 95, 'Marketing', None),\n+            ('Johnson', 100, 'Marketing', 95),\n+            ('Brown', 132.5, 'Sales', None),\n+            ('Smith', 137.5, 'Sales', 132.5),\n+        ], transform=lambda row: (row.name, row.bonus, row.department, row.lag))\n+\n     def test_first_value(self):\n         qs = Employee.objects.annotate(first_value=Window(\n             expression=FirstValue('salary'),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13449"}