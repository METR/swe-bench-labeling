diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py
index 8d19872bea..1d7a3835be 100644
--- a/django/db/backends/postgresql/operations.py
+++ b/django/db/backends/postgresql/operations.py
@@ -44,10 +44,15 @@ class DatabaseOperations(BaseDatabaseOperations):
         return "DATE_TRUNC('%s', %s)" % (lookup_type, field_name)
 
     def _prepare_tzname_delta(self, tzname):
-        if '+' in tzname:
-            return tzname.replace('+', '-')
-        elif '-' in tzname:
-            return tzname.replace('-', '+')
+        # PostgreSQL uses the opposite sign convention for numeric timezone offsets
+        # compared to the ISO 8601 standard. For example, ISO offset '+05:00' means
+        # "5 hours east of UTC", but PostgreSQL interprets time zone '+05:00' as
+        # "5 hours west of UTC". We need to flip the sign for numeric offsets only.
+        # Don't flip signs in IANA timezone names like 'Etc/GMT-10'.
+        if tzname.startswith('+'):
+            return '-' + tzname[1:]
+        elif tzname.startswith('-'):
+            return '+' + tzname[1:]
         return tzname
 
     def _convert_field_to_tz(self, field_name, tzname):
diff --git a/test_etc_gmt_issue.py b/test_etc_gmt_issue.py
new file mode 100644
index 0000000000..a6d01608b1
--- /dev/null
+++ b/test_etc_gmt_issue.py
@@ -0,0 +1,52 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.postgresql',
+                'NAME': 'test_db',
+                'USER': 'postgres',
+                'PASSWORD': 'postgres',
+                'HOST': 'localhost',
+                'PORT': '5432',
+            }
+        },
+        USE_TZ=True,
+        TIME_ZONE='UTC',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+    )
+    django.setup()
+
+import pytz
+from django.db import models
+from django.db.models.functions import Trunc
+from django.utils import timezone
+
+# Test the issue
+print("Testing timezone name conversion...")
+
+# Test _get_timezone_name
+tz = pytz.timezone("Etc/GMT-10")
+tzname = timezone._get_timezone_name(tz)
+print(f"Original timezone: {tz}")
+print(f"_get_timezone_name result: {tzname}")
+
+# Test _prepare_tzname_delta
+from django.db.backends.postgresql.operations import DatabaseOperations
+from django.db import connection
+
+ops = DatabaseOperations(connection)
+prepared = ops._prepare_tzname_delta(tzname)
+print(f"_prepare_tzname_delta result: {prepared}")
+
+# The issue: Etc/GMT-10 becomes Etc/GMT+10, which is the opposite timezone!
+print(f"\nISSUE: '{tzname}' becomes '{prepared}' - this flips the timezone direction!")
diff --git a/test_etc_gmt_trunc.py b/test_etc_gmt_trunc.py
new file mode 100644
index 0000000000..13afa50d0c
--- /dev/null
+++ b/test_etc_gmt_trunc.py
@@ -0,0 +1,71 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+
+# Setup Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        USE_TZ=True,
+        TIME_ZONE='UTC',
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='test',
+    )
+    django.setup()
+
+import pytz
+from django.db import models, connection
+from django.db.models.functions import TruncDay, Extract
+from django.utils import timezone
+from datetime import datetime
+
+# Create a test model
+class TestModel(models.Model):
+    created_at = models.DateTimeField()
+    
+    class Meta:
+        app_label = 'test'
+
+# Test the issue with Etc/GMT timezones
+print("Testing Django timezone handling with Etc/GMT-10...")
+
+# Create a test datetime
+test_dt = datetime(2021, 1, 15, 10, 30, 0)
+test_dt_aware = timezone.make_aware(test_dt, timezone.utc)
+
+# Get timezone
+etc_gmt_minus_10 = pytz.timezone("Etc/GMT-10")
+
+# Test _get_timezone_name
+tzname = timezone._get_timezone_name(etc_gmt_minus_10)
+print(f"_get_timezone_name(Etc/GMT-10) = {tzname}")
+
+# Test PostgreSQL operations if available
+if connection.vendor == 'postgresql':
+    from django.db.backends.postgresql.operations import DatabaseOperations
+    ops = DatabaseOperations(connection)
+    prepared = ops._prepare_tzname_delta(tzname)
+    print(f"_prepare_tzname_delta({tzname}) = {prepared}")
+    
+    # Test the SQL generation
+    field_name = "test_field"
+    converted = ops._convert_field_to_tz(field_name, tzname)
+    print(f"SQL generated: {converted}")
+else:
+    print("Not using PostgreSQL, skipping database-specific tests")
+
+# Demonstrate the expected behavior
+print("\nExpected behavior:")
+print("- Etc/GMT-10 represents UTC+10 (10 hours ahead of UTC)")
+print("- When used in AT TIME ZONE, it should remain 'Etc/GMT-10', not become 'Etc/GMT+10'")
+print("- Numeric offsets like '+10' should still be flipped to '-10' for PostgreSQL compatibility")
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..d144a0ecc9
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,21 @@
+from django.db.backends.postgresql.operations import DatabaseOperations
+
+# Test the fixed _prepare_tzname_delta function
+ops = DatabaseOperations(None)  # Connection is not needed for this test
+
+test_cases = [
+    ('+10', '-10'),             # Numeric offset should flip
+    ('-10', '+10'),             # Numeric offset should flip
+    ('+05:30', '-05:30'),       # Numeric offset with minutes should flip
+    ('-05:30', '+05:30'),       # Numeric offset with minutes should flip
+    ('Etc/GMT-10', 'Etc/GMT-10'),  # IANA timezone should NOT flip
+    ('Etc/GMT+10', 'Etc/GMT+10'),  # IANA timezone should NOT flip
+    ('America/New_York', 'America/New_York'),  # IANA timezone should NOT flip
+    ('Europe/London', 'Europe/London'),  # IANA timezone should NOT flip
+]
+
+print("Testing _prepare_tzname_delta fix:")
+for input_tz, expected in test_cases:
+    result = ops._prepare_tzname_delta(input_tz)
+    status = "✓" if result == expected else "✗"
+    print(f"{status} {input_tz} -> {result} (expected: {expected})")
diff --git a/test_fix_minimal.py b/test_fix_minimal.py
new file mode 100644
index 0000000000..6567480252
--- /dev/null
+++ b/test_fix_minimal.py
@@ -0,0 +1,30 @@
+# Test the fixed _prepare_tzname_delta function
+
+def _prepare_tzname_delta(tzname):
+    # PostgreSQL uses the opposite sign convention for numeric timezone offsets
+    # compared to the ISO 8601 standard. For example, ISO offset '+05:00' means
+    # "5 hours east of UTC", but PostgreSQL interprets time zone '+05:00' as
+    # "5 hours west of UTC". We need to flip the sign for numeric offsets only.
+    # Don't flip signs in IANA timezone names like 'Etc/GMT-10'.
+    if tzname.startswith('+'):
+        return '-' + tzname[1:]
+    elif tzname.startswith('-'):
+        return '+' + tzname[1:]
+    return tzname
+
+test_cases = [
+    ('+10', '-10'),             # Numeric offset should flip
+    ('-10', '+10'),             # Numeric offset should flip
+    ('+05:30', '-05:30'),       # Numeric offset with minutes should flip
+    ('-05:30', '+05:30'),       # Numeric offset with minutes should flip
+    ('Etc/GMT-10', 'Etc/GMT-10'),  # IANA timezone should NOT flip
+    ('Etc/GMT+10', 'Etc/GMT+10'),  # IANA timezone should NOT flip
+    ('America/New_York', 'America/New_York'),  # IANA timezone should NOT flip
+    ('Europe/London', 'Europe/London'),  # IANA timezone should NOT flip
+]
+
+print("Testing _prepare_tzname_delta fix:")
+for input_tz, expected in test_cases:
+    result = _prepare_tzname_delta(input_tz)
+    status = "✓" if result == expected else "✗"
+    print(f"{status} {input_tz} -> {result} (expected: {expected})")
diff --git a/test_postgresql_etc_gmt.py b/test_postgresql_etc_gmt.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/test_postgresql_etc_gmt.py
@@ -0,0 +1 @@
+
diff --git a/test_tzname_issue.py b/test_tzname_issue.py
new file mode 100644
index 0000000000..c34696dd83
--- /dev/null
+++ b/test_tzname_issue.py
@@ -0,0 +1,34 @@
+import pytz
+from django.utils import timezone
+
+# Test the issue
+print("Testing timezone name conversion...")
+
+# Test _get_timezone_name
+tz = pytz.timezone("Etc/GMT-10")
+tzname = timezone._get_timezone_name(tz)
+print(f"Original timezone: {tz}")
+print(f"_get_timezone_name result: {tzname}")
+
+# Simulate _prepare_tzname_delta behavior
+def _prepare_tzname_delta(tzname):
+    if '+' in tzname:
+        return tzname.replace('+', '-')
+    elif '-' in tzname:
+        return tzname.replace('-', '+')
+    return tzname
+
+prepared = _prepare_tzname_delta(tzname)
+print(f"_prepare_tzname_delta result: {prepared}")
+
+# The issue: Etc/GMT-10 becomes Etc/GMT+10, which is the opposite timezone!
+print(f"\nISSUE: '{tzname}' becomes '{prepared}' - this flips the timezone direction!")
+
+# Test with numeric offset
+numeric_tz = pytz.timezone("GMT-10")  
+print(f"\nFor comparison, numeric timezone: {numeric_tz}")
+
+# Let's also test what the old behavior was
+print("\nIn Django 3.1, _get_timezone_name would have returned a numeric offset like '+10'")
+print("which would then be correctly converted to '-10' by _prepare_tzname_delta")
+print("But now it returns the full IANA name, causing incorrect sign flipping")
