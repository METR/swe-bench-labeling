{"instance_id": "sphinx-doc__sphinx-9591", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 4a1d5aeed..3faa58e79 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp>=2.0.0',\n-    'sphinxcontrib-serializinghtml>=1.1.5',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',\n+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 938f976cd..f3df75140 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2730,6 +2730,8 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n                 if signature.return_annotation is not Parameter.empty:\n                     objrepr = stringify_typehint(signature.return_annotation)\n                     self.add_line('   :type: ' + objrepr, sourcename)\n+                    # Add cross-reference for the return type\n+                    self.add_line('   :rtype: ' + objrepr, sourcename)\n             except TypeError as exc:\n                 logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                                self.fullname, exc)\ndiff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex cf4318cda..be0898fc6 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -363,36 +363,36 @@ def _stringify_py37(annotation: Any) -> str:\n         elif qualname in ('Optional', 'Union'):\n             if len(annotation.__args__) > 1 and annotation.__args__[-1] is NoneType:\n                 if len(annotation.__args__) > 2:\n-                    args = ', '.join(stringify(a) for a in annotation.__args__[:-1])\n+                    args = ', '.join(restify(stringify(a)) for a in annotation.__args__[:-1])\n                     return 'Optional[Union[%s]]' % args\n                 else:\n-                    return 'Optional[%s]' % stringify(annotation.__args__[0])\n+                    return 'Optional[%s]' % restify(stringify(annotation.__args__[0]))\n             else:\n-                args = ', '.join(stringify(a) for a in annotation.__args__)\n+                args = ', '.join(restify(stringify(a)) for a in annotation.__args__)\n                 return 'Union[%s]' % args\n         elif qualname == 'types.Union':\n             if len(annotation.__args__) > 1 and None in annotation.__args__:\n-                args = ' | '.join(stringify(a) for a in annotation.__args__ if a)\n+                args = ' | '.join(restify(stringify(a)) for a in annotation.__args__ if a)\n                 return 'Optional[%s]' % args\n             else:\n-                return ' | '.join(stringify(a) for a in annotation.__args__)\n+                return ' | '.join(restify(stringify(a)) for a in annotation.__args__)\n         elif qualname == 'Callable':\n-            args = ', '.join(stringify(a) for a in annotation.__args__[:-1])\n-            returns = stringify(annotation.__args__[-1])\n+            args = ', '.join(restify(stringify(a)) for a in annotation.__args__[:-1])\n+            returns = restify(stringify(annotation.__args__[-1]))\n             return '%s[[%s], %s]' % (qualname, args, returns)\n         elif qualname == 'Literal':\n             args = ', '.join(repr(a) for a in annotation.__args__)\n             return '%s[%s]' % (qualname, args)\n         elif str(annotation).startswith('typing.Annotated'):  # for py39+\n-            return stringify(annotation.__args__[0])\n+            return restify(stringify(annotation.__args__[0]))\n         elif all(is_system_TypeVar(a) for a in annotation.__args__):\n             # Suppress arguments if all system defined TypeVars (ex. Dict[KT, VT])\n             return qualname\n         else:\n-            args = ', '.join(stringify(a) for a in annotation.__args__)\n+            args = ', '.join(restify(stringify(a)) for a in annotation.__args__)\n             return '%s[%s]' % (qualname, args)\n \n-    return qualname\n+    return restify(qualname)\n \n \n def _stringify_py36(annotation: Any) -> str:\ndiff --git a/tox.ini b/tox.ini\nindex a363e187f..3b8bc12d0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From 3e24190564451967cd070a6d0c4e0e8612edc3eb Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Mon, 30 Aug 2021 00:20:22 +0900\nSubject: [PATCH] Fix #9585: py:property directive does not create a hyperlink\n for types\n\n---\n CHANGES                  | 2 ++\n sphinx/domains/python.py | 3 ++-\n tests/test_domain_py.py  | 6 ++++--\n 3 files changed, 8 insertions(+), 3 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 4e98b2c8ab4..c7e781de868 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -38,6 +38,8 @@ Bugs fixed\n * #9456: html search: abbreation marks are inserted to the search result if\n   failed to fetch the content of the page\n * #9267: html theme: CSS and JS files added by theme were loaded twice\n+* #9585: py domain: ``:type:`` option for :rst:dir:`py:property` directive does\n+  not create a hyperlink\n * #9535 comment: C++, fix parsing of defaulted function parameters that are\n   function pointers.\n * #9564: smartquotes: don't adjust typography for text with\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex e8330e81cf5..9875a9f4b65 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -861,7 +861,8 @@ def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]\n \n         typ = self.options.get('type')\n         if typ:\n-            signode += addnodes.desc_annotation(typ, ': ' + typ)\n+            annotations = _parse_annotation(typ, self.env)\n+            signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)\n \n         return fullname, prefix\n \ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 8b72f8b7a27..067febcf495 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -833,13 +833,15 @@ def test_pyproperty(app):\n                 entries=[('single', 'prop1 (Class property)', 'Class.prop1', '', None)])\n     assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"abstract property \"],\n                                                      [desc_name, \"prop1\"],\n-                                                     [desc_annotation, \": str\"])],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"str\"])])],\n                                    [desc_content, ()]))\n     assert_node(doctree[1][1][2], addnodes.index,\n                 entries=[('single', 'prop2 (Class property)', 'Class.prop2', '', None)])\n     assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"class property \"],\n                                                      [desc_name, \"prop2\"],\n-                                                     [desc_annotation, \": str\"])],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"str\"])])],\n                                    [desc_content, ()]))\n     assert 'Class.prop1' in domain.objects\n     assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9591"}