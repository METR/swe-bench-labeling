diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..f7eb51fcd 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                 best_params = self._get_parameters()
                 best_n_iter = n_iter
 
-        # Always do a final e-step to guarantee that the labels returned by
-        # fit_predict(X) are always consistent with fit(X).predict(X)
-        # for any value of max_iter and tol (and any random_state).
-        _, log_resp = self._e_step(X)
-
         if not self.converged_:
             warnings.warn('Initialization %d did not converge. '
                           'Try different init parameters, '
@@ -273,6 +268,9 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
 
+        # Perform a final E-step using the best parameters
+        _, log_resp = self._e_step(X)
+
         return log_resp.argmax(axis=1)
 
     def _e_step(self, X):
diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py
index 4d549ccd7..cd65d4438 100644
--- a/sklearn/mixture/tests/test_gaussian_mixture.py
+++ b/sklearn/mixture/tests/test_gaussian_mixture.py
@@ -597,6 +597,18 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):
         assert_array_equal(Y_pred1, Y_pred2)
         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)
 
+        # check if fit_predict(X) is equivalent to fit(X).predict(X) when n_init > 1
+        g_multi_init = GaussianMixture(n_components=rand_data.n_components,
+                                       random_state=rng,
+                                       covariance_type=covar_type,
+                                       max_iter=max_iter, tol=tol,
+                                       n_init=3)
+        f_multi_init = copy.deepcopy(g_multi_init)
+        Y_pred3 = f_multi_init.fit(X).predict(X)
+        Y_pred4 = g_multi_init.fit_predict(X)
+        assert_array_equal(Y_pred3, Y_pred4)
+        assert_greater(adjusted_rand_score(Y, Y_pred4), .95)
+
 
 def test_gaussian_mixture_fit():
     # recover the ground truth
