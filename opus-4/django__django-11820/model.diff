diff --git a/django/db/models/base.py b/django/db/models/base.py
index 3ce711f3f1..7227894731 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1706,8 +1706,13 @@ class Model(metaclass=ModelBase):
         for field in related_fields:
             _cls = cls
             fld = None
-            for part in field.split(LOOKUP_SEP):
+            parts = field.split(LOOKUP_SEP)
+            for i, part in enumerate(parts):
                 try:
+                    # Skip ordering on pk on the final model. It's always a valid field
+                    # but is an alias and won't be found by get_field().
+                    if i == len(parts) - 1 and part == 'pk':
+                        break
                     fld = _cls._meta.get_field(part)
                     if fld.is_relation:
                         _cls = fld.get_path_info()[-1].to_opts.model
diff --git a/test_actual_ordering.py b/test_actual_ordering.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_multilevel_pk.py b/test_multilevel_pk.py
new file mode 100644
index 0000000000..349a80b3c3
--- /dev/null
+++ b/test_multilevel_pk.py
@@ -0,0 +1,60 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    SECRET_KEY='test-secret-key'
+)
+
+django.setup()
+
+# Now we can import models
+from django.db import models
+from django.core.checks import run_checks
+
+# Define test models
+class GrandParent(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+
+class Parent(models.Model):
+    grandparent = models.ForeignKey(GrandParent, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test_app'
+
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test_app'
+        ordering = ['parent__grandparent__pk']
+
+
+# Run checks
+print("Running model checks for multi-level related pk ordering...")
+errors = run_checks()
+if errors:
+    print(f"Found {len(errors)} error(s):")
+    for error in errors:
+        if 'E015' in str(error):
+            print(f"  E015 Error: {error}")
+else:
+    print("No errors found! Multi-level related pk ordering works correctly.")
diff --git a/test_ordering_pk_issue.py b/test_ordering_pk_issue.py
new file mode 100644
index 0000000000..67af9b0c56
--- /dev/null
+++ b/test_ordering_pk_issue.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python
+import os
+import sys
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+from django.test import SimpleTestCase
+from django.test.utils import isolate_apps
+from django.db import models
+
+@isolate_apps('invalid_models_tests')
+class TestOrderingRelatedPK(SimpleTestCase):
+    def test_ordering_by_related_pk(self):
+        """Test that ordering by related__pk doesn't raise E015 error"""
+        class Option(models.Model):
+            name = models.CharField(max_length=100)
+
+        class SomeModel(models.Model):
+            option = models.ForeignKey(Option, models.CASCADE)
+            
+            class Meta:
+                ordering = ['option__pk']
+        
+        # This should not raise any errors
+        errors = SomeModel.check()
+        self.assertEqual(errors, [])
+    
+    def test_ordering_by_related_pk_descending(self):
+        """Test that ordering by -related__pk doesn't raise E015 error"""
+        class Option(models.Model):
+            name = models.CharField(max_length=100)
+
+        class SomeModel(models.Model):
+            option = models.ForeignKey(Option, models.CASCADE)
+            
+            class Meta:
+                ordering = ['-option__pk']
+        
+        # This should not raise any errors
+        errors = SomeModel.check()
+        self.assertEqual(errors, [])
+
+if __name__ == '__main__':
+    import django
+    from django.conf import settings
+    
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+            'invalid_models_tests',
+        ],
+        SECRET_KEY='test'
+    )
+    
+    django.setup()
+    
+    # Run the test
+    test = TestOrderingRelatedPK()
+    test.test_ordering_by_related_pk()
+    print("Test 1 passed: ordering by related__pk")
+    test.test_ordering_by_related_pk_descending()
+    print("Test 2 passed: ordering by -related__pk")
diff --git a/test_ordering_related_pk.py b/test_ordering_related_pk.py
new file mode 100644
index 0000000000..e81b29e2ee
--- /dev/null
+++ b/test_ordering_related_pk.py
@@ -0,0 +1,24 @@
+from django.db import models
+from django.test import TestCase
+
+
+class Option(models.Model):
+    name = models.CharField(max_length=100)
+
+
+class SomeModel(models.Model):
+    option = models.ForeignKey(Option, on_delete=models.CASCADE)
+    
+    class Meta:
+        ordering = ['option__pk']
+
+
+# Test that the model checks pass
+from django.core.checks import run_checks
+errors = run_checks()
+for error in errors:
+    print(f"Error: {error}")
+
+# Also test the actual ordering works
+if not errors:
+    print("No errors found!")
diff --git a/test_pk_ordering.py b/test_pk_ordering.py
new file mode 100644
index 0000000000..a3b947832d
--- /dev/null
+++ b/test_pk_ordering.py
@@ -0,0 +1,53 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    SECRET_KEY='test-secret-key'
+)
+
+django.setup()
+
+# Now we can import models
+from django.db import models
+from django.core.checks import run_checks
+
+# Define test models
+class Option(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+
+class SomeModel(models.Model):
+    option = models.ForeignKey(Option, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test_app'
+        ordering = ['option__pk']
+
+
+# Run checks
+print("Running model checks...")
+errors = run_checks()
+if errors:
+    print(f"Found {len(errors)} error(s):")
+    for error in errors:
+        if 'E015' in str(error):
+            print(f"  E015 Error: {error}")
+else:
+    print("No errors found!")
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 0f1d1e4dc3..3604c082cb 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -836,6 +836,30 @@ class OtherModelTests(SimpleTestCase):
 
         self.assertFalse(Child.check())
 
+    def test_ordering_pointing_to_related_pk_field(self):
+        class Parent(models.Model):
+            pass
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, models.CASCADE)
+
+            class Meta:
+                ordering = ('parent__pk',)
+
+        self.assertFalse(Child.check())
+
+    def test_ordering_pointing_to_related_pk_field_desc(self):
+        class Parent(models.Model):
+            pass
+
+        class Child(models.Model):
+            parent = models.ForeignKey(Parent, models.CASCADE)
+
+            class Meta:
+                ordering = ('-parent__pk',)
+
+        self.assertFalse(Child.check())
+
     def test_name_beginning_with_underscore(self):
         class _Model(models.Model):
             pass
