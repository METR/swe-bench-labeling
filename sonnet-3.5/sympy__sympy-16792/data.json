{"instance_id": "sympy__sympy-16792", "score": "I", "diff": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..06d90771f7 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -81,6 +81,7 @@\n from sympy.core.relational import Eq\n from sympy.core.symbol import Dummy, Symbol\n from sympy.tensor.indexed import Idx, IndexedBase\n+from sympy.matrices import MatrixSymbol\n from sympy.utilities.codegen import (make_routine, get_code_generator,\n                                      OutputArgument, InOutArgument,\n                                      InputArgument, CodeGenArgumentListError,\n@@ -342,6 +343,18 @@ def _prepare_files(self, routine, build_dir=os.curdir):\n     def _get_wrapped_function(cls, mod, name):\n         return getattr(mod, name + '_c')\n \n+    def _prototype_arg_matrix(self, arg):\n+        if isinstance(arg, (IndexedBase, MatrixSymbol)):\n+            return f\"np.ndarray[np.float64_t, ndim={arg.shape[1]}] {arg.name}\"\n+        else:\n+            return self._prototype_arg(arg)\n+\n+    def _call_arg_matrix(self, arg):\n+        if isinstance(arg, (IndexedBase, MatrixSymbol)):\n+            return f\"&{arg.name}[0]\"\n+        else:\n+            return self._call_arg(arg)\n+\n     def dump_pyx(self, routines, f, prefix):\n         \"\"\"Write a Cython file with python wrappers\n \n@@ -358,6 +371,7 @@ def dump_pyx(self, routines, f, prefix):\n             The filename prefix, used to refer to the proper header file.\n             Only the basename of the prefix is used.\n         \"\"\"\n+        self._need_numpy = True  # Always import numpy for matrix handling\n         headers = []\n         functions = []\n         for routine in routines:\n@@ -372,12 +386,12 @@ def dump_pyx(self, routines, f, prefix):\n \n             # Function prototype\n             name = routine.name\n-            arg_string = \", \".join(self._prototype_arg(arg) for arg in py_args)\n+            arg_string = \", \".join(self._prototype_arg_matrix(arg) for arg in py_args)\n \n             # Local Declarations\n             local_decs = []\n             for arg, val in py_inf.items():\n-                proto = self._prototype_arg(arg)\n+                proto = self._prototype_arg_matrix(arg)\n                 mat, ind = [self._string_var(v) for v in val]\n                 local_decs.append(\"    cdef {0} = {1}.shape[{2}]\".format(proto, mat, ind))\n             local_decs.extend([\"    cdef {0}\".format(self._declare_arg(a)) for a in py_loc])\n@@ -386,7 +400,7 @@ def dump_pyx(self, routines, f, prefix):\n                 declarations = declarations + \"\\n\"\n \n             # Function Body\n-            args_c = \", \".join([self._call_arg(a) for a in routine.arguments])\n+            args_c = \", \".join([self._call_arg_matrix(a) for a in routine.arguments])\n             rets = \", \".join([self._string_var(r.name) for r in py_rets])\n             if routine.results:\n                 body = '    return %s(%s)' % (routine.name, args_c)\n", "gold_standard_diff": "diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd739..194aafc37642 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -695,6 +695,11 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):\n         arg_list = []\n \n         # setup input argument list\n+\n+        # helper to get dimensions for data for array-like args\n+        def dimensions(s):\n+            return [(S.Zero, dim - 1) for dim in s.shape]\n+\n         array_symbols = {}\n         for array in expressions.atoms(Indexed) | local_expressions.atoms(Indexed):\n             array_symbols[array.base.label] = array\n@@ -703,11 +708,8 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):\n \n         for symbol in sorted(symbols, key=str):\n             if symbol in array_symbols:\n-                dims = []\n                 array = array_symbols[symbol]\n-                for dim in array.shape:\n-                    dims.append((S.Zero, dim - 1))\n-                metadata = {'dimensions': dims}\n+                metadata = {'dimensions': dimensions(array)}\n             else:\n                 metadata = {}\n \n@@ -739,7 +741,11 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):\n                 try:\n                     new_args.append(name_arg_dict[symbol])\n                 except KeyError:\n-                    new_args.append(InputArgument(symbol))\n+                    if isinstance(symbol, (IndexedBase, MatrixSymbol)):\n+                        metadata = {'dimensions': dimensions(symbol)}\n+                    else:\n+                        metadata = {}\n+                    new_args.append(InputArgument(symbol, **metadata))\n             arg_list = new_args\n \n         return Routine(name, arg_list, return_val, local_vars, global_vars)\ndiff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 1cd56e12d115..78e2c4db36e9 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,25 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/16792"}