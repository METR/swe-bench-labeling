{"instance_id": "sympy__sympy-13031", "score": "I", "diff": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..e0be69053c 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -378,6 +378,10 @@ def hstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        if all(arg.rows == 0 for arg in args):\n+            rows = 0\n+            cols = sum(arg.cols for arg in args)\n+            return kls._new(rows, cols, [])\n         return reduce(kls.row_join, args)\n \n     def reshape(self, rows, cols):\ndiff --git a/test_hstack.py b/test_hstack.py\nnew file mode 100644\nindex 0000000000..064b545b94\n--- /dev/null\n+++ b/test_hstack.py\n@@ -0,0 +1,23 @@\n+import sympy as sy\n+\n+def test_hstack():\n+    M1 = sy.Matrix.zeros(0, 0)\n+    M2 = sy.Matrix.zeros(0, 1)\n+    M3 = sy.Matrix.zeros(0, 2)\n+    M4 = sy.Matrix.zeros(0, 3)\n+    \n+    result = sy.Matrix.hstack(M1, M2, M3, M4)\n+    print(\"Result shape:\", result.shape)\n+    assert result.shape == (0, 6), f\"Expected shape (0, 6), but got {result.shape}\"\n+    \n+    M5 = sy.Matrix.zeros(1, 0)\n+    M6 = sy.Matrix.zeros(1, 1)\n+    M7 = sy.Matrix.zeros(1, 2)\n+    M8 = sy.Matrix.zeros(1, 3)\n+    \n+    result2 = sy.Matrix.hstack(M5, M6, M7, M8)\n+    print(\"Result2 shape:\", result2.shape)\n+    assert result2.shape == (1, 6), f\"Expected shape (1, 6), but got {result2.shape}\"\n+\n+if __name__ == \"__main__\":\n+    test_hstack()\n", "gold_standard_diff": "From 59a130c6ddc4db11d0067efa530862f88f1e5687 Mon Sep 17 00:00:00 2001\nFrom: Jason Siefken <siefkenj@gmail.com>\nDate: Sun, 23 Jul 2017 10:46:08 -0500\nSubject: [PATCH] Fix matrix stacking for sparse matrices\n\n---\n sympy/matrices/sparse.py            | 12 ++++++++----\n sympy/matrices/tests/test_sparse.py |  6 ++++++\n 2 files changed, 14 insertions(+), 4 deletions(-)\n\ndiff --git a/sympy/matrices/sparse.py b/sympy/matrices/sparse.py\nindex e6f36cdf354d..7701cbc17984 100644\n--- a/sympy/matrices/sparse.py\n+++ b/sympy/matrices/sparse.py\n@@ -985,8 +985,10 @@ def col_join(self, other):\n         >>> C == A.row_insert(A.rows, Matrix(B))\n         True\n         \"\"\"\n-        if not self:\n-            return type(self)(other)\n+        # A null matrix can always be stacked (see  #10770)\n+        if self.rows == 0 and self.cols != other.cols:\n+            return self._new(0, other.cols, []).col_join(other)\n+\n         A, B = self, other\n         if not A.cols == B.cols:\n             raise ShapeError()\n@@ -1191,8 +1193,10 @@ def row_join(self, other):\n         >>> C == A.col_insert(A.cols, B)\n         True\n         \"\"\"\n-        if not self:\n-            return type(self)(other)\n+        # A null matrix can always be stacked (see  #10770)\n+        if self.cols == 0 and self.rows != other.rows:\n+            return self._new(other.rows, 0, []).row_join(other)\n+\n         A, B = self, other\n         if not A.rows == B.rows:\n             raise ShapeError()\ndiff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex acea940281ea..2f130d4c9203 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -26,6 +26,12 @@ def sparse_zeros(n):\n     assert type(a.row_join(b)) == type(a)\n     assert type(a.col_join(b)) == type(a)\n \n+    # make sure 0 x n matrices get stacked correctly\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n+\n     # test element assignment\n     a = SparseMatrix((\n         (1, 0),\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13031"}