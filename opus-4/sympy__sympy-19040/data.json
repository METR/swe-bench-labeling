{"instance_id": "sympy__sympy-19040", "score": "I", "diff": "diff --git a/test_factor_debug.py b/test_factor_debug.py\nnew file mode 100644\nindex 0000000000..83a8903e9d\n--- /dev/null\n+++ b/test_factor_debug.py\n@@ -0,0 +1,32 @@\n+from sympy import *\n+from sympy.polys.polytools import Poly\n+\n+# Test the issue\n+x, y = symbols('x y')\n+z = expand((x-1)*(y-1))\n+print(\"Original expression:\", z)\n+\n+# Create poly without extension\n+p1 = Poly(z, x, y)\n+print(\"\\nPoly without extension:\")\n+print(\"  Poly:\", p1)\n+print(\"  Domain:\", p1.domain)\n+print(\"  Rep:\", p1.rep)\n+print(\"  factor_list():\", p1.factor_list())\n+\n+# Create poly with extension\n+p2 = Poly(z, x, y, extension=[I])\n+print(\"\\nPoly with extension=[I]:\")\n+print(\"  Poly:\", p2)\n+print(\"  Domain:\", p2.domain)\n+print(\"  Rep:\", p2.rep)\n+print(\"  factor_list():\", p2.factor_list())\n+\n+# Let's check what rep.factor_list() returns\n+print(\"\\nDirect rep.factor_list():\")\n+try:\n+    coeff, factors = p2.rep.factor_list()\n+    print(\"  Coeff:\", coeff)\n+    print(\"  Factors:\", factors)\n+except Exception as e:\n+    print(\"  Error:\", e)\ndiff --git a/test_factor_issue.py b/test_factor_issue.py\nnew file mode 100644\nindex 0000000000..ab6036259f\n--- /dev/null\n+++ b/test_factor_issue.py\n@@ -0,0 +1,27 @@\n+from sympy import *\n+from sympy.polys.polytools import _symbolic_factor_list, _poly_from_expr\n+from sympy.polys.polyoptions import build_options\n+\n+# Test the issue\n+x, y = symbols('x y')\n+z = expand((x-1)*(y-1))\n+print(\"Original expression:\", z)\n+print(\"Standard factor:\", factor(z))\n+print(\"Factor with extension=[I]:\", factor(z, extension=[I]))\n+\n+# Let's trace through what happens\n+opt = build_options([], {'extension': [I]})\n+print(\"\\nOptions built:\", opt)\n+\n+# Check what _poly_from_expr does with our expression\n+try:\n+    poly, new_opt = _poly_from_expr(z, opt)\n+    print(\"\\nPoly from expr:\", poly)\n+    print(\"Poly gens:\", poly.gens)\n+    print(\"Poly domain:\", poly.domain)\n+except Exception as e:\n+    print(\"\\nError in _poly_from_expr:\", e)\n+\n+# Let's also check factor_list\n+print(\"\\nfactor_list(z):\", factor_list(z))\n+print(\"factor_list(z, extension=[I]):\", factor_list(z, extension=[I]))\ndiff --git a/test_trace_factor.py b/test_trace_factor.py\nnew file mode 100644\nindex 0000000000..8572f1f79f\n--- /dev/null\n+++ b/test_trace_factor.py\n@@ -0,0 +1,58 @@\n+from sympy import *\n+from sympy.polys.polytools import Poly\n+from sympy.polys.sqfreetools import dmp_sqf_norm\n+from sympy.polys.factortools import dmp_ext_factor, dmp_factor_list_include\n+from sympy.polys.polyclasses import DMP\n+\n+# Test the issue\n+x, y = symbols('x y')\n+z = expand((x-1)*(y-1))\n+print(\"Original expression:\", z)\n+\n+# Create poly with extension\n+p = Poly(z, x, y, extension=[I])\n+print(\"\\nPoly with extension=[I]:\")\n+print(\"  Poly:\", p)\n+print(\"  Domain:\", p.domain)\n+\n+# Extract the underlying representation\n+f = p.rep.rep  # Get the raw dense representation\n+u = p.rep.lev\n+K = p.domain\n+\n+print(\"\\nDMP info:\")\n+print(\"  f =\", f)\n+print(\"  u =\", u)\n+print(\"  K =\", K)\n+\n+# Call dmp_ext_factor directly\n+print(\"\\nCalling dmp_ext_factor directly...\")\n+try:\n+    lc, factors = dmp_ext_factor(f, u, K)\n+    print(\"  lc =\", lc)\n+    print(\"  factors =\", factors)\n+except Exception as e:\n+    print(\"  Error:\", e)\n+    import traceback\n+    traceback.print_exc()\n+\n+# Let's also trace dmp_sqf_norm\n+print(\"\\nCalling dmp_sqf_norm...\")\n+try:\n+    s, g, r = dmp_sqf_norm(f, u, K)\n+    print(\"  s =\", s)\n+    print(\"  g =\", g) \n+    print(\"  r =\", r)\n+    \n+    # Now factor r over K.dom\n+    print(\"\\n  Factoring r over K.dom...\")\n+    factors_r = dmp_factor_list_include(r, u, K.dom)\n+    print(\"  factors_r =\", factors_r)\n+except Exception as e:\n+    print(\"  Error:\", e)\n+    import traceback\n+    traceback.print_exc()\n+    \n+# Now let's manually examine what happens after sqf_norm\n+print(\"\\nAnalyzing the factorization process...\")\n+# The problem might be in how factors are converted back\ndiff --git a/test_trace_factor2.py b/test_trace_factor2.py\nnew file mode 100644\nindex 0000000000..ea903af547\n--- /dev/null\n+++ b/test_trace_factor2.py\n@@ -0,0 +1,68 @@\n+from sympy import *\n+from sympy.polys.polytools import Poly\n+from sympy.polys.sqfreetools import dmp_sqf_norm, dmp_sqf_part\n+from sympy.polys.factortools import dmp_ext_factor, dmp_factor_list_include, dmp_trial_division\n+from sympy.polys.euclidtools import dmp_inner_gcd\n+from sympy.polys.densetools import dmp_compose, dmp_convert, dmp_ground_monic\n+from sympy.polys.densebasic import dmp_ground_LC, dmp_degree_list, dmp_raise\n+\n+# Test the issue\n+x, y = symbols('x y')\n+z = expand((x-1)*(y-1))\n+print(\"Original expression:\", z)\n+\n+# Create poly with extension\n+p = Poly(z, x, y, extension=[I])\n+f = p.rep.rep\n+u = p.rep.lev\n+K = p.domain\n+\n+print(\"\\nStarting dmp_ext_factor analysis...\")\n+lc = dmp_ground_LC(f, u, K)\n+f_monic = dmp_ground_monic(f, u, K)\n+print(\"lc =\", lc)\n+print(\"f_monic =\", f_monic)\n+\n+# Check if all degrees are <= 0\n+degrees = dmp_degree_list(f_monic, u)\n+print(\"degrees =\", degrees)\n+\n+# Get square-free part\n+f_sqf, F = dmp_sqf_part(f_monic, u, K), f_monic\n+print(\"\\nf_sqf =\", f_sqf)\n+print(\"F =\", F)\n+\n+# Get square-free norm\n+s, g, r = dmp_sqf_norm(f_sqf, u, K)\n+print(\"\\ns =\", s)\n+print(\"g =\", g)\n+print(\"r =\", r)\n+\n+# Factor r over K.dom\n+factors_r = dmp_factor_list_include(r, u, K.dom)\n+print(\"\\nfactors_r =\", factors_r)\n+print(\"Number of factors:\", len(factors_r))\n+\n+# Now let's trace what happens in the conversion back\n+if len(factors_r) != 1:\n+    H = dmp_raise([K.one, s*K.unit], u, 0, K)\n+    print(\"\\nH =\", H)\n+    \n+    factors = []\n+    for i, (factor, _) in enumerate(factors_r):\n+        print(f\"\\nProcessing factor {i}: {factor}\")\n+        h = dmp_convert(factor, u, K.dom, K)\n+        print(f\"  After convert: {h}\")\n+        h, _, g = dmp_inner_gcd(h, g, u, K)\n+        print(f\"  After gcd: {h}\")\n+        h = dmp_compose(h, H, u, K)\n+        print(f\"  After compose: {h}\")\n+        factors.append(h)\n+    \n+    print(\"\\nAll factors before trial division:\", factors)\n+    \n+    # Trial division\n+    result = dmp_trial_division(F, factors, u, K)\n+    print(\"\\nFinal result:\", result)\n+else:\n+    print(\"\\nOnly one factor found, returning f_sqf\")\ndiff --git a/test_trace_factor3.py b/test_trace_factor3.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_trace_factor3.py\n@@ -0,0 +1 @@\n+\n", "gold_standard_diff": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex c6a5f9f0630a..93298f47e671 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -1147,7 +1147,7 @@ def dmp_ext_factor(f, u, K):\n         return lc, []\n \n     f, F = dmp_sqf_part(f, u, K), f\n-    s, g, r = dmp_sqf_norm(f, u, K)\n+    s, g, r = dmp_sqf_norm(F, u, K)\n \n     factors = dmp_factor_list_include(r, u, K.dom)\n \ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex b0b4cd61322a..174c86c4d85c 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -58,7 +58,7 @@\n from sympy.core.basic import _aresame\n from sympy.core.compatibility import iterable\n from sympy.core.mul import _keep_coeff\n-from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n+from sympy.testing.pytest import raises, warns_deprecated_sympy\n \n from sympy.abc import a, b, c, d, p, q, t, w, x, y, z\n from sympy import MatrixSymbol, Matrix\n@@ -3249,7 +3249,6 @@ def test_poly_matching_consistency():\n     assert Poly(x, x) * I == Poly(I*x, x)\n \n \n-@XFAIL\n def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/19040"}