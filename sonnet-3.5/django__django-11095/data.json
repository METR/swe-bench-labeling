{"instance_id": "django__django-11095", "score": "C", "diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f9a0..5becbb7f22 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -579,10 +579,25 @@ class ModelAdmin(BaseModelAdmin):\n \n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook for specifying inline instances for the admin.\n+        \n+        This method can be overridden to dynamically set inlines based on the request or model instance.\n+        By default, it returns the `inlines` attribute of the ModelAdmin class.\n+\n+        Args:\n+            request: The current request object.\n+            obj: The model instance being edited, or None when adding a new object.\n+\n+        Returns:\n+            A list of inline classes to be used in the admin.\n+        \"\"\"\n+        return self.inlines\n \n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n", "gold_standard_diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f9a00a..d64a2e9a2866 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -327,6 +327,10 @@ def get_fieldsets(self, request, obj=None):\n             return self.fieldsets\n         return [(None, {'fields': self.get_fields(request, obj)})]\n \n+    def get_inlines(self, request, obj):\n+        \"\"\"Hook for specifying custom inlines.\"\"\"\n+        return self.inlines\n+\n     def get_ordering(self, request):\n         \"\"\"\n         Hook for specifying field ordering.\n@@ -582,7 +586,7 @@ def __str__(self):\n \n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\ndiff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt\nindex 93679c46fdbd..e6bb91cf5c2a 100644\n--- a/docs/ref/contrib/admin/index.txt\n+++ b/docs/ref/contrib/admin/index.txt\n@@ -1627,6 +1627,16 @@ templates used by the :class:`ModelAdmin` views:\n     instances of the classes defined in :attr:`inlines` or you might encounter\n     a \"Bad Request\" error when adding related objects.\n \n+.. method:: ModelAdmin.get_inlines(request, obj)\n+\n+    .. versionadded:: 3.0\n+\n+    The ``get_inlines`` method is given the ``HttpRequest`` and the\n+    ``obj`` being edited (or ``None`` on an add form) and is expected to return\n+    an iterable of inlines. You can override this method to dynamically add\n+    inlines based on the request or model instance instead of specifying them\n+    in :attr:`ModelAdmin.inlines`.\n+\n .. method:: ModelAdmin.get_urls()\n \n     The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for\ndiff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt\nindex d7ad7a8cf7cb..44656b11cd75 100644\n--- a/docs/releases/3.0.txt\n+++ b/docs/releases/3.0.txt\n@@ -47,6 +47,10 @@ Minor features\n * Added support for the ``admin_order_field`` attribute on properties in\n   :attr:`.ModelAdmin.list_display`.\n \n+* The new :meth:`ModelAdmin.get_inlines()\n+  <django.contrib.admin.ModelAdmin.get_inlines>` method allows specifying the\n+  inlines based on the request or model instance.\n+\n :mod:`django.contrib.admindocs`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 36f182280598..b9f678a13a07 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -429,3 +429,29 @@ class EpisodeAdmin(admin.ModelAdmin):\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n             self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inline_instances_override_get_inlines(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,)),\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11095"}