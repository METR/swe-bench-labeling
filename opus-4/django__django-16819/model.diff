diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..f7b90dbd2a 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -861,6 +861,16 @@ class AddIndex(IndexOperation):
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name == operation.name
+        ):
+            # AddIndex followed by RemoveIndex with the same name cancels out
+            return []
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
@@ -904,6 +914,16 @@ class RemoveIndex(IndexOperation):
     def migration_name_fragment(self):
         return "remove_%s_%s" % (self.model_name_lower, self.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name == operation.index.name
+        ):
+            # RemoveIndex followed by AddIndex with the same name cancels out
+            return []
+        return super().reduce(operation, app_label)
+
 
 class RenameIndex(IndexOperation):
     """Rename an index."""
diff --git a/test_add_remove_index_optimization.py b/test_add_remove_index_optimization.py
new file mode 100644
index 0000000000..de96118c07
--- /dev/null
+++ b/test_add_remove_index_optimization.py
@@ -0,0 +1,71 @@
+"""
+Test case to add to test_optimizer.py for AddIndex/RemoveIndex optimization
+"""
+from django.db import models
+from django.db.migrations import operations
+from django.test import TestCase
+from django.db.migrations.optimizer import MigrationOptimizer
+
+
+class TestIndexOptimization(TestCase):
+    """Tests for AddIndex/RemoveIndex operation optimization."""
+
+    def test_add_remove_index_same_name(self):
+        """AddIndex followed by RemoveIndex with same name should cancel out."""
+        self.assertOptimizesTo(
+            [
+                operations.AddIndex(
+                    model_name='TestModel',
+                    index=models.Index(fields=['field1'], name='test_idx')
+                ),
+                operations.RemoveIndex(
+                    model_name='TestModel',
+                    name='test_idx'
+                ),
+            ],
+            [],
+        )
+
+    def test_remove_add_index_same_name(self):
+        """RemoveIndex followed by AddIndex with same name should cancel out."""
+        self.assertOptimizesTo(
+            [
+                operations.RemoveIndex(
+                    model_name='TestModel',
+                    name='test_idx'
+                ),
+                operations.AddIndex(
+                    model_name='TestModel', 
+                    index=models.Index(fields=['field1'], name='test_idx')
+                ),
+            ],
+            [],
+        )
+
+    def test_add_remove_index_different_names(self):
+        """AddIndex and RemoveIndex with different names should not optimize."""
+        ops = [
+            operations.AddIndex(
+                model_name='TestModel',
+                index=models.Index(fields=['field1'], name='idx1')
+            ),
+            operations.RemoveIndex(
+                model_name='TestModel',
+                name='idx2'
+            ),
+        ]
+        self.assertOptimizesTo(ops, ops)
+
+    def test_add_remove_index_different_models(self):
+        """AddIndex and RemoveIndex on different models should not optimize."""
+        ops = [
+            operations.AddIndex(
+                model_name='Model1',
+                index=models.Index(fields=['field1'], name='test_idx')
+            ),
+            operations.RemoveIndex(
+                model_name='Model2',
+                name='test_idx'
+            ),
+        ]
+        self.assertOptimizesTo(ops, ops)
diff --git a/test_index_optimization.py b/test_index_optimization.py
new file mode 100644
index 0000000000..129f8df9a6
--- /dev/null
+++ b/test_index_optimization.py
@@ -0,0 +1,60 @@
+from django.db import models
+from django.db.migrations import operations
+from django.db.migrations.optimizer import MigrationOptimizer
+
+# Test case 1: AddIndex followed by RemoveIndex for the same index should cancel out
+index1 = models.Index(fields=['field1'], name='test_index')
+add_op = operations.AddIndex(model_name='TestModel', index=index1)
+remove_op = operations.RemoveIndex(model_name='TestModel', name='test_index')
+
+print("Test 1: AddIndex followed by RemoveIndex for the same index")
+print(f"AddIndex: model={add_op.model_name}, index_name={add_op.index.name}")
+print(f"RemoveIndex: model={remove_op.model_name}, index_name={remove_op.name}")
+
+optimizer = MigrationOptimizer()
+result = optimizer.optimize([add_op, remove_op], 'testapp')
+print(f"Optimized result: {result}")
+print(f"Expected: []")
+print()
+
+# Test case 2: RemoveIndex followed by AddIndex with the same name should also optimize
+print("Test 2: RemoveIndex followed by AddIndex for the same index")
+remove_op2 = operations.RemoveIndex(model_name='TestModel', name='test_index')
+add_op2 = operations.AddIndex(model_name='TestModel', index=index1)
+
+result2 = optimizer.optimize([remove_op2, add_op2], 'testapp')
+print(f"Optimized result: {result2}")
+print(f"Expected: []")
+print()
+
+# Test case 3: Different index names should not optimize
+index2 = models.Index(fields=['field2'], name='another_index')
+add_op3 = operations.AddIndex(model_name='TestModel', index=index1)
+remove_op3 = operations.RemoveIndex(model_name='TestModel', name='another_index')
+
+print("Test 3: AddIndex and RemoveIndex with different index names")
+result3 = optimizer.optimize([add_op3, remove_op3], 'testapp')
+print(f"Optimized result: {result3}")
+print(f"Expected: both operations (no optimization)")
+print()
+
+# Test case 4: Different model names should not optimize
+print("Test 4: AddIndex and RemoveIndex on different models")
+add_op4 = operations.AddIndex(model_name='Model1', index=index1)
+remove_op4 = operations.RemoveIndex(model_name='Model2', name='test_index')
+result4 = optimizer.optimize([add_op4, remove_op4], 'testapp')
+print(f"Optimized result: {result4}")
+print(f"Expected: both operations (no optimization)")
+print()
+
+# Test case 5: Multiple operations - only matching pairs should optimize
+print("Test 5: Multiple operations - only matching pairs should optimize")
+operations_list = [
+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field1'], name='idx1')),
+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field2'], name='idx2')),
+    operations.RemoveIndex(model_name='TestModel', name='idx1'),
+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field3'], name='idx3')),
+]
+result5 = optimizer.optimize(operations_list, 'testapp')
+print(f"Optimized result: {result5}")
+print(f"Expected: AddIndex for idx2 and AddIndex for idx3 only")
diff --git a/test_index_optimization2.py b/test_index_optimization2.py
new file mode 100644
index 0000000000..92ac4e842f
--- /dev/null
+++ b/test_index_optimization2.py
@@ -0,0 +1,60 @@
+from django.db import models
+from django.db.migrations import operations
+from django.db.migrations.optimizer import MigrationOptimizer
+
+# Test case 1: AddIndex followed by RemoveIndex for the same index should cancel out
+index1 = models.Index(fields=['field1'], name='test_index')
+add_op = operations.AddIndex(model_name='TestModel', index=index1)
+remove_op = operations.RemoveIndex(model_name='TestModel', name='test_index')
+
+print("Test 1: AddIndex followed by RemoveIndex for the same index")
+print(f"AddIndex: model={add_op.model_name}, index_name={add_op.index.name}")
+print(f"RemoveIndex: model={remove_op.model_name}, index_name={remove_op.name}")
+
+optimizer = MigrationOptimizer()
+result = optimizer.optimize([add_op, remove_op], 'testapp')
+print(f"Optimized result: {result}")
+print(f"Expected: []")
+print()
+
+# Test case 2: RemoveIndex followed by AddIndex with the same name should also optimize
+print("Test 2: RemoveIndex followed by AddIndex for the same index")
+remove_op2 = operations.RemoveIndex(model_name='TestModel', name='test_index')
+add_op2 = operations.AddIndex(model_name='TestModel', index=index1)
+
+result2 = optimizer.optimize([remove_op2, add_op2], 'testapp')
+print(f"Optimized result: {result2}")
+print(f"Expected: []")
+print()
+
+# Test case 3: Different index names should not optimize
+index2 = models.Index(fields=['field2'], name='another_index')
+add_op3 = operations.AddIndex(model_name='TestModel', index=index1)
+remove_op3 = operations.RemoveIndex(model_name='TestModel', name='another_index')
+
+print("Test 3: AddIndex and RemoveIndex with different index names")
+result3 = optimizer.optimize([add_op3, remove_op3], 'testapp')
+print(f"Optimized result: {result3}")
+print(f"Expected: both operations (no optimization)")
+print()
+
+# Test case 4: Different model names should not optimize
+print("Test 4: AddIndex and RemoveIndex on different models")
+add_op4 = operations.AddIndex(model_name='Model1', index=index1)
+remove_op4 = operations.RemoveIndex(model_name='Model2', name='test_index')
+result4 = optimizer.optimize([add_op4, remove_op4], 'testapp')
+print(f"Optimized result: {result4}")
+print(f"Expected: both operations (no optimization)")
+print()
+
+# Test case 5: Multiple operations - adjacent matching pairs should optimize
+print("Test 5: Multiple operations - adjacent matching pairs should optimize")
+operations_list = [
+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field1'], name='idx1')),
+    operations.RemoveIndex(model_name='TestModel', name='idx1'),
+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field2'], name='idx2')),
+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field3'], name='idx3')),
+]
+result5 = optimizer.optimize(operations_list, 'testapp')
+print(f"Optimized result: {result5}")
+print(f"Expected: AddIndex for idx2 and AddIndex for idx3 only")
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 8cd4c67fbd..295df63a3a 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -1158,3 +1158,65 @@ class OptimizerTests(SimpleTestCase):
                 ),
             ]
         )
+
+    def test_add_remove_index_same_name(self):
+        """AddIndex followed by RemoveIndex with same name should cancel out."""
+        self.assertOptimizesTo(
+            [
+                migrations.AddIndex(
+                    model_name='TestModel',
+                    index=models.Index(fields=['field1'], name='test_idx')
+                ),
+                migrations.RemoveIndex(
+                    model_name='TestModel',
+                    name='test_idx'
+                ),
+            ],
+            [],
+        )
+
+    def test_remove_add_index_same_name(self):
+        """RemoveIndex followed by AddIndex with same name should cancel out."""
+        self.assertOptimizesTo(
+            [
+                migrations.RemoveIndex(
+                    model_name='TestModel',
+                    name='test_idx'
+                ),
+                migrations.AddIndex(
+                    model_name='TestModel', 
+                    index=models.Index(fields=['field1'], name='test_idx')
+                ),
+            ],
+            [],
+        )
+
+    def test_add_remove_index_different_names(self):
+        """AddIndex and RemoveIndex with different names should not optimize."""
+        self.assertDoesNotOptimize(
+            [
+                migrations.AddIndex(
+                    model_name='TestModel',
+                    index=models.Index(fields=['field1'], name='idx1')
+                ),
+                migrations.RemoveIndex(
+                    model_name='TestModel',
+                    name='idx2'
+                ),
+            ]
+        )
+
+    def test_add_remove_index_different_models(self):
+        """AddIndex and RemoveIndex on different models should not optimize."""
+        self.assertDoesNotOptimize(
+            [
+                migrations.AddIndex(
+                    model_name='Model1',
+                    index=models.Index(fields=['field1'], name='test_idx')
+                ),
+                migrations.RemoveIndex(
+                    model_name='Model2',
+                    name='test_idx'
+                ),
+            ]
+        )
