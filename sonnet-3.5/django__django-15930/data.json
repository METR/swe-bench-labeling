{"instance_id": "django__django-15930", "score": "I", "diff": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 822968ef56..fe3f4476cd 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1386,10 +1386,11 @@ class Case(SQLiteNumericMixin, Expression):\n         for case in self.cases:\n             try:\n                 case_sql, case_params = compiler.compile(case)\n+                if case_sql.strip():  # Skip empty conditions\n+                    case_parts.append(case_sql)\n+                    sql_params.extend(case_params)\n             except EmptyResultSet:\n                 continue\n-            case_parts.append(case_sql)\n-            sql_params.extend(case_params)\n         default_sql, default_params = compiler.compile(self.default)\n         if not case_parts:\n             return default_sql, default_params\ndiff --git a/tests/expressions/test_case_expression.py b/tests/expressions/test_case_expression.py\nnew file mode 100644\nindex 0000000000..03a5cab70a\n--- /dev/null\n+++ b/tests/expressions/test_case_expression.py\n@@ -0,0 +1,37 @@\n+\n+from django.db.models import BooleanField, Case, Q, Value, When\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+\n+class CaseTests(TestCase):\n+    def setUp(self):\n+        User.objects.create(username='user1')\n+        User.objects.create(username='user2')\n+\n+    def test_case_with_empty_q_object(self):\n+        queryset = User.objects.annotate(\n+            _a=Case(\n+                When(~Q(pk__in=[]), then=Value(True)),\n+                default=Value(False),\n+                output_field=BooleanField(),\n+            )\n+        ).order_by('pk').values('pk', '_a')\n+\n+        self.assertEqual(list(queryset), [\n+            {'pk': 1, '_a': True},\n+            {'pk': 2, '_a': True},\n+        ])\n+\n+    def test_case_with_non_empty_q_object(self):\n+        queryset = User.objects.annotate(\n+            _a=Case(\n+                When(Q(pk__in=[1]), then=Value(True)),\n+                default=Value(False),\n+                output_field=BooleanField(),\n+            )\n+        ).order_by('pk').values('pk', '_a')\n+\n+        self.assertEqual(list(queryset), [\n+            {'pk': 1, '_a': True},\n+            {'pk': 2, '_a': False},\n+        ])\n\\ No newline at end of file\n", "gold_standard_diff": "From 036bb2b74afb50a71e7a945e8dd83499b603ac3a Mon Sep 17 00:00:00 2001\nFrom: David Wobrock <david.wobrock@gmail.com>\nDate: Sun, 7 Aug 2022 17:25:43 +0200\nSubject: [PATCH] Fixed #33895 -- Fixed Case() crash with filters that match\n everything in When().\n\nThanks shukryzablah for the report.\n---\n django/db/models/expressions.py |  5 +++++\n tests/expressions_case/tests.py | 10 ++++++++++\n 2 files changed, 15 insertions(+)\n\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 822968ef566e..ba836024e5ca 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1299,6 +1299,11 @@ def as_sql(self, compiler, connection, template=None, **extra_context):\n         template_params = extra_context\n         sql_params = []\n         condition_sql, condition_params = compiler.compile(self.condition)\n+        # Filters that match everything are handled as empty strings in the\n+        # WHERE clause, but in a CASE WHEN expression they must use a predicate\n+        # that's always True.\n+        if condition_sql == \"\":\n+            condition_sql, condition_params = compiler.compile(Value(True))\n         template_params[\"condition\"] = condition_sql\n         sql_params.extend(condition_params)\n         result_sql, result_params = compiler.compile(self.result)\ndiff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 9bad0b87471f..221806c93376 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,6 +415,16 @@ def test_annotate_with_empty_when(self):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_combined_expression(self):\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15930"}