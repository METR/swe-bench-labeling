{"instance_id": "django__django-13964", "score": "I", "diff": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 899ae8efe8..c1d54982c1 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -961,6 +961,19 @@ class ForeignKey(ForeignObject):\n         if isinstance(field_default, self.remote_field.model):\n             return getattr(field_default, self.target_field.attname)\n         return field_default\n+    \n+    def pre_save(self, model_instance, add):\n+        \"\"\"Return field's value just before saving.\"\"\"\n+        # Check if there's a cached related object\n+        if self.is_cached(model_instance):\n+            related_obj = self.get_cached_value(model_instance)\n+            if related_obj is not None:\n+                # Update the foreign key field with the related object's current PK value\n+                # This ensures that if the related object's PK was set after assignment,\n+                # we use the updated value\n+                pk_val = getattr(related_obj, self.target_field.attname)\n+                setattr(model_instance, self.attname, pk_val)\n+        return super().pre_save(model_instance, add)\n \n     def get_db_prep_save(self, value, connection):\n         if value is None or (value == '' and\ndiff --git a/test_fk_char_pk_issue.py b/test_fk_char_pk_issue.py\nnew file mode 100644\nindex 0000000000..8ff5393d6d\n--- /dev/null\n+++ b/test_fk_char_pk_issue.py\n@@ -0,0 +1,132 @@\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n+        INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+        SECRET_KEY='test',\n+    )\n+    django.setup()\n+\n+from django.db import models, transaction\n+from django.test import TestCase\n+\n+\n+class Product(models.Model):\n+    sku = models.CharField(primary_key=True, max_length=50)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+class TestCharPrimaryKeyForeignKey(TestCase):\n+    def test_empty_instance_then_set_pk(self):\n+        \"\"\"Test the issue: setting PK after assignment doesn't update FK field\"\"\"\n+        with transaction.atomic():\n+            order = Order()\n+            order.product = Product()\n+            order.product.sku = \"foo\"\n+            order.product.save()\n+            order.save()\n+            \n+            # This shouldn't succeed but it does in the bug\n+            assert not Order.objects.filter(product_id=\"\").exists(), \"Order saved with empty product_id!\"\n+            # This should succeed\n+            assert Order.objects.filter(product=order.product).exists(), \"Order not found with correct product!\"\n+            \n+    def test_pk_set_before_assignment(self):\n+        \"\"\"Test that setting PK before assignment works correctly\"\"\"\n+        with transaction.atomic():\n+            order = Order()\n+            order.product = Product(sku=\"foo\")\n+            order.product.save()\n+            order.save()\n+            \n+            # This should succeed\n+            assert Order.objects.filter(product=order.product).exists(), \"Order not found!\"\n+            assert Order.objects.filter(product_id=\"foo\").exists(), \"Order not found by product_id!\"\n+\n+\n+if __name__ == \"__main__\":\n+    # Quick test to reproduce the issue\n+    import django\n+    from django.conf import settings\n+    \n+    if not settings.configured:\n+        settings.configure(\n+            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n+            INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+            SECRET_KEY='test',\n+        )\n+        django.setup()\n+    \n+    from django.db import connection\n+    \n+    # Create tables\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Product)\n+        schema_editor.create_model(Order)\n+    \n+    # Disable foreign key checks to see the actual data\n+    with connection.cursor() as cursor:\n+        cursor.execute(\"PRAGMA foreign_keys=OFF\")\n+    \n+    # Run the problematic case\n+    print(\"Testing problematic case...\")\n+    try:\n+        order = Order()\n+        order.product = Product()\n+        order.product.sku = \"foo\"\n+        order.product.save()\n+        \n+        print(f\"Before save - Order product_id: '{order.product_id}'\")\n+        print(f\"Before save - Order product.pk: '{order.product.pk}'\")\n+        print(f\"Before save - Order product.sku: '{order.product.sku}'\")\n+        \n+        # Check if we have a cached product\n+        print(f\"Has cached product: {hasattr(order, '_product_cache')}\")\n+        if hasattr(order, '_product_cache'):\n+            print(f\"Cached product: {order._product_cache}\")\n+        \n+        order.save()\n+        \n+        print(f\"After save - Order product_id: '{order.product_id}'\")\n+        \n+        # Check database\n+        orders = Order.objects.all()\n+        for o in orders:\n+            print(f\"DB Order id={o.id}, product_id='{o.product_id}'\")\n+            \n+        # The issue: empty product_id\n+        empty_orders = Order.objects.filter(product_id=\"\")\n+        print(f\"\\nOrders with empty product_id: {empty_orders.count()}\")\n+        \n+        # Try with correct approach\n+        print(\"\\n\\nTesting correct approach...\")\n+        Order.objects.all().delete()\n+        Product.objects.all().delete()\n+        \n+        order2 = Order()\n+        order2.product = Product(sku=\"bar\")\n+        order2.product.save()\n+        \n+        print(f\"Before save - Order2 product_id: '{order2.product_id}'\")\n+        order2.save()\n+        print(f\"After save - Order2 product_id: '{order2.product_id}'\")\n+        \n+        orders2 = Order.objects.all()\n+        for o in orders2:\n+            print(f\"DB Order2 id={o.id}, product_id='{o.product_id}'\")\n+                \n+    except Exception as e:\n+        print(f\"Error: {e}\")\n+        import traceback\n+        traceback.print_exc()\n", "gold_standard_diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696b8..fd8e0806b1cd 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -933,7 +933,7 @@ def _prepare_related_fields_for_save(self, operation_name):\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n+                elif getattr(self, field.attname) in field.empty_values:\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\ndiff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex e9f8fbff7629..5f42f167c9a4 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -68,6 +68,10 @@ class Parent(models.Model):\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n class Child(models.Model):\n     name = models.CharField(max_length=20)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n@@ -77,6 +81,10 @@ class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n+\n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \ndiff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 3c7cd0c3facd..1e297b0ec4fa 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -7,9 +7,9 @@\n from django.utils.translation import gettext_lazy\n \n from .models import (\n-    Article, Category, Child, ChildNullableParent, City, Country, District,\n-    First, Parent, Record, Relation, Reporter, School, Student, Third,\n-    ToFieldChild,\n+    Article, Category, Child, ChildNullableParent, ChildStringPrimaryKeyParent,\n+    City, Country, District, First, Parent, ParentStringPrimaryKey, Record,\n+    Relation, Reporter, School, Student, Third, ToFieldChild,\n )\n \n \n@@ -549,6 +549,16 @@ def test_save_nullable_fk_after_parent_with_to_field(self):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n     def test_fk_to_bigautofield(self):\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13964"}