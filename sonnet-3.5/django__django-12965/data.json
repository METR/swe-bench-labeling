{"instance_id": "django__django-12965", "score": "I", "diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f..94f400b7ce 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1423,6 +1423,9 @@ class SQLDeleteCompiler(SQLCompiler):\n         Create the SQL for this query. Return the SQL string and list of\n         parameters.\n         \"\"\"\n+        # Check if we're deleting all objects\n+        if not self.query.where.children:\n+            return self._as_sql(self.query)\n         if self.single_alias:\n             return self._as_sql(self.query)\n         innerq = self.query.clone()\n", "gold_standard_diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f0e..a1487c4f95ce 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1407,6 +1407,8 @@ def execute_sql(self, returning_fields=None):\n class SQLDeleteCompiler(SQLCompiler):\n     @cached_property\n     def single_alias(self):\n+        # Ensure base table is in aliases.\n+        self.query.get_initial_alias()\n         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1\n \n     def _as_sql(self, query):\ndiff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex c32ebba83ffa..e1ec26bc1a3e 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,6 +605,12 @@ def receiver(instance, **kwargs):\n \n \n class FastDeleteTests(TestCase):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12965"}