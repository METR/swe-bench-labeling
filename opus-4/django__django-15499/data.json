{"instance_id": "django__django-15499", "score": "C", "diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..b69c431971 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -202,6 +202,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, FieldOperation)\n             and self.name_lower == operation.model_name_lower\ndiff --git a/test_alter_model_managers_optimization.py b/test_alter_model_managers_optimization.py\nnew file mode 100644\nindex 0000000000..4ee9bf076b\n--- /dev/null\n+++ b/test_alter_model_managers_optimization.py\n@@ -0,0 +1,51 @@\n+\"\"\"Test that CreateModel + AlterModelManagers can be optimized to CreateModel.\"\"\"\n+\n+from django.db import models\n+from django.db.migrations.operations import CreateModel, AlterModelManagers\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+\n+def test_create_model_alter_model_managers_optimization():\n+    \"\"\"Test that CreateModel followed by AlterModelManagers gets optimized.\"\"\"\n+    \n+    # Define a custom manager\n+    class CustomManager(models.Manager):\n+        pass\n+    \n+    # Create operations\n+    operations = [\n+        CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"TestModel\",\n+            managers=[\n+                (\"custom\", CustomManager()),\n+                (\"objects\", models.Manager()),\n+            ],\n+        ),\n+    ]\n+    \n+    # Run optimizer\n+    optimizer = MigrationOptimizer()\n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    # Check that we have only one operation\n+    assert len(optimized) == 1, f\"Expected 1 operation, got {len(optimized)}\"\n+    \n+    # Check that it's a CreateModel with managers\n+    op = optimized[0]\n+    assert isinstance(op, CreateModel), f\"Expected CreateModel, got {type(op)}\"\n+    assert len(op.managers) == 2, f\"Expected 2 managers, got {len(op.managers)}\"\n+    assert op.managers[0][0] == \"custom\", f\"Expected first manager to be 'custom', got {op.managers[0][0]}\"\n+    assert op.managers[1][0] == \"objects\", f\"Expected second manager to be 'objects', got {op.managers[1][0]}\"\n+    \n+    print(\"Test passed!\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_create_model_alter_model_managers_optimization()\ndiff --git a/test_comprehensive_optimization.py b/test_comprehensive_optimization.py\nnew file mode 100644\nindex 0000000000..c12edb58fd\n--- /dev/null\n+++ b/test_comprehensive_optimization.py\n@@ -0,0 +1,160 @@\n+\"\"\"Test that CreateModel + AlterModelManagers can be optimized to CreateModel.\"\"\"\n+\n+from django.db import models\n+from django.db.migrations.operations import CreateModel, AlterModelManagers, AddField\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+\n+def test_create_model_alter_model_managers_optimization():\n+    \"\"\"Test that CreateModel followed by AlterModelManagers gets optimized.\"\"\"\n+    \n+    # Define a custom manager\n+    class CustomManager(models.Manager):\n+        pass\n+    \n+    # Test 1: Basic optimization\n+    operations = [\n+        CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"TestModel\",\n+            managers=[\n+                (\"custom\", CustomManager()),\n+                (\"objects\", models.Manager()),\n+            ],\n+        ),\n+    ]\n+    \n+    optimizer = MigrationOptimizer()\n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    assert len(optimized) == 1, f\"Expected 1 operation, got {len(optimized)}\"\n+    op = optimized[0]\n+    assert isinstance(op, CreateModel), f\"Expected CreateModel, got {type(op)}\"\n+    assert len(op.managers) == 2, f\"Expected 2 managers, got {len(op.managers)}\"\n+    assert op.managers[0][0] == \"custom\", f\"Expected first manager to be 'custom', got {op.managers[0][0]}\"\n+    assert op.managers[1][0] == \"objects\", f\"Expected second manager to be 'objects', got {op.managers[1][0]}\"\n+    \n+    print(\"Test 1 passed: Basic optimization\")\n+    \n+    # Test 2: CreateModel with existing managers + AlterModelManagers\n+    operations = [\n+        CreateModel(\n+            name=\"TestModel2\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+            managers=[\n+                (\"old_manager\", models.Manager()),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"TestModel2\",\n+            managers=[\n+                (\"new_manager\", CustomManager()),\n+                (\"objects\", models.Manager()),\n+            ],\n+        ),\n+    ]\n+    \n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    assert len(optimized) == 1, f\"Expected 1 operation, got {len(optimized)}\"\n+    op = optimized[0]\n+    assert isinstance(op, CreateModel), f\"Expected CreateModel, got {type(op)}\"\n+    assert len(op.managers) == 2, f\"Expected 2 managers, got {len(op.managers)}\"\n+    assert op.managers[0][0] == \"new_manager\", f\"Expected first manager to be 'new_manager', got {op.managers[0][0]}\"\n+    assert op.managers[1][0] == \"objects\", f\"Expected second manager to be 'objects', got {op.managers[1][0]}\"\n+    \n+    print(\"Test 2 passed: CreateModel with existing managers + AlterModelManagers\")\n+    \n+    # Test 3: Case sensitivity\n+    operations = [\n+        CreateModel(\n+            name=\"TestModel3\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"testmodel3\",  # Different case\n+            managers=[\n+                (\"custom\", CustomManager()),\n+            ],\n+        ),\n+    ]\n+    \n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    assert len(optimized) == 1, f\"Expected 1 operation, got {len(optimized)}\"\n+    op = optimized[0]\n+    assert isinstance(op, CreateModel), f\"Expected CreateModel, got {type(op)}\"\n+    assert len(op.managers) == 1, f\"Expected 1 manager, got {len(op.managers)}\"\n+    \n+    print(\"Test 3 passed: Case sensitivity\")\n+    \n+    # Test 4: Non-optimizable case - different model names\n+    operations = [\n+        CreateModel(\n+            name=\"TestModel4\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"DifferentModel\",\n+            managers=[\n+                (\"custom\", CustomManager()),\n+            ],\n+        ),\n+    ]\n+    \n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    assert len(optimized) == 2, f\"Expected 2 operations, got {len(optimized)}\"\n+    \n+    print(\"Test 4 passed: Non-optimizable case - different model names\")\n+    \n+    # Test 5: Multiple operations with optimization\n+    operations = [\n+        CreateModel(\n+            name=\"TestModel5\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"TestModel5\",\n+            managers=[\n+                (\"custom\", CustomManager()),\n+            ],\n+        ),\n+        AddField(\n+            model_name=\"TestModel5\",\n+            name=\"description\",\n+            field=models.TextField(),\n+        ),\n+    ]\n+    \n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    # Should be optimized to just CreateModel with managers and the field\n+    assert len(optimized) == 1, f\"Expected 1 operation, got {len(optimized)}\"\n+    op = optimized[0]\n+    assert isinstance(op, CreateModel), f\"Expected CreateModel, got {type(op)}\"\n+    assert len(op.managers) == 1, f\"Expected 1 manager, got {len(op.managers)}\"\n+    assert len(op.fields) == 2, f\"Expected 2 fields, got {len(op.fields)}\"\n+    \n+    print(\"Test 5 passed: Multiple operations with optimization\")\n+    \n+    print(\"\\nAll tests passed!\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_create_model_alter_model_managers_optimization()\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..dce68f38c4\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,95 @@\n+\"\"\"Test edge cases for CreateModel + AlterModelManagers optimization.\"\"\"\n+\n+from django.db import models\n+from django.db.migrations.operations import CreateModel, AlterModelManagers, CreateModel as CreateModel2\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+\n+def test_edge_cases():\n+    \"\"\"Test edge cases where optimization should or shouldn't happen.\"\"\"\n+    \n+    # Define a custom manager\n+    class CustomManager(models.Manager):\n+        pass\n+    \n+    # Test case 1: CreateModel for model A, CreateModel for model B, AlterModelManagers for model A\n+    # This should still optimize, because the AlterModelManagers can be reduced with the first CreateModel\n+    operations = [\n+        CreateModel(\n+            name=\"ModelA\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+        ),\n+        CreateModel(\n+            name=\"ModelB\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"ModelA\",\n+            managers=[\n+                (\"custom\", CustomManager()),\n+            ],\n+        ),\n+    ]\n+    \n+    optimizer = MigrationOptimizer()\n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    # Should have 2 operations: CreateModel for ModelA with managers, and CreateModel for ModelB\n+    assert len(optimized) == 2, f\"Expected 2 operations, got {len(optimized)}\"\n+    \n+    # Find the optimized ModelA and ModelB operations\n+    model_a = None\n+    model_b = None\n+    for op in optimized:\n+        if op.name == \"ModelA\":\n+            model_a = op\n+        elif op.name == \"ModelB\":\n+            model_b = op\n+    \n+    assert model_a is not None, \"ModelA not found in optimized operations\"\n+    assert model_b is not None, \"ModelB not found in optimized operations\"\n+    assert len(model_a.managers) == 1, f\"Expected ModelA to have 1 manager, got {len(model_a.managers)}\"\n+    \n+    print(\"Test case 1 passed: Optimization works with intermediate operations\")\n+    \n+    # Test case 2: CreateModel -> AlterModelManagers -> AlterModelManagers\n+    # Only the last AlterModelManagers should be applied\n+    operations = [\n+        CreateModel(\n+            name=\"ModelC\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"ModelC\",\n+            managers=[\n+                (\"manager1\", models.Manager()),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"ModelC\",\n+            managers=[\n+                (\"manager2\", CustomManager()),\n+            ],\n+        ),\n+    ]\n+    \n+    optimized = optimizer.optimize(operations, \"testapp\")\n+    \n+    # Should have 1 operation: CreateModel with the last set of managers\n+    assert len(optimized) == 1, f\"Expected 1 operation, got {len(optimized)}\"\n+    assert len(optimized[0].managers) == 1\n+    assert optimized[0].managers[0][0] == \"manager2\"\n+    \n+    print(\"Test case 2 passed: Multiple AlterModelManagers are collapsed correctly\")\n+    \n+    print(\"\\nAll edge case tests passed!\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_edge_cases()\ndiff --git a/test_real_migration.py b/test_real_migration.py\nnew file mode 100644\nindex 0000000000..9807074d8d\n--- /dev/null\n+++ b/test_real_migration.py\n@@ -0,0 +1,77 @@\n+\"\"\"Test that migrations with CreateModel + AlterModelManagers get optimized correctly.\"\"\"\n+\n+from django.db import models\n+from django.db.migrations import Migration\n+from django.db.migrations.operations import CreateModel, AlterModelManagers\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+\n+def test_real_world_scenario():\n+    \"\"\"Test optimization in a more realistic scenario.\"\"\"\n+    \n+    # Create operations that would typically be generated by makemigrations\n+    operations = [\n+        CreateModel(\n+            name=\"Article\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"title\", models.CharField(max_length=200)),\n+                (\"content\", models.TextField()),\n+                (\"published\", models.BooleanField(default=False)),\n+            ],\n+            options={\n+                \"verbose_name\": \"Article\",\n+                \"verbose_name_plural\": \"Articles\",\n+            },\n+        ),\n+        CreateModel(\n+            name=\"Comment\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"article\", models.ForeignKey(\"Article\", on_delete=models.CASCADE)),\n+                (\"text\", models.TextField()),\n+                (\"created_at\", models.DateTimeField(auto_now_add=True)),\n+            ],\n+        ),\n+        AlterModelManagers(\n+            name=\"Article\",\n+            managers=[\n+                (\"objects\", models.Manager()),\n+            ],\n+        ),\n+    ]\n+    \n+    print(\"Original operations:\")\n+    for i, op in enumerate(operations):\n+        print(f\"  {i+1}. {op.__class__.__name__} - {getattr(op, 'name', 'N/A')}\")\n+    \n+    # Apply optimization\n+    optimizer = MigrationOptimizer()\n+    optimized = optimizer.optimize(operations, \"myapp\")\n+    \n+    print(\"\\nOptimized operations:\")\n+    for i, op in enumerate(optimized):\n+        print(f\"  {i+1}. {op.__class__.__name__} - {getattr(op, 'name', 'N/A')}\")\n+    \n+    # Verify the optimization worked\n+    assert len(optimized) == 2, f\"Expected 2 operations after optimization, got {len(optimized)}\"\n+    \n+    # Find the Article CreateModel\n+    article_op = None\n+    for op in optimized:\n+        if isinstance(op, CreateModel) and op.name == \"Article\":\n+            article_op = op\n+            break\n+    \n+    assert article_op is not None, \"Article CreateModel not found\"\n+    assert len(article_op.managers) == 1, f\"Expected Article to have 1 manager, got {len(article_op.managers)}\"\n+    assert article_op.options == {\"verbose_name\": \"Article\", \"verbose_name_plural\": \"Articles\"}\n+    \n+    print(\"\\n\u2713 Optimization successful!\")\n+    print(\"  - CreateModel + AlterModelManagers \u2192 CreateModel with managers\")\n+    print(\"  - Options preserved correctly\")\n+    print(\"  - Other models unaffected\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_real_world_scenario()\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 59dd401a3c..aa0464018a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -165,6 +165,33 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers(self):\n+        \"\"\"\n+        CreateModel followed by AlterModelManagers should optimize to CreateModel.\n+        \"\"\"\n+        managers = [(\"objects\", EmptyManager())]\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(name=\"Foo\", managers=managers),\n+            ],\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[], managers=managers),\n+            ],\n+        )\n+        # Test with existing managers being replaced\n+        managers1 = [(\"default\", models.Manager())]\n+        managers2 = [(\"objects\", EmptyManager()), (\"custom\", models.Manager())]\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[], managers=managers1),\n+                migrations.AlterModelManagers(name=\"Bar\", managers=managers2),\n+            ],\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[], managers=managers2),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n", "gold_standard_diff": "From 88f97998f5dc1b718c3f3ec17f4d9e2796ba3708 Mon Sep 17 00:00:00 2001\nFrom: Adam Johnson <me@adamj.eu>\nDate: Thu, 10 Mar 2022 22:31:31 +0000\nSubject: [PATCH] Fixed #33572 -- Implemented CreateModel/AlterModelManagers\n reduction.\n\n---\n django/db/migrations/operations/models.py | 13 ++++++++++++\n tests/migrations/test_optimizer.py        | 24 +++++++++++++++++++++++\n 2 files changed, 37 insertions(+)\n\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee58b..8a5c04393bbf 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -170,6 +170,19 @@ def reduce(self, operation, app_label):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 59dd401a3c75..6bde378cd9f5 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,30 @@ def test_create_alter_model_options(self):\n             ],\n         )\n \n+    def test_create_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15499"}