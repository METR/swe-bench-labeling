{"instance_id": "pytest-dev__pytest-7324", "score": "C", "diff": "diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\nindex 04c73411a..6ba695ca0 100644\n--- a/src/_pytest/mark/expression.py\n+++ b/src/_pytest/mark/expression.py\n@@ -161,7 +161,12 @@ def not_expr(s: Scanner) -> ast.expr:\n         return ret\n     ident = s.accept(TokenType.IDENT)\n     if ident:\n-        return ast.Name(ident.value, ast.Load())\n+        # Work around Python 3.8+ restriction on using True/False/None as Names\n+        # by prefixing them. The MatcherAdapter will handle the conversion back.\n+        if ident.value in (\"True\", \"False\", \"None\"):\n+            return ast.Name(\"__pytest_\" + ident.value, ast.Load())\n+        else:\n+            return ast.Name(ident.value, ast.Load())\n     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))\n \n \n@@ -172,6 +177,9 @@ class MatcherAdapter(Mapping[str, bool]):\n         self.matcher = matcher\n \n     def __getitem__(self, key: str) -> bool:\n+        # Handle prefixed special names that we added to work around Python 3.8+ restrictions\n+        if key.startswith(\"__pytest_\") and key[9:] in (\"True\", \"False\", \"None\"):\n+            return self.matcher(key[9:])\n         return self.matcher(key)\n \n     def __iter__(self) -> Iterator[str]:\n", "gold_standard_diff": "From 1deaa743452acb147c0cf1f3629fc52599c28a1d Mon Sep 17 00:00:00 2001\nFrom: Ran Benita <ran@unusedvar.com>\nDate: Fri, 5 Jun 2020 15:52:08 +0300\nSubject: [PATCH] mark/expression: prevent creation of illegal Python\n identifiers\n\nThis is rejected by Python DEBUG builds, as well as regular builds in\nfuture versions.\n---\n src/_pytest/mark/expression.py  | 10 ++++++++--\n testing/test_mark_expression.py |  1 +\n 2 files changed, 9 insertions(+), 2 deletions(-)\n\ndiff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\nindex 04c73411af5..73b7bf16992 100644\n--- a/src/_pytest/mark/expression.py\n+++ b/src/_pytest/mark/expression.py\n@@ -127,6 +127,12 @@ def reject(self, expected: Sequence[TokenType]) -> \"NoReturn\":\n         )\n \n \n+# True, False and None are legal match expression identifiers,\n+# but illegal as Python identifiers. To fix this, this prefix\n+# is added to identifiers in the conversion to Python AST.\n+IDENT_PREFIX = \"$\"\n+\n+\n def expression(s: Scanner) -> ast.Expression:\n     if s.accept(TokenType.EOF):\n         ret = ast.NameConstant(False)  # type: ast.expr\n@@ -161,7 +167,7 @@ def not_expr(s: Scanner) -> ast.expr:\n         return ret\n     ident = s.accept(TokenType.IDENT)\n     if ident:\n-        return ast.Name(ident.value, ast.Load())\n+        return ast.Name(IDENT_PREFIX + ident.value, ast.Load())\n     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))\n \n \n@@ -172,7 +178,7 @@ def __init__(self, matcher: Callable[[str], bool]) -> None:\n         self.matcher = matcher\n \n     def __getitem__(self, key: str) -> bool:\n-        return self.matcher(key)\n+        return self.matcher(key[len(IDENT_PREFIX) :])\n \n     def __iter__(self) -> Iterator[str]:\n         raise NotImplementedError()\ndiff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 335888618ad..faca02d9330 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -130,6 +130,7 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"123.232\",\n         \"True\",\n         \"False\",\n+        \"None\",\n         \"if\",\n         \"else\",\n         \"while\",\n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/7324"}