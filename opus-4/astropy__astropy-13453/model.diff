diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py
index 266cf229cc..8278fe3301 100644
--- a/astropy/io/ascii/html.py
+++ b/astropy/io/ascii/html.py
@@ -354,6 +354,10 @@ class HTML(core.BaseReader):
             self.data.fill_values = [self.data.fill_values]
 
         self.data._set_fill_values(cols)
+        
+        # Set cols on data object and apply column formats before getting string values
+        self.data.cols = cols
+        self.data._set_col_formats()
 
         lines = []
 
@@ -429,6 +433,10 @@ class HTML(core.BaseReader):
                                 for i in range(span):
                                     # Split up multicolumns into separate columns
                                     new_col = Column([el[i] for el in col])
+                                    
+                                    # Copy format from parent column if it exists
+                                    if hasattr(col.info, 'format') and col.info.format is not None:
+                                        new_col.info.format = col.info.format
 
                                     new_col_iter_str_vals = self.fill_values(
                                         col, new_col.info.iter_str_vals())
diff --git a/pyproject.toml b/pyproject.toml
index 7a3b85fc92..83f08ed124 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,5 +1,5 @@
 [build-system]
-requires = ["setuptools",
+requires = ["setuptools==68.0.0",
             "setuptools_scm>=6.2",
             "wheel",
             "cython==0.29.30",
diff --git a/test_html_formats.py b/test_html_formats.py
new file mode 100644
index 0000000000..97303a38aa
--- /dev/null
+++ b/test_html_formats.py
@@ -0,0 +1,30 @@
+from astropy.table import Table
+from io import StringIO
+
+# generate table
+t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))
+tc = t.copy()  # copy table
+
+# Test 1: HTML table with "a" column formatted to show 2 decimal places
+print("Test 1: HTML output with formats")
+with StringIO() as sp:
+    tc.write(sp, format="html", formats={"a": lambda x: f"{x:.2e}"})
+    html_output = sp.getvalue()
+    print(html_output)
+    # Check if formatting was applied
+    if "1.24e-24" in html_output and "3.23e-15" in html_output:
+        print("SUCCESS: Formatting was applied")
+    else:
+        print("FAIL: Formatting was NOT applied")
+
+print("\nTest 2: CSV output with formats (for comparison)")
+with StringIO() as sp:
+    tc.write(sp, format="csv", formats={"a": lambda x: f"{x:.2e}"})
+    csv_output = sp.getvalue()
+    print(csv_output)
+    
+print("\nTest 3: RST output with formats (for comparison)")
+with StringIO() as sp:
+    tc.write(sp, format="ascii.rst", formats={"a": lambda x: f"{x:.2e}"})
+    rst_output = sp.getvalue()
+    print(rst_output)
diff --git a/test_html_formats_feature.py b/test_html_formats_feature.py
new file mode 100644
index 0000000000..8b4ca3f663
--- /dev/null
+++ b/test_html_formats_feature.py
@@ -0,0 +1,68 @@
+"""Test that HTML format writer supports the formats parameter"""
+import pytest
+from astropy.table import Table
+from io import StringIO
+
+
+def test_html_write_with_formats():
+    """Test that HTML writer applies custom formats to columns"""
+    # Create a table with float values
+    t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))
+    
+    # Write with custom format for column 'a'
+    with StringIO() as sp:
+        t.write(sp, format="html", formats={"a": lambda x: f"{x:.2e}"})
+        html_output = sp.getvalue()
+    
+    # Check that the formatting was applied
+    assert "1.24e-24" in html_output
+    assert "3.23e-15" in html_output
+    # Make sure the original values are not in the output
+    assert "1.23875234858e-24" not in html_output
+    assert "3.2348748432e-15" not in html_output
+
+
+def test_html_write_with_multiple_formats():
+    """Test that HTML writer applies formats to multiple columns"""
+    t = Table([(1.234567, 2.345678), (100, 200)], names=('x', 'y'))
+    
+    # Write with custom formats for both columns
+    with StringIO() as sp:
+        t.write(sp, format="html", formats={
+            "x": lambda val: f"{val:.2f}",
+            "y": "{:04d}".format
+        })
+        html_output = sp.getvalue()
+    
+    # Check that formats were applied
+    assert "1.23" in html_output
+    assert "2.35" in html_output
+    assert "0100" in html_output
+    assert "0200" in html_output
+
+
+def test_html_write_with_string_format():
+    """Test that HTML writer works with string format specifications"""
+    t = Table([(1.234567, 2.345678), ("hello", "world")], names=('num', 'text'))
+    
+    # Write with string format
+    with StringIO() as sp:
+        t.write(sp, format="html", formats={"num": "%.3f"})
+        html_output = sp.getvalue()
+    
+    # Check that format was applied
+    assert "1.235" in html_output
+    assert "2.346" in html_output
+    
+
+if __name__ == "__main__":
+    test_html_write_with_formats()
+    print("test_html_write_with_formats: PASSED")
+    
+    test_html_write_with_multiple_formats()
+    print("test_html_write_with_multiple_formats: PASSED")
+    
+    test_html_write_with_string_format()
+    print("test_html_write_with_string_format: PASSED")
+    
+    print("\nAll tests passed!")
diff --git a/test_html_formats_multicolumn.py b/test_html_formats_multicolumn.py
new file mode 100644
index 0000000000..7935cda2f1
--- /dev/null
+++ b/test_html_formats_multicolumn.py
@@ -0,0 +1,36 @@
+"""Test HTML format writer with multicolumn support and formats"""
+from astropy.table import Table
+from io import StringIO
+import numpy as np
+
+
+def test_html_multicolumn_with_formats():
+    """Test that HTML writer applies formats to multi-dimensional columns"""
+    # Create a table with 2D column
+    t = Table()
+    t['2d'] = [[1.234567, 2.345678], [3.456789, 4.567890]]
+    t['1d'] = [10.123456, 20.234567]
+    
+    # Write with custom format
+    with StringIO() as sp:
+        t.write(sp, format="html", formats={
+            "2d": lambda x: f"{x:.2f}",
+            "1d": lambda x: f"{x:.1f}"
+        })
+        html_output = sp.getvalue()
+        print(html_output)
+    
+    # Check that formatting was applied to 2D column elements
+    assert "1.23" in html_output
+    assert "2.35" in html_output
+    assert "3.46" in html_output
+    assert "4.57" in html_output
+    
+    # Check 1D column formatting
+    assert "10.1" in html_output
+    assert "20.2" in html_output
+    
+
+if __name__ == "__main__":
+    test_html_multicolumn_with_formats()
+    print("test_html_multicolumn_with_formats: PASSED")
