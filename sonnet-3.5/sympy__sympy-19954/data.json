{"instance_id": "sympy__sympy-19954", "score": "C", "diff": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..b8d8b9371d 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2192,20 +2192,22 @@ def _number_blocks(blocks):\n                 # a representative block (containing 0)\n                 rep = {j for j in range(self.degree) if num_block[j] == 0}\n                 # check if the system is minimal with\n-                # respect to the already discovere ones\n+                # respect to the already discovered ones\n                 minimal = True\n                 to_remove = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                for i in reversed(to_remove):\n+                    del num_blocks[i]\n+                    del blocks[i]\n+                    del rep_blocks[i]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\ndiff --git a/test_sylow_subgroup.py b/test_sylow_subgroup.py\nnew file mode 100644\nindex 0000000000..d39b9df64f\n--- /dev/null\n+++ b/test_sylow_subgroup.py\n@@ -0,0 +1,13 @@\n+from sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation\n+\n+def test_sylow_subgroup():\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    print(\"Sylow 2-subgroup of D18:\", S2)\n+\n+    G = DihedralGroup(2*25)\n+    S2 = G.sylow_subgroup(p=2)\n+    print(\"Sylow 2-subgroup of D50:\", S2)\n+\n+if __name__ == \"__main__\":\n+    test_sylow_subgroup()\n", "gold_standard_diff": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4af..deebbbf6d4d1 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2194,18 +2194,19 @@ def _number_blocks(blocks):\n                 # check if the system is minimal with\n                 # respect to the already discovere ones\n                 minimal = True\n-                to_remove = []\n+                blocks_remove_mask = [False] * len(blocks)\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        blocks_remove_mask[i] = True\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                blocks = [b for i, b in enumerate(blocks) if not blocks_remove_mask[i]]\n+                num_blocks = [n for i, n in enumerate(num_blocks) if not blocks_remove_mask[i]]\n+                rep_blocks = [r for i, r in enumerate(rep_blocks) if not blocks_remove_mask[i]]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\ndiff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 7ab09936542b..ff91a3311e5a 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,6 +905,14 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n \n @slow\n def test_presentation():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/19954"}