From bfb49895171b7e73d2a56028d3cde8079f77c130 Mon Sep 17 00:00:00 2001
From: Dhruv Mendiratta <dhruvmendiratta6@gmail.com>
Date: Thu, 16 Jul 2020 15:01:27 +0530
Subject: [PATCH 1/3] Dagger() * IdentityOperator() now simplifies by default

Fixes #19747
---
 sympy/physics/quantum/dagger.py              | 10 +++++++++-
 sympy/physics/quantum/operator.py            |  2 +-
 sympy/physics/quantum/tests/test_operator.py |  2 ++
 3 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c5c..9e3435165c48 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -2,7 +2,7 @@
 
 from __future__ import print_function, division
 
-from sympy.core import Expr
+from sympy.core import Expr, Mul
 from sympy.functions.elementary.complexes import adjoint
 
 __all__ = [
@@ -85,5 +85,13 @@ def __new__(cls, arg):
             return obj
         return Expr.__new__(cls, arg)
 
+    def __mul__(self, other):
+        from sympy.physics.quantum import IdentityOperator
+
+        if isinstance(other, IdentityOperator):
+            return self
+
+        return Mul(self,other)
+
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64fde..9c50fe05a51d 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -307,7 +307,7 @@ def _print_contents_latex(self, printer, *args):
 
     def __mul__(self, other):
 
-        if isinstance(other, Operator):
+        if isinstance(other, Operator) or isinstance(other, Dagger):
             return other
 
         return Mul(self, other)
diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py
index 7c8574fe148e..a00bd8cf9f30 100644
--- a/sympy/physics/quantum/tests/test_operator.py
+++ b/sympy/physics/quantum/tests/test_operator.py
@@ -94,6 +94,8 @@ def test_identity():
 
     assert I * O == O
     assert O * I == O
+    assert I * Dagger(O) == Dagger(O)
+    assert Dagger(O) * I == Dagger(O)
     assert isinstance(I * I, IdentityOperator)
     assert isinstance(3 * I, Mul)
     assert isinstance(I * x, Mul)

From c528041931b57130dc45add5630ee07721f63181 Mon Sep 17 00:00:00 2001
From: Dhruv Mendiratta <dhruvmendiratta6@gmail.com>
Date: Fri, 17 Jul 2020 00:26:31 +0530
Subject: [PATCH 2/3] Made suggested changes

---
 sympy/physics/quantum/dagger.py   | 4 +---
 sympy/physics/quantum/operator.py | 2 +-
 2 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 9e3435165c48..795c34f45f7c 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -1,7 +1,5 @@
 """Hermitian conjugation."""
 
-from __future__ import print_function, division
-
 from sympy.core import Expr, Mul
 from sympy.functions.elementary.complexes import adjoint
 
@@ -91,7 +89,7 @@ def __mul__(self, other):
         if isinstance(other, IdentityOperator):
             return self
 
-        return Mul(self,other)
+        return Mul(self, other)
 
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 9c50fe05a51d..81460db5c9d8 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -307,7 +307,7 @@ def _print_contents_latex(self, printer, *args):
 
     def __mul__(self, other):
 
-        if isinstance(other, Operator) or isinstance(other, Dagger):
+        if isinstance(other, (Operator, Dagger)):
             return other
 
         return Mul(self, other)

From d91e3fe121b13d81cd74838e324fc51e87be80b1 Mon Sep 17 00:00:00 2001
From: Dhruv Mendiratta <dhruvmendiratta6@gmail.com>
Date: Fri, 17 Jul 2020 17:54:08 +0530
Subject: [PATCH 3/3] Added tests

---
 sympy/physics/quantum/dagger.py            |  1 -
 sympy/physics/quantum/tests/test_dagger.py | 12 +++++++++++-
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 795c34f45f7c..a557073a0f07 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -85,7 +85,6 @@ def __new__(cls, arg):
 
     def __mul__(self, other):
         from sympy.physics.quantum import IdentityOperator
-
         if isinstance(other, IdentityOperator):
             return self
 
diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py
index bcc8a28f58f4..ed93087790c1 100644
--- a/sympy/physics/quantum/tests/test_dagger.py
+++ b/sympy/physics/quantum/tests/test_dagger.py
@@ -1,8 +1,9 @@
-from sympy import I, Matrix, symbols, conjugate, Expr, Integer
+from sympy import I, Matrix, symbols, conjugate, Expr, Integer, Mul
 
 from sympy.physics.quantum.dagger import adjoint, Dagger
 from sympy.external import import_module
 from sympy.testing.pytest import skip
+from sympy.physics.quantum.operator import Operator, IdentityOperator
 
 
 def test_scalars():
@@ -29,6 +30,15 @@ def test_matrix():
     assert Dagger(m) == m.H
 
 
+def test_dagger_mul():
+    O = Operator('O')
+    I = IdentityOperator()
+    assert Dagger(O)*O == Dagger(O)*O
+    assert Dagger(O)*O*I == Mul(Dagger(O), O)*I
+    assert Dagger(O)*Dagger(O) == Dagger(O)**2
+    assert Dagger(O)*Dagger(I) == Dagger(O)
+
+
 class Foo(Expr):
 
     def _eval_adjoint(self):
