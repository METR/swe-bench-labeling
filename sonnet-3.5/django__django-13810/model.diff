diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..bd4c71de88 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -50,6 +50,9 @@ class BaseHandler:
             else:
                 middleware_is_async = middleware_can_async
             try:
+                # Store the previous handler state
+                prev_handler = handler
+                prev_handler_is_async = handler_is_async
                 # Adapt handler, if needed.
                 handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
@@ -62,6 +65,9 @@ class BaseHandler:
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
                     else:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
+                # Reset handler to its previous state
+                handler = prev_handler
+                handler_is_async = prev_handler_is_async
                 continue
 
             if mw_instance is None:
diff --git a/docs/ref/exceptions.txt b/docs/ref/exceptions.txt
index 2f5aa64b9d..5862c59ff4 100644
--- a/docs/ref/exceptions.txt
+++ b/docs/ref/exceptions.txt
@@ -114,6 +114,11 @@ Django core exception classes are defined in ``django.core.exceptions``.
     The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not
     used in the server configuration.
 
+    In ASGI contexts, when a middleware raises :exc:`MiddlewareNotUsed`, Django
+    ensures that the middleware chain is properly reset to its previous state.
+    This prevents any undesired side effects from affecting subsequent middleware
+    or the view.
+
 ``ImproperlyConfigured``
 ------------------------
 
