{"instance_id": "sympy__sympy-22714", "score": "C", "diff": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..5d93eef393 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,8 +152,18 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n-            raise ValueError('Imaginary coordinates are not permitted.')\n+        # Check for imaginary coordinates\n+        # When evaluate=False, im(a) returns an unevaluated expression like im(1)\n+        # which is truthy even though it evaluates to 0. We need to check if\n+        # the imaginary part is actually non-zero.\n+        if evaluate:\n+            if any(a.is_number and im(a) for a in coords):\n+                raise ValueError('Imaginary coordinates are not permitted.')\n+        else:\n+            # When evaluate=False, we need to explicitly evaluate im() to check\n+            # if it's actually non-zero\n+            if any(a.is_number and im(a).evalf() != 0 for a in coords):\n+                raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n \ndiff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 930d707735..b397eca307 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -470,4 +470,32 @@ def test_direction_cosine():\n \n     assert p2.direction_cosine(Point3D(0, 0, 0)) == [-sqrt(3) / 3, -sqrt(3) / 3, -sqrt(3) / 3]\n     assert p2.direction_cosine(Point3D(1, 1, 12)) == [0, 0, 1]\n-    assert p2.direction_cosine(Point3D(12, 1, 12)) == [sqrt(2) / 2, 0, sqrt(2) / 2]\n+\n+\n+def test_point_evaluate_false():\n+    \"\"\"Test Point creation with evaluate(False) context - issue #xxxxx\"\"\"\n+    from sympy import evaluate, Integer\n+    \n+    # Test that Point creation works with evaluate(False) context\n+    with evaluate(False):\n+        # Using S() to parse string representation\n+        p1 = S('Point2D(Integer(1),Integer(2))')\n+        assert p1 == Point2D(1, 2)\n+        assert isinstance(p1, Point2D)\n+        \n+        # Direct creation with Integer objects\n+        p2 = Point2D(Integer(1), Integer(2))\n+        assert p2 == Point2D(1, 2)\n+        \n+        # Test Point3D\n+        p3 = S('Point3D(Integer(1),Integer(2),Integer(3))')\n+        assert p3 == Point3D(1, 2, 3)\n+        \n+        # Test general Point\n+        p4 = Point(1, 2, 3, 4)\n+        assert p4.args == (1, 2, 3, 4)\n+    \n+    # Ensure complex numbers still raise error with evaluate(False)\n+    with evaluate(False):\n+        raises(ValueError, lambda: Point2D(1 + 2*I, 3))\n+        raises(ValueError, lambda: Point3D(1, 2*I, 3))\ndiff --git a/test_point_evaluate_false.py b/test_point_evaluate_false.py\nnew file mode 100644\nindex 0000000000..bc63736a68\n--- /dev/null\n+++ b/test_point_evaluate_false.py\n@@ -0,0 +1,47 @@\n+import sympy as sp\n+\n+def test_point_with_evaluate_false():\n+    \"\"\"Test that Point creation works correctly with evaluate(False) context.\"\"\"\n+    \n+    # Test 1: Basic Point2D creation with evaluate(False) using S()\n+    with sp.evaluate(False):\n+        p1 = sp.S('Point2D(Integer(1),Integer(2))')\n+        assert p1 == sp.Point2D(1, 2)\n+        assert str(p1) == 'Point2D(1, 2)'\n+    \n+    # Test 2: Direct Point2D creation with evaluate(False)\n+    with sp.evaluate(False):\n+        p2 = sp.Point2D(sp.Integer(1), sp.Integer(2))\n+        assert p2 == sp.Point2D(1, 2)\n+    \n+    # Test 3: Point3D with evaluate(False)\n+    with sp.evaluate(False):\n+        p3 = sp.S('Point3D(Integer(1),Integer(2),Integer(3))')\n+        assert p3 == sp.Point3D(1, 2, 3)\n+    \n+    # Test 4: General Point with evaluate(False)\n+    with sp.evaluate(False):\n+        p4 = sp.Point(1, 2, 3, 4)\n+        assert p4.args == (1, 2, 3, 4)\n+    \n+    # Test 5: Floats with evaluate(False) should remain floats\n+    with sp.evaluate(False):\n+        p5 = sp.Point2D(0.5, 0.25)\n+        assert p5.args == (0.5, 0.25)\n+    \n+    # Test 6: Complex numbers should still raise error with evaluate(False)\n+    try:\n+        with sp.evaluate(False):\n+            sp.Point2D(1 + 2*sp.I, 3)\n+        assert False, \"Should have raised ValueError for imaginary coordinate\"\n+    except ValueError as e:\n+        assert str(e) == 'Imaginary coordinates are not permitted.'\n+    \n+    # Test 7: Same test without evaluate(False) for comparison\n+    p6 = sp.S('Point2D(Integer(1),Integer(2))')\n+    assert p6 == sp.Point2D(1, 2)\n+    \n+    print(\"All tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_point_with_evaluate_false()\n", "gold_standard_diff": "From 1890bc635cdf0d88ee09bc798c8d423874b5c823 Mon Sep 17 00:00:00 2001\nFrom: Oscar Gustafsson <oscar.gustafsson@gmail.com>\nDate: Sun, 19 Dec 2021 19:50:41 +0100\nSubject: [PATCH] Fixed issue with unevaluated Point2D\n\n---\n sympy/geometry/point.py            | 2 +-\n sympy/geometry/tests/test_point.py | 7 +++++++\n 2 files changed, 8 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d09e..11bad7ff9c99 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n+        if any(a.is_number and im(a).is_zero is False for a in coords):\n             raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\ndiff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 930d707735e2..d2e3a545c902 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,5 +1,6 @@\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n+from sympy.core.parameters import evaluate\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n@@ -452,6 +453,12 @@ def test__normalize_dimension():\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+\n def test_direction_cosine():\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/22714"}