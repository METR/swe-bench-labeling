{"instance_id": "pydata__xarray-3677", "score": "C", "diff": "diff --git a/test_merge_comprehensive.py b/test_merge_comprehensive.py\nnew file mode 100644\nindex 00000000..fb098927\n--- /dev/null\n+++ b/test_merge_comprehensive.py\n@@ -0,0 +1,58 @@\n+import xarray as xr\n+import numpy as np\n+\n+# Test 1: Basic DataArray merge\n+print(\"Test 1: Basic DataArray merge\")\n+ds = xr.Dataset({'a': 0})\n+da = xr.DataArray(1, name='b')\n+result = ds.merge(da)\n+print(result)\n+print()\n+\n+# Test 2: DataArray with dimensions\n+print(\"Test 2: DataArray with dimensions\")\n+ds = xr.Dataset({'a': ('x', [1, 2, 3])})\n+da = xr.DataArray([4, 5, 6], dims='x', name='b')\n+result = ds.merge(da)\n+print(result)\n+print()\n+\n+# Test 3: DataArray with coordinates\n+print(\"Test 3: DataArray with coordinates\")\n+ds = xr.Dataset({'a': ('x', [1, 2, 3])}, coords={'x': [10, 20, 30]})\n+da = xr.DataArray([4, 5, 6], dims='x', coords={'x': [10, 20, 30]}, name='b')\n+result = ds.merge(da)\n+print(result)\n+print()\n+\n+# Test 4: Test with overwrite_vars\n+print(\"Test 4: Test with overwrite_vars\")\n+ds = xr.Dataset({'a': 1, 'b': 2})\n+da = xr.DataArray(3, name='b')\n+result = ds.merge(da, overwrite_vars='b')\n+print(result)\n+print()\n+\n+# Test 5: Multiple variables in DataArray (when converted to Dataset)\n+print(\"Test 5: DataArray with attrs\")\n+ds = xr.Dataset({'a': 0})\n+da = xr.DataArray(1, name='b', attrs={'units': 'meters'})\n+result = ds.merge(da)\n+print(result)\n+print()\n+\n+# Test 6: Compare with top-level merge\n+print(\"Test 6: Verify ds.merge(da) == xr.merge([ds, da])\")\n+ds = xr.Dataset({'a': ('x', [1, 2, 3])})\n+da = xr.DataArray([4, 5, 6], dims='x', name='b')\n+result1 = ds.merge(da)\n+result2 = xr.merge([ds, da])\n+print(f\"Results are equal: {result1.equals(result2)}\")\n+print()\n+\n+# Test 7: Empty dataset\n+print(\"Test 7: Empty dataset\")\n+ds = xr.Dataset()\n+da = xr.DataArray(1, name='a')\n+result = ds.merge(da)\n+print(result)\ndiff --git a/test_merge_issue.py b/test_merge_issue.py\nnew file mode 100644\nindex 00000000..9cb936d5\n--- /dev/null\n+++ b/test_merge_issue.py\n@@ -0,0 +1,18 @@\n+import xarray as xr\n+\n+ds = xr.Dataset({'a': 0})\n+da = xr.DataArray(1, name='b')\n+\n+# This works fine\n+expected = xr.merge([ds, da])\n+print(\"Top-level merge result:\")\n+print(expected)\n+print()\n+\n+# This fails\n+try:\n+    result = ds.merge(da)\n+    print(\"Dataset.merge result:\")\n+    print(result)\n+except Exception as e:\n+    print(f\"Dataset.merge failed with: {type(e).__name__}: {e}\")\ndiff --git a/test_update_issue.py b/test_update_issue.py\nnew file mode 100644\nindex 00000000..12d200f3\n--- /dev/null\n+++ b/test_update_issue.py\n@@ -0,0 +1,12 @@\n+import xarray as xr\n+\n+ds = xr.Dataset({'a': 0})\n+da = xr.DataArray(1, name='b')\n+\n+# Test if update also fails with DataArray\n+try:\n+    ds.update(da)\n+    print(\"Dataset.update with DataArray works!\")\n+    print(ds)\n+except Exception as e:\n+    print(f\"Dataset.update failed with: {type(e).__name__}: {e}\")\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex ac0a923d..89a6f12a 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3515,15 +3515,16 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             result = result._unstack_once(dim, fill_value, sparse)\n         return result\n \n-    def update(self, other: \"CoercibleMapping\", inplace: bool = None) -> \"Dataset\":\n+    def update(self, other: Union[\"CoercibleMapping\", \"DataArray\"], inplace: bool = None) -> \"Dataset\":\n         \"\"\"Update this dataset's variables with those from another dataset.\n \n         Parameters\n         ----------\n-        other : Dataset or castable to Dataset\n+        other : Dataset, DataArray, or dict-like\n             Variables with which to update this dataset. One of:\n \n             - Dataset\n+            - DataArray (will be converted to Dataset)\n             - mapping {var name: DataArray}\n             - mapping {var name: Variable}\n             - mapping {var name: (dimension name, array-like)}\n@@ -3547,7 +3548,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n \n     def merge(\n         self,\n-        other: \"CoercibleMapping\",\n+        other: Union[\"CoercibleMapping\", \"DataArray\"],\n         inplace: bool = None,\n         overwrite_vars: Union[Hashable, Iterable[Hashable]] = frozenset(),\n         compat: str = \"no_conflicts\",\n@@ -3563,8 +3564,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n \n         Parameters\n         ----------\n-        other : Dataset or castable to Dataset\n-            Dataset or variables to merge with this dataset.\n+        other : Dataset, DataArray, or dict-like\n+            Dataset, DataArray, or dict-like object containing variables to merge \n+            with this dataset. If a DataArray, it will be converted to a Dataset \n+            before merging.\n         overwrite_vars : Hashable or iterable of Hashable, optional\n             If provided, update variables of these name(s) without checking for\n             conflicts in this dataset.\ndiff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 10c7804d..c4c98409 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -808,6 +808,11 @@ def dataset_merge_method(\n     # we are locked into supporting overwrite_vars for the Dataset.merge\n     # method due for backwards compatibility\n     # TODO: consider deprecating it?\n+    from .dataarray import DataArray\n+\n+    # Convert DataArray to Dataset to ensure we have a dict-like object\n+    if isinstance(other, DataArray):\n+        other = other.to_dataset()\n \n     if isinstance(overwrite_vars, Iterable) and not isinstance(overwrite_vars, str):\n         overwrite_vars = set(overwrite_vars)\n@@ -848,7 +853,10 @@ def dataset_update_method(\n     from .dataarray import DataArray\n     from .dataset import Dataset\n \n-    if not isinstance(other, Dataset):\n+    if isinstance(other, DataArray):\n+        # Convert DataArray to Dataset first\n+        other = other.to_dataset()\n+    elif not isinstance(other, Dataset):\n         other = dict(other)\n         for key, value in other.items():\n             if isinstance(value, DataArray):\n", "gold_standard_diff": "From c03c7c80c77bcce8e7260406461fe535de5f9928 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <tegn500@york.ac.uk>\nDate: Thu, 9 Jan 2020 15:56:32 +0000\nSubject: [PATCH 1/5] Added mwe as test\n\n---\n xarray/tests/test_merge.py | 6 ++++++\n 1 file changed, 6 insertions(+)\n\ndiff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex c1e6c7a5ce8..ed786584af9 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -253,3 +253,9 @@ def test_merge_no_conflicts(self):\n         with pytest.raises(xr.MergeError):\n             ds3 = xr.Dataset({\"a\": (\"y\", [2, 3]), \"y\": [1, 2]})\n             ds1.merge(ds3, compat=\"no_conflicts\")\n+\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({'a': 0})\n+        da = xr.DataArray(data=1, name='b')\n+\n+        assert ds.merge(da).identical(xr.merge([ds, da]))\n\nFrom 211fa9acca42787fbb34ee3354b4f1c5d6ba1ab2 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <tegn500@york.ac.uk>\nDate: Thu, 9 Jan 2020 15:56:48 +0000\nSubject: [PATCH 2/5] Cast to Dataset\n\n---\n xarray/core/dataset.py | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex ac0a923db78..d597ec8cfb0 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3604,6 +3604,7 @@ def merge(\n             If any variables conflict (see ``compat``).\n         \"\"\"\n         _check_inplace(inplace)\n+        other = other.to_dataset() if isinstance(other, xr.DataArray) else other\n         merge_result = dataset_merge_method(\n             self,\n             other,\n\nFrom 8a60abcbd68fa8d831226ed32df718c38b8131e2 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <tegn500@york.ac.uk>\nDate: Thu, 9 Jan 2020 15:59:20 +0000\nSubject: [PATCH 3/5] Updated what's new\n\n---\n doc/whats-new.rst | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 5a9f2497ed6..e69fbadea34 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -70,6 +70,8 @@ Bug fixes\n   By `Justus Magin <https://github.com/keewis>`_.\n - :py:meth:`Dataset.rename`, :py:meth:`DataArray.rename` now check for conflicts with\n   MultiIndex level names.\n+- :py:meth:`Dataset.merge` no longer fails when passed a `DataArray` instead of a `Dataset` object.\n+  By `Tom Nicholas <https://github.com/TomNicholas>`_.\n \n Documentation\n ~~~~~~~~~~~~~\n\nFrom c0c809d6c5204ea27559752974ebbda3668ed887 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <tegn500@york.ac.uk>\nDate: Thu, 9 Jan 2020 16:09:04 +0000\nSubject: [PATCH 4/5] black formatted\n\n---\n xarray/tests/test_merge.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ed786584af9..e598994a619 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -255,7 +255,7 @@ def test_merge_no_conflicts(self):\n             ds1.merge(ds3, compat=\"no_conflicts\")\n \n     def test_merge_dataarray(self):\n-        ds = xr.Dataset({'a': 0})\n-        da = xr.DataArray(data=1, name='b')\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n \n         assert ds.merge(da).identical(xr.merge([ds, da]))\n\nFrom 2901cacca452776d453c60b7e7af0393cdac95a9 Mon Sep 17 00:00:00 2001\nFrom: Thomas Nicholas <tegn500@york.ac.uk>\nDate: Thu, 9 Jan 2020 16:11:50 +0000\nSubject: [PATCH 5/5] Use assert_identical\n\n---\n xarray/tests/test_merge.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex e598994a619..6c8f3f65657 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -3,6 +3,7 @@\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -258,4 +259,4 @@ def test_merge_dataarray(self):\n         ds = xr.Dataset({\"a\": 0})\n         da = xr.DataArray(data=1, name=\"b\")\n \n-        assert ds.merge(da).identical(xr.merge([ds, da]))\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/3677"}