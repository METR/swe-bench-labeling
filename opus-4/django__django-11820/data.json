{"instance_id": "django__django-11820", "score": "I", "diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f3f1..7227894731 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1706,8 +1706,13 @@ class Model(metaclass=ModelBase):\n         for field in related_fields:\n             _cls = cls\n             fld = None\n-            for part in field.split(LOOKUP_SEP):\n+            parts = field.split(LOOKUP_SEP)\n+            for i, part in enumerate(parts):\n                 try:\n+                    # Skip ordering on pk on the final model. It's always a valid field\n+                    # but is an alias and won't be found by get_field().\n+                    if i == len(parts) - 1 and part == 'pk':\n+                        break\n                     fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\ndiff --git a/test_actual_ordering.py b/test_actual_ordering.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_multilevel_pk.py b/test_multilevel_pk.py\nnew file mode 100644\nindex 0000000000..349a80b3c3\n--- /dev/null\n+++ b/test_multilevel_pk.py\n@@ -0,0 +1,60 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key'\n+)\n+\n+django.setup()\n+\n+# Now we can import models\n+from django.db import models\n+from django.core.checks import run_checks\n+\n+# Define test models\n+class GrandParent(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+class Parent(models.Model):\n+    grandparent = models.ForeignKey(GrandParent, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+class Child(models.Model):\n+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+        ordering = ['parent__grandparent__pk']\n+\n+\n+# Run checks\n+print(\"Running model checks for multi-level related pk ordering...\")\n+errors = run_checks()\n+if errors:\n+    print(f\"Found {len(errors)} error(s):\")\n+    for error in errors:\n+        if 'E015' in str(error):\n+            print(f\"  E015 Error: {error}\")\n+else:\n+    print(\"No errors found! Multi-level related pk ordering works correctly.\")\ndiff --git a/test_ordering_pk_issue.py b/test_ordering_pk_issue.py\nnew file mode 100644\nindex 0000000000..67af9b0c56\n--- /dev/null\n+++ b/test_ordering_pk_issue.py\n@@ -0,0 +1,69 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+from django.db import models\n+\n+@isolate_apps('invalid_models_tests')\n+class TestOrderingRelatedPK(SimpleTestCase):\n+    def test_ordering_by_related_pk(self):\n+        \"\"\"Test that ordering by related__pk doesn't raise E015 error\"\"\"\n+        class Option(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(Option, models.CASCADE)\n+            \n+            class Meta:\n+                ordering = ['option__pk']\n+        \n+        # This should not raise any errors\n+        errors = SomeModel.check()\n+        self.assertEqual(errors, [])\n+    \n+    def test_ordering_by_related_pk_descending(self):\n+        \"\"\"Test that ordering by -related__pk doesn't raise E015 error\"\"\"\n+        class Option(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        class SomeModel(models.Model):\n+            option = models.ForeignKey(Option, models.CASCADE)\n+            \n+            class Meta:\n+                ordering = ['-option__pk']\n+        \n+        # This should not raise any errors\n+        errors = SomeModel.check()\n+        self.assertEqual(errors, [])\n+\n+if __name__ == '__main__':\n+    import django\n+    from django.conf import settings\n+    \n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'invalid_models_tests',\n+        ],\n+        SECRET_KEY='test'\n+    )\n+    \n+    django.setup()\n+    \n+    # Run the test\n+    test = TestOrderingRelatedPK()\n+    test.test_ordering_by_related_pk()\n+    print(\"Test 1 passed: ordering by related__pk\")\n+    test.test_ordering_by_related_pk_descending()\n+    print(\"Test 2 passed: ordering by -related__pk\")\ndiff --git a/test_ordering_related_pk.py b/test_ordering_related_pk.py\nnew file mode 100644\nindex 0000000000..e81b29e2ee\n--- /dev/null\n+++ b/test_ordering_related_pk.py\n@@ -0,0 +1,24 @@\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Option(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+\n+class SomeModel(models.Model):\n+    option = models.ForeignKey(Option, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        ordering = ['option__pk']\n+\n+\n+# Test that the model checks pass\n+from django.core.checks import run_checks\n+errors = run_checks()\n+for error in errors:\n+    print(f\"Error: {error}\")\n+\n+# Also test the actual ordering works\n+if not errors:\n+    print(\"No errors found!\")\ndiff --git a/test_pk_ordering.py b/test_pk_ordering.py\nnew file mode 100644\nindex 0000000000..a3b947832d\n--- /dev/null\n+++ b/test_pk_ordering.py\n@@ -0,0 +1,53 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key'\n+)\n+\n+django.setup()\n+\n+# Now we can import models\n+from django.db import models\n+from django.core.checks import run_checks\n+\n+# Define test models\n+class Option(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+class SomeModel(models.Model):\n+    option = models.ForeignKey(Option, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+        ordering = ['option__pk']\n+\n+\n+# Run checks\n+print(\"Running model checks...\")\n+errors = run_checks()\n+if errors:\n+    print(f\"Found {len(errors)} error(s):\")\n+    for error in errors:\n+        if 'E015' in str(error):\n+            print(f\"  E015 Error: {error}\")\n+else:\n+    print(\"No errors found!\")\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 0f1d1e4dc3..3604c082cb 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -836,6 +836,30 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertFalse(Child.check())\n \n+    def test_ordering_pointing_to_related_pk_field(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('parent__pk',)\n+\n+        self.assertFalse(Child.check())\n+\n+    def test_ordering_pointing_to_related_pk_field_desc(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('-parent__pk',)\n+\n+        self.assertFalse(Child.check())\n+\n     def test_name_beginning_with_underscore(self):\n         class _Model(models.Model):\n             pass\n", "gold_standard_diff": "From c7944628a1979453468d67818c63957532d396d8 Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Thu, 26 Sep 2019 10:33:54 +0200\nSubject: [PATCH 1/2] Refs #30798 -- Prevented chaining fields from the same\n related model multiple times in model Meta.ordering.\n\n---\n django/db/models/base.py                  |  2 ++\n tests/invalid_models_tests/test_models.py | 20 ++++++++++++++++++++\n 2 files changed, 22 insertions(+)\n\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3ce711f3f1a8..fe3d84677a3c 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1711,6 +1711,8 @@ def _check_ordering(cls):\n                     fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\n+                    else:\n+                        _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n                     if fld is None or fld.get_transform(part) is None:\n                         errors.append(\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 0f1d1e4dc300..02db3ea54ac0 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -814,6 +814,26 @@ class Meta:\n             )\n         ])\n \n+    def test_ordering_pointing_multiple_times_to_model_fields(self):\n+        class Parent(models.Model):\n+            field1 = models.CharField(max_length=100)\n+            field2 = models.CharField(max_length=100)\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('parent__field1__field2',)\n+\n+        self.assertEqual(Child.check(), [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup 'parent__field1__field2'.\",\n+                obj=Child,\n+                id='models.E015',\n+            )\n+        ])\n+\n     def test_ordering_allows_registered_lookups(self):\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n\nFrom 95a11578ce41de1e152fe7d173f109e280aebd6d Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Fri, 27 Sep 2019 12:16:26 +0200\nSubject: [PATCH 2/2] Fixed #30798 -- Fixed Meta.ordering validation for pk of\n related fields.\n\nRegression in 440505cb2cadbe1a5b9fba246bcde6c04f51d07e.\n---\n django/db/models/base.py                  |  6 +++++-\n tests/invalid_models_tests/test_models.py | 12 ++++++++++++\n 2 files changed, 17 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex fe3d84677a3c..0b8425aa8531 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1708,7 +1708,11 @@ def _check_ordering(cls):\n             fld = None\n             for part in field.split(LOOKUP_SEP):\n                 try:\n-                    fld = _cls._meta.get_field(part)\n+                    # pk is an alias that won't be found by opts.get_field.\n+                    if part == 'pk':\n+                        fld = _cls._meta.pk\n+                    else:\n+                        fld = _cls._meta.get_field(part)\n                     if fld.is_relation:\n                         _cls = fld.get_path_info()[-1].to_opts.model\n                     else:\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 02db3ea54ac0..60b89b6f2ec4 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -844,6 +844,18 @@ class Meta:\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n+    def test_ordering_pointing_to_related_model_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('parent__pk',)\n+\n+        self.assertEqual(Child.check(), [])\n+\n     def test_ordering_pointing_to_foreignkey_field(self):\n         class Parent(models.Model):\n             pass\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11820"}