{"instance_id": "django__django-13112", "score": "I", "diff": "diff --git a/test_case.py b/test_case.py\nnew file mode 100644\nindex 0000000000..048bd98909\n--- /dev/null\n+++ b/test_case.py\n@@ -0,0 +1,83 @@\n+\"\"\"Test script to reproduce the issue\"\"\"\n+import os\n+import django\n+from django.conf import settings\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+# Create test settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'DJ_RegLogin',\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+        USE_TZ=True,\n+        SECRET_KEY='test-secret-key',\n+    )\n+\n+django.setup()\n+\n+# Create the app directory and files\n+import os\n+os.makedirs('DJ_RegLogin', exist_ok=True)\n+\n+# Create __init__.py\n+with open('DJ_RegLogin/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Create apps.py\n+with open('DJ_RegLogin/apps.py', 'w') as f:\n+    f.write('''from django.apps import AppConfig\n+\n+class DJ_RegLoginConfig(AppConfig):\n+    name = 'DJ_RegLogin'\n+    verbose_name = \"Contents\"\n+''')\n+\n+# Create models.py\n+with open('DJ_RegLogin/models.py', 'w') as f:\n+    f.write('''from django.db import models\n+from django.contrib.auth.models import User\n+\n+class Category(models.Model):\n+    title = models.CharField(max_length=100, db_index=True)\n+    slug = models.SlugField(max_length=100, db_index=True)\n+    \n+    class Meta:\n+        verbose_name = 'Category'\n+        verbose_name_plural = 'Categories'\n+    \n+    def __str__(self):\n+        return self.title\n+\n+class Content(models.Model):\n+    title = models.CharField(max_length=100, unique=True)\n+    slug = models.SlugField(max_length=100, unique=True)\n+    body = models.TextField()\n+    posted = models.DateTimeField(db_index=True, auto_now_add=True)\n+    ip = models.GenericIPAddressField(editable=False)\n+    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)\n+    status = models.CharField(max_length=10, default='draft')\n+    \n+    def __str__(self):\n+        return self.title\n+''')\n+\n+# Try to make migrations\n+from django.core.management import call_command\n+try:\n+    call_command('makemigrations', 'DJ_RegLogin')\n+except Exception as e:\n+    print(f\"Error during makemigrations: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/test_project/DJ_RegLogin/__init__.py b/test_project/DJ_RegLogin/__init__.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_project/DJ_RegLogin/__init__.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_project/DJ_RegLogin/apps.py b/test_project/DJ_RegLogin/apps.py\nnew file mode 100644\nindex 0000000000..b41a0e5814\n--- /dev/null\n+++ b/test_project/DJ_RegLogin/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+class DJ_RegLoginConfig(AppConfig):\n+    name = 'DJ_RegLogin'\n+    verbose_name = \"Contents\"\ndiff --git a/test_project/DJ_RegLogin/models.py b/test_project/DJ_RegLogin/models.py\nnew file mode 100644\nindex 0000000000..a738ce5219\n--- /dev/null\n+++ b/test_project/DJ_RegLogin/models.py\n@@ -0,0 +1,26 @@\n+from django.db import models\n+from django.contrib.auth.models import User\n+\n+class Category(models.Model):\n+    title = models.CharField(max_length=100, db_index=True)\n+    slug = models.SlugField(max_length=100, db_index=True)\n+    \n+    class Meta:\n+        verbose_name = 'Category'\n+        verbose_name_plural = 'Categories'\n+    \n+    def __str__(self):\n+        return self.title\n+\n+class Content(models.Model):\n+    title = models.CharField(max_length=100, unique=True)\n+    slug = models.SlugField(max_length=100, unique=True)\n+    body = models.TextField()\n+    posted = models.DateTimeField(db_index=True, auto_now_add=True)\n+    ip = models.GenericIPAddressField(editable=False)\n+    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+    user = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False, editable=False)\n+    status = models.CharField(max_length=10, default='draft')\n+    \n+    def __str__(self):\n+        return self.title\ndiff --git a/test_project/manage.py b/test_project/manage.py\nnew file mode 100644\nindex 0000000000..d67a5361e9\n--- /dev/null\n+++ b/test_project/manage.py\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env python\n+\"\"\"Django's command-line utility for administrative tasks.\"\"\"\n+import os\n+import sys\n+\n+if __name__ == '__main__':\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed and \"\n+            \"available on your PYTHONPATH environment variable? Did you \"\n+            \"forget to activate a virtual environment?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\ndiff --git a/test_project/settings.py b/test_project/settings.py\nnew file mode 100644\nindex 0000000000..01d6935d5f\n--- /dev/null\n+++ b/test_project/settings.py\n@@ -0,0 +1,57 @@\n+import os\n+\n+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n+BASE_DIR = os.path.dirname(os.path.abspath(__file__))\n+\n+SECRET_KEY = 'test-secret-key'\n+\n+DEBUG = True\n+\n+ALLOWED_HOSTS = []\n+\n+INSTALLED_APPS = [\n+    'DJ_RegLogin',\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.staticfiles',\n+]\n+\n+MIDDLEWARE = [\n+    'django.middleware.security.SecurityMiddleware',\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.middleware.common.CommonMiddleware',\n+    'django.middleware.csrf.CsrfViewMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n+]\n+\n+ROOT_URLCONF = 'urls'\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n+    }\n+}\n+\n+USE_TZ = True\ndiff --git a/test_project/urls.py b/test_project/urls.py\nnew file mode 100644\nindex 0000000000..637600f58a\n--- /dev/null\n+++ b/test_project/urls.py\n@@ -0,0 +1 @@\n+urlpatterns = []\n", "gold_standard_diff": "From d6949b9f7080a6f06957a6ae8a2bfb18872b28d0 Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Fri, 26 Jun 2020 06:41:22 +0200\nSubject: [PATCH] Fixed #31742 -- Fixed makemigrations crash on ForeignKey to\n an app with mixed case label.\n\nRegression in 9e1b6b8a66af4c2197e5b1b41eb9dbb36e4f6502.\n\nThanks Ignacio Santolin for the report.\n---\n django/db/models/fields/related.py |  6 +++++-\n tests/migrations/test_state.py     | 28 ++++++++++++++++++++++++++++\n 2 files changed, 33 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex c2aea9c7306e..397146a35496 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -582,7 +582,11 @@ def deconstruct(self):\n         if self.remote_field.parent_link:\n             kwargs['parent_link'] = self.remote_field.parent_link\n         if isinstance(self.remote_field.model, str):\n-            kwargs['to'] = self.remote_field.model.lower()\n+            if '.' in self.remote_field.model:\n+                app_label, model_name = self.remote_field.model.split('.')\n+                kwargs['to'] = '%s.%s' % (app_label, model_name.lower())\n+            else:\n+                kwargs['to'] = self.remote_field.model.lower()\n         else:\n             kwargs['to'] = self.remote_field.model._meta.label_lower\n         # If swappable is True, then see if we're actually pointing to the target\ndiff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 40277bf506c0..5ac9bf858ff9 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,34 @@ class Meta:\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_reference_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13112"}