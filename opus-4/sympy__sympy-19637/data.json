{"instance_id": "sympy__sympy-19637", "score": "C", "diff": "diff --git a/run_kerns_test.py b/run_kerns_test.py\nnew file mode 100644\nindex 0000000000..a4a042c32e\n--- /dev/null\n+++ b/run_kerns_test.py\n@@ -0,0 +1,46 @@\n+from sympy.core.sympify import kernS\n+from sympy import Symbol, Interval, Add, Mul, exp, sin, cos, Rational, S, Matrix\n+from sympy.abc import x, y\n+\n+# Test from test_kernS\n+s = '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n+ss = kernS(s)\n+print(f\"Test 1: {ss != -1 and ss.simplify() == -1}\")\n+\n+s = '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'.replace('x', '_kern')\n+ss = kernS(s)\n+print(f\"Test 2: {ss != -1 and ss.simplify() == -1}\")\n+\n+# issue 6687\n+result = kernS('Interval(-1,-2 - 4*(-3))')\n+expected = Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False))\n+print(f\"Test 3: {result == expected}\")\n+\n+print(f\"Test 4: {kernS('_kern') == Symbol('_kern')}\")\n+print(f\"Test 5: {kernS('E**-(x)') == exp(-x)}\")\n+\n+e = 2*(x + y)*y\n+result = kernS(['2*(x + y)*y', ('2*(x + y)*y',)])\n+print(f\"Test 6: {result == [e, (e,)]}\")\n+\n+result = kernS('-(2*sin(x)**2 + 2*sin(x)*cos(x))*y/2')\n+expected = -y*(2*sin(x)**2 + 2*sin(x)*cos(x))/2\n+print(f\"Test 7: {result == expected}\")\n+\n+# issue 15132\n+print(f\"Test 8: {kernS('(1 - x)/(1 - x*(1-y))') == kernS('(1-x)/(1-(1-y)*x)')}\")\n+print(f\"Test 9: {kernS('(1-2**-(4+1)*(1-y)*x)') == (1 - x*(1 - y)/32)}\")\n+print(f\"Test 10: {kernS('(1-2**(4+1)*(1-y)*x)') == (1 - 32*x*(1 - y))}\")\n+print(f\"Test 11: {kernS('(1-2.*(1-y)*x)') == 1 - 2.*x*(1 - y)}\")\n+\n+one = kernS('x - (x - 1)')\n+print(f\"Test 12: {one != 1 and one.expand() == 1}\")\n+\n+# Test the original issue  \n+print(\"\\nOriginal issue test:\")\n+text = \"(2*x)/(x-1)\"\n+try:\n+    expr = kernS(text)\n+    print(f\"SUCCESS: kernS('{text}') = {expr}\")\n+except Exception as e:\n+    print(f\"FAILED: {type(e).__name__}: {e}\")\ndiff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex a3f1ce2851..cc76b36915 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -513,7 +513,9 @@ def kernS(s):\n             while kern in s:\n                 kern += choice(string.ascii_letters + string.digits)\n             s = s.replace(' ', kern)\n-        hit = kern in s\n+            hit = kern in s\n+        else:\n+            hit = False\n \n     for i in range(2):\n         try:\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..c82bfa82bb\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,23 @@\n+from sympy.core.sympify import kernS\n+\n+# Test edge cases where no parentheses exist (hit should remain False)\n+test_cases = [\n+    \"x + y\",\n+    \"2*x\",\n+    \"x/y\",\n+    \"x**2\",\n+    # Test cases with parentheses but no spaces generated\n+    \"(x)\",\n+    \"(x+y)\",\n+    \"(2*x)\",\n+    # Test the original issue case\n+    \"(2*x)/(x-1)\",\n+]\n+\n+print(\"Testing edge cases:\")\n+for test in test_cases:\n+    try:\n+        result = kernS(test)\n+        print(f\"kernS('{test}') = {result} - SUCCESS\")\n+    except Exception as e:\n+        print(f\"kernS('{test}') - FAILED: {type(e).__name__}: {e}\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..151a261021\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,8 @@\n+from sympy.core.sympify import kernS\n+\n+text = \"(2*x)/(x-1)\"\n+try:\n+    expr = kernS(text)\n+    print(f\"Success: {expr}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\ndiff --git a/test_kerns_comprehensive.py b/test_kerns_comprehensive.py\nnew file mode 100644\nindex 0000000000..99521f6cc8\n--- /dev/null\n+++ b/test_kerns_comprehensive.py\n@@ -0,0 +1,41 @@\n+from sympy.core.sympify import kernS\n+from sympy.abc import x, y\n+\n+test_cases = [\n+    # Original failing case\n+    \"(2*x)/(x-1)\",\n+    # Examples from docstring\n+    \"2*(x + y)\",\n+    \"-(x + 1)\",\n+    # Other test cases\n+    \"x + y\",\n+    \"2*x\",\n+    \"-x\",\n+    \"(x + y)*2\",\n+    \"3*(a + b + c)\",\n+    # Edge cases\n+    \"()\",\n+    \"(x)\",\n+    \"x\",\n+    \"\",\n+    # Cases with quotes\n+    '\"hello\"',\n+    \"'world'\",\n+    # Cases that should trigger the kern logic\n+    \"2*(x+y)\",\n+    \"-(x+y)\",\n+    \"-( x + y )\",\n+]\n+\n+print(\"Testing kernS function:\")\n+print(\"-\" * 50)\n+\n+for test in test_cases:\n+    try:\n+        result = kernS(test)\n+        print(f\"kernS('{test}') = {result}\")\n+    except Exception as e:\n+        print(f\"kernS('{test}') FAILED: {type(e).__name__}: {e}\")\n+\n+print(\"-\" * 50)\n+print(\"All tests completed!\")\ndiff --git a/test_with_spaces.py b/test_with_spaces.py\nnew file mode 100644\nindex 0000000000..c87801c5a9\n--- /dev/null\n+++ b/test_with_spaces.py\n@@ -0,0 +1,26 @@\n+from sympy.core.sympify import kernS\n+from sympy.abc import x, y\n+\n+# Test cases that should trigger the kern logic (spaces will be inserted)\n+test_cases = [\n+    \"2*(x + y)\",      # Should preserve structure\n+    \"-(x + 1)\",       # Should preserve structure  \n+    \"3*(a + b + c)\",  # Should preserve structure\n+    \"-(x+y)\",         # Should preserve structure\n+    \"-( x + y )\",     # Should preserve structure\n+]\n+\n+print(\"Testing cases with kern logic:\")\n+for test in test_cases:\n+    try:\n+        result = kernS(test)\n+        # Check if the structure is preserved (no distribution)\n+        print(f\"kernS('{test}') = {result}\")\n+        \n+        # For comparison, show what plain sympify would do\n+        from sympy import sympify\n+        plain_result = sympify(test)\n+        if str(result) != str(plain_result):\n+            print(f\"  (plain sympify would give: {plain_result})\")\n+    except Exception as e:\n+        print(f\"kernS('{test}') - FAILED: {type(e).__name__}: {e}\")\n", "gold_standard_diff": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex a3f1ce2851ba..cc76b3691568 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -513,7 +513,9 @@ def kernS(s):\n             while kern in s:\n                 kern += choice(string.ascii_letters + string.digits)\n             s = s.replace(' ', kern)\n-        hit = kern in s\n+            hit = kern in s\n+        else:\n+            hit = False\n \n     for i in range(2):\n         try:\ndiff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 3413df283207..b2bbf6c73f54 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -512,6 +512,7 @@ def test_kernS():\n     assert kernS('(1-2.*(1-y)*x)') == 1 - 2.*x*(1 - y)\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n \n \n def test_issue_6540_6552():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/19637"}