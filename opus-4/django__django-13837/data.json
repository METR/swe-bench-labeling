{"instance_id": "django__django-13837", "score": "C", "diff": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f881..394fba2ecf 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,14 +216,19 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    \n+    # Check if Python was started with -m flag\n+    # According to the Python documentation, __main__.__spec__ is not None\n+    # if and only if Python was launched with -m or the name of a directory/zipfile\n+    main_spec = getattr(__main__, '__spec__', None)\n+    if main_spec is not None and hasattr(main_spec, 'parent') and main_spec.parent:\n+        # __main__.__spec__.parent exists and is the package name passed to -m\n+        # The server was started with `python -m <package>`.\n+        args += ['-m', main_spec.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\ndiff --git a/myapp/__init__.py b/myapp/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/myapp/__main__.py b/myapp/__main__.py\nnew file mode 100644\nindex 0000000000..8e755ec8ad\n--- /dev/null\n+++ b/myapp/__main__.py\n@@ -0,0 +1,14 @@\n+\"\"\"Test __main__ for myapp package\"\"\"\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+import __main__\n+print(\"In myapp.__main__:\")\n+print(\"__main__.__spec__:\", getattr(__main__, '__spec__', None))\n+if hasattr(__main__, '__spec__') and __main__.__spec__:\n+    print(\"__main__.__spec__.parent:\", getattr(__main__.__spec__, 'parent', None))\n+    print(\"__main__.__spec__.name:\", getattr(__main__.__spec__, 'name', None))\n+\n+from django.utils.autoreload import get_child_arguments\n+args = get_child_arguments()\n+print(\"get_child_arguments():\", args)\ndiff --git a/test_autoreload.py b/test_autoreload.py\nnew file mode 100644\nindex 0000000000..e76328928f\n--- /dev/null\n+++ b/test_autoreload.py\n@@ -0,0 +1,54 @@\n+\"\"\"Test script to understand how get_child_arguments works\"\"\"\n+import sys\n+import os\n+\n+# Add Django to path\n+sys.path.insert(0, '/testbed')\n+\n+# Test current implementation\n+from django.utils.autoreload import get_child_arguments\n+\n+print(\"Testing current get_child_arguments implementation:\")\n+print(\"sys.argv:\", sys.argv)\n+print(\"sys.executable:\", sys.executable)\n+\n+# Mock __main__ module to test behavior\n+import types\n+main_module = types.ModuleType('__main__')\n+\n+# Test case 1: Simulate python -m django\n+print(\"\\nTest case 1: Simulating python -m django\")\n+sys.modules['__main__'] = main_module\n+main_module.__file__ = '/testbed/django/__main__.py'\n+main_module.__spec__ = types.SimpleNamespace(parent='django')\n+sys.argv = ['django', 'runserver']\n+\n+try:\n+    args = get_child_arguments()\n+    print(\"Result:\", args)\n+except Exception as e:\n+    print(\"Error:\", e)\n+\n+# Test case 2: Simulate python -m myapp\n+print(\"\\nTest case 2: Simulating python -m myapp\")\n+main_module.__file__ = '/some/path/myapp/__main__.py'\n+main_module.__spec__ = types.SimpleNamespace(parent='myapp')\n+sys.argv = ['myapp', 'runserver']\n+\n+try:\n+    args = get_child_arguments()\n+    print(\"Result:\", args)\n+except Exception as e:\n+    print(\"Error:\", e)\n+\n+# Test case 3: Regular script execution\n+print(\"\\nTest case 3: Regular script execution\")\n+main_module.__file__ = '/some/path/script.py'\n+main_module.__spec__ = None\n+sys.argv = ['/some/path/script.py', 'runserver']\n+\n+try:\n+    args = get_child_arguments()\n+    print(\"Result:\", args)\n+except Exception as e:\n+    print(\"Error:\", e)\ndiff --git a/test_autoreload_new.py b/test_autoreload_new.py\nnew file mode 100644\nindex 0000000000..69d71e0e8b\n--- /dev/null\n+++ b/test_autoreload_new.py\n@@ -0,0 +1,91 @@\n+\"\"\"Test script to understand how get_child_arguments works\"\"\"\n+import sys\n+import os\n+\n+# Add Django to path\n+sys.path.insert(0, '/testbed')\n+\n+# First let's check what the actual __main__ looks like\n+print(\"Actual __main__ module info:\")\n+import __main__\n+print(\"__main__.__spec__:\", getattr(__main__, '__spec__', 'Not found'))\n+if hasattr(__main__, '__spec__') and __main__.__spec__:\n+    print(\"__main__.__spec__.parent:\", getattr(__main__.__spec__, 'parent', 'Not found'))\n+\n+# Test current implementation\n+from django.utils.autoreload import get_child_arguments\n+\n+print(\"\\nTesting get_child_arguments implementation:\")\n+print(\"sys.argv:\", sys.argv)\n+print(\"sys.executable:\", sys.executable)\n+\n+# Mock __main__ module to test behavior\n+import types\n+\n+# Save original __main__\n+orig_main = sys.modules['__main__']\n+\n+# Test case 1: Simulate python -m django\n+print(\"\\nTest case 1: Simulating python -m django\")\n+main_module = types.ModuleType('__main__')\n+sys.modules['__main__'] = main_module\n+main_module.__file__ = '/testbed/django/__main__.py'\n+main_module.__spec__ = types.SimpleNamespace(parent='django')\n+sys.argv = ['django', 'runserver']\n+\n+try:\n+    args = get_child_arguments()\n+    print(\"Result:\", args)\n+    print(\"Expected: [sys.executable, '-m', 'django', 'runserver']\")\n+except Exception as e:\n+    print(\"Error:\", e)\n+    import traceback\n+    traceback.print_exc()\n+\n+# Test case 2: Simulate python -m myapp\n+print(\"\\nTest case 2: Simulating python -m myapp\")\n+main_module.__file__ = '/some/path/myapp/__main__.py'\n+main_module.__spec__ = types.SimpleNamespace(parent='myapp')\n+sys.argv = ['myapp', 'runserver']\n+\n+try:\n+    args = get_child_arguments()\n+    print(\"Result:\", args)\n+    print(\"Expected: [sys.executable, '-m', 'myapp', 'runserver']\")\n+except Exception as e:\n+    print(\"Error:\", e)\n+    import traceback\n+    traceback.print_exc()\n+\n+# Test case 3: Regular script execution (no -m)\n+print(\"\\nTest case 3: Regular script execution (no -m)\")\n+main_module.__file__ = '/testbed/test_autoreload_new.py'\n+main_module.__spec__ = None\n+sys.argv = ['/testbed/test_autoreload_new.py', 'runserver']\n+\n+try:\n+    args = get_child_arguments()\n+    print(\"Result:\", args)\n+    print(\"Expected: [sys.executable, '/testbed/test_autoreload_new.py', 'runserver']\")\n+except Exception as e:\n+    print(\"Error:\", e)\n+    import traceback\n+    traceback.print_exc()\n+\n+# Test case 4: Simulate python -m with directory (spec.parent is empty string)\n+print(\"\\nTest case 4: Simulating python -m with directory (spec.parent is empty string)\")\n+main_module.__file__ = '/some/dir/__main__.py'\n+main_module.__spec__ = types.SimpleNamespace(parent='')\n+sys.argv = ['__main__', 'runserver']\n+\n+try:\n+    args = get_child_arguments()\n+    print(\"Result:\", args)\n+    print(\"Expected: [sys.executable, '__main__', 'runserver']\")\n+except Exception as e:\n+    print(\"Error:\", e)\n+    import traceback\n+    traceback.print_exc()\n+\n+# Restore original __main__\n+sys.modules['__main__'] = orig_main\ndiff --git a/test_real_django.py b/test_real_django.py\nnew file mode 100644\nindex 0000000000..091bb7f964\n--- /dev/null\n+++ b/test_real_django.py\n@@ -0,0 +1,15 @@\n+\"\"\"Test get_child_arguments by inspecting the __main__ module when running with -m\"\"\"\n+import sys\n+\n+# Add Django to path\n+sys.path.insert(0, '/testbed')\n+\n+import __main__\n+print(\"__main__.__spec__:\", getattr(__main__, '__spec__', None))\n+if hasattr(__main__, '__spec__') and __main__.__spec__:\n+    print(\"__main__.__spec__.parent:\", getattr(__main__.__spec__, 'parent', None))\n+    print(\"__main__.__spec__.name:\", getattr(__main__.__spec__, 'name', None))\n+\n+from django.utils.autoreload import get_child_arguments\n+args = get_child_arguments()\n+print(\"get_child_arguments():\", args)\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b9f2db7276..baa578a4d1 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -160,10 +160,14 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n-        self.assertEqual(\n-            autoreload.get_child_arguments(),\n-            [sys.executable, '-m', 'django', 'runserver']\n-        )\n+        # Mock __main__ module to simulate python -m django\n+        main_module = types.ModuleType('__main__')\n+        main_module.__spec__ = types.SimpleNamespace(parent='django')\n+        with mock.patch.dict(sys.modules, {'__main__': main_module}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'django', 'runserver']\n+            )\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n@@ -173,6 +177,35 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', ['myapp', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        \"\"\"Test running a non-Django module with -m flag.\"\"\"\n+        # Mock __main__ module to simulate python -m myapp\n+        main_module = types.ModuleType('__main__')\n+        main_module.__spec__ = types.SimpleNamespace(parent='myapp')\n+        with mock.patch.dict(sys.modules, {'__main__': main_module}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'myapp', 'runserver']\n+            )\n+\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_regular_script(self):\n+        \"\"\"Test running a regular script without -m flag.\"\"\"\n+        # Mock __main__ module to simulate regular script execution\n+        main_module = types.ModuleType('__main__')\n+        main_module.__spec__ = None  # No spec when not using -m\n+        with tempfile.TemporaryDirectory() as tmpdir:\n+            script_path = Path(tmpdir) / 'test_script.py'\n+            script_path.touch()\n+            with mock.patch('sys.argv', [str(script_path), 'runserver']):\n+                with mock.patch.dict(sys.modules, {'__main__': main_module}):\n+                    self.assertEqual(\n+                        autoreload.get_child_arguments(),\n+                        [sys.executable, str(script_path), 'runserver']\n+                    )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -446,10 +479,14 @@ class RestartWithReloaderTests(SimpleTestCase):\n         main = '/usr/lib/pythonX.Y/site-packages/django/__main__.py'\n         argv = [main, 'runserver']\n         mock_call = self.patch_autoreload(argv)\n-        with mock.patch('django.__main__.__file__', main):\n-            autoreload.restart_with_reloader()\n-            self.assertEqual(mock_call.call_count, 1)\n-            self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n+        # Mock __main__ module to simulate python -m django\n+        main_module = types.ModuleType('__main__')\n+        main_module.__spec__ = types.SimpleNamespace(parent='django')\n+        with mock.patch.dict(sys.modules, {'__main__': main_module}):\n+            with mock.patch('django.__main__.__file__', main):\n+                autoreload.restart_with_reloader()\n+                self.assertEqual(mock_call.call_count, 1)\n+                self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n \n \n class ReloaderTests(SimpleTestCase):\n", "gold_standard_diff": "From ec6d2531c59466924b645f314ac33f54470d7ac3 Mon Sep 17 00:00:00 2001\nFrom: William Schwartz <wkschwartz@gmail.com>\nDate: Mon, 4 Jan 2021 08:50:49 -0600\nSubject: [PATCH] Fixed #32314 -- Fixed detection when started non-django\n modules with \"python -m\" in autoreloader.\n\ndjango.utils.autoreload.get_child_arguments() detected when Python was\nstarted with the `-m` option only for `django` module. This commit\nchanges the logic to check __spec__, see\nhttps://docs.python.org/3/reference/import.html#main-spec\n\nNow packages can implement their own __main__ with the runserver\ncommand.\n---\n django/utils/autoreload.py                | 10 +++++-----\n tests/utils_tests/test_autoreload.py      | 14 +++++++++++++-\n tests/utils_tests/test_module/__main__.py |  0\n 3 files changed, 18 insertions(+), 6 deletions(-)\n create mode 100644 tests/utils_tests/test_module/__main__.py\n\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f88148..faa3252c71d4 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,14 +216,14 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    if __main__.__spec__ is not None and __main__.__spec__.parent:\n+        args += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b9f2db727637..a43d7c2fded2 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -23,6 +23,7 @@\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n+from .test_module import __main__ as test_main\n from .utils import on_macos_with_hfs\n \n \n@@ -157,6 +158,7 @@ def test_path_with_embedded_null_bytes(self):\n \n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n@@ -165,6 +167,15 @@ def test_run_as_module(self):\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -447,7 +458,8 @@ def test_python_m_django(self):\n         argv = [main, 'runserver']\n         mock_call = self.patch_autoreload(argv)\n         with mock.patch('django.__main__.__file__', main):\n-            autoreload.restart_with_reloader()\n+            with mock.patch.dict(sys.modules, {'__main__': django.__main__}):\n+                autoreload.restart_with_reloader()\n             self.assertEqual(mock_call.call_count, 1)\n             self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n \ndiff --git a/tests/utils_tests/test_module/__main__.py b/tests/utils_tests/test_module/__main__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13837"}