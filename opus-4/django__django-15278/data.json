{"instance_id": "django__django-15278", "score": "C", "diff": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6752a8e3c0..098d54b810 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -327,7 +327,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         # Fields with default values cannot by handled by ALTER TABLE ADD\n         # COLUMN statement because DROP DEFAULT is not supported in\n         # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        # Fields with UNIQUE constraint cannot be added by ALTER TABLE ADD\n+        # COLUMN on SQLite.\n+        if not field.null or self.effective_default(field) is not None or field.unique:\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n", "gold_standard_diff": "From dbd486aca29dc15e14306d34e2ce30c9bd7a79fe Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Mon, 3 Jan 2022 20:55:55 +0100\nSubject: [PATCH] Fixed #33408 -- Fixed adding primary keys/unique fields on\n SQLite.\n\nRegression in 2f73e5406d54cb8945e187eff302a3a3373350be.\n\nThanks Alan Crosswell for the report.\n---\n django/db/backends/sqlite3/schema.py | 13 +++++++++----\n tests/schema/tests.py                | 12 ++++++++++++\n 2 files changed, 21 insertions(+), 4 deletions(-)\n\ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6752a8e3c0b5..3ff0a3f7dbc1 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -324,10 +324,15 @@ def delete_model(self, model, handle_autom2m=True):\n \n     def add_field(self, model, field):\n         \"\"\"Create a field on a model.\"\"\"\n-        # Fields with default values cannot by handled by ALTER TABLE ADD\n-        # COLUMN statement because DROP DEFAULT is not supported in\n-        # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        if (\n+            # Primary keys and unique fields are not supported in ALTER TABLE\n+            # ADD COLUMN.\n+            field.primary_key or field.unique or\n+            # Fields with default values cannot by handled by ALTER TABLE ADD\n+            # COLUMN statement because DROP DEFAULT is not supported in\n+            # ALTER TABLE.\n+            not field.null or self.effective_default(field) is not None\n+        ):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex cd6a52f6af9e..60e69503cc6e 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,6 +624,18 @@ def get_prep_value(self, value):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n+\n     def test_add_field_binary(self):\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15278"}