{"instance_id": "pylint-dev__pylint-4604", "score": "I", "diff": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd599..dbd885dab 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1826,6 +1826,14 @@ class VariablesChecker(BaseChecker):\n             self._type_annotation_names.append(type_annotation.name)\n             return\n \n+        if isinstance(type_annotation, astroid.Attribute):\n+            # Handle attribute access like abc.ABC\n+            if isinstance(type_annotation.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.expr.name)\n+            # Continue processing to handle nested attributes\n+            self._store_type_annotation_node(type_annotation.expr)\n+            return\n+\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n \ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..194d34075\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,25 @@\n+\"\"\"Test various type comment scenarios.\"\"\"\n+\n+import abc\n+from abc import ABC\n+import typing\n+from typing import Dict, List\n+import collections.abc\n+\n+# Test case 1: Module.Attribute type comment\n+X = ...  # type: abc.ABC\n+\n+# Test case 2: Direct imported class \n+Y = ...  # type: ABC\n+\n+# Test case 3: Nested attributes \n+Z = ...  # type: collections.abc.Mapping\n+\n+# Test case 4: typing module\n+T = ...  # type: typing.Dict[str, int]\n+\n+# Test case 5: imported from typing\n+U = ...  # type: Dict[str, List[int]]\n+\n+# Test case 6: Multiple levels of attributes (even though this might not be valid in practice)\n+# V = ...  # type: some.deep.module.Class\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 000000000..0df881939\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,7 @@\n+\"\"\"Docstring.\"\"\"\n+\n+import abc\n+from abc import ABC\n+\n+X = ...  # type: abc.ABC\n+Y = ...  # type: ABC\n", "gold_standard_diff": "diff --git a/CONTRIBUTORS.txt b/CONTRIBUTORS.txt\nindex b1de7ff30e..05e4a31e18 100644\n--- a/CONTRIBUTORS.txt\n+++ b/CONTRIBUTORS.txt\n@@ -503,3 +503,5 @@ contributors:\n * Markus Siebenhaar: contributor\n \n * Lorena Buciu (lorena-b): contributor\n+\n+* Sergei Lebedev (superbobry): contributor\ndiff --git a/ChangeLog b/ChangeLog\nindex c2b1382d7a..4ffa5a8414 100644\n--- a/ChangeLog\n+++ b/ChangeLog\n@@ -171,6 +171,11 @@ Closes #4555\n \n   Closes #4023\n \n+* Fix ``unused-import`` false positive for imported modules referenced in\n+  attribute lookups in type comments.\n+\n+  Closes #4603\n+\n \n What's New in Pylint 2.8.3?\n ===========================\ndiff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 3ddafd5994..8a46375097 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1826,6 +1826,10 @@ def _store_type_annotation_node(self, type_annotation):\n             self._type_annotation_names.append(type_annotation.name)\n             return\n \n+        if isinstance(type_annotation, astroid.Attribute):\n+            self._store_type_annotation_node(type_annotation.expr)\n+            return\n+\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n \ndiff --git a/pylint/constants.py b/pylint/constants.py\nindex b95d701c04..786cde7d02 100644\n--- a/pylint/constants.py\n+++ b/pylint/constants.py\n@@ -1,6 +1,7 @@\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/master/LICENSE\n \n+import platform\n import sys\n \n import astroid\n@@ -11,6 +12,7 @@\n PY39_PLUS = sys.version_info[:2] >= (3, 9)\n PY310_PLUS = sys.version_info[:2] >= (3, 10)\n \n+IS_PYPY = platform.python_implementation() == \"PyPy\"\n \n PY_EXTS = (\".py\", \".pyc\", \".pyo\", \".pyw\", \".so\", \".dll\")\n \ndiff --git a/tests/checkers/unittest_variables.py b/tests/checkers/unittest_variables.py\nindex 90daa8d5d1..2a590708d9 100644\n--- a/tests/checkers/unittest_variables.py\n+++ b/tests/checkers/unittest_variables.py\n@@ -21,11 +21,13 @@\n import os\n import re\n import sys\n+import unittest\n from pathlib import Path\n \n import astroid\n \n from pylint.checkers import variables\n+from pylint.constants import IS_PYPY\n from pylint.interfaces import UNDEFINED\n from pylint.testutils import CheckerTestCase, Message, linter, set_config\n \n@@ -191,6 +193,24 @@ def my_method(self) -> MyType:\n         with self.assertNoMessages():\n             self.walk(module)\n \n+    @unittest.skipIf(IS_PYPY, \"PyPy does not parse type comments\")\n+    def test_attribute_in_type_comment(self):\n+        \"\"\"Ensure attribute lookups in type comments are accounted for.\n+\n+        https://github.com/PyCQA/pylint/issues/4603\n+        \"\"\"\n+        module = astroid.parse(\n+            \"\"\"\n+        import foo\n+        from foo import Bar, Boo\n+        a = ... # type: foo.Bar\n+        b = ... # type: foo.Bar[Boo]\n+        c = ... # type: Bar.Boo\n+        \"\"\"\n+        )\n+        with self.assertNoMessages():\n+            self.walk(module)\n+\n \n class TestVariablesCheckerWithTearDown(CheckerTestCase):\n \n", "gold_standard_pr_link": "https://github.com/pylint-dev/pylint/pull/4604"}