diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..3882c48841 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -382,6 +382,11 @@ class BaseDatabaseSchemaEditor:
         for fields in news.difference(olds):
             columns = [model._meta.get_field(field).column for field in fields]
             self.execute(self._create_unique_sql(model, columns))
+        # Check for any remaining unique constraints that need to be recreated
+        for fields in olds.intersection(news):
+            self._delete_composed_index(model, fields, {'unique': True}, self.sql_delete_unique)
+            columns = [model._meta.get_field(field).column for field in fields]
+            self.execute(self._create_unique_sql(model, columns))
 
     def alter_index_together(self, model, old_index_together, new_index_together):
         """
@@ -398,6 +403,11 @@ class BaseDatabaseSchemaEditor:
         for field_names in news.difference(olds):
             fields = [model._meta.get_field(field) for field in field_names]
             self.execute(self._create_index_sql(model, fields, suffix="_idx"))
+        # Check for any remaining indexes that need to be recreated
+        for fields in olds.intersection(news):
+            self._delete_composed_index(model, fields, {'index': True}, self.sql_delete_index)
+            fields_objs = [model._meta.get_field(field) for field in fields]
+            self.execute(self._create_index_sql(model, fields_objs, suffix="_idx"))
 
     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
@@ -407,13 +417,13 @@ class BaseDatabaseSchemaEditor:
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
-        if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
+        if len(constraint_names) == 0:
+            raise ValueError("Found no constraints for %s(%s)" % (
                 model._meta.db_table,
                 ", ".join(columns),
             ))
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+        for constraint_name in constraint_names:
+            self.execute(self._delete_constraint_sql(sql, model, constraint_name))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
