{"instance_id": "pytest-dev__pytest-7236", "score": "I", "diff": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545af..f870cde5a 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -98,7 +98,7 @@ def _make_xunit_fixture(obj, setup_name, teardown_name, scope, pass_self):\n             else:\n                 setup()\n         yield\n-        if teardown is not None:\n+        if teardown is not None and not getattr(self, \"__unittest_skip__\", None):\n             if pass_self:\n                 teardown(self, request.function)\n             else:\n@@ -210,6 +210,12 @@ class TestCaseFunction(Function):\n \n         maybe_wrap_pytest_function_for_tracing(self)\n \n+        # Check if the test is skipped\n+        if getattr(self._testcase, \"__unittest_skip__\", False):\n+            reason = getattr(self._testcase, \"__unittest_skip_why__\", \"\")\n+            pytest.skip(reason)\n+            return\n+\n         # let the unittest framework handle async functions\n         if is_async_function(self.obj):\n             self._testcase(self)\n@@ -231,6 +237,9 @@ class TestCaseFunction(Function):\n                 self._testcase(result=self)\n             finally:\n                 delattr(self._testcase, self.name)\n+                if self.config.getoption(\"usepdb\"):\n+                    self._testcase.tearDown = self._explicit_tearDown\n+                    self._explicit_tearDown = None\n \n     def _prunetraceback(self, excinfo):\n         Function._prunetraceback(self, excinfo)\n", "gold_standard_diff": "From ab60a31965bc9a4bcbae88c1fb36be317e336a14 Mon Sep 17 00:00:00 2001\nFrom: Bruno Oliveira <nicoddemus@gmail.com>\nDate: Thu, 21 May 2020 16:50:58 -0300\nSubject: [PATCH] Do not call TestCase.tearDown for skipped tests\n\nFix #7215\n---\n changelog/7215.bugfix.rst |  2 ++\n src/_pytest/unittest.py   | 11 ++++++++---\n testing/test_unittest.py  | 34 ++++++++++++++++++++++++++++++++++\n 3 files changed, 44 insertions(+), 3 deletions(-)\n create mode 100644 changelog/7215.bugfix.rst\n\ndiff --git a/changelog/7215.bugfix.rst b/changelog/7215.bugfix.rst\nnew file mode 100644\nindex 00000000000..81514913285\n--- /dev/null\n+++ b/changelog/7215.bugfix.rst\n@@ -0,0 +1,2 @@\n+Fix regression where running with ``--pdb`` would call the ``tearDown`` methods of ``unittest.TestCase``\n+subclasses for skipped tests.\ndiff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545af2e..0d9133f6023 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -41,7 +41,7 @@ def collect(self):\n         if not getattr(cls, \"__test__\", True):\n             return\n \n-        skipped = getattr(cls, \"__unittest_skip__\", False)\n+        skipped = _is_skipped(cls)\n         if not skipped:\n             self._inject_setup_teardown_fixtures(cls)\n             self._inject_setup_class_fixture()\n@@ -89,7 +89,7 @@ def _make_xunit_fixture(obj, setup_name, teardown_name, scope, pass_self):\n \n     @pytest.fixture(scope=scope, autouse=True)\n     def fixture(self, request):\n-        if getattr(self, \"__unittest_skip__\", None):\n+        if _is_skipped(self):\n             reason = self.__unittest_skip_why__\n             pytest.skip(reason)\n         if setup is not None:\n@@ -220,7 +220,7 @@ def runtest(self):\n             # arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n@@ -301,3 +301,8 @@ def check_testcase_implements_trial_reporter(done=[]):\n \n     classImplements(TestCaseFunction, IReporter)\n     done.append(1)\n+\n+\n+def _is_skipped(obj) -> bool:\n+    \"\"\"Return True if the given object has been marked with @unittest.skip\"\"\"\n+    return bool(getattr(obj, \"__unittest_skip__\", False))\ndiff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 83f1b6b2a85..74a36c41bc0 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1193,6 +1193,40 @@ def test_2(self):\n     ]\n \n \n+@pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\n+def test_pdb_teardown_skipped(testdir, monkeypatch, mark):\n+    \"\"\"\n+    With --pdb, setUp and tearDown should not be called for skipped tests.\n+    \"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"test_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.test_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.test_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            {mark}(\"skipped for reasons\")\n+            def test_1(self):\n+                pass\n+\n+    \"\"\".format(\n+            mark=mark\n+        )\n+    )\n+    result = testdir.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(testdir):\n     pytest.importorskip(\"unittest.async_case\")\n \n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/7236"}