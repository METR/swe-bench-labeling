{"instance_id": "sphinx-doc__sphinx-11445", "score": "I", "diff": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..233a648dc 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -25,7 +25,7 @@ except ImportError:\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+docinfo_re = re.compile(':\\\\w+:\\\\s.*')\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -85,12 +85,29 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n             else:\n                 break\n \n-        if pos > 0:\n-            # insert a blank line after docinfo\n+        # Check if the first non-docinfo lines form a section heading\n+        # A section heading consists of a title line followed by an underline\n+        if pos < len(content) - 1:\n+            title_line = content[pos] if pos < len(content) else ''\n+            underline_line = content[pos + 1] if pos + 1 < len(content) else ''\n+            \n+            # Check if this is a section heading\n+            if (title_line and underline_line and \n+                len(set(underline_line)) == 1 and  # All chars are the same\n+                underline_line[0] in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' and  # Valid section char\n+                len(underline_line) >= len(title_line)):  # Underline is long enough\n+                # This is a section heading, insert after it\n+                pos += 2\n+                # Skip any blank lines after the heading\n+                while pos < len(content) and not content[pos].strip():\n+                    pos += 1\n+\n+        if pos > 0 and (pos >= len(content) or content[pos - 1].strip()):\n+            # insert a blank line after docinfo or heading\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n \n-        # insert prolog (after docinfo if exists)\n+        # insert prolog (after docinfo/heading if exists)\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \ndiff --git a/test_docinfo.py b/test_docinfo.py\nnew file mode 100644\nindex 000000000..5bbc30a82\n--- /dev/null\n+++ b/test_docinfo.py\n@@ -0,0 +1,17 @@\n+\"\"\"Test docinfo regex\"\"\"\n+import re\n+\n+docinfo_re = re.compile(':\\\\w+:\\\\s.*')\n+\n+test_cases = [\n+    \":mod:`mypackage2`\",  # This is a role, not docinfo\n+    \":Author: John Doe\",  # This is docinfo\n+    \":Version: 1.0\",      # This is docinfo\n+    \":Date: 2023-01-01\",  # This is docinfo\n+    \"Normal text\",        # Not docinfo\n+    \":func:`test`\",       # This is a role, not docinfo\n+]\n+\n+for test in test_cases:\n+    match = docinfo_re.match(test)\n+    print(f\"{test:30} -> {'MATCH' if match else 'NO MATCH'}\")\ndiff --git a/test_docinfo_debug.py b/test_docinfo_debug.py\nnew file mode 100644\nindex 000000000..c739ab4a0\n--- /dev/null\n+++ b/test_docinfo_debug.py\n@@ -0,0 +1,24 @@\n+\"\"\"Debug docinfo case\"\"\"\n+from docutils.statemachine import StringList\n+from sphinx.util.rst import prepend_prolog\n+\n+content = StringList([\n+    ':Author: John Doe',\n+    ':Date: 2023-01-01',\n+    '',\n+    ':mod:`mypackage`',\n+    '================',\n+    '',\n+    'Content'\n+], 'test.rst')\n+\n+print(\"Before prepending:\")\n+for i, line in enumerate(content):\n+    print(f\"{i}: {repr(line)}\")\n+\n+prolog = '.. |psf| replace:: Python Software Foundation'\n+prepend_prolog(content, prolog)\n+\n+print(\"\\nAfter prepending:\")\n+for i, line in enumerate(content):\n+    print(f\"{i}: {repr(line)}\")\ndiff --git a/test_heading_detection.py b/test_heading_detection.py\nnew file mode 100644\nindex 000000000..3ee963fa3\n--- /dev/null\n+++ b/test_heading_detection.py\n@@ -0,0 +1,43 @@\n+\"\"\"Test to understand section heading detection\"\"\"\n+import re\n+\n+# Test various patterns\n+test_cases = [\n+    # (title_line, underline_line, expected_result)\n+    (\":mod:`mypackage2`\", \"=================\", True),\n+    (\"Simple Title\", \"============\", True),\n+    (\"Another Title\", \"-------------\", True),\n+    (\":mod:`test`\", \"===========\", True),\n+    (\"\", \"=================\", False),  # Empty title\n+    (\"Title\", \"===\", False),  # Underline too short\n+    (\"Title\", \"=================\", True),  # Underline longer than title\n+]\n+\n+def is_section_heading(title_line, underline_line):\n+    \"\"\"Check if two lines form a section heading\"\"\"\n+    if not title_line or not underline_line:\n+        return False\n+    \n+    # Check if underline consists of only section characters\n+    if not underline_line:\n+        return False\n+    \n+    # Common section characters in reST\n+    section_chars = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n+    \n+    # Check if all characters in underline are the same and are section chars\n+    if len(set(underline_line)) != 1:\n+        return False\n+    \n+    if underline_line[0] not in section_chars:\n+        return False\n+    \n+    # Check if underline is at least as long as the title\n+    # (accounting for markup like :mod:`...`)\n+    return len(underline_line) >= len(title_line)\n+\n+print(\"Testing section heading detection:\")\n+for title, underline, expected in test_cases:\n+    result = is_section_heading(title, underline)\n+    status = \"\u2713\" if result == expected else \"\u2717\"\n+    print(f\"{status} '{title}' / '{underline}' -> {result} (expected {expected})\")\ndiff --git a/test_heading_with_domain_directive.py b/test_heading_with_domain_directive.py\nnew file mode 100644\nindex 000000000..1571a0688\n--- /dev/null\n+++ b/test_heading_with_domain_directive.py\n@@ -0,0 +1,81 @@\n+\"\"\"Test for the fix of domain directive headings with rst_prolog\"\"\"\n+from docutils.statemachine import StringList\n+from sphinx.util.rst import prepend_prolog\n+\n+def test_domain_directive_heading_with_prolog():\n+    \"\"\"Test that rst_prolog doesn't break headings with domain directives.\"\"\"\n+    # Test case 1: heading with :mod: directive\n+    content = StringList([\n+        ':mod:`mypackage`',\n+        '================',\n+        '',\n+        'Content here'\n+    ], 'test.rst')\n+    \n+    prolog = '.. |psf| replace:: Python Software Foundation'\n+    prepend_prolog(content, prolog)\n+    \n+    # The prolog should be inserted after the heading, not in the middle\n+    assert content[0] == ':mod:`mypackage`'\n+    assert content[1] == '================'\n+    assert content[2] == ''\n+    assert content[3] == '.. |psf| replace:: Python Software Foundation'\n+    assert content[4] == ''\n+    assert content[5] == 'Content here'\n+    \n+    # Test case 2: heading with :func: directive\n+    content2 = StringList([\n+        ':func:`my_function`',\n+        '===================',\n+        '',\n+        'Function docs'\n+    ], 'test.rst')\n+    \n+    prepend_prolog(content2, prolog)\n+    \n+    assert content2[0] == ':func:`my_function`'\n+    assert content2[1] == '==================='\n+    assert content2[2] == ''\n+    assert content2[3] == '.. |psf| replace:: Python Software Foundation'\n+    \n+    # Test case 3: normal heading (should still work)\n+    content3 = StringList([\n+        'Normal Heading',\n+        '==============',\n+        '',\n+        'Content'\n+    ], 'test.rst')\n+    \n+    prepend_prolog(content3, prolog)\n+    \n+    assert content3[0] == 'Normal Heading'\n+    assert content3[1] == '=============='\n+    assert content3[2] == ''\n+    assert content3[3] == '.. |psf| replace:: Python Software Foundation'\n+    \n+    # Test case 4: document with docinfo\n+    content4 = StringList([\n+        ':Author: John Doe',\n+        ':Date: 2023-01-01',\n+        '',\n+        ':mod:`mypackage`',\n+        '================',\n+        '',\n+        'Content'\n+    ], 'test.rst')\n+    \n+    prepend_prolog(content4, prolog)\n+    \n+    # Prolog should be after docinfo but before heading\n+    assert content4[0] == ':Author: John Doe'\n+    assert content4[1] == ':Date: 2023-01-01'\n+    assert content4[2] == ''\n+    assert content4[3] == '.. |psf| replace:: Python Software Foundation'\n+    assert content4[4] == ''\n+    assert content4[5] == ':mod:`mypackage`'\n+    assert content4[6] == '================'\n+    \n+    print(\"All tests passed!\")\n+\n+if __name__ == '__main__':\n+    test_domain_directive_heading_with_prolog()\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 000000000..57411bf8a\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,30 @@\n+\"\"\"Test script to debug the rst_prolog issue\"\"\"\n+from docutils.statemachine import StringList\n+\n+content = \"\"\":mod:`mypackage2`\n+=================\n+\n+Content\n+\n+Subheading\n+----------\n+\"\"\"\n+\n+prolog = \"\"\".. |psf| replace:: Python Software Foundation\n+\"\"\"\n+\n+# Create a StringList from the content\n+lines = content.strip().split('\\n')\n+string_list = StringList(lines, 'test.rst')\n+\n+print(\"Original content:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {line}\")\n+\n+# Now let's see what happens when we prepend prolog\n+from sphinx.util.rst import prepend_prolog\n+prepend_prolog(string_list, prolog)\n+\n+print(\"\\nContent after prepending prolog:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {line}\")\ndiff --git a/test_issue2.py b/test_issue2.py\nnew file mode 100644\nindex 000000000..623e1f273\n--- /dev/null\n+++ b/test_issue2.py\n@@ -0,0 +1,35 @@\n+\"\"\"Test script to debug the rst_prolog issue\"\"\"\n+from docutils.statemachine import StringList\n+\n+content = \"\"\":mod:`mypackage2`\n+=================\n+\n+Content\n+\n+Subheading\n+----------\n+\"\"\"\n+\n+prolog = \"\"\".. |psf| replace:: Python Software Foundation\n+\"\"\"\n+\n+# Create a StringList from the content\n+lines = content.strip().split('\\n')\n+string_list = StringList(lines, 'test.rst')\n+\n+print(\"Original content:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {repr(line)}\")\n+\n+# Reload the module to get our changes\n+import importlib\n+import sphinx.util.rst\n+importlib.reload(sphinx.util.rst)\n+from sphinx.util.rst import prepend_prolog\n+\n+# Now let's see what happens when we prepend prolog\n+prepend_prolog(string_list, prolog)\n+\n+print(\"\\nContent after prepending prolog:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {repr(line)}\")\ndiff --git a/test_issue3.py b/test_issue3.py\nnew file mode 100644\nindex 000000000..4504e2026\n--- /dev/null\n+++ b/test_issue3.py\n@@ -0,0 +1,47 @@\n+\"\"\"Test script to debug the rst_prolog issue - with debugging\"\"\"\n+from docutils.statemachine import StringList\n+\n+content = \"\"\":mod:`mypackage2`\n+=================\n+\n+Content\n+\n+Subheading\n+----------\n+\"\"\"\n+\n+prolog = \"\"\".. |psf| replace:: Python Software Foundation\n+\"\"\"\n+\n+# Create a StringList from the content\n+lines = content.strip().split('\\n')\n+string_list = StringList(lines, 'test.rst')\n+\n+print(\"Original content:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {repr(line)}\")\n+\n+# Let's manually check what our function should detect\n+pos = 0\n+if pos < len(string_list) - 1:\n+    title_line = string_list[pos]\n+    underline_line = string_list[pos + 1]\n+    print(f\"\\nChecking lines at pos={pos}:\")\n+    print(f\"  Title: {repr(title_line)}\")\n+    print(f\"  Underline: {repr(underline_line)}\")\n+    print(f\"  len(set(underline_line)): {len(set(underline_line))}\")\n+    print(f\"  underline_line[0]: {repr(underline_line[0])}\")\n+    print(f\"  len(underline_line) >= len(title_line): {len(underline_line)} >= {len(title_line)} = {len(underline_line) >= len(title_line)}\")\n+    \n+# Reload the module to get our changes\n+import importlib\n+import sphinx.util.rst\n+importlib.reload(sphinx.util.rst)\n+from sphinx.util.rst import prepend_prolog\n+\n+# Now let's see what happens when we prepend prolog\n+prepend_prolog(string_list, prolog)\n+\n+print(\"\\nContent after prepending prolog:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {repr(line)}\")\ndiff --git a/test_issue4.py b/test_issue4.py\nnew file mode 100644\nindex 000000000..a116e201d\n--- /dev/null\n+++ b/test_issue4.py\n@@ -0,0 +1,86 @@\n+\"\"\"Test script to debug the rst_prolog issue - with inline debug\"\"\"\n+from docutils.statemachine import StringList\n+\n+def prepend_prolog_debug(content: StringList, prolog: str) -> None:\n+    \"\"\"Prepend a string to content body as prolog.\"\"\"\n+    import re\n+    docinfo_re = re.compile(':\\\\w+:.*?')\n+    \n+    if prolog:\n+        pos = 0\n+        print(f\"DEBUG: Starting pos = {pos}\")\n+        for line in content:\n+            if docinfo_re.match(line):\n+                print(f\"DEBUG: Found docinfo line: {repr(line)}\")\n+                pos += 1\n+            else:\n+                print(f\"DEBUG: Not a docinfo line, breaking at: {repr(line)}\")\n+                break\n+        print(f\"DEBUG: After docinfo check, pos = {pos}\")\n+\n+        # Check if the first non-docinfo lines form a section heading\n+        # A section heading consists of a title line followed by an underline\n+        if pos < len(content) - 1:\n+            title_line = content[pos] if pos < len(content) else ''\n+            underline_line = content[pos + 1] if pos + 1 < len(content) else ''\n+            \n+            print(f\"DEBUG: Checking for section heading at pos={pos}\")\n+            print(f\"DEBUG:   title_line = {repr(title_line)}\")\n+            print(f\"DEBUG:   underline_line = {repr(underline_line)}\")\n+            \n+            # Check if this is a section heading\n+            if (title_line and underline_line and \n+                len(set(underline_line)) == 1 and  # All chars are the same\n+                underline_line[0] in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~' and  # Valid section char\n+                len(underline_line) >= len(title_line)):  # Underline is long enough\n+                # This is a section heading, insert after it\n+                print(f\"DEBUG: Detected section heading!\")\n+                pos += 2\n+                print(f\"DEBUG: pos after skipping heading = {pos}\")\n+                # Skip any blank lines after the heading\n+                while pos < len(content) and not content[pos].strip():\n+                    print(f\"DEBUG: Skipping blank line at pos={pos}\")\n+                    pos += 1\n+                print(f\"DEBUG: pos after skipping blanks = {pos}\")\n+            else:\n+                print(f\"DEBUG: Not a section heading\")\n+\n+        if pos > 0 and (pos >= len(content) or content[pos - 1].strip()):\n+            # insert a blank line after docinfo or heading\n+            print(f\"DEBUG: Inserting blank line at pos={pos}\")\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n+\n+        # insert prolog (after docinfo/heading if exists)\n+        print(f\"DEBUG: Inserting prolog at pos={pos}\")\n+        for lineno, line in enumerate(prolog.splitlines()):\n+            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+\n+        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+\n+content = \"\"\":mod:`mypackage2`\n+=================\n+\n+Content\n+\n+Subheading\n+----------\n+\"\"\"\n+\n+prolog = \"\"\".. |psf| replace:: Python Software Foundation\n+\"\"\"\n+\n+# Create a StringList from the content\n+lines = content.strip().split('\\n')\n+string_list = StringList(lines, 'test.rst')\n+\n+print(\"Original content:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {repr(line)}\")\n+\n+# Now let's see what happens when we prepend prolog\n+prepend_prolog_debug(string_list, prolog)\n+\n+print(\"\\nContent after prepending prolog:\")\n+for i, line in enumerate(string_list):\n+    print(f\"{i}: {repr(line)}\")\ndiff --git a/tox.ini b/tox.ini\nindex 512aa5f74..84c8093a3 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -24,7 +24,7 @@ setenv =\n     PYTHONWARNINGS = error\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:docs]\n basepython = python3\n", "gold_standard_diff": "From 593ec07613c33c5b827548c84c7db2cf935bcb2a Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?B=C3=A9n=C3=A9dikt=20Tran?=\n <10796600+picnixz@users.noreply.github.com>\nDate: Sun, 28 May 2023 20:39:41 +0200\nSubject: [PATCH 1/6] RST roles in titles render properly with ``rst_prolog``\n (#11437)\n\n---\n CHANGES                |  5 ++++\n sphinx/util/rst.py     | 14 ++++++++---\n tests/test_util_rst.py | 55 ++++++++++++++++++++++++++++++++++++++++++\n 3 files changed, 71 insertions(+), 3 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex e66f11cbf7e..fe5ac12ce36 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -35,6 +35,11 @@ Features added\n Bugs fixed\n ----------\n \n+* #11437: Top-level headings with RST roles at the beginning of an RST file\n+  render properly when :confval:`rst_prolog` is set. Users are not longer\n+  required to put an empty line at the beginning of the file.\n+  Patch by B\u00e9n\u00e9dikt Tran.\n+\n Testing\n --------\n \ndiff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325f1..96750fad283 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -86,9 +86,17 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n                 break\n \n         if pos > 0:\n-            # insert a blank line after docinfo\n-            content.insert(pos, '', '<generated>', 0)\n-            pos += 1\n+            if pos < len(content) and len(content[pos]) >= 6 and len(set(content[pos])) == 1:\n+                # This was actually a title starting with :role:`...` and not a docinfo,\n+                # in which case the prolog will be put at the beginning of the file.\n+                #\n+                # Note that the smallest \"role-like\" title requires at least 6 characters\n+                # and the sectioning characters must be repeated at least 6 times as well.\n+                pos = 0\n+            else:\n+                # insert a blank line after docinfo\n+                content.insert(pos, '', '<generated>', 0)\n+                pos += 1\n \n         # insert prolog (after docinfo if exists)\n         for lineno, line in enumerate(prolog.splitlines()):\ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 40a2ee68b5a..3088d03d978 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -78,6 +78,61 @@ def test_prepend_prolog_without_CR(app):\n                                       ('dummy.rst', 1, 'Sphinx is a document generator')]\n \n \n+def test_prepend_prolog_with_roles_in_sections(app):\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':title: test of SphinxFileInput',\n+                          ':author: Sphinx team',\n+                          '',  # this newline is required\n+                          ':mod:`foo`',\n+                          '----------',\n+                          '',\n+                          'hello'],\n+                         'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('dummy.rst', 0, ':title: test of SphinxFileInput'),\n+                                      ('dummy.rst', 1, ':author: Sphinx team'),\n+                                      ('<generated>', 0, ''),\n+                                      ('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, ':mod:`foo`'),\n+                                      ('dummy.rst', 4, '----------'),\n+                                      ('dummy.rst', 5, ''),\n+                                      ('dummy.rst', 6, 'hello')]\n+\n+\n+def test_prepend_prolog_with_roles_in_sections_with_CR(app):\n+    # prolog having CR at tail\n+    prolog = 'this is rst_prolog\\nhello reST!\\n'\n+    content = StringList([':mod:`foo`', '-' * 10, '', 'hello'], 'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`foo`'),\n+                                      ('dummy.rst', 1, '----------'),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello')]\n+\n+\n+def test_prepend_prolog_with_roles_in_sections_without_CR(app):\n+    # prolog not having CR at tail\n+    prolog = 'this is rst_prolog\\nhello reST!'\n+    content = StringList([':mod:`foo`', '-' * 10, '', 'hello'], 'dummy.rst')\n+    prepend_prolog(content, prolog)\n+\n+    assert list(content.xitems()) == [('<rst_prolog>', 0, 'this is rst_prolog'),\n+                                      ('<rst_prolog>', 1, 'hello reST!'),\n+                                      ('<generated>', 0, ''),\n+                                      ('dummy.rst', 0, ':mod:`foo`'),\n+                                      ('dummy.rst', 1, '----------'),\n+                                      ('dummy.rst', 2, ''),\n+                                      ('dummy.rst', 3, 'hello')]\n+\n+\n def test_textwidth():\n     assert textwidth('Hello') == 5\n     assert textwidth('\u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a') == 12\n\nFrom 3de9aaadcf7e5cc728804b4e2b3fb8f611d469c7 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?B=C3=A9n=C3=A9dikt=20Tran?=\n <10796600+picnixz@users.noreply.github.com>\nDate: Sun, 4 Jun 2023 10:12:04 +0200\nSubject: [PATCH 2/6] update CHANGES\n\n---\n CHANGES | 13 ++++++++++---\n 1 file changed, 10 insertions(+), 3 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex fe5ac12ce36..34cec11a8c1 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -35,9 +35,16 @@ Features added\n Bugs fixed\n ----------\n \n-* #11437: Top-level headings with RST roles at the beginning of an RST file\n-  render properly when :confval:`rst_prolog` is set. Users are not longer\n-  required to put an empty line at the beginning of the file.\n+* #11437: Top-level headings starting with an RST role reference now render\n+  properly when :confval:`rst_prolog` is set. Users are not longer required\n+  to put an empty line at the beginning of the file, i.e., the following\n+  construction is now properly rendered.\n+\n+  .. code-block:: rst\n+\n+     :mod:`foo` -- The foo module\n+     ============================\n+\n   Patch by B\u00e9n\u00e9dikt Tran.\n \n Testing\n\nFrom fcb4ffffe3090c65b8c6b7baa26b4481e095b936 Mon Sep 17 00:00:00 2001\nFrom: Adam Turner <9087854+aa-turner@users.noreply.github.com>\nDate: Sun, 23 Jul 2023 15:33:46 +0100\nSubject: [PATCH 3/6] Use the correct regular expression\n\n---\n sphinx/util/rst.py | 20 +++++++-------------\n 1 file changed, 7 insertions(+), 13 deletions(-)\n\ndiff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 96750fad283..68ee4773f75 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -10,6 +10,7 @@\n \n from docutils.parsers.rst import roles\n from docutils.parsers.rst.languages import en as english\n+from docutils.parsers.rst.states import Body\n from docutils.statemachine import StringList\n from docutils.utils import Reporter\n from jinja2 import Environment\n@@ -25,7 +26,7 @@\n \n logger = logging.getLogger(__name__)\n \n-docinfo_re = re.compile(':\\\\w+:.*?')\n+FIELD_NAME_RE = re.compile(Body.patterns['field_marker'])\n symbols_re = re.compile(r'([!-\\-/:-@\\[-`{-~])')  # symbols without dot(0x2e)\n SECTIONING_CHARS = ['=', '-', '~']\n \n@@ -80,25 +81,18 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n     if prolog:\n         pos = 0\n         for line in content:\n-            if docinfo_re.match(line):\n+            if FIELD_NAME_RE.match(line):\n                 pos += 1\n             else:\n                 break\n \n         if pos > 0:\n-            if pos < len(content) and len(content[pos]) >= 6 and len(set(content[pos])) == 1:\n-                # This was actually a title starting with :role:`...` and not a docinfo,\n-                # in which case the prolog will be put at the beginning of the file.\n-                #\n-                # Note that the smallest \"role-like\" title requires at least 6 characters\n-                # and the sectioning characters must be repeated at least 6 times as well.\n-                pos = 0\n-            else:\n-                # insert a blank line after docinfo\n-                content.insert(pos, '', '<generated>', 0)\n-                pos += 1\n+            # insert a blank line after docinfo\n+            content.insert(pos, '', '<generated>', 0)\n+            pos += 1\n \n         # insert prolog (after docinfo if exists)\n+        lineno = 0\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n\nFrom 6484b00ac0d4ce31cdea82451489939dde3ddec3 Mon Sep 17 00:00:00 2001\nFrom: Adam Turner <9087854+aa-turner@users.noreply.github.com>\nDate: Sun, 23 Jul 2023 15:33:58 +0100\nSubject: [PATCH 4/6] Rename tests\n\n---\n tests/test_util_rst.py | 8 ++++----\n 1 file changed, 4 insertions(+), 4 deletions(-)\n\ndiff --git a/tests/test_util_rst.py b/tests/test_util_rst.py\nindex 3088d03d978..d50c90c7b54 100644\n--- a/tests/test_util_rst.py\n+++ b/tests/test_util_rst.py\n@@ -103,8 +103,8 @@ def test_prepend_prolog_with_roles_in_sections(app):\n                                       ('dummy.rst', 6, 'hello')]\n \n \n-def test_prepend_prolog_with_roles_in_sections_with_CR(app):\n-    # prolog having CR at tail\n+def test_prepend_prolog_with_roles_in_sections_with_newline(app):\n+    # prologue with trailing line break\n     prolog = 'this is rst_prolog\\nhello reST!\\n'\n     content = StringList([':mod:`foo`', '-' * 10, '', 'hello'], 'dummy.rst')\n     prepend_prolog(content, prolog)\n@@ -118,8 +118,8 @@ def test_prepend_prolog_with_roles_in_sections_with_CR(app):\n                                       ('dummy.rst', 3, 'hello')]\n \n \n-def test_prepend_prolog_with_roles_in_sections_without_CR(app):\n-    # prolog not having CR at tail\n+def test_prepend_prolog_with_roles_in_sections_without_newline(app):\n+    # prologue with no trailing line break\n     prolog = 'this is rst_prolog\\nhello reST!'\n     content = StringList([':mod:`foo`', '-' * 10, '', 'hello'], 'dummy.rst')\n     prepend_prolog(content, prolog)\n\nFrom 13e86a8fa6f3e07b2b716bc32ab85cada2cdb5dc Mon Sep 17 00:00:00 2001\nFrom: Adam Turner <9087854+aa-turner@users.noreply.github.com>\nDate: Sun, 23 Jul 2023 15:34:06 +0100\nSubject: [PATCH 5/6] Update CHANGES entry\n\n---\n CHANGES | 17 ++++++++++-------\n 1 file changed, 10 insertions(+), 7 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 34cec11a8c1..9d8264873fb 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -35,15 +35,18 @@ Features added\n Bugs fixed\n ----------\n \n-* #11437: Top-level headings starting with an RST role reference now render\n-  properly when :confval:`rst_prolog` is set. Users are not longer required\n-  to put an empty line at the beginning of the file, i.e., the following\n-  construction is now properly rendered.\n+* #11437: Top-level headings starting with a reStructuredText role\n+  now render properly when :confval:`rst_prolog` is set.\n+  Previously, a file starting with the below would have\n+  improperly rendered due to where the prologue text\n+  was inserted into the document.\n \n-  .. code-block:: rst\n+  .. code:: rst\n \n-     :mod:`foo` -- The foo module\n-     ============================\n+     :mod:`lobster` -- The lobster module\n+     ====================================\n+\n+     ...\n \n   Patch by B\u00e9n\u00e9dikt Tran.\n \n\nFrom 8ec7542bb765974a0e9519a87b11b1334cbdb7cf Mon Sep 17 00:00:00 2001\nFrom: Adam Turner <9087854+aa-turner@users.noreply.github.com>\nDate: Sun, 23 Jul 2023 15:36:39 +0100\nSubject: [PATCH 6/6] Collapse Jinja2 block\n\n---\n sphinx/util/rst.py | 8 +-------\n 1 file changed, 1 insertion(+), 7 deletions(-)\n\ndiff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 68ee4773f75..c875ea5b54e 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -13,17 +13,11 @@\n from docutils.parsers.rst.states import Body\n from docutils.statemachine import StringList\n from docutils.utils import Reporter\n-from jinja2 import Environment\n+from jinja2 import Environment, pass_environment\n \n from sphinx.locale import __\n from sphinx.util import docutils, logging\n \n-try:\n-    from jinja2.utils import pass_environment\n-except ImportError:\n-    from jinja2 import environmentfilter as pass_environment\n-\n-\n logger = logging.getLogger(__name__)\n \n FIELD_NAME_RE = re.compile(Body.patterns['field_marker'])\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/11445"}