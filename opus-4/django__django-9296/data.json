{"instance_id": "django__django-9296", "score": "C", "diff": "diff --git a/django/core/paginator.py b/django/core/paginator.py\nindex 1f92da5d4f..089471130f 100644\n--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -106,6 +106,13 @@ class Paginator:\n         \"\"\"\n         return range(1, self.num_pages + 1)\n \n+    def __iter__(self):\n+        \"\"\"\n+        Iterate through all pages of the paginator.\n+        \"\"\"\n+        for page_num in self.page_range:\n+            yield self.page(page_num)\n+\n     def _check_object_list_is_ordered(self):\n         \"\"\"\n         Warn if self.object_list is unordered (typically a QuerySet).\ndiff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex ef6e355e8d..8713aaee95 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -265,6 +265,45 @@ class PaginationTests(SimpleTestCase):\n         \"\"\"\n         self.assertIsInstance(Paginator([1, 2, 3], 2).page_range, type(range(0)))\n \n+    def test_paginator_iteration(self):\n+        \"\"\"\n+        Paginator can be iterated to get all pages.\n+        \"\"\"\n+        # Test basic iteration\n+        items = list(range(1, 16))  # 15 items\n+        paginator = Paginator(items, 5)  # 5 items per page\n+        \n+        pages = list(paginator)\n+        self.assertEqual(len(pages), 3)\n+        \n+        # Check that we get Page objects with correct content\n+        self.assertEqual(pages[0].object_list, [1, 2, 3, 4, 5])\n+        self.assertEqual(pages[1].object_list, [6, 7, 8, 9, 10])\n+        self.assertEqual(pages[2].object_list, [11, 12, 13, 14, 15])\n+        \n+        # Check page numbers\n+        for i, page in enumerate(paginator, 1):\n+            self.assertEqual(page.number, i)\n+            from django.core.paginator import Page\n+            self.assertIsInstance(page, Page)\n+        \n+        # Test with orphans\n+        paginator2 = Paginator(list(range(1, 17)), 5, orphans=2)\n+        pages2 = list(paginator2)\n+        self.assertEqual(len(pages2), 3)\n+        self.assertEqual(len(pages2[2].object_list), 6)  # Last page has 6 items\n+        \n+        # Test empty paginator with allow_empty_first_page=True\n+        empty_paginator = Paginator([], 5)\n+        empty_pages = list(empty_paginator)\n+        self.assertEqual(len(empty_pages), 1)\n+        self.assertEqual(empty_pages[0].object_list, [])\n+        \n+        # Test empty paginator with allow_empty_first_page=False\n+        empty_paginator2 = Paginator([], 5, allow_empty_first_page=False)\n+        empty_pages2 = list(empty_paginator2)\n+        self.assertEqual(len(empty_pages2), 0)\n+\n     def test_get_page(self):\n         \"\"\"\n         Paginator.get_page() returns a valid page even with invalid page\n", "gold_standard_diff": "diff --git a/django/core/paginator.py b/django/core/paginator.py\nindex 1f92da5d4fdc..ec0ebe04039c 100644\n--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -34,6 +34,10 @@ def __init__(self, object_list, per_page, orphans=0,\n         self.orphans = int(orphans)\n         self.allow_empty_first_page = allow_empty_first_page\n \n+    def __iter__(self):\n+        for page_number in self.page_range:\n+            yield self.page(page_number)\n+\n     def validate_number(self, number):\n         \"\"\"Validate the given 1-based page number.\"\"\"\n         try:\ndiff --git a/docs/ref/paginator.txt b/docs/ref/paginator.txt\nindex 9ee6f0104cfa..877d6ba0d88a 100644\n--- a/docs/ref/paginator.txt\n+++ b/docs/ref/paginator.txt\n@@ -14,6 +14,13 @@ classes live in :source:`django/core/paginator.py`.\n \n .. class:: Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)\n \n+    A paginator acts like a sequence of :class:`Page` when using ``len()`` or\n+    iterating it directly.\n+\n+    .. versionchanged:: 3.1\n+\n+        Support for iterating over ``Paginator`` was added.\n+\n .. attribute:: Paginator.object_list\n \n     Required. A list, tuple, ``QuerySet``, or other sliceable object with a\n@@ -98,8 +105,8 @@ Attributes\n ``Page`` class\n ==============\n \n-You usually won't construct ``Page`` objects by hand -- you'll get them using\n-:meth:`Paginator.page`.\n+You usually won't construct ``Page`` objects by hand -- you'll get them by\n+iterating :class:`Paginator`, or by using :meth:`Paginator.page`.\n \n .. class:: Page(object_list, number, paginator)\n \ndiff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt\nindex da954bab56d1..d2078469ee84 100644\n--- a/docs/releases/3.1.txt\n+++ b/docs/releases/3.1.txt\n@@ -162,6 +162,11 @@ Models\n \n * ...\n \n+Pagination\n+~~~~~~~~~~\n+\n+* Support for iterating over ``Paginator`` was added.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex ef6e355e8da4..f82d333ae764 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,13 @@ def test_get_page_empty_object_list_and_allow_empty_first_page_false(self):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/9296"}