{"instance_id": "sympy__sympy-15875", "score": "I", "diff": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 83a5f2aedc..7ccddb24cc 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -530,40 +530,51 @@ def _eval_is_imaginary(self):\n             return False\n \n     def _eval_is_zero(self):\n+        print(f\"_eval_is_zero called for {self}\")\n         if self.is_commutative is False:\n             # issue 10528: there is no way to know if a nc symbol\n             # is zero or not\n-            return\n+            print(\"Non-commutative case\")\n+            return None\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        complex_terms = False\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n+            print(f\"Checking arg: {a}\")\n+            if a.is_zero:\n+                z += 1\n+            elif a.is_zero is False:\n+                if a.is_real or a.is_imaginary or a.is_complex:\n+                    complex_terms = True\n                     nz.append(a)\n                 else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                    print(f\"Returning None for arg: {a}\")\n+                    return None\n             else:\n-                return\n+                print(f\"Returning None for arg: {a}\")\n+                return None\n         if z == len(self.args):\n+            print(\"All args are zero\")\n             return True\n-        if len(nz) == len(self.args):\n+        if complex_terms:\n+            print(\"Complex terms found\")\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n+        if len(nz) == len(self.args):\n+            b = self.func(*nz)\n+            print(f\"Checking reconstructed expression: {b}\")\n+            if b.is_zero:\n                 return True\n-            if im and not im_or_z:\n+            if b.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n-            return False\n+        print(\"Returning None as default\")\n+        return None\n+\n+    @property\n+    def is_zero(self):\n+        print(f\"is_zero property called for {self}\")\n+        result = self._eval_is_zero()\n+        print(f\"is_zero result: {result}\")\n+        return result\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\ndiff --git a/test_is_zero.py b/test_is_zero.py\nnew file mode 100644\nindex 0000000000..4b023d25e9\n--- /dev/null\n+++ b/test_is_zero.py\n@@ -0,0 +1,38 @@\n+\n+from sympy import I, Add, S, simplify\n+\n+def test_is_zero_complex():\n+    e = -2*I + (1 + I)**2\n+    print(f\"e = {e}\")\n+    print(f\"e.is_zero = {e.is_zero}\")\n+    assert e.is_zero is None, f\"Expected None, got {e.is_zero}\"\n+    \n+    add_e = Add(e, S.Zero)\n+    print(f\"Add(e, S.Zero) = {add_e}\")\n+    print(f\"Add(e, S.Zero).is_zero = {add_e.is_zero}\")\n+    assert add_e.is_zero is None, f\"Expected None, got {add_e.is_zero}\"\n+    \n+    simplified_e = simplify(e)\n+    print(f\"simplify(e) = {simplified_e}\")\n+    print(f\"simplify(e).is_zero = {simplified_e.is_zero}\")\n+    assert simplified_e.is_zero is True, f\"Expected True, got {simplified_e.is_zero}\"\n+\n+    # Additional test cases\n+    test_cases = [\n+        I + 1,\n+        2*I - 2*I,\n+        3 + 4*I - 3 - 4*I\n+    ]\n+    \n+    for case in test_cases:\n+        print(f\"\\nTesting: {case}\")\n+        print(f\"Type: {type(case)}\")\n+        print(f\"is_zero = {case.is_zero}\")\n+        print(f\"is_complex = {case.is_complex}\")\n+        print(f\"is_real = {case.is_real}\")\n+        print(f\"is_imaginary = {case.is_imaginary}\")\n+        assert case.is_zero is None, f\"Expected None, got {case.is_zero}\"\n+\n+if __name__ == \"__main__\":\n+    test_is_zero_complex()\n+    print(\"All tests passed!\")\n\\ No newline at end of file\n", "gold_standard_diff": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 83a5f2aedc6a..24ae64f2c906 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -554,7 +554,7 @@ def _eval_is_zero(self):\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n+        if len(nz) == 0 or len(nz) == len(self.args):\n             return None\n         b = self.func(*nz)\n         if b.is_zero:\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex e2398a4e7c26..28af93d2392b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,10 +1986,15 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+    # Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n \n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n+\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/15875"}