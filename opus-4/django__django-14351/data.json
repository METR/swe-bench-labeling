{"instance_id": "django__django-14351", "score": "I", "diff": "diff --git a/debug_issue.py b/debug_issue.py\nnew file mode 100644\nindex 0000000000..9d9d0d3e74\n--- /dev/null\n+++ b/debug_issue.py\n@@ -0,0 +1,108 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models\n+from django.db.models import Q, Count\n+from django.db.models.sql.where import SubqueryConstraint\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+        SECRET_KEY='test',\n+    )\n+\n+django.setup()\n+\n+# Define test models\n+class Group(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Agent(models.Model):\n+    name = models.CharField(max_length=100)\n+    groups = models.ManyToManyField(Group)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Thing(models.Model):\n+    agent = models.ForeignKey(Agent, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Create the tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Group)\n+    schema_editor.create_model(Agent)\n+    schema_editor.create_model(Thing)\n+\n+# Test queries\n+groups = Group.objects.all()\n+\n+# Test Q object compilation\n+q1 = Q(agent__groups__in=groups)\n+q2 = Q(agent__groups__count=0) \n+q_combined = q1 | q2\n+\n+# Check how the Q object resolves\n+things = Thing.objects.annotate(Count(\"agent__groups\"))\n+query = things.filter(q_combined).query\n+\n+print(\"Combined Q object:\", q_combined)\n+print(\"\\nSQL Query:\")\n+print(query)\n+\n+# Let's debug the subquery generation\n+# Patch SubqueryConstraint to see what's happening\n+original_as_sql = SubqueryConstraint.as_sql\n+\n+def debug_as_sql(self, compiler, connection):\n+    print(\"\\n=== SubqueryConstraint.as_sql called ===\")\n+    print(f\"Targets: {self.targets}\")\n+    print(f\"Query object: {self.query_object}\")\n+    print(f\"Query object type: {type(self.query_object)}\")\n+    \n+    # Check if query has default_cols set\n+    if hasattr(self.query_object, 'default_cols'):\n+        print(f\"default_cols: {self.query_object.default_cols}\")\n+    \n+    # Check select fields\n+    if hasattr(self.query_object, 'select'):\n+        print(f\"select: {self.query_object.select}\")\n+        \n+    # Call set_values\n+    print(f\"\\nCalling set_values with targets: {self.targets}\")\n+    \n+    result = original_as_sql(self, compiler, connection)\n+    print(f\"\\nGenerated SQL: {result[0]}\")\n+    return result\n+\n+SubqueryConstraint.as_sql = debug_as_sql\n+\n+# Now run the query\n+try:\n+    result = things.filter(q_combined).distinct()\n+    print(\"\\n\\nFinal query:\")\n+    print(result.query)\n+    list(result)  # Force execution\n+except Exception as e:\n+    print(f\"\\nError: {e}\")\ndiff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 795eff8395..adf15daa90 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -242,7 +242,7 @@ class SubqueryConstraint:\n         self.query_object = query_object\n \n     def as_sql(self, compiler, connection):\n-        query = self.query_object\n+        query = self.query_object.clone()\n         query.set_values(self.targets)\n         query_compiler = query.get_compiler(connection=connection)\n         return query_compiler.as_subquery_condition(self.alias, self.columns, compiler)\ndiff --git a/test_q_or_issue.py b/test_q_or_issue.py\nnew file mode 100644\nindex 0000000000..25d6b47292\n--- /dev/null\n+++ b/test_q_or_issue.py\n@@ -0,0 +1,122 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models, connection\n+from django.db.models import Q, Count\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.postgresql',\n+                'NAME': 'test_db',\n+                'USER': 'postgres',\n+                'PASSWORD': 'postgres',\n+                'HOST': 'localhost',\n+                'PORT': '5432',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+        SECRET_KEY='test',\n+    )\n+\n+django.setup()\n+\n+# Define test models\n+class PropertyGroup(models.Model):\n+    name = models.CharField(max_length=100)\n+    created = models.DateTimeField(auto_now_add=True)\n+    updated = models.DateTimeField(auto_now=True)\n+    create_by = models.CharField(max_length=100, default='')\n+    update_by = models.CharField(max_length=100, default='')\n+    tenant_objs = models.CharField(max_length=100, default='')\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'property_propertygroup'\n+\n+class ManagementAgent(models.Model):\n+    name = models.CharField(max_length=100)\n+    property_groups = models.ManyToManyField(PropertyGroup, through='ManagementAgentPropertyGroup')\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'manager_managementagent'\n+\n+class ManagementAgentPropertyGroup(models.Model):\n+    management_agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)\n+    property_group = models.ForeignKey(PropertyGroup, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'manager_managementagentpropertygroup'\n+\n+class ManagerTicketRatingCumulativeMovingAverage(models.Model):\n+    date = models.DateField()\n+    average = models.FloatField()\n+    data_points = models.IntegerField()\n+    agent = models.ForeignKey(ManagementAgent, on_delete=models.CASCADE)\n+    created = models.DateTimeField(auto_now_add=True)\n+    updated = models.DateTimeField(auto_now=True)\n+    create_by = models.CharField(max_length=100, default='')\n+    update_by = models.CharField(max_length=100, default='')\n+    tenant_objs = models.CharField(max_length=100, default='')\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'thing_managerticketratingcumulativemovingaverage'\n+\n+# Create the tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(PropertyGroup)\n+    schema_editor.create_model(ManagementAgent)\n+    schema_editor.create_model(ManagementAgentPropertyGroup)\n+    schema_editor.create_model(ManagerTicketRatingCumulativeMovingAverage)\n+\n+# Create test data\n+pg1 = PropertyGroup.objects.create(name='Group 1')\n+pg2 = PropertyGroup.objects.create(name='Group 2')\n+agent1 = ManagementAgent.objects.create(name='Agent 1')\n+agent2 = ManagementAgent.objects.create(name='Agent 2')\n+ManagementAgentPropertyGroup.objects.create(management_agent=agent1, property_group=pg1)\n+ManagementAgentPropertyGroup.objects.create(management_agent=agent1, property_group=pg2)\n+\n+avg1 = ManagerTicketRatingCumulativeMovingAverage.objects.create(\n+    date='2023-01-01', average=4.5, data_points=10, agent=agent1\n+)\n+avg2 = ManagerTicketRatingCumulativeMovingAverage.objects.create(\n+    date='2023-01-02', average=4.0, data_points=5, agent=agent2\n+)\n+\n+# Test the problematic query\n+property_groups = PropertyGroup.objects.filter(id__in=[pg1.id])\n+queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+    Count(\"agent__property_groups\")\n+)\n+\n+# This should fail with the error described in the issue\n+try:\n+    result = queryset.filter(\n+        Q(agent__property_groups__in=property_groups) | Q(agent__property_groups__count=0)\n+    ).distinct()\n+    \n+    print(\"Query SQL:\")\n+    print(result.query)\n+    print(\"\\nQuery executed successfully!\")\n+    print(f\"Results: {list(result)}\")\n+except Exception as e:\n+    print(f\"Error occurred: {e}\")\n+    print(\"\\nSQL:\")\n+    print(queryset.filter(\n+        Q(agent__property_groups__in=property_groups) | Q(agent__property_groups__count=0)\n+    ).distinct().query)\n", "gold_standard_diff": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 5089737034fa..8d3648b3935e 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -406,6 +406,15 @@ def process_rhs(self, compiler, connection):\n                 self.rhs.add_fields(['pk'])\n             return super().process_rhs(compiler, connection)\n \n+    def get_group_by_cols(self, alias=None):\n+        cols = self.lhs.get_group_by_cols()\n+        if hasattr(self.rhs, 'get_group_by_cols'):\n+            if not getattr(self.rhs, 'has_select_fields', True):\n+                self.rhs.clear_select_clause()\n+                self.rhs.add_fields(['pk'])\n+            cols.extend(self.rhs.get_group_by_cols())\n+        return cols\n+\n     def get_rhs_op(self, connection, rhs):\n         return 'IN %s' % rhs\n \ndiff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 877e7b49a7c8..5d841b166a35 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,6 +1525,14 @@ class DistinctAggregate(Aggregate):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_having_subquery_select(self):\n+        authors = Author.objects.filter(pk=self.a1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.b1, self.b4})\n+\n \n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14351"}