diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py
index 7a5b28d159..4b566ff7d1 100644
--- a/django/template/defaultfilters.py
+++ b/django/template/defaultfilters.py
@@ -150,14 +150,19 @@ def floatformat(text, arg=-1):
         elif last_char == "u":
             use_l10n = False
             arg = arg[:-1] or -1
-    try:
-        input_val = repr(text)
-        d = Decimal(input_val)
-    except InvalidOperation:
+    # Handle the case where text is already a Decimal
+    if isinstance(text, Decimal):
+        d = text
+        input_val = str(text)
+    else:
         try:
-            d = Decimal(str(float(text)))
-        except (ValueError, InvalidOperation, TypeError):
-            return ""
+            input_val = repr(text)
+            d = Decimal(input_val)
+        except InvalidOperation:
+            try:
+                d = Decimal(str(float(text)))
+            except (ValueError, InvalidOperation, TypeError):
+                return ""
     try:
         p = int(arg)
     except ValueError:
diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py
index 8dc69b2437..09bd575ff0 100644
--- a/tests/template_tests/filter_tests/test_floatformat.py
+++ b/tests/template_tests/filter_tests/test_floatformat.py
@@ -73,6 +73,15 @@ class FunctionTests(SimpleTestCase):
         self.assertEqual(floatformat(1.5e-15, 20), "0.00000000000000150000")
         self.assertEqual(floatformat(1.5e-15, -20), "0.00000000000000150000")
         self.assertEqual(floatformat(1.00000000000000015, 16), "1.0000000000000002")
+        # Test high-precision Decimal values are preserved
+        self.assertEqual(
+            floatformat(Decimal("42.12345678901234567890"), 20),
+            "42.12345678901234567890",
+        )
+        self.assertEqual(
+            floatformat(Decimal("1.123456789012345678901234567890"), 30),
+            "1.123456789012345678901234567890",
+        )
 
     def test_force_grouping(self):
         with translation.override("en"):
