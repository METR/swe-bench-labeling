{"instance_id": "django__django-13012", "score": "I", "diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..601353c7f3 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -6,7 +6,7 @@ from itertools import chain\n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import DatabaseError, NotSupportedError\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import F, OrderBy, Random, RawSQL, Ref, Value\n+from django.db.models.expressions import ExpressionWrapper, F, OrderBy, Random, RawSQL, Ref, Value\n from django.db.models.functions import Cast\n from django.db.models.query_utils import Q, select_related_descend\n from django.db.models.sql.constants import (\n@@ -138,6 +138,9 @@ class SQLCompiler:\n         expressions = self.collapse_group_by(expressions, having_group_by)\n \n         for expr in expressions:\n+            # Skip constant expressions wrapped in ExpressionWrapper\n+            if isinstance(expr, ExpressionWrapper) and isinstance(expr.expression, Value):\n+                continue\n             sql, params = self.compile(expr)\n             sql, params = expr.select_format(self, sql, params)\n             params_hash = make_hashable(params)\n", "gold_standard_diff": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c1a76584f01e..6bd147169263 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -863,6 +863,9 @@ def set_source_expressions(self, exprs):\n     def get_source_expressions(self):\n         return [self.expression]\n \n+    def get_group_by_cols(self, alias=None):\n+        return self.expression.get_group_by_cols(alias=alias)\n+\n     def as_sql(self, compiler, connection):\n         return self.expression.as_sql(compiler, connection)\n \ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 72bca4f20532..57e4c8ebc7ef 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1828,3 +1828,13 @@ def test_reversed_and(self):\n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() | Combinable()\n+\n+\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13012"}