{"instance_id": "matplotlib__matplotlib-20676", "score": "I", "diff": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a199e45d40..ed7d90049f 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1916,7 +1916,25 @@ class _SelectorWidget(AxesWidget):\n \n     def _press(self, event):\n         \"\"\"Button press event handler.\"\"\"\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n \n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n+\n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n     def release(self, event):\n         \"\"\"Button release event handler and validator.\"\"\"\n         if not self.ignore(event) and self._eventpress:\n@@ -1951,24 +1969,48 @@ class _SelectorWidget(AxesWidget):\n     def _on_scroll(self, event):\n         \"\"\"Mouse scroll event handler.\"\"\"\n \n-    def on_key_press(self, event):\n-        \"\"\"Key press event handler and validator for all selection widgets.\"\"\"\n-        if self.active:\n-            key = event.key or ''\n-            key = key.replace('ctrl', 'control')\n-            if key == self.state_modifier_keys['clear']:\n-                for artist in self.artists:\n-                    artist.set_visible(False)\n-                self.update()\n-                return\n-            for (state, modifier) in self.state_modifier_keys.items():\n-                if modifier in key:\n-                    self._state.add(state)\n-            self._on_key_press(event)\n+    def _press(self, event):\n+        \"\"\"Button press event handler.\"\"\"\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n+\n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n+\n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n+    def _press(self, event):\n+        \"\"\"Button press event handler.\"\"\"\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n \n-    def _on_key_press(self, event):\n-        \"\"\"Key press event handler - for widget-specific key press actions.\"\"\"\n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n \n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n     def on_key_release(self, event):\n         \"\"\"Key release event handler and validator.\"\"\"\n         if self.active:\n@@ -2089,6 +2131,8 @@ class SpanSelector(_SelectorWidget):\n         self._pressv = None\n \n         self._rectprops = rectprops\n+        self.interactive = interactive\n+        self._initial_axes_limits = None\n         self.onmove_callback = onmove_callback\n         self.minspan = minspan\n \n@@ -2164,11 +2208,25 @@ class SpanSelector(_SelectorWidget):\n \n     def _press(self, event):\n         \"\"\"Button press event handler.\"\"\"\n-        if self._interactive and self._rect.get_visible():\n-            self._set_active_handle(event)\n-        else:\n-            self._active_handle = None\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n+\n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n \n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n         if self._active_handle is None or not self._interactive:\n             # Clear previous rectangle before drawing new rectangle.\n             self.update()\n@@ -2687,13 +2745,25 @@ class RectangleSelector(_SelectorWidget):\n \n     def _press(self, event):\n         \"\"\"Button press event handler.\"\"\"\n-        # make the drawn box/line visible get the click-coordinates,\n-        # button, ...\n-        if self._interactive and self._to_draw.get_visible():\n-            self._set_active_handle(event)\n-        else:\n-            self._active_handle = None\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n \n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n+\n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n         if self._active_handle is None or not self._interactive:\n             # Clear previous rectangle before drawing new rectangle.\n             self.update()\n@@ -3069,9 +3139,26 @@ class LassoSelector(_SelectorWidget):\n         self.press(event)\n \n     def _press(self, event):\n-        self.verts = [self._get_data(event)]\n-        self.line.set_visible(True)\n+        \"\"\"Button press event handler.\"\"\"\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n \n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n+\n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n     def onrelease(self, event):\n         self.release(event)\n \n@@ -3207,16 +3294,25 @@ class PolygonSelector(_SelectorWidget):\n \n     def _press(self, event):\n         \"\"\"Button press event handler.\"\"\"\n-        # Check for selection of a tool handle.\n-        if ((self._polygon_completed or 'move_vertex' in self._state)\n-                and len(self._xs) > 0):\n-            h_idx, h_dist = self._polygon_handles.closest(event.x, event.y)\n-            if h_dist < self.vertex_select_radius:\n-                self._active_handle_idx = h_idx\n-        # Save the vertex positions at the time of the press event (needed to\n-        # support the 'move_all' state modifier).\n-        self._xs_at_press, self._ys_at_press = self._xs.copy(), self._ys.copy()\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n+\n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n \n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n     def _release(self, event):\n         \"\"\"Button release event handler.\"\"\"\n         # Release active tool handle.\n@@ -3292,16 +3388,27 @@ class PolygonSelector(_SelectorWidget):\n \n         self._draw_polygon()\n \n-    def _on_key_press(self, event):\n-        \"\"\"Key press event handler.\"\"\"\n-        # Remove the pending vertex if entering the 'move_vertex' or\n-        # 'move_all' mode\n-        if (not self._polygon_completed\n-                and ('move_vertex' in self._state or\n-                     'move_all' in self._state)):\n-            self._xs, self._ys = self._xs[:-1], self._ys[:-1]\n-            self._draw_polygon()\n+    def _press(self, event):\n+        \"\"\"Button press event handler.\"\"\"\n+        if self.interactive and self._initial_axes_limits is None:\n+            self._initial_axes_limits = self.ax.get_xlim(), self.ax.get_ylim()\n+        super()._press(event)\n \n+    def _release(self, event):\n+        \"\"\"Button release event handler.\"\"\"\n+        super()._release(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n+\n+    def _onmove(self, event):\n+        \"\"\"Cursor move event handler.\"\"\"\n+        super()._onmove(event)\n+        if self.interactive and self._initial_axes_limits:\n+            self.ax.set_xlim(self._initial_axes_limits[0])\n+            self.ax.set_ylim(self._initial_axes_limits[1])\n+            self.ax.figure.canvas.draw()\n     def _on_key_release(self, event):\n         \"\"\"Key release event handler.\"\"\"\n         # Add back the pending vertex if leaving the 'move_vertex' or\n", "gold_standard_diff": "From 5c08ff65b884bd03d80eba0a6de01a9d24599299 Mon Sep 17 00:00:00 2001\nFrom: Eric Prestat <eric.prestat@gmail.com>\nDate: Mon, 19 Jul 2021 10:40:40 +0100\nSubject: [PATCH] Fix keeping bound when initialising `SpanSelector`.\n\n---\n lib/matplotlib/tests/test_widgets.py | 29 ++++++++++++++++++++++++++++\n lib/matplotlib/widgets.py            |  7 ++++++-\n 2 files changed, 35 insertions(+), 1 deletion(-)\n\ndiff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 71ebd176f0b9..19094bca85ef 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,35 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \ndiff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a199e45d4018..00759db0be23 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2156,7 +2156,12 @@ def new_axes(self, ax):\n             self.artists.append(self._rect)\n \n     def _setup_edge_handle(self, props):\n-        self._edge_handles = ToolLineHandles(self.ax, self.extents,\n+        # Define initial position using the axis bounds to keep the same bounds\n+        if self.direction == 'horizontal':\n+            positions = self.ax.get_xbound()\n+        else:\n+            positions = self.ax.get_ybound()\n+        self._edge_handles = ToolLineHandles(self.ax, positions,\n                                              direction=self.direction,\n                                              line_props=props,\n                                              useblit=self.useblit)\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/20676"}