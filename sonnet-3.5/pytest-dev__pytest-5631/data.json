{"instance_id": "pytest-dev__pytest-5631", "score": "C", "diff": "diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex d238061b4..3ce9558d7 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -68,7 +68,7 @@ def num_mock_patch_args(function):\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n         return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n+            [p for p in patchings if not p.attribute_name and any(p.new is s for s in sentinels)]\n         )\n     return len(patchings)\n \ndiff --git a/src/_pytest/test_compat.py b/src/_pytest/test_compat.py\nnew file mode 100644\nindex 000000000..6cee66314\n--- /dev/null\n+++ b/src/_pytest/test_compat.py\n@@ -0,0 +1,33 @@\n+\n+import pytest\n+from unittest.mock import patch\n+import numpy as np\n+from _pytest.compat import num_mock_patch_args\n+\n+def test_num_mock_patch_args():\n+    # Test with a regular object\n+    @patch('os.path.exists', return_value=True)\n+    def func1(mock_exists):\n+        pass\n+    \n+    assert num_mock_patch_args(func1) == 1\n+\n+    # Test with a numpy array\n+    @patch('numpy.array', new=np.array([1, 2, 3]))\n+    def func2():\n+        pass\n+    \n+    assert num_mock_patch_args(func2) == 0\n+\n+    # Test with multiple patches, including a numpy array\n+    @patch('os.path.exists', return_value=True)\n+    @patch('numpy.array', new=np.array([1, 2, 3]))\n+    @patch('os.getcwd', return_value='/home')\n+    def func3(mock_getcwd, mock_exists):\n+        pass\n+    \n+    assert num_mock_patch_args(func3) == 2\n+\n+# Run the test\n+if __name__ == '__main__':\n+    pytest.main([__file__])\n\\ No newline at end of file\ndiff --git a/test_num_mock_patch_args.py b/test_num_mock_patch_args.py\nnew file mode 100644\nindex 000000000..d7dad01da\n--- /dev/null\n+++ b/test_num_mock_patch_args.py\n@@ -0,0 +1,31 @@\n+\n+import pytest\n+from unittest.mock import patch\n+from _pytest.compat import num_mock_patch_args\n+\n+def test_num_mock_patch_args():\n+    # Test with a regular object\n+    @patch('os.path.exists', return_value=True)\n+    def func1(mock_exists):\n+        pass\n+    \n+    assert num_mock_patch_args(func1) == 1\n+\n+    # Test with a list (simulating an array-like object)\n+    @patch('some_module.some_function', new=[1, 2, 3])\n+    def func2():\n+        pass\n+    \n+    assert num_mock_patch_args(func2) == 0\n+\n+    # Test with multiple patches, including a list\n+    @patch('os.path.exists', return_value=True)\n+    @patch('some_module.some_function', new=[1, 2, 3])\n+    @patch('os.getcwd', return_value='/home')\n+    def func3(mock_getcwd, mock_exists):\n+        pass\n+    \n+    assert num_mock_patch_args(func3) == 2\n+\n+if __name__ == '__main__':\n+    pytest.main([__file__])\n\\ No newline at end of file\n", "gold_standard_diff": "From 240d314f364061504bc0c7a75f3ada974490629d Mon Sep 17 00:00:00 2001\nFrom: Bruno Oliveira <nicoddemus@gmail.com>\nDate: Fri, 19 Jul 2019 21:59:43 +0200\nSubject: [PATCH 1/2] copy test and changelog from #5607 by @niccodemus\n\n---\n changelog/5606.bugfix.rst     |  2 ++\n testing/python/integration.py | 28 ++++++++++++++++++++++++++++\n 2 files changed, 30 insertions(+)\n create mode 100644 changelog/5606.bugfix.rst\n\ndiff --git a/changelog/5606.bugfix.rst b/changelog/5606.bugfix.rst\nnew file mode 100644\nindex 00000000000..82332ba9972\n--- /dev/null\n+++ b/changelog/5606.bugfix.rst\n@@ -0,0 +1,2 @@\n+Fixed internal error when test functions were patched with objects that cannot be compared\n+for truth values against others, like ``numpy`` arrays.\ndiff --git a/testing/python/integration.py b/testing/python/integration.py\nindex a6b8dddf395..73419eef424 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,34 @@ def test_hello_mock(self, abspath):\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_sentinel_check_against_numpy_like(self, testdir):\n+        \"\"\"Ensure our function that detects mock arguments compares against sentinels using\n+        identity to circumvent objects which can't be compared with equality against others\n+        in a truth context, like with numpy arrays (#5606).\n+        \"\"\"\n+        testdir.makepyfile(\n+            dummy=\"\"\"\n+            class NumpyLike:\n+                def __init__(self, value):\n+                    self.value = value\n+                def __eq__(self, other):\n+                    raise ValueError(\"like numpy, cannot compare against others for truth\")\n+            FOO = NumpyLike(10)\n+        \"\"\"\n+        )\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import dummy\n+            class Test(object):\n+                @patch(\"dummy.FOO\", new=dummy.NumpyLike(50))\n+                def test_hello(self):\n+                    assert dummy.FOO.value == 50\n+        \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n\nFrom 8c7d9124bae66b9f4b0152b28e0729c7211b8488 Mon Sep 17 00:00:00 2001\nFrom: Ronny Pfannschmidt <opensource@ronnypfannschmidt.de>\nDate: Fri, 19 Jul 2019 22:10:45 +0200\nSubject: [PATCH 2/2] switch num_mock_patch_args to do identity checks for the\n sentinels\n\n---\n src/_pytest/compat.py | 19 ++++++++++++-------\n 1 file changed, 12 insertions(+), 7 deletions(-)\n\ndiff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex d238061b4ab..52ffc36bc98 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -64,13 +64,18 @@ def num_mock_patch_args(function):\n     patchings = getattr(function, \"patchings\", None)\n     if not patchings:\n         return 0\n-    mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]\n-    if any(mock_modules):\n-        sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n-        return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n-        )\n-    return len(patchings)\n+\n+    mock_sentinel = getattr(sys.modules.get(\"mock\"), \"DEFAULT\", object())\n+    ut_mock_sentinel = getattr(sys.modules.get(\"unittest.mock\"), \"DEFAULT\", object())\n+\n+    return len(\n+        [\n+            p\n+            for p in patchings\n+            if not p.attribute_name\n+            and (p.new is mock_sentinel or p.new is ut_mock_sentinel)\n+        ]\n+    )\n \n \n def getfuncargnames(function, is_method=False, cls=None):\n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/5631"}