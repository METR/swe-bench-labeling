diff --git a/AUTHORS b/AUTHORS
index d1f1b5503f2..7d27f5adadf 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -363,5 +363,6 @@ Yuval Shimon
 Zac Hatfield-Dodds
 Zachary Kneupper
 Zachary OBrien
+Zhouxin Qiu
 Zoltán Máté
 Zsolt Cserna
diff --git a/changelog/9877.bugfix.rst b/changelog/9877.bugfix.rst
new file mode 100644
index 00000000000..1d2264c6157
--- /dev/null
+++ b/changelog/9877.bugfix.rst
@@ -0,0 +1 @@
+Ensure ``caplog.get_records(when)`` returns current/correct data after invoking ``caplog.clear()``.
diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py
index a4f4214b137..2eb69fdbfb4 100644
--- a/src/_pytest/logging.py
+++ b/src/_pytest/logging.py
@@ -40,7 +40,6 @@
 else:
     logging_StreamHandler = logging.StreamHandler
 
-
 DEFAULT_LOG_FORMAT = "%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s"
 DEFAULT_LOG_DATE_FORMAT = "%H:%M:%S"
 _ANSI_ESCAPE_SEQ = re.compile(r"\x1b\[[\d;]+m")
@@ -345,6 +344,10 @@ def reset(self) -> None:
         self.records = []
         self.stream = StringIO()
 
+    def clear(self) -> None:
+        self.records.clear()
+        self.stream = StringIO()
+
     def handleError(self, record: logging.LogRecord) -> None:
         if logging.raiseExceptions:
             # Fail the test if the log message is bad (emit failed).
@@ -440,7 +443,7 @@ def messages(self) -> List[str]:
 
     def clear(self) -> None:
         """Reset the list of log records and the captured log text."""
-        self.handler.reset()
+        self.handler.clear()
 
     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:
         """Set the level of a logger for the duration of a test.
diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py
index bcb20de5805..e9e73d05f98 100644
--- a/testing/logging/test_fixture.py
+++ b/testing/logging/test_fixture.py
@@ -172,6 +172,24 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow
     assert set(caplog._item.stash[caplog_records_key]) == {"setup", "call"}
 
 
+def test_clear_for_call_stage(caplog, logging_during_setup_and_teardown):
+    logger.info("a_call_log")
+    assert [x.message for x in caplog.get_records("call")] == ["a_call_log"]
+    assert [x.message for x in caplog.get_records("setup")] == ["a_setup_log"]
+    assert set(caplog._item.stash[caplog_records_key]) == {"setup", "call"}
+
+    caplog.clear()
+
+    assert caplog.get_records("call") == []
+    assert [x.message for x in caplog.get_records("setup")] == ["a_setup_log"]
+    assert set(caplog._item.stash[caplog_records_key]) == {"setup", "call"}
+
+    logging.info("a_call_log_after_clear")
+    assert [x.message for x in caplog.get_records("call")] == ["a_call_log_after_clear"]
+    assert [x.message for x in caplog.get_records("setup")] == ["a_setup_log"]
+    assert set(caplog._item.stash[caplog_records_key]) == {"setup", "call"}
+
+
 def test_ini_controls_global_log_level(pytester: Pytester) -> None:
     pytester.makepyfile(
         """
