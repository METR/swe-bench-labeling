{"instance_id": "django__django-13279", "score": "C", "diff": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b5453160a5..0982e55b7a 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -108,6 +108,14 @@ class SessionBase:\n \n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n+        # RemovedInDjango40Warning: DEFAULT_HASHING_ALGORITHM='sha1' will be\n+        # removed in Django 4.0.\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            # Use the legacy format for compatibility during the transition to\n+            # Django 3.1 when DEFAULT_HASHING_ALGORITHM is set to 'sha1'.\n+            serialized = self.serializer().dumps(session_dict)\n+            hash = self._hash(serialized)\n+            return base64.b64encode(hash.encode() + b\":\" + serialized).decode('ascii')\n         return signing.dumps(\n             session_dict, salt=self.key_salt, serializer=self.serializer,\n             compress=True,\ndiff --git a/minimal_test.py b/minimal_test.py\nnew file mode 100644\nindex 0000000000..61febc2069\n--- /dev/null\n+++ b/minimal_test.py\n@@ -0,0 +1,35 @@\n+import os\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+# Set up minimal Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n+\n+from django.conf import settings\n+settings.SECRET_KEY = 'test-key'\n+settings.INSTALLED_APPS = ['django.contrib.sessions']\n+settings.DEFAULT_HASHING_ALGORITHM = 'sha1'\n+\n+import django\n+django.setup()\n+\n+from django.contrib.sessions.backends.base import SessionBase\n+import base64\n+\n+print(\"Testing session encoding with DEFAULT_HASHING_ALGORITHM='sha1'\")\n+session = SessionBase()\n+data = {'test': 'value'}\n+encoded = session.encode(data)\n+print(f\"Encoded: {encoded}\")\n+\n+# Check format\n+try:\n+    decoded_bytes = base64.b64decode(encoded.encode('ascii'))\n+    has_colon = b':' in decoded_bytes\n+    print(f\"Legacy format (has colon): {has_colon}\")\n+except:\n+    print(\"Not legacy base64 format\")\n+\n+decoded = session.decode(encoded)\n+print(f\"Decoded: {decoded}\")\n+print(f\"Match: {decoded == data}\")\ndiff --git a/test_session_fix.py b/test_session_fix.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_session_transition.py b/test_session_transition.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_simple_session.py b/test_simple_session.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_transition_compatibility.py b/test_transition_compatibility.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\n", "gold_standard_diff": "From faed7ef8b76d7798bce15908d80c90aea6ce554b Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Fri, 7 Aug 2020 07:05:57 +0200\nSubject: [PATCH] Fixed #31864 -- Fixed encoding session data during transition\n to Django 3.1.\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nThanks \u05d0\u05d5\u05e8\u05d9 for the report.\n---\n django/contrib/sessions/backends/base.py |  9 +++++++++\n docs/releases/3.1.1.txt                  |  3 +++\n tests/sessions_tests/tests.py            | 19 +++++++++++++------\n 3 files changed, 25 insertions(+), 6 deletions(-)\n\ndiff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b5453160a5a9..187e14b1b734 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -108,6 +108,9 @@ def _hash(self, value):\n \n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n+        # RemovedInDjango40Warning: DEFAULT_HASHING_ALGORITHM will be removed.\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            return self._legacy_encode(session_dict)\n         return signing.dumps(\n             session_dict, salt=self.key_salt, serializer=self.serializer,\n             compress=True,\n@@ -121,6 +124,12 @@ def decode(self, session_data):\n         except Exception:\n             return self._legacy_decode(session_data)\n \n+    def _legacy_encode(self, session_dict):\n+        # RemovedInDjango40Warning.\n+        serialized = self.serializer().dumps(session_dict)\n+        hash = self._hash(serialized)\n+        return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n+\n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\ndiff --git a/docs/releases/3.1.1.txt b/docs/releases/3.1.1.txt\nindex 516d47cd03d0..c8201d4e4182 100644\n--- a/docs/releases/3.1.1.txt\n+++ b/docs/releases/3.1.1.txt\n@@ -14,3 +14,6 @@ Bugfixes\n \n * Fixed wrapping of long model names in the admin's navigation sidebar\n   (:ticket:`31854`).\n+\n+* Fixed encoding session data while upgrading multiple instances of the same\n+  project to Django 3.1 (:ticket:`31864`).\ndiff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex 248dae82aa4a..e7615d0f1114 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -31,9 +31,11 @@\n from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, TestCase, ignore_warnings, override_settings,\n+    RequestFactory, SimpleTestCase, TestCase, ignore_warnings,\n+    override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,6 +325,13 @@ def test_decode_legacy(self):\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorith_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n@@ -526,8 +535,7 @@ class CacheDBSessionWithTimeZoneTests(CacheDBSessionTests):\n     pass\n \n \n-# Don't need DB flushing for these tests, so can use unittest.TestCase as base class\n-class FileSessionTests(SessionTestsMixin, unittest.TestCase):\n+class FileSessionTests(SessionTestsMixin, SimpleTestCase):\n \n     backend = FileSession\n \n@@ -620,7 +628,7 @@ def mkdtemp(self):\n         return Path(tmp_dir)\n \n \n-class CacheSessionTests(SessionTestsMixin, unittest.TestCase):\n+class CacheSessionTests(SessionTestsMixin, SimpleTestCase):\n \n     backend = CacheSession\n \n@@ -854,8 +862,7 @@ def response_set_session(request):\n         self.assertEqual(response['Vary'], 'Cookie')\n \n \n-# Don't need DB flushing for these tests, so can use unittest.TestCase as base class\n-class CookieSessionTests(SessionTestsMixin, unittest.TestCase):\n+class CookieSessionTests(SessionTestsMixin, SimpleTestCase):\n \n     backend = CookieSession\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/13279"}