diff --git a/test_dataset_len.py b/test_dataset_len.py
new file mode 100644
index 00000000..48aea53f
--- /dev/null
+++ b/test_dataset_len.py
@@ -0,0 +1,18 @@
+import xarray as xr
+
+# Create the dataset
+ds = xr.Dataset(coords={"a": ("x", [1, 2, 3]), "b": ("x", ['a', 'b', 'c'])})
+
+# Set the index and reset it
+ds_indexed = ds.set_index(z=['a', 'b'])
+ds_reset = ds_indexed.reset_index("z", drop=True)
+
+# Print the lengths
+print("Original dataset length:", len(ds.data_vars))
+print("Indexed dataset length:", len(ds_indexed.data_vars))
+print("Reset dataset length:", len(ds_reset.data_vars))
+
+# Try to access data_vars
+print("Original dataset data_vars:", list(ds.data_vars))
+print("Indexed dataset data_vars:", list(ds_indexed.data_vars))
+print("Reset dataset data_vars:", list(ds_reset.data_vars))
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index 620f32f8..b89792fb 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -365,7 +365,7 @@ class DataVariables(Mapping[Any, "DataArray"]):
         )
 
     def __len__(self) -> int:
-        return len(self._dataset._variables) - len(self._dataset._coord_names)
+        return sum(1 for key in self._dataset._variables if key not in self._dataset._coord_names)
 
     def __contains__(self, key: Hashable) -> bool:
         return key in self._dataset._variables and key not in self._dataset._coord_names
