diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f7e..9d4d09acb2 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -4,6 +4,7 @@ from types import MethodType
 from django.apps import apps
 from django.conf import settings
 from django.core import checks
+from django.db import models
 
 from .management import _get_builtin_permissions
 
@@ -52,7 +53,12 @@ def check_user_model(app_configs=None, **kwargs):
         )
 
     # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)
+    is_unique = username_field.unique or any(
+        isinstance(constraint, models.UniqueConstraint) and cls.USERNAME_FIELD in constraint.fields
+        for constraint in cls._meta.constraints
+    )
+    if not is_unique:
         if (settings.AUTHENTICATION_BACKENDS ==
                 ['django.contrib.auth.backends.ModelBackend']):
             errors.append(
diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py
index cfaa4063f8..77570d6c3c 100644
--- a/tests/auth_tests/test_checks.py
+++ b/tests/auth_tests/test_checks.py
@@ -118,6 +118,28 @@ class UserModelChecksTests(SimpleTestCase):
             ),
         ])
 
+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')
+    def test_username_unique_constraint(self):
+        """
+        A USERNAME_FIELD with a UniqueConstraint should not raise an error.
+        """
+        class CustomUserUniqueConstraint(AbstractBaseUser):
+            username = models.CharField(max_length=30)
+            USERNAME_FIELD = 'username'
+
+            class Meta:
+                constraints = [
+                    models.UniqueConstraint(fields=['username'], name='unique_username')
+                ]
+
+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+        self.assertEqual(errors, [])
+
+        # Test with non-default authentication backend
+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):
+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())
+            self.assertEqual(errors, [])
+
 
 @isolate_apps('auth_tests', attr_name='apps')
 @override_system_checks([check_models_permissions])
