{"instance_id": "django__django-13807", "score": "I", "diff": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98c0d..1c128c7cde 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -120,6 +120,10 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         'PositiveIntegerField': '\"%(column)s\" >= 0',\n         'PositiveSmallIntegerField': '\"%(column)s\" >= 0',\n     }\n+\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.ops = DatabaseOperations(self)\n     data_types_suffix = {\n         'AutoField': 'AUTOINCREMENT',\n         'BigAutoField': 'AUTOINCREMENT',\n@@ -326,20 +330,21 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                 if table_names is None:\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n+                    quote_name = self.ops.quote_name\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute('PRAGMA foreign_key_check(%s)' % quote_name(table_name)).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(%s)' % quote_name(table_name)\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                     primary_key_value, bad_value = cursor.execute(\n                         'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n-                            primary_key_column_name, column_name, table_name\n+                            quote_name(primary_key_column_name), quote_name(column_name), quote_name(table_name)\n                         ),\n                         (rowid,),\n                     ).fetchone()\n@@ -361,18 +366,20 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                         continue\n                     key_columns = self.introspection.get_key_columns(cursor, table_name)\n                     for column_name, referenced_table_name, referenced_column_name in key_columns:\n+                        quote_name = self.ops.quote_name\n                         cursor.execute(\n                             \"\"\"\n-                            SELECT REFERRING.`%s`, REFERRING.`%s` FROM `%s` as REFERRING\n-                            LEFT JOIN `%s` as REFERRED\n-                            ON (REFERRING.`%s` = REFERRED.`%s`)\n-                            WHERE REFERRING.`%s` IS NOT NULL AND REFERRED.`%s` IS NULL\n-                            \"\"\"\n-                            % (\n-                                primary_key_column_name, column_name, table_name,\n-                                referenced_table_name, column_name, referenced_column_name,\n-                                column_name, referenced_column_name,\n-                            )\n+                            SELECT REFERRING.%(pk)s, REFERRING.%(fk)s FROM %(table)s as REFERRING\n+                            LEFT JOIN %(ref_table)s as REFERRED\n+                            ON (REFERRING.%(fk)s = REFERRED.%(ref_col)s)\n+                            WHERE REFERRING.%(fk)s IS NOT NULL AND REFERRED.%(ref_col)s IS NULL\n+                            \"\"\" % {\n+                                'pk': quote_name(primary_key_column_name),\n+                                'fk': quote_name(column_name),\n+                                'table': quote_name(table_name),\n+                                'ref_table': quote_name(referenced_table_name),\n+                                'ref_col': quote_name(referenced_column_name),\n+                            }\n                         )\n                         for bad_row in cursor.fetchall():\n                             raise IntegrityError(\n", "gold_standard_diff": "From 270072c4c231acd72a03534357a4aa59010e76ff Mon Sep 17 00:00:00 2001\nFrom: Chinmoy Chakraborty <chinmoy12c@gmail.com>\nDate: Mon, 28 Dec 2020 11:15:48 +0530\nSubject: [PATCH] Fixed #32158 -- Fixed loaddata crash on SQLite when\n table/column names are SQL keywords.\n\n---\n django/db/backends/sqlite3/base.py | 11 ++++++++---\n tests/backends/models.py           |  8 ++++++++\n tests/backends/tests.py            | 13 ++++++++++++-\n 3 files changed, 28 insertions(+), 4 deletions(-)\n\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98c0d2f..ab4ea704920c 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,19 +327,24 @@ def check_constraints(self, table_names=None):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute(\n+                            'PRAGMA foreign_key_check(%s)'\n+                            % self.ops.quote_name(table_name)\n+                        ).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                     primary_key_value, bad_value = cursor.execute(\n                         'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n-                            primary_key_column_name, column_name, table_name\n+                            self.ops.quote_name(primary_key_column_name),\n+                            self.ops.quote_name(column_name),\n+                            self.ops.quote_name(table_name),\n                         ),\n                         (rowid,),\n                     ).fetchone()\ndiff --git a/tests/backends/models.py b/tests/backends/models.py\nindex 5368e8d90383..15c81052eaa1 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -140,3 +140,11 @@ class Author(models.Model):\n \n class Book(models.Model):\n     author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+\n+\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\ndiff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex ed1847ede5b0..dd537d1ea372 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -20,7 +20,7 @@\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n-    ReporterProxy, SchoolClass, Square,\n+    ReporterProxy, SchoolClass, SQLKeywordsModel, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n@@ -625,6 +625,17 @@ def test_check_constraints(self):\n                     connection.check_constraints()\n             transaction.set_rollback(True)\n \n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n \n class ThreadTests(TransactionTestCase):\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/13807"}