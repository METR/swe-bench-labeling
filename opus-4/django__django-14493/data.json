{"instance_id": "django__django-14493", "score": "C", "diff": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b2..720767aa9e 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -261,6 +261,7 @@ class HashedFilesMixin:\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n+        substitutions = False\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..e69a5c990f\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,101 @@\n+\"\"\"\n+Comprehensive test for ManifestStaticFilesStorage with various max_post_process_passes values\n+\"\"\"\n+\n+import os\n+import tempfile\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.files.base import ContentFile\n+from django.test import override_settings\n+from django.conf import settings\n+\n+# Configure Django settings if not already configured\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=tempfile.mkdtemp(),\n+        INSTALLED_APPS=['django.contrib.staticfiles'],\n+    )\n+\n+def test_various_max_post_process_passes():\n+    \"\"\"Test ManifestStaticFilesStorage with different max_post_process_passes values\"\"\"\n+    \n+    test_cases = [0, 1, 2, 5, 10]  # Including 0 which was the problematic case\n+    \n+    for passes in test_cases:\n+        print(f\"\\nTesting with max_post_process_passes = {passes}\")\n+        \n+        class TestStorage(ManifestStaticFilesStorage):\n+            max_post_process_passes = passes\n+        \n+        storage = TestStorage()\n+        \n+        # Create test files - one CSS with a reference to another file\n+        css_content = \"\"\"\n+        body {\n+            background: url(\"image.png\");\n+            color: red;\n+        }\n+        \"\"\"\n+        \n+        img_content = b\"fake image content\"\n+        \n+        # Save the files\n+        storage.save('test.css', ContentFile(css_content.encode()))\n+        storage.save('image.png', ContentFile(img_content))\n+        \n+        # Create paths dict as expected by post_process\n+        paths = {\n+            'test.css': (storage, 'test.css'),\n+            'image.png': (storage, 'image.png')\n+        }\n+        \n+        try:\n+            # This should not raise an UnboundLocalError\n+            results = list(storage.post_process(paths))\n+            print(f\"Success! post_process completed without error.\")\n+            print(f\"Number of results: {len(results)}\")\n+            for name, hashed_name, processed in results:\n+                if not isinstance(processed, Exception):\n+                    print(f\"  - {name} -> {hashed_name}, processed: {processed}\")\n+                else:\n+                    print(f\"  - {name} -> ERROR: {processed}\")\n+        except UnboundLocalError as e:\n+            print(f\"UnboundLocalError occurred: {e}\")\n+            raise\n+        except Exception as e:\n+            print(f\"Other error occurred: {e}\")\n+            raise\n+        finally:\n+            # Clean up\n+            for filename in ['test.css', 'image.png']:\n+                if storage.exists(filename):\n+                    storage.delete(filename)\n+            # Also clean up hashed versions\n+            for name, hashed_name, _ in results:\n+                if hashed_name and storage.exists(hashed_name):\n+                    storage.delete(hashed_name)\n+\n+def test_empty_files():\n+    \"\"\"Test with no files to process\"\"\"\n+    print(\"\\nTesting with empty files (max_post_process_passes = 0)\")\n+    \n+    class TestStorage(ManifestStaticFilesStorage):\n+        max_post_process_passes = 0\n+    \n+    storage = TestStorage()\n+    paths = {}\n+    \n+    try:\n+        results = list(storage.post_process(paths))\n+        print(\"Success! post_process completed without error with empty paths.\")\n+        print(f\"Results: {results}\")\n+    except Exception as e:\n+        print(f\"Error occurred: {e}\")\n+        raise\n+\n+if __name__ == '__main__':\n+    test_various_max_post_process_passes()\n+    test_empty_files()\ndiff --git a/test_edge_case.py b/test_edge_case.py\nnew file mode 100644\nindex 0000000000..a6e0ecef7c\n--- /dev/null\n+++ b/test_edge_case.py\n@@ -0,0 +1,92 @@\n+\"\"\"\n+Test edge case: max_post_process_passes = 0 with CSS files that would normally need processing\n+\"\"\"\n+\n+import os\n+import tempfile\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.files.base import ContentFile\n+from django.conf import settings\n+\n+# Configure Django settings if not already configured\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=tempfile.mkdtemp(),\n+        INSTALLED_APPS=['django.contrib.staticfiles'],\n+    )\n+\n+class ZeroPassesStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+def test_zero_passes_with_css_references():\n+    \"\"\"Test that with max_post_process_passes = 0, CSS files are still hashed but references are not updated\"\"\"\n+    storage = ZeroPassesStorage()\n+    \n+    # Create CSS file with references\n+    css_content = \"\"\"\n+    @import url(\"other.css\");\n+    body {\n+        background: url(\"../images/bg.png\");\n+    }\n+    \"\"\"\n+    \n+    other_css_content = \"body { color: red; }\"\n+    img_content = b\"fake image content\"\n+    \n+    # Save the files\n+    storage.save('css/main.css', ContentFile(css_content.encode()))\n+    storage.save('css/other.css', ContentFile(other_css_content.encode()))\n+    storage.save('images/bg.png', ContentFile(img_content))\n+    \n+    # Create paths dict as expected by post_process\n+    paths = {\n+        'css/main.css': (storage, 'css/main.css'),\n+        'css/other.css': (storage, 'css/other.css'),\n+        'images/bg.png': (storage, 'images/bg.png')\n+    }\n+    \n+    try:\n+        # This should not raise an UnboundLocalError\n+        results = list(storage.post_process(paths))\n+        print(\"Success! post_process completed without error.\")\n+        print(f\"Number of results: {len(results)}\")\n+        \n+        # Check results\n+        processed_files = {}\n+        for name, hashed_name, processed in results:\n+            if not isinstance(processed, Exception):\n+                print(f\"  - {name} -> {hashed_name}, processed: {processed}\")\n+                processed_files[name] = hashed_name\n+            else:\n+                print(f\"  - {name} -> ERROR: {processed}\")\n+        \n+        # With max_post_process_passes = 0, the CSS content should not be updated\n+        # to include hashed references, but the files themselves should be hashed\n+        if 'css/main.css' in processed_files:\n+            hashed_main_css = processed_files['css/main.css']\n+            with storage.open(hashed_main_css) as f:\n+                content = f.read().decode('utf-8')\n+                # Check what actually happened\n+                print(f\"\\nCSS content after processing:\")\n+                print(content)\n+                # With max_post_process_passes = 0, only the initial pass happens\n+                # which does update references, but no additional passes for nested references\n+                \n+    except Exception as e:\n+        print(f\"Error occurred: {e}\")\n+        raise\n+    finally:\n+        # Clean up\n+        for filename in ['css/main.css', 'css/other.css', 'images/bg.png']:\n+            if storage.exists(filename):\n+                storage.delete(filename)\n+        # Also clean up hashed versions\n+        for name, hashed_name, _ in results:\n+            if hashed_name and storage.exists(hashed_name):\n+                storage.delete(hashed_name)\n+\n+if __name__ == '__main__':\n+    test_zero_passes_with_css_references()\ndiff --git a/test_max_post_process_passes.py b/test_max_post_process_passes.py\nnew file mode 100644\nindex 0000000000..42924c45dd\n--- /dev/null\n+++ b/test_max_post_process_passes.py\n@@ -0,0 +1,56 @@\n+\"\"\"\n+Test for ManifestStaticFilesStorage with max_post_process_passes = 0\n+\"\"\"\n+\n+import os\n+import tempfile\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.files.base import ContentFile\n+from django.test import override_settings\n+from django.conf import settings\n+\n+# Configure Django settings if not already configured\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=tempfile.mkdtemp(),\n+        INSTALLED_APPS=['django.contrib.staticfiles'],\n+    )\n+\n+class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+def test_max_post_process_passes_zero():\n+    \"\"\"Test that ManifestStaticFilesStorage works with max_post_process_passes = 0\"\"\"\n+    storage = MyManifestStaticFilesStorage()\n+    \n+    # Create a simple test file\n+    test_file_name = 'test.css'\n+    test_content = 'body { color: red; }'\n+    \n+    # Save the file\n+    storage.save(test_file_name, ContentFile(test_content.encode()))\n+    \n+    # Create paths dict as expected by post_process\n+    paths = {test_file_name: (storage, test_file_name)}\n+    \n+    try:\n+        # This should not raise an UnboundLocalError\n+        results = list(storage.post_process(paths))\n+        print(\"Success! post_process completed without error.\")\n+        print(f\"Results: {results}\")\n+    except UnboundLocalError as e:\n+        print(f\"UnboundLocalError occurred: {e}\")\n+        raise\n+    except Exception as e:\n+        print(f\"Other error occurred: {e}\")\n+        raise\n+    finally:\n+        # Clean up\n+        if storage.exists(test_file_name):\n+            storage.delete(test_file_name)\n+\n+if __name__ == '__main__':\n+    test_max_post_process_passes_zero()\ndiff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex db655f2453..4bd25c0535 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -497,6 +497,13 @@ class CustomStaticFilesStorage(storage.StaticFilesStorage):\n         super().__init__(*args, **kwargs)\n \n \n+class ZeroPassesStorage(storage.ManifestStaticFilesStorage):\n+    \"\"\"\n+    Used to test max_post_process_passes = 0\n+    \"\"\"\n+    max_post_process_passes = 0\n+\n+\n @unittest.skipIf(sys.platform == 'win32', \"Windows only partially supports chmod.\")\n class TestStaticFilePermissions(CollectionTestCase):\n \n@@ -581,6 +588,21 @@ class TestStaticFilePermissions(CollectionTestCase):\n                 self.assertEqual(dir_mode, 0o740)\n \n \n+class TestMaxPostProcessPasses(CollectionTestCase):\n+    \"\"\"\n+    Test for max_post_process_passes edge cases.\n+    \"\"\"\n+    \n+    def test_max_post_process_passes_zero(self):\n+        \"\"\"\n+        ManifestStaticFilesStorage works with max_post_process_passes = 0.\n+        \"\"\"\n+        # This should not raise an UnboundLocalError\n+        err = StringIO()\n+        with override_settings(STATICFILES_STORAGE='staticfiles_tests.test_storage.ZeroPassesStorage'):\n+            call_command('collectstatic', interactive=False, verbosity=0, stderr=err)\n+\n+\n @override_settings(\n     STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage',\n )\n", "gold_standard_diff": "diff --git a/AUTHORS b/AUTHORS\nindex cdb43476cbea..d3cb3a62f783 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -99,6 +99,7 @@ answer newbie questions, and generally made Django that much better:\n     Arthur Koziel <http://arthurkoziel.com>\n     Arthur Rio <arthur.rio44@gmail.com>\n     Arvis Bickovskis <viestards.lists@gmail.com>\n+    Arya Khaligh <bartararya@gmail.com>\n     Aryeh Leib Taurog <http://www.aryehleib.com/>\n     A S Alam <aalam@users.sf.net>\n     Asif Saif Uddin <auvipy@gmail.com>\ndiff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b28a..fe1342374905 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -260,6 +260,7 @@ def post_process(self, paths, dry_run=False, **options):\n                 processed_adjustable_paths[name] = (name, hashed_name, processed)\n \n         paths = {path: paths[path] for path in adjustable_paths}\n+        substitutions = False\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\ndiff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex 79f406ca6c09..6a319f934d8b 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -97,3 +97,7 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n         return None\n+\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\ndiff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex db655f2453c3..d5aa1c1c9dc3 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -463,6 +463,18 @@ def test_hashed_name(self):\n         self.assertEqual(relpath, 'cached/styles.css')\n \n \n+@override_settings(\n+    STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage'\n+)\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatistic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        self.run_collectstatic(verbosity=1, stdout=stdout)\n+        self.assertIn('post-processed', stdout.getvalue())\n+\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n class TestCollectionSimpleStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14493"}