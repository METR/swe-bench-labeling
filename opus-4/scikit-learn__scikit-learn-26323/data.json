{"instance_id": "scikit-learn__scikit-learn-26323", "score": "C", "diff": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1..ab82a8d8a 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -303,6 +303,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Handle remainder if it's an estimator\n+        if hasattr(self, \"remainder\") and self.remainder not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self.remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\ndiff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b9c8f5831..ab20e072d 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,7 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2053,6 +2054,52 @@ def test_column_transform_set_output_after_fitting(remainder):\n         assert dtype == expected_dtypes[col]\n \n \n+def test_column_transform_set_output_with_remainder_estimator():\n+    \"\"\"Test that set_output applies to remainder when it's an estimator.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    # Test with VarianceThreshold as remainder\n+    ct = ColumnTransformer(\n+        [(\"bool_selector\", VarianceThreshold(), make_column_selector(dtype_include=bool))],\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    \n+    # Fit and transform without set_output - should return numpy array\n+    out_numpy = ct.fit_transform(df)\n+    assert isinstance(out_numpy, np.ndarray)\n+    assert out_numpy.shape == (3, 2)\n+    \n+    # Set output to pandas\n+    ct.set_output(transform=\"pandas\")\n+    \n+    # Transform should now return DataFrame with correct dtypes\n+    out_pandas = ct.transform(df)\n+    assert isinstance(out_pandas, pd.DataFrame)\n+    assert out_pandas.shape == (3, 2)\n+    assert list(out_pandas.columns) == [\"a\", \"b\"]\n+    # Check that boolean values are preserved (this was the bug)\n+    assert out_pandas[\"a\"].dtype == bool\n+    assert list(out_pandas[\"a\"]) == [True, False, True]\n+    \n+    # Test with StandardScaler as remainder\n+    ct2 = ColumnTransformer(\n+        [(\"bool\", \"passthrough\", [\"a\"])],\n+        remainder=StandardScaler(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+    \n+    result = ct2.fit_transform(df)\n+    assert isinstance(result, pd.DataFrame)\n+    assert result.shape == (3, 2)\n+    # Check that StandardScaler was applied to remainder column\n+    assert np.abs(result[\"b\"].mean()) < 1e-10  # Should be close to 0\n+    assert np.abs(result[\"b\"].std(ddof=0) - 1.0) < 1e-10  # Should be close to 1\n+\n+\n # PandasOutTransformer that does not define get_feature_names_out and always expects\n # the input to be a DataFrame.\n class PandasOutTransformer(BaseEstimator):\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..e410fd772\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,93 @@\n+import pandas as pd\n+import numpy as np\n+from sklearn.compose import make_column_selector, make_column_transformer\n+from sklearn.feature_selection import VarianceThreshold\n+from sklearn.preprocessing import StandardScaler, MinMaxScaler\n+from sklearn.impute import SimpleImputer\n+\n+# Test 1: Basic test with remainder as estimator and pandas output\n+print(\"Test 1: Basic test with remainder as estimator\")\n+df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+ct = make_column_transformer(\n+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+    remainder=VarianceThreshold(),\n+    verbose_feature_names_out=False,\n+)\n+ct.set_output(transform=\"pandas\")\n+out = ct.fit_transform(df)\n+print(\"Output:\", out.to_dict())\n+print(\"Success: Boolean values preserved\\n\")\n+\n+# Test 2: Test with remainder=\"passthrough\"\n+print(\"Test 2: Test with remainder='passthrough'\")\n+ct2 = make_column_transformer(\n+    (StandardScaler(), [\"b\"]),\n+    remainder=\"passthrough\",\n+    verbose_feature_names_out=False,\n+)\n+ct2.set_output(transform=\"pandas\")\n+out2 = ct2.fit_transform(df)\n+print(\"Output columns:\", out2.columns.tolist())\n+print(\"Success: Passthrough columns included\\n\")\n+\n+# Test 3: Test with remainder=\"drop\" (default)\n+print(\"Test 3: Test with remainder='drop'\")\n+ct3 = make_column_transformer(\n+    (StandardScaler(), [\"b\"]),\n+    remainder=\"drop\",\n+    verbose_feature_names_out=False,\n+)\n+ct3.set_output(transform=\"pandas\")\n+out3 = ct3.fit_transform(df)\n+print(\"Output shape:\", out3.shape)\n+print(\"Success: Non-selected columns dropped\\n\")\n+\n+# Test 4: Test with numpy output (default)\n+print(\"Test 4: Test with numpy output\")\n+ct4 = make_column_transformer(\n+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+    remainder=VarianceThreshold(),\n+    verbose_feature_names_out=False,\n+)\n+# No set_output call - should use default numpy\n+out4 = ct4.fit_transform(df)\n+print(\"Output type:\", type(out4))\n+print(\"Output shape:\", out4.shape)\n+print(\"Success: Numpy output as expected\\n\")\n+\n+# Test 5: Test with more complex scenario\n+print(\"Test 5: Complex scenario with multiple transformers and remainder\")\n+df_complex = pd.DataFrame({\n+    \"bool_col\": [True, False, True, False],\n+    \"int_col\": [1, 2, 3, 4],\n+    \"float_col\": [1.1, 2.2, 3.3, 4.4],\n+    \"nan_col\": [1.0, np.nan, 3.0, np.nan]\n+})\n+\n+ct5 = make_column_transformer(\n+    (StandardScaler(), [\"int_col\"]),\n+    (MinMaxScaler(), [\"float_col\"]),\n+    remainder=SimpleImputer(strategy=\"mean\"),\n+    verbose_feature_names_out=False,\n+)\n+ct5.set_output(transform=\"pandas\")\n+out5 = ct5.fit_transform(df_complex)\n+print(\"Output columns:\", out5.columns.tolist())\n+print(\"Output shape:\", out5.shape)\n+print(\"NaN values handled:\", not out5.isna().any().any())\n+print(\"Success: Complex scenario works correctly\\n\")\n+\n+# Test 6: Test that the fix doesn't affect fitted transformers\n+print(\"Test 6: Test with already fitted transformer\")\n+ct6 = make_column_transformer(\n+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+    remainder=VarianceThreshold(),\n+    verbose_feature_names_out=False,\n+)\n+ct6.fit(df)\n+ct6.set_output(transform=\"pandas\")  # Setting output after fitting\n+out6 = ct6.transform(df)\n+print(\"Output after setting output post-fit:\", out6.to_dict())\n+print(\"Success: Post-fit output setting works\\n\")\n+\n+print(\"All tests passed!\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 000000000..fb7203191\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,24 @@\n+import pandas as pd\n+from sklearn.compose import make_column_selector, make_column_transformer\n+from sklearn.feature_selection import VarianceThreshold\n+\n+df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+print(\"Test case 1: ColumnTransformer with remainder as estimator\")\n+out1 = make_column_transformer(\n+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+    remainder=VarianceThreshold(),\n+    verbose_feature_names_out=False,\n+).set_output(transform=\"pandas\").fit_transform(df)\n+print(out1)\n+print(f\"Type of output: {type(out1)}\")\n+print()\n+\n+print(\"Test case 2: ColumnTransformer with explicit transformers for all columns\")\n+out2 = make_column_transformer(\n+    (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+    (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+    verbose_feature_names_out=False,\n+).set_output(transform=\"pandas\").fit_transform(df)\n+print(out2)\n+print(f\"Type of output: {type(out2)}\")\ndiff --git a/test_remainder_estimator_set_output.py b/test_remainder_estimator_set_output.py\nnew file mode 100644\nindex 000000000..1e3d8b430\n--- /dev/null\n+++ b/test_remainder_estimator_set_output.py\n@@ -0,0 +1,81 @@\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.compose import ColumnTransformer, make_column_selector\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.feature_selection import VarianceThreshold\n+\n+\n+def test_column_transformer_set_output_with_remainder_estimator():\n+    \"\"\"Test that set_output applies to remainder when it's an estimator.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    # Test with VarianceThreshold as remainder\n+    ct = ColumnTransformer(\n+        [(\"bool_selector\", VarianceThreshold(), make_column_selector(dtype_include=bool))],\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    \n+    # Fit and transform without set_output - should return numpy array\n+    out_numpy = ct.fit_transform(df)\n+    assert isinstance(out_numpy, np.ndarray)\n+    assert out_numpy.shape == (3, 2)\n+    \n+    # Set output to pandas\n+    ct.set_output(transform=\"pandas\")\n+    \n+    # Transform should now return DataFrame\n+    out_pandas = ct.transform(df)\n+    assert isinstance(out_pandas, pd.DataFrame)\n+    assert out_pandas.shape == (3, 2)\n+    assert list(out_pandas.columns) == [\"a\", \"b\"]\n+    # Check that boolean values are preserved\n+    assert out_pandas[\"a\"].dtype == bool\n+    assert list(out_pandas[\"a\"]) == [True, False, True]\n+    \n+    # Test with fit_transform after set_output\n+    ct2 = ColumnTransformer(\n+        [(\"bool_selector\", VarianceThreshold(), make_column_selector(dtype_include=bool))],\n+        remainder=StandardScaler(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+    out_pandas2 = ct2.fit_transform(df)\n+    assert isinstance(out_pandas2, pd.DataFrame)\n+    assert out_pandas2.shape == (3, 2)\n+    \n+\n+def test_column_transformer_set_output_complex_remainder():\n+    \"\"\"Test set_output with different transformer types in remainder.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    df = pd.DataFrame({\n+        \"bool_col\": [True, False, True, False],\n+        \"int_col\": [1, 2, 3, 4],\n+        \"float_col\": [1.1, 2.2, 3.3, 4.4],\n+    })\n+    \n+    # Use StandardScaler as remainder\n+    ct = ColumnTransformer(\n+        [(\"bool\", \"passthrough\", [\"bool_col\"])],\n+        remainder=StandardScaler(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    \n+    result = ct.fit_transform(df)\n+    assert isinstance(result, pd.DataFrame)\n+    assert result.shape == (4, 3)\n+    assert list(result.columns) == [\"bool_col\", \"int_col\", \"float_col\"]\n+    # Check that StandardScaler was applied to remainder columns\n+    assert np.abs(result[\"int_col\"].mean()) < 1e-10  # Should be close to 0\n+    assert np.abs(result[\"float_col\"].mean()) < 1e-10  # Should be close to 0\n+\n+\n+if __name__ == \"__main__\":\n+    test_column_transformer_set_output_with_remainder_estimator()\n+    test_column_transformer_set_output_complex_remainder()\n+    print(\"All tests passed!\")\n", "gold_standard_diff": "diff --git a/doc/whats_new/v1.3.rst b/doc/whats_new/v1.3.rst\nindex fdceb35b6e4f6..ea5157d8824c8 100644\n--- a/doc/whats_new/v1.3.rst\n+++ b/doc/whats_new/v1.3.rst\n@@ -235,6 +235,9 @@ Changelog\n   output pandas dataframes with indexes that are not consistent with each other and the output is configured\n   to be pandas. :pr:`26286` by `Thomas Fan`_.\n \n+- |Fix| :class:`compose.ColumnTransformer` correctly sets the output of the\n+  remainder when `set_output` is called. :pr:`26323` by `Thomas Fan`_.\n+\n :mod:`sklearn.covariance`\n .........................\n \ndiff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1baea..aab021c0c8d4f 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -293,6 +293,7 @@ def set_output(self, *, transform=None):\n             Estimator instance.\n         \"\"\"\n         super().set_output(transform=transform)\n+\n         transformers = (\n             trans\n             for _, trans, _ in chain(\n@@ -303,6 +304,9 @@ def set_output(self, *, transform=None):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        if self.remainder not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self.remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\ndiff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b9c8f58317e4e..cb9ddc0b4f344 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,7 @@\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2185,3 +2186,27 @@ def test_raise_error_if_index_not_aligned():\n     )\n     with pytest.raises(ValueError, match=msg):\n         ct.fit_transform(X)\n+\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    pd = pytest.importorskip(\"pandas\")\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/26323"}