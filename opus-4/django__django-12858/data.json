{"instance_id": "django__django-12858", "score": "C", "diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6c9e9d3707..124db6eed0 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1747,7 +1747,7 @@ class Model(metaclass=ModelBase):\n                     else:\n                         _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n-                    if fld is None or fld.get_transform(part) is None:\n+                    if fld is None or (fld.get_transform(part) is None and fld.get_lookup(part) is None):\n                         errors.append(\n                             checks.Error(\n                                 \"'ordering' refers to the nonexistent field, \"\ndiff --git a/test_issue_simple.py b/test_issue_simple.py\nnew file mode 100644\nindex 0000000000..105a091aa8\n--- /dev/null\n+++ b/test_issue_simple.py\n@@ -0,0 +1,103 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Add the testbed directory to Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Configure minimal Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django.db import models\n+from django.db.models.lookups import IsNull\n+\n+# Define test models matching the issue description\n+class Product(models.Model):\n+    name = models.CharField(max_length=100)\n+    parent = models.ForeignKey('self', models.CASCADE, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+class Supply(models.Model):\n+    product = models.ForeignKey(Product, models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+class Stock(models.Model):\n+    supply = models.ForeignKey(Supply, models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test'\n+        ordering = ['supply__product__parent__isnull']\n+\n+# Run system check\n+print(\"Running system check for Stock model...\")\n+errors = Stock.check()\n+if errors:\n+    print(\"ERRORS FOUND:\")\n+    for error in errors:\n+        print(f\"  {error.id}: {error.msg}\")\n+else:\n+    print(\"No errors found - but we expected an E015 error!\")\n+\n+# Let's trace through what happens in the check\n+print(\"\\nDebugging the ordering check logic...\")\n+from django.db.models.constants import LOOKUP_SEP\n+\n+# Get the ordering field\n+ordering_field = 'supply__product__parent__isnull'\n+print(f\"Checking ordering field: {ordering_field}\")\n+\n+# Split by LOOKUP_SEP\n+parts = ordering_field.split(LOOKUP_SEP)\n+print(f\"Parts: {parts}\")\n+\n+# Verify that 'isnull' is a valid lookup\n+from django.db.models import Field\n+print(f\"\\nIs 'isnull' a valid lookup for fields? {Field.class_lookups.get('isnull') is not None}\")\n+print(f\"IsNull lookup class: {Field.class_lookups.get('isnull')}\")\n+\n+# Check if the field path is valid\n+try:\n+    from django.db import connection\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Product)\n+        schema_editor.create_model(Supply)\n+        schema_editor.create_model(Stock)\n+    \n+    # Test the ordering\n+    print(\"\\nTesting if ordering actually works...\")\n+    # Create test data\n+    p1 = Product.objects.create(name=\"P1\", parent=None)\n+    p2 = Product.objects.create(name=\"P2\", parent=p1)\n+    s1 = Supply.objects.create(product=p1)\n+    s2 = Supply.objects.create(product=p2)\n+    st1 = Stock.objects.create(supply=s1)\n+    st2 = Stock.objects.create(supply=s2)\n+    \n+    # This should work\n+    result = list(Stock.objects.order_by('supply__product__parent__isnull').values_list('pk', flat=True))\n+    print(f\"Order by result: {result}\")\n+    print(\"\u2713 Ordering works correctly in queries!\")\n+    \n+except Exception as e:\n+    print(f\"Error during test: {e}\")\ndiff --git a/test_ordering_issue.py b/test_ordering_issue.py\nnew file mode 100644\nindex 0000000000..593b708bd7\n--- /dev/null\n+++ b/test_ordering_issue.py\n@@ -0,0 +1,87 @@\n+import os\n+import django\n+from django.conf import settings\n+from django.db import models\n+\n+# Configure Django settings\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'test_settings'\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'test_app',\n+        ],\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+# Define test models\n+class Product(models.Model):\n+    name = models.CharField(max_length=100)\n+    parent = models.ForeignKey('self', models.CASCADE, null=True)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Supply(models.Model):\n+    product = models.ForeignKey(Product, models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Stock(models.Model):\n+    supply = models.ForeignKey(Supply, models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+        ordering = ['supply__product__parent__isnull']\n+\n+# Test the system check\n+from django.core import checks\n+\n+print(\"Running system checks...\")\n+errors = Stock.check()\n+if errors:\n+    print(\"Errors found:\")\n+    for error in errors:\n+        print(f\"  - {error}\")\n+else:\n+    print(\"No errors found!\")\n+\n+# Test if the ordering actually works\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations.loader import MigrationLoader\n+\n+# Create tables\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Product)\n+    schema_editor.create_model(Supply) \n+    schema_editor.create_model(Stock)\n+\n+# Create some test data\n+parent_product = Product.objects.create(name=\"Parent Product\", parent=None)\n+child_product = Product.objects.create(name=\"Child Product\", parent=parent_product)\n+supply1 = Supply.objects.create(product=parent_product)\n+supply2 = Supply.objects.create(product=child_product)\n+stock1 = Stock.objects.create(supply=supply1)\n+stock2 = Stock.objects.create(supply=supply2)\n+\n+# Test ordering\n+print(\"\\nTesting ordering...\")\n+try:\n+    result = list(Stock.objects.order_by('supply__product__parent__isnull').values_list('pk', flat=True))\n+    print(f\"order_by result: {result}\")\n+    print(\"Ordering works fine!\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\ndiff --git a/test_ordering_lookups.py b/test_ordering_lookups.py\nnew file mode 100644\nindex 0000000000..f68a0dcb95\n--- /dev/null\n+++ b/test_ordering_lookups.py\n@@ -0,0 +1,100 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.test import TestCase\n+from django.test.utils import isolate_apps\n+\n+# Add the testbed directory to Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Configure Django settings\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'\n+\n+django.setup()\n+\n+from django.db import models\n+\n+class OrderingLookupTests(TestCase):\n+    \"\"\"Test that ordering with lookups doesn't raise models.E015\"\"\"\n+    \n+    @isolate_apps('invalid_models_tests')\n+    def test_ordering_with_isnull_lookup(self):\n+        \"\"\"Test that ordering by a field with __isnull lookup is allowed\"\"\"\n+        class Product(models.Model):\n+            name = models.CharField(max_length=100)\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+            \n+            class Meta:\n+                app_label = 'invalid_models_tests'\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+            \n+            class Meta:\n+                app_label = 'invalid_models_tests'\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+            \n+            class Meta:\n+                app_label = 'invalid_models_tests'\n+                ordering = ['supply__product__parent__isnull']\n+\n+        # The model should pass checks without errors\n+        errors = Stock.check()\n+        self.assertEqual(errors, [])\n+    \n+    @isolate_apps('invalid_models_tests')\n+    def test_ordering_with_invalid_lookup(self):\n+        \"\"\"Test that ordering by an invalid lookup still raises models.E015\"\"\"\n+        class Product(models.Model):\n+            name = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                app_label = 'invalid_models_tests'\n+\n+        class Stock(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+            \n+            class Meta:\n+                app_label = 'invalid_models_tests'\n+                ordering = ['product__name__invalidlookup']\n+\n+        # This should still raise an error\n+        errors = Stock.check()\n+        self.assertEqual(len(errors), 1)\n+        self.assertEqual(errors[0].id, 'models.E015')\n+    \n+    @isolate_apps('invalid_models_tests') \n+    def test_ordering_with_transform(self):\n+        \"\"\"Test that ordering by a field with a transform (like __lower) is allowed\"\"\"\n+        from django.db.models.functions import Lower\n+        from django.test.utils import register_lookup\n+        \n+        class Product(models.Model):\n+            name = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                app_label = 'invalid_models_tests'\n+                ordering = ['name__lower']\n+\n+        # Register the lookup temporarily\n+        with register_lookup(models.CharField, Lower):\n+            errors = Product.check()\n+            self.assertEqual(errors, [])\n+\n+if __name__ == '__main__':\n+    from django.test import TestCase\n+    from django.test.runner import DiscoverRunner\n+    runner = DiscoverRunner(verbosity=2, interactive=False)\n+    runner.setup_test_environment()\n+    runner.setup_databases()\n+    \n+    # Run the tests\n+    suite = runner.test_loader.loadTestsFromTestCase(OrderingLookupTests)\n+    runner.run_suite(suite)\n+    \n+    runner.teardown_databases()\n+    runner.teardown_test_environment()\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6bfdf2e736..938909bf16 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1339,6 +1339,36 @@ class OtherModelTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_ordering_with_lookup_isnull(self):\n+        \"\"\"Test that ordering by a field with __isnull lookup is allowed.\"\"\"\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+            class Meta:\n+                ordering = ('parent__isnull',)\n+\n+        self.assertEqual(Child.check(), [])\n+\n+    def test_ordering_with_related_field_lookup_isnull(self):\n+        \"\"\"Test that ordering by a related field with __isnull lookup is allowed.\"\"\"\n+        class Product(models.Model):\n+            name = models.CharField(max_length=100)\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ['supply__product__parent__isnull']\n+\n+        self.assertEqual(Stock.check(), [])\n+\n \n @isolate_apps('invalid_models_tests')\n class ConstraintsTests(TestCase):\n", "gold_standard_diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6c9e9d37074a..bc6f7d283e2d 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1747,7 +1747,9 @@ def _check_ordering(cls):\n                     else:\n                         _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n-                    if fld is None or fld.get_transform(part) is None:\n+                    if fld is None or (\n+                        fld.get_transform(part) is None and fld.get_lookup(part) is None\n+                    ):\n                         errors.append(\n                             checks.Error(\n                                 \"'ordering' refers to the nonexistent field, \"\ndiff --git a/docs/releases/3.0.7.txt b/docs/releases/3.0.7.txt\nindex 6b204973bea0..9fc71d9aa28b 100644\n--- a/docs/releases/3.0.7.txt\n+++ b/docs/releases/3.0.7.txt\n@@ -9,4 +9,5 @@ Django 3.0.7 fixes several bugs in 3.0.6.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 3.0 by restoring the ability to use field\n+  lookups in ``Meta.ordering`` (:ticket:`31538`).\ndiff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6bfdf2e73658..5a1bb4cc7a6b 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,6 +893,15 @@ class Meta:\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n+    def test_ordering_pointing_to_lookup_not_transform(self):\n+        class Model(models.Model):\n+            test = models.CharField(max_length=100)\n+\n+            class Meta:\n+                ordering = ('test__isnull',)\n+\n+        self.assertEqual(Model.check(), [])\n+\n     def test_ordering_pointing_to_related_model_pk(self):\n         class Parent(models.Model):\n             pass\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12858"}