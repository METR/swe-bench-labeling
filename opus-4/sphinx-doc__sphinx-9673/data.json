{"instance_id": "sphinx-doc__sphinx-9673", "score": "C", "diff": "diff --git a/setup.py b/setup.py\nindex 2b4504101..d865b8b37 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp>=2.0.0',\n-    'sphinxcontrib-serializinghtml>=1.1.5',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',\n+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb0..06a9594b4 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -103,6 +103,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n+        elif parts[0] == 'returns':\n+            arguments['return'] = arguments.get('return', {})\n+            arguments['return']['param'] = True\n \n     for name, annotation in annotations.items():\n         if name == 'return':\n@@ -120,11 +123,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n-    if 'return' in annotations and 'return' not in arguments:\n-        field = nodes.field()\n-        field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n-        node += field\n+    if 'return' in annotations:\n+        if 'return' not in arguments or not arguments.get('return', {}).get('type'):\n+            field = nodes.field()\n+            field += nodes.field_name('', 'rtype')\n+            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            node += field\n \n \n def augment_descriptions_with_types(\n@@ -151,6 +155,8 @@ def augment_descriptions_with_types(\n             has_type.add(name)\n         elif parts[0] == 'return':\n             has_description.add('return')\n+        elif parts[0] == 'returns':\n+            has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n \ndiff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex d6334b9eb..b27a63f05 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -97,6 +97,30 @@ class ProcessDocstringTest(TestCase):\n class SetupTest(TestCase):\n     def test_unknown_app_type(self):\n         setup(object())\n+    \n+    def test_napoleon_with_autodoc_typehints_description_target(self):\n+        \"\"\"Test that Napoleon works with autodoc_typehints_description_target.\"\"\"\n+        # Test that when using napoleon with autodoc_typehints_description_target,\n+        # the return type is correctly added for functions with documented returns\n+        lines = ['Summary line.',\n+                 '',\n+                 'Args:',\n+                 '    arg1 (str): arg1 description',\n+                 '',\n+                 'Returns:',\n+                 '    The result.']\n+        \n+        app = mock.Mock()\n+        app.config = Config()\n+        app.config.napoleon_use_rtype = True\n+        \n+        # Process the docstring\n+        _process_docstring(app, 'function', 'test_func', None, mock.Mock(), lines)\n+        \n+        # Check that it generates :returns: (not :return:) \n+        # This is what caused the issue - autodoc typehints was looking for :return:\n+        # but Napoleon generates :returns:\n+        self.assertIn(':returns: The result.', lines)\n \n     def test_add_config_values(self):\n         app = mock.Mock(Sphinx)\ndiff --git a/tox.ini b/tox.ini\nindex b6a67fd85..483f2df92 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex 49d8dcf8123..0f7a516010f 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -24,6 +24,9 @@ Bugs fixed\n   is not 'py'\n * #9644: autodoc: Crashed on getting source info from problematic object\n * #9655: autodoc: mocked object having doc comment is warned unexpectedly\n+* #9651: autodoc: return type field is not generated even if\n+  :confval:`autodoc_typehints_description_target` is set to \"documented\" when\n+  its info-field-list contains ``:returns:`` field\n * #9630: autosummary: Failed to build summary table if :confval:`primary_domain`\n   is not 'py'\n * #9670: html: Fix download file with special characters\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex af4b47bb059..f4b4dd35e57 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -149,14 +149,14 @@ def augment_descriptions_with_types(\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n-        elif parts[0] == 'return':\n+        elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n \n     # Add 'type' for parameters with a description but no declared type.\n     for name in annotations:\n-        if name == 'return':\n+        if name in ('return', 'returns'):\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex f6436f541a3..e04cd83b681 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -844,6 +844,10 @@ def test_autodoc_typehints_description_no_undoc(app):\n     (app.srcdir / 'index.rst').write_text(\n         '.. autofunction:: target.typehints.incr\\n'\n         '\\n'\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+        '   :returns: decremented number\\n'\n+        '\\n'\n         '.. autofunction:: target.typehints.tuple_args\\n'\n         '\\n'\n         '   :param x: arg\\n'\n@@ -852,6 +856,14 @@ def test_autodoc_typehints_description_no_undoc(app):\n     app.build()\n     context = (app.outdir / 'index.txt').read_text()\n     assert ('target.typehints.incr(a, b=1)\\n'\n+            '\\n'\n+            'target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n             '\\n'\n             'target.typehints.tuple_args(x)\\n'\n             '\\n'\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9673"}