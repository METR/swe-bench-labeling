{"instance_id": "sympy__sympy-20428", "score": "I", "diff": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex 70112de3b6..c0fd75af73 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -2250,6 +2250,10 @@ def clear_denoms(self, convert=False):\n \n         coeff, f = dom.to_sympy(coeff), f.per(result)\n \n+        # Strip leading zeros from the result\n+        if f.is_zero:\n+            f = f.zero()\n+\n         if not convert or not dom.has_assoc_Ring:\n             return coeff, f\n         else:\ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex c774fc41e2..bb15f2d2cc 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -2277,6 +2277,14 @@ def test_sturm():\n          Poly((-3686400000000*pi**4 - 11520000*pi**8 - 9*pi**12)/(26214400000000 - 245760000*pi**4 + 576*pi**8), x, domain='ZZ(pi)')]\n \n \n+def test_clear_denoms_zero_poly():\n+    from sympy import sympify, sqrt, symbols\n+    x = symbols(\"x\")\n+    f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+    coeff, bad_poly = f.clear_denoms()\n+    assert bad_poly.is_zero\n+    assert bad_poly.as_expr() == 0\n+    assert bad_poly.rep == DMP([], bad_poly.rep.dom, bad_poly.rep.lev)\n def test_gff():\n     f = x**5 + 2*x**4 - x**3 - 2*x**2\n \n", "gold_standard_diff": "From 22c48bd88760c8bf7c2e23ce064460a95132e6f4 Mon Sep 17 00:00:00 2001\nFrom: Ehren Metcalfe <ehren.m@gmail.com>\nDate: Sat, 14 Nov 2020 00:50:07 -0500\nSubject: [PATCH] Use assumption system instead of structural equality check in\n __bool__ method of ExpressionDomain Expression\n\nAvoids unstripped 0 bug\n---\n sympy/polys/domains/expressiondomain.py |  2 +-\n sympy/polys/tests/test_polytools.py     | 14 ++++++++++++++\n 2 files changed, 15 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/polys/domains/expressiondomain.py b/sympy/polys/domains/expressiondomain.py\nindex 1ce2316dc66f..3813fa394d4c 100644\n--- a/sympy/polys/domains/expressiondomain.py\n+++ b/sympy/polys/domains/expressiondomain.py\n@@ -120,7 +120,7 @@ def __ne__(f, g):\n             return not f == g\n \n         def __bool__(f):\n-            return f.ex != 0\n+            return not f.ex.is_zero\n \n         def gcd(f, g):\n             from sympy.polys import gcd\ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex c774fc41e294..9dd8df41fc95 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -1458,6 +1458,20 @@ def test_Poly_rat_clear_denoms():\n     assert f.rat_clear_denoms(g) == (f, g)\n \n \n+def test_issue_20427():\n+    f = Poly(-117968192370600*18**(S(1)/3)/(217603955769048*(24201 +\n+        253*sqrt(9165))**(S(1)/3) + 2273005839412*sqrt(9165)*(24201 +\n+        253*sqrt(9165))**(S(1)/3)) - 15720318185*2**(S(2)/3)*3**(S(1)/3)*(24201\n+        + 253*sqrt(9165))**(S(2)/3)/(217603955769048*(24201 + 253*sqrt(9165))**\n+        (S(1)/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(S(1)/3))\n+        + 15720318185*12**(S(1)/3)*(24201 + 253*sqrt(9165))**(S(2)/3)/(\n+        217603955769048*(24201 + 253*sqrt(9165))**(S(1)/3) + 2273005839412*\n+        sqrt(9165)*(24201 + 253*sqrt(9165))**(S(1)/3)) + 117968192370600*2**(\n+        S(1)/3)*3**(S(2)/3)/(217603955769048*(24201 + 253*sqrt(9165))**(S(1)/3)\n+        + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(S(1)/3)), x)\n+    assert f == Poly(0, x, domain='EX')\n+\n+\n def test_Poly_integrate():\n     assert Poly(x + 1).integrate() == Poly(x**2/2 + x)\n     assert Poly(x + 1).integrate(x) == Poly(x**2/2 + x)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/20428"}