{"instance_id": "sympy__sympy-15976", "score": "C", "diff": "diff --git a/check_tests.py b/check_tests.py\nnew file mode 100644\nindex 0000000000..9609362319\n--- /dev/null\n+++ b/check_tests.py\n@@ -0,0 +1,23 @@\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+from sympy import Symbol\n+from sympy.printing.mathml import MathMLPresentationPrinter\n+\n+mpp = MathMLPresentationPrinter()\n+\n+# Test simple symbol\n+mml = mpp._print(Symbol(\"x\"))\n+print(f\"Symbol('x'): nodeName = {mml.nodeName}\")\n+\n+# Test symbol with superscript\n+mml = mpp._print(Symbol(\"x^2\"))\n+print(f\"Symbol('x^2'): nodeName = {mml.nodeName}\")\n+\n+# Test symbol with subscript\n+mml = mpp._print(Symbol(\"x_2\"))\n+print(f\"Symbol('x_2'): nodeName = {mml.nodeName}\")\n+\n+# Test symbol ending with number\n+mml = mpp._print(Symbol(\"x2\"))\n+print(f\"Symbol('x2'): nodeName = {mml.nodeName}\")\ndiff --git a/fix_tests.py b/fix_tests.py\nnew file mode 100644\nindex 0000000000..7de2f4dd2e\n--- /dev/null\n+++ b/fix_tests.py\n@@ -0,0 +1,58 @@\n+import re\n+\n+# Read the test file\n+with open('./sympy/printing/tests/test_mathml.py', 'r') as f:\n+    content = f.read()\n+\n+# Pattern to find the test assertions that need updating\n+# We need to update all patterns where mml.nodeName == 'mi' followed by msub/msup/msubsup\n+\n+# For x_2 pattern (subscript)\n+pattern1 = r'''    mml = mpp._print\\(Symbol\\(\"x_2\"\\)\\)\n+    assert mml.nodeName == 'mi'\n+    assert mml.childNodes\\[0\\].nodeName == 'msub'\n+    assert mml.childNodes\\[0\\].childNodes\\[0\\].nodeName == 'mi'\n+    assert mml.childNodes\\[0\\].childNodes\\[0\\].childNodes\\[0\\].nodeValue == 'x'\n+    assert mml.childNodes\\[0\\].childNodes\\[1\\].nodeName == 'mi'\n+    assert mml.childNodes\\[0\\].childNodes\\[1\\].childNodes\\[0\\].nodeValue == '2'\n+    del mml'''\n+\n+replacement1 = '''    mml = mpp._print(Symbol(\"x_2\"))\n+    assert mml.nodeName == 'msub'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n+    del mml'''\n+\n+content = content.replace(pattern1, replacement1)\n+\n+# For x^3_2 pattern (msubsup)\n+pattern2 = r'''    mml = mpp._print\\(Symbol\\(\"x\\^3_2\"\\)\\)\n+    assert mml.nodeName == 'mi'\n+    assert mml.childNodes\\[0\\].nodeName == 'msubsup'\n+    assert mml.childNodes\\[0\\].childNodes\\[0\\].nodeName == 'mi'\n+    assert mml.childNodes\\[0\\].childNodes\\[0\\].childNodes\\[0\\].nodeValue == 'x'\n+    assert mml.childNodes\\[0\\].childNodes\\[1\\].nodeName == 'mi'\n+    assert mml.childNodes\\[0\\].childNodes\\[1\\].childNodes\\[0\\].nodeValue == '2'\n+    assert mml.childNodes\\[0\\].childNodes\\[2\\].nodeName == 'mi'\n+    assert mml.childNodes\\[0\\].childNodes\\[2\\].childNodes\\[0\\].nodeValue == '3'\n+    del mml'''\n+\n+replacement2 = '''    mml = mpp._print(Symbol(\"x^3_2\"))\n+    assert mml.nodeName == 'msubsup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[2].childNodes[0].nodeValue == '3'\n+    del mml'''\n+\n+content = content.replace(pattern2, replacement2)\n+\n+# Write the updated content back\n+with open('./sympy/printing/tests/test_mathml.py', 'w') as f:\n+    f.write(content)\n+\n+print(\"Test file updated successfully!\")\ndiff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 3f8b8d49e0..50fd256682 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -743,11 +743,6 @@ def _print_Sum(self, e):\n         return mrow\n \n     def _print_Symbol(self, sym, style='plain'):\n-        x = self.dom.createElement('mi')\n-\n-        if style == 'bold':\n-            x.setAttribute('mathvariant', 'bold')\n-\n         def join(items):\n             if len(items) > 1:\n                 mrow = self.dom.createElement('mrow')\n@@ -779,27 +774,29 @@ def translate(s):\n \n         mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n+        if style == 'bold':\n+            mname.setAttribute('mathvariant', 'bold')\n+            \n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                return mname\n             else:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n                 msub.appendChild(join(subs))\n-                x.appendChild(msub)\n+                return msub\n         else:\n             if len(subs) == 0:\n                 msup = self.dom.createElement('msup')\n                 msup.appendChild(mname)\n                 msup.appendChild(join(supers))\n-                x.appendChild(msup)\n+                return msup\n             else:\n                 msubsup = self.dom.createElement('msubsup')\n                 msubsup.appendChild(mname)\n                 msubsup.appendChild(join(subs))\n                 msubsup.appendChild(join(supers))\n-                x.appendChild(msubsup)\n-        return x\n+                return msubsup\n \n     def _print_MatrixSymbol(self, sym):\n         return self._print_Symbol(sym, style=self._settings['mat_symbol_style'])\ndiff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\nindex 70c23a4078..b4adb3d483 100644\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -735,21 +735,19 @@ def test_presentation_symbol():\n     del mml\n \n     mml = mpp._print(Symbol(\"x^2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x__2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x_2\"))\ndiff --git a/sympy_test.html b/sympy_test.html\nnew file mode 100644\nindex 0000000000..d1775b5ee0\n--- /dev/null\n+++ b/sympy_test.html\n@@ -0,0 +1,13 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>MathML Test</title>\n+</head>\n+<body>\n+    <h1>Test Result</h1>\n+    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n+        <mrow><msup><mrow><mfenced><msub><mi>x</mi><mi>2</mi></msub></mfenced></mrow><mn>3</mn></msup><mo>+</mo><mrow><msub><mi>x</mi><mi>2</mi></msub><mo>&InvisibleTimes;</mo><mi>z</mi></mrow></mrow>\n+    </math>\n+</body>\n+</html>\ndiff --git a/test_comparison.html b/test_comparison.html\nnew file mode 100644\nindex 0000000000..417f3a7b10\n--- /dev/null\n+++ b/test_comparison.html\n@@ -0,0 +1,25 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>MathML Comparison Test</title>\n+</head>\n+<body>\n+    <h1>MathML Rendering Test</h1>\n+    \n+    <h2>Original broken rendering (with extra mi wrapper):</h2>\n+    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n+        <mi><msub><mi>x</mi><mi>2</mi></msub></mi>\n+    </math>\n+    \n+    <h2>Fixed rendering (without extra mi wrapper):</h2>\n+    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n+        <msub><mi>x</mi><mi>2</mi></msub>\n+    </math>\n+    \n+    <h2>Alternative: x2 as single symbol:</h2>\n+    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n+        <mi>x2</mi>\n+    </math>\n+</body>\n+</html>\ndiff --git a/test_explicit_subscript.py b/test_explicit_subscript.py\nnew file mode 100644\nindex 0000000000..5a0eb5841f\n--- /dev/null\n+++ b/test_explicit_subscript.py\n@@ -0,0 +1,17 @@\n+import sympy\n+from sympy.printing.mathml import mathml\n+\n+# Test symbols with explicit subscripts\n+x_2 = sympy.Symbol('x_2')\n+print(\"Symbol with explicit subscript x_2:\")\n+print(mathml(x_2, printer='presentation'))\n+\n+# Test symbols ending with digits\n+x2 = sympy.Symbol('x2')\n+print(\"\\nSymbol ending with digit x2:\")\n+print(mathml(x2, printer='presentation'))\n+\n+# Both in an expression\n+expr = x_2 + x2\n+print(\"\\nExpression x_2 + x2:\")\n+print(mathml(expr, printer='presentation'))\ndiff --git a/test_html_output.py b/test_html_output.py\nnew file mode 100644\nindex 0000000000..402d6152bb\n--- /dev/null\n+++ b/test_html_output.py\n@@ -0,0 +1,26 @@\n+import sympy\n+from sympy.printing.mathml import mathml\n+\n+x2, z = sympy.symbols('x2 z')\n+y = x2*z\n+\n+html_content = '''<!DOCTYPE html>\n+<html>\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>MathML Test</title>\n+</head>\n+<body>\n+    <h1>Test with x2 symbol</h1>\n+    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n+        {}\n+    </math>\n+</body>\n+</html>'''.format(mathml(y, printer='presentation'))\n+\n+with open('test_output.html', 'w') as f:\n+    f.write(html_content)\n+    \n+print(\"HTML file created as test_output.html\")\n+print(\"\\nMathML content:\")\n+print(mathml(y, printer='presentation'))\ndiff --git a/test_mathml_issue.py b/test_mathml_issue.py\nnew file mode 100644\nindex 0000000000..b28f4bf002\n--- /dev/null\n+++ b/test_mathml_issue.py\n@@ -0,0 +1,23 @@\n+import sympy\n+from sympy.printing.mathml import mathml\n+from sympy.printing.conventions import split_super_sub\n+\n+# Test the split_super_sub function\n+print(\"Testing split_super_sub function:\")\n+print(\"split_super_sub('x2'):\", split_super_sub('x2'))\n+print(\"split_super_sub('x'):\", split_super_sub('x'))\n+print(\"split_super_sub('x_2'):\", split_super_sub('x_2'))\n+\n+# Test the actual MathML output\n+x2, y, z = sympy.symbols('x2 y z')\n+y = x2*z + x2**3\n+\n+print(\"\\nMathML output for x2*z + x2**3:\")\n+print(mathml(y, printer='presentation'))\n+\n+# Test with regular x\n+x, y, z = sympy.symbols('x y z')\n+y = x*z + x**3\n+\n+print(\"\\nMathML output for x*z + x**3:\")\n+print(mathml(y, printer='presentation'))\ndiff --git a/test_output.html b/test_output.html\nnew file mode 100644\nindex 0000000000..9a3f1428d2\n--- /dev/null\n+++ b/test_output.html\n@@ -0,0 +1,13 @@\n+<!DOCTYPE html>\n+<html>\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>MathML Test</title>\n+</head>\n+<body>\n+    <h1>Test with x2 symbol</h1>\n+    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n+        <mrow><msub><mi>x</mi><mi>2</mi></msub><mo>&InvisibleTimes;</mo><mi>z</mi></mrow>\n+    </math>\n+</body>\n+</html>\n\\ No newline at end of file\ndiff --git a/test_presentation_symbol_fixed.py b/test_presentation_symbol_fixed.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_presentation_symbol_fixed.py\n@@ -0,0 +1 @@\n+\ndiff --git a/verify_fix.py b/verify_fix.py\nnew file mode 100644\nindex 0000000000..69e68c981e\n--- /dev/null\n+++ b/verify_fix.py\n@@ -0,0 +1,33 @@\n+import sympy\n+from sympy.printing.mathml import mathml\n+\n+# Test the exact scenario from the issue\n+x2, y, z = sympy.symbols('x2 y z')\n+y = x2*z + x2**3\n+\n+# Create the HTML file as in the issue\n+f = open('sympy_test.html', 'w')\n+f.write('<!DOCTYPE html>\\n')\n+f.write('<html>\\n')\n+f.write('<head>\\n')\n+f.write('    <meta charset=\"UTF-8\">\\n')\n+f.write('    <title>MathML Test</title>\\n')\n+f.write('</head>\\n')\n+f.write('<body>\\n')\n+f.write('    <h1>Test Result</h1>\\n')\n+f.write('    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n')\n+f.write('        ' + sympy.mathml(y, printer='presentation') + '\\n')\n+f.write('    </math>\\n')\n+f.write('</body>\\n')\n+f.write('</html>\\n')\n+f.close()\n+\n+print(\"Created sympy_test.html\")\n+print(\"\\nMathML output:\")\n+print(sympy.mathml(y, printer='presentation'))\n+\n+# Also test with regular x for comparison\n+x, y2, z = sympy.symbols('x y z')\n+y2 = x*z + x**3\n+print(\"\\nFor comparison, x*z + x**3:\")\n+print(sympy.mathml(y2, printer='presentation'))\n", "gold_standard_diff": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 3f8b8d49e01e..525a3a30d863 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -743,11 +743,6 @@ def _print_Sum(self, e):\n         return mrow\n \n     def _print_Symbol(self, sym, style='plain'):\n-        x = self.dom.createElement('mi')\n-\n-        if style == 'bold':\n-            x.setAttribute('mathvariant', 'bold')\n-\n         def join(items):\n             if len(items) > 1:\n                 mrow = self.dom.createElement('mrow')\n@@ -781,24 +776,24 @@ def translate(s):\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                x = mname\n             else:\n-                msub = self.dom.createElement('msub')\n-                msub.appendChild(mname)\n-                msub.appendChild(join(subs))\n-                x.appendChild(msub)\n+                x = self.dom.createElement('msub')\n+                x.appendChild(mname)\n+                x.appendChild(join(subs))\n         else:\n             if len(subs) == 0:\n-                msup = self.dom.createElement('msup')\n-                msup.appendChild(mname)\n-                msup.appendChild(join(supers))\n-                x.appendChild(msup)\n+                x = self.dom.createElement('msup')\n+                x.appendChild(mname)\n+                x.appendChild(join(supers))\n             else:\n-                msubsup = self.dom.createElement('msubsup')\n-                msubsup.appendChild(mname)\n-                msubsup.appendChild(join(subs))\n-                msubsup.appendChild(join(supers))\n-                x.appendChild(msubsup)\n+                x = self.dom.createElement('msubsup')\n+                x.appendChild(mname)\n+                x.appendChild(join(subs))\n+                x.appendChild(join(supers))\n+        # Set bold font?\n+        if style == 'bold':\n+            x.setAttribute('mathvariant', 'bold')\n         return x\n \n     def _print_MatrixSymbol(self, sym):\ndiff --git a/sympy/printing/tests/test_mathml.py b/sympy/printing/tests/test_mathml.py\nindex 70c23a407893..365da4e02e42 100644\n--- a/sympy/printing/tests/test_mathml.py\n+++ b/sympy/printing/tests/test_mathml.py\n@@ -735,103 +735,86 @@ def test_presentation_symbol():\n     del mml\n \n     mml = mpp._print(Symbol(\"x^2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x__2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x_2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msub'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.nodeName == 'msub'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n     del mml\n \n     mml = mpp._print(Symbol(\"x^3_2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msubsup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[2].childNodes[0].nodeValue == '3'\n+    assert mml.nodeName == 'msubsup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[2].childNodes[0].nodeValue == '3'\n     del mml\n \n     mml = mpp._print(Symbol(\"x__3_2\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msubsup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[2].childNodes[0].nodeValue == '3'\n+    assert mml.nodeName == 'msubsup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[2].childNodes[0].nodeValue == '3'\n     del mml\n \n     mml = mpp._print(Symbol(\"x_2_a\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msub'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mrow'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].childNodes[\n-        0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].nodeName == 'mo'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].childNodes[\n-        0].nodeValue == ' '\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].childNodes[\n-        0].nodeValue == 'a'\n+    assert mml.nodeName == 'msub'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mrow'\n+    assert mml.childNodes[1].childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[1].childNodes[1].nodeName == 'mo'\n+    assert mml.childNodes[1].childNodes[1].childNodes[0].nodeValue == ' '\n+    assert mml.childNodes[1].childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[2].childNodes[0].nodeValue == 'a'\n     del mml\n \n     mml = mpp._print(Symbol(\"x^2^a\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mrow'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].childNodes[\n-        0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].nodeName == 'mo'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].childNodes[\n-        0].nodeValue == ' '\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].childNodes[\n-        0].nodeValue == 'a'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mrow'\n+    assert mml.childNodes[1].childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[1].childNodes[1].nodeName == 'mo'\n+    assert mml.childNodes[1].childNodes[1].childNodes[0].nodeValue == ' '\n+    assert mml.childNodes[1].childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[2].childNodes[0].nodeValue == 'a'\n     del mml\n \n     mml = mpp._print(Symbol(\"x__2__a\"))\n-    assert mml.nodeName == 'mi'\n-    assert mml.childNodes[0].nodeName == 'msup'\n-    assert mml.childNodes[0].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[0].childNodes[0].nodeValue == 'x'\n-    assert mml.childNodes[0].childNodes[1].nodeName == 'mrow'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[0].childNodes[\n-        0].nodeValue == '2'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].nodeName == 'mo'\n-    assert mml.childNodes[0].childNodes[1].childNodes[1].childNodes[\n-        0].nodeValue == ' '\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].nodeName == 'mi'\n-    assert mml.childNodes[0].childNodes[1].childNodes[2].childNodes[\n-        0].nodeValue == 'a'\n+    assert mml.nodeName == 'msup'\n+    assert mml.childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[0].childNodes[0].nodeValue == 'x'\n+    assert mml.childNodes[1].nodeName == 'mrow'\n+    assert mml.childNodes[1].childNodes[0].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[0].childNodes[0].nodeValue == '2'\n+    assert mml.childNodes[1].childNodes[1].nodeName == 'mo'\n+    assert mml.childNodes[1].childNodes[1].childNodes[0].nodeValue == ' '\n+    assert mml.childNodes[1].childNodes[2].nodeName == 'mi'\n+    assert mml.childNodes[1].childNodes[2].childNodes[0].nodeValue == 'a'\n     del mml\n \n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/15976"}