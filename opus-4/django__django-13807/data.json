{"instance_id": "django__django-13807", "score": "C", "diff": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98c0d..5a4fcf89fd 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,19 +327,21 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute('PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                     primary_key_value, bad_value = cursor.execute(\n                         'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n-                            primary_key_column_name, column_name, table_name\n+                            self.ops.quote_name(primary_key_column_name), \n+                            self.ops.quote_name(column_name), \n+                            self.ops.quote_name(table_name)\n                         ),\n                         (rowid,),\n                     ).fetchone()\ndiff --git a/test_backticks.py b/test_backticks.py\nnew file mode 100644\nindex 0000000000..59f78c240a\n--- /dev/null\n+++ b/test_backticks.py\n@@ -0,0 +1,23 @@\n+import sqlite3\n+\n+# Test if SQLite accepts backticks\n+conn = sqlite3.connect(':memory:')\n+cursor = conn.cursor()\n+\n+# Create a table with a keyword name\n+cursor.execute('CREATE TABLE \"order\" (id INTEGER PRIMARY KEY, name TEXT)')\n+\n+# Test different quoting styles\n+try:\n+    cursor.execute('SELECT * FROM `order`')\n+    print(\"Backticks work in SQLite\")\n+except Exception as e:\n+    print(f\"Backticks don't work: {e}\")\n+\n+try:\n+    cursor.execute('SELECT * FROM \"order\"')\n+    print(\"Double quotes work in SQLite\")\n+except Exception as e:\n+    print(f\"Double quotes don't work: {e}\")\n+\n+conn.close()\ndiff --git a/test_loaddata.py b/test_loaddata.py\nnew file mode 100644\nindex 0000000000..cdbfa25f43\n--- /dev/null\n+++ b/test_loaddata.py\n@@ -0,0 +1,79 @@\n+import os\n+import sys\n+import json\n+import tempfile\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[],\n+    USE_TZ=False,\n+)\n+\n+django.setup()\n+\n+from django.db import connection\n+from django.core import serializers\n+from io import StringIO\n+\n+# Create a table with SQL keyword name directly\n+with connection.cursor() as cursor:\n+    cursor.execute('CREATE TABLE \"order\" (id INTEGER PRIMARY KEY, name VARCHAR(100))')\n+\n+# Create fixture data  \n+fixture_data = '''[\n+{\n+    \"model\": \"test.order\",\n+    \"pk\": 1,\n+    \"fields\": {\n+        \"name\": \"Test Order 1\"\n+    }\n+},\n+{\n+    \"model\": \"test.order\", \n+    \"pk\": 2,\n+    \"fields\": {\n+        \"name\": \"Test Order 2\"\n+    }\n+}\n+]'''\n+\n+print(\"Testing fixture loading simulation with table name 'order' (SQL keyword)...\")\n+\n+# First insert some data directly\n+with connection.cursor() as cursor:\n+    cursor.execute('INSERT INTO \"order\" (id, name) VALUES (1, \"Test Order 1\")')\n+    cursor.execute('INSERT INTO \"order\" (id, name) VALUES (2, \"Test Order 2\")')\n+\n+# Now test that check_constraints works during the loaddata process\n+# This simulates what happens in the loaddata command\n+try:\n+    # Disable constraint checking (as loaddata does)\n+    connection.disable_constraint_checking()\n+    \n+    # Check constraints on the 'order' table (as loaddata does)\n+    connection.check_constraints(['order'])\n+    \n+    # Re-enable constraint checking\n+    connection.enable_constraint_checking()\n+    \n+    print(\"SUCCESS: constraint checking on 'order' table works correctly!\")\n+    \n+    # Verify data exists\n+    with connection.cursor() as cursor:\n+        cursor.execute('SELECT COUNT(*) FROM \"order\"')\n+        count = cursor.fetchone()[0]\n+        print(f\"Table 'order' contains {count} records\")\n+        \n+except Exception as e:\n+    print(f\"ERROR: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/test_sqlite_foreign_keys.py b/test_sqlite_foreign_keys.py\nnew file mode 100644\nindex 0000000000..795e62b98a\n--- /dev/null\n+++ b/test_sqlite_foreign_keys.py\n@@ -0,0 +1,83 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[],\n+    USE_TZ=False,\n+)\n+\n+django.setup()\n+\n+from django.db import connection\n+from django.db.utils import IntegrityError\n+\n+# Create tables with SQL keyword names and foreign key relationships\n+with connection.cursor() as cursor:\n+    # Create a table with a keyword name 'select'\n+    cursor.execute('CREATE TABLE \"select\" (id INTEGER PRIMARY KEY, name VARCHAR(100))')\n+    \n+    # Create another table with keyword name 'order' that references 'select'\n+    cursor.execute('''\n+        CREATE TABLE \"order\" (\n+            id INTEGER PRIMARY KEY, \n+            select_id INTEGER,\n+            FOREIGN KEY (select_id) REFERENCES \"select\"(id)\n+        )\n+    ''')\n+    \n+    # Insert valid data\n+    cursor.execute('INSERT INTO \"select\" (id, name) VALUES (1, \"Test\")')\n+    cursor.execute('INSERT INTO \"order\" (id, select_id) VALUES (1, 1)')\n+    \n+    # Disable foreign key constraints to insert invalid data\n+    cursor.execute('PRAGMA foreign_keys = OFF')\n+    cursor.execute('INSERT INTO \"order\" (id, select_id) VALUES (2, 999)')\n+    cursor.execute('PRAGMA foreign_keys = ON')\n+\n+# Test check_constraints with foreign key violations\n+print(\"Testing check_constraints with foreign key violations on SQL keyword table names...\")\n+try:\n+    connection.check_constraints(['order', 'select'])\n+    print(\"ERROR: Expected IntegrityError but none was raised!\")\n+except IntegrityError as e:\n+    print(f\"SUCCESS: Got expected IntegrityError: {e}\")\n+except Exception as e:\n+    print(f\"ERROR: Got unexpected exception: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\n+\n+# Test with no specific tables (check all tables)\n+print(\"\\nTesting check_constraints with no specific tables...\")\n+try:\n+    connection.check_constraints()\n+    print(\"ERROR: Expected IntegrityError but none was raised!\")\n+except IntegrityError as e:\n+    print(f\"SUCCESS: Got expected IntegrityError: {e}\")\n+except Exception as e:\n+    print(f\"ERROR: Got unexpected exception: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\n+\n+# Test with valid data only\n+print(\"\\nTesting check_constraints with valid data only...\")\n+with connection.cursor() as cursor:\n+    # Remove the invalid row\n+    cursor.execute('DELETE FROM \"order\" WHERE id = 2')\n+    \n+try:\n+    connection.check_constraints(['order', 'select'])\n+    print(\"SUCCESS: No integrity errors with valid data!\")\n+except Exception as e:\n+    print(f\"ERROR: Unexpected exception with valid data: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/test_sqlite_keyword_table.py b/test_sqlite_keyword_table.py\nnew file mode 100644\nindex 0000000000..51bf08f23a\n--- /dev/null\n+++ b/test_sqlite_keyword_table.py\n@@ -0,0 +1,35 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[],\n+    USE_TZ=False,\n+)\n+\n+django.setup()\n+\n+from django.db import connection\n+\n+# Create a table with SQL keyword name directly\n+with connection.cursor() as cursor:\n+    cursor.execute('CREATE TABLE \"order\" (id INTEGER PRIMARY KEY, name VARCHAR(100))')\n+    \n+# Test the check_constraints method\n+print(\"Testing check_constraints with table name 'order' (SQL keyword)...\")\n+try:\n+    connection.check_constraints(['order'])\n+    print(\"SUCCESS: check_constraints worked correctly!\")\n+except Exception as e:\n+    print(f\"ERROR: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/test_sqlite_keyword_table_names.py b/test_sqlite_keyword_table_names.py\nnew file mode 100644\nindex 0000000000..6d9abc233c\n--- /dev/null\n+++ b/test_sqlite_keyword_table_names.py\n@@ -0,0 +1,46 @@\n+from django.db import connection\n+from django.test import TestCase, skipUnlessDBFeature\n+from django.db.utils import IntegrityError\n+\n+\n+class SQLiteKeywordTableNamesTests(TestCase):\n+    \"\"\"Test that SQLite can handle table names that are SQL keywords.\"\"\"\n+    \n+    @skipUnlessDBFeature('supports_pragma_foreign_key_check')\n+    def test_check_constraints_with_keyword_table_names(self):\n+        \"\"\"Test that check_constraints works with SQL keyword table names.\"\"\"\n+        with connection.cursor() as cursor:\n+            # Create tables with SQL keyword names\n+            cursor.execute('CREATE TABLE \"order\" (id INTEGER PRIMARY KEY, name VARCHAR(100))')\n+            cursor.execute('CREATE TABLE \"select\" (id INTEGER PRIMARY KEY, name VARCHAR(100))')\n+            cursor.execute('''\n+                CREATE TABLE \"where\" (\n+                    id INTEGER PRIMARY KEY,\n+                    order_id INTEGER,\n+                    FOREIGN KEY (order_id) REFERENCES \"order\"(id)\n+                )\n+            ''')\n+            \n+            # Insert valid data\n+            cursor.execute('INSERT INTO \"order\" (id, name) VALUES (1, \"Test\")')\n+            cursor.execute('INSERT INTO \"where\" (id, order_id) VALUES (1, 1)')\n+            \n+            # This should not raise any errors\n+            connection.check_constraints(['order', 'select', 'where'])\n+            \n+            # Insert invalid foreign key data\n+            cursor.execute('PRAGMA foreign_keys = OFF')\n+            cursor.execute('INSERT INTO \"where\" (id, order_id) VALUES (2, 999)')\n+            cursor.execute('PRAGMA foreign_keys = ON')\n+            \n+            # This should raise an IntegrityError\n+            with self.assertRaises(IntegrityError) as cm:\n+                connection.check_constraints(['where'])\n+            \n+            self.assertIn(\"order\", str(cm.exception))\n+            self.assertIn(\"999\", str(cm.exception))\n+            \n+            # Clean up\n+            cursor.execute('DROP TABLE \"where\"')\n+            cursor.execute('DROP TABLE \"order\"') \n+            cursor.execute('DROP TABLE \"select\"')\ndiff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex 17a58f32ae..93c351c349 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -196,6 +196,49 @@ class SchemaTests(TransactionTestCase):\n             with connection.schema_editor(atomic=True) as editor:\n                 editor.alter_db_table(Author, \"backends_author\", \"renamed_table\")\n \n+    def test_check_constraints_with_keyword_table_names(self):\n+        \"\"\"\n+        SQLite can handle check_constraints when table names are SQL keywords.\n+        \"\"\"\n+        from django.db.utils import IntegrityError\n+        \n+        with connection.cursor() as cursor:\n+            # Create tables with SQL keyword names\n+            cursor.execute('CREATE TABLE \"order\" (id INTEGER PRIMARY KEY, name VARCHAR(100))')\n+            cursor.execute('CREATE TABLE \"select\" (id INTEGER PRIMARY KEY, name VARCHAR(100))')\n+            cursor.execute('''\n+                CREATE TABLE \"where\" (\n+                    id INTEGER PRIMARY KEY,\n+                    order_id INTEGER,\n+                    FOREIGN KEY (order_id) REFERENCES \"order\"(id)\n+                )\n+            ''')\n+            \n+            try:\n+                # Insert valid data\n+                cursor.execute('INSERT INTO \"order\" (id, name) VALUES (1, \"Test\")')\n+                cursor.execute('INSERT INTO \"where\" (id, order_id) VALUES (1, 1)')\n+                \n+                # This should not raise any errors\n+                connection.check_constraints(['order', 'select', 'where'])\n+                \n+                # Insert invalid foreign key data\n+                cursor.execute('PRAGMA foreign_keys = OFF')\n+                cursor.execute('INSERT INTO \"where\" (id, order_id) VALUES (2, 999)')\n+                cursor.execute('PRAGMA foreign_keys = ON')\n+                \n+                # This should raise an IntegrityError\n+                with self.assertRaises(IntegrityError) as cm:\n+                    connection.check_constraints(['where'])\n+                \n+                self.assertIn(\"order\", str(cm.exception))\n+                self.assertIn(\"999\", str(cm.exception))\n+            finally:\n+                # Clean up\n+                cursor.execute('DROP TABLE IF EXISTS \"where\"')\n+                cursor.execute('DROP TABLE IF EXISTS \"order\"') \n+                cursor.execute('DROP TABLE IF EXISTS \"select\"')\n+\n \n @unittest.skipUnless(connection.vendor == 'sqlite', 'Test only for SQLite')\n @override_settings(DEBUG=True)\n", "gold_standard_diff": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98c0d2f..ab4ea704920c 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,19 +327,24 @@ def check_constraints(self, table_names=None):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute(\n+                            'PRAGMA foreign_key_check(%s)'\n+                            % self.ops.quote_name(table_name)\n+                        ).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                     primary_key_value, bad_value = cursor.execute(\n                         'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n-                            primary_key_column_name, column_name, table_name\n+                            self.ops.quote_name(primary_key_column_name),\n+                            self.ops.quote_name(column_name),\n+                            self.ops.quote_name(table_name),\n                         ),\n                         (rowid,),\n                     ).fetchone()\ndiff --git a/tests/backends/models.py b/tests/backends/models.py\nindex 5368e8d90383..15c81052eaa1 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -140,3 +140,11 @@ class Author(models.Model):\n \n class Book(models.Model):\n     author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+\n+\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\ndiff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex ed1847ede5b0..dd537d1ea372 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -20,7 +20,7 @@\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n-    ReporterProxy, SchoolClass, Square,\n+    ReporterProxy, SchoolClass, SQLKeywordsModel, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n@@ -625,6 +625,17 @@ def test_check_constraints(self):\n                     connection.check_constraints()\n             transaction.set_rollback(True)\n \n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n \n class ThreadTests(TransactionTestCase):\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/13807"}