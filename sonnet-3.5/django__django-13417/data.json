{"instance_id": "django__django-13417", "score": "C", "diff": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd8311a7..7eb8c7f9ec 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1076,7 +1076,11 @@ class QuerySet:\n         with extra data or aggregations.\n         \"\"\"\n         self._not_support_combined_queries('annotate')\n-        return self._annotate(args, kwargs, select=True)\n+        clone = self._annotate(args, kwargs, select=True)\n+        if clone.query.group_by:\n+            # If a GROUP BY clause is added, update the ordered property\n+            clone.query.order_by = None\n+        return clone\n \n     def alias(self, *args, **kwargs):\n         \"\"\"\n@@ -1224,7 +1228,7 @@ class QuerySet:\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        elif self.query.default_ordering and self.query.get_meta().ordering and not self.query.group_by:\n             return True\n         else:\n             return False\n", "gold_standard_diff": "From 38726bb39422bdb38051d9a2a7ee0f269da2397f Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Mon, 14 Sep 2020 09:05:10 +0200\nSubject: [PATCH] Fixed #31990 -- Fixed QuerySet.ordered for GROUP BY queries\n on models with Meta.ordering.\n\nRegression in 0ddb4ebf7bfcc4730c80a772dd146a49ef6895f6.\n\nThanks Julien Dutriaux for the report.\n---\n django/db/models/query.py |  7 ++++++-\n docs/releases/3.1.2.txt   |  5 +++++\n tests/queries/tests.py    | 10 ++++++++++\n 3 files changed, 21 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd8311a7d2..67ffe7f0000a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1224,7 +1224,12 @@ def ordered(self):\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        elif (\n+            self.query.default_ordering and\n+            self.query.get_meta().ordering and\n+            # A default ordering doesn't affect GROUP BY queries.\n+            not self.query.group_by\n+        ):\n             return True\n         else:\n             return False\ndiff --git a/docs/releases/3.1.2.txt b/docs/releases/3.1.2.txt\nindex 1243654bfb64..f9e45370ab94 100644\n--- a/docs/releases/3.1.2.txt\n+++ b/docs/releases/3.1.2.txt\n@@ -11,3 +11,8 @@ Bugfixes\n \n * Fixed a bug in Django 3.1 where ``FileField`` instances with a callable\n   storage were not correctly deconstructed (:ticket:`31941`).\n+\n+* Fixed a regression in Django 3.1 where the :attr:`.QuerySet.ordered`\n+  attribute returned incorrectly ``True`` for ``GROUP BY`` queries (e.g.\n+  ``.annotate().values()``) on models with ``Meta.ordering``. A model's\n+  ``Meta.ordering`` doesn't affect such queries (:ticket:`31990`).\ndiff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex f9a57b088a87..428153402fa6 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,16 @@ def test_annotated_ordering(self):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13417"}