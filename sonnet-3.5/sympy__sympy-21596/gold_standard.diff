From 8ad8a252fdf4db0c72d0fd962f187ee863e3d9c5 Mon Sep 17 00:00:00 2001
From: Shashank KS <shashankks@sahaj.ai>
Date: Thu, 10 Jun 2021 21:01:39 +0530
Subject: [PATCH 1/7] Fix: Solve bug in intersect_reals earlier,
 imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals)
 returned an incorrect result now, the solution is FiniteSet(1,1) which is the
 correct solution

---
 sympy/sets/handlers/intersection.py | 2 +-
 sympy/sets/tests/test_fancysets.py  | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index c54dc8f72ae7..892fccdd36d0 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -306,7 +306,7 @@ def intersection_sets(self, other): # noqa:F811
             # univarite imaginary part in same variable
             x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
             if x and all(i == n for i in x):
-                base_set -= FiniteSet(xis)
+                base_set = FiniteSet(*xis)
             else:
                 base_set -= ConditionSet(n, Eq(im, 0), S.Integers)
         # exclude values that make denominators 0
diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py
index 098020ca4e7e..dd67662f01de 100644
--- a/sympy/sets/tests/test_fancysets.py
+++ b/sympy/sets/tests/test_fancysets.py
@@ -657,7 +657,7 @@ def test_infinitely_indexed_set_2():
 def test_imageset_intersect_real():
     from sympy import I
     from sympy.abc import n
-    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == Complement(S.Integers, FiniteSet((-1, 1)))
+    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(-1, 1)
     s = ImageSet(
         Lambda(n, -I*(I*(2*pi*n - pi/4) + log(Abs(sqrt(-I))))),
         S.Integers)

From 22414a96a964faf55ceeca18a65f07d154d6b981 Mon Sep 17 00:00:00 2001
From: Shashank KS <shashankks@sahaj.ai>
Date: Thu, 10 Jun 2021 21:09:27 +0530
Subject: [PATCH 2/7] Remove unused imports

---
 sympy/sets/tests/test_fancysets.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py
index dd67662f01de..ae38d8df77a1 100644
--- a/sympy/sets/tests/test_fancysets.py
+++ b/sympy/sets/tests/test_fancysets.py
@@ -2,7 +2,7 @@
 from sympy.core.expr import unchanged
 from sympy.sets.fancysets import (ImageSet, Range, normalize_theta_set,
                                   ComplexRegion)
-from sympy.sets.sets import (Complement, FiniteSet, Interval, Union, imageset,
+from sympy.sets.sets import (FiniteSet, Interval, Union, imageset,
                              Intersection, ProductSet, Contains)
 from sympy.simplify.simplify import simplify
 from sympy import (S, Symbol, Lambda, symbols, cos, sin, pi, oo, Basic,

From a32cb53be98522de298601769fd13f62af7e8b4c Mon Sep 17 00:00:00 2001
From: Shashank KS <shashankks@sahaj.ai>
Date: Thu, 10 Jun 2021 23:35:13 +0530
Subject: [PATCH 3/7] Fix: Implementation of intersection_sets If the imaginary
 part is never 0 then there is no portion of the base set that will ever be
 real so an empty set is returned. Otherwise wherever the imaginary portion of
 the base set is 0 -- within the base set --  is where the intersection will
 be real.

---
 sympy/sets/handlers/intersection.py | 6 +++---
 sympy/sets/tests/test_fancysets.py  | 1 +
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index 892fccdd36d0..0e33fb50d9bc 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -306,9 +306,9 @@ def intersection_sets(self, other): # noqa:F811
             # univarite imaginary part in same variable
             x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
             if x and all(i == n for i in x):
-                base_set = FiniteSet(*xis)
+                base_set &= FiniteSet(*xis)
             else:
-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)
+                base_set = ConditionSet(n, Eq(im, 0), base_set)
         # exclude values that make denominators 0
         for i in denoms(f):
             if i.has(n):
@@ -316,7 +316,7 @@ def intersection_sets(self, other): # noqa:F811
                 if sol != []:
                     x, xis = sol
                     if x and all(i == n for i in x):
-                        base_set -= FiniteSet(xis)
+                        base_set &= FiniteSet(*xis)
                 else:
                     base_set -= ConditionSet(n, Eq(i, 0), S.Integers)
         return imageset(lam, base_set)
diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py
index ae38d8df77a1..30ad17cffe60 100644
--- a/sympy/sets/tests/test_fancysets.py
+++ b/sympy/sets/tests/test_fancysets.py
@@ -658,6 +658,7 @@ def test_imageset_intersect_real():
     from sympy import I
     from sympy.abc import n
     assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(-1, 1)
+    assert imageset(Lambda(n, n + (n - 1)*(n + S.Half)*I), S.Integers).intersect(S.Reals) == FiniteSet(1)
     s = ImageSet(
         Lambda(n, -I*(I*(2*pi*n - pi/4) + log(Abs(sqrt(-I))))),
         S.Integers)

From 637e5c6ff0491a1d767effe9ae3878ece768f15b Mon Sep 17 00:00:00 2001
From: Shashank KS <shashankks@sahaj.ai>
Date: Thu, 10 Jun 2021 23:44:27 +0530
Subject: [PATCH 4/7] Fix: excluding values that make denominators 0 in
 intersect_sets - earlier the values were added to the base set instead of
 removing them

---
 sympy/sets/handlers/intersection.py | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index 0e33fb50d9bc..d40ed94b7c1d 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -316,9 +316,9 @@ def intersection_sets(self, other): # noqa:F811
                 if sol != []:
                     x, xis = sol
                     if x and all(i == n for i in x):
-                        base_set &= FiniteSet(*xis)
+                        base_set -= FiniteSet(*xis)
                 else:
-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)
+                    base_set -= ConditionSet(n, Eq(i, 0), base_set)
         return imageset(lam, base_set)
 
     elif isinstance(other, Interval):

From 008a14374488868c2f3560e464361a93032a57ce Mon Sep 17 00:00:00 2001
From: Shashank KS <shashankks@sahaj.ai>
Date: Fri, 11 Jun 2021 21:49:54 +0530
Subject: [PATCH 5/7] Fix: Implementation of intersection_sets to use numer -
 Add tests

---
 sympy/sets/handlers/intersection.py | 31 ++++++++++++++++-------------
 sympy/sets/tests/test_fancysets.py  | 14 ++++++++++++-
 2 files changed, 30 insertions(+), 15 deletions(-)

diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index d40ed94b7c1d..72a139abe719 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -5,7 +5,7 @@
 from sympy.sets.fancysets import (Integers, Naturals, Reals, Range,
     ImageSet, Rationals)
 from sympy.sets.sets import UniversalSet, imageset, ProductSet
-
+from sympy.simplify.radsimp import numer
 
 @dispatch(ConditionSet, ConditionSet)  # type: ignore # noqa:F811
 def intersection_sets(a, b): # noqa:F811
@@ -304,21 +304,24 @@ def intersection_sets(self, other): # noqa:F811
             return None
         else:
             # univarite imaginary part in same variable
-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
-            if x and all(i == n for i in x):
-                base_set &= FiniteSet(*xis)
-            else:
-                base_set = ConditionSet(n, Eq(im, 0), base_set)
+            sol_set = S.EmptySet
+            # use numer instead of as_numer_denom to keep
+            # this as fast as possible while still handling
+            # simple cases
+            for i in Mul.make_args(numer(im)):
+                x, xis = solve_linear(i, 0, [n])
+                if x == n:
+                    sol_set |= FiniteSet(xis) & base_set
+                else:
+                    sol_set |= ConditionSet(n, Eq(i, 0), base_set)
+            base_set = sol_set
         # exclude values that make denominators 0
         for i in denoms(f):
-            if i.has(n):
-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))
-                if sol != []:
-                    x, xis = sol
-                    if x and all(i == n for i in x):
-                        base_set -= FiniteSet(*xis)
-                else:
-                    base_set -= ConditionSet(n, Eq(i, 0), base_set)
+            x, xis = solve_linear(i, 0, [n])
+            if x == n:
+                base_set -= FiniteSet(xis)
+            else:
+                base_set -= ConditionSet(n, Eq(i, 0), base_set)
         return imageset(lam, base_set)
 
     elif isinstance(other, Interval):
diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py
index 30ad17cffe60..c8517b3799bd 100644
--- a/sympy/sets/tests/test_fancysets.py
+++ b/sympy/sets/tests/test_fancysets.py
@@ -4,6 +4,7 @@
                                   ComplexRegion)
 from sympy.sets.sets import (FiniteSet, Interval, Union, imageset,
                              Intersection, ProductSet, Contains)
+from sympy.sets.conditionset import ConditionSet
 from sympy.simplify.simplify import simplify
 from sympy import (S, Symbol, Lambda, symbols, cos, sin, pi, oo, Basic,
                    Rational, sqrt, tan, log, exp, Abs, I, Tuple, eye,
@@ -658,7 +659,18 @@ def test_imageset_intersect_real():
     from sympy import I
     from sympy.abc import n
     assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(-1, 1)
-    assert imageset(Lambda(n, n + (n - 1)*(n + S.Half)*I), S.Integers).intersect(S.Reals) == FiniteSet(1)
+    im = (n - 1)*(n + S.Half)
+    assert imageset(Lambda(n, n + im*I), S.Integers
+        ).intersect(S.Reals) == FiniteSet(1)
+    assert imageset(Lambda(n, n + im*(n + 1)*I), S.Naturals0).intersect(S.Reals) == FiniteSet(1)
+    assert imageset(Lambda(n, n/2 + im.expand()*I), S.Integers
+).intersect(S.Reals) == ImageSet(Lambda(x, x/2), ConditionSet(
+        n, Eq(n**2 - n/2 - S(1)/2, 0), S.Integers))
+    assert imageset(Lambda(n, n/(1/n - 1) + im*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(S.Half)
+    assert imageset(Lambda(n, n/(n - 6) +
+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(S.Reals) == FiniteSet(-1)
+    assert imageset(Lambda(n, n/(n**2 - 9) +
+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(S.Reals) is S.EmptySet
     s = ImageSet(
         Lambda(n, -I*(I*(2*pi*n - pi/4) + log(Abs(sqrt(-I))))),
         S.Integers)

From 39da34f918235b6ae62dfd7ca969187050489503 Mon Sep 17 00:00:00 2001
From: Christopher Smith <smichr@gmail.com>
Date: Fri, 11 Jun 2021 14:23:13 -0500
Subject: [PATCH 6/7] Update sympy/sets/tests/test_fancysets.py

---
 sympy/sets/tests/test_fancysets.py | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

diff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py
index c8517b3799bd..7facabe185df 100644
--- a/sympy/sets/tests/test_fancysets.py
+++ b/sympy/sets/tests/test_fancysets.py
@@ -662,15 +662,19 @@ def test_imageset_intersect_real():
     im = (n - 1)*(n + S.Half)
     assert imageset(Lambda(n, n + im*I), S.Integers
         ).intersect(S.Reals) == FiniteSet(1)
-    assert imageset(Lambda(n, n + im*(n + 1)*I), S.Naturals0).intersect(S.Reals) == FiniteSet(1)
+    assert imageset(Lambda(n, n + im*(n + 1)*I), S.Naturals0
+        ).intersect(S.Reals) == FiniteSet(1)
     assert imageset(Lambda(n, n/2 + im.expand()*I), S.Integers
-).intersect(S.Reals) == ImageSet(Lambda(x, x/2), ConditionSet(
+        ).intersect(S.Reals) == ImageSet(Lambda(x, x/2), ConditionSet(
         n, Eq(n**2 - n/2 - S(1)/2, 0), S.Integers))
-    assert imageset(Lambda(n, n/(1/n - 1) + im*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(S.Half)
+    assert imageset(Lambda(n, n/(1/n - 1) + im*(n + 1)*I), S.Integers
+        ).intersect(S.Reals) == FiniteSet(S.Half)
     assert imageset(Lambda(n, n/(n - 6) +
-        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(S.Reals) == FiniteSet(-1)
+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(
+        S.Reals) == FiniteSet(-1)
     assert imageset(Lambda(n, n/(n**2 - 9) +
-        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(S.Reals) is S.EmptySet
+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(
+        S.Reals) is S.EmptySet
     s = ImageSet(
         Lambda(n, -I*(I*(2*pi*n - pi/4) + log(Abs(sqrt(-I))))),
         S.Integers)

From 610d19a4a6cdddcfbf48687b7996357c842c3f9e Mon Sep 17 00:00:00 2001
From: Christopher Smith <smichr@gmail.com>
Date: Sat, 12 Jun 2021 07:01:08 -0500
Subject: [PATCH 7/7] Update intersection.py

---
 sympy/sets/handlers/intersection.py | 32 +++++++++++++++--------------
 1 file changed, 17 insertions(+), 15 deletions(-)

diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index 72a139abe719..1ad7e98253c7 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -280,6 +280,19 @@ def intersection_sets(self, other): # noqa:F811
         from sympy.core.function import expand_complex
         from sympy.solvers.solvers import denoms, solve_linear
         from sympy.core.relational import Eq
+
+        def _solution_union(exprs, sym):
+            # return a union of linear solutions to i in expr;
+            # if i cannot be solved, use a ConditionSet for solution
+            sols = []
+            for i in exprs:
+                x, xis = solve_linear(i, 0, [sym])
+                if x == sym:
+                    sols.append(FiniteSet(xis))
+                else:
+                    sols.append(ConditionSet(sym, Eq(i, 0)))
+            return Union(*sols)
+
         f = self.lamda.expr
         n = self.lamda.variables[0]
 
@@ -303,25 +316,14 @@ def intersection_sets(self, other): # noqa:F811
         elif ifree != {n}:
             return None
         else:
-            # univarite imaginary part in same variable
-            sol_set = S.EmptySet
+            # univarite imaginary part in same variable;
             # use numer instead of as_numer_denom to keep
             # this as fast as possible while still handling
             # simple cases
-            for i in Mul.make_args(numer(im)):
-                x, xis = solve_linear(i, 0, [n])
-                if x == n:
-                    sol_set |= FiniteSet(xis) & base_set
-                else:
-                    sol_set |= ConditionSet(n, Eq(i, 0), base_set)
-            base_set = sol_set
+            base_set &= _solution_union(
+                Mul.make_args(numer(im)), n)
         # exclude values that make denominators 0
-        for i in denoms(f):
-            x, xis = solve_linear(i, 0, [n])
-            if x == n:
-                base_set -= FiniteSet(xis)
-            else:
-                base_set -= ConditionSet(n, Eq(i, 0), base_set)
+        base_set -= _solution_union(denoms(f), n)
         return imageset(lam, base_set)
 
     elif isinstance(other, Interval):
