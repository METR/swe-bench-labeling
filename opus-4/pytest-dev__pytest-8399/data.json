{"instance_id": "pytest-dev__pytest-8399", "score": "C", "diff": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 719eb4e88..3f88d7a9e 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -144,7 +144,7 @@ def _make_xunit_fixture(\n         scope=scope,\n         autouse=True,\n         # Use a unique name to speed up lookup.\n-        name=f\"unittest_{setup_name}_fixture_{obj.__qualname__}\",\n+        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n     )\n     def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n         if _is_skipped(self):\n", "gold_standard_diff": "diff --git a/changelog/8394.bugfix.rst b/changelog/8394.bugfix.rst\nnew file mode 100644\nindex 00000000000..a0fb5bb71fd\n--- /dev/null\n+++ b/changelog/8394.bugfix.rst\n@@ -0,0 +1 @@\n+Use private names for internal fixtures that handle classic setup/teardown so that they don't show up with the default ``--fixtures`` invocation (but they still show up with ``--fixtures -v``).\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 40116ab9c5a..c19d2ed4fb4 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -528,7 +528,7 @@ def _inject_setup_module_fixture(self) -> None:\n             autouse=True,\n             scope=\"module\",\n             # Use a unique name to speed up lookup.\n-            name=f\"xunit_setup_module_fixture_{self.obj.__name__}\",\n+            name=f\"_xunit_setup_module_fixture_{self.obj.__name__}\",\n         )\n         def xunit_setup_module_fixture(request) -> Generator[None, None, None]:\n             if setup_module is not None:\n@@ -557,7 +557,7 @@ def _inject_setup_function_fixture(self) -> None:\n             autouse=True,\n             scope=\"function\",\n             # Use a unique name to speed up lookup.\n-            name=f\"xunit_setup_function_fixture_{self.obj.__name__}\",\n+            name=f\"_xunit_setup_function_fixture_{self.obj.__name__}\",\n         )\n         def xunit_setup_function_fixture(request) -> Generator[None, None, None]:\n             if request.instance is not None:\n@@ -809,7 +809,7 @@ def _inject_setup_class_fixture(self) -> None:\n             autouse=True,\n             scope=\"class\",\n             # Use a unique name to speed up lookup.\n-            name=f\"xunit_setup_class_fixture_{self.obj.__qualname__}\",\n+            name=f\"_xunit_setup_class_fixture_{self.obj.__qualname__}\",\n         )\n         def xunit_setup_class_fixture(cls) -> Generator[None, None, None]:\n             if setup_class is not None:\n@@ -838,7 +838,7 @@ def _inject_setup_method_fixture(self) -> None:\n             autouse=True,\n             scope=\"function\",\n             # Use a unique name to speed up lookup.\n-            name=f\"xunit_setup_method_fixture_{self.obj.__qualname__}\",\n+            name=f\"_xunit_setup_method_fixture_{self.obj.__qualname__}\",\n         )\n         def xunit_setup_method_fixture(self, request) -> Generator[None, None, None]:\n             method = request.function\ndiff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 719eb4e8823..3f88d7a9e2c 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -144,7 +144,7 @@ def cleanup(*args):\n         scope=scope,\n         autouse=True,\n         # Use a unique name to speed up lookup.\n-        name=f\"unittest_{setup_name}_fixture_{obj.__qualname__}\",\n+        name=f\"_unittest_{setup_name}_fixture_{obj.__qualname__}\",\n     )\n     def fixture(self, request: FixtureRequest) -> Generator[None, None, None]:\n         if _is_skipped(self):\ndiff --git a/testing/test_nose.py b/testing/test_nose.py\nindex 13429afafd4..77f79b53b3c 100644\n--- a/testing/test_nose.py\n+++ b/testing/test_nose.py\n@@ -211,6 +211,50 @@ def test_world():\n     result.stdout.fnmatch_lines([\"*2 passed*\"])\n \n \n+def test_fixtures_nose_setup_issue8394(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        def setup_module():\n+            pass\n+\n+        def teardown_module():\n+            pass\n+\n+        def setup_function(func):\n+            pass\n+\n+        def teardown_function(func):\n+            pass\n+\n+        def test_world():\n+            pass\n+\n+        class Test(object):\n+            def setup_class(cls):\n+                pass\n+\n+            def teardown_class(cls):\n+                pass\n+\n+            def setup_method(self, meth):\n+                pass\n+\n+            def teardown_method(self, meth):\n+                pass\n+\n+            def test_method(self): pass\n+        \"\"\"\n+    )\n+    match = \"*no docstring available*\"\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(match)\n+\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([match, match, match, match])\n+\n+\n def test_nose_setup_ordering(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\ndiff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 69bafc26d61..d7f7737153d 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -302,6 +302,30 @@ def test_teareddown():\n     reprec.assertoutcome(passed=3)\n \n \n+def test_fixtures_setup_setUpClass_issue8394(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_func1(self):\n+                pass\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*no docstring available*\")\n+\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*no docstring available*\"])\n+\n+\n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n         \"\"\"\n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/8399"}