{"instance_id": "django__django-16032", "score": "I", "diff": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 866e38df83..bba0b54d83 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -449,6 +449,11 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)\n             placeholder = \"(\" + \", \".join(sqls) + \")\"\n             return (placeholder, sqls_params)\n+        elif hasattr(self.rhs, 'query'):\n+            # Handle annotated and aliased querysets\n+            compiler.compile(self.rhs.query)\n+            sql, params = self.rhs.query.get_compiler(connection=connection).as_sql()\n+            return f\"({sql})\", params\n         return super().process_rhs(compiler, connection)\n \n     def get_rhs_op(self, connection, rhs):\ndiff --git a/tests/annotations/test_annotation_alias.py b/tests/annotations/test_annotation_alias.py\nnew file mode 100644\nindex 0000000000..aea84497fc\n--- /dev/null\n+++ b/tests/annotations/test_annotation_alias.py\n@@ -0,0 +1,80 @@\n+import os\n+import django\n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import Value\n+from django.conf import settings\n+\n+# Set up Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'tests.annotations',\n+    ],\n+    USE_TZ=False,\n+)\n+\n+django.setup()\n+\n+class Publisher(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'tests_annotations'\n+\n+class Book(models.Model):\n+    name = models.CharField(max_length=100)\n+    pages = models.IntegerField()\n+    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)\n+\n+    class Meta:\n+        app_label = 'tests_annotations'\n+\n+class AnnotationAliasTestCase(TestCase):\n+    def setUp(self):\n+        self.publisher1 = Publisher.objects.create(name='Apress')\n+        self.publisher2 = Publisher.objects.create(name='Sams')\n+        self.publisher3 = Publisher.objects.create(name='Prentice Hall')\n+        self.publisher4 = Publisher.objects.create(name='Morgan Kaufmann')\n+\n+        Book.objects.create(name='Book1', pages=450, publisher=self.publisher1)\n+        Book.objects.create(name='Book2', pages=500, publisher=self.publisher2)\n+        Book.objects.create(name='Book3', pages=400, publisher=self.publisher3)\n+        Book.objects.create(name='Book4', pages=600, publisher=self.publisher4)\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+if __name__ == '__main__':\n+    from django.test.runner import DiscoverRunner\n+    test_runner = DiscoverRunner(verbosity=2)\n+    failures = test_runner.run_tests([AnnotationAliasTestCase])\n+    exit(bool(failures))\ndiff --git a/tests/annotations/test_settings.py b/tests/annotations/test_settings.py\nnew file mode 100644\nindex 0000000000..f77f4492f1\n--- /dev/null\n+++ b/tests/annotations/test_settings.py\n@@ -0,0 +1,15 @@\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'tests.annotations',\n+]\n+\n+SECRET_KEY = 'fake-key'\n+USE_TZ = False\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex 8de2bf1998..192816c0c4 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -1382,3 +1382,27 @@ class AliasTests(TestCase):\n         )\n         with self.assertRaisesMessage(ValueError, msg):\n             Book.objects.alias(**{crafted_alias: Value(1)})\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n\\ No newline at end of file\n", "gold_standard_diff": "From 32797e7fbfb28c4cd2210aae37157267d237364f Mon Sep 17 00:00:00 2001\nFrom: DevilsAutumn <bhuvnesh875@gmail.com>\nDate: Tue, 6 Sep 2022 15:22:41 +0530\nSubject: [PATCH] Fixed #33975 -- Fixed __in lookup when rhs is a queryset with\n annotate() and alias().\n\nThis fixes clearing selected fields.\n---\n django/db/models/fields/related_lookups.py |  3 +--\n django/db/models/sql/query.py              |  8 ++-----\n tests/annotations/tests.py                 | 28 ++++++++++++++++++++++\n 3 files changed, 31 insertions(+), 8 deletions(-)\n\ndiff --git a/django/db/models/fields/related_lookups.py b/django/db/models/fields/related_lookups.py\nindex 1a845a1f7f1f..afea09b5a9ac 100644\n--- a/django/db/models/fields/related_lookups.py\n+++ b/django/db/models/fields/related_lookups.py\n@@ -93,7 +93,6 @@ def get_prep_lookup(self):\n             elif not getattr(self.rhs, \"has_select_fields\", True) and not getattr(\n                 self.lhs.field.target_field, \"primary_key\", False\n             ):\n-                self.rhs.clear_select_clause()\n                 if (\n                     getattr(self.lhs.output_field, \"primary_key\", False)\n                     and self.lhs.output_field.model == self.rhs.model\n@@ -105,7 +104,7 @@ def get_prep_lookup(self):\n                     target_field = self.lhs.field.name\n                 else:\n                     target_field = self.lhs.field.target_field.name\n-                self.rhs.add_fields([target_field], True)\n+                self.rhs.set_values([target_field])\n         return super().get_prep_lookup()\n \n     def as_sql(self, compiler, connection):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8419dc0d5436..5dca423de4ce 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -198,6 +198,7 @@ class Query(BaseExpression):\n     select_for_update_of = ()\n     select_for_no_key_update = False\n     select_related = False\n+    has_select_fields = False\n     # Arbitrary limit for select_related to prevents infinite recursion.\n     max_depth = 5\n     # Holds the selects defined by a call to values() or values_list()\n@@ -263,12 +264,6 @@ def output_field(self):\n         elif len(self.annotation_select) == 1:\n             return next(iter(self.annotation_select.values())).output_field\n \n-    @property\n-    def has_select_fields(self):\n-        return bool(\n-            self.select or self.annotation_select_mask or self.extra_select_mask\n-        )\n-\n     @cached_property\n     def base_table(self):\n         for alias in self.alias_map:\n@@ -2384,6 +2379,7 @@ def set_values(self, fields):\n         self.select_related = False\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n+        self.has_select_fields = True\n \n         if fields:\n             field_names = []\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex 8de2bf1998c7..0a5bbd8a5717 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,34 @@ def test_annotation_filter_with_subquery(self):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        awarded_publishers_qs = (\n+            Publisher.objects.filter(num_awards__gt=4)\n+            .annotate(publisher_annotate=Value(1))\n+            .alias(publisher_alias=Value(1))\n+        )\n+        qs = Publisher.objects.filter(pk__in=awarded_publishers_qs)\n+        self.assertCountEqual(qs, [self.p3, self.p4])\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16032"}