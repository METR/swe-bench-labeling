{"instance_id": "sympy__sympy-20428", "score": "I", "diff": "diff --git a/sympy/polys/densetools.py b/sympy/polys/densetools.py\nindex f057824642..74836af34a 100644\n--- a/sympy/polys/densetools.py\n+++ b/sympy/polys/densetools.py\n@@ -1197,6 +1197,8 @@ def dup_clear_denoms(f, K0, K1=None, convert=False):\n \n     if not K1.is_one(common):\n         f = dup_mul_ground(f, common, K0)\n+        from sympy.polys.densebasic import dup_strip\n+        f = dup_strip(f)\n \n     if not convert:\n         return common, f\n@@ -1251,6 +1253,8 @@ def dmp_clear_denoms(f, u, K0, K1=None, convert=False):\n \n     if not K1.is_one(common):\n         f = dmp_mul_ground(f, common, u, K0)\n+        from sympy.polys.densebasic import dmp_strip\n+        f = dmp_strip(f, u)\n \n     if not convert:\n         return common, f\ndiff --git a/test_clear_denoms.py b/test_clear_denoms.py\nnew file mode 100644\nindex 0000000000..cc279f64f5\n--- /dev/null\n+++ b/test_clear_denoms.py\n@@ -0,0 +1,77 @@\n+from sympy import *\n+from sympy.polys import QQ, ZZ\n+\n+# Test case 1: The issue case\n+x = symbols(\"x\")\n+f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+coeff, result_poly = f.clear_denoms()\n+print(\"Test 1 - Issue case:\")\n+print(\"  result_poly:\", result_poly)\n+print(\"  is_zero:\", result_poly.is_zero)\n+print(\"  rep:\", result_poly.rep)\n+assert result_poly.is_zero == True\n+assert str(result_poly.rep) == \"DMP([], EX, None)\"\n+print(\"  PASSED\")\n+\n+# Test case 2: Regular polynomial with rational coefficients\n+f2 = Poly(x**2/2 + x/3 + 1/6, x, domain=QQ)\n+coeff2, result2 = f2.clear_denoms()\n+print(\"\\nTest 2 - Regular rational polynomial:\")\n+print(\"  Original:\", f2)\n+print(\"  coeff:\", coeff2)\n+print(\"  result:\", result2)\n+assert coeff2 == 6\n+assert result2 == Poly(3*x**2 + 2*x + 1, x, domain=QQ)\n+print(\"  PASSED\")\n+\n+# Test case 3: Zero polynomial\n+f3 = Poly(0, x, domain=QQ)\n+coeff3, result3 = f3.clear_denoms()\n+print(\"\\nTest 3 - Zero polynomial:\")\n+print(\"  Original:\", f3)\n+print(\"  coeff:\", coeff3)\n+print(\"  result:\", result3)\n+assert result3.is_zero == True\n+print(\"  result3.rep:\", result3.rep)\n+assert result3.is_zero == True\n+print(\"  PASSED\")\n+\n+# Test case 4: Polynomial that becomes zero after clearing denoms (simpler case)\n+y = symbols(\"y\")\n+# Create a polynomial that's essentially zero but with complex coefficients\n+expr = x/2 - x/2\n+f4 = Poly(expr, x, domain=QQ)\n+coeff4, result4 = f4.clear_denoms()\n+print(\"\\nTest 4 - Polynomial that's zero from the start:\")\n+print(\"  Original:\", f4)\n+print(\"  coeff:\", coeff4)\n+print(\"  result:\", result4)\n+assert result4.is_zero == True\n+print(\"  result4.rep:\", result4.rep)\n+assert result4.is_zero == True\n+print(\"  PASSED\")\n+\n+# Test case 5: Multivariate polynomial\n+f5 = Poly(x/2 + y/3, x, y, domain=QQ)\n+coeff5, result5 = f5.clear_denoms()\n+print(\"\\nTest 5 - Multivariate polynomial:\")\n+print(\"  Original:\", f5)\n+print(\"  coeff:\", coeff5)\n+print(\"  result:\", result5)\n+assert coeff5 == 6\n+assert result5 == Poly(3*x + 2*y, x, y, domain=QQ)\n+print(\"  PASSED\")\n+\n+# Test case 6: terms_gcd should work with the fixed polynomial\n+print(\"\\nTest 6 - terms_gcd on fixed polynomial:\")\n+f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+coeff, result_poly = f.clear_denoms()\n+try:\n+    J, G = result_poly.terms_gcd()\n+    print(\"  terms_gcd result:\", J, G)\n+    print(\"  PASSED\")\n+except Exception as e:\n+    print(\"  FAILED with error:\", e)\n+    raise\n+\n+print(\"\\nAll tests passed!\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..8f7e7bc386\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,25 @@\n+from sympy import *\n+x = symbols(\"x\")\n+f = Poly(sympify(\"-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))\"), x)\n+coeff, bad_poly = f.clear_denoms()\n+print(\"bad_poly:\", bad_poly)\n+print(\"bad_poly.is_zero:\", bad_poly.is_zero)\n+print(\"bad_poly.as_expr():\", bad_poly.as_expr())\n+print(\"bad_poly.as_expr().is_zero:\", bad_poly.as_expr().is_zero)\n+print(\"bad_poly.rep:\", bad_poly.rep)\n+print(\"Normal zero poly rep:\", Poly(0, x, domain=\"EX\").rep)\n+\n+# Test terms_gcd\n+try:\n+    print(\"\\nPoly(0, x).terms_gcd():\", Poly(0, x).terms_gcd())\n+except Exception as e:\n+    print(\"\\nPoly(0, x).terms_gcd() error:\", e)\n+\n+try:\n+    print(\"bad_poly.terms_gcd():\", bad_poly.terms_gcd())\n+except Exception as e:\n+    print(\"bad_poly.terms_gcd() error:\", e)\n+\n+# Test primitive\n+print(\"\\nPoly(0, x).primitive():\", Poly(0, x).primitive())\n+print(\"bad_poly.primitive():\", bad_poly.primitive())\n", "gold_standard_diff": "From 22c48bd88760c8bf7c2e23ce064460a95132e6f4 Mon Sep 17 00:00:00 2001\nFrom: Ehren Metcalfe <ehren.m@gmail.com>\nDate: Sat, 14 Nov 2020 00:50:07 -0500\nSubject: [PATCH] Use assumption system instead of structural equality check in\n __bool__ method of ExpressionDomain Expression\n\nAvoids unstripped 0 bug\n---\n sympy/polys/domains/expressiondomain.py |  2 +-\n sympy/polys/tests/test_polytools.py     | 14 ++++++++++++++\n 2 files changed, 15 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/polys/domains/expressiondomain.py b/sympy/polys/domains/expressiondomain.py\nindex 1ce2316dc66f..3813fa394d4c 100644\n--- a/sympy/polys/domains/expressiondomain.py\n+++ b/sympy/polys/domains/expressiondomain.py\n@@ -120,7 +120,7 @@ def __ne__(f, g):\n             return not f == g\n \n         def __bool__(f):\n-            return f.ex != 0\n+            return not f.ex.is_zero\n \n         def gcd(f, g):\n             from sympy.polys import gcd\ndiff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex c774fc41e294..9dd8df41fc95 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -1458,6 +1458,20 @@ def test_Poly_rat_clear_denoms():\n     assert f.rat_clear_denoms(g) == (f, g)\n \n \n+def test_issue_20427():\n+    f = Poly(-117968192370600*18**(S(1)/3)/(217603955769048*(24201 +\n+        253*sqrt(9165))**(S(1)/3) + 2273005839412*sqrt(9165)*(24201 +\n+        253*sqrt(9165))**(S(1)/3)) - 15720318185*2**(S(2)/3)*3**(S(1)/3)*(24201\n+        + 253*sqrt(9165))**(S(2)/3)/(217603955769048*(24201 + 253*sqrt(9165))**\n+        (S(1)/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(S(1)/3))\n+        + 15720318185*12**(S(1)/3)*(24201 + 253*sqrt(9165))**(S(2)/3)/(\n+        217603955769048*(24201 + 253*sqrt(9165))**(S(1)/3) + 2273005839412*\n+        sqrt(9165)*(24201 + 253*sqrt(9165))**(S(1)/3)) + 117968192370600*2**(\n+        S(1)/3)*3**(S(2)/3)/(217603955769048*(24201 + 253*sqrt(9165))**(S(1)/3)\n+        + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(S(1)/3)), x)\n+    assert f == Poly(0, x, domain='EX')\n+\n+\n def test_Poly_integrate():\n     assert Poly(x + 1).integrate() == Poly(x**2/2 + x)\n     assert Poly(x + 1).integrate(x) == Poly(x**2/2 + x)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/20428"}