{"instance_id": "pydata__xarray-4966", "score": "C", "diff": "diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py\nindex b035ff82..de2e5af0 100644\n--- a/xarray/coding/variables.py\n+++ b/xarray/coding/variables.py\n@@ -316,6 +316,15 @@ class UnsignedIntegerCoder(VariableCoder):\n                     if \"_FillValue\" in attrs:\n                         new_fill = unsigned_dtype.type(attrs[\"_FillValue\"])\n                         attrs[\"_FillValue\"] = new_fill\n+            elif data.dtype.kind == \"u\":\n+                if unsigned == \"false\":\n+                    # Handle the case for OPeNDAP where _Unsigned=False indicates signed bytes\n+                    signed_dtype = np.dtype(\"i%s\" % data.dtype.itemsize)\n+                    transform = partial(np.asarray, dtype=signed_dtype)\n+                    data = lazy_elemwise_func(data, transform, signed_dtype)\n+                    if \"_FillValue\" in attrs:\n+                        new_fill = signed_dtype.type(attrs[\"_FillValue\"])\n+                        attrs[\"_FillValue\"] = new_fill\n             else:\n                 warnings.warn(\n                     \"variable %r has _Unsigned attribute but is not \"\n", "gold_standard_diff": "From 17c89b27fa1675a072aeaf712f43fde168cdf3b9 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Tobias=20K=C3=B6lling?= <tobias.koelling@mpimet.mpg.de>\nDate: Fri, 26 Feb 2021 12:59:58 +0100\nSubject: [PATCH 1/2] conventions: decode unsigned integers to signed if\n _Unsigned=false\n\nnetCDF3 doesn't know unsigned while OPeNDAP doesn't know signed (bytes).\nDepending on which backend source is used, the original data is stored\nwith the wrong signedness and needs to be decoded based on the _Unsigned\nattribute. While the netCDF3 variant is already implemented, this commit\nadds the symmetric case covering OPeNDAP.\n\ncloses #4954\n---\n xarray/coding/variables.py  |  8 ++++++++\n xarray/tests/test_coding.py | 28 ++++++++++++++++++++++++++++\n 2 files changed, 36 insertions(+)\n\ndiff --git a/xarray/coding/variables.py b/xarray/coding/variables.py\nindex b035ff82086..938752c4efc 100644\n--- a/xarray/coding/variables.py\n+++ b/xarray/coding/variables.py\n@@ -316,6 +316,14 @@ def decode(self, variable, name=None):\n                     if \"_FillValue\" in attrs:\n                         new_fill = unsigned_dtype.type(attrs[\"_FillValue\"])\n                         attrs[\"_FillValue\"] = new_fill\n+            elif data.dtype.kind == \"u\":\n+                if unsigned == \"false\":\n+                    signed_dtype = np.dtype(\"i%s\" % data.dtype.itemsize)\n+                    transform = partial(np.asarray, dtype=signed_dtype)\n+                    data = lazy_elemwise_func(data, transform, signed_dtype)\n+                    if \"_FillValue\" in attrs:\n+                        new_fill = signed_dtype.type(attrs[\"_FillValue\"])\n+                        attrs[\"_FillValue\"] = new_fill\n             else:\n                 warnings.warn(\n                     \"variable %r has _Unsigned attribute but is not \"\ndiff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex e0df7782aa7..839f2fd1f2e 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -117,3 +117,31 @@ def test_scaling_offset_as_list(scale_factor, add_offset):\n     encoded = coder.encode(original)\n     roundtripped = coder.decode(encoded)\n     assert_allclose(original, roundtripped)\n+\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert decoded.values == original_values\n+\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert decoded.values == original_values\n\nFrom 76176f2eb456f07f1f1866b204af282e2caafc57 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Tobias=20K=C3=B6lling?= <tobias.koelling@mpimet.mpg.de>\nDate: Fri, 26 Feb 2021 13:21:29 +0100\nSubject: [PATCH 2/2] whats-new.rst: added _Unsigned = \"false\"\n\n---\n doc/whats-new.rst | 9 +++++++++\n 1 file changed, 9 insertions(+)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex ef7f5b43fdd..38fcdb471ac 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -14,6 +14,15 @@ What's New\n \n     np.random.seed(123456)\n \n+.. _whats-new.unreleased:\n+\n+unreleased\n+----------\n+\n+Bug fixes\n+~~~~~~~~~\n+- Decode values as signed if attribute `_Unsigned = \"false\"` (:issue:`4954`)\n+  By `Tobias K\u00f6lling <https://github.com/d70-t>`_.\n \n .. _whats-new.0.17.0:\n \n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/4966"}