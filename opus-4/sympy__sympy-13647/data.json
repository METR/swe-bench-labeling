{"instance_id": "sympy__sympy-13647", "score": "C", "diff": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 056d9bc497..4aa75e4d77 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -86,7 +86,7 @@ def entry(i, j):\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\n", "gold_standard_diff": "From 1ea8b3160e31c26427ef4309e160a10501530e38 Mon Sep 17 00:00:00 2001\nFrom: himanshukgp <hs80941@gmail.com>\nDate: Wed, 29 Nov 2017 02:40:00 +0530\nSubject: [PATCH 1/2] removed bug in col_insert\n\n---\n sympy/matrices/common.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 68656467f545..602e5417eb84 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -86,7 +86,7 @@ def entry(i, j):\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\n\nFrom 96f2ae735ba7c62028e583cb0a97071f9249e4d6 Mon Sep 17 00:00:00 2001\nFrom: himanshukgp <hs80941@gmail.com>\nDate: Wed, 29 Nov 2017 11:09:38 +0530\nSubject: [PATCH 2/2] Added test for #issue 13643\n\n---\n sympy/matrices/tests/test_commonmatrix.py | 8 ++++++++\n 1 file changed, 8 insertions(+)\n\ndiff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 3e27ecc8b25d..0bdb65177d55 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -200,6 +200,14 @@ def test_col_insert():\n         l = [0, 0, 0]\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n+    # issue 13643\n+    assert eye_Shaping(6).col_insert(3, Matrix([[2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]])) == \\\n+           Matrix([[1, 0, 0, 2, 2, 0, 0, 0],\n+                   [0, 1, 0, 2, 2, 0, 0, 0],\n+                   [0, 0, 1, 2, 2, 0, 0, 0],\n+                   [0, 0, 0, 2, 2, 1, 0, 0],\n+                   [0, 0, 0, 2, 2, 0, 1, 0],\n+                   [0, 0, 0, 2, 2, 0, 0, 1]])\n \n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13647"}