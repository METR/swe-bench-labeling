{"instance_id": "sympy__sympy-20801", "score": "C", "diff": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..6d905976e6 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1387,7 +1387,9 @@ def __eq__(self, other):\n         except SympifyError:\n             return NotImplemented\n         if not self:\n-            return not other\n+            return not other and not isinstance(other, Boolean)\n+        if other is S.false:\n+            return False\n         if isinstance(other, Boolean):\n             return False\n         if other.is_NumberSymbol:\n@@ -1865,6 +1867,8 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n+        if other is S.false:\n+            return False\n         if not isinstance(other, Number):\n             # S(0) == S.false is False\n             # S(0) == False is True\ndiff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py\nindex fbcba1f8d4..b15f4a61d0 100644\n--- a/sympy/logic/boolalg.py\n+++ b/sympy/logic/boolalg.py\n@@ -396,6 +396,12 @@ def __bool__(self):\n     def __hash__(self):\n         return hash(False)\n \n+    def __eq__(self, other):\n+        from sympy import Float\n+        if isinstance(other, Float):\n+            return False\n+        return super().__eq__(other)\n+\n     @property\n     def negated(self):\n         return S.true\n", "gold_standard_diff": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165cb..9adb3362f5d9 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,8 +1386,6 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n         if isinstance(other, Boolean):\n             return False\n         if other.is_NumberSymbol:\n@@ -1408,6 +1406,8 @@ def __eq__(self, other):\n             # the mpf tuples\n             ompf = other._as_mpf_val(self._prec)\n             return bool(mlib.mpf_eq(self._mpf_, ompf))\n+        if not self:\n+            return not other\n         return False    # Float != non-Number\n \n     def __ne__(self, other):\ndiff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8b3e99126e2e..9faed1d13103 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -436,6 +436,7 @@ def eq(a, b):\n     a = Float(2) ** Float(4)\n     assert eq(a.evalf(), Float(16))\n     assert (S(.3) == S(.5)) is False\n+\n     mpf = (0, 5404319552844595, -52, 53)\n     x_str =  Float((0, '13333333333333', -52, 53))\n     x2_str = Float((0, '26666666666666', -53, 54))\n@@ -582,7 +583,12 @@ def teq(a):\n     for i, a in zip(u, v):\n         assert Float(i) is a\n \n-\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n \n @conserve_mpmath_dps\n def test_float_mpf():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/20801"}