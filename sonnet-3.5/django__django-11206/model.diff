diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..d7db1279b1 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -1,4 +1,4 @@
-from decimal import Decimal
+from decimal import Decimal, ROUND_HALF_UP
 
 from django.conf import settings
 from django.utils.safestring import mark_safe
@@ -26,23 +26,36 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
         return mark_safe(number)
     # sign
     sign = ''
-    if isinstance(number, Decimal):
-        # Format values with more than 200 digits (an arbitrary cutoff) using
-        # scientific notation to avoid high memory usage in {:f}'.format().
-        _, digits, exponent = number.as_tuple()
-        if abs(exponent) + len(digits) > 200:
-            number = '{:e}'.format(number)
-            coefficient, exponent = number.split('e')
-            # Format the coefficient.
-            coefficient = format(
-                coefficient, decimal_sep, decimal_pos, grouping,
-                thousand_sep, force_grouping, use_l10n,
-            )
-            return '{}e{}'.format(coefficient, exponent)
-        else:
-            str_number = '{:f}'.format(number)
+    if not isinstance(number, Decimal):
+        number = Decimal(str(number))
+    
+    print(f"Debug: Initial number: {number}")  # Debug output
+
+    # Round the number to the specified decimal_pos
+    if decimal_pos is not None:
+        number = number.quantize(Decimal('1e-{}'.format(decimal_pos)), rounding=ROUND_HALF_UP)
+        print(f"Debug: After rounding: {number}")  # Debug output
+
+    # Handle very small numbers when decimal_pos is specified
+    if decimal_pos is not None and abs(number) < Decimal('1e-{}'.format(decimal_pos)):
+        return '0' + decimal_sep + '0' * decimal_pos
+
+    # Format values with more than 200 digits (an arbitrary cutoff) using
+    # scientific notation to avoid high memory usage in {:f}'.format().
+    _, digits, exponent = number.as_tuple()
+    if abs(exponent) + len(digits) > 200:
+        number = '{:e}'.format(number)
+        coefficient, exponent = number.split('e')
+        # Format the coefficient.
+        coefficient = format(
+            coefficient, decimal_sep, decimal_pos, grouping,
+            thousand_sep, force_grouping, use_l10n,
+        )
+        return '{}e{}'.format(coefficient, exponent)
     else:
         str_number = str(number)
+        print(f"Debug: Final str_number: {str_number}")  # Debug output
+
     if str_number[0] == '-':
         sign = '-'
         str_number = str_number[1:]
diff --git a/test_numberformat.py b/test_numberformat.py
new file mode 100644
index 0000000000..10a5efe40e
--- /dev/null
+++ b/test_numberformat.py
@@ -0,0 +1,29 @@
+import os
+import django
+from decimal import Decimal
+
+# Configure Django settings
+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'
+from django.conf import settings
+settings.configure(SECRET_KEY='dummy_secret_key_for_testing')
+django.setup()
+
+from django.utils.numberformat import format as nformat
+
+# Test cases
+test_cases = [
+    (Decimal('1e-199'), 2, '0.00'),
+    (Decimal('1e-200'), 2, '0.00'),
+    (Decimal('1e-201'), 2, '0.00'),
+    (Decimal('0.001'), 2, '0.00'),
+    (Decimal('0.005'), 2, '0.01'),
+    (Decimal('1.23'), 2, '1.23'),
+]
+
+for number, decimal_pos, expected in test_cases:
+    result = nformat(number, '.', decimal_pos=decimal_pos)
+    print(f"Input: {number}, decimal_pos: {decimal_pos}")
+    print(f"Expected: {expected}")
+    print(f"Result: {result}")
+    print("Pass" if result == expected else "Fail")
+    print()
