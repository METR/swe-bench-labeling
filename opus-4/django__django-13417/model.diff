diff --git a/comprehensive_test.py b/comprehensive_test.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 85cd8311a7..a8940a560f 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1225,6 +1225,12 @@ class QuerySet:
         if self.query.extra_order_by or self.query.order_by:
             return True
         elif self.query.default_ordering and self.query.get_meta().ordering:
+            # Check if this query has a GROUP BY clause, which would remove
+            # the default ordering coming from Meta.ordering
+            if self.query.group_by is not None:
+                # When there's a GROUP BY with only Meta.ordering (no explicit order_by),
+                # the ORDER BY clause is removed by the compiler
+                return False
             return True
         else:
             return False
diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_ordered_property.py b/test_ordered_property.py
new file mode 100644
index 0000000000..234cc5713d
--- /dev/null
+++ b/test_ordered_property.py
@@ -0,0 +1,73 @@
+import django
+from django.conf import settings
+
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+    USE_TZ=False,
+)
+
+django.setup()
+
+from django.db import models
+from django.db.models import Count
+from django.test import TestCase
+
+
+class Foo(models.Model):
+    uuid = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        ordering = ['name']
+        db_table = 'test_foo'
+        app_label = 'test_app'
+
+
+def test_ordered_property_with_group_by():
+    # Create the table
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Foo)
+    
+    # Create test data
+    Foo.objects.create(name='B')
+    Foo.objects.create(name='A')
+    Foo.objects.create(name='C')
+    
+    # Test 1: Normal queryset should be ordered
+    qs1 = Foo.objects.all()
+    print("\nTest 1 - Normal queryset:")
+    print(f"SQL: {qs1.query}")
+    print(f"qs.ordered: {qs1.ordered}")
+    print(f"qs.query.default_ordering: {qs1.query.default_ordering}")
+    
+    # Test 2: Annotated queryset with GROUP BY should not be ordered
+    qs2 = Foo.objects.annotate(Count("pk")).all()
+    print("\nTest 2 - Annotated queryset with GROUP BY:")
+    print(f"SQL: {qs2.query}")
+    print(f"qs.ordered: {qs2.ordered}")
+    print(f"qs.query.default_ordering: {qs2.query.default_ordering}")
+    
+    # Check if ORDER BY is actually in the SQL
+    sql_str = str(qs2.query)
+    has_order_by = 'ORDER BY' in sql_str
+    print(f"ORDER BY in SQL: {has_order_by}")
+    
+    # Check actual SQL executed
+    from django.db import connection
+    with connection.cursor() as cursor:
+        sql, params = qs2.query.sql_with_params()
+        print(f"\nActual SQL that would be executed: {sql}")
+    
+    print(f"\nThe bug: qs2.ordered returns {qs2.ordered} but should return False")
+    print("because GROUP BY removes the ORDER BY clause")
+
+
+if __name__ == '__main__':
+    test_ordered_property_with_group_by()
