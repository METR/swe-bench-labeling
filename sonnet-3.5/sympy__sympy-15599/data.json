{"instance_id": "sympy__sympy-15599", "score": "I", "diff": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc..3da85b9823 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -113,8 +113,11 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n             # if q same for all\n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n-                net = Add(*non_mod_l) + Add(*[i.args[0] for i in mod_l])\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n+                net = Add(*[i.args[0] for i in non_mod_l]) + Add(*[i.args[0] for i in mod_l])\n                 return cls(net, q)\n \n         elif isinstance(p, Mul):\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 04d3b1ab9f..7fe6447ee7 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1623,6 +1623,8 @@ def test_Mod():\n     assert Mod(5.0*x, 0.1*y) == 0.1*Mod(50*x, y)\n     i = Symbol('i', integer=True)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n+    # New test case for Mod(3*i, 2)\n+    assert Mod(3*i, 2).doit() == Mod(i, 2)\n     assert Mod(4*i, 4) == 0\n \n     # issue 8677\n", "gold_standard_diff": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc21..0498f7a75dbe 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,6 +1,7 @@\n from __future__ import print_function, division\n \n-from sympy.core.numbers import nan\n+from sympy.core.numbers import nan, Integer\n+from sympy.core.compatibility import integer_types\n from .function import Function\n \n \n@@ -45,7 +46,7 @@ def doit(p, q):\n \n             if q.is_Number:\n                 if p.is_Number:\n-                    return (p % q)\n+                    return p%q\n                 if q == 2:\n                     if p.is_even:\n                         return S.Zero\n@@ -64,7 +65,7 @@ def doit(p, q):\n             except TypeError:\n                 pass\n             else:\n-                if type(d) is int:\n+                if isinstance(d, integer_types):\n                     rv = p - d*q\n                     if (rv*q < 0) == True:\n                         rv += q\n@@ -139,6 +140,17 @@ def doit(p, q):\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n \n+            if q.is_Integer and q is not S.One:\n+                _ = []\n+                for i in non_mod_l:\n+                    if i.is_Integer and (i % q is not S.Zero):\n+                        _.append(i%q)\n+                    else:\n+                        _.append(i)\n+                non_mod_l = _\n+\n+            p = Mul(*(non_mod_l + mod_l))\n+\n         # XXX other possibilities?\n \n         # extract gcd; any further simplification should be done by the user\ndiff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 04d3b1ab9fe5..5f58f9284c9a 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1662,6 +1662,12 @@ def test_Mod():\n     assert Mod(Mod(x + 2, 4)*(x + 4), 4) == Mod(x*(x + 2), 4)\n     assert Mod(Mod(x + 2, 4)*4, 4) == 0\n \n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n \n def test_Mod_is_integer():\n     p = Symbol('p', integer=True)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/15599"}