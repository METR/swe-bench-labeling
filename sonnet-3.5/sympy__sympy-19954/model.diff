diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..b8d8b9371d 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2192,20 +2192,22 @@ def _number_blocks(blocks):
                 # a representative block (containing 0)
                 rep = {j for j in range(self.degree) if num_block[j] == 0}
                 # check if the system is minimal with
-                # respect to the already discovere ones
+                # respect to the already discovered ones
                 minimal = True
                 to_remove = []
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
                         # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
-                        to_remove.append(rep_blocks[i])
+                        to_remove.append(i)
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
                         minimal = False
                         break
                 # remove non-minimal representative blocks
-                rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                for i in reversed(to_remove):
+                    del num_blocks[i]
+                    del blocks[i]
+                    del rep_blocks[i]
 
                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
diff --git a/test_sylow_subgroup.py b/test_sylow_subgroup.py
new file mode 100644
index 0000000000..d39b9df64f
--- /dev/null
+++ b/test_sylow_subgroup.py
@@ -0,0 +1,13 @@
+from sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation
+
+def test_sylow_subgroup():
+    G = DihedralGroup(18)
+    S2 = G.sylow_subgroup(p=2)
+    print("Sylow 2-subgroup of D18:", S2)
+
+    G = DihedralGroup(2*25)
+    S2 = G.sylow_subgroup(p=2)
+    print("Sylow 2-subgroup of D50:", S2)
+
+if __name__ == "__main__":
+    test_sylow_subgroup()
