diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py
index d238061b4..3ce9558d7 100644
--- a/src/_pytest/compat.py
+++ b/src/_pytest/compat.py
@@ -68,7 +68,7 @@ def num_mock_patch_args(function):
     if any(mock_modules):
         sentinels = [m.DEFAULT for m in mock_modules if m is not None]
         return len(
-            [p for p in patchings if not p.attribute_name and p.new in sentinels]
+            [p for p in patchings if not p.attribute_name and any(p.new is s for s in sentinels)]
         )
     return len(patchings)
 
diff --git a/src/_pytest/test_compat.py b/src/_pytest/test_compat.py
new file mode 100644
index 000000000..6cee66314
--- /dev/null
+++ b/src/_pytest/test_compat.py
@@ -0,0 +1,33 @@
+
+import pytest
+from unittest.mock import patch
+import numpy as np
+from _pytest.compat import num_mock_patch_args
+
+def test_num_mock_patch_args():
+    # Test with a regular object
+    @patch('os.path.exists', return_value=True)
+    def func1(mock_exists):
+        pass
+    
+    assert num_mock_patch_args(func1) == 1
+
+    # Test with a numpy array
+    @patch('numpy.array', new=np.array([1, 2, 3]))
+    def func2():
+        pass
+    
+    assert num_mock_patch_args(func2) == 0
+
+    # Test with multiple patches, including a numpy array
+    @patch('os.path.exists', return_value=True)
+    @patch('numpy.array', new=np.array([1, 2, 3]))
+    @patch('os.getcwd', return_value='/home')
+    def func3(mock_getcwd, mock_exists):
+        pass
+    
+    assert num_mock_patch_args(func3) == 2
+
+# Run the test
+if __name__ == '__main__':
+    pytest.main([__file__])
\ No newline at end of file
diff --git a/test_num_mock_patch_args.py b/test_num_mock_patch_args.py
new file mode 100644
index 000000000..d7dad01da
--- /dev/null
+++ b/test_num_mock_patch_args.py
@@ -0,0 +1,31 @@
+
+import pytest
+from unittest.mock import patch
+from _pytest.compat import num_mock_patch_args
+
+def test_num_mock_patch_args():
+    # Test with a regular object
+    @patch('os.path.exists', return_value=True)
+    def func1(mock_exists):
+        pass
+    
+    assert num_mock_patch_args(func1) == 1
+
+    # Test with a list (simulating an array-like object)
+    @patch('some_module.some_function', new=[1, 2, 3])
+    def func2():
+        pass
+    
+    assert num_mock_patch_args(func2) == 0
+
+    # Test with multiple patches, including a list
+    @patch('os.path.exists', return_value=True)
+    @patch('some_module.some_function', new=[1, 2, 3])
+    @patch('os.getcwd', return_value='/home')
+    def func3(mock_getcwd, mock_exists):
+        pass
+    
+    assert num_mock_patch_args(func3) == 2
+
+if __name__ == '__main__':
+    pytest.main([__file__])
\ No newline at end of file
