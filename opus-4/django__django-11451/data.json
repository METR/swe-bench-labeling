{"instance_id": "django__django-11451", "score": "C", "diff": "diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722757..a3765ae0f1 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):\n     def authenticate(self, request, username=None, password=None, **kwargs):\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n+        if username is None or password is None:\n+            return\n         try:\n             user = UserModel._default_manager.get_by_natural_key(username)\n         except UserModel.DoesNotExist:\ndiff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex 6447edefc9..35986bee8a 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -261,6 +261,28 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         )\n         self.assertEqual(authenticate(username='test', password='test'), user)\n \n+    def test_authenticate_with_none_credentials(self):\n+        \"\"\"\n+        Authentication should not make a database query when username or password is None.\n+        \"\"\"\n+        # First, make sure normal authentication works\n+        self.assertEqual(authenticate(**self.user_credentials), self.user)\n+        \n+        # Test with None username - should not make any queries\n+        with self.assertNumQueries(0):\n+            result = authenticate(username=None, password='test')\n+            self.assertIsNone(result)\n+        \n+        # Test with None password - should not make any queries\n+        with self.assertNumQueries(0):\n+            result = authenticate(username='test', password=None)\n+            self.assertIsNone(result)\n+        \n+        # Test with both None - should not make any queries\n+        with self.assertNumQueries(0):\n+            result = authenticate(username=None, password=None)\n+            self.assertIsNone(result)\n+\n \n @override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')\n class ExtensionUserModelBackendTest(BaseModelBackendTest, TestCase):\n@@ -777,3 +799,5 @@ class AllowAllUsersModelBackendTest(TestCase):\n         request.session = self.client.session\n         user = get_user(request)\n         self.assertEqual(user, self.user)\n+        self.assertEqual(user, self.user)\n+\n", "gold_standard_diff": "From 3ee0834a4652fb9eb8b69e09c3541901739021de Mon Sep 17 00:00:00 2001\nFrom: Aymeric Augustin <aymeric.augustin@m4x.org>\nDate: Sat, 8 Jun 2019 21:03:26 +0200\nSubject: [PATCH] Fixed #30556 -- Avoided useless query and hasher call in\n ModelBackend.authenticate() when credentials aren't provided.\n\nThere's no need to fetch a user instance from the database unless\na username and a password are provided as credentials.\n---\n django/contrib/auth/backends.py        |  2 ++\n tests/auth_tests/test_auth_backends.py | 13 +++++++++++++\n 2 files changed, 15 insertions(+)\n\ndiff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722757dc..a3765ae0f100 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):\n     def authenticate(self, request, username=None, password=None, **kwargs):\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n+        if username is None or password is None:\n+            return\n         try:\n             user = UserModel._default_manager.get_by_natural_key(username)\n         except UserModel.DoesNotExist:\ndiff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex 6447edefc94f..92c60af7d650 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,6 +226,19 @@ def test_authentication_timing(self):\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11451"}