{"instance_id": "sympy__sympy-24066", "score": "I", "diff": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c108..d2d8cec901 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -192,8 +192,16 @@ def _collect_factor_and_dimension(self, expr):\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            # Check if all arguments are dimensionless\n+            dims = [d[1] for d in fds]\n+            for dim in dims:\n+                if not self.get_dimension_system().is_dimensionless(dim):\n+                    raise ValueError(\n+                        'Dimension of \"{}\" is {}, '\n+                        'but it should be {}'.format(\n+                            expr.func(*(f[0] for f in fds)), dim, Dimension(1)))\n+            # If all arguments are dimensionless, the function result is also dimensionless\n+            return expr.func(*(f[0] for f in fds)), Dimension(1)\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..096e8a714f\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,69 @@\n+from sympy import exp, sin, cos, log, tan, sqrt, E, pi\n+from sympy.physics import units\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import meter, second, joule, volt, ohm, farad\n+\n+# Test 1: Original issue - exp with dimensionless argument\n+expr = units.second / (units.ohm * units.farad)\n+dim = SI._collect_factor_and_dimension(expr)[1]\n+print(f\"Test 1 - Expression: {expr}\")\n+print(f\"Test 1 - Dimension: {dim}\")\n+print(f\"Test 1 - Is dimensionless: {SI.get_dimension_system().is_dimensionless(dim)}\")\n+assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+buggy_expr = 100 + exp(expr)\n+print(f\"Test 1 - Buggy expression: {buggy_expr}\")\n+result = SI._collect_factor_and_dimension(buggy_expr)\n+print(f\"Test 1 - Result: {result}\")\n+print(f\"Test 1 - PASSED!\\n\")\n+\n+# Test 2: Various functions with dimensionless arguments\n+print(\"Test 2 - Testing various functions with dimensionless arguments:\")\n+functions = [sin, cos, tan, log]\n+for func in functions:\n+    try:\n+        test_expr = func(expr)\n+        factor, dim = SI._collect_factor_and_dimension(test_expr)\n+        print(f\"  {func.__name__}({expr}) -> factor: {factor}, dimension: {dim}\")\n+        assert SI.get_dimension_system().is_dimensionless(dim)\n+    except Exception as e:\n+        print(f\"  {func.__name__} failed: {e}\")\n+\n+print(\"Test 2 - PASSED!\\n\")\n+\n+# Test 3: Functions with dimensional arguments should raise error\n+print(\"Test 3 - Testing functions with dimensional arguments (should fail):\")\n+try:\n+    bad_expr = exp(meter)\n+    SI._collect_factor_and_dimension(bad_expr)\n+    print(\"  ERROR: Should have raised ValueError!\")\n+except ValueError as e:\n+    print(f\"  Correctly raised ValueError: {e}\")\n+\n+print(\"Test 3 - PASSED!\\n\")\n+\n+# Test 4: Test from test_issue_20288\n+from sympy.physics.units import energy\n+u = units.Quantity('u')\n+v = units.Quantity('v')\n+SI.set_quantity_dimension(u, energy)\n+SI.set_quantity_dimension(v, energy)\n+u.set_global_relative_scale_factor(1, joule)\n+v.set_global_relative_scale_factor(1, joule)\n+expr = 1 + exp(u**2/v**2)\n+result = SI._collect_factor_and_dimension(expr)\n+print(f\"Test 4 - Expression: {expr}\")\n+print(f\"Test 4 - Result: {result}\")\n+assert result == (1 + E, units.dimensions.Dimension(1))\n+print(\"Test 4 - PASSED!\\n\")\n+\n+# Test 5: Nested functions\n+print(\"Test 5 - Testing nested functions:\")\n+dimensionless_expr = units.second / (units.ohm * units.farad)\n+nested_expr = sin(exp(dimensionless_expr))\n+factor, dim = SI._collect_factor_and_dimension(nested_expr)\n+print(f\"  sin(exp({dimensionless_expr})) -> factor: {factor}, dimension: {dim}\")\n+assert SI.get_dimension_system().is_dimensionless(dim)\n+print(\"Test 5 - PASSED!\\n\")\n+\n+print(\"\\nAll tests passed!\")\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..cd312ffd50\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,45 @@\n+from sympy import exp, sin, sqrt, symbols\n+from sympy.physics import units\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import meter, second, ohm, farad\n+\n+# Test: Functions with multiple arguments\n+x = symbols('x')\n+print(\"Test 1: Functions with multiple arguments\")\n+try:\n+    # Functions like atan2, etc. might have multiple arguments\n+    # For now, our implementation requires all args to be dimensionless\n+    print(\"  - Testing function with symbol and dimensionless quantity\")\n+    expr = units.second / (units.ohm * units.farad)\n+    # This should work since x is dimensionless and expr is dimensionless\n+    factor, dim = SI._collect_factor_and_dimension(exp(x + expr))\n+    print(f\"    exp(x + {expr}) -> factor: {factor}, dimension: {dim}\")\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    print(\"  PASSED!\")\n+except Exception as e:\n+    print(f\"  Failed: {e}\")\n+\n+print(\"\\nTest 2: Functions that don't require dimensionless arguments\")\n+# sqrt doesn't necessarily require dimensionless arguments\n+try:\n+    sqrt_expr = sqrt(meter**2)\n+    factor, dim = SI._collect_factor_and_dimension(sqrt_expr)\n+    print(f\"  sqrt(meter**2) -> factor: {factor}, dimension: {dim}\")\n+    # sqrt is not a transcendental function, so it shouldn't check dimensions\n+    print(\"  PASSED!\")\n+except Exception as e:\n+    print(f\"  Failed (expected): {e}\")\n+\n+print(\"\\nTest 3: Mixed expressions\")\n+try:\n+    expr = units.second / (units.ohm * units.farad)\n+    mixed = 2*exp(expr) + 3*sin(expr) + 5\n+    factor, dim = SI._collect_factor_and_dimension(mixed)\n+    print(f\"  2*exp({expr}) + 3*sin({expr}) + 5\")\n+    print(f\"    -> factor: {factor}, dimension: {dim}\")\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    print(\"  PASSED!\")\n+except Exception as e:\n+    print(f\"  Failed: {e}\")\n+\n+print(\"\\nAll edge case tests completed!\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..cc9f7b72f2\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,23 @@\n+from sympy import exp\n+from sympy.physics import units\n+from sympy.physics.units.systems.si import SI\n+\n+# First test - this should work\n+expr = units.second / (units.ohm * units.farad)\n+dim = SI._collect_factor_and_dimension(expr)[1]\n+\n+print(f\"Expression: {expr}\")\n+print(f\"Dimension: {dim}\")\n+print(f\"Is dimensionless: {SI.get_dimension_system().is_dimensionless(dim)}\")\n+\n+assert SI.get_dimension_system().is_dimensionless(dim)\n+print(\"First assertion passed!\")\n+\n+# Second test - this should fail with the bug\n+try:\n+    buggy_expr = 100 + exp(expr)\n+    print(f\"\\nBuggy expression: {buggy_expr}\")\n+    result = SI._collect_factor_and_dimension(buggy_expr)\n+    print(f\"Result: {result}\")\n+except ValueError as e:\n+    print(f\"\\nError occurred: {e}\")\n", "gold_standard_diff": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 25a68c7be53a..c1830ba5f772 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,27 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\ndiff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c10869..a436880c4b3c 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -190,10 +190,9 @@ def _collect_factor_and_dimension(self, expr):\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n-            fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n+            dims = [Dimension(1) if self.get_dimension_system().is_dimensionless(d[1]) else d[1] for d in fds]\n+            return (expr.func(*(f[0] for f in fds)), *dims)\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/24066"}