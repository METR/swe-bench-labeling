{"instance_id": "django__django-10914", "score": "I", "diff": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/run_test.py b/run_test.py\nnew file mode 100644\nindex 0000000000..fb57cfbbb8\n--- /dev/null\n+++ b/run_test.py\n@@ -0,0 +1,32 @@\n+import os\n+import sys\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_settings'\n+sys.path.insert(0, '/testbed')\n+\n+import django\n+django.setup()\n+\n+from django.test import TestCase\n+from tests.file_storage.tests import FileStoragePermissions\n+\n+# Run the specific test\n+test = FileStoragePermissions()\n+test.setUp()\n+try:\n+    test.test_file_upload_default_permissions()\n+    print(\"TEST PASSED: test_file_upload_default_permissions\")\n+except Exception as e:\n+    print(f\"TEST FAILED: {e}\")\n+finally:\n+    test.tearDown()\n+\n+# Also test with explicit permissions\n+test2 = FileStoragePermissions()\n+test2.setUp()\n+try:\n+    test2.test_file_upload_permissions()\n+    print(\"TEST PASSED: test_file_upload_permissions\")\n+except Exception as e:\n+    print(f\"TEST FAILED: {e}\")\n+finally:\n+    test2.tearDown()\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..d1d4d38afe\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,65 @@\n+import os\n+import tempfile\n+from django.conf import settings\n+settings.configure(SECRET_KEY='test')\n+\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import SimpleUploadedFile\n+\n+# Create a test storage\n+storage = FileSystemStorage(location='/tmp/test_uploads2')\n+os.makedirs('/tmp/test_uploads2', exist_ok=True)\n+\n+# Check the new default FILE_UPLOAD_PERMISSIONS setting\n+print(f\"Current FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n+print(f\"In octal: {oct(settings.FILE_UPLOAD_PERMISSIONS)}\")\n+\n+# Test with small file\n+small_content = b'Small file content'\n+small_file = SimpleUploadedFile('small2.txt', small_content)\n+small_path = storage.save('small2.txt', small_file)\n+small_full_path = storage.path(small_path)\n+small_perms = oct(os.stat(small_full_path).st_mode)[-3:]\n+print(f\"Small file permissions: {small_perms}\")\n+\n+# Test with a file that has temporary_file_path (simulating large file)\n+with tempfile.NamedTemporaryFile(delete=False, mode='wb') as tmp:\n+    tmp.write(b'Large file content' * 1000)\n+    tmp_path = tmp.name\n+    \n+# Check temp file permissions\n+temp_perms = oct(os.stat(tmp_path).st_mode)[-3:]\n+print(f\"Temp file permissions: {temp_perms}\")\n+\n+# Create a mock uploaded file with temporary_file_path\n+class MockTemporaryFile:\n+    def __init__(self, path):\n+        self._path = path\n+        \n+    def temporary_file_path(self):\n+        return self._path\n+    \n+    def chunks(self):\n+        with open(self._path, 'rb') as f:\n+            while True:\n+                chunk = f.read(4096)\n+                if not chunk:\n+                    break\n+                yield chunk\n+\n+mock_file = MockTemporaryFile(tmp_path)\n+large_path = storage.save('large2.txt', mock_file)\n+large_full_path = storage.path(large_path)\n+large_perms = oct(os.stat(large_full_path).st_mode)[-3:]\n+print(f\"Large file permissions after move: {large_perms}\")\n+\n+# Clean up\n+try:\n+    os.unlink(tmp_path)\n+except:\n+    pass\n+os.unlink(small_full_path) \n+os.unlink(large_full_path)\n+os.rmdir('/tmp/test_uploads2')\n+\n+print(\"\\nBoth small and large files should now have 644 permissions!\")\ndiff --git a/test_permissions.py b/test_permissions.py\nnew file mode 100644\nindex 0000000000..d8bd4a3451\n--- /dev/null\n+++ b/test_permissions.py\n@@ -0,0 +1,58 @@\n+import os\n+import tempfile\n+from django.conf import settings\n+settings.configure(SECRET_KEY='test')\n+\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile\n+\n+# Create a test storage\n+storage = FileSystemStorage(location='/tmp/test_uploads')\n+os.makedirs('/tmp/test_uploads', exist_ok=True)\n+\n+# First, let's check the current FILE_UPLOAD_PERMISSIONS setting\n+print(f\"Current FILE_UPLOAD_PERMISSIONS: {settings.FILE_UPLOAD_PERMISSIONS}\")\n+\n+# Test with small file (will use MemoryUploadedFile)\n+small_content = b'Small file content'\n+small_file = SimpleUploadedFile('small.txt', small_content)\n+small_path = storage.save('small.txt', small_file)\n+small_full_path = storage.path(small_path)\n+small_perms = oct(os.stat(small_full_path).st_mode)[-3:]\n+print(f\"Small file permissions: {small_perms}\")\n+\n+# Test with a file that has temporary_file_path (simulating TemporaryUploadedFile)\n+with tempfile.NamedTemporaryFile(delete=False, mode='wb') as tmp:\n+    tmp.write(b'Large file content' * 1000)\n+    tmp_path = tmp.name\n+    \n+# Check temp file permissions\n+temp_perms = oct(os.stat(tmp_path).st_mode)[-3:]\n+print(f\"Temp file permissions: {temp_perms}\")\n+\n+# Create a mock uploaded file with temporary_file_path\n+class MockTemporaryFile:\n+    def __init__(self, path):\n+        self._path = path\n+        \n+    def temporary_file_path(self):\n+        return self._path\n+    \n+    def chunks(self):\n+        with open(self._path, 'rb') as f:\n+            while True:\n+                chunk = f.read(4096)\n+                if not chunk:\n+                    break\n+                yield chunk\n+\n+mock_file = MockTemporaryFile(tmp_path)\n+large_path = storage.save('large.txt', mock_file)\n+large_full_path = storage.path(large_path)\n+large_perms = oct(os.stat(large_full_path).st_mode)[-3:]\n+print(f\"Large file permissions after move: {large_perms}\")\n+\n+# Clean up\n+os.unlink(tmp_path)\n+os.unlink(small_full_path) \n+os.unlink(large_full_path)\ndiff --git a/test_temp_file_permissions.py b/test_temp_file_permissions.py\nnew file mode 100644\nindex 0000000000..f0c1b9bf29\n--- /dev/null\n+++ b/test_temp_file_permissions.py\n@@ -0,0 +1,86 @@\n+\"\"\"\n+Test to verify that files uploaded via temporary files get correct permissions\n+\"\"\"\n+import os\n+import tempfile\n+import shutil\n+from django.conf import settings\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.base import ContentFile\n+\n+# Configure Django\n+from django.conf import settings\n+settings.configure(SECRET_KEY='test')\n+\n+# Create a storage instance\n+storage_dir = tempfile.mkdtemp()\n+storage = FileSystemStorage(location=storage_dir)\n+\n+# Create a mock temporary uploaded file\n+class MockTempFile:\n+    \"\"\"Mock object that simulates TemporaryUploadedFile behavior\"\"\"\n+    def __init__(self, content):\n+        # Create a real temp file with restrictive permissions\n+        self.temp_fd, self.temp_path = tempfile.mkstemp()\n+        os.write(self.temp_fd, content)\n+        os.close(self.temp_fd)\n+        # Ensure temp file has restrictive permissions\n+        os.chmod(self.temp_path, 0o600)\n+        self.content = content\n+        self.pos = 0\n+        \n+    def temporary_file_path(self):\n+        return self.temp_path\n+    \n+    def read(self, size=-1):\n+        if size == -1:\n+            result = self.content[self.pos:]\n+            self.pos = len(self.content)\n+        else:\n+            result = self.content[self.pos:self.pos + size]\n+            self.pos += size\n+        return result\n+        \n+    def chunks(self):\n+        # This is needed for files without temporary_file_path\n+        chunk_size = 64 * 1024\n+        while True:\n+            chunk = self.read(chunk_size)\n+            if not chunk:\n+                break\n+            yield chunk\n+            \n+    def __del__(self):\n+        if hasattr(self, 'temp_path') and os.path.exists(self.temp_path):\n+            os.unlink(self.temp_path)\n+\n+# Test 1: Regular file (no temp file)\n+print(\"Test 1: Regular file upload\")\n+regular_content = b\"Regular file content\"\n+regular_file = ContentFile(regular_content)\n+regular_path = storage.save(\"regular.txt\", regular_file)\n+regular_full_path = storage.path(regular_path)\n+regular_perms = oct(os.stat(regular_full_path).st_mode)[-3:]\n+print(f\"Regular file permissions: {regular_perms}\")\n+\n+# Test 2: File via temporary file path (simulating large upload)\n+print(\"\\nTest 2: Large file upload via temp file\")\n+temp_content = b\"Large file content\" * 1000\n+mock_temp_file = MockTempFile(temp_content)\n+temp_file_perms = oct(os.stat(mock_temp_file.temp_path).st_mode)[-3:]\n+print(f\"Temp file permissions before save: {temp_file_perms}\")\n+large_path = storage.save(\"large.txt\", mock_temp_file)\n+large_full_path = storage.path(large_path)\n+large_perms = oct(os.stat(large_full_path).st_mode)[-3:]\n+print(f\"Large file permissions after save: {large_perms}\")\n+\n+# Verify both have same permissions\n+print(f\"\\nFILE_UPLOAD_PERMISSIONS setting: {oct(settings.FILE_UPLOAD_PERMISSIONS)}\")\n+print(f\"Regular file: {regular_perms}, Large file: {large_perms}\")\n+if regular_perms == large_perms == '644':\n+    print(\"SUCCESS: Both files have consistent 644 permissions!\")\n+else:\n+    print(\"FAILED: Files have inconsistent permissions\")\n+\n+# Cleanup\n+shutil.rmtree(storage_dir)\n", "gold_standard_diff": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d23c..bdeec8061080 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ def gettext_noop(s):\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/docs/howto/deployment/checklist.txt b/docs/howto/deployment/checklist.txt\nindex c31bcac62a9b..b307076b62cc 100644\n--- a/docs/howto/deployment/checklist.txt\n+++ b/docs/howto/deployment/checklist.txt\n@@ -154,16 +154,6 @@ server never attempts to interpret them. For instance, if a user uploads a\n \n Now is a good time to check your backup strategy for these files.\n \n-:setting:`FILE_UPLOAD_PERMISSIONS`\n-----------------------------------\n-\n-With the default file upload settings, files smaller than\n-:setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` may be stored with a different mode\n-than larger files as described in :setting:`FILE_UPLOAD_PERMISSIONS`.\n-\n-Setting :setting:`FILE_UPLOAD_PERMISSIONS` ensures all files are uploaded with\n-the same permissions.\n-\n HTTPS\n =====\n \ndiff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex 46e99af993c5..0bac3fc9d007 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -1484,7 +1484,7 @@ This value mirrors the functionality and caveats of the\n ``FILE_UPLOAD_PERMISSIONS``\n ---------------------------\n \n-Default: ``None``\n+Default: ``0o644``\n \n The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\n more information about what these modes mean, see the documentation for\n@@ -1511,6 +1511,10 @@ when using the :djadmin:`collectstatic` management command. See\n     way that modes must be specified. If you try to use ``644``, you'll\n     get totally incorrect behavior.\n \n+.. versionchanged:: 3.0\n+\n+    In older versions, the default value is ``None``.\n+\n .. setting:: FILE_UPLOAD_TEMP_DIR\n \n ``FILE_UPLOAD_TEMP_DIR``\ndiff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt\nindex 5d9bff086e36..7d88d4d9ef19 100644\n--- a/docs/releases/3.0.txt\n+++ b/docs/releases/3.0.txt\n@@ -284,6 +284,17 @@ Django 3.0, we're removing these APIs at this time.\n \n * ``django.utils.safestring.SafeBytes`` - Unused since Django 2.0.\n \n+New default value for the ``FILE_UPLOAD_PERMISSIONS`` setting\n+-------------------------------------------------------------\n+\n+In older versions, the :setting:`FILE_UPLOAD_PERMISSIONS` setting defaults to\n+``None``. With the default :setting:`FILE_UPLOAD_HANDLERS`, this results in\n+uploaded files having different permissions depending on their size and which\n+upload handler is used.\n+\n+``FILE_UPLOAD_PERMISSION`` now defaults to ``0o644`` to avoid this\n+inconsistency.\n+\n Miscellaneous\n -------------\n \ndiff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex a1a113a26ec2..e953eb660940 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1099,7 +1099,7 @@ def test_override_file_upload_permissions(self):\n         the file_permissions_mode attribute of\n         django.core.files.storage.default_storage.\n         \"\"\"\n-        self.assertIsNone(default_storage.file_permissions_mode)\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/10914"}