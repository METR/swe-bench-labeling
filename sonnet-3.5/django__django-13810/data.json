{"instance_id": "django__django-13810", "score": "C", "diff": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..bd4c71de88 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -50,6 +50,9 @@ class BaseHandler:\n             else:\n                 middleware_is_async = middleware_can_async\n             try:\n+                # Store the previous handler state\n+                prev_handler = handler\n+                prev_handler_is_async = handler_is_async\n                 # Adapt handler, if needed.\n                 handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n@@ -62,6 +65,9 @@ class BaseHandler:\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n+                # Reset handler to its previous state\n+                handler = prev_handler\n+                handler_is_async = prev_handler_is_async\n                 continue\n \n             if mw_instance is None:\ndiff --git a/docs/ref/exceptions.txt b/docs/ref/exceptions.txt\nindex 2f5aa64b9d..5862c59ff4 100644\n--- a/docs/ref/exceptions.txt\n+++ b/docs/ref/exceptions.txt\n@@ -114,6 +114,11 @@ Django core exception classes are defined in ``django.core.exceptions``.\n     The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not\n     used in the server configuration.\n \n+    In ASGI contexts, when a middleware raises :exc:`MiddlewareNotUsed`, Django\n+    ensures that the middleware chain is properly reset to its previous state.\n+    This prevents any undesired side effects from affecting subsequent middleware\n+    or the view.\n+\n ``ImproperlyConfigured``\n ------------------------\n \n", "gold_standard_diff": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06aa5..728e449703c9 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -51,11 +51,11 @@ def load_middleware(self, is_async=False):\n                 middleware_is_async = middleware_can_async\n             try:\n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n@@ -63,6 +63,8 @@ def load_middleware(self, is_async=False):\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n                 continue\n+            else:\n+                handler = adapted_handler\n \n             if mw_instance is None:\n                 raise ImproperlyConfigured(\ndiff --git a/docs/releases/3.1.5.txt b/docs/releases/3.1.5.txt\nindex 0d1111844613..eea060d11220 100644\n--- a/docs/releases/3.1.5.txt\n+++ b/docs/releases/3.1.5.txt\n@@ -12,3 +12,7 @@ Bugfixes\n * Fixed ``__isnull=True`` lookup on key transforms for\n   :class:`~django.db.models.JSONField` with Oracle and SQLite\n   (:ticket:`32252`).\n+\n+* Fixed a bug in Django 3.1 that caused a crash when processing middlewares in\n+  an async context with a middleware that raises a ``MiddlewareNotUsed``\n+  exception (:ticket:`32299`).\ndiff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex 8b019ba5248a..2a389ce125c4 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -181,6 +181,25 @@ def test_do_not_log_when_debug_is_false(self):\n             with self.assertLogs('django.request', 'DEBUG'):\n                 self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware '\n+            'adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n \n @override_settings(\n     DEBUG=True,\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13810"}