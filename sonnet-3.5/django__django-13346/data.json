{"instance_id": "django__django-13346", "score": "I", "diff": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8..64bc42ec12 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -479,6 +479,14 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n     pass\n \n \n+class KeyTransformIn(lookups.In):\n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if not connection.features.has_native_json_field:\n+            rhs_params = [json.dumps(value) for value in rhs_params]\n+        return rhs, rhs_params\n+\n+\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n@@ -494,7 +502,7 @@ KeyTransform.register_lookup(KeyTransformLt)\n KeyTransform.register_lookup(KeyTransformLte)\n KeyTransform.register_lookup(KeyTransformGt)\n KeyTransform.register_lookup(KeyTransformGte)\n-\n+KeyTransform.register_lookup(KeyTransformIn)\n \n class KeyTransformFactory:\n \n", "gold_standard_diff": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8a8..00df1ae20637 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -378,6 +378,30 @@ def as_sqlite(self, compiler, connection):\n         return super().as_sql(compiler, connection)\n \n \n+class KeyTransformIn(lookups.In):\n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if not connection.features.has_native_json_field:\n+            func = ()\n+            if connection.vendor == 'oracle':\n+                func = []\n+                for value in rhs_params:\n+                    value = json.loads(value)\n+                    function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n+                    func.append(\"%s('%s', '$.value')\" % (\n+                        function,\n+                        json.dumps({'value': value}),\n+                    ))\n+                func = tuple(func)\n+                rhs_params = ()\n+            elif connection.vendor == 'mysql' and connection.mysql_is_mariadb:\n+                func = (\"JSON_UNQUOTE(JSON_EXTRACT(%s, '$'))\",) * len(rhs_params)\n+            elif connection.vendor in {'sqlite', 'mysql'}:\n+                func = (\"JSON_EXTRACT(%s, '$')\",) * len(rhs_params)\n+            rhs = rhs % func\n+        return rhs, rhs_params\n+\n+\n class KeyTransformExact(JSONExact):\n     def process_lhs(self, compiler, connection):\n         lhs, lhs_params = super().process_lhs(compiler, connection)\n@@ -479,6 +503,7 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n     pass\n \n \n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\ndiff --git a/docs/releases/3.1.1.txt b/docs/releases/3.1.1.txt\nindex 6359f181fa39..83ff2b07d22f 100644\n--- a/docs/releases/3.1.1.txt\n+++ b/docs/releases/3.1.1.txt\n@@ -39,3 +39,7 @@ Bugfixes\n * Enforced thread sensitivity of the :class:`MiddlewareMixin.process_request()\n   <django.utils.deprecation.MiddlewareMixin>` and ``process_response()`` hooks\n   when in an async context (:ticket:`31905`).\n+\n+* Fixed ``__in`` lookup on key transforms for\n+  :class:`~django.db.models.JSONField` with MariaDB, MySQL, Oracle, and SQLite\n+  (:ticket:`31936`).\ndiff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex a7648711acda..a250827635be 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -627,6 +627,25 @@ def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n+    def test_key_in(self):\n+        tests = [\n+            ('value__c__in', [14], self.objs[3:5]),\n+            ('value__c__in', [14, 15], self.objs[3:5]),\n+            ('value__0__in', [1], [self.objs[5]]),\n+            ('value__0__in', [1, 3], [self.objs[5]]),\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n+            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     @skipUnlessDBFeature('supports_json_field_contains')\n     def test_key_contains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13346"}