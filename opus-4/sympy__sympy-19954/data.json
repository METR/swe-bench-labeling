{"instance_id": "sympy__sympy-19954", "score": "C", "diff": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..58de77b62d 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2194,18 +2194,21 @@ def _number_blocks(blocks):\n                 # check if the system is minimal with\n                 # respect to the already discovere ones\n                 minimal = True\n-                to_remove = []\n+                to_remove_indices = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove_indices.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n-                # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                # remove non-minimal blocks, num_blocks, and representative blocks\n+                # by creating new lists without the items at to_remove_indices\n+                if to_remove_indices:\n+                    blocks = [blocks[i] for i in range(len(blocks)) if i not in to_remove_indices]\n+                    num_blocks = [num_blocks[i] for i in range(len(num_blocks)) if i not in to_remove_indices]\n+                    rep_blocks = [rep_blocks[i] for i in range(len(rep_blocks)) if i not in to_remove_indices]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..aeab9c4876\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,56 @@\n+from sympy.combinatorics import DihedralGroup, SymmetricGroup, AlternatingGroup\n+\n+print(\"Testing various groups for sylow_subgroup functionality...\")\n+\n+# Test cases from the issue\n+print(\"\\n1. Testing DihedralGroup(18) - from issue\")\n+G = DihedralGroup(18)\n+S2 = G.sylow_subgroup(p=2)\n+print(f\"   Sylow 2-subgroup has order {S2.order()}\")\n+assert S2.order() == 4  # 2^2\n+\n+print(\"\\n2. Testing DihedralGroup(50) - from issue\")\n+G = DihedralGroup(50)\n+S2 = G.sylow_subgroup(p=2)\n+print(f\"   Sylow 2-subgroup has order {S2.order()}\")\n+assert S2.order() == 4  # 2^2\n+\n+# Test cases from the docstring examples\n+print(\"\\n3. Testing DihedralGroup(6) - from docstring\")\n+D = DihedralGroup(6)\n+S = D.sylow_subgroup(2)\n+print(f\"   Sylow 2-subgroup has order {S.order()}\")\n+assert S.order() == 4\n+\n+print(\"\\n4. Testing SymmetricGroup(6) - from docstring\")\n+G = SymmetricGroup(6)\n+S = G.sylow_subgroup(5)\n+print(f\"   Sylow 5-subgroup has order {S.order()}\")\n+assert S.order() == 5\n+\n+print(\"\\n5. Testing AlternatingGroup(3) - from docstring\")\n+G1 = AlternatingGroup(3)\n+S1 = G1.sylow_subgroup(3)\n+print(f\"   Sylow 3-subgroup has order {S1.order()}\")\n+assert S1.order() == 3\n+\n+print(\"\\n6. Testing AlternatingGroup(5) - from docstring\")\n+G2 = AlternatingGroup(5)\n+S2 = G2.sylow_subgroup(3)\n+print(f\"   Sylow 3-subgroup has order {S2.order()}\")\n+assert S2.order() == 3\n+\n+print(\"\\n7. Testing AlternatingGroup(9)\")\n+G3 = AlternatingGroup(9)\n+S3 = G3.sylow_subgroup(3)\n+print(f\"   Sylow 3-subgroup has order {S3.order()}\")\n+\n+# Additional test cases to verify the fix doesn't break anything\n+print(\"\\n8. Testing small DihedralGroup cases\")\n+for n in [4, 6, 8, 10, 12]:\n+    G = DihedralGroup(n)\n+    S2 = G.sylow_subgroup(2)\n+    print(f\"   DihedralGroup({n}): Sylow 2-subgroup has order {S2.order()}\")\n+    # Dihedral group of order 2n has a Sylow 2-subgroup of order 2^k where 2^k || 2n\n+    \n+print(\"\\nAll tests passed!\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..00a790f146\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,17 @@\n+from sympy.combinatorics import DihedralGroup\n+\n+print(\"Testing DihedralGroup(18)...\")\n+G = DihedralGroup(18)\n+try:\n+    S2 = G.sylow_subgroup(p=2)\n+    print(f\"Success! Sylow 2-subgroup has order {S2.order()}\")\n+except IndexError as e:\n+    print(f\"IndexError: {e}\")\n+\n+print(\"\\nTesting DihedralGroup(50)...\")\n+G = DihedralGroup(50)\n+try:\n+    S2 = G.sylow_subgroup(p=2)\n+    print(f\"Success! Sylow 2-subgroup has order {S2.order()}\")\n+except IndexError as e:\n+    print(f\"IndexError: {e}\")\ndiff --git a/test_minimal_blocks.py b/test_minimal_blocks.py\nnew file mode 100644\nindex 0000000000..2ed933ce5e\n--- /dev/null\n+++ b/test_minimal_blocks.py\n@@ -0,0 +1,25 @@\n+from sympy.combinatorics import Permutation, PermutationGroup, SymmetricGroup\n+\n+print(\"Testing minimal_blocks function...\")\n+\n+# Test 1\n+P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n+result = P.minimal_blocks()\n+expected = [[0, 1, 0, 1, 0, 1], [0, 1, 2, 0, 1, 2]]\n+assert result == expected\n+print(\"Test 1 passed\")\n+\n+# Test 2\n+P = SymmetricGroup(5)\n+result = P.minimal_blocks()\n+expected = [[0]*5]\n+assert result == expected\n+print(\"Test 2 passed\")\n+\n+# Test 3 - non-transitive group\n+P = PermutationGroup(Permutation(0, 3))\n+result = P.minimal_blocks()\n+assert result == False\n+print(\"Test 3 passed\")\n+\n+print(\"\\nAll minimal_blocks tests passed!\")\ndiff --git a/test_sylow_specific.py b/test_sylow_specific.py\nnew file mode 100644\nindex 0000000000..e246d026cc\n--- /dev/null\n+++ b/test_sylow_specific.py\n@@ -0,0 +1,65 @@\n+from sympy.combinatorics import Permutation, PermutationGroup, DihedralGroup, SymmetricGroup, AlternatingGroup\n+\n+print(\"Running sylow_subgroup tests from test_perm_groups.py...\")\n+\n+# Test 1\n+P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n+S = P.sylow_subgroup(2)\n+assert S.order() == 4\n+print(\"Test 1 passed\")\n+\n+# Test 2\n+P = DihedralGroup(12)\n+S = P.sylow_subgroup(3)\n+assert S.order() == 3\n+print(\"Test 2 passed\")\n+\n+# Test 3\n+P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5), Permutation(0, 2))\n+S = P.sylow_subgroup(3)\n+assert S.order() == 9\n+S = P.sylow_subgroup(2)\n+assert S.order() == 8\n+print(\"Test 3 passed\")\n+\n+# Test 4\n+P = SymmetricGroup(10)\n+S = P.sylow_subgroup(2)\n+assert S.order() == 256\n+S = P.sylow_subgroup(3)\n+assert S.order() == 81\n+S = P.sylow_subgroup(5)\n+assert S.order() == 25\n+print(\"Test 4 passed\")\n+\n+# Test 5 - lower central series test\n+exp = 1\n+length = 0\n+for i in range(2, 9):\n+    P = SymmetricGroup(i)\n+    S = P.sylow_subgroup(2)\n+    ls = S.lower_central_series()\n+    if i // 2**exp > 0:\n+        # length increases with exponent\n+        assert len(ls) > length\n+        length = len(ls)\n+        exp += 1\n+    else:\n+        assert len(ls) == length\n+print(\"Test 5 passed\")\n+\n+# Test 6\n+G = SymmetricGroup(100)\n+S = G.sylow_subgroup(3)\n+assert G.order() % S.order() == 0\n+assert G.order()/S.order() % 3 > 0\n+print(\"Test 6 passed\")\n+\n+# Test 7\n+G = AlternatingGroup(100)\n+S = G.sylow_subgroup(2)\n+assert G.order() % S.order() == 0\n+assert G.order()/S.order() % 2 > 0\n+print(\"Test 7 passed\")\n+\n+print(\"\\nAll sylow_subgroup tests passed!\")\n", "gold_standard_diff": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4af..deebbbf6d4d1 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2194,18 +2194,19 @@ def _number_blocks(blocks):\n                 # check if the system is minimal with\n                 # respect to the already discovere ones\n                 minimal = True\n-                to_remove = []\n+                blocks_remove_mask = [False] * len(blocks)\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        blocks_remove_mask[i] = True\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                blocks = [b for i, b in enumerate(blocks) if not blocks_remove_mask[i]]\n+                num_blocks = [n for i, n in enumerate(num_blocks) if not blocks_remove_mask[i]]\n+                rep_blocks = [r for i, r in enumerate(rep_blocks) if not blocks_remove_mask[i]]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\ndiff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 7ab09936542b..ff91a3311e5a 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,6 +905,14 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n \n @slow\n def test_presentation():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/19954"}