{"instance_id": "sphinx-doc__sphinx-9258", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 2538952e3..94e1d8b32 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..704b8e811 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -56,15 +56,18 @@ _SINGLETONS = (\"None\", \"True\", \"False\", \"Ellipsis\")\n \n def _convert_type_spec(_type: str, translations: Dict[str, str] = {}) -> str:\n     \"\"\"Convert type specification to reference in reST.\"\"\"\n+    if '|' in _type:\n+        # Handle union types\n+        types = [t.strip() for t in _type.split('|')]\n+        converted_types = [_convert_type_spec(t, translations) for t in types]\n+        return ' | '.join(converted_types)\n+    \n     if _type in translations:\n         return translations[_type]\n+    elif _type == 'None':\n+        return ':obj:`None`'\n     else:\n-        if _type == 'None':\n-            return ':obj:`None`'\n-        else:\n-            return ':class:`%s`' % _type\n-\n-    return _type\n+        return f':class:`{_type}`'\n \n \n class GoogleDocstring:\n@@ -424,7 +427,8 @@ class GoogleDocstring:\n                 lines.append(':%s %s:' % (field_role, _name))\n \n             if _type:\n-                lines.append(':%s %s: %s' % (type_role, _name, _type))\n+                converted_type = _convert_type_spec(_type)\n+                lines.append(':%s %s: %s' % (type_role, _name, converted_type))\n         return lines + ['']\n \n     def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:\n@@ -622,7 +626,8 @@ class GoogleDocstring:\n         _type, _desc = self._consume_inline_attribute()\n         lines = self._format_field('', '', _desc)\n         if _type:\n-            lines.extend(['', ':type: %s' % _type])\n+            converted_type = _convert_type_spec(_type)\n+            lines.extend(['', ':type: %s' % converted_type])\n         return lines\n \n     def _parse_attributes_section(self, section: str) -> List[str]:\ndiff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex acf000178..dd04d5ca5 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -134,6 +134,16 @@ class InlineAttributeTest(BaseDocstringTest):\n         :type: :class:`int`\"\"\")\n         self.assertEqual(expected, actual)\n \n+    def test_class_data_member_inline_union_type(self):\n+        config = Config()\n+        docstring = \"\"\"bytes | str: data member description with union type\"\"\"\n+        actual = str(GoogleDocstring(docstring, config=config, app=None,\n+                     what='attribute', name='some_data', obj=0))\n+        expected = dedent(\"\"\"\\\n+        data member description with union type\n+\n+        :type: :class:`bytes` | :class:`str`\"\"\")\n+        self.assertEqual(expected, actual)\n \n class GoogleDocstringTest(BaseDocstringTest):\n     docstrings = [(\ndiff --git a/tox.ini b/tox.ini\nindex a363e187f..3b8bc12d0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From a1b0e55548589253f997e9b9a1f2465c3c7e22f3 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Sat, 22 May 2021 01:55:43 +0900\nSubject: [PATCH] Close #1874: py domain: Support union types using `|` in\n info-field-list\n\n---\n CHANGES                  |  1 +\n sphinx/domains/python.py |  2 +-\n tests/test_domain_py.py  | 34 ++++++++++++++++++++++++++++++++++\n 3 files changed, 36 insertions(+), 1 deletion(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex e094cd79ad0..db57819c254 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -39,6 +39,7 @@ Features added\n   text\n * #9176: i18n: Emit a debug message if message catalog file not found under\n   :confval:`locale_dirs`\n+* #1874: py domain: Support union types using ``|`` in info-field-list\n * #9097: Optimize the paralell build\n * #9131: Add :confval:`nitpick_ignore_regex` to ignore nitpicky warnings using\n   regular expressions\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 7d39d80edc4..ba021b36b94 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -304,7 +304,7 @@ def make_xref(self, rolename: str, domain: str, target: str,\n     def make_xrefs(self, rolename: str, domain: str, target: str,\n                    innernode: Type[TextlikeNode] = nodes.emphasis,\n                    contnode: Node = None, env: BuildEnvironment = None) -> List[Node]:\n-        delims = r'(\\s*[\\[\\]\\(\\),](?:\\s*or\\s)?\\s*|\\s+or\\s+|\\.\\.\\.)'\n+        delims = r'(\\s*[\\[\\]\\(\\),](?:\\s*or\\s)?\\s*|\\s+or\\s+|\\s*\\|\\s*|\\.\\.\\.)'\n         delims_re = re.compile(delims)\n         sub_targets = re.split(delims, target)\n \ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 2614c8ff6c2..52ec0c2d43c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,40 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_info_field_list_piped_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"age\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"blah blah\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9258"}