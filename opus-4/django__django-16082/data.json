{"instance_id": "django__django-16082", "score": "C", "diff": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7cab82..cbf4fd8296 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -533,6 +533,7 @@ _connector_combinations = [\n             Combinable.SUB,\n             Combinable.MUL,\n             Combinable.DIV,\n+            Combinable.MOD,\n         )\n     },\n     # Bitwise operators.\ndiff --git a/tests/db_functions/math/test_mod.py b/tests/db_functions/math/test_mod.py\nindex 919b9419d2..a69d96e65f 100644\n--- a/tests/db_functions/math/test_mod.py\n+++ b/tests/db_functions/math/test_mod.py\n@@ -42,3 +42,43 @@ class ModTests(TestCase):\n         self.assertEqual(obj.small_mod, math.fmod(obj.small, obj.normal))\n         self.assertEqual(obj.normal_mod, math.fmod(obj.normal, obj.big))\n         self.assertEqual(obj.big_mod, math.fmod(obj.big, obj.small))\n+\n+    def test_decimal_mod_integer(self):\n+        \"\"\"Test Decimal % Integer returns Decimal\"\"\"\n+        from django.db.models import Value\n+        DecimalModel.objects.create(n1=Decimal(\"10.5\"), n2=Decimal(\"3.0\"))\n+        obj = DecimalModel.objects.annotate(\n+            mod_result=Mod(\"n1\", Value(3))\n+        ).first()\n+        self.assertIsInstance(obj.mod_result, Decimal)\n+        self.assertAlmostEqual(obj.mod_result, Decimal(\"1.5\"))\n+    \n+    def test_integer_mod_decimal(self):\n+        \"\"\"Test Integer % Decimal returns Decimal\"\"\"\n+        from django.db.models import Value\n+        IntegerModel.objects.create(small=10, normal=3, big=100)\n+        obj = IntegerModel.objects.annotate(\n+            mod_result=Mod(\"small\", Value(Decimal(\"3.5\")))\n+        ).first()\n+        self.assertIsInstance(obj.mod_result, Decimal)\n+        self.assertAlmostEqual(obj.mod_result, Decimal(\"3.0\"))\n+    \n+    def test_float_mod_integer(self):\n+        \"\"\"Test Float % Integer returns Float\"\"\"\n+        from django.db.models import Value\n+        FloatModel.objects.create(f1=10.5, f2=3.0)\n+        obj = FloatModel.objects.annotate(\n+            mod_result=Mod(\"f1\", Value(3))\n+        ).first()\n+        self.assertIsInstance(obj.mod_result, float)\n+        self.assertAlmostEqual(obj.mod_result, 1.5)\n+    \n+    def test_integer_mod_float(self):\n+        \"\"\"Test Integer % Float returns Float\"\"\"\n+        from django.db.models import Value\n+        IntegerModel.objects.create(small=10, normal=3, big=100)\n+        obj = IntegerModel.objects.annotate(\n+            mod_result=Mod(\"small\", Value(3.5))\n+        ).first()\n+        self.assertIsInstance(obj.mod_result, float)\n+        self.assertAlmostEqual(obj.mod_result, 3.0)\n", "gold_standard_diff": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7cab8251..cbf4fd8296ae 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -533,6 +533,7 @@ def __hash__(self):\n             Combinable.SUB,\n             Combinable.MUL,\n             Combinable.DIV,\n+            Combinable.MOD,\n         )\n     },\n     # Bitwise operators.\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 39e6c18b1a12..d63415ae7233 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,13 @@ def test_resolve_output_field_number(self):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,\n+        ]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16082"}