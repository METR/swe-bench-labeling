{"instance_id": "django__django-13837", "score": "C", "diff": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f881..9c9777028e 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -215,16 +215,25 @@ def get_child_arguments():\n     Return the executable. This contains a workaround for Windows if the\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n+\n+    This function has been modified to support autoreloading when using\n+    `python -m` with any package, not just Django. It detects if the script\n+    was invoked with `-m` and handles both package and script invocations.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n-        args += sys.argv[1:]\n+    if hasattr(__main__, '__spec__') and __main__.__spec__ is not None:\n+        # The script was invoked with -m\n+        if __main__.__spec__.parent:\n+            # The parent is not an empty string, so it was invoked as `python -m pkg`\n+            args += ['-m', __main__.__spec__.parent]\n+            args += sys.argv[1:]\n+        else:\n+            # The parent is an empty string, so it was invoked as `python -m script.py`\n+            args += ['-m', Path(py_script).stem]\n+            args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n         # It may exist with a .exe extension or have a -script.py suffix.\n", "gold_standard_diff": "From ec6d2531c59466924b645f314ac33f54470d7ac3 Mon Sep 17 00:00:00 2001\nFrom: William Schwartz <wkschwartz@gmail.com>\nDate: Mon, 4 Jan 2021 08:50:49 -0600\nSubject: [PATCH] Fixed #32314 -- Fixed detection when started non-django\n modules with \"python -m\" in autoreloader.\n\ndjango.utils.autoreload.get_child_arguments() detected when Python was\nstarted with the `-m` option only for `django` module. This commit\nchanges the logic to check __spec__, see\nhttps://docs.python.org/3/reference/import.html#main-spec\n\nNow packages can implement their own __main__ with the runserver\ncommand.\n---\n django/utils/autoreload.py                | 10 +++++-----\n tests/utils_tests/test_autoreload.py      | 14 +++++++++++++-\n tests/utils_tests/test_module/__main__.py |  0\n 3 files changed, 18 insertions(+), 6 deletions(-)\n create mode 100644 tests/utils_tests/test_module/__main__.py\n\ndiff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b8efb9f88148..faa3252c71d4 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,14 +216,14 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n+    # __spec__ is set when the server was started with the `-m` option,\n+    # see https://docs.python.org/3/reference/import.html#main-spec\n+    if __main__.__spec__ is not None and __main__.__spec__.parent:\n+        args += ['-m', __main__.__spec__.parent]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\ndiff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b9f2db727637..a43d7c2fded2 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -23,6 +23,7 @@\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n+from .test_module import __main__ as test_main\n from .utils import on_macos_with_hfs\n \n \n@@ -157,6 +158,7 @@ def test_path_with_embedded_null_bytes(self):\n \n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n@@ -165,6 +167,15 @@ def test_run_as_module(self):\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -447,7 +458,8 @@ def test_python_m_django(self):\n         argv = [main, 'runserver']\n         mock_call = self.patch_autoreload(argv)\n         with mock.patch('django.__main__.__file__', main):\n-            autoreload.restart_with_reloader()\n+            with mock.patch.dict(sys.modules, {'__main__': django.__main__}):\n+                autoreload.restart_with_reloader()\n             self.assertEqual(mock_call.call_count, 1)\n             self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n \ndiff --git a/tests/utils_tests/test_module/__main__.py b/tests/utils_tests/test_module/__main__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13837"}