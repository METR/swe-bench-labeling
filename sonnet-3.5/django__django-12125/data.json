{"instance_id": "django__django-12125", "score": "I", "diff": "diff --git a/db.sqlite3 b/db.sqlite3\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..cc240e5932 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,7 +90,11 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n+        module, *class_parts = path.rsplit(\".\", 1)\n+        if len(class_parts) > 1:\n+            name = \".\".join(class_parts)\n+        else:\n+            name = class_parts[0]\n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\ndiff --git a/test_project/manage.py b/test_project/manage.py\nnew file mode 100644\nindex 0000000000..374f3b4e3c\n--- /dev/null\n+++ b/test_project/manage.py\n@@ -0,0 +1,15 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+\n+if __name__ == \"__main__\":\n+    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"test_project.settings\")\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed and \"\n+            \"available on your PYTHONPATH environment variable? Did you \"\n+            \"forget to activate a virtual environment?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\ndiff --git a/test_project/settings.py b/test_project/settings.py\nnew file mode 100644\nindex 0000000000..cb9d883387\n--- /dev/null\n+++ b/test_project/settings.py\n@@ -0,0 +1,68 @@\n+import os\n+\n+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n+\n+SECRET_KEY = 'dummy-secret-key'\n+\n+DEBUG = True\n+\n+ALLOWED_HOSTS = []\n+\n+INSTALLED_APPS = [\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.staticfiles',\n+    'test_app',\n+]\n+\n+MIDDLEWARE = [\n+    'django.middleware.security.SecurityMiddleware',\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.middleware.common.CommonMiddleware',\n+    'django.middleware.csrf.CsrfViewMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n+]\n+\n+ROOT_URLCONF = 'test_project.urls'\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n+\n+WSGI_APPLICATION = 'test_project.wsgi.application'\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n+    }\n+}\n+\n+LANGUAGE_CODE = 'en-us'\n+\n+TIME_ZONE = 'UTC'\n+\n+USE_I18N = True\n+\n+USE_L10N = True\n+\n+USE_TZ = True\n+\n+STATIC_URL = '/static/'\ndiff --git a/test_project/test_app/migrations/0001_initial.py b/test_project/test_app/migrations/0001_initial.py\nnew file mode 100644\nindex 0000000000..b489414eda\n--- /dev/null\n+++ b/test_project/test_app/migrations/0001_initial.py\n@@ -0,0 +1,22 @@\n+# Generated by Django 3.1 on 2025-05-14 15:35\n+\n+from django.db import migrations, models\n+import test_app.models.Outer\n+\n+\n+class Migration(migrations.Migration):\n+\n+    initial = True\n+\n+    dependencies = [\n+    ]\n+\n+    operations = [\n+        migrations.CreateModel(\n+            name='A',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('field', test_app.models.Outer.Inner(max_length=20)),\n+            ],\n+        ),\n+    ]\ndiff --git a/test_project/test_app/migrations/__init__.py b/test_project/test_app/migrations/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_project/test_app/models.py b/test_project/test_app/models.py\nnew file mode 100644\nindex 0000000000..277f3eb218\n--- /dev/null\n+++ b/test_project/test_app/models.py\n@@ -0,0 +1,8 @@\n+from django.db import models\n+\n+class Outer(object):\n+    class Inner(models.CharField):\n+        pass\n+\n+class A(models.Model):\n+    field = Outer.Inner(max_length=20)\ndiff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py\nnew file mode 100644\nindex 0000000000..dfc73621fa\n--- /dev/null\n+++ b/test_project/test_project/urls.py\n@@ -0,0 +1,6 @@\n+from django.contrib import admin\n+from django.urls import path\n+\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+]\n", "gold_standard_diff": "From 8008795a3899d979d65832ca7c4946903de206f7 Mon Sep 17 00:00:00 2001\nFrom: John Bowen <jbowen7@gmail.com>\nDate: Fri, 22 Nov 2019 19:41:56 +0000\nSubject: [PATCH 1/2] Refs #23950 --- Moved test DeconstructibleInstances class\n to a module level.\n\nDeconstructibleInstances was not importable from the asserted path.\n---\n tests/migrations/test_writer.py | 9 +++++----\n 1 file changed, 5 insertions(+), 4 deletions(-)\n\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex ca924f35ecc5..addf10b0f039 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -26,6 +26,11 @@\n from .models import FoodManager, FoodQuerySet\n \n \n+class DeconstructibleInstances:\n+    def deconstruct(self):\n+        return ('DeconstructibleInstances', [], {})\n+\n+\n class Money(decimal.Decimal):\n     def deconstruct(self):\n         return (\n@@ -726,10 +731,6 @@ def test_deconstruct_class_arguments(self):\n         # Yes, it doesn't make sense to use a class as a default for a\n         # CharField. It does make sense for custom fields though, for example\n         # an enumfield that takes the enum class as an argument.\n-        class DeconstructibleInstances:\n-            def deconstruct(self):\n-                return ('DeconstructibleInstances', [], {})\n-\n         string = MigrationWriter.serialize(models.CharField(default=DeconstructibleInstances))[0]\n         self.assertEqual(string, \"models.CharField(default=migrations.test_writer.DeconstructibleInstances)\")\n \n\nFrom 29d8198841ea39af44f3bc835d646e642d498475 Mon Sep 17 00:00:00 2001\nFrom: John Bowen <jbowen7@gmail.com>\nDate: Fri, 22 Nov 2019 12:43:03 +0000\nSubject: [PATCH 2/2] Fixed #27914 -- Fixed serialization of nested classes in\n migrations.\n\n---\n django/db/migrations/serializer.py |  2 +-\n tests/migrations/test_writer.py    | 16 ++++++++++++++++\n 2 files changed, 17 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d590..ead81c398a6d 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -269,7 +269,7 @@ def serialize(self):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex addf10b0f039..6a65e87d5a3c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -193,6 +193,10 @@ class NestedEnum(enum.IntEnum):\n         A = 1\n         B = 2\n \n+    class NestedChoices(models.TextChoices):\n+        X = 'X', 'X value'\n+        Y = 'Y', 'Y value'\n+\n     def safe_exec(self, string, value=None):\n         d = {}\n         try:\n@@ -388,6 +392,18 @@ class DateChoices(datetime.date, models.Choices):\n             \"default=datetime.date(1969, 11, 19))\"\n         )\n \n+    def test_serialize_nested_class(self):\n+        for nested_cls in [self.NestedEnum, self.NestedChoices]:\n+            cls_name = nested_cls.__name__\n+            with self.subTest(cls_name):\n+                self.assertSerializedResultEqual(\n+                    nested_cls,\n+                    (\n+                        \"migrations.test_writer.WriterTests.%s\" % cls_name,\n+                        {'import migrations.test_writer'},\n+                    ),\n+                )\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12125"}