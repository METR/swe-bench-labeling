{"instance_id": "django__django-16631", "score": "I", "diff": "diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\nindex 155330c596..498f8e9f94 100644\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -5,7 +5,7 @@ from django.apps import apps as django_apps\n from django.conf import settings\n from django.core.exceptions import ImproperlyConfigured, PermissionDenied\n from django.middleware.csrf import rotate_token\n-from django.utils.crypto import constant_time_compare\n+from django.utils.crypto import constant_time_compare, salted_hmac\n from django.utils.module_loading import import_string\n from django.views.decorators.debug import sensitive_variables\n \n@@ -179,6 +179,42 @@ def get_user_model():\n         )\n \n \n+def _verify_session_auth_hash(session_hash, user):\n+    \"\"\"\n+    Verify the session auth hash against the user's password.\n+    Try the current SECRET_KEY and then each key in SECRET_KEY_FALLBACKS.\n+    \"\"\"\n+    if not session_hash:\n+        return False\n+    \n+    # Same key_salt and algorithm as used in AbstractBaseUser.get_session_auth_hash()\n+    key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n+    \n+    # First try with current SECRET_KEY\n+    current_hash = salted_hmac(\n+        key_salt,\n+        user.password,\n+        algorithm=\"sha256\",\n+    ).hexdigest()\n+    \n+    if constant_time_compare(session_hash, current_hash):\n+        return True\n+    \n+    # Try each fallback key\n+    for fallback_key in settings.SECRET_KEY_FALLBACKS:\n+        fallback_hash = salted_hmac(\n+            key_salt,\n+            user.password,\n+            secret=fallback_key,\n+            algorithm=\"sha256\",\n+        ).hexdigest()\n+        \n+        if constant_time_compare(session_hash, fallback_hash):\n+            return True\n+    \n+    return False\n+\n+\n def get_user(request):\n     \"\"\"\n     Return the user model instance associated with the given request session.\n@@ -199,9 +235,7 @@ def get_user(request):\n             # Verify the session\n             if hasattr(user, \"get_session_auth_hash\"):\n                 session_hash = request.session.get(HASH_SESSION_KEY)\n-                session_hash_verified = session_hash and constant_time_compare(\n-                    session_hash, user.get_session_auth_hash()\n-                )\n+                session_hash_verified = _verify_session_auth_hash(session_hash, user)\n                 if not session_hash_verified:\n                     request.session.flush()\n                     user = None\ndiff --git a/test_comprehensive_fallback.py b/test_comprehensive_fallback.py\nnew file mode 100644\nindex 0000000000..46fe7aeaf4\n--- /dev/null\n+++ b/test_comprehensive_fallback.py\n@@ -0,0 +1,124 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='current-secret-key',\n+    SECRET_KEY_FALLBACKS=['old-secret-key', 'very-old-secret-key'],\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.sessions',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    MIDDLEWARE=[],\n+    USE_TZ=False,\n+)\n+\n+django.setup()\n+\n+# Import after Django setup\n+from django.contrib.auth import get_user_model, login, get_user\n+from django.contrib.auth.models import AnonymousUser\n+from django.test import RequestFactory\n+from django.contrib.sessions.backends.cache import SessionStore\n+from django.http import HttpRequest\n+\n+# Create tables\n+from django.core.management import execute_from_command_line\n+execute_from_command_line(['manage.py', 'migrate', '--run-syncdb', '--verbosity', '0'])\n+\n+User = get_user_model()\n+\n+def test_scenario(scenario_name, initial_key, login_key, expected_authenticated):\n+    \"\"\"Test a specific scenario\"\"\"\n+    print(f\"\\n=== Test: {scenario_name} ===\")\n+    \n+    # Create a test user\n+    user = User.objects.create_user(username=f'testuser_{scenario_name}', password='testpass')\n+    \n+    # Set the initial secret key\n+    settings.SECRET_KEY = initial_key\n+    \n+    # Create a request with session\n+    request = HttpRequest()\n+    request.session = SessionStore()\n+    \n+    # Log in the user\n+    login(request, user)\n+    print(f\"User logged in with key: {initial_key}\")\n+    print(f\"Session auth hash: {request.session.get('_auth_user_hash')}\")\n+    \n+    # Change the secret key for login verification\n+    settings.SECRET_KEY = login_key\n+    \n+    # Create a new request with the same session\n+    request2 = HttpRequest()\n+    request2.session = SessionStore()\n+    # Copy session data\n+    for key, value in request.session.items():\n+        request2.session[key] = value\n+    \n+    # Try to get the user\n+    user_after = get_user(request2)\n+    print(f\"User authenticated after key change: {user_after.is_authenticated}\")\n+    \n+    # Clean up\n+    user.delete()\n+    \n+    # Verify the result\n+    if user_after.is_authenticated == expected_authenticated:\n+        print(\"\u2713 Test passed\")\n+        return True\n+    else:\n+        print(\"\u2717 Test failed\")\n+        return False\n+\n+# Test scenarios\n+all_passed = True\n+\n+# Scenario 1: User logs in with old key, secret rotates to new key with old in fallbacks\n+settings.SECRET_KEY_FALLBACKS = ['old-secret-key']\n+all_passed &= test_scenario(\"rotate_with_fallback\", \n+                           initial_key='old-secret-key', \n+                           login_key='new-secret-key',\n+                           expected_authenticated=True)\n+\n+# Scenario 2: User logs in with very old key, secret rotates twice with both in fallbacks\n+settings.SECRET_KEY_FALLBACKS = ['old-secret-key', 'very-old-secret-key']\n+all_passed &= test_scenario(\"double_rotation_with_fallback\", \n+                           initial_key='very-old-secret-key', \n+                           login_key='current-secret-key',\n+                           expected_authenticated=True)\n+\n+# Scenario 3: User logs in with a key not in fallbacks (should fail)\n+settings.SECRET_KEY_FALLBACKS = ['some-other-key']\n+all_passed &= test_scenario(\"rotation_without_proper_fallback\", \n+                           initial_key='forgotten-secret-key', \n+                           login_key='current-secret-key',\n+                           expected_authenticated=False)\n+\n+# Scenario 4: No fallbacks configured (should fail if keys differ)\n+settings.SECRET_KEY_FALLBACKS = []\n+all_passed &= test_scenario(\"no_fallbacks_different_keys\", \n+                           initial_key='old-secret-key', \n+                           login_key='new-secret-key',\n+                           expected_authenticated=False)\n+\n+# Scenario 5: Same key (should always work)\n+settings.SECRET_KEY_FALLBACKS = []\n+all_passed &= test_scenario(\"same_key\", \n+                           initial_key='same-secret-key', \n+                           login_key='same-secret-key',\n+                           expected_authenticated=True)\n+\n+print(f\"\\n{'='*50}\")\n+print(f\"All tests passed: {all_passed}\")\ndiff --git a/test_secret_key_fallback.py b/test_secret_key_fallback.py\nnew file mode 100644\nindex 0000000000..61231eae93\n--- /dev/null\n+++ b/test_secret_key_fallback.py\n@@ -0,0 +1,72 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='old-secret-key',\n+    SECRET_KEY_FALLBACKS=[],\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.sessions',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    MIDDLEWARE=[],\n+    USE_TZ=False,\n+)\n+\n+django.setup()\n+\n+# Import after Django setup\n+from django.contrib.auth import get_user_model, login, get_user\n+from django.contrib.auth.models import AnonymousUser\n+from django.test import RequestFactory\n+from django.contrib.sessions.backends.cache import SessionStore\n+from django.http import HttpRequest\n+\n+# Create tables\n+from django.core.management import execute_from_command_line\n+execute_from_command_line(['manage.py', 'migrate', '--run-syncdb'])\n+\n+# Create a test user\n+User = get_user_model()\n+user = User.objects.create_user(username='testuser', password='testpass')\n+\n+# Create a request with session\n+request = HttpRequest()\n+request.session = SessionStore()\n+\n+# Log in the user with the old secret key\n+login(request, user)\n+\n+# Verify user is logged in\n+print(f\"User logged in with old key: {get_user(request).is_authenticated}\")\n+print(f\"Session auth hash: {request.session.get('_auth_user_hash')}\")\n+\n+# Now rotate the secret key\n+settings.SECRET_KEY = 'new-secret-key'\n+settings.SECRET_KEY_FALLBACKS = ['old-secret-key']\n+\n+# Create a new request with the same session\n+request2 = HttpRequest()\n+request2.session = SessionStore()\n+# Copy session data\n+for key, value in request.session.items():\n+    request2.session[key] = value\n+\n+# Try to get the user - this should fail with current implementation\n+user_after_rotation = get_user(request2)\n+print(f\"\\nUser after key rotation (current implementation): {user_after_rotation.is_authenticated}\")\n+\n+if not user_after_rotation.is_authenticated:\n+    print(\"BUG CONFIRMED: User is logged out after SECRET_KEY rotation!\")\n+else:\n+    print(\"User remains logged in - no bug found\")\ndiff --git a/test_session_auth.py b/test_session_auth.py\nnew file mode 100644\nindex 0000000000..e2a78329c6\n--- /dev/null\n+++ b/test_session_auth.py\n@@ -0,0 +1,92 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    SECRET_KEY_FALLBACKS=[],\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+        'django.contrib.sessions',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    MIDDLEWARE=[],\n+    USE_TZ=False,\n+)\n+\n+django.setup()\n+\n+# Import after Django setup\n+from django.contrib.auth import get_user_model, login, logout, get_user, update_session_auth_hash\n+from django.contrib.sessions.backends.cache import SessionStore\n+from django.http import HttpRequest\n+\n+# Create tables\n+from django.core.management import execute_from_command_line\n+execute_from_command_line(['manage.py', 'migrate', '--run-syncdb', '--verbosity', '0'])\n+\n+User = get_user_model()\n+\n+print(\"Testing session authentication functionality...\")\n+\n+# Test 1: Basic login/logout\n+print(\"\\n1. Testing basic login/logout\")\n+user = User.objects.create_user(username='testuser', password='testpass')\n+request = HttpRequest()\n+request.session = SessionStore()\n+\n+login(request, user)\n+auth_user = get_user(request)\n+print(f\"   After login: user.is_authenticated = {auth_user.is_authenticated}\")\n+print(f\"   Username: {auth_user.username}\")\n+\n+logout(request)\n+auth_user = get_user(request)\n+print(f\"   After logout: user.is_authenticated = {auth_user.is_authenticated}\")\n+\n+# Test 2: Password change with session update\n+print(\"\\n2. Testing password change with session update\")\n+user = User.objects.create_user(username='testuser2', password='oldpass')\n+request = HttpRequest()\n+request.session = SessionStore()\n+request.user = user\n+\n+login(request, user)\n+old_session_hash = request.session.get('_auth_user_hash')\n+print(f\"   Session hash before password change: {old_session_hash}\")\n+\n+# Change password and update session\n+user.set_password('newpass')\n+user.save()\n+update_session_auth_hash(request, user)\n+\n+new_session_hash = request.session.get('_auth_user_hash')\n+print(f\"   Session hash after password change: {new_session_hash}\")\n+print(f\"   Session hash changed: {old_session_hash != new_session_hash}\")\n+\n+# Verify user still authenticated\n+auth_user = get_user(request)\n+print(f\"   User still authenticated: {auth_user.is_authenticated}\")\n+\n+# Test 3: Invalid session hash\n+print(\"\\n3. Testing invalid session hash\")\n+request = HttpRequest()\n+request.session = SessionStore()\n+request.session['_auth_user_id'] = str(user.pk)\n+request.session['_auth_user_backend'] = 'django.contrib.auth.backends.ModelBackend'\n+request.session['_auth_user_hash'] = 'invalid_hash'\n+\n+auth_user = get_user(request)\n+print(f\"   With invalid hash: user.is_authenticated = {auth_user.is_authenticated}\")\n+print(f\"   Session flushed: {'_auth_user_id' not in request.session}\")\n+\n+print(\"\\nAll tests completed successfully!\")\n", "gold_standard_diff": "From 2396933ca99c6bfb53bda9e53968760316646e01 Mon Sep 17 00:00:00 2001\nFrom: David Wobrock <david.wobrock@gmail.com>\nDate: Mon, 6 Mar 2023 16:18:03 +0100\nSubject: [PATCH] Fixed #34384 -- Fixed session validation when rotation secret\n keys.\n\nBug in 0dcd549bbe36c060f536ec270d34d9e7d4b8e6c7.\n\nThanks Eric Zarowny for the report.\n---\n django/contrib/auth/__init__.py  | 24 +++++++++++++++++++-----\n django/contrib/auth/base_user.py |  9 +++++++++\n docs/ref/contrib/auth.txt        |  9 ++++++++-\n docs/releases/4.1.8.txt          |  3 ++-\n docs/topics/auth/customizing.txt |  7 +++++++\n tests/auth_tests/test_basic.py   | 24 ++++++++++++++++++++++++\n 6 files changed, 69 insertions(+), 7 deletions(-)\n\ndiff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\nindex 155330c5963b..2c81d62a0caa 100644\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -199,12 +199,26 @@ def get_user(request):\n             # Verify the session\n             if hasattr(user, \"get_session_auth_hash\"):\n                 session_hash = request.session.get(HASH_SESSION_KEY)\n-                session_hash_verified = session_hash and constant_time_compare(\n-                    session_hash, user.get_session_auth_hash()\n-                )\n+                if not session_hash:\n+                    session_hash_verified = False\n+                else:\n+                    session_auth_hash = user.get_session_auth_hash()\n+                    session_hash_verified = constant_time_compare(\n+                        session_hash, session_auth_hash\n+                    )\n                 if not session_hash_verified:\n-                    request.session.flush()\n-                    user = None\n+                    # If the current secret does not verify the session, try\n+                    # with the fallback secrets and stop when a matching one is\n+                    # found.\n+                    if session_hash and any(\n+                        constant_time_compare(session_hash, fallback_auth_hash)\n+                        for fallback_auth_hash in user.get_session_auth_fallback_hash()\n+                    ):\n+                        request.session.cycle_key()\n+                        request.session[HASH_SESSION_KEY] = session_auth_hash\n+                    else:\n+                        request.session.flush()\n+                        user = None\n \n     return user or AnonymousUser()\n \ndiff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 5ee30bf59caa..e205ccccf28d 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -5,6 +5,7 @@\n import unicodedata\n import warnings\n \n+from django.conf import settings\n from django.contrib.auth import password_validation\n from django.contrib.auth.hashers import (\n     check_password,\n@@ -135,10 +136,18 @@ def get_session_auth_hash(self):\n         \"\"\"\n         Return an HMAC of the password field.\n         \"\"\"\n+        return self._get_session_auth_hash()\n+\n+    def get_session_auth_fallback_hash(self):\n+        for fallback_secret in settings.SECRET_KEY_FALLBACKS:\n+            yield self._get_session_auth_hash(secret=fallback_secret)\n+\n+    def _get_session_auth_hash(self, secret=None):\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n         return salted_hmac(\n             key_salt,\n             self.password,\n+            secret=secret,\n             algorithm=\"sha256\",\n         ).hexdigest()\n \ndiff --git a/docs/ref/contrib/auth.txt b/docs/ref/contrib/auth.txt\nindex 241a0219bda5..90ae5904a84c 100644\n--- a/docs/ref/contrib/auth.txt\n+++ b/docs/ref/contrib/auth.txt\n@@ -695,10 +695,17 @@ Utility functions\n     ``get_user()`` method to retrieve the user model instance and then verifies\n     the session by calling the user model's\n     :meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash`\n-    method.\n+    method. If the verification fails and :setting:`SECRET_KEY_FALLBACKS` are\n+    provided, it verifies the session against each fallback key using\n+    :meth:`~django.contrib.auth.models.AbstractBaseUser.\\\n+    get_session_auth_fallback_hash`.\n \n     Returns an instance of :class:`~django.contrib.auth.models.AnonymousUser`\n     if the authentication backend stored in the session is no longer in\n     :setting:`AUTHENTICATION_BACKENDS`, if a user isn't returned by the\n     backend's ``get_user()`` method, or if the session auth hash doesn't\n     validate.\n+\n+    .. versionchanged:: 4.1.8\n+\n+        Fallback verification with :setting:`SECRET_KEY_FALLBACKS` was added.\ndiff --git a/docs/releases/4.1.8.txt b/docs/releases/4.1.8.txt\nindex 685580f33c95..9f3dd167edc1 100644\n--- a/docs/releases/4.1.8.txt\n+++ b/docs/releases/4.1.8.txt\n@@ -9,4 +9,5 @@ Django 4.1.8 fixes several bugs in 4.1.7.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a bug in Django 4.1 that caused invalidation of sessions when rotating\n+  secret keys with ``SECRET_KEY_FALLBACKS`` (:ticket:`34384`).\ndiff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt\nindex 3b688c8b5c80..6cc48cacb17a 100644\n--- a/docs/topics/auth/customizing.txt\n+++ b/docs/topics/auth/customizing.txt\n@@ -722,6 +722,13 @@ The following attributes and methods are available on any subclass of\n         Returns an HMAC of the password field. Used for\n         :ref:`session-invalidation-on-password-change`.\n \n+    .. method:: models.AbstractBaseUser.get_session_auth_fallback_hash()\n+\n+        .. versionadded:: 4.1.8\n+\n+        Yields the HMAC of the password field using\n+        :setting:`SECRET_KEY_FALLBACKS`. Used by ``get_user()``.\n+\n :class:`~models.AbstractUser` subclasses :class:`~models.AbstractBaseUser`:\n \n .. class:: models.AbstractUser\ndiff --git a/tests/auth_tests/test_basic.py b/tests/auth_tests/test_basic.py\nindex 4b491e521ef4..c341aeb8c902 100644\n--- a/tests/auth_tests/test_basic.py\n+++ b/tests/auth_tests/test_basic.py\n@@ -1,3 +1,4 @@\n+from django.conf import settings\n from django.contrib.auth import get_user, get_user_model\n from django.contrib.auth.models import AnonymousUser, User\n from django.core.exceptions import ImproperlyConfigured\n@@ -138,3 +139,26 @@ def test_get_user(self):\n         user = get_user(request)\n         self.assertIsInstance(user, User)\n         self.assertEqual(user.username, created_user.username)\n+\n+    def test_get_user_fallback_secret(self):\n+        created_user = User.objects.create_user(\n+            \"testuser\", \"test@example.com\", \"testpw\"\n+        )\n+        self.client.login(username=\"testuser\", password=\"testpw\")\n+        request = HttpRequest()\n+        request.session = self.client.session\n+        prev_session_key = request.session.session_key\n+        with override_settings(\n+            SECRET_KEY=\"newsecret\",\n+            SECRET_KEY_FALLBACKS=[settings.SECRET_KEY],\n+        ):\n+            user = get_user(request)\n+            self.assertIsInstance(user, User)\n+            self.assertEqual(user.username, created_user.username)\n+            self.assertNotEqual(request.session.session_key, prev_session_key)\n+        # Remove the fallback secret.\n+        # The session hash should be updated using the current secret.\n+        with override_settings(SECRET_KEY=\"newsecret\"):\n+            user = get_user(request)\n+            self.assertIsInstance(user, User)\n+            self.assertEqual(user.username, created_user.username)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16631"}