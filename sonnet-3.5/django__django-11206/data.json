{"instance_id": "django__django-11206", "score": "I", "diff": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435..d7db1279b1 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -1,4 +1,4 @@\n-from decimal import Decimal\n+from decimal import Decimal, ROUND_HALF_UP\n \n from django.conf import settings\n from django.utils.safestring import mark_safe\n@@ -26,23 +26,36 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n         return mark_safe(number)\n     # sign\n     sign = ''\n-    if isinstance(number, Decimal):\n-        # Format values with more than 200 digits (an arbitrary cutoff) using\n-        # scientific notation to avoid high memory usage in {:f}'.format().\n-        _, digits, exponent = number.as_tuple()\n-        if abs(exponent) + len(digits) > 200:\n-            number = '{:e}'.format(number)\n-            coefficient, exponent = number.split('e')\n-            # Format the coefficient.\n-            coefficient = format(\n-                coefficient, decimal_sep, decimal_pos, grouping,\n-                thousand_sep, force_grouping, use_l10n,\n-            )\n-            return '{}e{}'.format(coefficient, exponent)\n-        else:\n-            str_number = '{:f}'.format(number)\n+    if not isinstance(number, Decimal):\n+        number = Decimal(str(number))\n+    \n+    print(f\"Debug: Initial number: {number}\")  # Debug output\n+\n+    # Round the number to the specified decimal_pos\n+    if decimal_pos is not None:\n+        number = number.quantize(Decimal('1e-{}'.format(decimal_pos)), rounding=ROUND_HALF_UP)\n+        print(f\"Debug: After rounding: {number}\")  # Debug output\n+\n+    # Handle very small numbers when decimal_pos is specified\n+    if decimal_pos is not None and abs(number) < Decimal('1e-{}'.format(decimal_pos)):\n+        return '0' + decimal_sep + '0' * decimal_pos\n+\n+    # Format values with more than 200 digits (an arbitrary cutoff) using\n+    # scientific notation to avoid high memory usage in {:f}'.format().\n+    _, digits, exponent = number.as_tuple()\n+    if abs(exponent) + len(digits) > 200:\n+        number = '{:e}'.format(number)\n+        coefficient, exponent = number.split('e')\n+        # Format the coefficient.\n+        coefficient = format(\n+            coefficient, decimal_sep, decimal_pos, grouping,\n+            thousand_sep, force_grouping, use_l10n,\n+        )\n+        return '{}e{}'.format(coefficient, exponent)\n     else:\n         str_number = str(number)\n+        print(f\"Debug: Final str_number: {str_number}\")  # Debug output\n+\n     if str_number[0] == '-':\n         sign = '-'\n         str_number = str_number[1:]\ndiff --git a/test_numberformat.py b/test_numberformat.py\nnew file mode 100644\nindex 0000000000..10a5efe40e\n--- /dev/null\n+++ b/test_numberformat.py\n@@ -0,0 +1,29 @@\n+import os\n+import django\n+from decimal import Decimal\n+\n+# Configure Django settings\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n+from django.conf import settings\n+settings.configure(SECRET_KEY='dummy_secret_key_for_testing')\n+django.setup()\n+\n+from django.utils.numberformat import format as nformat\n+\n+# Test cases\n+test_cases = [\n+    (Decimal('1e-199'), 2, '0.00'),\n+    (Decimal('1e-200'), 2, '0.00'),\n+    (Decimal('1e-201'), 2, '0.00'),\n+    (Decimal('0.001'), 2, '0.00'),\n+    (Decimal('0.005'), 2, '0.01'),\n+    (Decimal('1.23'), 2, '1.23'),\n+]\n+\n+for number, decimal_pos, expected in test_cases:\n+    result = nformat(number, '.', decimal_pos=decimal_pos)\n+    print(f\"Input: {number}, decimal_pos: {decimal_pos}\")\n+    print(f\"Expected: {expected}\")\n+    print(f\"Result: {result}\")\n+    print(\"Pass\" if result == expected else \"Fail\")\n+    print()\n", "gold_standard_diff": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435c9..961a60e37d65 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -27,6 +27,14 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     # sign\n     sign = ''\n     if isinstance(number, Decimal):\n+\n+        if decimal_pos is not None:\n+            # If the provided number is too small to affect any of the visible\n+            # decimal places, consider it equal to '0'.\n+            cutoff = Decimal('0.' + '1'.rjust(decimal_pos, '0'))\n+            if abs(number) < cutoff:\n+                number = Decimal('0')\n+\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n         # scientific notation to avoid high memory usage in {:f}'.format().\n         _, digits, exponent = number.as_tuple()\ndiff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 3d656025ab58..1dac45e89019 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -94,7 +94,7 @@ def test_decimal_numbers(self):\n             ('1e-10', 8, '0.00000000'),\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n-            ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1234'.format('0' * 299), 3, '0.000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11206"}