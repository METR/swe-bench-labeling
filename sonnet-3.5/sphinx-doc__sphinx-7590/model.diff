diff --git a/setup.py b/setup.py
index a427d5493..978e3d8e0 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py
index fe52d881d..eb5eed1d1 100644
--- a/sphinx/domains/cpp.py
+++ b/sphinx/domains/cpp.py
@@ -882,6 +882,21 @@ class ASTCharLiteral(ASTLiteral):
         signode.append(nodes.Text(txt, txt))
 
 
+class ASTUserDefinedLiteral(ASTLiteral):
+    def __init__(self, value: str) -> None:
+        self.value = value
+
+    def _stringify(self, transform: StringifyTransform) -> str:
+        return self.value
+
+    def get_id(self, version: int) -> str:
+        return f"LU{len(self.value)}E"
+
+    def describe_signature(self, signode: TextElement, mode: str,
+                           env: "BuildEnvironment", symbol: "Symbol") -> None:
+        signode.append(nodes.Text(self.value))
+
+
 class ASTThisLiteral(ASTExpression):
     def _stringify(self, transform: StringifyTransform) -> str:
         return "this"
@@ -4664,10 +4679,18 @@ class DefinitionParser(BaseParser):
             if self.match(regex):
                 while self.current_char in 'uUlLfF':
                     self.pos += 1
-                return ASTNumberLiteral(self.definition[pos:self.pos])
+                end_pos = self.pos
+                # Check for user-defined literal
+                if self.match(r'[a-zA-Z_][a-zA-Z0-9_]*'):
+                    return ASTUserDefinedLiteral(self.definition[pos:self.pos])
+                else:
+                    return ASTNumberLiteral(self.definition[pos:end_pos])
 
         string = self._parse_string()
         if string is not None:
+            # Check for user-defined literal after string
+            if self.match(r'[a-zA-Z_][a-zA-Z0-9_]*'):
+                return ASTUserDefinedLiteral(string + self.last_match.group(0))
             return ASTStringLiteral(string)
 
         # character-literal
@@ -4675,6 +4698,9 @@ class DefinitionParser(BaseParser):
             prefix = self.last_match.group(1)  # may be None when no prefix
             data = self.last_match.group(2)
             try:
+                # Check for user-defined literal after character literal
+                if self.match(r'[a-zA-Z_][a-zA-Z0-9_]*'):
+                    return ASTUserDefinedLiteral(self.definition[self.pos - self.last_match.end():self.pos])
                 return ASTCharLiteral(prefix, data)
             except UnicodeDecodeError as e:
                 self.fail("Can not handle character literal. Internal error was: %s" % e)
@@ -4682,7 +4708,6 @@ class DefinitionParser(BaseParser):
                 self.fail("Can not handle character literal"
                           " resulting in multiple decoded characters.")
 
-        # TODO: user-defined lit
         return None
 
     def _parse_fold_or_paren_expression(self) -> ASTExpression:
@@ -5201,6 +5226,13 @@ class DefinitionParser(BaseParser):
         # -> conditional-expression
         orExpr = self._parse_logical_or_expression(inTemplate=inTemplate)
         # TODO: use _parse_conditional_expression_tail
+
+        # Handle user-defined literals
+        self.skip_ws()
+        if self.match(r'[a-zA-Z_][a-zA-Z0-9_]*'):
+            suffix = self.matched_text
+            return ASTUserDefinedLiteral(str(orExpr) + suffix)
+        
         return orExpr
 
     def _parse_expression(self) -> ASTExpression:
diff --git a/tox.ini b/tox.ini
index d9f040544..bf39854b6 100644
--- a/tox.ini
+++ b/tox.ini
@@ -28,7 +28,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
