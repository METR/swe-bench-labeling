diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py
index 04c73411a..6ba695ca0 100644
--- a/src/_pytest/mark/expression.py
+++ b/src/_pytest/mark/expression.py
@@ -161,7 +161,12 @@ def not_expr(s: Scanner) -> ast.expr:
         return ret
     ident = s.accept(TokenType.IDENT)
     if ident:
-        return ast.Name(ident.value, ast.Load())
+        # Work around Python 3.8+ restriction on using True/False/None as Names
+        # by prefixing them. The MatcherAdapter will handle the conversion back.
+        if ident.value in ("True", "False", "None"):
+            return ast.Name("__pytest_" + ident.value, ast.Load())
+        else:
+            return ast.Name(ident.value, ast.Load())
     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))
 
 
@@ -172,6 +177,9 @@ class MatcherAdapter(Mapping[str, bool]):
         self.matcher = matcher
 
     def __getitem__(self, key: str) -> bool:
+        # Handle prefixed special names that we added to work around Python 3.8+ restrictions
+        if key.startswith("__pytest_") and key[9:] in ("True", "False", "None"):
+            return self.matcher(key[9:])
         return self.matcher(key)
 
     def __iter__(self) -> Iterator[str]:
