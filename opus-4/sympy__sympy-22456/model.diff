diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py
index a02714b174..35d0b35b41 100644
--- a/sympy/codegen/ast.py
+++ b/sympy/codegen/ast.py
@@ -895,7 +895,6 @@ class String(Token):
 
     """
     __slots__ = ('text',)
-    not_in_args = ['text']
     is_Atom = True
 
     @classmethod
diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py
index 00c5d4cf28..00738b7a4f 100644
--- a/sympy/codegen/tests/test_ast.py
+++ b/sympy/codegen/tests/test_ast.py
@@ -266,7 +266,7 @@ def test_String():
     assert st.is_Atom
     assert st == String('foobar')
     assert st.text == 'foobar'
-    assert st.func(**st.kwargs()) == st
+    assert st.func(*st.args) == st
 
 
     class Signifier(String):
diff --git a/test_basic_invariance.py b/test_basic_invariance.py
new file mode 100644
index 0000000000..aa5ba5c388
--- /dev/null
+++ b/test_basic_invariance.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python
+"""Test that String follows the standard Basic invariance pattern."""
+
+from sympy import Basic, Add, Mul, Symbol, sin
+from sympy.codegen.ast import String, Type, Variable, Assignment
+
+def test_basic_invariance(obj):
+    """Test that obj.func(*obj.args) == obj for any Basic subclass."""
+    assert isinstance(obj, Basic), f"{obj} is not a Basic instance"
+    reconstructed = obj.func(*obj.args)
+    assert reconstructed == obj, f"Invariance failed for {type(obj).__name__}: {obj} != {reconstructed}"
+    return True
+
+# Test standard SymPy classes that follow the invariance
+print("Testing standard SymPy classes:")
+x = Symbol('x')
+y = Symbol('y')
+
+expr1 = Add(x, 2)
+test_basic_invariance(expr1)
+print("âœ“ Add invariance holds")
+
+expr2 = Mul(x, 3)
+test_basic_invariance(expr2)
+print("âœ“ Mul invariance holds")
+
+expr3 = sin(x)
+test_basic_invariance(expr3)
+print("âœ“ sin invariance holds")
+
+# Test codegen AST classes
+print("\nTesting codegen AST classes:")
+
+# String - the main fix
+s = String('hello world')
+test_basic_invariance(s)
+print("âœ“ String invariance holds")
+
+# Type (which internally uses String)
+t = Type('float64')
+test_basic_invariance(t)
+print("âœ“ Type invariance holds")
+
+# Variable (uses Type and String)
+v = Variable('myvar', Type('int'))
+test_basic_invariance(v)
+print("âœ“ Variable invariance holds")
+
+# Assignment
+a = Assignment(v, 42)
+test_basic_invariance(a)
+print("âœ“ Assignment invariance holds")
+
+print("\nAll Basic invariance tests passed! ðŸŽ‰")
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..471e28fea7
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python
+"""Comprehensive test of String and related classes after the fix."""
+
+from sympy.codegen.ast import String, QuotedString, Comment, Type
+
+# Test String
+s1 = String('hello')
+print("String test:")
+print("  s1:", s1)
+print("  s1.text:", s1.text)
+print("  s1.args:", s1.args)
+print("  s1.func(*s1.args) == s1:", s1.func(*s1.args) == s1)
+print("  repr(s1):", repr(s1))
+
+# Test that String instances are properly comparable
+s2 = String('hello')
+s3 = String('world')
+print("\nString comparison:")
+print("  s1 == s2:", s1 == s2)
+print("  s1 == s3:", s1 == s3)
+
+# Test QuotedString (subclass of String)
+qs = QuotedString('quoted')
+print("\nQuotedString test:")
+print("  qs:", qs)
+print("  qs.text:", qs.text)
+print("  qs.args:", qs.args)
+print("  qs.func(*qs.args) == qs:", qs.func(*qs.args) == qs)
+print("  isinstance(qs, String):", isinstance(qs, String))
+
+# Test Comment (subclass of String)
+c = Comment('# this is a comment')
+print("\nComment test:")
+print("  c:", c)
+print("  c.text:", c.text)
+print("  c.args:", c.args)
+print("  c.func(*c.args) == c:", c.func(*c.args) == c)
+print("  isinstance(c, String):", isinstance(c, String))
+
+# Test Type which uses String
+t = Type('int')
+print("\nType test:")
+print("  t:", t)
+print("  t.name:", t.name)
+print("  t.args:", t.args)
+print("  t.func(*t.args) == t:", t.func(*t.args) == t)
+
+# Test edge cases
+empty_string = String('')
+print("\nEdge case - empty string:")
+print("  empty_string:", repr(empty_string))
+print("  empty_string.args:", empty_string.args)
+print("  empty_string.func(*empty_string.args) == empty_string:", 
+      empty_string.func(*empty_string.args) == empty_string)
+
+# Test special characters
+special = String('hello\nworld\t!')
+print("\nSpecial characters test:")
+print("  special.text:", repr(special.text))
+print("  special.args:", special.args)
+print("  special.func(*special.args) == special:", special.func(*special.args) == special)
+
+print("\nAll tests completed successfully!")
diff --git a/test_string_invariance.py b/test_string_invariance.py
new file mode 100644
index 0000000000..5187a6c8ba
--- /dev/null
+++ b/test_string_invariance.py
@@ -0,0 +1,34 @@
+#!/usr/bin/env python
+"""Test script to verify String invariance issue."""
+
+from sympy.codegen.ast import String
+
+# Test current behavior
+s = String('foo')
+print("String instance:", s)
+print("s.text:", s.text)
+print("s.args:", s.args)
+print("s.kwargs():", s.kwargs())
+
+# Test invariance
+print("\nTesting invariance:")
+try:
+    print("s.func(*s.args):", s.func(*s.args))
+    print("s.func(*s.args) == s:", s.func(*s.args) == s)
+except Exception as e:
+    print("Error with s.func(*s.args):", e)
+
+print("s.func(**s.kwargs()):", s.func(**s.kwargs()))
+print("s.func(**s.kwargs()) == s:", s.func(**s.kwargs()) == s)
+
+# Test other Basic classes for comparison
+from sympy import Symbol, Integer, Add
+num = Integer(5)
+print("\nInteger invariance test:")
+print("num.args:", num.args)
+print("num.func(*num.args) == num:", num.func(*num.args) == num)
+
+add_expr = Add(2, 3)
+print("\nAdd invariance test:")
+print("add_expr.args:", add_expr.args)
+print("add_expr.func(*add_expr.args) == add_expr:", add_expr.func(*add_expr.args) == add_expr)
