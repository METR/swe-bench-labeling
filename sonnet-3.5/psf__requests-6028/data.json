{"instance_id": "psf__requests-6028", "score": "I", "diff": "diff --git a/requests/utils.py b/requests/utils.py\nindex 1c2ae4e0..ac343e90 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -808,6 +808,8 @@ def get_environ_proxies(url, no_proxy=None):\n         return getproxies()\n \n \n+import sys\n+\n def select_proxy(url, proxies):\n     \"\"\"Select a proxy for the url, if applicable.\n \n@@ -831,6 +833,16 @@ def select_proxy(url, proxies):\n             proxy = proxies[proxy_key]\n             break\n \n+    print(f\"Debug: select_proxy called with url={url}, proxies={proxies}\")\n+    print(f\"Debug: selected proxy: {proxy}\")\n+\n+    # Special handling for Python 3.8.12\n+    if sys.version_info[:3] == (3, 8, 12):\n+        print(\"Debug: Applying Python 3.8.12 specific proxy handling\")\n+        # Add any specific logic for Python 3.8.12 here\n+        # For example, you might want to force a specific proxy protocol\n+        # or add additional headers\n+\n     return proxy\n \n \ndiff --git a/test_proxy.py b/test_proxy.py\nnew file mode 100644\nindex 00000000..7b7a5f8f\n--- /dev/null\n+++ b/test_proxy.py\n@@ -0,0 +1,43 @@\n+import requests\n+import os\n+import sys\n+import argparse\n+\n+def main(http_proxy, https_proxy, proxy_user, proxy_pass):\n+    # Set up proxy configuration\n+    proxies = {\n+        'http': http_proxy,\n+        'https': https_proxy,\n+    }\n+\n+    # Remove None values from proxies\n+    proxies = {k: v for k, v in proxies.items() if v is not None}\n+\n+    # Set up proxy authentication\n+    if proxy_user and proxy_pass:\n+        proxy_auth = requests.auth.HTTPProxyAuth(proxy_user, proxy_pass)\n+    else:\n+        proxy_auth = None\n+\n+    print(f\"Python version: {sys.version}\")\n+    print(f\"Requests version: {requests.__version__}\")\n+    print(f\"Proxy settings: {proxies}\")\n+    print(f\"Proxy auth: {proxy_auth.username if proxy_auth else 'None'}:{('*' * len(proxy_auth.password)) if proxy_auth else 'None'}\")\n+\n+    try:\n+        # Make a request using the proxy\n+        response = requests.get('https://example.org/', proxies=proxies, auth=proxy_auth)\n+        print(f\"Response status code: {response.status_code}\")\n+        print(f\"Response content: {response.text[:100]}...\")  # Print first 100 characters\n+    except requests.exceptions.RequestException as e:\n+        print(f\"An error occurred: {e}\")\n+\n+if __name__ == \"__main__\":\n+    parser = argparse.ArgumentParser(description=\"Test proxy settings with requests library\")\n+    parser.add_argument(\"--http-proxy\", help=\"HTTP proxy URL\")\n+    parser.add_argument(\"--https-proxy\", help=\"HTTPS proxy URL\")\n+    parser.add_argument(\"--proxy-user\", help=\"Proxy username\")\n+    parser.add_argument(\"--proxy-pass\", help=\"Proxy password\")\n+    args = parser.parse_args()\n+\n+    main(args.http_proxy, args.https_proxy, args.proxy_user, args.proxy_pass)\n", "gold_standard_diff": "From 38f3f8ecb93cadfac03a6b7b3173018ac829d0cf Mon Sep 17 00:00:00 2001\nFrom: Nate Prewitt <nate.prewitt@gmail.com>\nDate: Tue, 4 Jan 2022 08:26:59 -0700\nSubject: [PATCH] Fix auth parsing for proxies\n\nCo-authored-by: adamp01 <@adamp01>\n---\n requests/utils.py   | 4 ++++\n tests/test_utils.py | 8 ++++++++\n 2 files changed, 12 insertions(+)\n\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 1c2ae4e0eb..153776c7f3 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -974,6 +974,10 @@ def prepend_scheme_if_needed(url, new_scheme):\n     if not netloc:\n         netloc, path = path, netloc\n \n+    if auth:\n+        # parse_url doesn't provide the netloc with auth\n+        # so we'll add it ourselves.\n+        netloc = '@'.join([auth, netloc])\n     if scheme is None:\n         scheme = new_scheme\n     if path is None:\ndiff --git a/tests/test_utils.py b/tests/test_utils.py\nindex c2186b885f..8e98397204 100644\n--- a/tests/test_utils.py\n+++ b/tests/test_utils.py\n@@ -602,6 +602,14 @@ def test_parse_header_links(value, expected):\n         ('example.com/path', 'http://example.com/path'),\n         ('//example.com/path', 'http://example.com/path'),\n         ('example.com:80', 'http://example.com:80'),\n+        (\n+            'http://user:pass@example.com/path?query',\n+            'http://user:pass@example.com/path?query'\n+        ),\n+        (\n+            'http://user@example.com/path?query',\n+            'http://user@example.com/path?query'\n+        )\n     ))\n def test_prepend_scheme_if_needed(value, expected):\n     assert prepend_scheme_if_needed(value, 'http') == expected\n", "gold_standard_pr_link": "https://github.com/psf/requests/pull/6028"}