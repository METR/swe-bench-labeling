{"instance_id": "django__django-15741", "score": "C", "diff": "diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322d84..b7c7c74f87 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -106,6 +106,9 @@ def get_format(format_type, lang=None, use_l10n=None):\n     If use_l10n is provided and is not None, it forces the value to\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n+    # Force evaluation of lazy objects to string\n+    format_type = str(format_type)\n+    \n     if use_l10n is None:\n         try:\n             use_l10n = settings._USE_L10N_INTERNAL\ndiff --git a/test_lazy_format.py b/test_lazy_format.py\nnew file mode 100644\nindex 0000000000..4575792c2c\n--- /dev/null\n+++ b/test_lazy_format.py\n@@ -0,0 +1,30 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_L10N=True,\n+    USE_I18N=True,\n+    LANGUAGE_CODE='en-us',\n+)\n+django.setup()\n+\n+from django.utils.formats import get_format, date_format\n+from django.utils.translation import gettext_lazy as _\n+from datetime import date\n+\n+# Test case that should fail with TypeError\n+try:\n+    # This should fail with: TypeError: getattr(): attribute name must be string\n+    result = get_format(_('Y-m-d'))\n+    print(f\"get_format with lazy string returned: {result}\")\n+except TypeError as e:\n+    print(f\"TypeError caught: {e}\")\n+\n+# Test with date_format\n+try:\n+    today = date.today()\n+    result = date_format(today, _('Y-m-d'))\n+    print(f\"date_format with lazy string returned: {result}\")\n+except TypeError as e:\n+    print(f\"TypeError caught in date_format: {e}\")\ndiff --git a/test_lazy_format_comprehensive.py b/test_lazy_format_comprehensive.py\nnew file mode 100644\nindex 0000000000..d5e38d56ac\n--- /dev/null\n+++ b/test_lazy_format_comprehensive.py\n@@ -0,0 +1,56 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_L10N=True,\n+    USE_I18N=True,\n+    LANGUAGE_CODE='en-us',\n+)\n+django.setup()\n+\n+from django.utils.formats import get_format, date_format, time_format\n+from django.utils.translation import gettext_lazy as _\n+from datetime import date, datetime, time\n+\n+# Test 1: get_format with lazy string\n+try:\n+    result = get_format(_('Y-m-d'))\n+    print(f\"\u2713 get_format with lazy string returned: {result}\")\n+except TypeError as e:\n+    print(f\"\u2717 TypeError caught: {e}\")\n+\n+# Test 2: date_format with lazy string\n+try:\n+    today = date.today()\n+    result = date_format(today, _('Y-m-d'))\n+    print(f\"\u2713 date_format with lazy string returned: {result}\")\n+except TypeError as e:\n+    print(f\"\u2717 TypeError caught in date_format: {e}\")\n+\n+# Test 3: time_format with lazy string\n+try:\n+    now = datetime.now().time()\n+    result = time_format(now, _('H:i:s'))\n+    print(f\"\u2713 time_format with lazy string returned: {result}\")\n+except TypeError as e:\n+    print(f\"\u2717 TypeError caught in time_format: {e}\")\n+\n+# Test 4: Ensure regular strings still work\n+try:\n+    result = get_format('DATE_FORMAT')\n+    print(f\"\u2713 get_format with regular string returned: {result}\")\n+except Exception as e:\n+    print(f\"\u2717 Error with regular string: {e}\")\n+\n+# Test 5: Test with localized format names\n+try:\n+    result = get_format('DECIMAL_SEPARATOR')\n+    print(f\"\u2713 get_format with DECIMAL_SEPARATOR returned: {result}\")\n+except Exception as e:\n+    print(f\"\u2717 Error with DECIMAL_SEPARATOR: {e}\")\n+\n+# Test 6: Test caching still works\n+cache_key1 = get_format('DATE_FORMAT')\n+cache_key2 = get_format('DATE_FORMAT')\n+print(f\"\u2713 Caching works: {cache_key1 is cache_key2 or cache_key1 == cache_key2}\")\ndiff --git a/test_lazy_getformat.py b/test_lazy_getformat.py\nnew file mode 100644\nindex 0000000000..081fea7fc6\n--- /dev/null\n+++ b/test_lazy_getformat.py\n@@ -0,0 +1,63 @@\n+\"\"\"\n+Test for the issue where get_format doesn't accept lazy strings.\n+This test simulates the scenario described in the bug report.\n+\"\"\"\n+\n+import django\n+from django.conf import settings\n+from django.test import TestCase\n+from django.utils.formats import get_format, date_format\n+from django.utils.translation import gettext_lazy as _\n+from datetime import date\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_L10N=True,\n+    USE_I18N=True,\n+    LANGUAGE_CODE='en-us',\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+django.setup()\n+\n+\n+class TestLazyFormatString(TestCase):\n+    \"\"\"Test that format functions accept lazy strings.\"\"\"\n+    \n+    def test_get_format_with_lazy_string(self):\n+        \"\"\"get_format should accept lazy strings without TypeError.\"\"\"\n+        # This used to raise: TypeError: getattr(): attribute name must be string\n+        result = get_format(_('Y-m-d'))\n+        self.assertEqual(result, 'Y-m-d')\n+    \n+    def test_date_format_with_lazy_string(self):\n+        \"\"\"date_format should accept lazy format strings.\"\"\"\n+        test_date = date(2023, 5, 15)\n+        result = date_format(test_date, _('Y-m-d'))\n+        self.assertEqual(result, '2023-05-15')\n+    \n+    def test_regular_strings_still_work(self):\n+        \"\"\"Ensure regular strings continue to work correctly.\"\"\"\n+        result = get_format('DATE_FORMAT')\n+        self.assertIsNotNone(result)\n+        \n+        # Test that FORMAT_SETTINGS are still recognized\n+        result = get_format('DECIMAL_SEPARATOR')\n+        self.assertEqual(result, '.')\n+\n+\n+if __name__ == '__main__':\n+    import unittest\n+    \n+    suite = unittest.TestSuite()\n+    suite.addTest(TestLazyFormatString('test_get_format_with_lazy_string'))\n+    suite.addTest(TestLazyFormatString('test_date_format_with_lazy_string'))\n+    suite.addTest(TestLazyFormatString('test_regular_strings_still_work'))\n+    \n+    runner = unittest.TextTestRunner(verbosity=2)\n+    runner.run(suite)\ndiff --git a/test_template_filter.py b/test_template_filter.py\nnew file mode 100644\nindex 0000000000..0ed66255ce\n--- /dev/null\n+++ b/test_template_filter.py\n@@ -0,0 +1,62 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_L10N=True,\n+    USE_I18N=True,\n+    LANGUAGE_CODE='en-us',\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    }],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+django.setup()\n+\n+from django.template import Template, Context\n+from datetime import date\n+\n+# Test the scenario from the bug report: some_date|date:_('Y-m-d')\n+template_string = \"{% load i18n %}{{ some_date|date:date_format }}\"\n+template = Template(template_string)\n+\n+# Create a context with a lazy string as the format\n+from django.utils.translation import gettext_lazy as _\n+context = Context({\n+    'some_date': date(2023, 5, 15),\n+    'date_format': _('Y-m-d')\n+})\n+\n+try:\n+    result = template.render(context)\n+    print(f\"\u2713 Template with lazy format string rendered successfully: {result}\")\n+except TypeError as e:\n+    print(f\"\u2717 TypeError in template rendering: {e}\")\n+\n+# Also test with a regular format string to ensure we didn't break anything\n+context2 = Context({\n+    'some_date': date(2023, 5, 15),\n+    'date_format': 'F j, Y'\n+})\n+\n+result2 = template.render(context2)\n+print(f\"\u2713 Template with regular format string: {result2}\")\n", "gold_standard_diff": "diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322d84da..b0a66e4e25e1 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -113,6 +113,7 @@ def get_format(format_type, lang=None, use_l10n=None):\n             use_l10n = settings.USE_L10N\n     if use_l10n and lang is None:\n         lang = get_language()\n+    format_type = str(format_type)  # format_type may be lazy.\n     cache_key = (format_type, lang)\n     try:\n         return _format_cache[cache_key]\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 0093181f640f..d79cdcd34d9a 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1518,6 +1518,9 @@ def test_get_format_modules_lang(self):\n         with translation.override(\"de\", deactivate=True):\n             self.assertEqual(\".\", get_format(\"DECIMAL_SEPARATOR\", lang=\"en\"))\n \n+    def test_get_format_lazy_format(self):\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n     def test_localize_templatetag_and_filter(self):\n         \"\"\"\n         Test the {% localize %} templatetag and the localize/unlocalize filters.\ndiff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex a7c694d50e5a..b998f83ba6bb 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -72,6 +72,11 @@ def test_date09(self):\n         output = self.engine.render_to_string(\"date09\", {\"t\": time(0, 0)})\n         self.assertEqual(output, \"00:00\")\n \n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n+\n \n class FunctionTests(SimpleTestCase):\n     def test_date(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15741"}