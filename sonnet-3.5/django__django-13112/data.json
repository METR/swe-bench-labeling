{"instance_id": "django__django-13112", "score": "I", "diff": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 408964a146..1d6c9e36b5 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -152,11 +152,14 @@ class Apps:\n         \"\"\"\n         self.check_apps_ready()\n         try:\n-            return self.app_configs[app_label]\n-        except KeyError:\n+            return next(\n+                app_config for app_config in self.app_configs.values()\n+                if app_config.label.lower() == app_label.lower()\n+            )\n+        except StopIteration:\n             message = \"No installed app with label '%s'.\" % app_label\n             for app_config in self.get_app_configs():\n-                if app_config.name == app_label:\n+                if app_config.name.lower() == app_label.lower():\n                     message += \" Did you mean '%s'?\" % app_config.label\n                     break\n             raise LookupError(message)\ndiff --git a/tests/apps/MixedCaseApp/apps.py b/tests/apps/MixedCaseApp/apps.py\nnew file mode 100644\nindex 0000000000..518486e5ec\n--- /dev/null\n+++ b/tests/apps/MixedCaseApp/apps.py\n@@ -0,0 +1,5 @@\n+from django.apps import AppConfig\n+\n+class MixedCaseAppConfig(AppConfig):\n+    name = 'tests.apps.MixedCaseApp'\n+    label = 'MixedCaseApp'\ndiff --git a/tests/apps/MixedCaseApp/models.py b/tests/apps/MixedCaseApp/models.py\nnew file mode 100644\nindex 0000000000..cd1ad00668\n--- /dev/null\n+++ b/tests/apps/MixedCaseApp/models.py\n@@ -0,0 +1,4 @@\n+from django.db import models\n+\n+class SomeModel(models.Model):\n+    name = models.CharField(max_length=100)\ndiff --git a/tests/apps/test_mixed_case_app_labels.py b/tests/apps/test_mixed_case_app_labels.py\nnew file mode 100644\nindex 0000000000..6b1c75cd87\n--- /dev/null\n+++ b/tests/apps/test_mixed_case_app_labels.py\n@@ -0,0 +1,34 @@\n+from django.apps import apps\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+\n+class MixedCaseAppLabelTests(TestCase):\n+    @override_settings(INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes', 'tests.apps.MixedCaseApp'])\n+    def test_mixed_case_app_label(self):\n+        apps.set_installed_apps(['django.contrib.auth', 'django.contrib.contenttypes', 'tests.apps.MixedCaseApp'])\n+        \n+        # Test with exact case\n+        app_config = apps.get_app_config('MixedCaseApp')\n+        self.assertEqual(app_config.label, 'MixedCaseApp')\n+        \n+        # Test with lowercase\n+        app_config = apps.get_app_config('mixedcaseapp')\n+        self.assertEqual(app_config.label, 'MixedCaseApp')\n+        \n+        # Test with uppercase\n+        app_config = apps.get_app_config('MIXEDCASEAPP')\n+        self.assertEqual(app_config.label, 'MixedCaseApp')\n+        \n+        # Test with mixed case\n+        app_config = apps.get_app_config('mIxEdCaSeApP')\n+        self.assertEqual(app_config.label, 'MixedCaseApp')\n+\n+    @override_settings(INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes', 'tests.apps.MixedCaseApp'])\n+    def test_foreign_key_with_mixed_case_app_label(self):\n+        from django.db import models\n+        \n+        class TestModel(models.Model):\n+            foreign_key = models.ForeignKey('MixedCaseApp.SomeModel', on_delete=models.CASCADE)\n+        \n+        # If this doesn't raise any exceptions, the test passes\n+        TestModel._meta.get_field('foreign_key').remote_field.model\n", "gold_standard_diff": "From d6949b9f7080a6f06957a6ae8a2bfb18872b28d0 Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Fri, 26 Jun 2020 06:41:22 +0200\nSubject: [PATCH] Fixed #31742 -- Fixed makemigrations crash on ForeignKey to\n an app with mixed case label.\n\nRegression in 9e1b6b8a66af4c2197e5b1b41eb9dbb36e4f6502.\n\nThanks Ignacio Santolin for the report.\n---\n django/db/models/fields/related.py |  6 +++++-\n tests/migrations/test_state.py     | 28 ++++++++++++++++++++++++++++\n 2 files changed, 33 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex c2aea9c7306e..397146a35496 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -582,7 +582,11 @@ def deconstruct(self):\n         if self.remote_field.parent_link:\n             kwargs['parent_link'] = self.remote_field.parent_link\n         if isinstance(self.remote_field.model, str):\n-            kwargs['to'] = self.remote_field.model.lower()\n+            if '.' in self.remote_field.model:\n+                app_label, model_name = self.remote_field.model.split('.')\n+                kwargs['to'] = '%s.%s' % (app_label, model_name.lower())\n+            else:\n+                kwargs['to'] = self.remote_field.model.lower()\n         else:\n             kwargs['to'] = self.remote_field.model._meta.label_lower\n         # If swappable is True, then see if we're actually pointing to the target\ndiff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 40277bf506c0..5ac9bf858ff9 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,34 @@ class Meta:\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_reference_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13112"}