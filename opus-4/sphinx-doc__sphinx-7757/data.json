{"instance_id": "sphinx-doc__sphinx-7757", "score": "C", "diff": "Agent patch could not be decoded due to having a binary input.", "gold_standard_diff": "From bb0b69544bff22b2c3ec8e66fd0c35d2bce39c3a Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Sat, 30 May 2020 23:45:29 +0900\nSubject: [PATCH] Fix #7756: py domain: The default value for posonlyarg is not\n shown\n\n---\n CHANGES                    |  1 +\n sphinx/util/inspect.py     | 25 ++++++++++++++++++++-----\n tests/test_util_inspect.py | 10 +++++++---\n 3 files changed, 28 insertions(+), 8 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 6c2761c53e8..af2fb413a94 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -127,6 +127,7 @@ Bugs fixed\n * #7646: handle errors on event handlers\n * #4187: LaTeX: EN DASH disappears from PDF bookmarks in Japanese documents\n * #7701: LaTeX: Anonymous indirect hyperlink target causes duplicated labels\n+* #7756: py domain: The default value for positional only argument is not shown\n * C++, fix rendering and xrefs in nested names explicitly starting\n   in global scope, e.g., ``::A::B``.\n * C, fix rendering and xrefs in nested names explicitly starting\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 15f0d66e279..bac02025cf9 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -518,19 +518,34 @@ def signature_from_str(signature: str) -> inspect.Signature:\n \n     # parameters\n     args = definition.args\n+    defaults = list(args.defaults)\n     params = []\n+    if hasattr(args, \"posonlyargs\"):\n+        posonlyargs = len(args.posonlyargs)  # type: ignore\n+        positionals = posonlyargs + len(args.args)\n+    else:\n+        posonlyargs = 0\n+        positionals = len(args.args)\n+\n+    for _ in range(len(defaults), positionals):\n+        defaults.insert(0, Parameter.empty)\n \n     if hasattr(args, \"posonlyargs\"):\n-        for arg in args.posonlyargs:  # type: ignore\n+        for i, arg in enumerate(args.posonlyargs):  # type: ignore\n+            if defaults[i] is Parameter.empty:\n+                default = Parameter.empty\n+            else:\n+                default = ast_unparse(defaults[i])\n+\n             annotation = ast_unparse(arg.annotation) or Parameter.empty\n             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,\n-                                    annotation=annotation))\n+                                    default=default, annotation=annotation))\n \n     for i, arg in enumerate(args.args):\n-        if len(args.args) - i <= len(args.defaults):\n-            default = ast_unparse(args.defaults[-len(args.args) + i])\n-        else:\n+        if defaults[i + posonlyargs] is Parameter.empty:\n             default = Parameter.empty\n+        else:\n+            default = ast_unparse(defaults[i + posonlyargs])\n \n         annotation = ast_unparse(arg.annotation) or Parameter.empty\n         params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD,\ndiff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex f16feb6980d..de0eda1a676 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -335,10 +335,14 @@ def test_signature_from_str_kwonly_args():\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n-    sig = inspect.signature_from_str('(a, /, b)')\n-    assert list(sig.parameters.keys()) == ['a', 'b']\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n-    assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n \n \n def test_signature_from_str_invalid():\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7757"}