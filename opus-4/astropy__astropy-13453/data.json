{"instance_id": "astropy__astropy-13453", "score": "C", "diff": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf229cc..8278fe3301 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -354,6 +354,10 @@ class HTML(core.BaseReader):\n             self.data.fill_values = [self.data.fill_values]\n \n         self.data._set_fill_values(cols)\n+        \n+        # Set cols on data object and apply column formats before getting string values\n+        self.data.cols = cols\n+        self.data._set_col_formats()\n \n         lines = []\n \n@@ -429,6 +433,10 @@ class HTML(core.BaseReader):\n                                 for i in range(span):\n                                     # Split up multicolumns into separate columns\n                                     new_col = Column([el[i] for el in col])\n+                                    \n+                                    # Copy format from parent column if it exists\n+                                    if hasattr(col.info, 'format') and col.info.format is not None:\n+                                        new_col.info.format = col.info.format\n \n                                     new_col_iter_str_vals = self.fill_values(\n                                         col, new_col.info.iter_str_vals())\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 7a3b85fc92..83f08ed124 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\ndiff --git a/test_html_formats.py b/test_html_formats.py\nnew file mode 100644\nindex 0000000000..97303a38aa\n--- /dev/null\n+++ b/test_html_formats.py\n@@ -0,0 +1,30 @@\n+from astropy.table import Table\n+from io import StringIO\n+\n+# generate table\n+t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+tc = t.copy()  # copy table\n+\n+# Test 1: HTML table with \"a\" column formatted to show 2 decimal places\n+print(\"Test 1: HTML output with formats\")\n+with StringIO() as sp:\n+    tc.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+    html_output = sp.getvalue()\n+    print(html_output)\n+    # Check if formatting was applied\n+    if \"1.24e-24\" in html_output and \"3.23e-15\" in html_output:\n+        print(\"SUCCESS: Formatting was applied\")\n+    else:\n+        print(\"FAIL: Formatting was NOT applied\")\n+\n+print(\"\\nTest 2: CSV output with formats (for comparison)\")\n+with StringIO() as sp:\n+    tc.write(sp, format=\"csv\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+    csv_output = sp.getvalue()\n+    print(csv_output)\n+    \n+print(\"\\nTest 3: RST output with formats (for comparison)\")\n+with StringIO() as sp:\n+    tc.write(sp, format=\"ascii.rst\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+    rst_output = sp.getvalue()\n+    print(rst_output)\ndiff --git a/test_html_formats_feature.py b/test_html_formats_feature.py\nnew file mode 100644\nindex 0000000000..8b4ca3f663\n--- /dev/null\n+++ b/test_html_formats_feature.py\n@@ -0,0 +1,68 @@\n+\"\"\"Test that HTML format writer supports the formats parameter\"\"\"\n+import pytest\n+from astropy.table import Table\n+from io import StringIO\n+\n+\n+def test_html_write_with_formats():\n+    \"\"\"Test that HTML writer applies custom formats to columns\"\"\"\n+    # Create a table with float values\n+    t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+    \n+    # Write with custom format for column 'a'\n+    with StringIO() as sp:\n+        t.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+        html_output = sp.getvalue()\n+    \n+    # Check that the formatting was applied\n+    assert \"1.24e-24\" in html_output\n+    assert \"3.23e-15\" in html_output\n+    # Make sure the original values are not in the output\n+    assert \"1.23875234858e-24\" not in html_output\n+    assert \"3.2348748432e-15\" not in html_output\n+\n+\n+def test_html_write_with_multiple_formats():\n+    \"\"\"Test that HTML writer applies formats to multiple columns\"\"\"\n+    t = Table([(1.234567, 2.345678), (100, 200)], names=('x', 'y'))\n+    \n+    # Write with custom formats for both columns\n+    with StringIO() as sp:\n+        t.write(sp, format=\"html\", formats={\n+            \"x\": lambda val: f\"{val:.2f}\",\n+            \"y\": \"{:04d}\".format\n+        })\n+        html_output = sp.getvalue()\n+    \n+    # Check that formats were applied\n+    assert \"1.23\" in html_output\n+    assert \"2.35\" in html_output\n+    assert \"0100\" in html_output\n+    assert \"0200\" in html_output\n+\n+\n+def test_html_write_with_string_format():\n+    \"\"\"Test that HTML writer works with string format specifications\"\"\"\n+    t = Table([(1.234567, 2.345678), (\"hello\", \"world\")], names=('num', 'text'))\n+    \n+    # Write with string format\n+    with StringIO() as sp:\n+        t.write(sp, format=\"html\", formats={\"num\": \"%.3f\"})\n+        html_output = sp.getvalue()\n+    \n+    # Check that format was applied\n+    assert \"1.235\" in html_output\n+    assert \"2.346\" in html_output\n+    \n+\n+if __name__ == \"__main__\":\n+    test_html_write_with_formats()\n+    print(\"test_html_write_with_formats: PASSED\")\n+    \n+    test_html_write_with_multiple_formats()\n+    print(\"test_html_write_with_multiple_formats: PASSED\")\n+    \n+    test_html_write_with_string_format()\n+    print(\"test_html_write_with_string_format: PASSED\")\n+    \n+    print(\"\\nAll tests passed!\")\ndiff --git a/test_html_formats_multicolumn.py b/test_html_formats_multicolumn.py\nnew file mode 100644\nindex 0000000000..7935cda2f1\n--- /dev/null\n+++ b/test_html_formats_multicolumn.py\n@@ -0,0 +1,36 @@\n+\"\"\"Test HTML format writer with multicolumn support and formats\"\"\"\n+from astropy.table import Table\n+from io import StringIO\n+import numpy as np\n+\n+\n+def test_html_multicolumn_with_formats():\n+    \"\"\"Test that HTML writer applies formats to multi-dimensional columns\"\"\"\n+    # Create a table with 2D column\n+    t = Table()\n+    t['2d'] = [[1.234567, 2.345678], [3.456789, 4.567890]]\n+    t['1d'] = [10.123456, 20.234567]\n+    \n+    # Write with custom format\n+    with StringIO() as sp:\n+        t.write(sp, format=\"html\", formats={\n+            \"2d\": lambda x: f\"{x:.2f}\",\n+            \"1d\": lambda x: f\"{x:.1f}\"\n+        })\n+        html_output = sp.getvalue()\n+        print(html_output)\n+    \n+    # Check that formatting was applied to 2D column elements\n+    assert \"1.23\" in html_output\n+    assert \"2.35\" in html_output\n+    assert \"3.46\" in html_output\n+    assert \"4.57\" in html_output\n+    \n+    # Check 1D column formatting\n+    assert \"10.1\" in html_output\n+    assert \"20.2\" in html_output\n+    \n+\n+if __name__ == \"__main__\":\n+    test_html_multicolumn_with_formats()\n+    print(\"test_html_multicolumn_with_formats: PASSED\")\n", "gold_standard_diff": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf229cc2c..c5a110514588 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -349,11 +349,13 @@ def write(self, table):\n         cols = list(table.columns.values())\n \n         self.data.header.cols = cols\n+        self.data.cols = cols\n \n         if isinstance(self.data.fill_values, tuple):\n             self.data.fill_values = [self.data.fill_values]\n \n         self.data._set_fill_values(cols)\n+        self.data._set_col_formats()\n \n         lines = []\n \ndiff --git a/astropy/io/ascii/tests/test_html.py b/astropy/io/ascii/tests/test_html.py\nindex 0515efa06dac..dcfd2229bd48 100644\n--- a/astropy/io/ascii/tests/test_html.py\n+++ b/astropy/io/ascii/tests/test_html.py\n@@ -717,6 +717,49 @@ def test_multi_column_write_table_html_fill_values_masked():\n     assert buffer_output.getvalue() == buffer_expected.getvalue()\n \n \n+def test_write_table_formatted_columns():\n+    \"\"\"\n+    Test to make sure that the HTML writer writes out using the\n+    supplied formatting.\n+    \"\"\"\n+\n+    col1 = [1, 2]\n+    col2 = [1.234567e-11, -9.876543e11]\n+    formats = {\"C1\": \"04d\", \"C2\": \".2e\"}\n+    table = Table([col1, col2], names=formats.keys())\n+\n+    expected = \"\"\"\\\n+<html>\n+ <head>\n+  <meta charset=\"utf-8\"/>\n+  <meta content=\"text/html;charset=UTF-8\" http-equiv=\"Content-type\"/>\n+ </head>\n+ <body>\n+  <table>\n+   <thead>\n+    <tr>\n+     <th>C1</th>\n+     <th>C2</th>\n+    </tr>\n+   </thead>\n+   <tr>\n+    <td>0001</td>\n+    <td>1.23e-11</td>\n+   </tr>\n+   <tr>\n+    <td>0002</td>\n+    <td>-9.88e+11</td>\n+   </tr>\n+  </table>\n+ </body>\n+</html>\n+    \"\"\"\n+    with StringIO() as sp:\n+        table.write(sp, format=\"html\", formats=formats)\n+        out = sp.getvalue().strip()\n+    assert out == expected.strip()\n+\n+\n @pytest.mark.skipif('not HAS_BS4')\n def test_read_html_unicode():\n     \"\"\"\ndiff --git a/docs/changes/io.ascii/13453.bugfix.rst b/docs/changes/io.ascii/13453.bugfix.rst\nnew file mode 100644\nindex 000000000000..658c4ed07e76\n--- /dev/null\n+++ b/docs/changes/io.ascii/13453.bugfix.rst\n@@ -0,0 +1,3 @@\n+When writing out a :class:`~astropy.table.Table` to HTML format, the\n+``formats`` keyword argument to the :meth:`~astropy.table.Table.write` method\n+will now be applied.\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/13453"}