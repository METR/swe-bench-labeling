{"instance_id": "sympy__sympy-22914", "score": "C", "diff": "diff --git a/debug_nested.py b/debug_nested.py\nnew file mode 100644\nindex 0000000000..ba24887112\n--- /dev/null\n+++ b/debug_nested.py\n@@ -0,0 +1,22 @@\n+from sympy import symbols, Min, Max, pycode\n+\n+x, y, z = symbols(\"x y z\")\n+\n+# Test nested Min/Max\n+nested1 = Min(Max(x, y), z)\n+nested2 = Max(Min(x, y), z)\n+\n+print(f\"Min(Max(x, y), z) -> {pycode(nested1)}\")\n+print(f\"Max(Min(x, y), z) -> {pycode(nested2)}\")\n+\n+# Also test different nested combinations\n+nested3 = Min(x, Max(y, z))\n+nested4 = Max(x, Min(y, z))\n+\n+print(f\"Min(x, Max(y, z)) -> {pycode(nested3)}\")\n+print(f\"Max(x, Min(y, z)) -> {pycode(nested4)}\")\n+\n+# Test with symbol c\n+a, b, c = symbols(\"a b c\")\n+nested5 = Min(Max(a, b), c)\n+print(f\"Min(Max(a, b), c) -> {pycode(nested5)}\")\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 3a72ab606c..7d5ca243df 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -470,6 +470,12 @@ def _print_Symbol(self, expr):\n     _print_fresnelc = CodePrinter._print_not_supported\n     _print_fresnels = CodePrinter._print_not_supported\n \n+    def _print_Min(self, expr):\n+        return \"min({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n+    def _print_Max(self, expr):\n+        return \"max({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 9c1285d7dd..afd95fc055 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -392,3 +392,28 @@ def test_numerical_accuracy_functions():\n     assert prntr.doprint(expm1(x)) == 'numpy.expm1(x)'\n     assert prntr.doprint(log1p(x)) == 'numpy.log1p(x)'\n     assert prntr.doprint(cosm1(x)) == 'scipy.special.cosm1(x)'\n+\n+\n+def test_Min_Max():\n+    from sympy.functions.elementary.miscellaneous import (Min, Max)\n+    from sympy.functions import sin, cos\n+    \n+    # Test Min with 2 arguments\n+    assert pycode(Min(x, y)) == \"min(x, y)\"\n+    \n+    # Test Max with 2 arguments  \n+    assert pycode(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Test Min with 3 arguments\n+    assert pycode(Min(x, y, z)) == \"min(x, y, z)\"\n+    \n+    # Test Max with 3 arguments\n+    assert pycode(Max(x, y, z)) == \"max(x, y, z)\"\n+    \n+    # Test with expressions\n+    assert pycode(Min(sin(x), cos(x))) == \"min(math.sin(x), math.cos(x))\"\n+    assert pycode(Max(sin(x), cos(x))) == \"max(math.sin(x), math.cos(x))\"\n+    \n+    # Test nested Min/Max (note: SymPy may reorder arguments)\n+    assert pycode(Min(Max(x, y), z)) == \"min(z, max(x, y))\"\n+    assert pycode(Max(Min(x, y), z)) == \"max(z, min(x, y))\"\ndiff --git a/test_min_max.py b/test_min_max.py\nnew file mode 100644\nindex 0000000000..e6abe1a43b\n--- /dev/null\n+++ b/test_min_max.py\n@@ -0,0 +1,10 @@\n+from sympy import symbols, Min, Max, pycode\n+\n+a, b = symbols(\"a b\")\n+c = Min(a, b)\n+d = Max(a, b)\n+\n+print(\"Min output:\")\n+print(pycode(c))\n+print(\"\\nMax output:\")\n+print(pycode(d))\ndiff --git a/test_min_max_comprehensive.py b/test_min_max_comprehensive.py\nnew file mode 100644\nindex 0000000000..29afecf424\n--- /dev/null\n+++ b/test_min_max_comprehensive.py\n@@ -0,0 +1,39 @@\n+from sympy import symbols, Min, Max, pycode, sqrt, sin, cos\n+\n+# Test with 2 arguments\n+a, b = symbols(\"a b\")\n+c = Min(a, b)\n+d = Max(a, b)\n+\n+print(\"Test with 2 arguments:\")\n+print(f\"Min(a, b) -> {pycode(c)}\")\n+print(f\"Max(a, b) -> {pycode(d)}\")\n+\n+# Test with 3 arguments\n+x, y, z = symbols(\"x y z\")\n+e = Min(x, y, z)\n+f = Max(x, y, z)\n+\n+print(\"\\nTest with 3 arguments:\")\n+print(f\"Min(x, y, z) -> {pycode(e)}\")\n+print(f\"Max(x, y, z) -> {pycode(f)}\")\n+\n+# Test with expressions\n+expr1 = Min(sin(x), cos(x))\n+expr2 = Max(sqrt(x), x**2)\n+\n+print(\"\\nTest with expressions:\")\n+print(f\"Min(sin(x), cos(x)) -> {pycode(expr1)}\")\n+print(f\"Max(sqrt(x), x**2) -> {pycode(expr2)}\")\n+\n+# Test nested Min/Max\n+nested = Min(Max(a, b), c)\n+print(\"\\nTest nested Min/Max:\")\n+print(f\"Min(Max(a, b), c) -> {pycode(nested)}\")\n+\n+# Test with numeric values\n+num_min = Min(5, 3, 7)\n+num_max = Max(5, 3, 7)\n+print(\"\\nTest with numeric values:\")\n+print(f\"Min(5, 3, 7) -> {pycode(num_min)}\")\n+print(f\"Max(5, 3, 7) -> {pycode(num_max)}\")\n", "gold_standard_diff": "From 7eefbc839b5a23df8b20cb2e4e45dd76aa4ce9d4 Mon Sep 17 00:00:00 2001\nFrom: Advait <apote2050@gmail.com>\nDate: Tue, 25 Jan 2022 15:59:49 +0530\nSubject: [PATCH 1/4] functions added to _known_functions\n\n---\n sympy/printing/pycode.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 3a72ab606c89..fd5a73913316 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -18,6 +18,8 @@\n \n _known_functions = {\n     'Abs': 'abs',\n+    'Min': 'min',\n+    'Max': 'max',\n }\n _known_functions_math = {\n     'acos': 'acos',\n\nFrom c04c8a7fcf30159f6d99953505a6b5d16315cbad Mon Sep 17 00:00:00 2001\nFrom: Advait <apote2050@gmail.com>\nDate: Wed, 26 Jan 2022 23:48:35 +0530\nSubject: [PATCH 2/4] author: add Advait Pote to .mailmap\n\n---\n .mailmap | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/.mailmap b/.mailmap\nindex ef894343dd12..20b5734c53d6 100644\n--- a/.mailmap\n+++ b/.mailmap\n@@ -98,6 +98,7 @@ Aditya Ravuri <infprobscix@gmail.com> InfProbSciX <infprobscix@gmail.com>\n Aditya Rohan <riyuzakiiitk@gmail.com>\n Aditya Shah <adityashah30@gmail.com>\n Advait <apote2050@gmail.com>\n+Advait Pote <92469698+AdvaitPote@users.noreply.github.com>\n Adwait Baokar <adwaitbaokar18@gmail.com> abaokar-07 <adwaitbaokar18@gmail.com>\n Akash Agrawall <akash.wanted@gmail.com>\n Akash Kundu <sk.sayakkundu1997@gmail.com>\n\nFrom 41c195e620bcd76624cfe17659f225d9c602cb5b Mon Sep 17 00:00:00 2001\nFrom: Advait <apote2050@gmail.com>\nDate: Thu, 27 Jan 2022 00:09:36 +0530\nSubject: [PATCH 3/4] author: add Advait Pote to .mailmap\n\n---\n .mailmap | 3 +--\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\ndiff --git a/.mailmap b/.mailmap\nindex 20b5734c53d6..9dcf04e485e7 100644\n--- a/.mailmap\n+++ b/.mailmap\n@@ -97,8 +97,7 @@ Aditya Kumar Sinha <adityakumar113141@gmail.com> aditya113141 <adityakumar113141\n Aditya Ravuri <infprobscix@gmail.com> InfProbSciX <infprobscix@gmail.com>\n Aditya Rohan <riyuzakiiitk@gmail.com>\n Aditya Shah <adityashah30@gmail.com>\n-Advait <apote2050@gmail.com>\n-Advait Pote <92469698+AdvaitPote@users.noreply.github.com>\n+Advait <apote2050@gmail.com> Advait Pote <92469698+AdvaitPote@users.noreply.github.com>\n Adwait Baokar <adwaitbaokar18@gmail.com> abaokar-07 <adwaitbaokar18@gmail.com>\n Akash Agrawall <akash.wanted@gmail.com>\n Akash Kundu <sk.sayakkundu1997@gmail.com>\n\nFrom 3ac091e2f1d9daa1027483e4dfa6c066293b665a Mon Sep 17 00:00:00 2001\nFrom: Advait <apote2050@gmail.com>\nDate: Fri, 28 Jan 2022 18:25:24 +0530\nSubject: [PATCH 4/4] Tests Added for Min and Max\n\n---\n sympy/printing/tests/test_pycode.py | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 9c1285d7ddb3..3d236c729c76 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -6,7 +6,7 @@\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -58,6 +58,9 @@ def test_PythonCodePrinter():\n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n \n def test_PythonCodePrinter_standard():\n     prntr = PythonCodePrinter()\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/22914"}