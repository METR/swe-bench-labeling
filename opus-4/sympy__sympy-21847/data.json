{"instance_id": "sympy__sympy-21847", "score": "C", "diff": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..8a0eef6527 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -120,27 +120,33 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n         variables = list(variables) + [S.One]\n         if all(variable.is_commutative for variable in variables):\n             monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n+            # Generate monomials for all degrees from min_degree to max_degree\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in combinations_with_replacement(variables, degree):\n+                    powers = dict()\n+                    for variable in variables:\n+                        powers[variable] = 0\n+                    for variable in item:\n+                        if variable != 1:\n+                            powers[variable] += 1\n+                    # Check if total degree equals the current degree\n+                    if sum(powers.values()) == degree:\n+                        monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n             monomials_list_non_comm = []\n-            for item in product(variables, repeat=max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n+            # Generate monomials for all degrees from min_degree to max_degree\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in product(variables, repeat=degree):\n+                    powers = dict()\n+                    for variable in variables:\n+                        powers[variable] = 0\n+                    for variable in item:\n+                        if variable != 1:\n+                            powers[variable] += 1\n+                    # Check if total degree equals the current degree\n+                    if sum(powers.values()) == degree:\n+                        monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n         if any(min_degrees[i] > max_degrees[i] for i in range(n)):\ndiff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex 482cbee30d..daa3e6beb7 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -50,6 +50,14 @@ def test_monomials():\n     assert set(itermonomials([x, y], 3)) == \\\n             {S.One, x, y, x**2, x**3, y**2, y**3, x*y, x*y**2, y*x**2}\n \n+    # Test min_degrees with total degree (issue regression test)\n+    assert set(itermonomials([x, y], 3, min_degrees=3)) == \\\n+            {x**3, y**3, x**2*y, x*y**2}\n+    assert set(itermonomials([x, y, z], 3, min_degrees=3)) == \\\n+            {x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y*z}\n+    assert set(itermonomials([x, y], 3, min_degrees=2)) == \\\n+            {x**2, y**2, x*y, x**3, y**3, x**2*y, x*y**2}\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], 0)) == {S.One}\n     assert set(itermonomials([i, j, k], 1)) == {S.One, i, j, k}\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..c141c6be29\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,75 @@\n+import sympy as sp\n+from sympy.polys.orderings import monomial_key\n+from sympy.polys.monomials import itermonomials\n+\n+x, y, z = sp.symbols('x y z')\n+\n+# Test 1: Basic case - total degree = 3\n+print(\"Test 1: Total degree = 3\")\n+monomials = list(itermonomials([x, y, z], 3, min_degrees=3))\n+print(f\"Count: {len(monomials)}\")\n+expected_count = 10  # C(3+3-1, 3) = C(5, 3) = 10\n+assert len(monomials) == expected_count, f\"Expected {expected_count}, got {len(monomials)}\"\n+\n+# Test 2: min_degree < max_degree\n+print(\"\\nTest 2: Total degree from 2 to 3\")\n+monomials = list(itermonomials([x, y, z], 3, min_degrees=2))\n+print(f\"Count: {len(monomials)}\")\n+# degree 2: C(3+2-1, 2) = C(4, 2) = 6\n+# degree 3: C(3+3-1, 3) = C(5, 3) = 10\n+# total: 16\n+expected_count = 16\n+assert len(monomials) == expected_count, f\"Expected {expected_count}, got {len(monomials)}\"\n+\n+# Test 3: min_degree = 0 (default case)\n+print(\"\\nTest 3: Total degree from 0 to 2\")\n+monomials = list(itermonomials([x, y], 2))\n+sorted_monomials = sorted(monomials, key=monomial_key('grlex', [y, x]))\n+print(sorted_monomials)\n+# Should include: 1, x, y, x**2, x*y, y**2\n+assert len(monomials) == 6\n+\n+# Test 4: min_degree = 1\n+print(\"\\nTest 4: Total degree from 1 to 2\")\n+monomials = list(itermonomials([x, y], 2, min_degrees=1))\n+sorted_monomials = sorted(monomials, key=monomial_key('grlex', [y, x]))\n+print(sorted_monomials)\n+# Should include: x, y, x**2, x*y, y**2 (no constant term)\n+assert len(monomials) == 5\n+\n+# Test 5: Single variable\n+print(\"\\nTest 5: Single variable, degree 3\")\n+monomials = list(itermonomials([x], 3, min_degrees=3))\n+print(monomials)\n+assert monomials == [x**3]\n+\n+# Test 6: Two variables, total degree = 4\n+print(\"\\nTest 6: Two variables, total degree = 4\")\n+monomials = list(itermonomials([x, y], 4, min_degrees=4))\n+print(f\"Count: {len(monomials)}\")\n+# Should have: x^4, x^3*y, x^2*y^2, x*y^3, y^4\n+expected_count = 5\n+assert len(monomials) == expected_count\n+\n+# Test 7: Edge case - max_degree = 0\n+print(\"\\nTest 7: max_degree = 0\")\n+monomials = list(itermonomials([x, y], 0))\n+print(monomials)\n+assert monomials == [sp.S.One]\n+\n+# Test 8: Edge case - empty variables\n+print(\"\\nTest 8: Empty variables list\")\n+monomials = list(itermonomials([], 2))\n+print(monomials)\n+assert monomials == [sp.S.One]\n+\n+# Test 9: Non-commutative variables\n+print(\"\\nTest 9: Non-commutative variables\")\n+a, b = sp.symbols('a b', commutative=False)\n+monomials = set(itermonomials([a, b], 2, min_degrees=2))\n+print(f\"Count: {len(monomials)}\")\n+# Should have: a^2, a*b, b*a, b^2\n+expected = {a**2, a*b, b*a, b**2}\n+assert monomials == expected\n+\n+print(\"\\nAll tests passed!\")\ndiff --git a/test_edge_case.py b/test_edge_case.py\nnew file mode 100644\nindex 0000000000..b7561d66ed\n--- /dev/null\n+++ b/test_edge_case.py\n@@ -0,0 +1,24 @@\n+import sympy as sp\n+from sympy.polys.monomials import itermonomials\n+\n+x, y = sp.symbols('x y')\n+\n+# Test edge case: min_degree = 0, max_degree = 0\n+print(\"Test: min_degree=0, max_degree=0\")\n+monomials = list(itermonomials([x, y], 0, min_degrees=0))\n+print(f\"Monomials: {monomials}\")\n+assert monomials == [sp.S.One]\n+\n+# Special case in implementation\n+print(\"\\nTest: empty variables, max_degree=0\")\n+monomials = list(itermonomials([], 0))\n+print(f\"Monomials: {monomials}\")\n+assert monomials == [sp.S.One]\n+\n+# Another edge case\n+print(\"\\nTest: one variable, min_degree=0, max_degree=0\")\n+monomials = list(itermonomials([x], 0, min_degrees=0))\n+print(f\"Monomials: {monomials}\")\n+assert monomials == [sp.S.One]\n+\n+print(\"\\nAll edge case tests passed!\")\ndiff --git a/test_edge_case2.py b/test_edge_case2.py\nnew file mode 100644\nindex 0000000000..4ec62e8836\n--- /dev/null\n+++ b/test_edge_case2.py\n@@ -0,0 +1,12 @@\n+import sympy as sp\n+from sympy.polys.monomials import itermonomials\n+\n+x, y = sp.symbols('x y')\n+\n+# Test edge case: min_degree > 0, max_degree = 0\n+# This should return empty since there are no monomials with total degree in [1, 0]\n+print(\"Test: min_degree=1, max_degree=0\")\n+monomials = list(itermonomials([x, y], 0, min_degrees=1))\n+print(f\"Monomials: {monomials}\")\n+print(f\"Expected: empty list\")\n+# Since min_degree > max_degree, this should return empty\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..9def656cfe\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,44 @@\n+import sympy as sp\n+from sympy.polys.orderings import monomial_key\n+\n+x1, x2, x3 = sp.symbols('x1, x2, x3')\n+states = [x1, x2, x3]\n+max_degrees = 3\n+min_degrees = 3\n+\n+# Test the issue\n+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                   key=monomial_key('grlex', states))\n+print(\"Monomials with total degree = 3:\")\n+print(monomials)\n+print(f\"Number of monomials: {len(monomials)}\")\n+\n+# Expected monomials of total degree 3\n+expected = []\n+# All combinations with sum of powers = 3\n+for a in range(4):\n+    for b in range(4):\n+        for c in range(4):\n+            if a + b + c == 3:\n+                expected.append((a, b, c))\n+\n+print(\"\\nExpected combinations (powers for x1, x2, x3):\")\n+for comb in expected:\n+    print(comb)\n+print(f\"Expected count: {len(expected)}\")\n+\n+# Let's also test with min_degrees < max_degrees\n+print(\"\\n\\nTest with min_degrees=2, max_degrees=3:\")\n+monomials2 = sorted(sp.itermonomials(states, max_degrees=3, min_degrees=2), \n+                    key=monomial_key('grlex', states))\n+print(monomials2)\n+print(f\"Number of monomials: {len(monomials2)}\")\n+\n+# Count expected\n+expected2 = []\n+for a in range(4):\n+    for b in range(4):\n+        for c in range(4):\n+            if 2 <= a + b + c <= 3:\n+                expected2.append((a, b, c))\n+print(f\"Expected count for degree 2-3: {len(expected2)}\")\ndiff --git a/test_noncomm.py b/test_noncomm.py\nnew file mode 100644\nindex 0000000000..28eb8cf2e0\n--- /dev/null\n+++ b/test_noncomm.py\n@@ -0,0 +1,21 @@\n+import sympy as sp\n+from sympy.polys.monomials import itermonomials\n+\n+# Test non-commutative variables\n+a, b = sp.symbols('a b', commutative=False)\n+\n+print(\"Test: Non-commutative variables, total degree = 2\")\n+monomials = set(itermonomials([a, b], 2, min_degrees=2))\n+print(f\"Monomials: {monomials}\")\n+expected = {a**2, a*b, b*a, b**2}\n+print(f\"Expected: {expected}\")\n+assert monomials == expected\n+\n+print(\"\\nTest: Non-commutative variables, total degree from 1 to 2\")\n+monomials = set(itermonomials([a, b], 2, min_degrees=1))\n+print(f\"Count: {len(monomials)}\")\n+# Should have: a, b (degree 1) + a^2, a*b, b*a, b^2 (degree 2)\n+expected_count = 6\n+assert len(monomials) == expected_count\n+\n+print(\"\\nAll non-commutative tests passed!\")\n", "gold_standard_diff": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307e9..d2cd3451e55a 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\ndiff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex 482cbee30dfd..e3f05a23e15a 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,7 +15,6 @@\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n-\n def test_monomials():\n \n     # total_degree tests\n@@ -114,6 +113,9 @@ def test_monomials():\n     assert set(itermonomials([x], [3], [1])) == {x, x**3, x**2}\n     assert set(itermonomials([x], [3], [2])) == {x**3, x**2}\n \n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n     assert set(itermonomials([x, y], [0, 0])) == {S.One}\n     assert set(itermonomials([x, y], [0, 1])) == {S.One, y}\n     assert set(itermonomials([x, y], [0, 2])) == {S.One, y, y**2}\n@@ -132,6 +134,15 @@ def test_monomials():\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n     i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == \\\n+            {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+            {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+                    j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+                    k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+                    k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+                    i*j*k, k*i\n+            }\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/21847"}