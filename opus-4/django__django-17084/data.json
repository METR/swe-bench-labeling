{"instance_id": "django__django-17084", "score": "I", "diff": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a778cd413b..a8574d0fe0 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -88,6 +88,17 @@ class Aggregate(Func):\n                         \"Cannot compute %s('%s'): '%s' is an aggregate\"\n                         % (c.name, name, name)\n                     )\n+                if expr.contains_over_clause:\n+                    before_resolved = self.get_source_expressions()[index]\n+                    name = (\n+                        before_resolved.name\n+                        if hasattr(before_resolved, \"name\")\n+                        else repr(before_resolved)\n+                    )\n+                    raise FieldError(\n+                        \"Cannot compute %s('%s'): '%s' is a window function\"\n+                        % (c.name, name, name)\n+                    )\n         if (default := c.default) is None:\n             return c\n         if hasattr(default, \"resolve_expression\"):\ndiff --git a/test_issue_reproduction.py b/test_issue_reproduction.py\nnew file mode 100644\nindex 0000000000..f1fbb52436\n--- /dev/null\n+++ b/test_issue_reproduction.py\n@@ -0,0 +1,52 @@\n+import os\n+import django\n+from django.db import models\n+from django.db.models import Window, Sum, F\n+from django.db.models.functions import Coalesce\n+\n+# Setup Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_settings')\n+django.setup()\n+\n+# Create a simple test model\n+class TestModel(models.Model):\n+    date = models.DateField()\n+    DJR = models.FloatField(default=0)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Try to reproduce the issue\n+try:\n+    from django.db import connection\n+    \n+    # Create the table\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(TestModel)\n+    \n+    # Create sample data\n+    TestModel.objects.create(date='2023-01-01', DJR=10)\n+    TestModel.objects.create(date='2023-01-02', DJR=20)\n+    TestModel.objects.create(date='2023-01-03', DJR=30)\n+    \n+    # Try the problematic query\n+    queryset = TestModel.objects.all()\n+    queryset = queryset.annotate(\n+        cumul_DJR=Coalesce(Window(Sum(\"DJR\"), order_by=F(\"date\").asc()), 0.0)\n+    )\n+    \n+    # This should fail in Django 4.2\n+    aggregate = queryset.aggregate(\n+        DJR_total=Sum(\"DJR\"),\n+        cumul_DJR_total=Sum(\"cumul_DJR\")\n+    )\n+    \n+    print(\"Query executed successfully:\", aggregate)\n+    \n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+    \n+finally:\n+    # Clean up\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.delete_model(TestModel)\ndiff --git a/test_window_aggregate_fix.py b/test_window_aggregate_fix.py\nnew file mode 100644\nindex 0000000000..5737b65326\n--- /dev/null\n+++ b/test_window_aggregate_fix.py\n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test to verify that aggregating over window functions raises a proper error.\n+\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models\n+from django.db.models import Window, Sum, F\n+from django.db.models.functions import Coalesce\n+from django.core.exceptions import FieldError\n+\n+# Minimal Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=['__main__'],\n+        USE_TZ=False,\n+    )\n+    django.setup()\n+\n+# Create a simple test model\n+class TestModel(models.Model):\n+    date = models.DateField()\n+    DJR = models.FloatField(default=0)\n+    \n+    class Meta:\n+        app_label = '__main__'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel)\n+\n+# Create sample data\n+TestModel.objects.create(date='2023-01-01', DJR=10)\n+TestModel.objects.create(date='2023-01-02', DJR=20)\n+TestModel.objects.create(date='2023-01-03', DJR=30)\n+\n+print(\"Testing aggregation over window functions...\")\n+\n+# Try the problematic query\n+queryset = TestModel.objects.all()\n+queryset = queryset.annotate(\n+    cumul_DJR=Coalesce(Window(Sum(\"DJR\"), order_by=F(\"date\").asc()), 0.0)\n+)\n+\n+# Let's debug what's happening\n+print(\"\\nDebug: Looking at the annotation...\")\n+print(f\"cumul_DJR annotation type: {type(queryset.query.annotations['cumul_DJR'])}\")\n+print(f\"cumul_DJR contains_over_clause: {queryset.query.annotations['cumul_DJR'].contains_over_clause}\")\n+\n+# Check what Sum(\"cumul_DJR\") becomes\n+sum_expr = Sum(\"cumul_DJR\")\n+print(f\"\\nSum('cumul_DJR') type: {type(sum_expr)}\")\n+print(f\"Sum('cumul_DJR') source expressions: {sum_expr.get_source_expressions()}\")\n+print(f\"Sum('cumul_DJR') source expression[0] type: {type(sum_expr.get_source_expressions()[0])}\")\n+print(f\"Sum('cumul_DJR') string repr: {sum_expr.get_source_expressions()[0]}\")\n+\n+# This should raise a FieldError with our fix\n+try:\n+    aggregate = queryset.aggregate(\n+        DJR_total=Sum(\"DJR\"),\n+        cumul_DJR_total=Sum(\"cumul_DJR\")\n+    )\n+    print(\"ERROR: Query should have failed but succeeded!\")\n+    print(\"Result:\", aggregate)\n+except FieldError as e:\n+    print(\"\\nSUCCESS: Got expected FieldError:\", str(e))\n+except Exception as e:\n+    print(f\"\\nERROR: Got unexpected error: {type(e).__name__}: {e}\")\n+\n+# Clean up\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.delete_model(TestModel)\n+\n+print(\"\\nTest completed!\")\n", "gold_standard_diff": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 13a6809dd83f..1608d194807c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -403,6 +403,7 @@ def get_aggregation(self, using, aggregate_exprs):\n         # Store annotation mask prior to temporarily adding aggregations for\n         # resolving purpose to facilitate their subsequent removal.\n         refs_subquery = False\n+        refs_window = False\n         replacements = {}\n         annotation_select_mask = self.annotation_select_mask\n         for alias, aggregate_expr in aggregate_exprs.items():\n@@ -419,6 +420,10 @@ def get_aggregation(self, using, aggregate_exprs):\n                 getattr(self.annotations[ref], \"subquery\", False)\n                 for ref in aggregate.get_refs()\n             )\n+            refs_window |= any(\n+                getattr(self.annotations[ref], \"contains_over_clause\", True)\n+                for ref in aggregate.get_refs()\n+            )\n             aggregate = aggregate.replace_expressions(replacements)\n             self.annotations[alias] = aggregate\n             replacements[Ref(alias, aggregate)] = aggregate\n@@ -451,6 +456,7 @@ def get_aggregation(self, using, aggregate_exprs):\n             or self.is_sliced\n             or has_existing_aggregation\n             or refs_subquery\n+            or refs_window\n             or qualify\n             or self.distinct\n             or self.combinator\ndiff --git a/docs/releases/4.2.4.txt b/docs/releases/4.2.4.txt\nindex e8fd22551632..3921dd9b3e0f 100644\n--- a/docs/releases/4.2.4.txt\n+++ b/docs/releases/4.2.4.txt\n@@ -9,4 +9,6 @@ Django 4.2.4 fixes several bugs in 4.2.3.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 4.2 that caused a crash of\n+  ``QuerySet.aggregate()`` with aggregates referencing window functions\n+  (:ticket:`34717`).\ndiff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 366b8434e542..db69246952fa 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -28,6 +28,7 @@\n     Value,\n     Variance,\n     When,\n+    Window,\n )\n from django.db.models.expressions import Func, RawSQL\n from django.db.models.functions import (\n@@ -2207,3 +2208,23 @@ def test_referenced_subquery_requires_wrapping(self):\n         sql = ctx.captured_queries[0][\"sql\"].lower()\n         self.assertEqual(sql.count(\"select\"), 3, \"Subquery wrapping required\")\n         self.assertEqual(aggregate, {\"sum_total_books\": 3})\n+\n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_referenced_window_requires_wrapping(self):\n+        total_books_qs = Book.objects.annotate(\n+            avg_publisher_pages=Coalesce(\n+                Window(Avg(\"pages\"), partition_by=F(\"publisher\")),\n+                0.0,\n+            )\n+        )\n+        with self.assertNumQueries(1) as ctx:\n+            aggregate = total_books_qs.aggregate(\n+                sum_avg_publisher_pages=Sum(\"avg_publisher_pages\"),\n+                books_count=Count(\"id\"),\n+            )\n+        sql = ctx.captured_queries[0][\"sql\"].lower()\n+        self.assertEqual(sql.count(\"select\"), 2, \"Subquery wrapping required\")\n+        self.assertEqual(\n+            aggregate,\n+            {\"sum_avg_publisher_pages\": 1100.0, \"books_count\": 2},\n+        )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/17084"}