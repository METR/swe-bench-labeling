{"instance_id": "django__django-16493", "score": "C", "diff": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7a99b12691..652a1147a4 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -295,8 +295,10 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs[\"upload_to\"] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)\n+        if hasattr(self, \"_storage_callable\"):\n+            kwargs[\"storage\"] = self._storage_callable\n+        elif self.storage is not default_storage:\n+            kwargs[\"storage\"] = self.storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\ndiff --git a/test_comprehensive_filefield.py b/test_comprehensive_filefield.py\nnew file mode 100644\nindex 0000000000..c6d58adad3\n--- /dev/null\n+++ b/test_comprehensive_filefield.py\n@@ -0,0 +1,89 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django.core.files.storage import FileSystemStorage, default_storage\n+from django.db import models\n+\n+# Different storage instances\n+other_storage = FileSystemStorage(location='/media/other')\n+\n+# Callable that returns default_storage\n+def get_default_storage():\n+    return default_storage\n+\n+# Callable that returns other_storage\n+def get_other_storage():\n+    return other_storage\n+\n+# Test all scenarios\n+class TestModel(models.Model):\n+    # Field with default storage (implicit)\n+    field1 = models.FileField()\n+    \n+    # Field with default storage (explicit)\n+    field2 = models.FileField(storage=default_storage)\n+    \n+    # Field with other storage\n+    field3 = models.FileField(storage=other_storage)\n+    \n+    # Field with callable returning default_storage\n+    field4 = models.FileField(storage=get_default_storage)\n+    \n+    # Field with callable returning other storage\n+    field5 = models.FileField(storage=get_other_storage)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Test deconstruction for all fields\n+for i in range(1, 6):\n+    field = TestModel._meta.get_field(f'field{i}')\n+    name, path, args, kwargs = field.deconstruct()\n+    \n+    print(f\"\\nField {i} ({field.name}):\")\n+    print(f\"  Has 'storage' in kwargs: {'storage' in kwargs}\")\n+    if 'storage' in kwargs:\n+        storage_value = kwargs['storage']\n+        print(f\"  Storage value: {storage_value}\")\n+        print(f\"  Is callable: {callable(storage_value)}\")\n+        if callable(storage_value):\n+            print(f\"  Callable returns: {storage_value()}\")\n+\n+# Additional test: Ensure ImageField also works correctly\n+print(\"\\n--- Testing ImageField ---\")\n+\n+class TestImageModel(models.Model):\n+    # ImageField with callable returning default_storage\n+    image1 = models.ImageField(storage=get_default_storage)\n+    \n+    # ImageField with callable returning other storage\n+    image2 = models.ImageField(storage=get_other_storage)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+for i in range(1, 3):\n+    field = TestImageModel._meta.get_field(f'image{i}')\n+    name, path, args, kwargs = field.deconstruct()\n+    \n+    print(f\"\\nImageField {i} ({field.name}):\")\n+    print(f\"  Has 'storage' in kwargs: {'storage' in kwargs}\")\n+    if 'storage' in kwargs:\n+        storage_value = kwargs['storage']\n+        print(f\"  Storage value: {storage_value}\")\n+        print(f\"  Is callable: {callable(storage_value)}\")\ndiff --git a/test_filefield_deconstruct.py b/test_filefield_deconstruct.py\nnew file mode 100644\nindex 0000000000..6dba9e099b\n--- /dev/null\n+++ b/test_filefield_deconstruct.py\n@@ -0,0 +1,58 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django.core.files.storage import FileSystemStorage, default_storage\n+from django.db import models\n+import random\n+\n+other_storage = FileSystemStorage(location='/media/other')\n+\n+def get_storage():\n+    return default_storage\n+\n+def get_storage_random():\n+    return random.choice([default_storage, other_storage])\n+\n+class MyModel(models.Model):\n+    my_file = models.FileField(storage=get_storage)\n+    my_file_random = models.FileField(storage=get_storage_random)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+# Test the deconstruct method\n+field = MyModel._meta.get_field('my_file')\n+name, path, args, kwargs = field.deconstruct()\n+\n+print(\"Field with callable returning default_storage:\")\n+print(f\"  name: {name}\")\n+print(f\"  path: {path}\")\n+print(f\"  args: {args}\")\n+print(f\"  kwargs: {kwargs}\")\n+print(f\"  Has 'storage' in kwargs: {'storage' in kwargs}\")\n+\n+# Test with random storage\n+field_random = MyModel._meta.get_field('my_file_random')\n+name, path, args, kwargs = field_random.deconstruct()\n+\n+print(\"\\nField with callable returning random storage:\")\n+print(f\"  name: {name}\")\n+print(f\"  path: {path}\")\n+print(f\"  args: {args}\")\n+print(f\"  kwargs: {kwargs}\")\n+print(f\"  Has 'storage' in kwargs: {'storage' in kwargs}\")\ndiff --git a/test_makemigrations_scenario.py b/test_makemigrations_scenario.py\nnew file mode 100644\nindex 0000000000..99b0d8e0fd\n--- /dev/null\n+++ b/test_makemigrations_scenario.py\n@@ -0,0 +1,133 @@\n+import os\n+import sys\n+import tempfile\n+import shutil\n+\n+# Setup Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+# Create test settings module\n+with open('test_settings.py', 'w') as f:\n+    f.write(\"\"\"\n+DEBUG = True\n+SECRET_KEY = 'test-key'\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'testapp',\n+]\n+ROOT_URLCONF = 'testapp.urls'\n+USE_TZ = True\n+\"\"\")\n+\n+# Create test app\n+os.makedirs('testapp/migrations', exist_ok=True)\n+with open('testapp/__init__.py', 'w') as f:\n+    f.write('')\n+\n+with open('testapp/apps.py', 'w') as f:\n+    f.write(\"\"\"\n+from django.apps import AppConfig\n+\n+class TestappConfig(AppConfig):\n+    default_auto_field = 'django.db.models.BigAutoField'\n+    name = 'testapp'\n+\"\"\")\n+\n+with open('testapp/models.py', 'w') as f:\n+    f.write(\"\"\"\n+from django.core.files.storage import FileSystemStorage, default_storage\n+from django.db import models\n+import random\n+\n+other_storage = FileSystemStorage(location='/media/other')\n+\n+def get_storage():\n+    # Always returns default_storage\n+    return default_storage\n+\n+class MyModel(models.Model):\n+    my_file = models.FileField(storage=get_storage)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\"\"\")\n+\n+with open('testapp/urls.py', 'w') as f:\n+    f.write(\"urlpatterns = []\")\n+\n+with open('testapp/migrations/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Now run Django management commands\n+import django\n+django.setup()\n+\n+from django.core.management import call_command\n+from django.db import connection\n+\n+# Make first migration\n+print(\"Creating initial migration...\")\n+call_command('makemigrations', 'testapp', verbosity=0)\n+\n+# Check the migration file\n+import glob\n+migration_files = glob.glob('testapp/migrations/0001_*.py')\n+if migration_files:\n+    with open(migration_files[0], 'r') as f:\n+        content = f.read()\n+        print(\"\\nFirst migration content (relevant part):\")\n+        # Find the field definition\n+        lines = content.split('\\n')\n+        for i, line in enumerate(lines):\n+            if 'my_file' in line:\n+                # Print a few lines around it\n+                start = max(0, i - 2)\n+                end = min(len(lines), i + 3)\n+                for j in range(start, end):\n+                    print(f\"{j+1}: {lines[j]}\")\n+                break\n+\n+# Run makemigrations again to see if it detects changes\n+print(\"\\n\\nRunning makemigrations again to check for spurious changes...\")\n+output = []\n+\n+class OutputCapture:\n+    def __init__(self):\n+        self.lines = []\n+    \n+    def write(self, text):\n+        self.lines.append(text)\n+    \n+    def flush(self):\n+        pass\n+\n+capture = OutputCapture()\n+old_stdout = sys.stdout\n+sys.stdout = capture\n+\n+try:\n+    call_command('makemigrations', 'testapp', dry_run=True, verbosity=2)\n+except SystemExit:\n+    pass\n+\n+sys.stdout = old_stdout\n+\n+output_text = ''.join(capture.lines)\n+print(\"Output from second makemigrations:\")\n+print(output_text)\n+\n+if \"No changes detected\" in output_text:\n+    print(\"\\n\u2713 SUCCESS: No spurious migrations detected!\")\n+else:\n+    print(\"\\n\u2717 FAILURE: Spurious migrations would be created!\")\n+\n+# Cleanup\n+shutil.rmtree('testapp', ignore_errors=True)\n+os.remove('test_settings.py')\ndiff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 7a60784349..57a48d05cb 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -27,6 +27,11 @@ def callable_storage():\n     return temp_storage\n \n \n+def callable_default_storage():\n+    from django.core.files.storage import default_storage\n+    return default_storage\n+\n+\n class CallableStorage(FileSystemStorage):\n     def __call__(self):\n         # no-op implementation.\n@@ -72,3 +77,6 @@ class Storage(models.Model):\n     extended_length = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", max_length=300\n     )\n+    storage_callable_default = models.FileField(\n+        storage=callable_default_storage, upload_to=\"storage_callable_default\"\n+    )\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 4616aad10a..4dd7fcf321 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -41,7 +41,13 @@ from django.utils import timezone\n from django.utils._os import symlinks_supported\n from django.utils.deprecation import RemovedInDjango51Warning\n \n-from .models import Storage, callable_storage, temp_storage, temp_storage_location\n+from .models import (\n+    Storage,\n+    callable_default_storage,\n+    callable_storage,\n+    temp_storage,\n+    temp_storage_location,\n+)\n \n FILE_SUFFIX_REGEX = \"[A-Za-z0-9]{7}\"\n \n@@ -1017,6 +1023,17 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         *_, kwargs = obj._meta.get_field(\"storage_callable\").deconstruct()\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n+    \n+    def test_deconstruction_with_callable_default_storage(self):\n+        \"\"\"\n+        Deconstructing a field with a callable that returns default_storage\n+        includes the callable, not omits it.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIn(\"storage\", kwargs)\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n \n \n # Tests for a race condition on file saving (#4948).\n", "gold_standard_diff": "From ef85b6bf0bc5a8b194f0724cf5bbedbcee402b96 Mon Sep 17 00:00:00 2001\nFrom: Matt Westcott <matt@west.co.tt>\nDate: Fri, 20 Jan 2023 18:10:29 +0000\nSubject: [PATCH] Fixed #34192 -- Preserved callable storage when it returns\n default_storage.\n\n---\n django/db/models/fields/files.py |  5 +++--\n tests/file_storage/models.py     |  9 ++++++++-\n tests/file_storage/tests.py      | 17 ++++++++++++++++-\n 3 files changed, 27 insertions(+), 4 deletions(-)\n\ndiff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7a99b1269157..04b3eb34730d 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -295,8 +295,9 @@ def deconstruct(self):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs[\"upload_to\"] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)\n+        storage = getattr(self, \"_storage_callable\", self.storage)\n+        if storage is not default_storage:\n+            kwargs[\"storage\"] = storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\ndiff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 7a6078434948..873c3e176abb 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -9,7 +9,7 @@\n import tempfile\n from pathlib import Path\n \n-from django.core.files.storage import FileSystemStorage\n+from django.core.files.storage import FileSystemStorage, default_storage\n from django.db import models\n \n \n@@ -27,6 +27,10 @@ def callable_storage():\n     return temp_storage\n \n \n+def callable_default_storage():\n+    return default_storage\n+\n+\n class CallableStorage(FileSystemStorage):\n     def __call__(self):\n         # no-op implementation.\n@@ -62,6 +66,9 @@ def pathlib_upload_to(self, filename):\n     storage_callable_class = models.FileField(\n         storage=CallableStorage, upload_to=\"storage_callable_class\"\n     )\n+    storage_callable_default = models.FileField(\n+        storage=callable_default_storage, upload_to=\"storage_callable_default\"\n+    )\n     default = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", default=\"tests/default.txt\"\n     )\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 4616aad10aa1..7fb57fbce40f 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -41,7 +41,13 @@\n from django.utils._os import symlinks_supported\n from django.utils.deprecation import RemovedInDjango51Warning\n \n-from .models import Storage, callable_storage, temp_storage, temp_storage_location\n+from .models import (\n+    Storage,\n+    callable_default_storage,\n+    callable_storage,\n+    temp_storage,\n+    temp_storage_location,\n+)\n \n FILE_SUFFIX_REGEX = \"[A-Za-z0-9]{7}\"\n \n@@ -1018,6 +1024,15 @@ def test_deconstruction(self):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16493"}