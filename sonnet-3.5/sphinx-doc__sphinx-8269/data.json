{"instance_id": "sphinx-doc__sphinx-8269", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex a404f1fa5..2c6848797 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc7c..70b774b7c 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -62,7 +62,13 @@ class AnchorCheckParser(HTMLParser):\n def check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n     \"\"\"Reads HTML data from a response object `response` searching for `anchor`.\n     Returns True if anchor was found, False otherwise.\n+    Raises HTTPError if the response has a non-2xx status code.\n     \"\"\"\n+    response.raise_for_status()  # This will raise an HTTPError for non-2xx status codes\n+\n+    if not anchor:\n+        return True  # No anchor to check, so consider it found\n+\n     parser = AnchorCheckParser(anchor)\n     # Read file in chunks. If we find a matching anchor, we break\n     # the loop early in hopes not to have to download the whole thing.\n@@ -166,10 +172,11 @@ class CheckExternalLinksBuilder(Builder):\n                     # Read the whole document and see if #anchor exists\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+                        return 'broken', __(\"Anchor '%s' not found\") % anchor, response.status_code\n                 else:\n                     try:\n                         # try a HEAD request first, which should be easier on\n@@ -191,7 +198,7 @@ class CheckExternalLinksBuilder(Builder):\n                     # We'll take \"Service Unavailable\" as ignored.\n                     return 'ignored', str(err), 0\n                 else:\n-                    return 'broken', str(err), 0\n+                    return 'broken', str(err), err.response.status_code\n             except Exception as err:\n                 if is_ssl_error(err):\n                     return 'ignored', str(err), 0\ndiff --git a/tox.ini b/tox.ini\nindex a61299979..e2baccc07 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = --color yes\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From 5ea8ee133dfac71e58d1d6fb8f6b38a7ba249a7c Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Fran=C3=A7ois=20Freitag?= <mail@franek.fr>\nDate: Sat, 3 Oct 2020 12:59:47 +0200\nSubject: [PATCH] Fix #8268: make linkcheck report HTTP errors\n\n---\n CHANGES                                       |  1 +\n sphinx/builders/linkcheck.py                  |  1 +\n .../roots/test-linkcheck-localserver/conf.py  |  2 ++\n .../test-linkcheck-localserver/index.rst      |  1 +\n tests/test_build_linkcheck.py                 | 36 +++++++++++++++++++\n 5 files changed, 41 insertions(+)\n create mode 100644 tests/roots/test-linkcheck-localserver/conf.py\n create mode 100644 tests/roots/test-linkcheck-localserver/index.rst\n\ndiff --git a/CHANGES b/CHANGES\nindex 22876d43b1c..7013a6d01d4 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -41,6 +41,7 @@ Bugs fixed\n * #8093: The highlight warning has wrong location in some builders (LaTeX,\n   singlehtml and so on)\n * #8239: Failed to refer a token in productionlist if it is indented\n+* #8268: linkcheck: Report HTTP errors when ``linkcheck_anchors`` is ``True``\n \n Testing\n --------\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc7ca7..1083e82ec23 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -166,6 +166,7 @@ def check_uri() -> Tuple[str, str, int]:\n                     # Read the whole document and see if #anchor exists\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\ndiff --git a/tests/roots/test-linkcheck-localserver/conf.py b/tests/roots/test-linkcheck-localserver/conf.py\nnew file mode 100644\nindex 00000000000..2ba1f85e8c3\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver/conf.py\n@@ -0,0 +1,2 @@\n+exclude_patterns = ['_build']\n+linkcheck_anchors = True\ndiff --git a/tests/roots/test-linkcheck-localserver/index.rst b/tests/roots/test-linkcheck-localserver/index.rst\nnew file mode 100644\nindex 00000000000..807fe964b13\n--- /dev/null\n+++ b/tests/roots/test-linkcheck-localserver/index.rst\n@@ -0,0 +1 @@\n+`local server <http://localhost:7777/#anchor>`_\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7d85f10c53a..a7858766816 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,8 +8,10 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import http.server\n import json\n import re\n+import threading\n from unittest import mock\n import pytest\n \n@@ -106,6 +108,21 @@ def test_anchors_ignored(app, status, warning):\n     # expect all ok when excluding #top\n     assert not content\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_raises_for_invalid_status(app, status, warning):\n+    server_thread = HttpServerThread(InternalServerErrorHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"500 Server Error: Internal Server Error \"\n+        \"for url: http://localhost:7777/\\n\"\n+    )\n+\n \n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n@@ -160,3 +177,22 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+\n+class InternalServerErrorHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(500, \"Internal Server Error\")\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8269"}