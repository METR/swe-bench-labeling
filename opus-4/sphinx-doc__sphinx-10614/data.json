{"instance_id": "sphinx-doc__sphinx-10614", "score": "I", "diff": "diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 6e3985512..61323d1d7 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -412,16 +412,20 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n-            if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = \"../\" + child.get('refuri')\n-            else:\n-                urls[child['reftitle']] = child.get('refuri')\n+            # For SVG format, fix_svg_relative_paths in graphviz.py will handle\n+            # making the paths relative to the image location\n+            urls[child['reftitle']] = child.get('refuri')\n         elif child.get('refid') is not None:\n+            # For fragment-only links, always use the current filename\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n+                urls[child['reftitle']] = current_filename + '#' + child.get('refid')\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n \n+    # Debug: print URLs to understand what's being passed\n+    # print(f\"DEBUG: current_docname={self.builder.current_docname}\")\n+    # print(f\"DEBUG: urls={urls}\")\n+    \n     dotcode = graph.generate_dot(name, urls, env=self.builder.env)\n     render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance',\n                     alt='Inheritance diagram of ' + node['content'])\ndiff --git a/test_inheritance_svg_bug.py b/test_inheritance_svg_bug.py\nnew file mode 100644\nindex 000000000..ae9b28674\n--- /dev/null\n+++ b/test_inheritance_svg_bug.py\n@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+\"\"\"Test case to reproduce the inheritance diagram SVG bug.\"\"\"\n+\n+import os\n+import shutil\n+import tempfile\n+import subprocess\n+from pathlib import Path\n+\n+# Create a temporary directory for our test\n+test_dir = tempfile.mkdtemp(prefix=\"sphinx_svg_test_\")\n+print(f\"Test directory: {test_dir}\")\n+\n+# Create the source directory structure\n+docs_source = Path(test_dir) / \"docs_source\"\n+docs_source.mkdir()\n+\n+# Create conf.py\n+conf_py = docs_source / \"conf.py\"\n+conf_py.write_text(f'''\n+import sys\n+sys.path.insert(0, '{docs_source}')\n+\n+project = 'SVG Bug Test'\n+extensions = [\n+    'sphinx.ext.autodoc',\n+    'sphinx.ext.inheritance_diagram',\n+]\n+graphviz_output_format = 'svg'\n+''')\n+\n+# Create the package directory\n+my_package = docs_source / \"my_package\"\n+my_package.mkdir()\n+\n+# Create __init__.py for the package\n+init_py = my_package / \"__init__.py\"\n+init_py.write_text('''\n+\"\"\"My package.\"\"\"\n+\n+class MyClass1:\n+    \"\"\"First class.\"\"\"\n+    pass\n+\n+class MyClass2(MyClass1):\n+    \"\"\"Second class that inherits from MyClass1.\"\"\"\n+    pass\n+''')\n+\n+# Create index.rst in root\n+index_rst = docs_source / \"index.rst\"\n+index_rst.write_text('''\n+Test Project\n+============\n+\n+.. toctree::\n+   :maxdepth: 2\n+\n+   my_package/index\n+\n+Root Level Inheritance Diagram\n+------------------------------\n+\n+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2\n+   :parts: 1\n+\n+Links in the above diagram should work correctly.\n+''')\n+\n+# Create my_package/index.rst\n+package_index_rst = my_package / \"index.rst\"\n+package_index_rst.write_text('''\n+My Package\n+==========\n+\n+Package Level Inheritance Diagram\n+---------------------------------\n+\n+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2\n+   :parts: 1\n+\n+Links in the above diagram should NOT work correctly (404 error).\n+\n+API Documentation\n+-----------------\n+\n+.. autoclass:: my_package.MyClass1\n+   :members:\n+\n+.. autoclass:: my_package.MyClass2\n+   :members:\n+''')\n+\n+# Create my_package/my_class_1.rst\n+class1_rst = my_package / \"my_class_1.rst\"\n+class1_rst.write_text('''\n+MyClass1\n+========\n+\n+.. autoclass:: my_package.MyClass1\n+   :members:\n+''')\n+\n+# Create my_package/my_class_2.rst  \n+class2_rst = my_package / \"my_class_2.rst\"\n+class2_rst.write_text('''\n+MyClass2\n+========\n+\n+.. autoclass:: my_package.MyClass2\n+   :members:\n+''')\n+\n+# Build the documentation\n+docs_build = Path(test_dir) / \"docs_build\"\n+cmd = [\"sphinx-build\", \"-b\", \"html\", str(docs_source), str(docs_build)]\n+print(f\"Running: {' '.join(cmd)}\")\n+result = subprocess.run(cmd, capture_output=True, text=True)\n+print(\"STDOUT:\", result.stdout)\n+print(\"STDERR:\", result.stderr)\n+\n+# Check if SVG files were created\n+svg_files = list(docs_build.glob(\"_images/*.svg\"))\n+print(f\"\\nSVG files created: {len(svg_files)}\")\n+for svg_file in svg_files:\n+    print(f\"  - {svg_file}\")\n+    \n+    # Read and print the SVG content to check the links\n+    svg_content = svg_file.read_text()\n+    import re\n+    href_pattern = r'xlink:href=\"([^\"]+)\"'\n+    hrefs = re.findall(href_pattern, svg_content)\n+    if hrefs:\n+        print(f\"    Links found in {svg_file.name}:\")\n+        for href in hrefs:\n+            print(f\"      - {href}\")\n+\n+print(f\"\\nTest files are in: {test_dir}\")\n+print(\"To view the issue:\")\n+print(f\"1. Open {docs_build}/index.html - links in diagram should work\")\n+print(f\"2. Open {docs_build}/my_package/index.html - links in diagram should be broken\")\ndiff --git a/test_urls.py b/test_urls.py\nnew file mode 100644\nindex 000000000..84aa09ccf\n--- /dev/null\n+++ b/test_urls.py\n@@ -0,0 +1,30 @@\n+#!/usr/bin/env python3\n+\"\"\"Test to understand URL generation.\"\"\"\n+\n+import os\n+from pathlib import Path\n+\n+# Problem: The actual URL in the SVG shows \"../docs_build/my_class_1.html\"\n+# This means the original URL was \"docs_build/my_class_1.html\"\n+\n+# Simulate the scenario\n+outdir = \"/tmp/sphinx_svg_test_ehqfpfyx/docs_build\"\n+imgpath = \"_images\"\n+\n+# What if the URL was already prefixed with \"docs_build/\"?\n+url = \"docs_build/my_class_1.html#my_package.MyClass1\"\n+\n+# What fix_svg_relative_paths does:\n+old_path = os.path.join(outdir, url)\n+print(f\"If url='{url}':\")\n+print(f\"  old_path: {old_path}\")\n+\n+new_path = os.path.relpath(\n+    old_path,\n+    start=os.path.join(outdir, imgpath),\n+)\n+print(f\"  new_path: {new_path}\")\n+print(\"  This would result in: ../docs_build/my_class_1.html\")\n+\n+# More likely scenario - let's check what refuri would contain\n+# This suggests that refuri from pending_xref has the full path including output directory\ndiff --git a/tox.ini b/tox.ini\nindex a3dc56211..c76147de3 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -24,7 +24,7 @@ setenv =\n     PYTHONWARNINGS = error\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:docs]\n basepython = python3\n", "gold_standard_diff": "From 394183811fcce8f96b65574a6c60907cee685afb Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Sat, 18 Jun 2022 00:17:07 -0400\nSubject: [PATCH 01/10] Fixed path bug with links in SVG inheritance diagrams\n\n---\n sphinx/ext/inheritance_diagram.py | 14 ++++++++++++--\n 1 file changed, 12 insertions(+), 2 deletions(-)\n\ndiff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 6e39855123d..0ac59815fd9 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -33,6 +33,7 @@ class E(B): pass\n import builtins\n import hashlib\n import inspect\n+import pathlib\n import re\n from collections.abc import Iterable\n from importlib import import_module\n@@ -54,6 +55,7 @@ class E(B): pass\n     render_dot_texinfo,\n )\n from sphinx.util.docutils import SphinxDirective\n+from sphinx.util.osutil import canon_path, relpath\n from sphinx.util.typing import OptionSpec\n from sphinx.writers.html import HTML5Translator\n from sphinx.writers.latex import LaTeXTranslator\n@@ -408,17 +410,25 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     # Create a mapping from fully-qualified class names to URLs.\n     graphviz_output_format = self.builder.env.config.graphviz_output_format.upper()\n     current_filename = self.builder.current_docname + self.builder.out_suffix\n+    current_dir = pathlib.PurePath(current_filename).parent\n     urls = {}\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = \"../\" + child.get('refuri')\n+                # URI relative to src dir (typically equivalent to stripping all leading ../)\n+                uri_rel_to_srcdir = (current_dir / child.get('refuri')).as_posix()\n+                # URI relative to image dir (typically equivalent to prepending ../)\n+                uri_rel_to_imagedir = relpath(uri_rel_to_srcdir, self.builder.imagedir)\n+                urls[child['reftitle']] = canon_path(uri_rel_to_imagedir)\n             else:\n                 urls[child['reftitle']] = child.get('refuri')\n         elif child.get('refid') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n+                # URI relative to image dir (typically equivalent to prepending ../)\n+                uri_rel_to_imagedir = relpath(current_filename, self.builder.imagedir)\n+                urls[child['reftitle']] = canon_path(uri_rel_to_imagedir) +\\\n+                                          '#' + child.get('refid')\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n \n\nFrom 81808b7ae611f0831985d31cf234a4011a356fe0 Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Thu, 23 Jun 2022 11:13:03 -0400\nSubject: [PATCH 02/10] Fixed intersphinx links in inheritance diagrams\n\n---\n sphinx/ext/inheritance_diagram.py | 15 +++++++++++----\n 1 file changed, 11 insertions(+), 4 deletions(-)\n\ndiff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 0ac59815fd9..2469129ee6c 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -415,14 +415,21 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n-            if graphviz_output_format == 'SVG':\n+            # Construct the name from the URI if the reference is external via intersphinx\n+            if not child.get('internal', True):\n+                refname = child['refuri'].rsplit('#', 1)[-1]\n+            else:\n+                refname = child['reftitle']\n+\n+            # For SVG output, relative URIs need to be re-pathed to where the SVG file will be\n+            if graphviz_output_format == 'SVG' and '://' not in child['refuri']:\n                 # URI relative to src dir (typically equivalent to stripping all leading ../)\n-                uri_rel_to_srcdir = (current_dir / child.get('refuri')).as_posix()\n+                uri_rel_to_srcdir = (current_dir / child['refuri']).as_posix()\n                 # URI relative to image dir (typically equivalent to prepending ../)\n                 uri_rel_to_imagedir = relpath(uri_rel_to_srcdir, self.builder.imagedir)\n-                urls[child['reftitle']] = canon_path(uri_rel_to_imagedir)\n+                urls[refname] = canon_path(uri_rel_to_imagedir)\n             else:\n-                urls[child['reftitle']] = child.get('refuri')\n+                urls[refname] = child['refuri']\n         elif child.get('refid') is not None:\n             if graphviz_output_format == 'SVG':\n                 # URI relative to image dir (typically equivalent to prepending ../)\n\nFrom e0931db7592318025d0f87f08b31320270232dc4 Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Wed, 28 Sep 2022 00:13:26 -0400\nSubject: [PATCH 03/10] Addressed comments and added changelog entry\n\n---\n CHANGES                           |  3 +++\n sphinx/ext/inheritance_diagram.py | 16 ++++++++--------\n 2 files changed, 11 insertions(+), 8 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex e054883881d..32bb71c617d 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -45,6 +45,9 @@ Bugs fixed\n * #11529: Line Block in LaTeX builder outputs spurious empty token.\n   Patch by Adrian Vollmer.\n * #11196: autosummary: Summary line extraction failed with \"e.g.\"\n+* #10614: Fixed a number of bugs in inheritance diagrams that resulted in\n+  missing or broken links.\n+  Patch by Albert Shih.\n \n Testing\n -------\ndiff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 2469129ee6c..8a5ebf3061e 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -33,7 +33,7 @@ class E(B): pass\n import builtins\n import hashlib\n import inspect\n-import pathlib\n+import posixpath\n import re\n from collections.abc import Iterable\n from importlib import import_module\n@@ -410,21 +410,21 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     # Create a mapping from fully-qualified class names to URLs.\n     graphviz_output_format = self.builder.env.config.graphviz_output_format.upper()\n     current_filename = self.builder.current_docname + self.builder.out_suffix\n-    current_dir = pathlib.PurePath(current_filename).parent\n+    current_dir = posixpath.dirname(current_filename)\n     urls = {}\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n             # Construct the name from the URI if the reference is external via intersphinx\n-            if not child.get('internal', True):\n-                refname = child['refuri'].rsplit('#', 1)[-1]\n-            else:\n+            if child.get('internal', True):\n                 refname = child['reftitle']\n+            else:\n+                refname = child['refuri'].rsplit('#', 1)[-1]\n \n             # For SVG output, relative URIs need to be re-pathed to where the SVG file will be\n             if graphviz_output_format == 'SVG' and '://' not in child['refuri']:\n                 # URI relative to src dir (typically equivalent to stripping all leading ../)\n-                uri_rel_to_srcdir = (current_dir / child['refuri']).as_posix()\n+                uri_rel_to_srcdir = posixpath.join(current_dir, child['refuri'])\n                 # URI relative to image dir (typically equivalent to prepending ../)\n                 uri_rel_to_imagedir = relpath(uri_rel_to_srcdir, self.builder.imagedir)\n                 urls[refname] = canon_path(uri_rel_to_imagedir)\n@@ -434,8 +434,8 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n             if graphviz_output_format == 'SVG':\n                 # URI relative to image dir (typically equivalent to prepending ../)\n                 uri_rel_to_imagedir = relpath(current_filename, self.builder.imagedir)\n-                urls[child['reftitle']] = canon_path(uri_rel_to_imagedir) +\\\n-                                          '#' + child.get('refid')\n+                urls[child['reftitle']] = (canon_path(uri_rel_to_imagedir) +\n+                                           '#' + child.get('refid'))\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n \n\nFrom 39c352d537c1ad879cce051e978d86eac8d86a1b Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Fri, 24 Jun 2022 11:06:42 -0400\nSubject: [PATCH 04/10] Test for valid links in PNG and SVG inheritance\n diagrams in multiple situations\n\n---\n .../test-ext-inheritance_diagram/conf.py      |  2 +-\n .../test-ext-inheritance_diagram/index.rst    | 13 ++++\n .../subdir/index.rst                          |  5 ++\n .../subdir/other.py                           |  5 ++\n .../test-ext-inheritance_diagram/test.py      |  4 +\n tests/test_ext_inheritance_diagram.py         | 75 ++++++++++++++++++-\n 6 files changed, 101 insertions(+), 3 deletions(-)\n create mode 100644 tests/roots/test-ext-inheritance_diagram/subdir/index.rst\n create mode 100644 tests/roots/test-ext-inheritance_diagram/subdir/other.py\n\ndiff --git a/tests/roots/test-ext-inheritance_diagram/conf.py b/tests/roots/test-ext-inheritance_diagram/conf.py\nindex 9953494a59f..d3778d5cfb0 100644\n--- a/tests/roots/test-ext-inheritance_diagram/conf.py\n+++ b/tests/roots/test-ext-inheritance_diagram/conf.py\n@@ -3,4 +3,4 @@\n \n sys.path.insert(0, os.path.abspath('.'))\n \n-extensions = ['sphinx.ext.inheritance_diagram']\n+extensions = ['sphinx.ext.inheritance_diagram', 'sphinx.ext.intersphinx']\ndiff --git a/tests/roots/test-ext-inheritance_diagram/index.rst b/tests/roots/test-ext-inheritance_diagram/index.rst\nindex 8e25eee5b65..8c6344cbe31 100644\n--- a/tests/roots/test-ext-inheritance_diagram/index.rst\n+++ b/tests/roots/test-ext-inheritance_diagram/index.rst\n@@ -8,3 +8,16 @@ test-ext-inheritance_diagram\n    :caption: Test Foo!\n \n .. inheritance-diagram:: test.Baz\n+\n+.. py:class:: test.Bar\n+\n+.. py:class:: test.Baz\n+\n+.. py:class:: test.Qux\n+\n+.. inheritance-diagram:: subdir.other.Bob\n+\n+.. py:class:: test.Alice\n+\n+.. toctree::\n+   subdir/index\ndiff --git a/tests/roots/test-ext-inheritance_diagram/subdir/index.rst b/tests/roots/test-ext-inheritance_diagram/subdir/index.rst\nnew file mode 100644\nindex 00000000000..50be30f38e6\n--- /dev/null\n+++ b/tests/roots/test-ext-inheritance_diagram/subdir/index.rst\n@@ -0,0 +1,5 @@\n+=========================================\n+test-ext-inheritance_diagram subdirectory\n+=========================================\n+\n+.. inheritance-diagram:: test.Qux\ndiff --git a/tests/roots/test-ext-inheritance_diagram/subdir/other.py b/tests/roots/test-ext-inheritance_diagram/subdir/other.py\nnew file mode 100644\nindex 00000000000..a4ce8a75260\n--- /dev/null\n+++ b/tests/roots/test-ext-inheritance_diagram/subdir/other.py\n@@ -0,0 +1,5 @@\n+from test import Alice\n+\n+\n+class Bob(Alice):\n+    pass\ndiff --git a/tests/roots/test-ext-inheritance_diagram/test.py b/tests/roots/test-ext-inheritance_diagram/test.py\nindex 4f73c4707d5..8101b467311 100644\n--- a/tests/roots/test-ext-inheritance_diagram/test.py\n+++ b/tests/roots/test-ext-inheritance_diagram/test.py\n@@ -12,3 +12,7 @@ class Baz(Bar):\n \n class Qux(Foo):\n     pass\n+\n+\n+class Alice(object):\n+    pass\ndiff --git a/tests/test_ext_inheritance_diagram.py b/tests/test_ext_inheritance_diagram.py\nindex 16581b07541..97142d4bb2c 100644\n--- a/tests/test_ext_inheritance_diagram.py\n+++ b/tests/test_ext_inheritance_diagram.py\n@@ -11,6 +11,7 @@\n     InheritanceException,\n     import_classes,\n )\n+from sphinx.ext.intersphinx import load_mappings, normalize_intersphinx_mapping\n \n \n @pytest.mark.sphinx(buildername=\"html\", testroot=\"inheritance\")\n@@ -135,12 +136,31 @@ def new_run(self):\n         ]\n \n \n+# An external inventory to test intersphinx links in inheritance diagrams\n+subdir_inventory = b'''\\\n+# Sphinx inventory version 1\n+# Project: subdir\n+# Version: 1.0\n+subdir.other.Bob class foo.html\n+'''\n+\n+\n @pytest.mark.sphinx('html', testroot='ext-inheritance_diagram')\n @pytest.mark.usefixtures('if_graphviz_found')\n-def test_inheritance_diagram_png_html(app, status, warning):\n+def test_inheritance_diagram_png_html(tempdir, app, status, warning):\n+    inv_file = tempdir / 'inventory'\n+    inv_file.write_bytes(subdir_inventory)\n+    app.config.intersphinx_mapping = {\n+        'https://example.org': inv_file,\n+    }\n+    app.config.intersphinx_cache_limit = 0\n+    normalize_intersphinx_mapping(app, app.config)\n+    load_mappings(app)\n+\n     app.builder.build_all()\n \n     content = (app.outdir / 'index.html').read_text(encoding='utf8')\n+    base_maps = re.findall('<map .+\\n.+\\n</map>', content)\n \n     pattern = ('<figure class=\"align-default\" id=\"id1\">\\n'\n                '<div class=\"graphviz\">'\n@@ -150,14 +170,44 @@ def test_inheritance_diagram_png_html(app, status, warning):\n                'title=\"Permalink to this image\">\\xb6</a></p>\\n</figcaption>\\n</figure>\\n')\n     assert re.search(pattern, content, re.M)\n \n+    subdir_content = (app.outdir / 'subdir/index.html').read_text(encoding='utf8')\n+    subdir_maps = re.findall('<map .+\\n.+\\n</map>', subdir_content)\n+    subdir_maps = [re.sub('href=\"(\\\\S+)\"', 'href=\"subdir/\\\\g<1>\"', s) for s in subdir_maps]\n+\n+    # Go through the clickmap for every PNG inheritance diagram\n+    for diagram_content in base_maps + subdir_maps:\n+        # Verify that an intersphinx link was created via the external inventory\n+        if 'subdir.' in diagram_content:\n+            assert \"https://example.org\" in diagram_content\n+\n+        # Extract every link in the inheritance diagram\n+        for href in re.findall('href=\"(\\\\S+?)\"', diagram_content):\n+            if '://' in href:\n+                # Verify that absolute URLs are not prefixed with ../\n+                assert href.startswith(\"https://example.org/\")\n+            else:\n+                # Verify that relative URLs point to existing documents\n+                reluri = href.rsplit('#', 1)[0]  # strip the anchor at the end\n+                assert (app.outdir / reluri).exists()\n+\n \n @pytest.mark.sphinx('html', testroot='ext-inheritance_diagram',\n                     confoverrides={'graphviz_output_format': 'svg'})\n @pytest.mark.usefixtures('if_graphviz_found')\n-def test_inheritance_diagram_svg_html(app, status, warning):\n+def test_inheritance_diagram_svg_html(tempdir, app, status, warning):\n+    inv_file = tempdir / 'inventory'\n+    inv_file.write_bytes(subdir_inventory)\n+    app.config.intersphinx_mapping = {\n+        \"subdir\": ('https://example.org', inv_file),\n+    }\n+    app.config.intersphinx_cache_limit = 0\n+    normalize_intersphinx_mapping(app, app.config)\n+    load_mappings(app)\n+\n     app.builder.build_all()\n \n     content = (app.outdir / 'index.html').read_text(encoding='utf8')\n+    base_svgs = re.findall('<object data=\"(_images/inheritance-\\\\w+.svg?)\"', content)\n \n     pattern = ('<figure class=\"align-default\" id=\"id1\">\\n'\n                '<div class=\"graphviz\">'\n@@ -170,6 +220,27 @@ def test_inheritance_diagram_svg_html(app, status, warning):\n \n     assert re.search(pattern, content, re.M)\n \n+    subdir_content = (app.outdir / 'subdir/index.html').read_text(encoding='utf8')\n+    subdir_svgs = re.findall('<object data=\"../(_images/inheritance-\\\\w+.svg?)\"', subdir_content)\n+\n+    # Go through every SVG inheritance diagram\n+    for diagram in base_svgs + subdir_svgs:\n+        diagram_content = (app.outdir / diagram).read_text(encoding='utf8')\n+\n+        # Verify that an intersphinx link was created via the external inventory\n+        if 'subdir.' in diagram_content:\n+            assert \"https://example.org\" in diagram_content\n+\n+        # Extract every link in the inheritance diagram\n+        for href in re.findall('href=\"(\\\\S+?)\"', diagram_content):\n+            if '://' in href:\n+                # Verify that absolute URLs are not prefixed with ../\n+                assert href.startswith(\"https://example.org/\")\n+            else:\n+                # Verify that relative URLs point to existing documents\n+                reluri = href.rsplit('#', 1)[0]  # strip the anchor at the end\n+                assert (app.outdir / app.builder.imagedir / reluri).exists()\n+\n \n @pytest.mark.sphinx('latex', testroot='ext-inheritance_diagram')\n @pytest.mark.usefixtures('if_graphviz_found')\n\nFrom 9c101fadc4b94539ac0d659bb4feea10cfe42d75 Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Fri, 30 Sep 2022 23:17:08 -0400\nSubject: [PATCH 05/10] Removed the toctree because it causes a test failure\n\n---\n tests/roots/test-ext-inheritance_diagram/index.rst | 3 ---\n 1 file changed, 3 deletions(-)\n\ndiff --git a/tests/roots/test-ext-inheritance_diagram/index.rst b/tests/roots/test-ext-inheritance_diagram/index.rst\nindex 8c6344cbe31..3d099cbe4c7 100644\n--- a/tests/roots/test-ext-inheritance_diagram/index.rst\n+++ b/tests/roots/test-ext-inheritance_diagram/index.rst\n@@ -18,6 +18,3 @@ test-ext-inheritance_diagram\n .. inheritance-diagram:: subdir.other.Bob\n \n .. py:class:: test.Alice\n-\n-.. toctree::\n-   subdir/index\n\nFrom 587f6b5d3c10ca5951ca600613733016b5b6e6d1 Mon Sep 17 00:00:00 2001\nFrom: Adam Turner <9087854+aa-turner@users.noreply.github.com>\nDate: Fri, 28 Jul 2023 18:06:04 +0100\nSubject: [PATCH 06/10] Update tests\n\n---\n tests/test_ext_inheritance_diagram.py | 24 ++++++++++++++----------\n 1 file changed, 14 insertions(+), 10 deletions(-)\n\ndiff --git a/tests/test_ext_inheritance_diagram.py b/tests/test_ext_inheritance_diagram.py\nindex 97142d4bb2c..57b2ef47b45 100644\n--- a/tests/test_ext_inheritance_diagram.py\n+++ b/tests/test_ext_inheritance_diagram.py\n@@ -3,6 +3,7 @@\n import os\n import re\n import sys\n+import zlib\n \n import pytest\n \n@@ -138,20 +139,22 @@ def new_run(self):\n \n # An external inventory to test intersphinx links in inheritance diagrams\n subdir_inventory = b'''\\\n-# Sphinx inventory version 1\n+# Sphinx inventory version 2\n # Project: subdir\n # Version: 1.0\n-subdir.other.Bob class foo.html\n-'''\n+# The remainder of this file is compressed using zlib.\n+''' + zlib.compress(b'''\\\n+subdir.other.Bob class 1 foo.html -\n+''')\n \n \n @pytest.mark.sphinx('html', testroot='ext-inheritance_diagram')\n @pytest.mark.usefixtures('if_graphviz_found')\n-def test_inheritance_diagram_png_html(tempdir, app, status, warning):\n-    inv_file = tempdir / 'inventory'\n+def test_inheritance_diagram_png_html(tmp_path, app):\n+    inv_file = tmp_path / 'inventory'\n     inv_file.write_bytes(subdir_inventory)\n     app.config.intersphinx_mapping = {\n-        'https://example.org': inv_file,\n+        'https://example.org': str(inv_file),\n     }\n     app.config.intersphinx_cache_limit = 0\n     normalize_intersphinx_mapping(app, app.config)\n@@ -194,11 +197,11 @@ def test_inheritance_diagram_png_html(tempdir, app, status, warning):\n @pytest.mark.sphinx('html', testroot='ext-inheritance_diagram',\n                     confoverrides={'graphviz_output_format': 'svg'})\n @pytest.mark.usefixtures('if_graphviz_found')\n-def test_inheritance_diagram_svg_html(tempdir, app, status, warning):\n-    inv_file = tempdir / 'inventory'\n+def test_inheritance_diagram_svg_html(tmp_path, app):\n+    inv_file = tmp_path / 'inventory'\n     inv_file.write_bytes(subdir_inventory)\n     app.config.intersphinx_mapping = {\n-        \"subdir\": ('https://example.org', inv_file),\n+        \"subdir\": ('https://example.org', str(inv_file)),\n     }\n     app.config.intersphinx_cache_limit = 0\n     normalize_intersphinx_mapping(app, app.config)\n@@ -239,7 +242,8 @@ def test_inheritance_diagram_svg_html(tempdir, app, status, warning):\n             else:\n                 # Verify that relative URLs point to existing documents\n                 reluri = href.rsplit('#', 1)[0]  # strip the anchor at the end\n-                assert (app.outdir / app.builder.imagedir / reluri).exists()\n+                abs_uri = (app.outdir / app.builder.imagedir / reluri).resolve()\n+                assert abs_uri.exists()\n \n \n @pytest.mark.sphinx('latex', testroot='ext-inheritance_diagram')\n\nFrom 94e9adb08f562c88f500eb299d240160b40c5f87 Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Mon, 31 Jul 2023 00:02:18 -0400\nSubject: [PATCH 07/10] Fixed links in inheritance diagrams given changes to\n graphviz writer\n\n---\n sphinx/ext/inheritance_diagram.py | 18 ++----------------\n 1 file changed, 2 insertions(+), 16 deletions(-)\n\ndiff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 8a5ebf3061e..100c2e697e0 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -33,7 +33,6 @@ class E(B): pass\n import builtins\n import hashlib\n import inspect\n-import posixpath\n import re\n from collections.abc import Iterable\n from importlib import import_module\n@@ -55,7 +54,6 @@ class E(B): pass\n     render_dot_texinfo,\n )\n from sphinx.util.docutils import SphinxDirective\n-from sphinx.util.osutil import canon_path, relpath\n from sphinx.util.typing import OptionSpec\n from sphinx.writers.html import HTML5Translator\n from sphinx.writers.latex import LaTeXTranslator\n@@ -410,7 +408,6 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     # Create a mapping from fully-qualified class names to URLs.\n     graphviz_output_format = self.builder.env.config.graphviz_output_format.upper()\n     current_filename = self.builder.current_docname + self.builder.out_suffix\n-    current_dir = posixpath.dirname(current_filename)\n     urls = {}\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n@@ -421,21 +418,10 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n             else:\n                 refname = child['refuri'].rsplit('#', 1)[-1]\n \n-            # For SVG output, relative URIs need to be re-pathed to where the SVG file will be\n-            if graphviz_output_format == 'SVG' and '://' not in child['refuri']:\n-                # URI relative to src dir (typically equivalent to stripping all leading ../)\n-                uri_rel_to_srcdir = posixpath.join(current_dir, child['refuri'])\n-                # URI relative to image dir (typically equivalent to prepending ../)\n-                uri_rel_to_imagedir = relpath(uri_rel_to_srcdir, self.builder.imagedir)\n-                urls[refname] = canon_path(uri_rel_to_imagedir)\n-            else:\n-                urls[refname] = child['refuri']\n+            urls[refname] = child.get('refuri')\n         elif child.get('refid') is not None:\n             if graphviz_output_format == 'SVG':\n-                # URI relative to image dir (typically equivalent to prepending ../)\n-                uri_rel_to_imagedir = relpath(current_filename, self.builder.imagedir)\n-                urls[child['reftitle']] = (canon_path(uri_rel_to_imagedir) +\n-                                           '#' + child.get('refid'))\n+                urls[child['reftitle']] = current_filename + '#' + child.get('refid')\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n \n\nFrom bb89ffbcdaca8a53bef3fac34af2be88dcaf5d99 Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Mon, 31 Jul 2023 10:13:18 -0400\nSubject: [PATCH 08/10] Improved the unit test to cover one more kind of link\n and renamed class names for clarity\n\n---\n tests/roots/test-ext-inheritance_diagram/index.rst        | 8 +++-----\n tests/roots/test-ext-inheritance_diagram/subdir/index.rst | 4 +++-\n tests/roots/test-ext-inheritance_diagram/test.py          | 6 +++---\n tests/test_ext_inheritance_diagram.py                     | 4 ++--\n 4 files changed, 11 insertions(+), 11 deletions(-)\n\ndiff --git a/tests/roots/test-ext-inheritance_diagram/index.rst b/tests/roots/test-ext-inheritance_diagram/index.rst\nindex 3d099cbe4c7..2e9283b7ad9 100644\n--- a/tests/roots/test-ext-inheritance_diagram/index.rst\n+++ b/tests/roots/test-ext-inheritance_diagram/index.rst\n@@ -7,13 +7,11 @@ test-ext-inheritance_diagram\n .. inheritance-diagram:: test.Foo\n    :caption: Test Foo!\n \n-.. inheritance-diagram:: test.Baz\n+.. inheritance-diagram:: test.DocLowerLevel\n \n-.. py:class:: test.Bar\n+.. py:class:: test.DocHere\n \n-.. py:class:: test.Baz\n-\n-.. py:class:: test.Qux\n+.. py:class:: test.DocMainLevel\n \n .. inheritance-diagram:: subdir.other.Bob\n \ndiff --git a/tests/roots/test-ext-inheritance_diagram/subdir/index.rst b/tests/roots/test-ext-inheritance_diagram/subdir/index.rst\nindex 50be30f38e6..bfd4aa88a2d 100644\n--- a/tests/roots/test-ext-inheritance_diagram/subdir/index.rst\n+++ b/tests/roots/test-ext-inheritance_diagram/subdir/index.rst\n@@ -2,4 +2,6 @@\n test-ext-inheritance_diagram subdirectory\n =========================================\n \n-.. inheritance-diagram:: test.Qux\n+.. inheritance-diagram:: test.DocMainLevel\n+\n+.. py:class:: test.DocLowerLevel\ndiff --git a/tests/roots/test-ext-inheritance_diagram/test.py b/tests/roots/test-ext-inheritance_diagram/test.py\nindex 8101b467311..dde7b21d1c4 100644\n--- a/tests/roots/test-ext-inheritance_diagram/test.py\n+++ b/tests/roots/test-ext-inheritance_diagram/test.py\n@@ -2,15 +2,15 @@ class Foo:\n     pass\n \n \n-class Bar(Foo):\n+class DocHere(Foo):\n     pass\n \n \n-class Baz(Bar):\n+class DocLowerLevel(DocHere):\n     pass\n \n \n-class Qux(Foo):\n+class DocMainLevel(Foo):\n     pass\n \n \ndiff --git a/tests/test_ext_inheritance_diagram.py b/tests/test_ext_inheritance_diagram.py\nindex 57b2ef47b45..1442a6de84c 100644\n--- a/tests/test_ext_inheritance_diagram.py\n+++ b/tests/test_ext_inheritance_diagram.py\n@@ -269,8 +269,8 @@ def test_inheritance_diagram_latex_alias(app, status, warning):\n     doc = app.env.get_and_resolve_doctree('index', app)\n     aliased_graph = doc.children[0].children[3]['graph'].class_info\n     assert len(aliased_graph) == 3\n-    assert ('test.Baz', 'test.Baz', ['test.Bar'], None) in aliased_graph\n-    assert ('test.Bar', 'test.Bar', ['alias.Foo'], None) in aliased_graph\n+    assert ('test.DocLowerLevel', 'test.DocLowerLevel', ['test.DocHere'], None) in aliased_graph\n+    assert ('test.DocHere', 'test.DocHere', ['alias.Foo'], None) in aliased_graph\n     assert ('alias.Foo', 'alias.Foo', [], None) in aliased_graph\n \n     content = (app.outdir / 'index.html').read_text(encoding='utf8')\n\nFrom 7ec28845c791ab744e97941b59ab83cd5c1e2c39 Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Mon, 31 Jul 2023 10:34:00 -0400\nSubject: [PATCH 09/10] Fixed the v2 inventory for the unit test\n\n---\n tests/test_ext_inheritance_diagram.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/tests/test_ext_inheritance_diagram.py b/tests/test_ext_inheritance_diagram.py\nindex 1442a6de84c..3d02854c5b3 100644\n--- a/tests/test_ext_inheritance_diagram.py\n+++ b/tests/test_ext_inheritance_diagram.py\n@@ -144,7 +144,7 @@ def new_run(self):\n # Version: 1.0\n # The remainder of this file is compressed using zlib.\n ''' + zlib.compress(b'''\\\n-subdir.other.Bob class 1 foo.html -\n+subdir.other.Bob py:class 1 foo.html#subdir.other.Bob -\n ''')\n \n \n\nFrom 65ff8c07a9e5e5ffe12c0bd9fdb6f7f3c2266a68 Mon Sep 17 00:00:00 2001\nFrom: \"Albert Y. Shih\" <ayshih@gmail.com>\nDate: Tue, 8 Aug 2023 09:03:05 -0400\nSubject: [PATCH 10/10] Flip the logical branching\n\n---\n sphinx/ext/inheritance_diagram.py | 6 +++---\n 1 file changed, 3 insertions(+), 3 deletions(-)\n\ndiff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 100c2e697e0..ca9acf3c5b1 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -413,10 +413,10 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n             # Construct the name from the URI if the reference is external via intersphinx\n-            if child.get('internal', True):\n-                refname = child['reftitle']\n-            else:\n+            if not child.get('internal', True):\n                 refname = child['refuri'].rsplit('#', 1)[-1]\n+            else:\n+                refname = child['reftitle']\n \n             urls[refname] = child.get('refuri')\n         elif child.get('refid') is not None:\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/10614"}