{"instance_id": "pylint-dev__pylint-6903", "score": "C", "diff": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex a7e5d5574..4d2a0665f 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -52,13 +52,13 @@ def _query_cpu() -> int | None:\n         with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n             cpu_period = int(file.read().rstrip())\n         # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n-        avail_cpu = int(cpu_quota / cpu_period)\n+        avail_cpu = max(1, int(cpu_quota / cpu_period))\n     elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n         with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n-        avail_cpu = int(cpu_shares / 1024)\n-    return avail_cpu\n+        avail_cpu = max(1, int(cpu_shares / 1024))\n+    return avail_cpu or 1\n \n \n def _cpu_count() -> int:\n", "gold_standard_diff": "From cf15b86dc01264dc4036a48ebd07909f28a2ca05 Mon Sep 17 00:00:00 2001\nFrom: \"paul.lichtenberger\" <paul.lichtenberger.rgbg@gmail.com>\nDate: Thu, 9 Jun 2022 21:40:58 +0200\nSubject: [PATCH 01/10] Prevent pylint.run._cpu_count() from returning 0\n\n---\n pylint/lint/run.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex a7e5d55744..60029d5a39 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -75,7 +75,7 @@ def _cpu_count() -> int:\n         cpu_count = multiprocessing.cpu_count()\n     else:\n         cpu_count = 1\n-    if cpu_share is not None:\n+    if cpu_share:\n         return min(cpu_share, cpu_count)\n     return cpu_count\n \n\nFrom ad2a0761d90bba12ad13a7429842fd33252a155e Mon Sep 17 00:00:00 2001\nFrom: \"paul.lichtenberger\" <paul.lichtenberger.rgbg@gmail.com>\nDate: Fri, 10 Jun 2022 08:45:10 +0200\nSubject: [PATCH 02/10] Added testcase for issue-6902\n\n---\n tests/test_pylint_runners.py | 17 +++++++++++++++++\n 1 file changed, 17 insertions(+)\n\ndiff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py\nindex b06046e225..bf4c3a8d51 100644\n--- a/tests/test_pylint_runners.py\n+++ b/tests/test_pylint_runners.py\n@@ -11,9 +11,12 @@\n from unittest.mock import patch\n \n import pytest\n+from _pytest.monkeypatch import MonkeyPatch\n from py._path.local import LocalPath  # type: ignore[import]\n \n from pylint import run_epylint, run_pylint, run_pyreverse, run_symilar\n+from pylint.testutils import GenericTestReporter as Reporter\n+from pylint.lint import Run\n \n \n @pytest.mark.parametrize(\n@@ -40,3 +43,17 @@ def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:\n         with pytest.raises(SystemExit) as err:\n             runner(testargs)\n         assert err.value.code == 0\n+\n+\n+def test_pylint_run_jobs_equal_zero_not_crashing_in_docker(\n+        monkeypatch: MonkeyPatch,\n+        tmpdir: LocalPath\n+) -> None:\n+    \"\"\" Check that the pylint runner does not crash if `pylint.lint.run._query_cpu` yields 0. \"\"\"\n+    monkeypatch.setattr(\"pylint.lint.run._query_cpu\", lambda: 0)\n+    filepath = os.path.abspath(__file__)\n+    testargs = [filepath, \"--jobs=0\"]\n+    with tmpdir.as_cwd():\n+        with pytest.raises(SystemExit) as err:\n+            Run(testargs, reporter=Reporter())\n+        assert err.value.code == 0\n\nFrom 9b6f9bac4ceb7ffb59ba8ab52a7db14c41e70796 Mon Sep 17 00:00:00 2001\nFrom: \"pre-commit-ci[bot]\"\n <66853113+pre-commit-ci[bot]@users.noreply.github.com>\nDate: Fri, 10 Jun 2022 06:46:21 +0000\nSubject: [PATCH 03/10] [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n---\n tests/test_pylint_runners.py | 9 +++++----\n 1 file changed, 5 insertions(+), 4 deletions(-)\n\ndiff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py\nindex bf4c3a8d51..5bc1689237 100644\n--- a/tests/test_pylint_runners.py\n+++ b/tests/test_pylint_runners.py\n@@ -15,8 +15,8 @@\n from py._path.local import LocalPath  # type: ignore[import]\n \n from pylint import run_epylint, run_pylint, run_pyreverse, run_symilar\n-from pylint.testutils import GenericTestReporter as Reporter\n from pylint.lint import Run\n+from pylint.testutils import GenericTestReporter as Reporter\n \n \n @pytest.mark.parametrize(\n@@ -46,10 +46,11 @@ def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:\n \n \n def test_pylint_run_jobs_equal_zero_not_crashing_in_docker(\n-        monkeypatch: MonkeyPatch,\n-        tmpdir: LocalPath\n+    monkeypatch: MonkeyPatch, tmpdir: LocalPath\n ) -> None:\n-    \"\"\" Check that the pylint runner does not crash if `pylint.lint.run._query_cpu` yields 0. \"\"\"\n+    \"\"\"Check that the pylint runner does not crash if `pylint.lint.run._query_cpu`\n+    yields 0.\n+    \"\"\"\n     monkeypatch.setattr(\"pylint.lint.run._query_cpu\", lambda: 0)\n     filepath = os.path.abspath(__file__)\n     testargs = [filepath, \"--jobs=0\"]\n\nFrom e49747936976f95fb2c19d00ce5c0af054a09f3c Mon Sep 17 00:00:00 2001\nFrom: \"paul.lichtenberger\" <paul.lichtenberger.rgbg@gmail.com>\nDate: Fri, 10 Jun 2022 09:04:53 +0200\nSubject: [PATCH 04/10] Added entry in changelog\n\n---\n doc/whatsnew/2/2.14/full.rst | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a/doc/whatsnew/2/2.14/full.rst b/doc/whatsnew/2/2.14/full.rst\nindex 3734dd67c1..8ddf9fe0d0 100644\n--- a/doc/whatsnew/2/2.14/full.rst\n+++ b/doc/whatsnew/2/2.14/full.rst\n@@ -5,6 +5,10 @@ What's New in Pylint 2.14.2?\n ----------------------------\n Release date: TBA\n \n+* Don't crash if ``lint.run._query_cpu()`` returns 0 for number of available\n+  cpus.\n+\n+  Closes #6902\n \n What's New in Pylint 2.14.1?\n ----------------------------\n\nFrom d673d3f8982c34aebe751378c9e3d99818bf4a64 Mon Sep 17 00:00:00 2001\nFrom: \"paul.lichtenberger\" <paul.lichtenberger.rgbg@gmail.com>\nDate: Fri, 10 Jun 2022 11:45:15 +0200\nSubject: [PATCH 05/10] Reworked lint.run._query_cpu to return 1 if only a\n fraction of a cpu is available\n\n---\n doc/whatsnew/2/2.14/full.rst | 4 ++--\n pylint/lint/run.py           | 9 ++++++++-\n tests/test_pylint_runners.py | 6 +-----\n 3 files changed, 11 insertions(+), 8 deletions(-)\n\ndiff --git a/doc/whatsnew/2/2.14/full.rst b/doc/whatsnew/2/2.14/full.rst\nindex 8ddf9fe0d0..2a07ca7244 100644\n--- a/doc/whatsnew/2/2.14/full.rst\n+++ b/doc/whatsnew/2/2.14/full.rst\n@@ -5,8 +5,8 @@ What's New in Pylint 2.14.2?\n ----------------------------\n Release date: TBA\n \n-* Don't crash if ``lint.run._query_cpu()`` returns 0 for number of available\n-  cpus.\n+* Don't crash if ``lint.run._query_cpu()`` is run within a Kubernetes Pod, that has only\n+  a fraction of a cpu core assigned. Just go with one process then.\n \n   Closes #6902\n \ndiff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex 60029d5a39..c6ce92e4d0 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -58,6 +58,13 @@ def _query_cpu() -> int | None:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n         avail_cpu = int(cpu_shares / 1024)\n+\n+    # In K8s Pods also a fraction of a single core could be available\n+    # As multiprocessing is not able to run only a \"fraction\" of process\n+    # assume we have 1 cpu available\n+    if avail_cpu == 0:\n+        avail_cpu = 1\n+\n     return avail_cpu\n \n \n@@ -75,7 +82,7 @@ def _cpu_count() -> int:\n         cpu_count = multiprocessing.cpu_count()\n     else:\n         cpu_count = 1\n-    if cpu_share:\n+    if cpu_share is not None:\n         return min(cpu_share, cpu_count)\n     return cpu_count\n \ndiff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py\nindex 5bc1689237..76fb90ba69 100644\n--- a/tests/test_pylint_runners.py\n+++ b/tests/test_pylint_runners.py\n@@ -11,7 +11,6 @@\n from unittest.mock import patch\n \n import pytest\n-from _pytest.monkeypatch import MonkeyPatch\n from py._path.local import LocalPath  # type: ignore[import]\n \n from pylint import run_epylint, run_pylint, run_pyreverse, run_symilar\n@@ -45,13 +44,10 @@ def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:\n         assert err.value.code == 0\n \n \n-def test_pylint_run_jobs_equal_zero_not_crashing_in_docker(\n-    monkeypatch: MonkeyPatch, tmpdir: LocalPath\n-) -> None:\n+def test_pylint_run_jobs_equal_zero_not_crashing_in_docker(tmpdir: LocalPath) -> None:\n     \"\"\"Check that the pylint runner does not crash if `pylint.lint.run._query_cpu`\n     yields 0.\n     \"\"\"\n-    monkeypatch.setattr(\"pylint.lint.run._query_cpu\", lambda: 0)\n     filepath = os.path.abspath(__file__)\n     testargs = [filepath, \"--jobs=0\"]\n     with tmpdir.as_cwd():\n\nFrom 9b062f5c504eed4a729bb3881544456c6457ef91 Mon Sep 17 00:00:00 2001\nFrom: \"paul.lichtenberger\" <paul.lichtenberger.rgbg@gmail.com>\nDate: Fri, 10 Jun 2022 12:52:05 +0200\nSubject: [PATCH 06/10] Reworked test\n\n---\n pylint/lint/run.py           |  2 +-\n tests/test_pylint_runners.py | 29 +++++++++++++++++++++++++----\n 2 files changed, 26 insertions(+), 5 deletions(-)\n\ndiff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex c6ce92e4d0..27a4d9d84d 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -61,7 +61,7 @@ def _query_cpu() -> int | None:\n \n     # In K8s Pods also a fraction of a single core could be available\n     # As multiprocessing is not able to run only a \"fraction\" of process\n-    # assume we have 1 cpu available\n+    # assume we have 1 CPU available\n     if avail_cpu == 0:\n         avail_cpu = 1\n \ndiff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py\nindex 76fb90ba69..9764ddbfdd 100644\n--- a/tests/test_pylint_runners.py\n+++ b/tests/test_pylint_runners.py\n@@ -6,9 +6,10 @@\n from __future__ import annotations\n \n import os\n+import pathlib\n import sys\n from collections.abc import Callable\n-from unittest.mock import patch\n+from unittest.mock import MagicMock, mock_open, patch\n \n import pytest\n from py._path.local import LocalPath  # type: ignore[import]\n@@ -44,13 +45,33 @@ def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:\n         assert err.value.code == 0\n \n \n-def test_pylint_run_jobs_equal_zero_not_crashing_in_docker(tmpdir: LocalPath) -> None:\n+def test_pylint_run_jobs_equal_zero_dont_crash_with_cpu_fraction(\n+    tmpdir: LocalPath,\n+) -> None:\n     \"\"\"Check that the pylint runner does not crash if `pylint.lint.run._query_cpu`\n-    yields 0.\n+    determines only a fraction of a CPU core to be available.\n     \"\"\"\n+    builtin_open = open\n+\n+    def _mock_open(*args, **kwargs):\n+        if args[0] == \"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\":\n+            return mock_open(read_data=b\"-1\")(*args, **kwargs)\n+        if args[0] == \"/sys/fs/cgroup/cpu/cpu.shares\":\n+            return mock_open(read_data=b\"2\")(*args, **kwargs)\n+        return builtin_open(*args, **kwargs)\n+\n+    pathlib_path = pathlib.Path\n+\n+    def _mock_path(*args, **kwargs):\n+        if args[0] == \"/sys/fs/cgroup/cpu/cpu.shares\":\n+            return MagicMock(is_file=lambda: True)\n+        return pathlib_path(*args, **kwargs)\n+\n     filepath = os.path.abspath(__file__)\n     testargs = [filepath, \"--jobs=0\"]\n     with tmpdir.as_cwd():\n         with pytest.raises(SystemExit) as err:\n-            Run(testargs, reporter=Reporter())\n+            with patch(\"builtins.open\", _mock_open):\n+                with patch(\"pylint.lint.run.Path\", _mock_path):\n+                    Run(testargs, reporter=Reporter())\n         assert err.value.code == 0\n\nFrom 25cef7f350dba65418797a5a25f90e1c8f42c4aa Mon Sep 17 00:00:00 2001\nFrom: Paul Lichtenberger <paul.lichtenberger.rgbg@gmail.com>\nDate: Sat, 11 Jun 2022 14:49:26 +0200\nSubject: [PATCH 07/10] Prevent pylint.run._cpu_count() from returning 0, made\n more explicit\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nCo-authored-by: Dani\u00ebl van Noord <13665637+DanielNoord@users.noreply.github.com>\n---\n pylint/lint/run.py | 5 +----\n 1 file changed, 1 insertion(+), 4 deletions(-)\n\ndiff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex 27a4d9d84d..af0df82756 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -62,10 +62,7 @@ def _query_cpu() -> int | None:\n     # In K8s Pods also a fraction of a single core could be available\n     # As multiprocessing is not able to run only a \"fraction\" of process\n     # assume we have 1 CPU available\n-    if avail_cpu == 0:\n-        avail_cpu = 1\n-\n-    return avail_cpu\n+    return max(avail_cpu, 1)\n \n \n def _cpu_count() -> int:\n\nFrom bd33be652ae3164f38799e7cb8defcc5b865fbfb Mon Sep 17 00:00:00 2001\nFrom: \"pre-commit-ci[bot]\"\n <66853113+pre-commit-ci[bot]@users.noreply.github.com>\nDate: Sat, 11 Jun 2022 12:51:10 +0000\nSubject: [PATCH 08/10] [pre-commit.ci] auto fixes from pre-commit.com hooks\n\nfor more information, see https://pre-commit.ci\n---\n doc/whatsnew/2/2.14/full.rst | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/doc/whatsnew/2/2.14/full.rst b/doc/whatsnew/2/2.14/full.rst\nindex 64962bbcd0..93953ce926 100644\n--- a/doc/whatsnew/2/2.14/full.rst\n+++ b/doc/whatsnew/2/2.14/full.rst\n@@ -9,7 +9,7 @@ Release date: TBA\n   a fraction of a cpu core assigned. Just go with one process then.\n \n   Closes #6902\n-  \n+\n * Fixed a false positive in ``unnecessary-list-index-lookup`` and ``unnecessary-dict-index-lookup``\n   when the subscript is updated in the body of a nested loop.\n \n\nFrom d7c8ee77d5fb83f72858d409dcbcdda1e153777a Mon Sep 17 00:00:00 2001\nFrom: \"paul.lichtenberger\" <paul.lichtenberger.rgbg@gmail.com>\nDate: Sat, 11 Jun 2022 15:27:38 +0200\nSubject: [PATCH 09/10] Reverted former review suggestion\n\n---\n pylint/lint/run.py | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n\ndiff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex af0df82756..27a4d9d84d 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -62,7 +62,10 @@ def _query_cpu() -> int | None:\n     # In K8s Pods also a fraction of a single core could be available\n     # As multiprocessing is not able to run only a \"fraction\" of process\n     # assume we have 1 CPU available\n-    return max(avail_cpu, 1)\n+    if avail_cpu == 0:\n+        avail_cpu = 1\n+\n+    return avail_cpu\n \n \n def _cpu_count() -> int:\n\nFrom 08540051511bac0892285988279d7e29281f6eb0 Mon Sep 17 00:00:00 2001\nFrom: Pierre Sassoulas <pierre.sassoulas@gmail.com>\nDate: Sat, 11 Jun 2022 21:31:47 +0200\nSubject: [PATCH 10/10] Update doc/whatsnew/2/2.14/full.rst\n\n---\n doc/whatsnew/2/2.14/full.rst | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/doc/whatsnew/2/2.14/full.rst b/doc/whatsnew/2/2.14/full.rst\nindex dd415bb5c5..97cc20d252 100644\n--- a/doc/whatsnew/2/2.14/full.rst\n+++ b/doc/whatsnew/2/2.14/full.rst\n@@ -22,6 +22,7 @@ Release date: TBA\n * Fixed a false positive for ``used-before-assignment`` when a try block returns\n   but an except handler defines a name via type annotation.\n \n+\n What's New in Pylint 2.14.1?\n ----------------------------\n Release date: 2022-06-06\n", "gold_standard_pr_link": "https://github.com/pylint-dev/pylint/pull/6903"}