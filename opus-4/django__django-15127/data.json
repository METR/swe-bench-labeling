{"instance_id": "django__django-15127", "score": "I", "diff": "diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex 01422066a6..160bbbe867 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -1,6 +1,9 @@\n from django.conf import settings\n from django.contrib.messages import constants, utils\n \n+# LEVEL_TAGS is kept for backward compatibility but is no longer used internally.\n+# The Message.level_tag property now dynamically fetches tags via utils.get_level_tags()\n+# to properly support @override_settings.\n LEVEL_TAGS = utils.get_level_tags()\n \n \n@@ -38,7 +41,7 @@ class Message:\n \n     @property\n     def level_tag(self):\n-        return LEVEL_TAGS.get(self.level, '')\n+        return utils.get_level_tags().get(self.level, '')\n \n \n class BaseStorage:\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..e5cd52b206\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,137 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django before importing other Django modules\n+settings.configure(\n+    DEBUG=True,\n+    INSTALLED_APPS=[\n+        'django.contrib.messages',\n+        'django.contrib.sessions',\n+    ],\n+    MIDDLEWARE=[\n+        'django.contrib.sessions.middleware.SessionMiddleware',\n+        'django.contrib.messages.middleware.MessageMiddleware',\n+    ],\n+    MESSAGE_STORAGE='django.contrib.messages.storage.session.SessionStorage',\n+    SECRET_KEY='test-secret-key',\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+)\n+django.setup()\n+\n+from django.test import TestCase, override_settings\n+from django.contrib.messages import constants, add_message, get_messages\n+from django.contrib.messages.storage.base import Message\n+from django.http import HttpRequest\n+from django.contrib.messages.storage import default_storage\n+from django.contrib.messages.storage.session import SessionStorage\n+\n+\n+class TestLevelTagsWithOverrideSettings(TestCase):\n+    def test_message_level_tags_update_with_override_settings(self):\n+        \"\"\"Test that level_tag updates correctly with @override_settings\"\"\"\n+        \n+        # Test 1: Default level tags\n+        msg = Message(constants.INFO, 'Test message')\n+        self.assertEqual(msg.level_tag, 'info')\n+        \n+        msg = Message(constants.ERROR, 'Error message')\n+        self.assertEqual(msg.level_tag, 'error')\n+        \n+        # Test 2: Override settings inline\n+        with override_settings(MESSAGE_TAGS={constants.INFO: 'custom-info', constants.ERROR: 'custom-error'}):\n+            msg = Message(constants.INFO, 'Test message')\n+            self.assertEqual(msg.level_tag, 'custom-info')\n+            \n+            msg = Message(constants.ERROR, 'Error message')\n+            self.assertEqual(msg.level_tag, 'custom-error')\n+        \n+        # Test 3: Back to default after override\n+        msg = Message(constants.INFO, 'Test message')\n+        self.assertEqual(msg.level_tag, 'info')\n+    \n+    @override_settings(MESSAGE_TAGS={constants.WARNING: 'custom-warning'})\n+    def test_decorator_override(self):\n+        \"\"\"Test that @override_settings decorator works\"\"\"\n+        msg = Message(constants.WARNING, 'Warning message')\n+        self.assertEqual(msg.level_tag, 'custom-warning')\n+        \n+        # Other levels should still have default tags\n+        msg = Message(constants.INFO, 'Info message')\n+        self.assertEqual(msg.level_tag, 'info')\n+    \n+    def test_nested_overrides(self):\n+        \"\"\"Test nested override_settings\"\"\"\n+        msg = Message(constants.DEBUG, 'Debug message')\n+        self.assertEqual(msg.level_tag, 'debug')\n+        \n+        with override_settings(MESSAGE_TAGS={constants.DEBUG: 'custom-debug-1'}):\n+            msg = Message(constants.DEBUG, 'Debug message')\n+            self.assertEqual(msg.level_tag, 'custom-debug-1')\n+            \n+            with override_settings(MESSAGE_TAGS={constants.DEBUG: 'custom-debug-2'}):\n+                msg = Message(constants.DEBUG, 'Debug message')\n+                self.assertEqual(msg.level_tag, 'custom-debug-2')\n+            \n+            # Back to first override\n+            msg = Message(constants.DEBUG, 'Debug message')\n+            self.assertEqual(msg.level_tag, 'custom-debug-1')\n+        \n+        # Back to default\n+        msg = Message(constants.DEBUG, 'Debug message')\n+        self.assertEqual(msg.level_tag, 'debug')\n+    \n+    def test_custom_level_tags(self):\n+        \"\"\"Test custom level tags\"\"\"\n+        CUSTOM_LEVEL = 45\n+        \n+        # Without override, custom level has no tag\n+        msg = Message(CUSTOM_LEVEL, 'Custom message')\n+        self.assertEqual(msg.level_tag, '')\n+        \n+        # With override, custom level gets a tag\n+        with override_settings(MESSAGE_TAGS={CUSTOM_LEVEL: 'custom-level'}):\n+            msg = Message(CUSTOM_LEVEL, 'Custom message')\n+            self.assertEqual(msg.level_tag, 'custom-level')\n+\n+\n+if __name__ == \"__main__\":\n+    from django.test.utils import setup_test_environment, teardown_test_environment\n+    setup_test_environment()\n+    \n+    suite = TestLevelTagsWithOverrideSettings()\n+    \n+    print(\"Running test_message_level_tags_update_with_override_settings...\")\n+    try:\n+        suite.test_message_level_tags_update_with_override_settings()\n+        print(\"\u2713 Passed\")\n+    except AssertionError as e:\n+        print(f\"\u2717 Failed: {e}\")\n+    \n+    print(\"\\nRunning test_decorator_override...\")\n+    try:\n+        suite.test_decorator_override()\n+        print(\"\u2713 Passed\")\n+    except AssertionError as e:\n+        print(f\"\u2717 Failed: {e}\")\n+    \n+    print(\"\\nRunning test_nested_overrides...\")\n+    try:\n+        suite.test_nested_overrides()\n+        print(\"\u2713 Passed\")\n+    except AssertionError as e:\n+        print(f\"\u2717 Failed: {e}\")\n+    \n+    print(\"\\nRunning test_custom_level_tags...\")\n+    try:\n+        suite.test_custom_level_tags()\n+        print(\"\u2713 Passed\")\n+    except AssertionError as e:\n+        print(f\"\u2717 Failed: {e}\")\n+    \n+    teardown_test_environment()\n+    print(\"\\nAll tests completed!\")\ndiff --git a/test_for_django_suite.py b/test_for_django_suite.py\nnew file mode 100644\nindex 0000000000..2a2714d7b7\n--- /dev/null\n+++ b/test_for_django_suite.py\n@@ -0,0 +1,46 @@\n+\"\"\"\n+Test case for the issue where LEVEL_TAGS not updated when using @override_settings.\n+This test can be added to Django's messages test suite.\n+\"\"\"\n+\n+from django.test import TestCase, override_settings\n+from django.contrib.messages import constants\n+from django.contrib.messages.storage.base import Message\n+\n+\n+class TestLevelTagOverrideSettings(TestCase):\n+    \"\"\"Test that Message.level_tag properly reflects MESSAGE_TAGS changes via @override_settings.\"\"\"\n+    \n+    def test_level_tag_respects_override_settings(self):\n+        \"\"\"\n+        The level_tag property should reflect changes made to MESSAGE_TAGS\n+        via @override_settings without requiring manual updates to LEVEL_TAGS.\n+        \"\"\"\n+        # Default behavior\n+        msg = Message(constants.INFO, 'Test')\n+        self.assertEqual(msg.level_tag, 'info')\n+        \n+        # Override MESSAGE_TAGS\n+        with override_settings(MESSAGE_TAGS={constants.INFO: 'custom-info'}):\n+            msg = Message(constants.INFO, 'Test')\n+            self.assertEqual(msg.level_tag, 'custom-info')\n+        \n+        # Back to default\n+        msg = Message(constants.INFO, 'Test')\n+        self.assertEqual(msg.level_tag, 'info')\n+    \n+    @override_settings(MESSAGE_TAGS={\n+        constants.DEBUG: 'custom-debug',\n+        constants.ERROR: 'custom-error',\n+    })\n+    def test_level_tag_with_decorator(self):\n+        \"\"\"Test @override_settings decorator works with level_tag.\"\"\"\n+        msg_debug = Message(constants.DEBUG, 'Debug')\n+        self.assertEqual(msg_debug.level_tag, 'custom-debug')\n+        \n+        msg_error = Message(constants.ERROR, 'Error')\n+        self.assertEqual(msg_error.level_tag, 'custom-error')\n+        \n+        # Non-overridden levels still use defaults\n+        msg_info = Message(constants.INFO, 'Info')\n+        self.assertEqual(msg_info.level_tag, 'info')\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..580e250cb2\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,53 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django before importing other Django modules\n+settings.configure(\n+    DEBUG=True,\n+    INSTALLED_APPS=[\n+        'django.contrib.messages',\n+    ],\n+    MESSAGE_STORAGE='django.contrib.messages.storage.session.SessionStorage',\n+)\n+django.setup()\n+\n+from django.test import TestCase, override_settings\n+from django.contrib.messages import constants\n+from django.contrib.messages.storage.base import Message\n+from django.http import HttpRequest\n+from django.contrib.messages.storage import default_storage\n+\n+\n+class TestLevelTagsIssue(TestCase):\n+    def test_level_tags_without_override(self):\n+        \"\"\"Test that level_tag works without override_settings\"\"\"\n+        msg = Message(constants.INFO, 'Test message')\n+        # Default tag for INFO level is 'info'\n+        self.assertEqual(msg.level_tag, 'info')\n+    \n+    @override_settings(MESSAGE_TAGS={constants.INFO: 'custom-info'})\n+    def test_level_tags_with_override_settings(self):\n+        \"\"\"Test that level_tag doesn't update with @override_settings - demonstrating the bug\"\"\"\n+        msg = Message(constants.INFO, 'Test message')\n+        # This should be 'custom-info' but will be 'info' due to the bug\n+        print(f\"Expected: 'custom-info', Got: '{msg.level_tag}'\")\n+        # This assertion will fail, demonstrating the bug\n+        self.assertEqual(msg.level_tag, 'custom-info')\n+\n+\n+if __name__ == \"__main__\":\n+    # Run the test\n+    from django.test.utils import setup_test_environment, teardown_test_environment\n+    setup_test_environment()\n+    \n+    test = TestLevelTagsIssue()\n+    test.test_level_tags_without_override()\n+    print(\"Test without override passed\")\n+    \n+    try:\n+        test.test_level_tags_with_override_settings()\n+        print(\"Test with override passed\")\n+    except AssertionError as e:\n+        print(f\"Test with override failed as expected: {e}\")\n+    \n+    teardown_test_environment()\n", "gold_standard_diff": "diff --git a/django/contrib/messages/apps.py b/django/contrib/messages/apps.py\nindex 0ff25d38851d..064b9a4bde8f 100644\n--- a/django/contrib/messages/apps.py\n+++ b/django/contrib/messages/apps.py\n@@ -1,7 +1,18 @@\n from django.apps import AppConfig\n+from django.contrib.messages.storage import base\n+from django.contrib.messages.utils import get_level_tags\n+from django.test.signals import setting_changed\n from django.utils.translation import gettext_lazy as _\n \n \n+def update_level_tags(setting, **kwargs):\n+    if setting == 'MESSAGE_TAGS':\n+        base.LEVEL_TAGS = get_level_tags()\n+\n+\n class MessagesConfig(AppConfig):\n     name = 'django.contrib.messages'\n     verbose_name = _(\"Messages\")\n+\n+    def ready(self):\n+        setting_changed.connect(update_level_tags)\ndiff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 9dad08e6c79b..2ee1f995aa15 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,7 +1,7 @@\n-from django.contrib.messages import constants, get_level, set_level, utils\n+from django.contrib.messages import constants, get_level, set_level\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n-from django.contrib.messages.storage import base, default_storage\n+from django.contrib.messages.storage import default_storage\n from django.contrib.messages.storage.base import Message\n from django.http import HttpRequest, HttpResponse\n from django.test import modify_settings, override_settings\n@@ -22,20 +22,6 @@ def add_level_messages(storage):\n     storage.add(constants.SUCCESS, 'This was a triumph.')\n \n \n-class override_settings_tags(override_settings):\n-    def enable(self):\n-        super().enable()\n-        # LEVEL_TAGS is a constant defined in the\n-        # django.contrib.messages.storage.base module, so after changing\n-        # settings.MESSAGE_TAGS, update that constant also.\n-        self.old_level_tags = base.LEVEL_TAGS\n-        base.LEVEL_TAGS = utils.get_level_tags()\n-\n-    def disable(self):\n-        super().disable()\n-        base.LEVEL_TAGS = self.old_level_tags\n-\n-\n class BaseTests:\n     storage_class = default_storage\n     levels = {\n@@ -47,7 +33,7 @@ class BaseTests:\n     }\n \n     def setUp(self):\n-        self.settings_override = override_settings_tags(\n+        self.settings_override = override_settings(\n             TEMPLATES=[{\n                 'BACKEND': 'django.template.backends.django.DjangoTemplates',\n                 'DIRS': [],\n@@ -368,7 +354,7 @@ def test_level_tag(self):\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n-    @override_settings_tags(MESSAGE_TAGS={\n+    @override_settings(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n         constants.WARNING: '',\ndiff --git a/tests/messages_tests/tests.py b/tests/messages_tests/tests.py\nindex eea07c9c41f1..aebb5bb0ec4b 100644\n--- a/tests/messages_tests/tests.py\n+++ b/tests/messages_tests/tests.py\n@@ -1,8 +1,9 @@\n from unittest import mock\n \n from django.contrib.messages import constants\n+from django.contrib.messages.storage import base\n from django.contrib.messages.storage.base import Message\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class MessageTests(SimpleTestCase):\n@@ -15,3 +16,18 @@ def test_eq(self):\n         self.assertNotEqual(msg_1, msg_2)\n         self.assertNotEqual(msg_1, msg_3)\n         self.assertNotEqual(msg_2, msg_3)\n+\n+\n+class TestLevelTags(SimpleTestCase):\n+    message_tags = {\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        constants.SUCCESS: '',\n+        12: 'custom',\n+    }\n+\n+    @override_settings(MESSAGE_TAGS=message_tags)\n+    def test_override_settings_level_tags(self):\n+        self.assertEqual(base.LEVEL_TAGS, self.message_tags)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15127"}