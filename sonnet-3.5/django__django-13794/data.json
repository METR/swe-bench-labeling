{"instance_id": "django__django-13794", "score": "I", "diff": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 1c844580c6..7fb005d55a 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -1,3 +1,4 @@\n+from django.utils.encoding import force_str\n \"\"\"Default variable filters.\"\"\"\n import random as random_module\n import re\n@@ -672,251 +673,3 @@ def unordered_list(value, autoescape=True):\n ###################\n \n @register.filter(is_safe=False)\n-def add(value, arg):\n-    \"\"\"Add the arg to the value.\"\"\"\n-    try:\n-        return int(value) + int(arg)\n-    except (ValueError, TypeError):\n-        try:\n-            return value + arg\n-        except Exception:\n-            return ''\n-\n-\n-@register.filter(is_safe=False)\n-def get_digit(value, arg):\n-    \"\"\"\n-    Given a whole number, return the requested digit of it, where 1 is the\n-    right-most digit, 2 is the second-right-most digit, etc. Return the\n-    original value for invalid input (if input or argument is not an integer,\n-    or if argument is less than 1). Otherwise, output is always an integer.\n-    \"\"\"\n-    try:\n-        arg = int(arg)\n-        value = int(value)\n-    except ValueError:\n-        return value  # Fail silently for an invalid argument\n-    if arg < 1:\n-        return value\n-    try:\n-        return int(str(value)[-arg])\n-    except IndexError:\n-        return 0\n-\n-\n-###################\n-# DATES           #\n-###################\n-\n-@register.filter(expects_localtime=True, is_safe=False)\n-def date(value, arg=None):\n-    \"\"\"Format a date according to the given format.\"\"\"\n-    if value in (None, ''):\n-        return ''\n-    try:\n-        return formats.date_format(value, arg)\n-    except AttributeError:\n-        try:\n-            return format(value, arg)\n-        except AttributeError:\n-            return ''\n-\n-\n-@register.filter(expects_localtime=True, is_safe=False)\n-def time(value, arg=None):\n-    \"\"\"Format a time according to the given format.\"\"\"\n-    if value in (None, ''):\n-        return ''\n-    try:\n-        return formats.time_format(value, arg)\n-    except (AttributeError, TypeError):\n-        try:\n-            return time_format(value, arg)\n-        except (AttributeError, TypeError):\n-            return ''\n-\n-\n-@register.filter(\"timesince\", is_safe=False)\n-def timesince_filter(value, arg=None):\n-    \"\"\"Format a date as the time since that date (i.e. \"4 days, 6 hours\").\"\"\"\n-    if not value:\n-        return ''\n-    try:\n-        if arg:\n-            return timesince(value, arg)\n-        return timesince(value)\n-    except (ValueError, TypeError):\n-        return ''\n-\n-\n-@register.filter(\"timeuntil\", is_safe=False)\n-def timeuntil_filter(value, arg=None):\n-    \"\"\"Format a date as the time until that date (i.e. \"4 days, 6 hours\").\"\"\"\n-    if not value:\n-        return ''\n-    try:\n-        return timeuntil(value, arg)\n-    except (ValueError, TypeError):\n-        return ''\n-\n-\n-###################\n-# LOGIC           #\n-###################\n-\n-@register.filter(is_safe=False)\n-def default(value, arg):\n-    \"\"\"If value is unavailable, use given default.\"\"\"\n-    return value or arg\n-\n-\n-@register.filter(is_safe=False)\n-def default_if_none(value, arg):\n-    \"\"\"If value is None, use given default.\"\"\"\n-    if value is None:\n-        return arg\n-    return value\n-\n-\n-@register.filter(is_safe=False)\n-def divisibleby(value, arg):\n-    \"\"\"Return True if the value is divisible by the argument.\"\"\"\n-    return int(value) % int(arg) == 0\n-\n-\n-@register.filter(is_safe=False)\n-def yesno(value, arg=None):\n-    \"\"\"\n-    Given a string mapping values for true, false, and (optionally) None,\n-    return one of those strings according to the value:\n-\n-    ==========  ======================  ==================================\n-    Value       Argument                Outputs\n-    ==========  ======================  ==================================\n-    ``True``    ``\"yeah,no,maybe\"``     ``yeah``\n-    ``False``   ``\"yeah,no,maybe\"``     ``no``\n-    ``None``    ``\"yeah,no,maybe\"``     ``maybe``\n-    ``None``    ``\"yeah,no\"``           ``\"no\"`` (converts None to False\n-                                        if no mapping for None is given.\n-    ==========  ======================  ==================================\n-    \"\"\"\n-    if arg is None:\n-        # Translators: Please do not add spaces around commas.\n-        arg = gettext('yes,no,maybe')\n-    bits = arg.split(',')\n-    if len(bits) < 2:\n-        return value  # Invalid arg.\n-    try:\n-        yes, no, maybe = bits\n-    except ValueError:\n-        # Unpack list of wrong size (no \"maybe\" value provided).\n-        yes, no, maybe = bits[0], bits[1], bits[1]\n-    if value is None:\n-        return maybe\n-    if value:\n-        return yes\n-    return no\n-\n-\n-###################\n-# MISC            #\n-###################\n-\n-@register.filter(is_safe=True)\n-def filesizeformat(bytes_):\n-    \"\"\"\n-    Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,\n-    102 bytes, etc.).\n-    \"\"\"\n-    try:\n-        bytes_ = int(bytes_)\n-    except (TypeError, ValueError, UnicodeDecodeError):\n-        value = ngettext(\"%(size)d byte\", \"%(size)d bytes\", 0) % {'size': 0}\n-        return avoid_wrapping(value)\n-\n-    def filesize_number_format(value):\n-        return formats.number_format(round(value, 1), 1)\n-\n-    KB = 1 << 10\n-    MB = 1 << 20\n-    GB = 1 << 30\n-    TB = 1 << 40\n-    PB = 1 << 50\n-\n-    negative = bytes_ < 0\n-    if negative:\n-        bytes_ = -bytes_  # Allow formatting of negative numbers.\n-\n-    if bytes_ < KB:\n-        value = ngettext(\"%(size)d byte\", \"%(size)d bytes\", bytes_) % {'size': bytes_}\n-    elif bytes_ < MB:\n-        value = gettext(\"%s KB\") % filesize_number_format(bytes_ / KB)\n-    elif bytes_ < GB:\n-        value = gettext(\"%s MB\") % filesize_number_format(bytes_ / MB)\n-    elif bytes_ < TB:\n-        value = gettext(\"%s GB\") % filesize_number_format(bytes_ / GB)\n-    elif bytes_ < PB:\n-        value = gettext(\"%s TB\") % filesize_number_format(bytes_ / TB)\n-    else:\n-        value = gettext(\"%s PB\") % filesize_number_format(bytes_ / PB)\n-\n-    if negative:\n-        value = \"-%s\" % value\n-    return avoid_wrapping(value)\n-\n-\n-@register.filter(is_safe=False)\n-def pluralize(value, arg='s'):\n-    \"\"\"\n-    Return a plural suffix if the value is not 1, '1', or an object of\n-    length 1. By default, use 's' as the suffix:\n-\n-    * If value is 0, vote{{ value|pluralize }} display \"votes\".\n-    * If value is 1, vote{{ value|pluralize }} display \"vote\".\n-    * If value is 2, vote{{ value|pluralize }} display \"votes\".\n-\n-    If an argument is provided, use that string instead:\n-\n-    * If value is 0, class{{ value|pluralize:\"es\" }} display \"classes\".\n-    * If value is 1, class{{ value|pluralize:\"es\" }} display \"class\".\n-    * If value is 2, class{{ value|pluralize:\"es\" }} display \"classes\".\n-\n-    If the provided argument contains a comma, use the text before the comma\n-    for the singular case and the text after the comma for the plural case:\n-\n-    * If value is 0, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n-    * If value is 1, cand{{ value|pluralize:\"y,ies\" }} display \"candy\".\n-    * If value is 2, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n-    \"\"\"\n-    if ',' not in arg:\n-        arg = ',' + arg\n-    bits = arg.split(',')\n-    if len(bits) > 2:\n-        return ''\n-    singular_suffix, plural_suffix = bits[:2]\n-\n-    try:\n-        return singular_suffix if float(value) == 1 else plural_suffix\n-    except ValueError:  # Invalid string that's not a number.\n-        pass\n-    except TypeError:  # Value isn't a string or a number; maybe it's a list?\n-        try:\n-            return singular_suffix if len(value) == 1 else plural_suffix\n-        except TypeError:  # len() of unsized object.\n-            pass\n-    return ''\n-\n-\n-@register.filter(\"phone2numeric\", is_safe=True)\n-def phone2numeric_filter(value):\n-    \"\"\"Take a phone number and converts it in to its numerical equivalent.\"\"\"\n-    return phone2numeric(value)\n-\n-\n-@register.filter(is_safe=True)\n-def pprint(value):\n-    \"\"\"A wrapper around pprint.pprint -- for debugging, really.\"\"\"\n-    try:\n-        return pformat(value)\n-    except Exception as e:\n-        return \"Error in formatting: %s: %s\" % (e.__class__.__name__, e)\n", "gold_standard_diff": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 6d38f932f97a..5c8a0c233f50 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -176,6 +176,12 @@ def __mod__(self, rhs):\n                 return str(self) % rhs\n             return self.__cast() % rhs\n \n+        def __add__(self, other):\n+            return self.__cast() + other\n+\n+        def __radd__(self, other):\n+            return other + self.__cast()\n+\n         def __deepcopy__(self, memo):\n             # Instances of this class are effectively immutable. It's just a\n             # collection of functions. So we don't need to do anything\ndiff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 0fcc661f4aed..b5786ca1362b 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -2,6 +2,7 @@\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n \n@@ -46,6 +47,22 @@ def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n \n class FunctionTests(SimpleTestCase):\n \ndiff --git a/tests/utils_tests/test_functional.py b/tests/utils_tests/test_functional.py\nindex 6e454cfef3e3..595479a50362 100644\n--- a/tests/utils_tests/test_functional.py\n+++ b/tests/utils_tests/test_functional.py\n@@ -184,6 +184,11 @@ class Foo:\n         with self.assertRaisesMessage(TypeError, msg):\n             Foo().cp\n \n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n     def test_lazy_equality(self):\n         \"\"\"\n         == and != work correctly for Promises.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13794"}