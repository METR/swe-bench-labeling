{"instance_id": "django__django-15098", "score": "I", "diff": "diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 7dcc77b46c..274a6f0643 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -43,7 +43,7 @@ language_code_re = _lazy_re_compile(\n     re.IGNORECASE\n )\n \n-language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+)?)(/|$)')\n+language_code_prefix_re = _lazy_re_compile(r'^/(\\w+(?:[@-]\\w+)*)(/|$)')\n \n \n @receiver(setting_changed)\ndiff --git a/test_case_sensitivity.py b/test_case_sensitivity.py\nnew file mode 100644\nindex 0000000000..ab4791f100\n--- /dev/null\n+++ b/test_case_sensitivity.py\n@@ -0,0 +1,43 @@\n+import os\n+import sys\n+import django\n+\n+# Add the testproject to sys.path\n+sys.path.insert(0, '/testbed/testproject')\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')\n+\n+django.setup()\n+\n+from django.utils.translation import trans_real\n+\n+# Test language code extraction from URL\n+test_paths = [\n+    '/en-us/',\n+    '/en-latn-us/',\n+    '/en-Latn-US/',\n+]\n+\n+print(\"Language extraction from paths:\")\n+for path in test_paths:\n+    regex_match = trans_real.language_code_prefix_re.match(path)\n+    if regex_match:\n+        extracted = regex_match[1]\n+        print(f\"\\n{path} -> extracted: '{extracted}'\")\n+        \n+        # Check if it's in supported languages\n+        supported_langs = trans_real.get_languages()\n+        is_supported = extracted in supported_langs\n+        print(f\"  Is '{extracted}' in supported languages? {is_supported}\")\n+        \n+        # Check if it passes check_for_language\n+        check_result = trans_real.check_for_language(extracted)\n+        print(f\"  check_for_language('{extracted}') = {check_result}\")\n+        \n+        # Check get_supported_language_variant\n+        try:\n+            variant = trans_real.get_supported_language_variant(extracted)\n+            print(f\"  get_supported_language_variant('{extracted}') = '{variant}'\")\n+        except LookupError as e:\n+            print(f\"  get_supported_language_variant('{extracted}') = LookupError: {e}\")\n+    else:\n+        print(f\"{path} -> NO MATCH\")\ndiff --git a/test_detailed.py b/test_detailed.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_detailed.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..8db444f941\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,25 @@\n+import os\n+import sys\n+import django\n+from django.test import Client\n+\n+# Add the testproject to sys.path\n+sys.path.insert(0, '/testbed/testproject')\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')\n+\n+django.setup()\n+\n+# Create a test client\n+client = Client()\n+\n+# Test URLs\n+test_urls = [\n+    '/en-us/',\n+    '/en-latn-us/',\n+    '/en-Latn-US/',\n+]\n+\n+print(\"Testing URLs with current Django implementation:\")\n+for url in test_urls:\n+    response = client.get(url)\n+    print(f\"{url} -> Status: {response.status_code}, Content: {response.content.decode() if response.status_code == 200 else 'N/A'}\")\ndiff --git a/test_locale_bug.py b/test_locale_bug.py\nnew file mode 100644\nindex 0000000000..6ac90b5ee4\n--- /dev/null\n+++ b/test_locale_bug.py\n@@ -0,0 +1,55 @@\n+import re\n+\n+# Current regex from Django\n+language_code_prefix_re = re.compile(r'^/(\\w+([@-]\\w+)?)(/|$)')\n+language_code_re = re.compile(r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$', re.IGNORECASE)\n+\n+# Improved regex that supports RFC 5646 format\n+# This allows multiple dash-separated components and @ for variants\n+improved_prefix_regex = re.compile(r'^/(\\w+(?:[@-]\\w+)*)(/|$)')\n+\n+# Test URLs for prefix regex\n+test_urls = [\n+    '/en-us/',\n+    '/en-latn-us/',\n+    '/en-Latn-US/',\n+    '/zh-Hans-CN/',  # Chinese simplified script for China\n+    '/sr-Cyrl-RS/',  # Serbian Cyrillic script for Serbia\n+    '/en/',          # Just language\n+    '/en-US-x-twain/',  # With private use extension\n+]\n+\n+print(\"Testing current Django prefix regex:\")\n+for url in test_urls:\n+    match = language_code_prefix_re.match(url)\n+    if match:\n+        print(f\"{url} -> MATCH: {match.group(1)}\")\n+    else:\n+        print(f\"{url} -> NO MATCH\")\n+\n+print(\"\\nTesting improved prefix regex:\")\n+for url in test_urls:\n+    match = improved_prefix_regex.match(url)\n+    if match:\n+        print(f\"{url} -> MATCH: {match.group(1)}\")\n+    else:\n+        print(f\"{url} -> NO MATCH\")\n+\n+# Test language codes for language_code_re\n+test_codes = [\n+    'en-us',\n+    'en-latn-us',\n+    'en-Latn-US',\n+    'zh-Hans-CN',\n+    'sr-Cyrl-RS',\n+    'en',\n+    'en-US-x-twain',\n+]\n+\n+print(\"\\n\\nTesting current Django language_code_re:\")\n+for code in test_codes:\n+    match = language_code_re.match(code)\n+    if match:\n+        print(f\"{code} -> MATCH\")\n+    else:\n+        print(f\"{code} -> NO MATCH\")\ndiff --git a/testproject/manage.py b/testproject/manage.py\nnew file mode 100755\nindex 0000000000..6253a24931\n--- /dev/null\n+++ b/testproject/manage.py\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python\n+\"\"\"Django's command-line utility for administrative tasks.\"\"\"\n+import os\n+import sys\n+\n+\n+def main():\n+    \"\"\"Run administrative tasks.\"\"\"\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')\n+    try:\n+        from django.core.management import execute_from_command_line\n+    except ImportError as exc:\n+        raise ImportError(\n+            \"Couldn't import Django. Are you sure it's installed and \"\n+            \"available on your PYTHONPATH environment variable? Did you \"\n+            \"forget to activate a virtual environment?\"\n+        ) from exc\n+    execute_from_command_line(sys.argv)\n+\n+\n+if __name__ == '__main__':\n+    main()\ndiff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py\nnew file mode 100644\nindex 0000000000..90debc9315\n--- /dev/null\n+++ b/testproject/testproject/asgi.py\n@@ -0,0 +1,16 @@\n+\"\"\"\n+ASGI config for testproject project.\n+\n+It exposes the ASGI callable as a module-level variable named ``application``.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/\n+\"\"\"\n+\n+import os\n+\n+from django.core.asgi import get_asgi_application\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')\n+\n+application = get_asgi_application()\ndiff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py\nnew file mode 100644\nindex 0000000000..be4d51fe56\n--- /dev/null\n+++ b/testproject/testproject/settings.py\n@@ -0,0 +1,130 @@\n+\"\"\"\n+Django settings for testproject project.\n+\n+Generated by 'django-admin startproject' using Django 4.1.dev20211203105622.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/topics/settings/\n+\n+For the full list of settings and their values, see\n+https://docs.djangoproject.com/en/dev/ref/settings/\n+\"\"\"\n+\n+from pathlib import Path\n+\n+# Build paths inside the project like this: BASE_DIR / 'subdir'.\n+BASE_DIR = Path(__file__).resolve().parent.parent\n+\n+\n+# Quick-start development settings - unsuitable for production\n+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/\n+\n+# SECURITY WARNING: keep the secret key used in production secret!\n+SECRET_KEY = 'django-insecure-3%j@wv$9qv7idl0!u+ctzi7%ui%2^ox6ht9)5t_f)@_a*+f&!i'\n+\n+# SECURITY WARNING: don't run with debug turned on in production!\n+DEBUG = True\n+\n+ALLOWED_HOSTS = ['*']\n+\n+\n+# Application definition\n+\n+INSTALLED_APPS = [\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.staticfiles',\n+]\n+\n+MIDDLEWARE = [\n+    'django.middleware.security.SecurityMiddleware',\n+    'django.contrib.sessions.middleware.SessionMiddleware',\n+    'django.middleware.locale.LocaleMiddleware',  # Added for i18n\n+    'django.middleware.common.CommonMiddleware',\n+    'django.middleware.csrf.CsrfViewMiddleware',\n+    'django.contrib.auth.middleware.AuthenticationMiddleware',\n+    'django.contrib.messages.middleware.MessageMiddleware',\n+    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n+]\n+\n+ROOT_URLCONF = 'testproject.urls'\n+\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n+\n+WSGI_APPLICATION = 'testproject.wsgi.application'\n+\n+\n+# Database\n+# https://docs.djangoproject.com/en/dev/ref/settings/#databases\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': BASE_DIR / 'db.sqlite3',\n+    }\n+}\n+\n+\n+# Password validation\n+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators\n+\n+AUTH_PASSWORD_VALIDATORS = [\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n+    },\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n+    },\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n+    },\n+    {\n+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n+    },\n+]\n+\n+\n+# Internationalization\n+# https://docs.djangoproject.com/en/dev/topics/i18n/\n+\n+LANGUAGE_CODE = 'en-us'\n+\n+LANGUAGES = [\n+    ('en-us', \"English\"),\n+    ('en-latn-us', \"Latin English\"),\n+    ('en-Latn-US', \"BCP 47 case format\"),\n+]\n+\n+TIME_ZONE = 'UTC'\n+\n+USE_I18N = True\n+\n+USE_TZ = True\n+\n+\n+# Static files (CSS, JavaScript, Images)\n+# https://docs.djangoproject.com/en/dev/howto/static-files/\n+\n+STATIC_URL = 'static/'\n+\n+# Default primary key field type\n+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field\n+\n+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\ndiff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py\nnew file mode 100644\nindex 0000000000..ce876a6512\n--- /dev/null\n+++ b/testproject/testproject/urls.py\n@@ -0,0 +1,30 @@\n+\"\"\"testproject URL Configuration\n+\n+The `urlpatterns` list routes URLs to views. For more information please see:\n+    https://docs.djangoproject.com/en/dev/topics/http/urls/\n+Examples:\n+Function views\n+    1. Add an import:  from my_app import views\n+    2. Add a URL to urlpatterns:  path('', views.home, name='home')\n+Class-based views\n+    1. Add an import:  from other_app.views import Home\n+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\n+Including another URLconf\n+    1. Import the include() function: from django.urls import include, path\n+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n+\"\"\"\n+from django.contrib import admin\n+from django.urls import path\n+from django.conf.urls.i18n import i18n_patterns\n+from django.http import HttpResponse\n+\n+def bangiah(request):\n+    return HttpResponse('U!')\n+\n+urlpatterns = [\n+    path('admin/', admin.site.urls),\n+]\n+\n+urlpatterns += i18n_patterns(\n+    path('', bangiah),\n+)\ndiff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py\nnew file mode 100644\nindex 0000000000..435e21ceb7\n--- /dev/null\n+++ b/testproject/testproject/wsgi.py\n@@ -0,0 +1,16 @@\n+\"\"\"\n+WSGI config for testproject project.\n+\n+It exposes the WSGI callable as a module-level variable named ``application``.\n+\n+For more information on this file, see\n+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/\n+\"\"\"\n+\n+import os\n+\n+from django.core.wsgi import get_wsgi_application\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')\n+\n+application = get_wsgi_application()\n", "gold_standard_diff": "diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 7dcc77b46cdd..f4e35eabbcb5 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -43,7 +43,7 @@\n     re.IGNORECASE\n )\n \n-language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+)?)(/|$)')\n+language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+){0,2})(/|$)')\n \n \n @receiver(setting_changed)\ndiff --git a/docs/releases/4.1.txt b/docs/releases/4.1.txt\nindex cc412bebfaef..543c9caf6ed0 100644\n--- a/docs/releases/4.1.txt\n+++ b/docs/releases/4.1.txt\n@@ -183,7 +183,8 @@ Generic Views\n Internationalization\n ~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* The :func:`~django.conf.urls.i18n.i18n_patterns` function now supports\n+  languages with both scripts and regions.\n \n Logging\n ~~~~~~~\ndiff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex bb6ea15f858b..0b419d426c71 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1593,22 +1593,41 @@ def test_get_supported_language_variant_null(self):\n     @override_settings(\n         LANGUAGES=[\n             ('en', 'English'),\n+            ('en-latn-us', 'Latin English'),\n+            ('en-Latn-US', 'BCP 47 case format'),\n             ('de', 'German'),\n+            ('de-1996', 'German, orthography of 1996'),\n             ('de-at', 'Austrian German'),\n+            ('de-ch-1901', 'German, Swiss variant, traditional orthography'),\n+            ('i-mingo', 'Mingo'),\n+            ('kl-tunumiit', 'Tunumiisiut'),\n+            ('nan-hani-tw', 'Hanji'),\n             ('pl', 'Polish'),\n         ],\n     )\n     def test_get_language_from_path_real(self):\n         g = trans_real.get_language_from_path\n-        self.assertEqual(g('/pl/'), 'pl')\n-        self.assertEqual(g('/pl'), 'pl')\n-        self.assertIsNone(g('/xyz/'))\n-        self.assertEqual(g('/en/'), 'en')\n-        self.assertEqual(g('/en-gb/'), 'en')\n-        self.assertEqual(g('/de/'), 'de')\n-        self.assertEqual(g('/de-at/'), 'de-at')\n-        self.assertEqual(g('/de-ch/'), 'de')\n-        self.assertIsNone(g('/de-simple-page/'))\n+        tests = [\n+            ('/pl/', 'pl'),\n+            ('/pl', 'pl'),\n+            ('/xyz/', None),\n+            ('/en/', 'en'),\n+            ('/en-gb/', 'en'),\n+            ('/en-latn-us/', 'en-latn-us'),\n+            ('/en-Latn-US/', 'en-Latn-US'),\n+            ('/de/', 'de'),\n+            ('/de-1996/', 'de-1996'),\n+            ('/de-at/', 'de-at'),\n+            ('/de-ch/', 'de'),\n+            ('/de-ch-1901/', 'de-ch-1901'),\n+            ('/de-simple-page-test/', None),\n+            ('/i-mingo/', 'i-mingo'),\n+            ('/kl-tunumiit/', 'kl-tunumiit'),\n+            ('/nan-hani-tw/', 'nan-hani-tw'),\n+        ]\n+        for path, language in tests:\n+            with self.subTest(path=path):\n+                self.assertEqual(g(path), language)\n \n     def test_get_language_from_path_null(self):\n         g = trans_null.get_language_from_path\n@@ -1813,7 +1832,7 @@ def test_unprefixed_language_other_than_accept_language(self):\n \n     def test_page_with_dash(self):\n         # A page starting with /de* shouldn't match the 'de' language code.\n-        response = self.client.get('/de-simple-page/')\n+        response = self.client.get('/de-simple-page-test/')\n         self.assertEqual(response.content, b'Yes')\n \n     def test_no_redirect_on_404(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15098"}