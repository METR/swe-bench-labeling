{"instance_id": "mwaskom__seaborn-3187", "score": "I", "diff": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..0d9adfba 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -378,7 +378,17 @@ class ContinuousBase(Scale):\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n-            labels = axis.major.formatter.format_ticks(locs)\n+            formatter = axis.major.formatter\n+            labels = formatter.format_ticks(locs)\n+            \n+            # Check if the formatter is a ScalarFormatter and has an offset\n+            if isinstance(formatter, ScalarFormatter) and formatter.offset != 0:\n+                offset = formatter.offset\n+                # Apply the offset to the labels\n+                labels = [f\"{float(label) * 10**offset:.0f}\" for label in labels]\n+                # Add the offset information to the first label\n+                labels[0] = f\"{labels[0]} (x10^{offset})\"\n+            \n             new._legend = list(locs), list(labels)\n \n         return new\n", "gold_standard_diff": "From 2d8e5f2bc00250d9237f1652da27f85b139f3460 Mon Sep 17 00:00:00 2001\nFrom: Michael Waskom <mwaskom@gmail.com>\nDate: Fri, 9 Dec 2022 07:20:06 -0500\nSubject: [PATCH 1/2] Don't show offset / scientific notation in numeric\n legends\n\n---\n seaborn/_core/scales.py  | 8 ++++++++\n seaborn/utils.py         | 4 ++++\n tests/_core/test_plot.py | 9 +++++++++\n tests/test_relational.py | 6 ++++++\n 4 files changed, 27 insertions(+)\n\ndiff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2ed..c91f6fdc46 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -378,6 +378,14 @@ def spacer(x):\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n+            # Avoid having an offset / scientific notation in a legend\n+            # as we don't represent that anywhere so it ends up incorrect.\n+            # This could become an option (e.g. Continuous.label(offset=True))\n+            # in which case we would need to figure out how to show it.\n+            if hasattr(axis.major.formatter, \"set_useOffset\"):\n+                axis.major.formatter.set_useOffset(False)\n+            if hasattr(axis.major.formatter, \"set_scientific\"):\n+                axis.major.formatter.set_scientific(False)\n             labels = axis.major.formatter.format_ticks(locs)\n             new._legend = list(locs), list(labels)\n \ndiff --git a/seaborn/utils.py b/seaborn/utils.py\nindex 2407853c51..3cf01755a4 100644\n--- a/seaborn/utils.py\n+++ b/seaborn/utils.py\n@@ -699,6 +699,10 @@ def get_view_interval(self):\n         formatter = mpl.ticker.LogFormatter()\n     else:\n         formatter = mpl.ticker.ScalarFormatter()\n+        # Avoid having an offset/scientific notation which we don't currently\n+        # have any way of representing in the legend\n+        formatter.set_useOffset(False)\n+        formatter.set_scientific(False)\n     formatter.axis = dummy_axis()\n \n     # TODO: The following two lines should be replaced\ndiff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex e4ba99e12f..2bff6bed17 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -2051,6 +2051,15 @@ def _legend_artist(self, variables, value, scales):\n         p = Plot(**xy, color=[\"a\", \"b\", \"c\", \"d\"]).add(NoLegendMark()).plot()\n         assert not p._figure.legends\n \n+    def test_legend_has_no_offset(self, xy):\n+\n+        color = np.add(xy[\"x\"], 1e8)\n+        p = Plot(**xy, color=color).add(MockMark()).plot()\n+        legend = p._figure.legends[0]\n+        assert legend.texts\n+        for text in legend.texts:\n+            assert float(text.get_text()) > 1e7\n+\n \n class TestDefaultObject:\n \ndiff --git a/tests/test_relational.py b/tests/test_relational.py\nindex b100f4ecac..467b04a512 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -675,6 +675,12 @@ def test_ax_kwarg_removal(self, long_df):\n         assert len(ax.collections) == 0\n         assert len(g.ax.collections) > 0\n \n+    def test_legend_has_no_offset(self, long_df):\n+\n+        g = relplot(data=long_df, x=\"x\", y=\"y\", hue=long_df[\"z\"] + 1e8)\n+        for text in g.legend.texts:\n+            assert float(text.get_text()) > 1e7\n+\n \n class TestLinePlotter(SharedAxesLevelTests, Helpers):\n \n\nFrom 9372112ea432a8b3d5bd9e11051a999b63905e86 Mon Sep 17 00:00:00 2001\nFrom: Michael Waskom <mwaskom@gmail.com>\nDate: Sat, 17 Dec 2022 19:05:57 -0500\nSubject: [PATCH 2/2] Update release notes\n\n---\n doc/whatsnew/v0.12.2.rst | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/doc/whatsnew/v0.12.2.rst b/doc/whatsnew/v0.12.2.rst\nindex 8eeb8f1990..ad12a778e1 100644\n--- a/doc/whatsnew/v0.12.2.rst\n+++ b/doc/whatsnew/v0.12.2.rst\n@@ -6,6 +6,8 @@ v0.12.2 (Unreleased)\n \n - |Enhancement| Automatic mark widths are now calculated separately for unshared facet axes (:pr:`3119`).\n \n+- |Fix| Fixed a bug where legends for numeric variables with large values with be incorrectly shown (i.e. with a missing offset or exponent; :pr:`3187`).\n+\n - |Fix| Fixed a regression in v0.12.0 where manually-added labels could have duplicate legend entries (:pr:`3116`).\n \n - |Fix| Fixed a bug in :func:`histplot` with `kde=True` and `log_scale=True` where the curve was not scaled properly (:pr:`3173`).\n", "gold_standard_pr_link": "https://github.com/mwaskom/seaborn/pull/3187"}