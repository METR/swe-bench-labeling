{"instance_id": "astropy__astropy-14508", "score": "C", "diff": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..75d740a866 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,6 +1299,42 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n+    # First try using the standard string representation\n+    value_str = str(value)\n+    \n+    # Check if it needs a decimal point\n+    if \".\" not in value_str and \"E\" not in value_str and \"e\" not in value_str:\n+        value_str += \".0\"\n+    \n+    # Check the length\n+    if len(value_str) <= 20:\n+        # Normalize E notation if present\n+        if \"E\" in value_str or \"e\" in value_str:\n+            if \"e\" in value_str:\n+                value_str = value_str.replace(\"e\", \"E\")\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+            \n+            # Check length again\n+            if len(value_str) > 20:\n+                # Fall back to .16G format if normalization made it too long\n+                value_str = f\"{value:.16G}\"\n+        \n+        # If still within limits, use it\n+        if len(value_str) <= 20:\n+            # Handle special float values to maintain compatibility\n+            if value_str.upper() in ('INF', '-INF', 'NAN'):\n+                value_str = value_str.upper()\n+                if \".\" not in value_str:\n+                    value_str += \".0\"\n+            return value_str\n+    \n+    # Fall back to original implementation with .16G format\n     value_str = f\"{value:.16G}\"\n     if \".\" not in value_str and \"E\" not in value_str:\n         value_str += \".0\"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 65df5b1b77..d02c4f9eda 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\ndiff --git a/test_card_fix.py b/test_card_fix.py\nnew file mode 100644\nindex 0000000000..90722a6ba4\n--- /dev/null\n+++ b/test_card_fix.py\n@@ -0,0 +1,72 @@\n+from astropy.io import fits\n+\n+# Monkey patch the improved function for testing\n+def _format_float_improved(value):\n+    \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n+    # First try using the standard string representation\n+    value_str = str(value)\n+    \n+    # Check if it needs a decimal point\n+    if \".\" not in value_str and \"E\" not in value_str and \"e\" not in value_str:\n+        value_str += \".0\"\n+    \n+    # Check the length\n+    if len(value_str) <= 20:\n+        # Normalize E notation if present\n+        if \"E\" in value_str or \"e\" in value_str:\n+            if \"e\" in value_str:\n+                value_str = value_str.replace(\"e\", \"E\")\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+            \n+            # Check length again\n+            if len(value_str) > 20:\n+                # Fall back to .16G format\n+                value_str = f\"{value:.16G}\"\n+        \n+        # If still within limits, use it\n+        if len(value_str) <= 20:\n+            return value_str\n+    \n+    # Fall back to original implementation\n+    value_str = f\"{value:.16G}\"\n+    if \".\" not in value_str and \"E\" not in value_str:\n+        value_str += \".0\"\n+    elif \"E\" in value_str:\n+        significand, exponent = value_str.split(\"E\")\n+        if exponent[0] in (\"+\", \"-\"):\n+            sign = exponent[0]\n+            exponent = exponent[1:]\n+        else:\n+            sign = \"\"\n+        value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+\n+    # Limit the value string to at most 20 characters.\n+    str_len = len(value_str)\n+    if str_len > 20:\n+        idx = value_str.find(\"E\")\n+        if idx < 0:\n+            value_str = value_str[:20]\n+        else:\n+            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n+\n+    return value_str\n+\n+# Replace the original function\n+import astropy.io.fits.card\n+astropy.io.fits.card._format_float = _format_float_improved\n+\n+# Now test the original issue\n+value = 0.009125\n+print(f\"Testing with value: {value}\")\n+\n+card = fits.Card('HIERARCH ESO IFM CL RADIUS', value, '[m] radius arround actuator to avoid')\n+print(f\"\\nCard created successfully!\")\n+print(f\"repr(card): {repr(card)}\")\n+print(f\"str(card): {str(card)}\")\n+print(f\"\\nComment truncated: {'[m] radius arround actuator' in str(card) and 'to avoid' not in str(card)}\")\ndiff --git a/test_card_float_format.py b/test_card_float_format.py\nnew file mode 100644\nindex 0000000000..ff709fc665\n--- /dev/null\n+++ b/test_card_float_format.py\n@@ -0,0 +1,82 @@\n+\"\"\"\n+Test case for the float formatting fix that can be added to the test suite\n+\"\"\"\n+import warnings\n+import pytest\n+from astropy.io import fits\n+\n+\n+def test_card_float_representation_precision():\n+    \"\"\"\n+    Test that Card uses optimal float string representation.\n+    \n+    Regression test for issue where values like 0.009125 were unnecessarily\n+    expanded to 0.009124999999999999, causing comment truncation.\n+    \"\"\"\n+    # Test the specific problematic case\n+    value = 0.009125\n+    comment = '[m] radius arround actuator to avoid'\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\") \n+        card = fits.Card('HIERARCH ESO IFM CL RADIUS', value, comment)\n+        \n+        # Should not generate truncation warning\n+        truncation_warnings = [warning for warning in w if 'Card is too long' in str(warning.message)]\n+        assert len(truncation_warnings) == 0\n+        \n+        # Comment should not be truncated\n+        card_str = str(card)\n+        assert comment in card_str\n+        \n+        # Value should use compact representation\n+        assert '0.009125' in card_str\n+        assert '0.009124999999999999' not in card_str\n+\n+\n+def test_card_float_various_formats():\n+    \"\"\"Test that various float formats are handled correctly.\"\"\"\n+    test_cases = [\n+        # (value, expected_in_card_string)\n+        (0.1, '0.1'),\n+        (0.009125, '0.009125'),\n+        (1.234567890123456789, '1.2345678901234567'),  # Should use str() representation\n+        (1e-10, '1E-10'),\n+        (1e10, '10000000000.0'),\n+        (123.0, '123.0'),\n+    ]\n+    \n+    for value, expected in test_cases:\n+        card = fits.Card('TEST', value, 'comment')\n+        card_str = str(card)\n+        assert expected in card_str, f\"Expected '{expected}' in card string for value {value}, got: {card_str}\"\n+\n+\n+def test_card_float_round_trip():\n+    \"\"\"Test that float values can be round-tripped through Card creation.\"\"\"\n+    # Create a header with a problematic float value\n+    hdr = fits.Header()\n+    hdr['TEST'] = (0.009125, '[m] radius arround actuator to avoid')\n+    \n+    # Get the card\n+    card = hdr.cards['TEST']\n+    \n+    # Should be able to recreate the card without warnings\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        new_card = fits.Card(card.keyword, card.value, card.comment)\n+        \n+        # No truncation warning should be issued\n+        truncation_warnings = [warning for warning in w if 'Card is too long' in str(warning.message)]\n+        assert len(truncation_warnings) == 0\n+        \n+        # Values and comments should match\n+        assert new_card.value == card.value\n+        assert new_card.comment == card.comment\n+\n+\n+if __name__ == \"__main__\":\n+    test_card_float_representation_precision()\n+    test_card_float_various_formats() \n+    test_card_float_round_trip()\n+    print(\"All tests passed!\")\ndiff --git a/test_card_issue.py b/test_card_issue.py\nnew file mode 100644\nindex 0000000000..191740d89e\n--- /dev/null\n+++ b/test_card_issue.py\n@@ -0,0 +1,23 @@\n+from astropy.io import fits\n+\n+# Test the issue with float representation\n+value = 0.009125\n+print(f\"Original value: {value}\")\n+print(f\"String representation: {str(value)}\")\n+print(f\"Format with .16G: {value:.16G}\")\n+print(f\"Length of str(value): {len(str(value))}\")\n+print(f\"Length of .16G format: {len(f'{value:.16G}')}\")\n+\n+# Try to create a card with this value\n+try:\n+    card = fits.Card('HIERARCH ESO IFM CL RADIUS', value, '[m] radius arround actuator to avoid')\n+    print(f\"\\nCard created:\")\n+    print(f\"repr(card): {repr(card)}\")\n+    print(f\"str(card): {str(card)}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+\n+# Also test the _format_float function directly\n+from astropy.io.fits.card import _format_float\n+print(f\"\\n_format_float({value}): '{_format_float(value)}'\")\n+print(f\"Length: {len(_format_float(value))}\")\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..369592e3b1\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,80 @@\n+import numpy as np\n+from astropy.io import fits\n+\n+# Test various edge cases\n+test_cases = [\n+    # (keyword, value, comment, expected_truncation)\n+    ('TEST1', 0.009125, '[m] radius arround actuator to avoid', False),\n+    ('TEST2', 0.1, 'A comment', False),\n+    ('TEST3', 1.23456789012345678901234567890, 'Many decimals', False),\n+    ('TEST4', 1e-10, 'Small number', False),\n+    ('TEST5', 1e300, 'Large number', False),\n+    ('TEST6', float('inf'), 'Infinity', False),\n+    ('TEST7', float('-inf'), 'Negative infinity', False),\n+    ('TEST8', float('nan'), 'Not a number', False),\n+    ('HIERARCH VERY LONG KEYWORD NAME', 0.009125, 'This should truncate the comment', True),\n+    ('TEST9', 12345678901234567890.0, 'Large integer as float', False),\n+]\n+\n+print(\"Testing various Card creations:\")\n+print(\"-\" * 80)\n+\n+for keyword, value, comment, expect_truncation in test_cases:\n+    try:\n+        # Suppress warnings for this test\n+        import warnings\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            card = fits.Card(keyword, value, comment)\n+            \n+            # Check if warning was issued\n+            warning_issued = any('Card is too long' in str(warning.message) for warning in w)\n+            \n+            # Check if comment was truncated\n+            comment_truncated = comment not in str(card)\n+            \n+            print(f\"\\nKeyword: {keyword}\")\n+            print(f\"Value: {value} -> formatted as: '{card._value}'\")\n+            print(f\"Comment: {comment}\")\n+            print(f\"Warning issued: {warning_issued}\")\n+            print(f\"Comment truncated: {comment_truncated}\")\n+            print(f\"Expected truncation: {expect_truncation}\")\n+            print(f\"Result: {'PASS' if comment_truncated == expect_truncation else 'FAIL'}\")\n+            print(f\"Card: {str(card)[:80]}\")\n+            \n+    except Exception as e:\n+        print(f\"\\nKeyword: {keyword}\")\n+        print(f\"ERROR: {str(e)}\")\n+\n+# Test that we can read and recreate cards from a FITS file\n+print(\"\\n\" + \"=\"*80)\n+print(\"Testing round-trip card creation:\")\n+\n+# Create a test FITS file with our problematic value\n+hdu = fits.PrimaryHDU()\n+hdu.header['ESO IFM CL RADIUS'] = (0.009125, '[m] radius arround actuator to avoid')\n+hdu.header['TESTVAL'] = (1.234567890123456789, 'Many decimals')\n+\n+# Get the cards\n+card1 = hdu.header.cards['ESO IFM CL RADIUS'] \n+card2 = hdu.header.cards['TESTVAL']\n+\n+print(f\"\\nOriginal card 1: {card1}\")\n+print(f\"Can recreate without warning: \", end=\"\")\n+try:\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        new_card1 = fits.Card(f'HIERARCH {card1.keyword}', card1.value, card1.comment)\n+        print(\"YES\" if len(w) == 0 else f\"NO (warning: {w[0].message})\")\n+except Exception as e:\n+    print(f\"ERROR: {e}\")\n+\n+print(f\"\\nOriginal card 2: {card2}\")\n+print(f\"Can recreate without warning: \", end=\"\")\n+try:\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        new_card2 = fits.Card(card2.keyword, card2.value, card2.comment)\n+        print(\"YES\" if len(w) == 0 else f\"NO (warning: {w[0].message})\")\n+except Exception as e:\n+    print(f\"ERROR: {e}\")\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..a068c91980\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,118 @@\n+import numpy as np\n+from astropy.io.fits.card import _format_float\n+\n+# Test edge cases including NaN, inf, very small/large numbers, etc.\n+test_cases = [\n+    # (value, description)\n+    (0.0, \"zero\"),\n+    (-0.0, \"negative zero\"),\n+    (1.0, \"one\"),\n+    (-1.0, \"negative one\"),\n+    (0.1, \"0.1\"),\n+    (0.01, \"0.01\"),\n+    (0.001, \"0.001\"),\n+    (0.0001, \"0.0001\"),\n+    (0.00001, \"0.00001\"),\n+    (0.000001, \"0.000001\"),\n+    (0.009125, \"the problematic value\"),\n+    (12345678901234567890.0, \"very large integer-like float\"),\n+    (1.23456789012345678901234567890, \"many decimal places\"),\n+    (1e-300, \"very small number\"),\n+    (1e300, \"very large number\"),\n+    (float('inf'), \"infinity\"),\n+    (float('-inf'), \"negative infinity\"),\n+    (float('nan'), \"NaN\"),\n+    (np.float32(0.009125), \"numpy float32\"),\n+    (np.float64(0.009125), \"numpy float64\"),\n+]\n+\n+def _format_float_improved(value):\n+    \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n+    # First try using the standard string representation\n+    value_str = str(value)\n+    \n+    # Check if it needs a decimal point\n+    if \".\" not in value_str and \"E\" not in value_str and \"e\" not in value_str:\n+        value_str += \".0\"\n+    \n+    # Check the length\n+    if len(value_str) <= 20:\n+        # Normalize E notation if present\n+        if \"E\" in value_str or \"e\" in value_str:\n+            if \"e\" in value_str:\n+                value_str = value_str.replace(\"e\", \"E\")\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+            \n+            # Check length again\n+            if len(value_str) > 20:\n+                # Fall back to .16G format\n+                value_str = f\"{value:.16G}\"\n+        \n+        # If still within limits, use it\n+        if len(value_str) <= 20:\n+            return value_str\n+    \n+    # Fall back to original implementation\n+    value_str = f\"{value:.16G}\"\n+    if \".\" not in value_str and \"E\" not in value_str:\n+        value_str += \".0\"\n+    elif \"E\" in value_str:\n+        significand, exponent = value_str.split(\"E\")\n+        if exponent[0] in (\"+\", \"-\"):\n+            sign = exponent[0]\n+            exponent = exponent[1:]\n+        else:\n+            sign = \"\"\n+        value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+\n+    # Limit the value string to at most 20 characters.\n+    str_len = len(value_str)\n+    if str_len > 20:\n+        idx = value_str.find(\"E\")\n+        if idx < 0:\n+            value_str = value_str[:20]\n+        else:\n+            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n+\n+    return value_str\n+\n+print(\"Testing edge cases:\")\n+print(\"-\" * 100)\n+print(f\"{'Description':<30} {'Value':<25} {'Original':<25} {'Improved':<25} {'Same?':<10}\")\n+print(\"-\" * 100)\n+\n+for value, desc in test_cases:\n+    try:\n+        original = _format_float(value)\n+        improved = _format_float_improved(value)\n+        same = original == improved\n+        print(f\"{desc:<30} {str(value):<25} {original:<25} {improved:<25} {same:<10}\")\n+    except Exception as e:\n+        print(f\"{desc:<30} {str(value):<25} ERROR: {str(e)}\")\n+\n+# Check round-trip conversion\n+print(\"\\n\\nRound-trip conversion test (can we parse back what we format?):\")\n+print(\"-\" * 80)\n+\n+# Use astropy's parsing function\n+from astropy.io.fits.card import _int_or_float\n+\n+for value, desc in test_cases[:15]:  # Skip inf/nan for round-trip\n+    try:\n+        improved = _format_float_improved(value)\n+        parsed = _int_or_float(improved)\n+        \n+        # Check if they're close enough (within floating point precision)\n+        if isinstance(parsed, float) and not (np.isnan(value) or np.isinf(value)):\n+            close = np.isclose(value, parsed, rtol=1e-15)\n+            print(f\"{desc:<30} {value} -> '{improved}' -> {parsed} (close: {close})\")\n+        else:\n+            print(f\"{desc:<30} {value} -> '{improved}' -> {parsed}\")\n+    except Exception as e:\n+        print(f\"{desc:<30} ERROR: {str(e)}\")\ndiff --git a/test_fix_verification.py b/test_fix_verification.py\nnew file mode 100644\nindex 0000000000..f3227fe4d4\n--- /dev/null\n+++ b/test_fix_verification.py\n@@ -0,0 +1,61 @@\n+\"\"\"\n+Test to verify the fix for the issue where io.fits.Card may use a string \n+representation of floats that is larger than necessary.\n+\"\"\"\n+import warnings\n+from astropy.io import fits\n+\n+def test_float_representation_issue():\n+    \"\"\"Test that we can create a Card with value 0.009125 without truncating the comment\"\"\"\n+    \n+    # The problematic case from the issue\n+    value = 0.009125\n+    comment = '[m] radius arround actuator to avoid'\n+    \n+    # This should not produce a warning about truncation\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        card = fits.Card('HIERARCH ESO IFM CL RADIUS', value, comment)\n+        \n+        # Check no warning was issued\n+        truncation_warnings = [warning for warning in w if 'Card is too long' in str(warning.message)]\n+        assert len(truncation_warnings) == 0, f\"Unexpected truncation warning: {truncation_warnings}\"\n+        \n+        # Check the comment is not truncated\n+        assert comment in str(card), f\"Comment was truncated: {str(card)}\"\n+        \n+        # Check the value is formatted correctly\n+        assert '0.009125' in str(card), f\"Value not formatted as expected: {str(card)}\"\n+        assert '0.009124999999999999' not in str(card), f\"Value expanded unnecessarily: {str(card)}\"\n+        \n+    print(\"\u2713 Test passed: Card created successfully without truncation\")\n+    print(f\"  Card: {str(card)}\")\n+    \n+def test_other_float_values():\n+    \"\"\"Test that other float values still work correctly\"\"\"\n+    \n+    test_cases = [\n+        (0.1, 'Simple decimal'),\n+        (1.234567890123456789, 'Many decimals'),\n+        (1e-10, 'Scientific notation small'),\n+        (1e10, 'Scientific notation large'),\n+    ]\n+    \n+    for value, comment in test_cases:\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            card = fits.Card('TESTKEY', value, comment)\n+            \n+            # These should not produce truncation warnings\n+            truncation_warnings = [warning for warning in w if 'Card is too long' in str(warning.message)]\n+            assert len(truncation_warnings) == 0, f\"Unexpected warning for value {value}\"\n+            \n+            # Comment should not be truncated\n+            assert comment in str(card), f\"Comment truncated for value {value}\"\n+            \n+            print(f\"\u2713 Value {value} formatted correctly\")\n+\n+if __name__ == \"__main__\":\n+    test_float_representation_issue()\n+    test_other_float_values()\n+    print(\"\\nAll tests passed!\")\ndiff --git a/test_format_float.py b/test_format_float.py\nnew file mode 100644\nindex 0000000000..c494d1bc55\n--- /dev/null\n+++ b/test_format_float.py\n@@ -0,0 +1,97 @@\n+from astropy.io.fits.card import _format_float\n+\n+# Test various float values\n+test_values = [\n+    0.009125,\n+    0.1,\n+    0.5,\n+    1.0,\n+    1.234567890123456789,\n+    1e-10,\n+    1e10,\n+    123456789.123456789,\n+    0.000000001,\n+]\n+\n+print(\"Testing _format_float function:\")\n+print(\"-\" * 60)\n+print(f\"{'Value':<25} {'str(value)':<25} {'_format_float(value)':<25}\")\n+print(\"-\" * 60)\n+\n+for value in test_values:\n+    str_val = str(value)\n+    formatted = _format_float(value)\n+    print(f\"{value:<25} {str_val:<25} {formatted:<25}\")\n+\n+print(\"\\nTesting the issue case specifically:\")\n+value = 0.009125\n+print(f\"Value: {value}\")\n+print(f\"str(value): '{str(value)}' (length: {len(str(value))})\")\n+print(f\"_format_float(value): '{_format_float(value)}' (length: {len(_format_float(value))})\")\n+\n+# Test if using str() first would work\n+def _format_float_improved(value):\n+    \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n+    # First try using the standard string representation\n+    value_str = str(value)\n+    \n+    # Check if it needs a decimal point\n+    if \".\" not in value_str and \"E\" not in value_str and \"e\" not in value_str:\n+        value_str += \".0\"\n+    \n+    # Check the length\n+    if len(value_str) <= 20:\n+        # Normalize E notation if present\n+        if \"E\" in value_str or \"e\" in value_str:\n+            if \"e\" in value_str:\n+                value_str = value_str.replace(\"e\", \"E\")\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+            \n+            # Check length again\n+            if len(value_str) > 20:\n+                # Fall back to .16G format\n+                value_str = f\"{value:.16G}\"\n+        \n+        # If still within limits, use it\n+        if len(value_str) <= 20:\n+            return value_str\n+    \n+    # Fall back to original implementation\n+    value_str = f\"{value:.16G}\"\n+    if \".\" not in value_str and \"E\" not in value_str:\n+        value_str += \".0\"\n+    elif \"E\" in value_str:\n+        significand, exponent = value_str.split(\"E\")\n+        if exponent[0] in (\"+\", \"-\"):\n+            sign = exponent[0]\n+            exponent = exponent[1:]\n+        else:\n+            sign = \"\"\n+        value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+\n+    # Limit the value string to at most 20 characters.\n+    str_len = len(value_str)\n+    if str_len > 20:\n+        idx = value_str.find(\"E\")\n+        if idx < 0:\n+            value_str = value_str[:20]\n+        else:\n+            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n+\n+    return value_str\n+\n+print(\"\\n\\nTesting improved version:\")\n+print(\"-\" * 60)\n+print(f\"{'Value':<25} {'Original':<25} {'Improved':<25}\")\n+print(\"-\" * 60)\n+\n+for value in test_values:\n+    original = _format_float(value)\n+    improved = _format_float_improved(value)\n+    print(f\"{value:<25} {original:<25} {improved:<25}\")\ndiff --git a/test_special_floats.py b/test_special_floats.py\nnew file mode 100644\nindex 0000000000..344b08d214\n--- /dev/null\n+++ b/test_special_floats.py\n@@ -0,0 +1,29 @@\n+import numpy as np\n+from astropy.io.fits.card import _format_float\n+\n+# Test special float cases\n+test_values = [\n+    float('inf'),\n+    float('-inf'), \n+    float('nan'),\n+    np.inf,\n+    -np.inf,\n+    np.nan,\n+]\n+\n+print(\"Testing special float values:\")\n+print(\"-\" * 60)\n+print(f\"{'Value':<20} {'str(value)':<20} {'.16G format':<20} {'Original':<20}\")\n+print(\"-\" * 60)\n+\n+for value in test_values:\n+    str_val = str(value)\n+    format_16g = f\"{value:.16G}\"\n+    original = _format_float(value)\n+    print(f\"{repr(value):<20} {str_val:<20} {format_16g:<20} {original:<20}\")\n+\n+# Check if these need special handling\n+print(\"\\nChecking if special values need .0 suffix:\")\n+for value in [float('inf'), float('-inf'), float('nan')]:\n+    formatted = f\"{value:.16G}\"\n+    print(f\"{value}: '{formatted}' -> has decimal: {'.' in formatted}, has E: {'E' in formatted}\")\n", "gold_standard_diff": "From 3d8a2c6285e366d2b2f961343ef6e439a9d57b4d Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 11:00:06 +0000\nSubject: [PATCH 01/11] Fixed incorrect string representation of floats in\n Cards\n\n---\n astropy/io/fits/card.py              |  2 +-\n astropy/io/fits/tests/test_header.py | 21 +++++++++++++++++++++\n 2 files changed, 22 insertions(+), 1 deletion(-)\n\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89e8..de851737531f 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,7 +1299,7 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n+    value_str = str(value_str)\n     if \".\" not in value_str and \"E\" not in value_str:\n         value_str += \".0\"\n     elif \"E\" in value_str:\ndiff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a8f4e1160fcd..95ed9a64fde8 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,27 @@ def test_floating_point_value_card(self):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}    \"\n+        assert str(c) == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}    \"\n+        assert str(c) == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}    \"\n+        assert str(c) == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n\nFrom 7566bc2d0c7876cd0dab79a85ff12003c44747bb Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 11:10:00 +0000\nSubject: [PATCH 02/11] Fixed incorrect variable name\n\n---\n astropy/io/fits/card.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex de851737531f..4fc408711f8a 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,7 +1299,7 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = str(value_str)\n+    value_str = str(value)\n     if \".\" not in value_str and \"E\" not in value_str:\n         value_str += \".0\"\n     elif \"E\" in value_str:\n\nFrom a65f074bc1b01973d6115e57687c9821976cb19c Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 11:15:24 +0000\nSubject: [PATCH 03/11] Added changelog entry\n\n---\n docs/changes/io.fits/14508.bugfix.rst | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 docs/changes/io.fits/14508.bugfix.rst\n\ndiff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst\nnew file mode 100644\nindex 000000000000..4fbca7b77c52\n--- /dev/null\n+++ b/docs/changes/io.fits/14508.bugfix.rst\n@@ -0,0 +1,2 @@\n+`fits.io.Card` float representation now uses the default Python representation\n+for floating point values.\n\nFrom 89d46911c1c313d401956a5c2a1f737719eaf244 Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 11:42:02 +0000\nSubject: [PATCH 04/11] Fixed wrong check for exponent symbol\n\n---\n astropy/io/fits/card.py | 9 +++++----\n 1 file changed, 5 insertions(+), 4 deletions(-)\n\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 4fc408711f8a..78ecc7550235 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1300,19 +1300,20 @@ def _format_value(value):\n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n     value_str = str(value)\n-    if \".\" not in value_str and \"E\" not in value_str:\n-        value_str += \".0\"\n-    elif \"E\" in value_str:\n+\n+    if \"e\" in value_str:\n         # On some Windows builds of Python (and possibly other platforms?) the\n         # exponent is zero-padded out to, it seems, three digits.  Normalize\n         # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"E\")\n+        significand, exponent = value_str.split(\"e\")\n         if exponent[0] in (\"+\", \"-\"):\n             sign = exponent[0]\n             exponent = exponent[1:]\n         else:\n             sign = \"\"\n         value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+    elif \".\" not in value_str:\n+        value_str += \".0\"\n \n     # Limit the value string to at most 20 characters.\n     str_len = len(value_str)\n\nFrom 03730f37dff98ec3849f4e0efb3491ad1dfea782 Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 13:12:22 +0000\nSubject: [PATCH 05/11] Fix test_floating_point_string_representation_card\n assertion\n\n---\n astropy/io/fits/tests/test_header.py | 12 ++++++------\n 1 file changed, 6 insertions(+), 6 deletions(-)\n\ndiff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 95ed9a64fde8..c573100c91d2 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -147,16 +147,16 @@ def test_floating_point_string_representation_card(self):\n         k = \"HIERARCH ABC DEF GH IJKLMN\"\n         com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n         c = fits.Card(k, 0.009125, com)\n-        expected_str = f\"{k} = 0.009125 / {com}    \"\n-        assert str(c) == expected_str\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n         c = fits.Card(k, 8.95, com)\n-        expected_str = f\"{k} = 8.95 / {com}    \"\n-        assert str(c) == expected_str\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n         c = fits.Card(k, -99.9, com)\n-        expected_str = f\"{k} = -99.9 / {com}    \"\n-        assert str(c) == expected_str\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n\nFrom 50c51e336a2ed23dc3765fb606a4f9395d4cda18 Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 13:29:18 +0000\nSubject: [PATCH 06/11] Fixed incorrect changelog\n\n---\n docs/changes/io.fits/14508.bugfix.rst | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst\nindex 4fbca7b77c52..44946ade61c3 100644\n--- a/docs/changes/io.fits/14508.bugfix.rst\n+++ b/docs/changes/io.fits/14508.bugfix.rst\n@@ -1,2 +1,2 @@\n-`fits.io.Card` float representation now uses the default Python representation\n-for floating point values.\n+`io.fits.Card` now uses the default Python representation for floating point\n+values.\n\nFrom 60835aa8b73f64a7a4402a000605d2d0fa1105b9 Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 14:03:45 +0000\nSubject: [PATCH 07/11] Fixed incorrect changelog reference\n\n---\n docs/changes/io.fits/14508.bugfix.rst | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst\nindex 44946ade61c3..d75dbc26a3c5 100644\n--- a/docs/changes/io.fits/14508.bugfix.rst\n+++ b/docs/changes/io.fits/14508.bugfix.rst\n@@ -1,2 +1,2 @@\n-`io.fits.Card` now uses the default Python representation for floating point\n+`Card` now uses the default Python representation for floating point\n values.\n\nFrom b3cc12c818ebbf4a2dc1b1f25d29e22f7ddcfaaa Mon Sep 17 00:00:00 2001\nFrom: Tiago Gomes <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 15:01:50 +0000\nSubject: [PATCH 08/11] Fix Card reference in changelog\n\nCo-authored-by: P. L. Lim <2090236+pllim@users.noreply.github.com>\n---\n docs/changes/io.fits/14508.bugfix.rst | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/docs/changes/io.fits/14508.bugfix.rst b/docs/changes/io.fits/14508.bugfix.rst\nindex d75dbc26a3c5..b562e2c8b69d 100644\n--- a/docs/changes/io.fits/14508.bugfix.rst\n+++ b/docs/changes/io.fits/14508.bugfix.rst\n@@ -1,2 +1,2 @@\n-`Card` now uses the default Python representation for floating point\n+``Card`` now uses the default Python representation for floating point\n values.\n\nFrom 631b607f64aafed11003b5af722dbc4dd1df8051 Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 16:53:16 +0000\nSubject: [PATCH 09/11] Simplify handling of scientific notation in cards\n\n---\n astropy/io/fits/card.py | 32 +++++++++-----------------------\n 1 file changed, 9 insertions(+), 23 deletions(-)\n\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 78ecc7550235..1a9ce342f9e1 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1298,33 +1298,19 @@ def _format_value(value):\n \n \n def _format_float(value):\n-    \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = str(value)\n-\n-    if \"e\" in value_str:\n-        # On some Windows builds of Python (and possibly other platforms?) the\n-        # exponent is zero-padded out to, it seems, three digits.  Normalize\n-        # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"e\")\n-        if exponent[0] in (\"+\", \"-\"):\n-            sign = exponent[0]\n-            exponent = exponent[1:]\n-        else:\n-            sign = \"\"\n-        value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n-    elif \".\" not in value_str:\n-        value_str += \".0\"\n+    \"\"\"Format a floating number to make sure it is at most 20 characters.\"\"\"\n+    value_str = str(value).replace(\"e\", \"E\")\n \n     # Limit the value string to at most 20 characters.\n-    str_len = len(value_str)\n-\n-    if str_len > 20:\n+    if str_len := len(value_str) > 20:\n         idx = value_str.find(\"E\")\n-\n-        if idx < 0:\n-            value_str = value_str[:20]\n-        else:\n+        if idx > 0:\n+            # truncate significand (mantissa)\n             value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n+        else:\n+            # Python should never return a float representation larger than 20\n+            # characters unless it is using scientific notation\n+            raise RuntimeError(\"_format_float did not receive a float.\")\n \n     return value_str\n \n\nFrom 13db4049c28d14104e8c8044009b50373f3d8fd4 Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 17:01:20 +0000\nSubject: [PATCH 10/11] Fix incorrect assignment\n\n---\n astropy/io/fits/card.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 1a9ce342f9e1..12682534df4f 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1302,7 +1302,7 @@ def _format_float(value):\n     value_str = str(value).replace(\"e\", \"E\")\n \n     # Limit the value string to at most 20 characters.\n-    if str_len := len(value_str) > 20:\n+    if (str_len := len(value_str)) > 20:\n         idx = value_str.find(\"E\")\n         if idx > 0:\n             # truncate significand (mantissa)\n\nFrom 7054d58c980f240c81b53e4f4e95c675e19bb521 Mon Sep 17 00:00:00 2001\nFrom: kYwzor <tiago_gomes_76@hotmail.com>\nDate: Thu, 9 Mar 2023 17:50:57 +0000\nSubject: [PATCH 11/11] Revert truncation\n\n---\n astropy/io/fits/card.py | 11 +++++------\n 1 file changed, 5 insertions(+), 6 deletions(-)\n\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 12682534df4f..1b3285ddce92 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1304,13 +1304,12 @@ def _format_float(value):\n     # Limit the value string to at most 20 characters.\n     if (str_len := len(value_str)) > 20:\n         idx = value_str.find(\"E\")\n-        if idx > 0:\n-            # truncate significand (mantissa)\n-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n+        if idx < 0:\n+            # No scientific notation, truncate decimal places\n+            value_str = value_str[:20]\n         else:\n-            # Python should never return a float representation larger than 20\n-            # characters unless it is using scientific notation\n-            raise RuntimeError(\"_format_float did not receive a float.\")\n+            # Scientific notation, truncate significand (mantissa)\n+            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n \n     return value_str\n \n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/14508"}