diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d12..6a7db833b0 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -45,4 +45,5 @@ def binary_symbols(self):
             isinstance(i, (Eq, Ne))])
 
     def as_set(self):
-        raise NotImplementedError()
+        from sympy import Intersection, S
+        return Intersection(S.UniversalSet, self.args[1])
diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py
index 1973fed19c..88b1a82544 100644
--- a/sympy/sets/tests/test_contains.py
+++ b/sympy/sets/tests/test_contains.py
@@ -39,12 +39,11 @@ def test_binary_symbols():
 
 
 def test_as_set():
+    from sympy import Intersection, FiniteSet, Interval
     x = Symbol('x')
     y = Symbol('y')
-    # Contains is a BooleanFunction whose value depends on an arg's
-    # containment in a Set -- rewriting as a Set is not yet implemented
-    raises(NotImplementedError, lambda:
-           Contains(x, FiniteSet(y)).as_set())
+    assert Contains(x, FiniteSet(y)).as_set() == Intersection(S.UniversalSet, FiniteSet(y))
+    assert Contains(x, Interval(0, 1)).as_set() == Interval(0, 1)
 
 def test_type_error():
     # Pass in a parameter not of type "set"
