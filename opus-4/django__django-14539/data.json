{"instance_id": "django__django-14539", "score": "C", "diff": "diff --git a/debug_issue.py b/debug_issue.py\nnew file mode 100644\nindex 0000000000..a84d6f53df\n--- /dev/null\n+++ b/debug_issue.py\n@@ -0,0 +1,52 @@\n+import html\n+\n+# Simulating what happens in trim_punctuation\n+middle = 'google.com/?q=1&lt!'\n+print(f\"Original middle: '{middle}'\")\n+\n+middle_unescaped = html.unescape(middle)\n+print(f\"Unescaped middle: '{middle_unescaped}'\")\n+\n+TRAILING_PUNCTUATION_CHARS = '.,:;!'\n+stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n+print(f\"Stripped unescaped: '{stripped}'\")\n+\n+# The problematic line\n+new_middle = middle[:len(stripped) - len(middle_unescaped)]\n+print(f\"New middle (wrong): '{new_middle}'\")\n+\n+# Let's see what's happening\n+print(f\"\\nlen(middle): {len(middle)}\")\n+print(f\"len(middle_unescaped): {len(middle_unescaped)}\")\n+print(f\"len(stripped): {len(stripped)}\")\n+print(f\"Index calculation: {len(stripped)} - {len(middle_unescaped)} = {len(stripped) - len(middle_unescaped)}\")\n+\n+# What we should get:\n+# We need to find where the trailing punctuation starts in the original (escaped) string\n+# The punctuation that was stripped is the '!'\n+trimmed_chars = middle_unescaped[len(stripped):]\n+print(f\"\\nTrimmed chars from unescaped: '{trimmed_chars}'\")\n+\n+# We need to find where this starts in the original string\n+# First, let's figure out the correct approach\n+print(\"\\n--- Correct approach ---\")\n+# We know that in the unescaped version, we trimmed from position len(stripped)\n+# We need to find the corresponding position in the escaped version\n+\n+# The issue is that we can't directly map character positions between escaped and unescaped strings\n+# because entities like &lt; take multiple characters but represent one character\n+\n+# A better approach: find what was trimmed and then find it in the original\n+if middle_unescaped != stripped:\n+    # Find the position where trimming starts in the escaped string\n+    # We need to be careful with HTML entities\n+    \n+    # One approach: unescape progressively to find the right position\n+    for i in range(len(middle), -1, -1):\n+        partial = middle[:i]\n+        partial_unescaped = html.unescape(partial)\n+        if partial_unescaped == stripped:\n+            print(f\"Correct position found at index {i}\")\n+            print(f\"Correct new_middle: '{middle[:i]}'\")\n+            print(f\"Correct trail would be: '{middle[i:]}'\")\n+            break\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8dd3..309cc18746 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -283,9 +283,17 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n             middle_unescaped = html.unescape(middle)\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n-                trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n-                trimmed_something = True\n+                # Find the correct position in the escaped string where trimming should occur\n+                # We can't use simple string length arithmetic because HTML entities like\n+                # &lt; take multiple characters but represent a single character when unescaped\n+                # So we need to find the position by unescaping progressively\n+                for i in range(len(middle), -1, -1):\n+                    partial_unescaped = html.unescape(middle[:i])\n+                    if partial_unescaped == stripped:\n+                        trail = middle[i:] + trail\n+                        middle = middle[:i]\n+                        trimmed_something = True\n+                        break\n         return lead, middle, trail\n \n     def is_email_simple(value):\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..f3eae2f3b7\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,53 @@\n+from django.utils.html import urlize\n+\n+# Test cases\n+test_cases = [\n+    # Original issue\n+    ('Search for google.com/?q=1&lt! and see.', \n+     'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'),\n+    \n+    # Test with other HTML entities\n+    ('Visit example.com&amp; for more', \n+     'Visit <a href=\"http://example.com&amp;\">example.com&amp;</a> for more'),\n+    \n+    ('Check out site.com&gt!', \n+     'Check out <a href=\"http://site.com%3E\">site.com&gt</a>!'),\n+    \n+    # Test with multiple punctuation\n+    ('Go to test.com&lt!!!', \n+     'Go to <a href=\"http://test.com%3C\">test.com&lt</a>!!!'),\n+    \n+    # Test without HTML entities  \n+    ('Visit google.com!', \n+     'Visit <a href=\"http://google.com\">google.com</a>!'),\n+    \n+    # Test with query parameters and no entities\n+    ('Search google.com/?q=test!',\n+     'Search <a href=\"http://google.com/?q=test\">google.com/?q=test</a>!'),\n+     \n+    # Edge case: entity at the very end without punctuation\n+    ('Visit site.com&lt',\n+     'Visit <a href=\"http://site.com%3C\">site.com&lt</a>'),\n+     \n+    # Multiple entities\n+    ('Check test.com/&amp;&lt!',\n+     'Check <a href=\"http://test.com/&amp;%3C\">test.com/&amp;&lt</a>!'),\n+]\n+\n+print(\"Testing urlize() with HTML entities and trailing punctuation:\\n\")\n+all_passed = True\n+\n+for i, (input_text, expected) in enumerate(test_cases, 1):\n+    result = urlize(input_text)\n+    passed = result == expected\n+    all_passed &= passed\n+    \n+    print(f\"Test {i}: {'\u2713' if passed else '\u2717'}\")\n+    print(f\"  Input:    {input_text}\")\n+    print(f\"  Expected: {expected}\")\n+    print(f\"  Got:      {result}\")\n+    if not passed:\n+        print(f\"  FAILED!\")\n+    print()\n+\n+print(f\"\\nAll tests {'passed' if all_passed else 'FAILED'}!\")\ndiff --git a/test_escape_detail.py b/test_escape_detail.py\nnew file mode 100644\nindex 0000000000..e5b59e6dde\n--- /dev/null\n+++ b/test_escape_detail.py\n@@ -0,0 +1,14 @@\n+from django.utils.html import urlize\n+\n+# Test simple cases\n+print(\"Test 1:\")\n+result = urlize('Search for google.com/?q=1&lt! and see.')\n+print(f\"Result: {repr(result)}\")\n+\n+print(\"\\nTest 2:\")\n+result2 = urlize('Check test.com/&amp;&lt!')\n+print(f\"Result: {repr(result2)}\")\n+\n+# Check if it's being treated as SafeString\n+print(f\"\\nResult type: {type(result)}\")\n+print(f\"Result.__html__() exists: {hasattr(result, '__html__')}\")\ndiff --git a/test_escaping.py b/test_escaping.py\nnew file mode 100644\nindex 0000000000..7745fb749f\n--- /dev/null\n+++ b/test_escaping.py\n@@ -0,0 +1,11 @@\n+from django.utils.html import urlize, escape\n+\n+# Test the issue\n+result = urlize('Search for google.com/?q=1&lt! and see.')\n+print(\"Default (autoescape=None):\", result)\n+\n+result2 = urlize('Search for google.com/?q=1&lt! and see.', autoescape=False)\n+print(\"With autoescape=False:\", result2)\n+\n+result3 = urlize('Search for google.com/?q=1&lt! and see.', autoescape=True)\n+print(\"With autoescape=True:\", result3)\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..6aa9bcfae7\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,10 @@\n+from django.utils.html import urlize\n+\n+# Test case from the issue\n+result = urlize('Search for google.com/?q=1&lt! and see.')\n+print(\"Result:\", result)\n+print(\"Expected:\", 'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.')\n+\n+# Let's test a simpler case too\n+simple_test = urlize('test.com&lt!')\n+print(\"\\nSimple test:\", simple_test)\ndiff --git a/test_regex.py b/test_regex.py\nnew file mode 100644\nindex 0000000000..2e6f1b881c\n--- /dev/null\n+++ b/test_regex.py\n@@ -0,0 +1,17 @@\n+import re\n+\n+simple_url_2_re = re.compile(\n+    r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$',\n+    re.IGNORECASE\n+)\n+\n+test_urls = [\n+    'example.com&amp;',\n+    'site.com&gt',\n+    'test.com&lt',\n+    'site.com&lt',\n+    'google.com/?q=1&lt',\n+]\n+\n+for url in test_urls:\n+    print(f\"Testing '{url}': {bool(simple_url_2_re.match(url))}\")\ndiff --git a/test_specific.py b/test_specific.py\nnew file mode 100644\nindex 0000000000..9e46685eef\n--- /dev/null\n+++ b/test_specific.py\n@@ -0,0 +1,19 @@\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+from django.utils.html import urlize\n+\n+# From the test file\n+expected1 = 'Search for <a href=\"http://google.com/?q=1%3C\" rel=\"nofollow\">google.com/?q=1&lt</a>! and see.'\n+result1 = urlize('Search for google.com/?q=1&lt! and see.')\n+print(\"Test 1 passes:\", result1 == expected1)\n+print(\"Expected:\", repr(expected1))\n+print(\"Got:     \", repr(result1))\n+\n+print()\n+\n+expected2 = 'Check <a href=\"http://test.com/&amp;%3C\" rel=\"nofollow\">test.com/&amp;&lt</a>!'\n+result2 = urlize('Check test.com/&amp;&lt!')\n+print(\"Test 2 passes:\", result2 == expected2)\n+print(\"Expected:\", repr(expected2))\n+print(\"Got:     \", repr(result2))\ndiff --git a/tests/template_tests/filter_tests/test_urlize.py b/tests/template_tests/filter_tests/test_urlize.py\nindex 3843cc3e0a..47e5f8e752 100644\n--- a/tests/template_tests/filter_tests/test_urlize.py\n+++ b/tests/template_tests/filter_tests/test_urlize.py\n@@ -368,6 +368,25 @@ class FunctionTests(SimpleTestCase):\n             'Search for <a href=\"http://google.com/?q=dj%21%60%3F\" rel=\"nofollow\">google.com/?q=dj!`?</a>! and see.',\n         )\n \n+    def test_html_entities_in_url(self):\n+        \"\"\"\n+        Check urlize correctly handles URLs with HTML entities and trailing\n+        punctuation.\n+        \"\"\"\n+        # Debug output\n+        result = urlize('Search for google.com/?q=1&lt! and see.')\n+        print(\"\\nDEBUG test_html_entities_in_url:\")\n+        print(f\"Got: {repr(result)}\")\n+        \n+        self.assertEqual(\n+            urlize('Search for google.com/?q=1&lt! and see.'),\n+            'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.',\n+        )\n+        self.assertEqual(\n+            urlize('Check test.com/&amp;&lt!'),\n+            'Check <a href=\"http://test.com/&amp;%3C\">test.com/&amp;&lt</a>!',\n+        )\n+\n     def test_non_string_input(self):\n         self.assertEqual(urlize(123), '123')\n \n", "gold_standard_diff": "From e11d85721ba142b68773b2d35f3f4f747f6630de Mon Sep 17 00:00:00 2001\nFrom: Shipeng Feng <fsp261@gmail.com>\nDate: Wed, 7 Jul 2021 16:09:02 +0800\nSubject: [PATCH] Fixed #32866 -- Fixed trimming trailing punctuation from\n escaped string in urlize().\n\n---\n django/utils/html.py           | 5 +++--\n tests/utils_tests/test_html.py | 4 ++++\n 2 files changed, 7 insertions(+), 2 deletions(-)\n\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8dd3aa..bd58317a7944 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -283,8 +283,9 @@ def trim_punctuation(lead, middle, trail):\n             middle_unescaped = html.unescape(middle)\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n-                trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n+                punctuation_count = len(middle_unescaped) - len(stripped)\n+                trail = middle[-punctuation_count:] + trail\n+                middle = middle[:-punctuation_count]\n                 trimmed_something = True\n         return lead, middle, trail\n \ndiff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 30f5ba68e862..909620ea3f1b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,6 +250,10 @@ def test_urlize(self):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14539"}