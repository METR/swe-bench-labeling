diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index b99f03cd88..d69c24419b 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1338,7 +1338,7 @@ class Query(BaseExpression):
             if isinstance(child, Node):
                 child_clause, needed_inner = self._add_q(
                     child, used_aliases, branch_negated,
-                    current_negated, allow_joins, split_subq)
+                    current_negated, allow_joins, split_subq, simple_col)
                 joinpromoter.add_votes(needed_inner)
             else:
                 child_clause, needed_inner = self.build_filter(
diff --git a/test_comprehensive_constraints.py b/test_comprehensive_constraints.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_constraint_issue.py b/test_constraint_issue.py
new file mode 100644
index 0000000000..e8495bc7d7
--- /dev/null
+++ b/test_constraint_issue.py
@@ -0,0 +1,48 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    USE_TZ=False,
+)
+
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Q
+
+# Define a test model
+class TestConstraint(models.Model):
+    field_1 = models.IntegerField(blank=True, null=True)
+    flag = models.BooleanField(blank=False, null=False)
+    
+    class Meta:
+        app_label = 'test_app'
+        constraints = [
+            models.CheckConstraint(
+                check=Q(flag__exact=True, field_1__isnull=False) | Q(flag__exact=False),
+                name='field_1_has_value_if_flag_set'
+            ),
+        ]
+
+# Generate the SQL for the check constraint
+from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
+
+with connection.schema_editor() as schema_editor:
+    constraint = TestConstraint._meta.constraints[0]
+    sql = constraint._get_check_sql(TestConstraint, schema_editor)
+    print("Generated SQL for check constraint:")
+    print(sql)
+    print("\nExpected SQL should NOT contain table names like 'new__test_app_testconstraint'")
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_migration.py b/test_migration.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_oracle_constraint.py b/test_oracle_constraint.py
new file mode 100644
index 0000000000..e69de29bb2
