{"instance_id": "sympy__sympy-18189", "score": "C", "diff": "diff --git a/run_test.py b/run_test.py\nnew file mode 100644\nindex 0000000000..634a7dc7b2\n--- /dev/null\n+++ b/run_test.py\n@@ -0,0 +1,9 @@\n+from sympy.solvers.tests.test_diophantine import test_diophantine_permute_sign\n+\n+try:\n+    test_diophantine_permute_sign()\n+    print(\"Test passed!\")\n+except Exception as e:\n+    print(f\"Test failed: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..38aec271a4 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -182,13 +182,13 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                            for t in diophantine(eq, param, permute=permute)}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n         if not d.is_number:\n-            dsol = diophantine(d)\n-            good = diophantine(n) - dsol\n+            dsol = diophantine(d, param, syms, permute)\n+            good = diophantine(n, param, syms, permute) - dsol\n             return {s for s in good if _mexpand(d.subs(zip(var, s)))}\n         else:\n             eq = n\ndiff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex e4e8972ae0..330e8d5795 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -908,6 +908,14 @@ def test_diophantine_permute_sign():\n     assert len(diophantine(eq, permute=True)) == 62000\n     soln = set([(-1, -1), (-1, 2), (1, -2), (1, 1)])\n     assert diophantine(10*x**2 + 12*x*y + 12*y**2 - 34, permute=True) == soln\n+    \n+    # Test that permute works correctly with different symbol orders\n+    # This was issue: diophantine returns incomplete results depending on syms order\n+    from sympy.abc import m, n\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    expected = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(eq, syms=(m,n), permute=True) == expected\n+    assert diophantine(eq, syms=(n,m), permute=True) == expected\n \n \n @XFAIL\ndiff --git a/test_diophantine_fix.py b/test_diophantine_fix.py\nnew file mode 100644\nindex 0000000000..6afc81125c\n--- /dev/null\n+++ b/test_diophantine_fix.py\n@@ -0,0 +1,16 @@\n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+# Test the issue\n+m, n = symbols('m n')\n+eq = n**4 + m**4 - 2**4 - 3**4\n+\n+# Should give the same results regardless of symbol order when permute=True\n+result1 = diophantine(eq, syms=(m,n), permute=True)\n+result2 = diophantine(eq, syms=(n,m), permute=True)\n+\n+print(\"Result with syms=(m,n):\", sorted(result1))\n+print(\"Result with syms=(n,m):\", sorted(result2))\n+print(\"\\nResults equal?\", result1 == result2)\n+print(\"Length of result1:\", len(result1))\n+print(\"Length of result2:\", len(result2))\ndiff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py\nnew file mode 100644\nindex 0000000000..101133db79\n--- /dev/null\n+++ b/test_fix_comprehensive.py\n@@ -0,0 +1,52 @@\n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+# Test 1: The original issue - n**4 + m**4 - 2**4 - 3**4\n+print(\"Test 1: Original issue\")\n+m, n = symbols('m n')\n+eq = n**4 + m**4 - 2**4 - 3**4\n+\n+result1 = diophantine(eq, syms=(m,n), permute=True)\n+result2 = diophantine(eq, syms=(n,m), permute=True)\n+\n+print(f\"  syms=(m,n): {sorted(result1)}\")\n+print(f\"  syms=(n,m): {sorted(result2)}\")\n+print(f\"  Results equal? {result1 == result2}\")\n+print(f\"  Both have 8 solutions? {len(result1) == 8 and len(result2) == 8}\")\n+\n+# Test 2: Another permutation test with a different equation\n+print(\"\\nTest 2: x**2 + y**2 - 13\")\n+x, y = symbols('x y')\n+eq2 = x**2 + y**2 - 13\n+\n+result3 = diophantine(eq2, syms=(x,y), permute=True)\n+result4 = diophantine(eq2, syms=(y,x), permute=True) \n+\n+print(f\"  syms=(x,y): {sorted(result3)}\")\n+print(f\"  syms=(y,x): {sorted(result4)}\")\n+print(f\"  Results equal? {result3 == result4}\")\n+\n+# Test 3: Test with 3 variables\n+print(\"\\nTest 3: a**2 + b**2 + c**2 - 14\")\n+a, b, c = symbols('a b c')\n+eq3 = a**2 + b**2 + c**2 - 14\n+\n+result5 = diophantine(eq3, syms=(a,b,c), permute=True)\n+result6 = diophantine(eq3, syms=(c,b,a), permute=True)\n+\n+print(f\"  syms=(a,b,c) length: {len(result5)}\")\n+print(f\"  syms=(c,b,a) length: {len(result6)}\")\n+print(f\"  Results equal? {result5 == result6}\")\n+\n+# Test 4: Test without permute flag (should still work correctly with syms)\n+print(\"\\nTest 4: Without permute flag\")\n+eq4 = m**4 + n**4 - 2**4 - 3**4\n+\n+result7 = diophantine(eq4, syms=(m,n), permute=False)\n+result8 = diophantine(eq4, syms=(n,m), permute=False)\n+\n+print(f\"  syms=(m,n): {sorted(result7)}\")\n+print(f\"  syms=(n,m): {sorted(result8)}\")\n+print(f\"  Both have base solution only? {len(result7) == 1 and len(result8) == 1}\")\n+\n+print(\"\\nAll tests completed!\")\n", "gold_standard_diff": "From c6dda9c04b73a8c297f6d574d95660d9cb664554 Mon Sep 17 00:00:00 2001\nFrom: Abhinav Anand <abhinav.anand2807@gmail.com>\nDate: Tue, 31 Dec 2019 21:11:00 +0530\nSubject: [PATCH 1/4] added permute = true\n\n---\n sympy/solvers/diophantine.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex e8c354efd051..be8ea6c5e31a 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                            for t in diophantine(eq, param, permute = permute)}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n\nFrom b8fe22fc52d4c3aadcdad2fd604c960831ffa24c Mon Sep 17 00:00:00 2001\nFrom: Abhinav Anand <abhinav.anand2807@gmail.com>\nDate: Tue, 31 Dec 2019 23:26:36 +0530\nSubject: [PATCH 2/4] added test cases\n\n---\n sympy/solvers/tests/test_diophantine.py | 8 ++++++++\n 1 file changed, 8 insertions(+)\n\ndiff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex bf78f8e46cdf..8c79b162894a 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -540,6 +540,14 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n+    #test issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+\n+\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n\nFrom bfdc2d49528834c59e08e48e7f90447412e7bd3a Mon Sep 17 00:00:00 2001\nFrom: Abhinav Anand <abhinav.anand2807@gmail.com>\nDate: Tue, 31 Dec 2019 23:37:28 +0530\nSubject: [PATCH 3/4] removed white spaces\n\n---\n sympy/solvers/diophantine.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex be8ea6c5e31a..10823d3db136 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -182,7 +182,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param, permute = permute)}\n+                            for t in diophantine(eq, param, permute=permute)}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n\nFrom 8715d0b137f8d300dfbb8ebd179fa5278e9443f6 Mon Sep 17 00:00:00 2001\nFrom: Abhinav Anand <abhinav.anand2807@gmail.com>\nDate: Tue, 31 Dec 2019 23:40:14 +0530\nSubject: [PATCH 4/4] minor changes\n\n---\n sympy/solvers/tests/test_diophantine.py | 2 --\n 1 file changed, 2 deletions(-)\n\ndiff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 8c79b162894a..cf050d1761ed 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,8 +547,6 @@ def test_diophantine():\n         set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n \n \n-\n-\n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/18189"}