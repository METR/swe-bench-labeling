diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a44adfc760..7047a9756c 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -426,6 +426,8 @@ class SQLCompiler:
                 # must have the same columns list. Set the selects defined on
                 # the query on all combined queries, if not already set.
                 if not compiler.query.values_select and self.query.values_select:
+                    # Clone the query to avoid modifying the original
+                    compiler.query = compiler.query.clone()
                     compiler.query.set_values((
                         *self.query.extra_select,
                         *self.query.values_select,
diff --git a/test_issue.py b/test_issue.py
new file mode 100644
index 0000000000..a8da6fb5a8
--- /dev/null
+++ b/test_issue.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python
+import os
+import sys
+
+# Add the testbed to Python path
+sys.path.insert(0, '/testbed')
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')
+
+import django
+django.setup()
+
+from tests.queries.models import ReservedName
+
+# Test to reproduce the issue
+def test_union_values_list_issue():
+    # Setup
+    ReservedName.objects.all().delete()
+    ReservedName.objects.create(name='a', order=2)
+    
+    qs1 = ReservedName.objects.all()
+    
+    # First query - this should return ('a', 2)
+    result1 = qs1.union(qs1).values_list('name', 'order').get()
+    print(f"First query result: {result1}")
+    
+    # Second query - this should return (2,) but returns ('a', 2)
+    result2 = qs1.union(qs1).values_list('order').get()
+    print(f"Second query result: {result2}")
+    print(f"Expected: (2,)")
+    
+    # The issue is that result2 should be (2,) but it's ('a', 2)
+    # This assertion will fail, demonstrating the bug
+    try:
+        assert result2 == (2,), f"Expected (2,) but got {result2}"
+        print("Test passed!")
+    except AssertionError as e:
+        print(f"Test failed: {e}")
+        print("This demonstrates the bug!")
+
+if __name__ == "__main__":
+    test_union_values_list_issue()
diff --git a/test_repro_issue.py b/test_repro_issue.py
new file mode 100644
index 0000000000..676a433369
--- /dev/null
+++ b/test_repro_issue.py
@@ -0,0 +1,23 @@
+import unittest
+from django.test import TestCase
+from tests.queries.models import ReservedName
+
+
+class TestUnionValuesListIssue(TestCase):
+    def test_union_values_list_changing_columns(self):
+        """Test that union queries can change the list of columns with values_list()."""
+        # Setup
+        ReservedName.objects.create(name='a', order=2)
+        
+        qs1 = ReservedName.objects.all()
+        
+        # First query - this should return ('a', 2)
+        result1 = qs1.union(qs1).values_list('name', 'order').get()
+        self.assertEqual(result1, ('a', 2))
+        
+        # Second query - this should return (2,) but returns ('a', 2)
+        # This is the bug we're fixing
+        result2 = qs1.union(qs1).values_list('order').get()
+        
+        # This will fail before the fix
+        self.assertEqual(result2, (2,), f"Expected (2,) but got {result2}")
diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py
index 3902db59e2..9bb61feaef 100644
--- a/tests/queries/test_qs_combinators.py
+++ b/tests/queries/test_qs_combinators.py
@@ -124,6 +124,20 @@ class QuerySetSetOperationTests(TestCase):
         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()
         self.assertEqual(reserved_name[:2], ('a', 2))
 
+    def test_union_values_list_changing_columns(self):
+        """Test that union queries can change the list of columns with values_list()."""
+        ReservedName.objects.create(name='a', order=2)
+        qs1 = ReservedName.objects.all()
+        
+        # First query - this should return ('a', 2)
+        result1 = qs1.union(qs1).values_list('name', 'order').get()
+        self.assertEqual(result1, ('a', 2))
+        
+        # Second query - this should return (2,) but currently returns ('a', 2)
+        # This is the bug we're fixing
+        result2 = qs1.union(qs1).values_list('order').get()
+        self.assertEqual(result2, (2,))
+
     def test_union_with_two_annotated_values_list(self):
         qs1 = Number.objects.filter(num=1).annotate(
             count=Value(0, IntegerField()),
