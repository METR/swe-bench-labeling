{"instance_id": "sphinx-doc__sphinx-9658", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 2b4504101..d865b8b37 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp>=2.0.0',\n-    'sphinxcontrib-serializinghtml>=1.1.5',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',\n+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/test_mock_getattr.py b/test_mock_getattr.py\nnew file mode 100644\nindex 000000000..efeb55c32\n--- /dev/null\n+++ b/test_mock_getattr.py\n@@ -0,0 +1,42 @@\n+\"\"\"\n+Test mock module __getattr__ behavior\n+\"\"\"\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass, mock, _MockModule\n+from sphinx.util.typing import restify\n+import sys\n+\n+# Let's see what happens with mock context\n+with mock(['torch']):\n+    import torch\n+    \n+    # First access to torch.nn.Module\n+    Module1 = torch.nn.Module\n+    print('First access to torch.nn.Module:')\n+    print('  Module1:', Module1)\n+    print('  type(Module1):', type(Module1))\n+    print('  id(Module1):', id(Module1))\n+    print('  isinstance(Module1, type):', isinstance(Module1, type))\n+    print('  isinstance(Module1, _MockObject):', isinstance(Module1, _MockObject))\n+    \n+    # Second access to torch.nn.Module\n+    Module2 = torch.nn.Module\n+    print('\\nSecond access to torch.nn.Module:')\n+    print('  Module2:', Module2)\n+    print('  type(Module2):', type(Module2))\n+    print('  id(Module2):', id(Module2))\n+    print('  Module1 is Module2:', Module1 is Module2)\n+    \n+    # Let's access from the class definition context\n+    print('\\nIn class definition context:')\n+    \n+    class TestClass(torch.nn.Module):\n+        base_in_definition = torch.nn.Module\n+        \n+    print('  TestClass.__bases__[0] is Module1:', TestClass.__bases__[0] is Module1)\n+    print('  TestClass.base_in_definition is Module1:', TestClass.base_in_definition is Module1)\n+    \n+    # Check __orig_bases__\n+    print('\\n__orig_bases__:')\n+    print('  TestClass.__orig_bases__[0]:', TestClass.__orig_bases__[0])\n+    print('  type(__orig_bases__[0]):', type(TestClass.__orig_bases__[0]))\n+    print('  TestClass.__orig_bases__[0] is Module1:', TestClass.__orig_bases__[0] is Module1)\ndiff --git a/test_mock_issue.py b/test_mock_issue.py\nnew file mode 100644\nindex 000000000..042f81735\n--- /dev/null\n+++ b/test_mock_issue.py\n@@ -0,0 +1,26 @@\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass\n+from sphinx.util.typing import restify\n+\n+# Create a mock Module (simulating torch.nn.Module)\n+MockModule = _make_subclass('Module', 'torch.nn')\n+print('MockModule:', MockModule)\n+print('MockModule.__module__:', MockModule.__module__)\n+print('MockModule.__name__:', MockModule.__name__)\n+print('MockModule.__display_name__:', MockModule.__display_name__)\n+\n+# Create a derived class\n+class MyDeepKernel(MockModule):\n+    pass\n+\n+print('\\nMyDeepKernel bases:', MyDeepKernel.__bases__)\n+print('MyDeepKernel.__bases__[0]:', MyDeepKernel.__bases__[0])\n+print('type(MyDeepKernel.__bases__[0]):', type(MyDeepKernel.__bases__[0]))\n+\n+# Test restify on bases\n+for base in MyDeepKernel.__bases__:\n+    print(f'\\nBase: {base}')\n+    print(f'restify(base): {restify(base)}')\n+    print(f'type(base): {type(base)}')\n+    print(f'base.__module__: {getattr(base, \"__module__\", None)}')\n+    print(f'base.__name__: {getattr(base, \"__name__\", None)}')\n+    print(f'isinstance(base, type): {isinstance(base, type)}')\ndiff --git a/test_mock_name_attr.py b/test_mock_name_attr.py\nnew file mode 100644\nindex 000000000..8b1378917\n--- /dev/null\n+++ b/test_mock_name_attr.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_orig_bases.py b/test_orig_bases.py\nnew file mode 100644\nindex 000000000..9b232813c\n--- /dev/null\n+++ b/test_orig_bases.py\n@@ -0,0 +1,47 @@\n+\"\"\"\n+Test if the issue is with __orig_bases__\n+\"\"\"\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass, mock, _MockModule\n+from sphinx.util.typing import restify\n+import sys\n+\n+# Let's see what happens with mock context\n+with mock(['torch']):\n+    import torch\n+    \n+    # This is what happens in the actual code - creates a DeepKernel that inherits from torch.nn.Module\n+    class DeepKernel(torch.nn.Module):\n+        pass\n+    \n+    print('DeepKernel.__bases__:', DeepKernel.__bases__)\n+    print('hasattr(DeepKernel, \"__orig_bases__\"):', hasattr(DeepKernel, '__orig_bases__'))\n+    \n+    if hasattr(DeepKernel, '__orig_bases__'):\n+        print('\\nDeepKernel.__orig_bases__:', DeepKernel.__orig_bases__)\n+        print('type(__orig_bases__[0]):', type(DeepKernel.__orig_bases__[0]))\n+        \n+        # Test restify on __orig_bases__\n+        for i, base in enumerate(DeepKernel.__orig_bases__):\n+            print(f'\\n__orig_bases__[{i}]: {base}')\n+            print(f'  type: {type(base)}')\n+            print(f'  restify: {restify(base)}')\n+            \n+    # Let me test with generic type hint\n+    from typing import Generic, TypeVar\n+    \n+    T = TypeVar('T')\n+    \n+    class GenericDeepKernel(torch.nn.Module, Generic[T]):\n+        pass\n+        \n+    print('\\n\\nGenericDeepKernel.__bases__:', GenericDeepKernel.__bases__)\n+    print('hasattr(GenericDeepKernel, \"__orig_bases__\"):', hasattr(GenericDeepKernel, '__orig_bases__'))\n+    \n+    if hasattr(GenericDeepKernel, '__orig_bases__'):\n+        print('\\nGenericDeepKernel.__orig_bases__:', GenericDeepKernel.__orig_bases__)\n+        \n+        # Test restify on __orig_bases__\n+        for i, base in enumerate(GenericDeepKernel.__orig_bases__):\n+            print(f'\\n__orig_bases__[{i}]: {base}')\n+            print(f'  type: {type(base)}')\n+            print(f'  restify: {restify(base)}')\ndiff --git a/test_real_issue.py b/test_real_issue.py\nnew file mode 100644\nindex 000000000..b6a67614e\n--- /dev/null\n+++ b/test_real_issue.py\n@@ -0,0 +1,48 @@\n+\"\"\"\n+Let's reproduce the actual issue - when documenting classes that inherit from mocked classes\n+\"\"\"\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass, mock, _MockModule\n+from sphinx.util.typing import restify\n+import sys\n+\n+# Let's see what happens with mock context\n+with mock(['torch']):\n+    import torch\n+    \n+    # Get the nn module\n+    nn = torch.nn\n+    print('torch.nn type:', type(nn))\n+    print('torch.nn isinstance(_MockModule):', isinstance(nn, _MockModule))\n+    \n+    # Get Module from nn\n+    Module = nn.Module\n+    print('\\ntorch.nn.Module:', Module)\n+    print('torch.nn.Module type:', type(Module))\n+    print('repr(Module):', repr(Module))\n+    \n+    # This is what happens in the actual code - creates a DeepKernel that inherits from torch.nn.Module\n+    class DeepKernel(torch.nn.Module):\n+        pass\n+    \n+    print('\\nDeepKernel.__bases__:', DeepKernel.__bases__)\n+    print('DeepKernel.__bases__[0]:', DeepKernel.__bases__[0])\n+    print('type(DeepKernel.__bases__[0]):', type(DeepKernel.__bases__[0]))\n+    \n+    # Let's check if the base is an instance or a class\n+    base = DeepKernel.__bases__[0]\n+    print('\\nIs base a type?', isinstance(base, type))\n+    print('Is base a _MockObject?', isinstance(base, _MockObject))\n+    print('base.__class__:', base.__class__)\n+    \n+    # Let's see what happens when we access attributes directly on Module\n+    print('\\nDirect access to Module:')\n+    print('Module:', Module)\n+    print('type(Module):', type(Module))\n+    \n+    # Test restify on the mock object directly\n+    print('\\nTesting restify on mock directly:')\n+    mock_obj = torch.nn.Module()\n+    print('mock_obj:', mock_obj)  \n+    print('type(mock_obj):', type(mock_obj))\n+    print('restify(mock_obj):', restify(mock_obj))\n+    print('restify(type(mock_obj)):', restify(type(mock_obj)))\ndiff --git a/test_restify_debug.py b/test_restify_debug.py\nnew file mode 100644\nindex 000000000..f293c287d\n--- /dev/null\n+++ b/test_restify_debug.py\n@@ -0,0 +1,32 @@\n+import sys\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass\n+from sphinx.util import inspect\n+\n+# Create a mock Module (simulating torch.nn.Module)\n+MockModule = _make_subclass('Module', 'torch.nn')\n+\n+print('MockModule info:')\n+print('  type:', type(MockModule))\n+print('  __module__:', getattr(MockModule, '__module__', None))\n+print('  __name__:', getattr(MockModule, '__name__', None))\n+print('  __qualname__:', getattr(MockModule, '__qualname__', None))\n+print('  hasattr(__qualname__):', hasattr(MockModule, '__qualname__'))\n+print('  isinstance(type):', isinstance(MockModule, type))\n+print('  sys.version_info:', sys.version_info)\n+\n+# Check the flow through restify\n+cls = MockModule\n+print('\\nChecking restify flow:')\n+print('  cls.__module__ in (\"__builtin__\", \"builtins\"):', cls.__module__ in ('__builtin__', 'builtins'))\n+print('  sys.version_info >= (3, 7):', sys.version_info >= (3, 7))\n+\n+# Check _restify_py37 flow\n+print('\\n_restify_py37 flow:')\n+print('  inspect.isgenericalias(cls):', inspect.isgenericalias(cls))\n+print('  hasattr(cls, \"__qualname__\"):', hasattr(cls, '__qualname__'))\n+print('  cls.__module__ == \"typing\":', cls.__module__ == 'typing')\n+\n+# Check if _MockObject is in the MRO\n+print('\\nMRO check:')\n+print('  MockModule.__mro__:', MockModule.__mro__)\n+print('  _MockObject in MockModule.__mro__:', _MockObject in MockModule.__mro__)\ndiff --git a/test_restify_mock_instance.py b/test_restify_mock_instance.py\nnew file mode 100644\nindex 000000000..10e8c31ac\n--- /dev/null\n+++ b/test_restify_mock_instance.py\n@@ -0,0 +1,39 @@\n+\"\"\"\n+Debug why restify fails on mock instances\n+\"\"\"\n+from sphinx.ext.autodoc.mock import _MockObject, _make_subclass, mock\n+from sphinx.util.typing import restify\n+import sys\n+\n+with mock(['torch']):\n+    import torch\n+    \n+    # Get a mock instance\n+    mock_instance = torch.nn.Module\n+    print('mock_instance:', mock_instance)\n+    print('type(mock_instance):', type(mock_instance))\n+    print('isinstance(mock_instance, _MockObject):', isinstance(mock_instance, _MockObject))\n+    \n+    # Check attributes used by restify\n+    print('\\nAttributes checked by restify:')\n+    print('  hasattr(__module__):', hasattr(mock_instance, '__module__'))\n+    print('  hasattr(__name__):', hasattr(mock_instance, '__name__'))\n+    print('  hasattr(__qualname__):', hasattr(mock_instance, '__qualname__'))\n+    \n+    print('\\nAttribute values:')\n+    print('  __module__:', getattr(mock_instance, '__module__', None))\n+    print('  __name__:', getattr(mock_instance, '__name__', None))\n+    print('  __qualname__:', getattr(mock_instance, '__qualname__', None))\n+    \n+    # Check the type's attributes\n+    print('\\nType attributes:')\n+    cls = type(mock_instance)\n+    print('  type.__module__:', cls.__module__)\n+    print('  type.__name__:', cls.__name__)\n+    print('  type.__qualname__:', getattr(cls, '__qualname__', None))\n+    \n+    # Let's trace what happens in restify\n+    print('\\nrestify result:', restify(mock_instance))\n+    \n+    # Now let's check what restify does with the type\n+    print('restify(type(mock_instance)):', restify(type(mock_instance)))\ndiff --git a/tox.ini b/tox.ini\nindex b6a67fd85..483f2df92 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex b94531b73ff..701eff9d5fe 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -30,6 +30,7 @@ Bugs fixed\n * #9651: autodoc: return type field is not generated even if\n   :confval:`autodoc_typehints_description_target` is set to \"documented\" when\n   its info-field-list contains ``:returns:`` field\n+* #9657: autodoc: The base class for a subclass of mocked object is incorrect\n * #9630: autosummary: Failed to build summary table if :confval:`primary_domain`\n   is not 'py'\n * #9670: html: Fix download file with special characters\ndiff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex b562f47fd71..62f36da7956 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -26,6 +26,7 @@ class _MockObject:\n     \"\"\"Used by autodoc_mock_imports.\"\"\"\n \n     __display_name__ = '_MockObject'\n+    __name__ = ''\n     __sphinx_mock__ = True\n     __sphinx_decorator_args__: Tuple[Any, ...] = ()\n \n@@ -40,7 +41,7 @@ def __new__(cls, *args: Any, **kwargs: Any) -> Any:\n         return super().__new__(cls)\n \n     def __init__(self, *args: Any, **kwargs: Any) -> None:\n-        self.__qualname__ = ''\n+        self.__qualname__ = self.__name__\n \n     def __len__(self) -> int:\n         return 0\n@@ -73,6 +74,7 @@ def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                    attributes: Any = None, decorator_args: Tuple = ()) -> Any:\n     attrs = {'__module__': module,\n              '__display_name__': module + '.' + name,\n+             '__name__': name,\n              '__sphinx_decorator_args__': decorator_args}\n     attrs.update(attributes or {})\n \ndiff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex d493a004035..c34c4bebc8d 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -17,6 +17,7 @@\n \n import pytest\n \n+from sphinx.ext.autodoc import mock\n from sphinx.util.typing import restify, stringify\n \n \n@@ -170,6 +171,12 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n+def test_restify_mock():\n+    with mock(['unknown']):\n+        import unknown\n+        assert restify(unknown.secret.Class) == ':py:class:`unknown.secret.Class`'\n+\n+\n def test_stringify():\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n@@ -294,3 +301,9 @@ def test_stringify_type_union_operator():\n \n def test_stringify_broken_type_hints():\n     assert stringify(BrokenType) == 'tests.test_util_typing.BrokenType'\n+\n+\n+def test_stringify_mock():\n+    with mock(['unknown']):\n+        import unknown\n+        assert stringify(unknown.secret.Class) == 'unknown.secret.Class'\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9658"}