{"instance_id": "django__django-16667", "score": "I", "diff": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e95c..f4bc74b7cd 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1157,7 +1157,7 @@ class SelectDateWidget(Widget):\n             input_format = formats.sanitize_strftime_format(input_format)\n             try:\n                 date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+            except (ValueError, OverflowError):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..936064161b\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,79 @@\n+import datetime\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-key',\n+    USE_I18N=True,\n+    USE_TZ=True,\n+)\n+django.setup()\n+\n+from django import forms\n+from django.forms import SelectDateWidget\n+\n+class TestForm(forms.Form):\n+    my_date = forms.DateField(widget=SelectDateWidget())\n+\n+def test_various_overflow_scenarios():\n+    \"\"\"Test various overflow scenarios with SelectDateWidget\"\"\"\n+    \n+    test_cases = [\n+        # Case 1: Very large year value\n+        {\n+            'my_date_day': '1',\n+            'my_date_month': '1', \n+            'my_date_year': str(sys.maxsize + 1)\n+        },\n+        # Case 2: Very large month value\n+        {\n+            'my_date_day': '1',\n+            'my_date_month': str(sys.maxsize + 1), \n+            'my_date_year': '2023'\n+        },\n+        # Case 3: Very large day value\n+        {\n+            'my_date_day': str(sys.maxsize + 1),\n+            'my_date_month': '1', \n+            'my_date_year': '2023'\n+        },\n+        # Case 4: All very large values\n+        {\n+            'my_date_day': str(sys.maxsize + 1),\n+            'my_date_month': str(sys.maxsize + 1), \n+            'my_date_year': str(sys.maxsize + 1)\n+        },\n+        # Case 5: Normal valid date (should work)\n+        {\n+            'my_date_day': '15',\n+            'my_date_month': '6', \n+            'my_date_year': '2023'\n+        },\n+        # Case 6: Invalid date but within int range (Feb 31)\n+        {\n+            'my_date_day': '31',\n+            'my_date_month': '2', \n+            'my_date_year': '2023'\n+        }\n+    ]\n+    \n+    for i, data in enumerate(test_cases, 1):\n+        print(f\"\\nTest case {i}: {data}\")\n+        form = TestForm(data)\n+        \n+        try:\n+            is_valid = form.is_valid()\n+            print(f\"  Form is valid: {is_valid}\")\n+            if not is_valid:\n+                print(f\"  Form errors: {form.errors}\")\n+            else:\n+                print(f\"  Cleaned data: {form.cleaned_data}\")\n+        except Exception as e:\n+            print(f\"  ERROR: {type(e).__name__}: {e}\")\n+            raise\n+\n+if __name__ == \"__main__\":\n+    test_various_overflow_scenarios()\ndiff --git a/test_issue_repro.py b/test_issue_repro.py\nnew file mode 100644\nindex 0000000000..7c904e81a2\n--- /dev/null\n+++ b/test_issue_repro.py\n@@ -0,0 +1,53 @@\n+import django\n+from django.conf import settings\n+from django.urls import path\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-key',\n+    USE_I18N=True,\n+    USE_TZ=True,\n+    ROOT_URLCONF=__name__,\n+    MIDDLEWARE=[],\n+)\n+django.setup()\n+\n+from django import forms\n+from django.forms import SelectDateWidget\n+from django.http import HttpResponse\n+\n+class ReproForm(forms.Form):\n+    my_date = forms.DateField(widget=SelectDateWidget())\n+\n+def repro_view(request):\n+    form = ReproForm(request.GET)  # for ease of reproducibility\n+    if form.is_valid():\n+        return HttpResponse(\"ok\")\n+    else:\n+        return HttpResponse(\"not ok\")\n+\n+# URL patterns\n+urlpatterns = [\n+    path('repro/', repro_view, name='repro'),\n+]\n+\n+# Simulate the request with the problematic data\n+from django.test import RequestFactory\n+\n+factory = RequestFactory()\n+# Create the problematic request from the issue description\n+request = factory.get('/repro/', {\n+    'my_date_day': '1',\n+    'my_date_month': '1',\n+    'my_date_year': '1234567821345678'\n+})\n+\n+print(\"Testing with URL parameters from issue: ?my_date_day=1&my_date_month=1&my_date_year=1234567821345678\")\n+try:\n+    response = repro_view(request)\n+    print(f\"Response: {response.content.decode()}\")\n+    print(\"Success! No OverflowError raised.\")\n+except OverflowError as e:\n+    print(f\"ERROR: OverflowError raised: {e}\")\n+    raise\ndiff --git a/test_overflow_issue.py b/test_overflow_issue.py\nnew file mode 100644\nindex 0000000000..12400e19ce\n--- /dev/null\n+++ b/test_overflow_issue.py\n@@ -0,0 +1,44 @@\n+import datetime\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-key',\n+    USE_I18N=True,\n+    USE_TZ=True,\n+)\n+django.setup()\n+\n+from django import forms\n+from django.forms import SelectDateWidget\n+from django.http import HttpResponse\n+\n+class ReproForm(forms.Form):\n+    my_date = forms.DateField(widget=SelectDateWidget())\n+\n+def test_overflow_error():\n+    \"\"\"Test that SelectDateWidget handles OverflowError gracefully\"\"\"\n+    \n+    # Simulate request data with a very large year value\n+    data = {\n+        'my_date_day': '1',\n+        'my_date_month': '1', \n+        'my_date_year': str(sys.maxsize + 1)  # This will cause OverflowError\n+    }\n+    \n+    form = ReproForm(data)\n+    \n+    # This should not crash with OverflowError\n+    try:\n+        is_valid = form.is_valid()\n+        print(f\"Form is valid: {is_valid}\")\n+        print(f\"Form errors: {form.errors}\")\n+    except OverflowError as e:\n+        print(f\"ERROR: OverflowError raised: {e}\")\n+        raise\n+\n+if __name__ == \"__main__\":\n+    test_overflow_error()\ndiff --git a/tests/forms_tests/widget_tests/test_selectdatewidget.py b/tests/forms_tests/widget_tests/test_selectdatewidget.py\nindex cfcd037987..8e1f1ab905 100644\n--- a/tests/forms_tests/widget_tests/test_selectdatewidget.py\n+++ b/tests/forms_tests/widget_tests/test_selectdatewidget.py\n@@ -1,3 +1,4 @@\n+import sys\n from datetime import date\n \n from django.forms import DateField, Form, SelectDateWidget\n@@ -621,6 +622,36 @@ class SelectDateWidgetTest(WidgetTest):\n                     self.widget.value_from_datadict(data, {}, \"field\"), expected\n                 )\n \n+    def test_value_from_datadict_with_overflow_error(self):\n+        \"\"\"Test that SelectDateWidget handles OverflowError gracefully.\"\"\"\n+        # Test with very large year value that causes OverflowError\n+        data = {\n+            \"field_year\": str(sys.maxsize + 1),\n+            \"field_month\": \"1\",\n+            \"field_day\": \"1\",\n+        }\n+        # Should return pseudo-ISO date instead of raising OverflowError\n+        result = self.widget.value_from_datadict(data, {}, \"field\")\n+        self.assertEqual(result, f\"{sys.maxsize + 1}-1-1\")\n+        \n+        # Test with very large month value\n+        data = {\n+            \"field_year\": \"2023\",\n+            \"field_month\": str(sys.maxsize + 1),\n+            \"field_day\": \"1\",\n+        }\n+        result = self.widget.value_from_datadict(data, {}, \"field\")\n+        self.assertEqual(result, f\"2023-{sys.maxsize + 1}-1\")\n+        \n+        # Test with very large day value\n+        data = {\n+            \"field_year\": \"2023\",\n+            \"field_month\": \"1\",\n+            \"field_day\": str(sys.maxsize + 1),\n+        }\n+        result = self.widget.value_from_datadict(data, {}, \"field\")\n+        self.assertEqual(result, f\"2023-1-{sys.maxsize + 1}\")\n+\n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, \"field\"), True)\n         self.assertIs(\n", "gold_standard_diff": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e95c4a..3d6091c25052 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1161,6 +1161,8 @@ def value_from_datadict(self, data, files, name):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n+            except OverflowError:\n+                return \"0-0-0\"\n             return date_value.strftime(input_format)\n         return data.get(name)\n \ndiff --git a/tests/forms_tests/field_tests/test_datefield.py b/tests/forms_tests/field_tests/test_datefield.py\nindex a9f93f40ed20..65ac76319d1f 100644\n--- a/tests/forms_tests/field_tests/test_datefield.py\n+++ b/tests/forms_tests/field_tests/test_datefield.py\n@@ -1,3 +1,4 @@\n+import sys\n from datetime import date, datetime\n \n from django.core.exceptions import ValidationError\n@@ -36,6 +37,17 @@ def test_form_field(self):\n         d = GetDate({\"mydate_month\": \"1\", \"mydate_day\": \"1\", \"mydate_year\": \"2010\"})\n         self.assertIn('<label for=\"id_mydate_month\">', d.as_p())\n \n+        # Inputs raising an OverflowError.\n+        e = GetDate(\n+            {\n+                \"mydate_month\": str(sys.maxsize + 1),\n+                \"mydate_day\": \"31\",\n+                \"mydate_year\": \"2010\",\n+            }\n+        )\n+        self.assertIs(e.is_valid(), False)\n+        self.assertEqual(e.errors, {\"mydate\": [\"Enter a valid date.\"]})\n+\n     @translation.override(\"nl\")\n     def test_l10n_date_changed(self):\n         \"\"\"\n@@ -149,6 +161,8 @@ def test_datefield_1(self):\n             f.clean(\"200a-10-25\")\n         with self.assertRaisesMessage(ValidationError, \"'Enter a valid date.'\"):\n             f.clean(\"25/10/06\")\n+        with self.assertRaisesMessage(ValidationError, \"'Enter a valid date.'\"):\n+            f.clean(\"0-0-0\")\n         with self.assertRaisesMessage(ValidationError, \"'This field is required.'\"):\n             f.clean(None)\n \ndiff --git a/tests/forms_tests/widget_tests/test_selectdatewidget.py b/tests/forms_tests/widget_tests/test_selectdatewidget.py\nindex cfcd03798768..215c41a809c0 100644\n--- a/tests/forms_tests/widget_tests/test_selectdatewidget.py\n+++ b/tests/forms_tests/widget_tests/test_selectdatewidget.py\n@@ -1,3 +1,4 @@\n+import sys\n from datetime import date\n \n from django.forms import DateField, Form, SelectDateWidget\n@@ -610,6 +611,7 @@ def test_value_from_datadict(self):\n             ((None, \"12\", \"1\"), None),\n             ((\"2000\", None, \"1\"), None),\n             ((\"2000\", \"12\", None), None),\n+            ((str(sys.maxsize + 1), \"12\", \"1\"), \"0-0-0\"),\n         ]\n         for values, expected in tests:\n             with self.subTest(values=values):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16667"}