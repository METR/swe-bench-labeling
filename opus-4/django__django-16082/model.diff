diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 5e3c7cab82..cbf4fd8296 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -533,6 +533,7 @@ _connector_combinations = [
             Combinable.SUB,
             Combinable.MUL,
             Combinable.DIV,
+            Combinable.MOD,
         )
     },
     # Bitwise operators.
diff --git a/tests/db_functions/math/test_mod.py b/tests/db_functions/math/test_mod.py
index 919b9419d2..a69d96e65f 100644
--- a/tests/db_functions/math/test_mod.py
+++ b/tests/db_functions/math/test_mod.py
@@ -42,3 +42,43 @@ class ModTests(TestCase):
         self.assertEqual(obj.small_mod, math.fmod(obj.small, obj.normal))
         self.assertEqual(obj.normal_mod, math.fmod(obj.normal, obj.big))
         self.assertEqual(obj.big_mod, math.fmod(obj.big, obj.small))
+
+    def test_decimal_mod_integer(self):
+        """Test Decimal % Integer returns Decimal"""
+        from django.db.models import Value
+        DecimalModel.objects.create(n1=Decimal("10.5"), n2=Decimal("3.0"))
+        obj = DecimalModel.objects.annotate(
+            mod_result=Mod("n1", Value(3))
+        ).first()
+        self.assertIsInstance(obj.mod_result, Decimal)
+        self.assertAlmostEqual(obj.mod_result, Decimal("1.5"))
+    
+    def test_integer_mod_decimal(self):
+        """Test Integer % Decimal returns Decimal"""
+        from django.db.models import Value
+        IntegerModel.objects.create(small=10, normal=3, big=100)
+        obj = IntegerModel.objects.annotate(
+            mod_result=Mod("small", Value(Decimal("3.5")))
+        ).first()
+        self.assertIsInstance(obj.mod_result, Decimal)
+        self.assertAlmostEqual(obj.mod_result, Decimal("3.0"))
+    
+    def test_float_mod_integer(self):
+        """Test Float % Integer returns Float"""
+        from django.db.models import Value
+        FloatModel.objects.create(f1=10.5, f2=3.0)
+        obj = FloatModel.objects.annotate(
+            mod_result=Mod("f1", Value(3))
+        ).first()
+        self.assertIsInstance(obj.mod_result, float)
+        self.assertAlmostEqual(obj.mod_result, 1.5)
+    
+    def test_integer_mod_float(self):
+        """Test Integer % Float returns Float"""
+        from django.db.models import Value
+        IntegerModel.objects.create(small=10, normal=3, big=100)
+        obj = IntegerModel.objects.annotate(
+            mod_result=Mod("small", Value(3.5))
+        ).first()
+        self.assertIsInstance(obj.mod_result, float)
+        self.assertAlmostEqual(obj.mod_result, 3.0)
