diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 61be31d890..96c54e44ad 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -453,7 +453,7 @@ class AdminSite:
                 pass
             else:
                 if getattr(match.func, "should_append_slash", True):
-                    return HttpResponsePermanentRedirect("%s/" % request.path)
+                    return HttpResponsePermanentRedirect(request.get_full_path(force_append_slash=True))
         raise Http404
 
     def _build_app_dict(self, request, label=None):
diff --git a/test_catch_all_query_string.py b/test_catch_all_query_string.py
new file mode 100644
index 0000000000..7e2a1c7bfc
--- /dev/null
+++ b/test_catch_all_query_string.py
@@ -0,0 +1,61 @@
+#!/usr/bin/env python
+import os
+import sys
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.admin_views.test_settings')
+sys.path.insert(0, '/testbed')
+sys.path.insert(0, '/testbed/tests')
+
+import django
+django.setup()
+
+from django.test import TestCase, override_settings
+from django.contrib.auth.models import User
+
+@override_settings(ROOT_URLCONF="admin_views.urls", APPEND_SLASH=True)
+class TestCatchAllQueryString(TestCase):
+    def test_catch_all_view_preserves_query_string(self):
+        """Test that catch_all_view preserves query strings when redirecting."""
+        # Create a staff user
+        superuser = User.objects.create_user(
+            username="staff",
+            password="secret",
+            email="staff@example.com",
+            is_staff=True,
+        )
+        self.client.force_login(superuser)
+        
+        # Test URL without trailing slash but with query string
+        # This should redirect to the same URL with a trailing slash AND preserve the query string
+        url_without_slash = "/test_admin/admin/auth/user"
+        query_string = "?id=123&filter=active"
+        full_url = url_without_slash + query_string
+        
+        response = self.client.get(full_url)
+        
+        # Should redirect to the URL with trailing slash and preserve query string
+        expected_redirect = url_without_slash + "/" + query_string
+        self.assertRedirects(
+            response, 
+            expected_redirect, 
+            status_code=301,
+            fetch_redirect_response=False
+        )
+
+if __name__ == "__main__":
+    from django.test.utils import setup_test_environment, teardown_test_environment
+    setup_test_environment()
+    
+    test = TestCatchAllQueryString()
+    test._pre_setup()
+    
+    print("Running test to demonstrate the bug...")
+    try:
+        test.test_catch_all_view_preserves_query_string()
+        print("Test passed! (This should fail before the fix)")
+    except AssertionError as e:
+        print(f"Test failed as expected: {e}")
+    finally:
+        test._post_teardown()
+        teardown_test_environment()
diff --git a/test_debug.py b/test_debug.py
new file mode 100644
index 0000000000..d6bbee773c
--- /dev/null
+++ b/test_debug.py
@@ -0,0 +1,47 @@
+import os
+import sys
+sys.path.insert(0, '/testbed')
+sys.path.insert(0, '/testbed/tests')
+os.environ['DJANGO_SETTINGS_MODULE'] = 'admin_views.test_settings'
+
+from django.test import RequestFactory
+from django.contrib.admin.sites import AdminSite
+from django.contrib.auth.models import User
+from django.conf import settings
+
+# Configure Django
+import django
+django.setup()
+
+# Create a test request with query string
+factory = RequestFactory()
+request = factory.get('/test_admin/admin/admin_views/article?id=123&filter=active')
+
+# Set required attributes
+request.path = '/test_admin/admin/admin_views/article'
+request.path_info = '/admin/admin_views/article'
+request.user = User.objects.create_user(
+    username='staff',
+    password='secret',
+    email='staff@example.com',
+    is_staff=True,
+)
+
+# Create an admin site instance
+admin = AdminSite()
+
+# Call catch_all_view - enable APPEND_SLASH
+settings.APPEND_SLASH = True
+
+print("Request path:", request.path)
+print("Request path_info:", request.path_info)
+print("Request META['QUERY_STRING']:", request.META.get('QUERY_STRING'))
+print("Request get_full_path():", request.get_full_path())
+
+# Call the method
+try:
+    response = admin.catch_all_view(request, 'admin_views/article')
+    print("Response status:", response.status_code)
+    print("Response location:", response['Location'])
+except Exception as e:
+    print("Exception:", e)
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 5f7aafe430..d77fff6d1f 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -8528,6 +8528,33 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):
         response = self.client.get(known_url[:-1])
         self.assertEqual(response.status_code, 404)
 
+    @override_settings(APPEND_SLASH=True)
+    def test_missing_slash_append_slash_true_preserves_query_string(self):
+        """Test that catch_all_view preserves query strings when redirecting."""
+        superuser = User.objects.create_user(
+            username="staff",
+            password="secret",
+            email="staff@example.com",
+            is_staff=True,
+        )
+        self.client.force_login(superuser)
+        
+        known_url = reverse("admin:admin_views_article_changelist")
+        # Remove trailing slash and add query string
+        url_without_slash = known_url[:-1]
+        query_string = "?id=123&filter=active"
+        full_url = url_without_slash + query_string
+        
+        response = self.client.get(full_url)
+        # Should redirect to the URL with trailing slash AND preserve the query string
+        expected_redirect = known_url + query_string
+        self.assertRedirects(
+            response,
+            expected_redirect,
+            status_code=301,
+            target_status_code=403
+        )
+
     @override_settings(APPEND_SLASH=True)
     def test_single_model_no_append_slash(self):
         superuser = User.objects.create_user(
