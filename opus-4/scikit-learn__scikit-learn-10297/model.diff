diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py
index 911c74ae3..6469cdbcf 100644
--- a/sklearn/linear_model/ridge.py
+++ b/sklearn/linear_model/ridge.py
@@ -1301,6 +1301,12 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
         weights inversely proportional to class frequencies in the input data
         as ``n_samples / (n_classes * np.bincount(y))``
 
+    store_cv_values : boolean, default=False
+        Flag indicating if the cross-validation values corresponding to
+        each alpha should be stored in the `cv_values_` attribute (see
+        below). This flag is only compatible with `cv=None` (i.e. using
+        Generalized Cross-Validation).
+
     Attributes
     ----------
     cv_values_ : array, shape = [n_samples, n_alphas] or \
@@ -1333,10 +1339,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
     advantage of the multi-variate response support in Ridge.
     """
     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,
-                 normalize=False, scoring=None, cv=None, class_weight=None):
+                 normalize=False, scoring=None, cv=None, class_weight=None,
+                 store_cv_values=False):
         super(RidgeClassifierCV, self).__init__(
             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,
-            scoring=scoring, cv=cv)
+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)
         self.class_weight = class_weight
 
     def fit(self, X, y, sample_weight=None):
diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py
index ee44da5d5..492c5bf2b 100644
--- a/sklearn/linear_model/tests/test_ridge.py
+++ b/sklearn/linear_model/tests/test_ridge.py
@@ -598,6 +598,43 @@ def test_ridgecv_store_cv_values():
     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))
 
 
+def test_ridge_classifier_cv_store_cv_values():
+    # Test RidgeClassifierCV's store_cv_values attribute.
+    rng = np.random.RandomState(42)
+
+    n_samples = 50
+    n_features = 5
+    x = rng.randn(n_samples, n_features)
+    alphas = [1e-1, 1e0, 1e1]
+    n_alphas = len(alphas)
+
+    # Test binary classification
+    y_binary = rng.randint(0, 2, n_samples)
+    r_binary = RidgeClassifierCV(alphas=alphas, store_cv_values=True)
+    r_binary.fit(x, y_binary)
+    assert_equal(r_binary.cv_values_.shape, (n_samples, 1, n_alphas))
+
+    # Test multiclass classification  
+    n_classes = 3
+    y_multi = rng.randint(0, n_classes, n_samples)
+    r_multi = RidgeClassifierCV(alphas=alphas, store_cv_values=True)
+    r_multi.fit(x, y_multi)
+    assert_equal(r_multi.cv_values_.shape, (n_samples, n_classes, n_alphas))
+
+    # Test store_cv_values=False (default)
+    r_no_store = RidgeClassifierCV(alphas=alphas, store_cv_values=False)
+    r_no_store.fit(x, y_binary)
+    assert not hasattr(r_no_store, 'cv_values_')
+
+    # Test that store_cv_values=True with cv != None raises ValueError
+    from sklearn.model_selection import KFold
+    r_cv_error = RidgeClassifierCV(alphas=alphas, cv=KFold(3), 
+                                   store_cv_values=True)
+    assert_raise_message(ValueError, 
+                         "cv!=None and store_cv_values=True  are incompatible",
+                         r_cv_error.fit, x, y_binary)
+
+
 def test_ridgecv_sample_weight():
     rng = np.random.RandomState(0)
     alphas = (0.1, 1.0, 10.0)
