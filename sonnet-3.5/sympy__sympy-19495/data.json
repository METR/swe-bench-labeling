{"instance_id": "sympy__sympy-19495", "score": "C", "diff": "diff --git a/run_tests.py b/run_tests.py\nnew file mode 100644\nindex 0000000000..001e67ceef\n--- /dev/null\n+++ b/run_tests.py\n@@ -0,0 +1,8 @@\n+import unittest\n+import sys\n+sys.path.append('/testbed')\n+\n+from sympy.sets.tests.test_conditionset import *\n+\n+if __name__ == '__main__':\n+    unittest.main()\ndiff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 118eda6f77..30814ce89a 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -242,8 +242,20 @@ def _eval_subs(self, old, new):\n             return self.func(sym, cond, base)\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n+        \n+        # Handle ImageSet substitution\n+        from sympy.sets import ImageSet\n+        if isinstance(base, ImageSet):\n+            lambda_func = base.lamda\n+            new_lambda = lambda_func.subs(old, new)\n+            new_base = ImageSet(new_lambda, base.base_set)\n+            new_cond = cond.subs(old, new)\n+            if new_cond is S.true:\n+                return new_base\n+            return self.func(self.sym, new_cond, new_base)\n+        \n         if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+            return base\n         return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\ndiff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 0d4527a52c..aa0f4e8916 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -129,6 +129,19 @@ def test_subs_CondSet():\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+    # New test cases for ImageSet substitution\n+    from sympy import ImageSet, Lambda, pi, asin, Rational\n+    image_set = ImageSet(Lambda(n, 2*pi*n + asin(y)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), image_set)\n+\n+    result = cond_set.subs(y, Rational(1, 3))\n+    expected = ImageSet(Lambda(n, 2*pi*n + asin(Rational(1, 3))), S.Integers)\n+    assert result == expected\n+\n+    result2 = cond_set.subs(y, z)\n+    expected2 = ConditionSet(x, Contains(z, Interval(-1, 1)), ImageSet(Lambda(n, 2*pi*n + asin(z)), S.Integers))\n+    assert result2 == expected2\n+\n \n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n@@ -179,3 +192,23 @@ def test_failing_contains():\n     # and the comparison is giving an error.\n     assert ConditionSet(x, 1/x >= 0, S.Reals).contains(0) == \\\n         Contains(0, ConditionSet(x, 1/x >= 0, S.Reals), evaluate=False)\n+\n+def test_subs_CondSet_with_ImageSet():\n+    from sympy import ImageSet, Lambda, S, pi, asin, symbols, Interval, Contains, Rational\n+    from sympy.sets import ConditionSet\n+    x, y, n, z = symbols('x y n z')\n+    \n+    # Test case for the reported issue\n+    image_set = ImageSet(Lambda(n, 2*pi*n + asin(y)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), image_set)\n+    \n+    # Substitute y with 1/3\n+    result = cond_set.subs(y, Rational(1, 3))\n+    \n+    expected = ImageSet(Lambda(n, 2*pi*n + asin(Rational(1, 3))), S.Integers)\n+    assert result == ConditionSet(x, Contains(Rational(1, 3), Interval(-1, 1)), expected)\n+\n+    # Test another substitution\n+    result2 = cond_set.subs(y, z)\n+    expected2 = ImageSet(Lambda(n, 2*pi*n + asin(z)), S.Integers)\n+    assert result2 == ConditionSet(x, Contains(z, Interval(-1, 1)), expected2)\n", "gold_standard_diff": "From 6b7e72278b83e300647b5357062f3cc3f6488fd4 Mon Sep 17 00:00:00 2001\nFrom: Gilles Schintgen <gschintgen@hambier.lu>\nDate: Fri, 5 Jun 2020 09:33:06 +0000\nSubject: [PATCH 1/2] fix ConditionSet._eval_subs\n\nFixes #17341, fixes an existing test and adds a regression test.\n---\n sympy/sets/conditionset.py            | 13 ++++++++-----\n sympy/sets/tests/test_conditionset.py | 16 ++++++++++++----\n 2 files changed, 20 insertions(+), 9 deletions(-)\n\ndiff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 118eda6f7780..9a711e460155 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -240,11 +240,14 @@ def _eval_subs(self, old, new):\n             # the base set should be filtered and if new is not in\n             # the base set then this substitution is ignored\n             return self.func(sym, cond, base)\n-        cond = self.condition.subs(old, new)\n-        base = self.base_set.subs(old, new)\n-        if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+        else:\n+            cond = self.condition.subs(old, new)\n+            base = self.base_set.subs(old, new)\n+            # The condition may have become true due to assumptions\n+            # on 'sym'. In order for .subs() to be consistent with\n+            # __new__ we *don't* check if 'sym' actually belongs to\n+            # 'base'. In other words: assumptions are ignored.\n+            return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\ndiff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 0d4527a52cab..d0009d8862cf 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,7 +1,7 @@\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n-from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n-    And, Mod, oo, Function)\n+    EmptySet, Union, Contains, imageset)\n+from sympy import (Symbol, Eq, S, Abs, sin, asin, pi, Interval,\n+    And, Mod, oo, Function, Lambda)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n \n@@ -125,10 +125,18 @@ def test_subs_CondSet():\n     assert ConditionSet(\n         n, n < x, Interval(0, oo)).subs(x, p) == Interval(0, oo)\n     assert ConditionSet(\n-        n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet\n+        n, n < x, Interval(-oo, 0)).subs(x, p) == Interval(-oo, 0)\n+\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+    # issue 17341\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    assert ConditionSet(x, Contains(\n+        y, Interval(-1,1)), img1).subs(y, S.One/3).dummy_eq(img2)\n+\n \n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n\nFrom ec61d9dbc8142121e3224b2c359a27925206ab1f Mon Sep 17 00:00:00 2001\nFrom: Gilles Schintgen <gschintgen@hambier.lu>\nDate: Fri, 5 Jun 2020 12:20:59 +0000\nSubject: [PATCH 2/2] Fix ConditionSet docstring (second 'Notes' heading)\n\nDue to a duplicate 'Notes' heading, only half of the actual\ndocumentation was showing up in the Sphinx docs.\n---\n sympy/sets/conditionset.py | 6 ++----\n 1 file changed, 2 insertions(+), 4 deletions(-)\n\ndiff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 9a711e460155..bc1626ba9bbd 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -80,9 +80,6 @@ class ConditionSet(Set):\n     >>> _.subs(y, 1)\n     ConditionSet(y, y < 1, FiniteSet(z))\n \n-    Notes\n-    =====\n-\n     If no base set is specified, the universal set is implied:\n \n     >>> ConditionSet(x, x < 1).base_set\n@@ -102,7 +99,7 @@ class ConditionSet(Set):\n \n     Although the name is usually respected, it must be replaced if\n     the base set is another ConditionSet and the dummy symbol\n-    and appears as a free symbol in the base set and the dummy symbol\n+    appears as a free symbol in the base set and the dummy symbol\n     of the base set appears as a free symbol in the condition:\n \n     >>> ConditionSet(x, x < y, ConditionSet(y, x + y < 2, S.Integers))\n@@ -113,6 +110,7 @@ class ConditionSet(Set):\n \n     >>> _.subs(_.sym, Symbol('_x'))\n     ConditionSet(_x, (_x < y) & (_x + x < 2), Integers)\n+\n     \"\"\"\n     def __new__(cls, sym, condition, base_set=S.UniversalSet):\n         # nonlinsolve uses ConditionSet to return an unsolved system\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/19495"}