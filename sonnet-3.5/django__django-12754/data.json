{"instance_id": "django__django-12754", "score": "I", "diff": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 30616c0172..9efdfd5d2d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -183,6 +183,9 @@ class MigrationAutodetector:\n         self.generate_renamed_fields()\n         self.generate_removed_fields()\n         self.generate_added_fields()\n+\n+        # Reorder operations to handle field moves from base class to subclass\n+        self.reorder_field_operations()\n         self.generate_altered_fields()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n@@ -197,6 +200,38 @@ class MigrationAutodetector:\n \n         return self.migrations\n \n+    def reorder_field_operations(self):\n+        \"\"\"\n+        Reorder operations to ensure that when a field is moved from a base class to a subclass,\n+        the CreateModel operation for the subclass comes before the RemoveField operation for the base class.\n+        \"\"\"\n+        for app_label, app_operations in self.generated_operations.items():\n+            create_model_ops = []\n+            remove_field_ops = []\n+            other_ops = []\n+\n+            for operation in app_operations:\n+                if isinstance(operation, operations.CreateModel):\n+                    create_model_ops.append(operation)\n+                elif isinstance(operation, operations.RemoveField):\n+                    remove_field_ops.append(operation)\n+                else:\n+                    other_ops.append(operation)\n+\n+            # Check if there are any fields that have been moved from a base class to a subclass\n+            for remove_op in remove_field_ops:\n+                for create_op in create_model_ops:\n+                    if any(field.name == remove_op.name for field, _ in create_op.fields):\n+                        # Move the CreateModel operation before the RemoveField operation\n+                        create_index = app_operations.index(create_op)\n+                        remove_index = app_operations.index(remove_op)\n+                        if create_index > remove_index:\n+                            app_operations.remove(create_op)\n+                            app_operations.insert(remove_index, create_op)\n+\n+            # Update the generated_operations with the reordered operations\n+            self.generated_operations[app_label] = app_operations\n+\n     def _prepare_field_lists(self):\n         \"\"\"\n         Prepare field lists and a list of the fields that used through models\n", "gold_standard_diff": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 30616c0172bc..85c301389757 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -563,6 +563,16 @@ def generate_created_models(self):\n                 if isinstance(base, str) and \".\" in base:\n                     base_app_label, base_name = base.split(\".\", 1)\n                     dependencies.append((base_app_label, base_name, None, True))\n+                    # Depend on the removal of base fields if the new model has\n+                    # a field with the same name.\n+                    old_base_model_state = self.from_state.models.get((base_app_label, base_name))\n+                    new_base_model_state = self.to_state.models.get((base_app_label, base_name))\n+                    if old_base_model_state and new_base_model_state:\n+                        removed_base_fields = set(old_base_model_state.fields).difference(\n+                            new_base_model_state.fields,\n+                        ).intersection(model_state.fields)\n+                        for removed_base_field in removed_base_fields:\n+                            dependencies.append((base_app_label, base_name, removed_base_field, False))\n             # Depend on the other end of the primary key if it's a relation\n             if primary_key_rel:\n                 dependencies.append((\ndiff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex daff57fc2cfa..10af72561b44 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2454,3 +2454,28 @@ def test_mti_inheritance_model_removal(self):\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n         self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12754"}