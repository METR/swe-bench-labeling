diff --git a/sklearn/model_selection/_validation.py b/sklearn/model_selection/_validation.py
index 95669a212..9397dda57 100644
--- a/sklearn/model_selection/_validation.py
+++ b/sklearn/model_selection/_validation.py
@@ -853,17 +853,29 @@ def _fit_and_predict(estimator, X, y, train, test, verbose, fit_params,
         estimator.fit(X_train, y_train, **fit_params)
     func = getattr(estimator, method)
     predictions = func(X_test)
+        # Handle MultiOutputClassifier separately, as it doesn't have a classes_ attribute
+        # Instead, we need to access the classes_ attribute of individual estimators
     if method in ['decision_function', 'predict_proba', 'predict_log_proba']:
         if isinstance(predictions, list):
-            predictions = [_enforce_prediction_order(
-                estimator.classes_[i_label], predictions[i_label],
-                n_classes=len(set(y[:, i_label])), method=method)
-                for i_label in range(len(predictions))]
+            if hasattr(estimator, 'estimators_'):  # Check if it's a MultiOutputClassifier
+                predictions = [_enforce_prediction_order(
+                    estimator.estimators_[i_label].classes_, predictions[i_label],
+                    n_classes=len(set(y[:, i_label])), method=method)
+                    for i_label in range(len(predictions))]
+            else:
+                predictions = [_enforce_prediction_order(
+                    estimator.classes_[i_label], predictions[i_label],
+                    n_classes=len(set(y[:, i_label])), method=method)
+                    for i_label in range(len(predictions))]
         else:
             # A 2D y array should be a binary label indicator matrix
             n_classes = len(set(y)) if y.ndim == 1 else y.shape[1]
-            predictions = _enforce_prediction_order(
-                estimator.classes_, predictions, n_classes, method)
+            if hasattr(estimator, 'estimators_'):  # Check if it's a MultiOutputClassifier
+                predictions = _enforce_prediction_order(
+                    estimator.estimators_[0].classes_, predictions, n_classes, method)
+            else:
+                predictions = _enforce_prediction_order(
+                    estimator.classes_, predictions, n_classes, method)
     return predictions, test
 
 
