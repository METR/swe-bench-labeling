{"instance_id": "sphinx-doc__sphinx-11510", "score": "I", "diff": "diff --git a/sphinx/io.py b/sphinx/io.py\nindex 4874fdf39..94aff1690 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -103,8 +103,21 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         self.settings = settings\n         self.input = self.read_source(settings.env)\n         self.parse()\n+        self.process_includes(settings.env)\n+        self.parse()  # Parse again to process the included content\n         return self.document\n \n+    def process_includes(self, env: BuildEnvironment) -> None:\n+        \"\"\"Process included files and trigger 'source-read' event for them.\"\"\"\n+        for node in self.document.traverse(nodes.include):\n+            if 'source' in node:\n+                include_source = node['source']\n+                with open(include_source, 'r') as f:\n+                    include_content = f.read()\n+                arg = [include_content]\n+                env.events.emit('source-read', include_source, arg)\n+                node.replace_self(nodes.Text(arg[0]))\n+\n     def read_source(self, env: BuildEnvironment) -> str:\n         \"\"\"Read content from source and do post-process.\"\"\"\n         content = self.source.read()\ndiff --git a/tox.ini b/tox.ini\nindex a3dc56211..c76147de3 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -24,7 +24,7 @@ setenv =\n     PYTHONWARNINGS = error\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}\n+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}\n \n [testenv:docs]\n basepython = python3\n", "gold_standard_diff": "From 24974018efa9c4c0d4b51c81828b92cd32e1e70e Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 19:05:56 +0000\nSubject: [PATCH 01/22] Add test that exposes issue 10678\n\n---\n tests/test_directive_other.py | 15 ++++++++++++++-\n 1 file changed, 14 insertions(+), 1 deletion(-)\n\ndiff --git a/tests/test_directive_other.py b/tests/test_directive_other.py\nindex f221db07578..d8eb50bede5 100644\n--- a/tests/test_directive_other.py\n+++ b/tests/test_directive_other.py\n@@ -6,7 +6,7 @@\n from sphinx import addnodes\n from sphinx.testing import restructuredtext\n from sphinx.testing.util import assert_node\n-\n+from sphinx.directives.other import Include\n \n @pytest.mark.sphinx(testroot='toctree-glob')\n def test_toctree(app):\n@@ -148,3 +148,16 @@ def test_toctree_twice(app):\n     assert_node(doctree[0][0],\n                 entries=[(None, 'foo'), (None, 'foo')],\n                 includefiles=['foo', 'foo'])\n+\n+\n+@pytest.mark.sphinx(testroot='toctree-glob')\n+def test_include_source_read_event(app):\n+    files_signaled = []\n+    def source_read_handler(app, file_name, source):\n+        files_signaled.append(file_name)\n+    app.connect(\"source-read\", source_read_handler)\n+    text = \".. include:: baz.rst\\n\"\n+    app.env.find_files(app.config, app.builder)\n+    doctree = restructuredtext.parse(app, text, 'index')\n+    assert(\"index\" in files_signaled)\n+    assert(\"baz\" in files_signaled)\n\nFrom 1e0c93c9722385f4910b32a0e856c7fd94a217f6 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 21:20:05 +0000\nSubject: [PATCH 02/22] Subclass docutils RSTParser to fix issue\n\nOur unit test is now passing.\n---\n sphinx/parsers.py | 27 ++++++++++++++++++++++++---\n 1 file changed, 24 insertions(+), 3 deletions(-)\n\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 3bcd69f52f0..8b83a388f31 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -7,8 +7,7 @@\n import docutils.parsers\n import docutils.parsers.rst\n from docutils import nodes\n-from docutils.parsers.rst import states\n-from docutils.statemachine import StringList\n+from docutils.statemachine import StringList, State\n from docutils.transforms import Transform\n from docutils.transforms.universal import SmartQuotes\n \n@@ -20,6 +19,27 @@\n     from sphinx.application import Sphinx\n \n \n+class RSTStateMachine(docutils.parsers.rst.states.RSTStateMachine):\n+    def __init__(self, app: Sphinx, state_classes: list[State], initial_state: str, debug: bool=False):\n+        self.app = app\n+        super().__init__(state_classes=state_classes, initial_state=initial_state, debug=debug)\n+\n+    def insert_input(self, include_lines : StringList, path: str):\n+        # first we need to combine the lines back into text so we can send it with the source-read\n+        # event\n+        text = \"\\n\".join(include_lines)\n+        # turn the path back to doc reference for source-read event\n+        doc = self.app.env.path2doc(path)\n+        # emit \"source-read\" event\n+        arg = [text]\n+        self.app.env.events.emit(\"source-read\", doc, arg)\n+        text = arg[0]\n+        # split back into lines again:\n+        include_lines = text.splitlines()\n+        # call the parent implementation\n+        return super().insert_input(include_lines, path)\n+\n+\n class Parser(docutils.parsers.Parser):\n     \"\"\"\n     A base class of source parsers.  The additional parsers should inherit this class instead\n@@ -61,7 +81,8 @@ def get_transforms(self) -> list[type[Transform]]:\n     def parse(self, inputstring: str | StringList, document: nodes.document) -> None:\n         \"\"\"Parse text and generate a document tree.\"\"\"\n         self.setup_parse(inputstring, document)  # type: ignore\n-        self.statemachine = states.RSTStateMachine(\n+        self.statemachine = RSTStateMachine(\n+            self.env.app,\n             state_classes=self.state_classes,\n             initial_state=self.initial_state,\n             debug=document.reporter.debug_flag)\n\nFrom b61e2bf3155bfc52e159b9104dfe80e0108d7a7e Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 21:29:39 +0000\nSubject: [PATCH 03/22] Improve test\n\n---\n tests/test_directive_other.py | 10 +++++-----\n 1 file changed, 5 insertions(+), 5 deletions(-)\n\ndiff --git a/tests/test_directive_other.py b/tests/test_directive_other.py\nindex d8eb50bede5..8d748c05ab2 100644\n--- a/tests/test_directive_other.py\n+++ b/tests/test_directive_other.py\n@@ -152,12 +152,12 @@ def test_toctree_twice(app):\n \n @pytest.mark.sphinx(testroot='toctree-glob')\n def test_include_source_read_event(app):\n-    files_signaled = []\n-    def source_read_handler(app, file_name, source):\n-        files_signaled.append(file_name)\n+    sources_reported = {}\n+    def source_read_handler(app, doc, source):\n+        sources_reported[doc] = source[0]\n     app.connect(\"source-read\", source_read_handler)\n     text = \".. include:: baz.rst\\n\"\n     app.env.find_files(app.config, app.builder)\n     doctree = restructuredtext.parse(app, text, 'index')\n-    assert(\"index\" in files_signaled)\n-    assert(\"baz\" in files_signaled)\n+    assert(\"index\" in sources_reported)\n+    assert(\"baz\" in sources_reported)\n\nFrom 552ecd585ce2a4ce626c574b3afcf4e63686bd17 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 22:35:07 +0000\nSubject: [PATCH 04/22] Improve test and fix issues uncovered.\n\nFixes #10678\n---\n sphinx/parsers.py                              | 14 ++++++++------\n tests/roots/test-directive-include/baz/baz.rst |  4 ++++\n tests/roots/test-directive-include/conf.py     |  2 ++\n tests/roots/test-directive-include/text.txt    |  1 +\n tests/test_directive_other.py                  | 11 ++++++++---\n 5 files changed, 23 insertions(+), 9 deletions(-)\n create mode 100644 tests/roots/test-directive-include/baz/baz.rst\n create mode 100644 tests/roots/test-directive-include/conf.py\n create mode 100644 tests/roots/test-directive-include/text.txt\n\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 8b83a388f31..f6a6517c069 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -24,18 +24,20 @@ def __init__(self, app: Sphinx, state_classes: list[State], initial_state: str,\n         self.app = app\n         super().__init__(state_classes=state_classes, initial_state=initial_state, debug=debug)\n \n-    def insert_input(self, include_lines : StringList, path: str):\n-        # first we need to combine the lines back into text so we can send it with the source-read\n-        # event\n-        text = \"\\n\".join(include_lines)\n+    def insert_input(self, include_lines : list[str], path: str):\n+        # First we need to combine the lines back into text so we can send it with the source-read\n+        # event. In newer releases of docutils there are two lines at the end, that act as markers.\n+        # We must preserve them and leave them out of the source-read event:\n+        text = \"\\n\".join(include_lines[:-2])\n         # turn the path back to doc reference for source-read event\n         doc = self.app.env.path2doc(path)\n         # emit \"source-read\" event\n         arg = [text]\n         self.app.env.events.emit(\"source-read\", doc, arg)\n         text = arg[0]\n-        # split back into lines again:\n-        include_lines = text.splitlines()\n+        # split back into lines and reattach the two marker lines\n+        processed_lines = text.splitlines()\n+        processed_lines += include_lines[-2:]\n         # call the parent implementation\n         return super().insert_input(include_lines, path)\n \ndiff --git a/tests/roots/test-directive-include/baz/baz.rst b/tests/roots/test-directive-include/baz/baz.rst\nnew file mode 100644\nindex 00000000000..84c3f2c2cc8\n--- /dev/null\n+++ b/tests/roots/test-directive-include/baz/baz.rst\n@@ -0,0 +1,4 @@\n+Baz\n+===\n+\n+Baz was here.\n\\ No newline at end of file\ndiff --git a/tests/roots/test-directive-include/conf.py b/tests/roots/test-directive-include/conf.py\nnew file mode 100644\nindex 00000000000..a4768582f36\n--- /dev/null\n+++ b/tests/roots/test-directive-include/conf.py\n@@ -0,0 +1,2 @@\n+project = 'test-directive-include'\n+exclude_patterns = ['_build']\ndiff --git a/tests/roots/test-directive-include/text.txt b/tests/roots/test-directive-include/text.txt\nnew file mode 100644\nindex 00000000000..b7ea15d7b02\n--- /dev/null\n+++ b/tests/roots/test-directive-include/text.txt\n@@ -0,0 +1 @@\n+This is plain text.\ndiff --git a/tests/test_directive_other.py b/tests/test_directive_other.py\nindex 8d748c05ab2..466fd2f7980 100644\n--- a/tests/test_directive_other.py\n+++ b/tests/test_directive_other.py\n@@ -150,14 +150,19 @@ def test_toctree_twice(app):\n                 includefiles=['foo', 'foo'])\n \n \n-@pytest.mark.sphinx(testroot='toctree-glob')\n+@pytest.mark.sphinx(testroot='directive-include')\n def test_include_source_read_event(app):\n     sources_reported = {}\n     def source_read_handler(app, doc, source):\n         sources_reported[doc] = source[0]\n     app.connect(\"source-read\", source_read_handler)\n-    text = \".. include:: baz.rst\\n\"\n+    text = (\".. include:: baz/baz.rst\\n\"\n+            \"   :start-line: 2\\n\\n\"\n+            \".. include:: text.txt\\n\"\n+            \"   :literal:    \\n\")\n     app.env.find_files(app.config, app.builder)\n     doctree = restructuredtext.parse(app, text, 'index')\n     assert(\"index\" in sources_reported)\n-    assert(\"baz\" in sources_reported)\n+    assert(\"text.txt\" not in sources_reported)  # text was included as literal, no rst parsing\n+    assert(\"baz/baz\" in sources_reported)\n+    assert(\"\\nBaz was here.\" == sources_reported[\"baz/baz\"])\n\nFrom 2fad0bce50b905228383f70aa069fdc5b4d43239 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 22:41:27 +0000\nSubject: [PATCH 05/22] Add CHANGES entry\n\n---\n CHANGES | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/CHANGES b/CHANGES\nindex 2ece2cac673..174474a3159 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -20,6 +20,8 @@ Features added\n Bugs fixed\n ----------\n \n+* #10678: Emit \"source-read\" events for RST files read in via `include` directive. \n+  Patch by Halldor Fannar.\n * #11418: Clean up remaining references to ``sphinx.setup_command``\n   following the removal of support for setuptools.\n   Patch by Willem Mulder.\n\nFrom 1ab3d66e9bf32e47de1c1e04de250e6b0ca920e2 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 23:05:58 +0000\nSubject: [PATCH 06/22] Address feedback from GitHub CI\n\n---\n sphinx/parsers.py             | 12 +++++++-----\n tests/test_directive_other.py | 13 +++++++------\n 2 files changed, 14 insertions(+), 11 deletions(-)\n\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex f6a6517c069..cf5e82d07d9 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -2,12 +2,12 @@\n \n from __future__ import annotations\n \n-from typing import TYPE_CHECKING, Any\n+from typing import TYPE_CHECKING, Any, Type, Sequence\n \n import docutils.parsers\n import docutils.parsers.rst\n from docutils import nodes\n-from docutils.statemachine import StringList, State\n+from docutils.statemachine import State, StringList\n from docutils.transforms import Transform\n from docutils.transforms.universal import SmartQuotes\n \n@@ -20,11 +20,13 @@\n \n \n class RSTStateMachine(docutils.parsers.rst.states.RSTStateMachine):\n-    def __init__(self, app: Sphinx, state_classes: list[State], initial_state: str, debug: bool=False):\n+    def __init__(self, app: Sphinx, state_classes: Sequence[Type[State]], initial_state: str, \n+                 debug: bool = False):\n         self.app = app\n-        super().__init__(state_classes=state_classes, initial_state=initial_state, debug=debug)\n+        super().__init__(state_classes=state_classes, initial_state=initial_state, \n+                         debug=debug)\n \n-    def insert_input(self, include_lines : list[str], path: str):\n+    def insert_input(self, include_lines, path):\n         # First we need to combine the lines back into text so we can send it with the source-read\n         # event. In newer releases of docutils there are two lines at the end, that act as markers.\n         # We must preserve them and leave them out of the source-read event:\ndiff --git a/tests/test_directive_other.py b/tests/test_directive_other.py\nindex 466fd2f7980..3f22a380745 100644\n--- a/tests/test_directive_other.py\n+++ b/tests/test_directive_other.py\n@@ -6,7 +6,7 @@\n from sphinx import addnodes\n from sphinx.testing import restructuredtext\n from sphinx.testing.util import assert_node\n-from sphinx.directives.other import Include\n+\n \n @pytest.mark.sphinx(testroot='toctree-glob')\n def test_toctree(app):\n@@ -153,6 +153,7 @@ def test_toctree_twice(app):\n @pytest.mark.sphinx(testroot='directive-include')\n def test_include_source_read_event(app):\n     sources_reported = {}\n+\n     def source_read_handler(app, doc, source):\n         sources_reported[doc] = source[0]\n     app.connect(\"source-read\", source_read_handler)\n@@ -161,8 +162,8 @@ def source_read_handler(app, doc, source):\n             \".. include:: text.txt\\n\"\n             \"   :literal:    \\n\")\n     app.env.find_files(app.config, app.builder)\n-    doctree = restructuredtext.parse(app, text, 'index')\n-    assert(\"index\" in sources_reported)\n-    assert(\"text.txt\" not in sources_reported)  # text was included as literal, no rst parsing\n-    assert(\"baz/baz\" in sources_reported)\n-    assert(\"\\nBaz was here.\" == sources_reported[\"baz/baz\"])\n+    restructuredtext.parse(app, text, 'index')\n+    assert \"index\" in sources_reported\n+    assert \"text.txt\" not in sources_reported  # text was included as literal, no rst parsing\n+    assert \"baz/baz\" in sources_reported\n+    assert sources_reported[\"baz/baz\"] == \"\\nBaz was here.\"\n\nFrom 78c1e3f3d51f009a1457125629112dbae076af04 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 23:17:13 +0000\nSubject: [PATCH 07/22] More clean-up to appease the style gods\n\nWhy doesn't the project apply these changes automatically on the main branch?\n---\n sphinx/io.py      |  4 ++--\n sphinx/parsers.py | 13 +++++++------\n 2 files changed, 9 insertions(+), 8 deletions(-)\n\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 335502e57ba..efd2b4ea9cc 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -182,7 +182,7 @@ def create_publisher(app: Sphinx, filetype: str) -> Publisher:\n     defaults = {\"traceback\": True, **app.env.settings}\n     # Set default settings\n     if docutils.__version_info__[:2] >= (0, 19):\n-        pub.get_settings(**defaults)  # type: ignore[arg-type]\n+        pub.get_settings(**defaults)\n     else:\n-        pub.settings = pub.setup_option_parser(**defaults).get_default_values()  # type: ignore\n+        pub.settings = pub.setup_option_parser(**defaults).get_default_values()\n     return pub\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex cf5e82d07d9..58970332678 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -2,7 +2,7 @@\n \n from __future__ import annotations\n \n-from typing import TYPE_CHECKING, Any, Type, Sequence\n+from typing import TYPE_CHECKING, Any, Sequence\n \n import docutils.parsers\n import docutils.parsers.rst\n@@ -20,16 +20,17 @@\n \n \n class RSTStateMachine(docutils.parsers.rst.states.RSTStateMachine):\n-    def __init__(self, app: Sphinx, state_classes: Sequence[Type[State]], initial_state: str, \n+    def __init__(self, app: Sphinx, state_classes: Sequence[type[State]], initial_state: str,\n                  debug: bool = False):\n         self.app = app\n-        super().__init__(state_classes=state_classes, initial_state=initial_state, \n+        super().__init__(state_classes=state_classes, initial_state=initial_state,\n                          debug=debug)\n \n     def insert_input(self, include_lines, path):\n-        # First we need to combine the lines back into text so we can send it with the source-read\n-        # event. In newer releases of docutils there are two lines at the end, that act as markers.\n-        # We must preserve them and leave them out of the source-read event:\n+        # First we need to combine the lines back into text so we can send it with the \n+        # source-read event. In newer releases of docutils there are two lines at the end, \n+        # that act as markers. We must preserve them and leave them out of the source-read \n+        # event:\n         text = \"\\n\".join(include_lines[:-2])\n         # turn the path back to doc reference for source-read event\n         doc = self.app.env.path2doc(path)\n\nFrom a084948863189fcc0ec16e7d80a7b9eb391ee216 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 24 Jul 2023 23:19:35 +0000\nSubject: [PATCH 08/22] Trailing whitespaces removed\n\n---\n sphinx/parsers.py | 6 +++---\n 1 file changed, 3 insertions(+), 3 deletions(-)\n\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 58970332678..66fc231fe9b 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -27,9 +27,9 @@ def __init__(self, app: Sphinx, state_classes: Sequence[type[State]], initial_st\n                          debug=debug)\n \n     def insert_input(self, include_lines, path):\n-        # First we need to combine the lines back into text so we can send it with the \n-        # source-read event. In newer releases of docutils there are two lines at the end, \n-        # that act as markers. We must preserve them and leave them out of the source-read \n+        # First we need to combine the lines back into text so we can send it with the\n+        # source-read event. In newer releases of docutils there are two lines at the end,\n+        # that act as markers. We must preserve them and leave them out of the source-read\n         # event:\n         text = \"\\n\".join(include_lines[:-2])\n         # turn the path back to doc reference for source-read event\n\nFrom 4c727ceb7673afe74864736b30da44d4f655bdac Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Tue, 25 Jul 2023 02:56:55 +0000\nSubject: [PATCH 09/22] Fix unit tests\n\nThese tests needed to change with the introduction\nof the derived class `sphinx.parsers.RSTStateMachine`.\n---\n tests/test_ext_inheritance_diagram.py | 4 ++--\n tests/test_parser.py                  | 2 +-\n 2 files changed, 3 insertions(+), 3 deletions(-)\n\ndiff --git a/tests/test_ext_inheritance_diagram.py b/tests/test_ext_inheritance_diagram.py\nindex 00b1d689798..ab1e8d5f4c5 100644\n--- a/tests/test_ext_inheritance_diagram.py\n+++ b/tests/test_ext_inheritance_diagram.py\n@@ -210,7 +210,7 @@ def test_inheritance_diagram_latex_alias(app, status, warning):\n \n \n def test_import_classes(rootdir):\n-    from sphinx.parsers import Parser, RSTParser\n+    from sphinx.parsers import Parser, RSTParser, RSTStateMachine\n     from sphinx.util.i18n import CatalogInfo\n \n     try:\n@@ -241,7 +241,7 @@ def test_import_classes(rootdir):\n \n         # all of classes in the module\n         classes = import_classes('sphinx.parsers', None)\n-        assert set(classes) == {Parser, RSTParser}\n+        assert set(classes) == {Parser, RSTParser, RSTStateMachine}\n \n         # specified class in the module\n         classes = import_classes('sphinx.parsers.Parser', None)\ndiff --git a/tests/test_parser.py b/tests/test_parser.py\nindex 86163c6ad3d..311f51977ce 100644\n--- a/tests/test_parser.py\n+++ b/tests/test_parser.py\n@@ -9,7 +9,7 @@\n \n \n @pytest.mark.sphinx(testroot='basic')\n-@patch('docutils.parsers.rst.states.RSTStateMachine')\n+@patch('sphinx.parsers.RSTStateMachine')\n def test_RSTParser_prolog_epilog(RSTStateMachine, app):\n     document = new_document('dummy.rst')\n     document.settings = Mock(tab_width=8, language_code='')\n\nFrom 1759ebdbed8e9beb17fd7aaacf2258d211cccf1c Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Tue, 25 Jul 2023 03:38:50 +0000\nSubject: [PATCH 10/22] Fix formatting in CHANGE entry\n\n---\n CHANGES | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 174474a3159..f353222a85c 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -20,7 +20,7 @@ Features added\n Bugs fixed\n ----------\n \n-* #10678: Emit \"source-read\" events for RST files read in via `include` directive. \n+* #10678: Emit \"source-read\" events for RST files read in via ``include`` directive. \n   Patch by Halldor Fannar.\n * #11418: Clean up remaining references to ``sphinx.setup_command``\n   following the removal of support for setuptools.\n\nFrom 68ca10bd8ebf4f8757940f96db48128b012e941b Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Tue, 25 Jul 2023 03:48:49 +0000\nSubject: [PATCH 11/22] Improve comment\n\nNoting that docutils 0.18 introduced the marker.\n---\n sphinx/parsers.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 66fc231fe9b..d0cba6b3f88 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -28,7 +28,7 @@ def __init__(self, app: Sphinx, state_classes: Sequence[type[State]], initial_st\n \n     def insert_input(self, include_lines, path):\n         # First we need to combine the lines back into text so we can send it with the\n-        # source-read event. In newer releases of docutils there are two lines at the end,\n+        # source-read event. In docutils 0.18 and later, there are two lines at the end,\n         # that act as markers. We must preserve them and leave them out of the source-read\n         # event:\n         text = \"\\n\".join(include_lines[:-2])\n\nFrom 8d2f487bb14f8c9e358a2562f04935eb2d15df82 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Tue, 25 Jul 2023 16:57:04 +0000\nSubject: [PATCH 12/22] Fix test failure on Windows\n\n---\n sphinx/parsers.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 66fc231fe9b..19e4ccb8c65 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -13,6 +13,7 @@\n \n from sphinx.config import Config\n from sphinx.environment import BuildEnvironment\n+from sphinx.util.osutil import os_path\n from sphinx.util.rst import append_epilog, prepend_prolog\n \n if TYPE_CHECKING:\n@@ -33,7 +34,7 @@ def insert_input(self, include_lines, path):\n         # event:\n         text = \"\\n\".join(include_lines[:-2])\n         # turn the path back to doc reference for source-read event\n-        doc = self.app.env.path2doc(path)\n+        doc = self.app.env.path2doc(os_path(path))\n         # emit \"source-read\" event\n         arg = [text]\n         self.app.env.events.emit(\"source-read\", doc, arg)\n\nFrom db5eef421becc0e304f668992be327326102c75f Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Tue, 25 Jul 2023 10:39:47 +0000\nSubject: [PATCH 13/22] Use :dudir: to refer to include directive\n\n---\n CHANGES | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex f353222a85c..66ef91087f4 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -20,7 +20,7 @@ Features added\n Bugs fixed\n ----------\n \n-* #10678: Emit \"source-read\" events for RST files read in via ``include`` directive. \n+* #10678: Emit \"source-read\" events for RST files read in via :dudir:`include` directive. \n   Patch by Halldor Fannar.\n * #11418: Clean up remaining references to ``sphinx.setup_command``\n   following the removal of support for setuptools.\n\nFrom a76918feaa5cdec4d39e981f7ab6ef9b25a5dd75 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Tue, 25 Jul 2023 14:58:21 +0000\nSubject: [PATCH 14/22] Revert \"Fix unit tests\"\n\nThis reverts commit 4c727ceb7673afe74864736b30da44d4f655bdac.\n---\n tests/test_ext_inheritance_diagram.py | 4 ++--\n tests/test_parser.py                  | 2 +-\n 2 files changed, 3 insertions(+), 3 deletions(-)\n\ndiff --git a/tests/test_ext_inheritance_diagram.py b/tests/test_ext_inheritance_diagram.py\nindex ab1e8d5f4c5..00b1d689798 100644\n--- a/tests/test_ext_inheritance_diagram.py\n+++ b/tests/test_ext_inheritance_diagram.py\n@@ -210,7 +210,7 @@ def test_inheritance_diagram_latex_alias(app, status, warning):\n \n \n def test_import_classes(rootdir):\n-    from sphinx.parsers import Parser, RSTParser, RSTStateMachine\n+    from sphinx.parsers import Parser, RSTParser\n     from sphinx.util.i18n import CatalogInfo\n \n     try:\n@@ -241,7 +241,7 @@ def test_import_classes(rootdir):\n \n         # all of classes in the module\n         classes = import_classes('sphinx.parsers', None)\n-        assert set(classes) == {Parser, RSTParser, RSTStateMachine}\n+        assert set(classes) == {Parser, RSTParser}\n \n         # specified class in the module\n         classes = import_classes('sphinx.parsers.Parser', None)\ndiff --git a/tests/test_parser.py b/tests/test_parser.py\nindex 311f51977ce..86163c6ad3d 100644\n--- a/tests/test_parser.py\n+++ b/tests/test_parser.py\n@@ -9,7 +9,7 @@\n \n \n @pytest.mark.sphinx(testroot='basic')\n-@patch('sphinx.parsers.RSTStateMachine')\n+@patch('docutils.parsers.rst.states.RSTStateMachine')\n def test_RSTParser_prolog_epilog(RSTStateMachine, app):\n     document = new_document('dummy.rst')\n     document.settings = Mock(tab_width=8, language_code='')\n\nFrom 9cd720528583a8acf507c5a06dd093699e5d9b4a Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Tue, 25 Jul 2023 15:26:43 +0000\nSubject: [PATCH 15/22] Change approach\n\nThe subclassing will not work because docutils doesn't use Sphinx's rst\nparser for processing the included\nrst text.  This is a shame, and\nstrictly speaking an issue in Sphinx/docutils.\nSo we go back to monkey patching.\nIt works, the change is now better contained inside Sphinx Include directive.\nAdded a unit test to verify that\nincludes of includes are correctly\nhandled.\n---\n sphinx/directives/other.py                    | 25 +++++++++++++\n sphinx/parsers.py                             | 35 +++----------------\n .../roots/test-directive-include/baz/baz.rst  |  2 ++\n tests/roots/test-directive-include/foo.rst    |  1 +\n tests/test_directive_other.py                 | 20 ++++++++++-\n 5 files changed, 51 insertions(+), 32 deletions(-)\n create mode 100644 tests/roots/test-directive-include/foo.rst\n\ndiff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 7f9930e51ce..39c133624f4 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -9,6 +9,7 @@\n from docutils.parsers.rst.directives.admonitions import BaseAdmonition\n from docutils.parsers.rst.directives.misc import Class\n from docutils.parsers.rst.directives.misc import Include as BaseInclude\n+from docutils.statemachine import StateMachine\n \n from sphinx import addnodes\n from sphinx.domains.changeset import VersionChange  # noqa: F401  # for compatibility\n@@ -17,6 +18,7 @@\n from sphinx.util.docutils import SphinxDirective\n from sphinx.util.matching import Matcher, patfilter\n from sphinx.util.nodes import explicit_title_re\n+from sphinx.util.osutil import os_path\n from sphinx.util.typing import OptionSpec\n \n if TYPE_CHECKING:\n@@ -357,6 +359,29 @@ class Include(BaseInclude, SphinxDirective):\n     \"\"\"\n \n     def run(self) -> list[Node]:\n+        # To properly emit \"source-read\" events from included RST text we\n+        # must patch the state_machine.insert_input method. In the future docutils\n+        # will hopefully offer a way for Sphinx to provide the RST parser to use\n+        # when parsing RST text that comes in via Include directive.\n+        def insert_input(include_lines, path):\n+            # First we need to combine the lines back into text so we can send it with the\n+            # source-read event. In docutils 0.18 and later, there are two lines at the end,\n+            # that act as markers. We must preserve them and leave them out of the source-read\n+            # event:\n+            text = \"\\n\".join(include_lines[:-2])\n+            # the docname to pass into the source-read event\n+            docname = self.env.path2doc(os_path(path))\n+            # emit \"source-read\" event\n+            arg = [text]\n+            self.env.app.events.emit(\"source-read\", docname, arg)\n+            text = arg[0]\n+            # split back into lines and reattach the two marker lines\n+            include_lines = text.splitlines() + include_lines[-2:]\n+            # Call the parent implementation. Note that this snake does not eat its tail\n+            # because we patch the Instance method and this call is to the Class method\n+            return StateMachine.insert_input(self.state_machine, include_lines, path)\n+\n+        self.state_machine.insert_input = insert_input\n         if self.arguments[0].startswith('<') and \\\n            self.arguments[0].endswith('>'):\n             # docutils \"standard\" includes, do not do path processing\ndiff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 04b4538b5da..3bcd69f52f0 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -2,50 +2,24 @@\n \n from __future__ import annotations\n \n-from typing import TYPE_CHECKING, Any, Sequence\n+from typing import TYPE_CHECKING, Any\n \n import docutils.parsers\n import docutils.parsers.rst\n from docutils import nodes\n-from docutils.statemachine import State, StringList\n+from docutils.parsers.rst import states\n+from docutils.statemachine import StringList\n from docutils.transforms import Transform\n from docutils.transforms.universal import SmartQuotes\n \n from sphinx.config import Config\n from sphinx.environment import BuildEnvironment\n-from sphinx.util.osutil import os_path\n from sphinx.util.rst import append_epilog, prepend_prolog\n \n if TYPE_CHECKING:\n     from sphinx.application import Sphinx\n \n \n-class RSTStateMachine(docutils.parsers.rst.states.RSTStateMachine):\n-    def __init__(self, app: Sphinx, state_classes: Sequence[type[State]], initial_state: str,\n-                 debug: bool = False):\n-        self.app = app\n-        super().__init__(state_classes=state_classes, initial_state=initial_state,\n-                         debug=debug)\n-\n-    def insert_input(self, include_lines, path):\n-        # First we need to combine the lines back into text so we can send it with the\n-        # source-read event. In docutils 0.18 and later, there are two lines at the end,\n-        # that act as markers. We must preserve them and leave them out of the source-read\n-        # event:\n-        text = \"\\n\".join(include_lines[:-2])\n-        # turn the path back to doc reference for source-read event\n-        doc = self.app.env.path2doc(os_path(path))\n-        # emit \"source-read\" event\n-        arg = [text]\n-        self.app.env.events.emit(\"source-read\", doc, arg)\n-        text = arg[0]\n-        # split back into lines and reattach the two marker lines\n-        processed_lines = text.splitlines()\n-        processed_lines += include_lines[-2:]\n-        # call the parent implementation\n-        return super().insert_input(include_lines, path)\n-\n-\n class Parser(docutils.parsers.Parser):\n     \"\"\"\n     A base class of source parsers.  The additional parsers should inherit this class instead\n@@ -87,8 +61,7 @@ def get_transforms(self) -> list[type[Transform]]:\n     def parse(self, inputstring: str | StringList, document: nodes.document) -> None:\n         \"\"\"Parse text and generate a document tree.\"\"\"\n         self.setup_parse(inputstring, document)  # type: ignore\n-        self.statemachine = RSTStateMachine(\n-            self.env.app,\n+        self.statemachine = states.RSTStateMachine(\n             state_classes=self.state_classes,\n             initial_state=self.initial_state,\n             debug=document.reporter.debug_flag)\ndiff --git a/tests/roots/test-directive-include/baz/baz.rst b/tests/roots/test-directive-include/baz/baz.rst\nindex 84c3f2c2cc8..d8207261afc 100644\n--- a/tests/roots/test-directive-include/baz/baz.rst\n+++ b/tests/roots/test-directive-include/baz/baz.rst\n@@ -1,4 +1,6 @@\n Baz\n ===\n \n+.. include:: foo.rst\n+\n Baz was here.\n\\ No newline at end of file\ndiff --git a/tests/roots/test-directive-include/foo.rst b/tests/roots/test-directive-include/foo.rst\nnew file mode 100644\nindex 00000000000..0f82e661be4\n--- /dev/null\n+++ b/tests/roots/test-directive-include/foo.rst\n@@ -0,0 +1 @@\n+The #magical foo.\ndiff --git a/tests/test_directive_other.py b/tests/test_directive_other.py\nindex 3f22a380745..45bd033045a 100644\n--- a/tests/test_directive_other.py\n+++ b/tests/test_directive_other.py\n@@ -156,9 +156,10 @@ def test_include_source_read_event(app):\n \n     def source_read_handler(app, doc, source):\n         sources_reported[doc] = source[0]\n+\n     app.connect(\"source-read\", source_read_handler)\n     text = (\".. include:: baz/baz.rst\\n\"\n-            \"   :start-line: 2\\n\\n\"\n+            \"   :start-line: 4\\n\\n\"\n             \".. include:: text.txt\\n\"\n             \"   :literal:    \\n\")\n     app.env.find_files(app.config, app.builder)\n@@ -167,3 +168,20 @@ def source_read_handler(app, doc, source):\n     assert \"text.txt\" not in sources_reported  # text was included as literal, no rst parsing\n     assert \"baz/baz\" in sources_reported\n     assert sources_reported[\"baz/baz\"] == \"\\nBaz was here.\"\n+\n+\n+@pytest.mark.sphinx(testroot='directive-include')\n+def test_include_source_read_event_nested_includes(app):\n+\n+    def source_read_handler(app, doc, source):\n+        text = source[0].replace(\"#magical\", \"amazing\")\n+        source[0] = text\n+\n+    app.connect(\"source-read\", source_read_handler)\n+    text = (\".. include:: baz/baz.rst\\n\")\n+    app.env.find_files(app.config, app.builder)\n+    doctree = restructuredtext.parse(app, text, 'index')\n+    assert_node(doctree, addnodes.document)\n+    assert len(doctree.children) == 3\n+    assert_node(doctree.children[1], nodes.paragraph)\n+    assert doctree.children[1].rawsource == \"The amazing foo.\"\n\nFrom 9712e58906b5efcf032fc520d68936dcb7967717 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 31 Jul 2023 09:44:38 +0000\nSubject: [PATCH 16/22] Add type: ignore to work around known issue\n\n---\n sphinx/directives/other.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 39c133624f4..356f4cdecf6 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -381,7 +381,8 @@ def insert_input(include_lines, path):\n             # because we patch the Instance method and this call is to the Class method\n             return StateMachine.insert_input(self.state_machine, include_lines, path)\n \n-        self.state_machine.insert_input = insert_input\n+        # See https://github.com/python/mypy/issues/2427 for details on the mypy issue\n+        self.state_machine.insert_input = insert_input  # type: ignore[method-assign]\n         if self.arguments[0].startswith('<') and \\\n            self.arguments[0].endswith('>'):\n             # docutils \"standard\" includes, do not do path processing\n\nFrom 876e039d61abb146874abb70ca0da12e44236344 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 31 Jul 2023 10:01:45 +0000\nSubject: [PATCH 17/22] Address flake8 issue\n\nThese are not part of my change but mysteriously now\ncause failure in CI.\n---\n sphinx/builders/linkcheck.py  | 2 +-\n tests/test_build_linkcheck.py | 2 +-\n 2 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 6c99f96e685..6e41e2c7483 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -189,7 +189,7 @@ def finish(self) -> None:\n \n         output_text = path.join(self.outdir, 'output.txt')\n         output_json = path.join(self.outdir, 'output.json')\n-        with open(output_text, 'w', encoding=\"utf-8\") as self.txt_outfile,\\\n+        with open(output_text, 'w', encoding=\"utf-8\") as self.txt_outfile, \\\n              open(output_json, 'w', encoding=\"utf-8\") as self.json_outfile:\n             for result in checker.check(self.hyperlinks):\n                 self.process_result(result)\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 260cf2c4214..6d17f25a1fa 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -592,7 +592,7 @@ def test_too_many_requests_retry_after_HTTP_date(app, capsys):\n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n def test_too_many_requests_retry_after_without_header(app, capsys):\n-    with http_server(make_retry_after_handler([(429, None), (200, None)])),\\\n+    with http_server(make_retry_after_handler([(429, None), (200, None)])), \\\n          mock.patch(\"sphinx.builders.linkcheck.DEFAULT_DELAY\", 0):\n         app.build()\n     content = (app.outdir / 'output.json').read_text(encoding='utf8')\n\nFrom 3f165cd4527d323cb3e7059cb91f80322314f08b Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 31 Jul 2023 16:51:17 +0000\nSubject: [PATCH 18/22] Adjust CHANGES\n\ncreated Unreleased section and\nmoved my change notes to it.\n---\n CHANGES | 10 ++++++++--\n 1 file changed, 8 insertions(+), 2 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 08ea93db478..fd396150bdc 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -1,3 +1,11 @@\n+Unreleased\n+=====================================\n+\n+Bugs fixed\n+----------\n+* #10678: Emit \"source-read\" events for RST files read in via :dudir:`include` directive. \n+  Patch by Halldor Fannar.\n+\n Release 7.1.1 (released Jul 27, 2023)\n =====================================\n \n@@ -111,8 +119,6 @@ Dependencies\n Bugs fixed\n ----------\n \n-* #10678: Emit \"source-read\" events for RST files read in via :dudir:`include` directive. \n-  Patch by Halldor Fannar.\n * #11418: Clean up remaining references to ``sphinx.setup_command``\n   following the removal of support for setuptools.\n   Patch by Willem Mulder.\n\nFrom db8c4e92c4d3a62c11a6f9ed5cf6c1e95634fce2 Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <hfannar@nvidia.com>\nDate: Mon, 31 Jul 2023 16:53:40 +0000\nSubject: [PATCH 19/22] Add space to silence flake8\n\n---\n sphinx/builders/linkcheck.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 3592f9551fd..1b7b56eeea3 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -65,7 +65,7 @@ def finish(self) -> None:\n \n         output_text = path.join(self.outdir, 'output.txt')\n         output_json = path.join(self.outdir, 'output.json')\n-        with open(output_text, 'w', encoding='utf-8') as self.txt_outfile,\\\n+        with open(output_text, 'w', encoding='utf-8') as self.txt_outfile, \\\n              open(output_json, 'w', encoding='utf-8') as self.json_outfile:\n             for result in checker.check(self.hyperlinks):\n                 self.process_result(result)\n\nFrom c87cf130f8234f35c19de75a3d34c6d417f555fe Mon Sep 17 00:00:00 2001\nFrom: Halldor Fannar <halldorfannar@users.noreply.github.com>\nDate: Mon, 7 Aug 2023 17:01:40 +0200\nSubject: [PATCH 20/22] Update sphinx/directives/other.py\n\nCo-authored-by: picnixz <10796600+picnixz@users.noreply.github.com>\n---\n sphinx/directives/other.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 356f4cdecf6..51ebf20bbb3 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -365,7 +365,7 @@ def run(self) -> list[Node]:\n         # when parsing RST text that comes in via Include directive.\n         def insert_input(include_lines, path):\n             # First we need to combine the lines back into text so we can send it with the\n-            # source-read event. In docutils 0.18 and later, there are two lines at the end,\n+            # source-read event. In docutils 0.18 and later, there are two lines at the end\n             # that act as markers. We must preserve them and leave them out of the source-read\n             # event:\n             text = \"\\n\".join(include_lines[:-2])\n\nFrom 1dba6ff2e92e15c11f6b99351f3aea26f7b15953 Mon Sep 17 00:00:00 2001\nFrom: Adam Turner <9087854+aa-turner@users.noreply.github.com>\nDate: Fri, 11 Aug 2023 02:32:32 +0100\nSubject: [PATCH 21/22] Formatting\n\n---\n sphinx/directives/other.py | 36 ++++++++++++++++++++++--------------\n 1 file changed, 22 insertions(+), 14 deletions(-)\n\ndiff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex f7275b2d50d..d10c4c6fcf2 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -370,30 +370,38 @@ class Include(BaseInclude, SphinxDirective):\n     \"\"\"\n \n     def run(self) -> list[Node]:\n-        # To properly emit \"source-read\" events from included RST text we\n-        # must patch the state_machine.insert_input method. In the future docutils\n-        # will hopefully offer a way for Sphinx to provide the RST parser to use\n+\n+        # To properly emit \"source-read\" events from included RST text,\n+        # we must patch the ``StateMachine.insert_input()`` method.\n+        # In the future, docutils will hopefully offer a way for Sphinx\n+        # to provide the RST parser to use\n         # when parsing RST text that comes in via Include directive.\n-        def insert_input(include_lines, path):\n-            # First we need to combine the lines back into text so we can send it with the\n-            # source-read event. In docutils 0.18 and later, there are two lines at the end\n-            # that act as markers. We must preserve them and leave them out of the source-read\n-            # event:\n+        def _insert_input(include_lines, path):\n+            # First, we need to combine the lines back into text so that\n+            # we can send it with the source-read event.\n+            # In docutils 0.18 and later, there are two lines at the end\n+            # that act as markers.\n+            # We must preserve them and leave them out of the source-read event:\n             text = \"\\n\".join(include_lines[:-2])\n-            # the docname to pass into the source-read event\n+\n+            # The docname to pass into the source-read event\n             docname = self.env.path2doc(os_path(path))\n-            # emit \"source-read\" event\n+            # Emit the \"source-read\" event\n             arg = [text]\n             self.env.app.events.emit(\"source-read\", docname, arg)\n             text = arg[0]\n-            # split back into lines and reattach the two marker lines\n+\n+            # Split back into lines and reattach the two marker lines\n             include_lines = text.splitlines() + include_lines[-2:]\n-            # Call the parent implementation. Note that this snake does not eat its tail\n-            # because we patch the Instance method and this call is to the Class method\n+\n+            # Call the parent implementation.\n+            # Note that this snake does not eat its tail because we patch\n+            # the *Instance* method and this call is to the *Class* method.\n             return StateMachine.insert_input(self.state_machine, include_lines, path)\n \n         # See https://github.com/python/mypy/issues/2427 for details on the mypy issue\n-        self.state_machine.insert_input = insert_input  # type: ignore[method-assign]\n+        self.state_machine.insert_input = _insert_input  # type: ignore[method-assign]\n+\n         if self.arguments[0].startswith('<') and \\\n            self.arguments[0].endswith('>'):\n             # docutils \"standard\" includes, do not do path processing\n\nFrom 9550b09bc908f957ba0c387efdf04f341d4bb315 Mon Sep 17 00:00:00 2001\nFrom: Adam Turner <9087854+aa-turner@users.noreply.github.com>\nDate: Mon, 14 Aug 2023 15:53:32 +0100\nSubject: [PATCH 22/22] Only patch if there are source-read listeners\n\n---\n sphinx/directives/other.py | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 9e55ac17de7..e65cbfdfe68 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -400,8 +400,10 @@ def _insert_input(include_lines, path):\n             # the *Instance* method and this call is to the *Class* method.\n             return StateMachine.insert_input(self.state_machine, include_lines, path)\n \n-        # See https://github.com/python/mypy/issues/2427 for details on the mypy issue\n-        self.state_machine.insert_input = _insert_input  # type: ignore[method-assign]\n+        # Only enable this patch if there are listeners for 'source-read'.\n+        if self.env.app.events.listeners.get('source-read'):\n+            # See https://github.com/python/mypy/issues/2427 for details on the mypy issue\n+            self.state_machine.insert_input = _insert_input  # type: ignore[method-assign]\n \n         if self.arguments[0].startswith('<') and \\\n            self.arguments[0].endswith('>'):\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/11510"}