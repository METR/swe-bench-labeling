{"instance_id": "scikit-learn__scikit-learn-25232", "score": "C", "diff": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 1d918bc0c..ec52ce7e8 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -117,6 +117,13 @@ class IterativeImputer(_BaseImputer):\n         Which strategy to use to initialize the missing values. Same as the\n         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.\n \n+    fill_value : str or numerical value, default=None\n+        When `initial_strategy == \"constant\"`, `fill_value` is used to replace all\n+        occurrences of missing_values in the first imputation round. For string\n+        or object data types, `fill_value` must be a string.\n+        If `None`, `fill_value` will be 0 when imputing numerical\n+        data and \"missing_value\" for strings or object data types.\n+\n     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \\\n             'random'}, default='ascending'\n         The order in which the features will be imputed. Possible values:\n@@ -285,6 +292,7 @@ class IterativeImputer(_BaseImputer):\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n         \"skip_complete\": [\"boolean\"],\n+        \"fill_value\": \"no_validation\",  # any object is valid\n         \"min_value\": [None, Interval(Real, None, None, closed=\"both\"), \"array-like\"],\n         \"max_value\": [None, Interval(Real, None, None, closed=\"both\"), \"array-like\"],\n         \"verbose\": [\"verbose\"],\n@@ -301,6 +309,7 @@ class IterativeImputer(_BaseImputer):\n         tol=1e-3,\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n+        fill_value=None,\n         imputation_order=\"ascending\",\n         skip_complete=False,\n         min_value=-np.inf,\n@@ -322,6 +331,7 @@ class IterativeImputer(_BaseImputer):\n         self.tol = tol\n         self.n_nearest_features = n_nearest_features\n         self.initial_strategy = initial_strategy\n+        self.fill_value = fill_value\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n         self.min_value = min_value\n@@ -613,6 +623,7 @@ class IterativeImputer(_BaseImputer):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n+                fill_value=self.fill_value,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\ndiff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex 86553effa..d6fde2294 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,6 +1524,57 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_fill_value():\n+    \"\"\"Test IterativeImputer with fill_value parameter when initial_strategy='constant'.\"\"\"\n+    # Test with custom fill_value\n+    X = np.array([[1, 2, np.nan], [4, np.nan, 6], [7, 8, 9]])\n+    \n+    # Test with constant strategy and custom fill_value\n+    imputer = IterativeImputer(\n+        initial_strategy='constant', \n+        fill_value=999,\n+        max_iter=1,\n+        random_state=42\n+    )\n+    imputer.fit_transform(X)\n+    assert imputer.initial_imputer_.fill_value == 999\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [999, 999, 999])\n+    \n+    # Test with np.nan as fill_value\n+    imputer_nan = IterativeImputer(\n+        initial_strategy='constant',\n+        fill_value=np.nan,\n+        max_iter=1,\n+        random_state=42\n+    )\n+    imputer_nan.fit_transform(X)\n+    assert np.isnan(imputer_nan.initial_imputer_.fill_value)\n+    assert np.all(np.isnan(imputer_nan.initial_imputer_.statistics_))\n+    \n+    # Test without fill_value (should use default of None, which becomes 0)\n+    imputer_default = IterativeImputer(\n+        initial_strategy='constant',\n+        max_iter=1,\n+        random_state=42\n+    )\n+    imputer_default.fit_transform(X)\n+    assert imputer_default.initial_imputer_.fill_value is None\n+    assert_array_equal(imputer_default.initial_imputer_.statistics_, [0, 0, 0])\n+    \n+    # Test that fill_value is passed through correctly even with other strategies\n+    # (SimpleImputer will ignore it, but it should still be set)\n+    imputer_mean = IterativeImputer(\n+        initial_strategy='mean',\n+        fill_value=999,\n+        max_iter=1,\n+        random_state=42\n+    )\n+    imputer_mean.fit_transform(X)\n+    assert imputer_mean.initial_imputer_.fill_value == 999\n+    # But statistics should be means, not the fill_value\n+    assert imputer_mean.initial_imputer_.statistics_[0] != 999\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\ndiff --git a/validate_fix.py b/validate_fix.py\nnew file mode 100644\nindex 000000000..8b1378917\n--- /dev/null\n+++ b/validate_fix.py\n@@ -0,0 +1 @@\n+\n", "gold_standard_diff": "From 77b32499533ce907c0ebad3df6e6f94ab55674e4 Mon Sep 17 00:00:00 2001\nFrom: ValueInvestorThijs <thijsvanweezel@gmail.com>\nDate: Sat, 24 Dec 2022 15:40:32 +0100\nSubject: [PATCH 1/9] Adds parameter `fill_value` to IterativeImputer.\n\n---\n sklearn/impute/_iterative.py | 10 ++++++++++\n 1 file changed, 10 insertions(+)\n\ndiff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 1d918bc0c4643..c8c490344bb6c 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -1,3 +1,5 @@\n+__package__ = \"sklearn.impute\"\n+\n from time import time\n from collections import namedtuple\n from numbers import Integral, Real\n@@ -117,6 +119,10 @@ class IterativeImputer(_BaseImputer):\n         Which strategy to use to initialize the missing values. Same as the\n         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.\n \n+    fill_value : float, default=None\n+        The value used to replace missing values if initial_strategy=='constant'.\n+        Same as the `fill_value` parameter in :class:`~sklearn.impute.SimpleImputer`.\n+\n     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \\\n             'random'}, default='ascending'\n         The order in which the features will be imputed. Possible values:\n@@ -281,6 +287,7 @@ class IterativeImputer(_BaseImputer):\n         \"initial_strategy\": [\n             StrOptions({\"mean\", \"median\", \"most_frequent\", \"constant\"})\n         ],\n+        \"fill_value\": \"no_validation\",  # any object is valid\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n@@ -301,6 +308,7 @@ def __init__(\n         tol=1e-3,\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n+        fill_value=None,\n         imputation_order=\"ascending\",\n         skip_complete=False,\n         min_value=-np.inf,\n@@ -322,6 +330,7 @@ def __init__(\n         self.tol = tol\n         self.n_nearest_features = n_nearest_features\n         self.initial_strategy = initial_strategy\n+        self.fill_value = fill_value\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n         self.min_value = min_value\n@@ -613,6 +622,7 @@ def _initial_imputation(self, X, in_fit=False):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n+                fill_value=self.fill_value,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n\nFrom 53c5b1e8b6243cf638769546975d310f97ba8522 Mon Sep 17 00:00:00 2001\nFrom: ValueInvestorThijs <thijsvanweezel@gmail.com>\nDate: Sat, 24 Dec 2022 15:48:39 +0100\nSubject: [PATCH 2/9] Revert \"Adds parameter `fill_value` to IterativeImputer.\"\n\nThis reverts commit 77b32499533ce907c0ebad3df6e6f94ab55674e4.\n---\n sklearn/impute/_iterative.py | 10 ----------\n 1 file changed, 10 deletions(-)\n\ndiff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex c8c490344bb6c..1d918bc0c4643 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -1,5 +1,3 @@\n-__package__ = \"sklearn.impute\"\n-\n from time import time\n from collections import namedtuple\n from numbers import Integral, Real\n@@ -119,10 +117,6 @@ class IterativeImputer(_BaseImputer):\n         Which strategy to use to initialize the missing values. Same as the\n         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.\n \n-    fill_value : float, default=None\n-        The value used to replace missing values if initial_strategy=='constant'.\n-        Same as the `fill_value` parameter in :class:`~sklearn.impute.SimpleImputer`.\n-\n     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \\\n             'random'}, default='ascending'\n         The order in which the features will be imputed. Possible values:\n@@ -287,7 +281,6 @@ class IterativeImputer(_BaseImputer):\n         \"initial_strategy\": [\n             StrOptions({\"mean\", \"median\", \"most_frequent\", \"constant\"})\n         ],\n-        \"fill_value\": \"no_validation\",  # any object is valid\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n@@ -308,7 +301,6 @@ def __init__(\n         tol=1e-3,\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n-        fill_value=None,\n         imputation_order=\"ascending\",\n         skip_complete=False,\n         min_value=-np.inf,\n@@ -330,7 +322,6 @@ def __init__(\n         self.tol = tol\n         self.n_nearest_features = n_nearest_features\n         self.initial_strategy = initial_strategy\n-        self.fill_value = fill_value\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n         self.min_value = min_value\n@@ -622,7 +613,6 @@ def _initial_imputation(self, X, in_fit=False):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n-                fill_value=self.fill_value,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n\nFrom 0ab71ce7872365745d50e9847e8020926a4a8ce7 Mon Sep 17 00:00:00 2001\nFrom: ValueInvestorThijs <thijsvanweezel@gmail.com>\nDate: Sat, 24 Dec 2022 15:51:24 +0100\nSubject: [PATCH 3/9] ENH Adds parameter `fill_value` to IterativeImputer\n (#25052)\n\n---\n sklearn/impute/_iterative.py | 8 ++++++++\n 1 file changed, 8 insertions(+)\n\ndiff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 1d918bc0c4643..25e5015a91c19 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -117,6 +117,10 @@ class IterativeImputer(_BaseImputer):\n         Which strategy to use to initialize the missing values. Same as the\n         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.\n \n+    fill_value : float, default=None\n+        The value used to replace missing values if initial_strategy=='constant'.\n+        Same as the `fill_value` parameter in :class:`~sklearn.impute.SimpleImputer`.\n+\n     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \\\n             'random'}, default='ascending'\n         The order in which the features will be imputed. Possible values:\n@@ -281,6 +285,7 @@ class IterativeImputer(_BaseImputer):\n         \"initial_strategy\": [\n             StrOptions({\"mean\", \"median\", \"most_frequent\", \"constant\"})\n         ],\n+        \"fill_value\": \"no_validation\",  # any object is valid\n         \"imputation_order\": [\n             StrOptions({\"ascending\", \"descending\", \"roman\", \"arabic\", \"random\"})\n         ],\n@@ -301,6 +306,7 @@ def __init__(\n         tol=1e-3,\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n+        fill_value=None,\n         imputation_order=\"ascending\",\n         skip_complete=False,\n         min_value=-np.inf,\n@@ -322,6 +328,7 @@ def __init__(\n         self.tol = tol\n         self.n_nearest_features = n_nearest_features\n         self.initial_strategy = initial_strategy\n+        self.fill_value = fill_value\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n         self.min_value = min_value\n@@ -613,6 +620,7 @@ def _initial_imputation(self, X, in_fit=False):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n+                fill_value=self.fill_value,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n\nFrom b7967454abfa0d465b6a306df760302274c522bb Mon Sep 17 00:00:00 2001\nFrom: ValueInvestorThijs <thijsvanweezel@gmail.com>\nDate: Tue, 3 Jan 2023 17:14:04 +0100\nSubject: [PATCH 4/9] Adds a test for fill_value and an entry in the changelog\n file.\n\n---\n doc/whats_new/v1.3.rst              |  5 +++++\n sklearn/impute/tests/test_impute.py | 14 ++++++++++++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/doc/whats_new/v1.3.rst b/doc/whats_new/v1.3.rst\nindex eb9f0cc473e27..3c516534aba0d 100644\n--- a/doc/whats_new/v1.3.rst\n+++ b/doc/whats_new/v1.3.rst\n@@ -48,6 +48,11 @@ Changelog\n   :class:`ensemble.ExtraTreesClassifier` and :class:`ensemble.ExtraTreesRegressor`.\n   :pr:`25177` by :user:`Tim Head <betatim>`.\n \n+:mod:`sklearn.impute`\n+.......................\n+- |Enhancement| Added the parameter `fill_value` to :class:`impute.IterativeImputer`.\n+  :pr:`25232` by :user:`Thijs van Weezel <ValueInvestorThijs>`.\n+\n :mod:`sklearn.pipeline`\n .......................\n - |Feature| :class:`pipeline.FeatureUnion` can now use indexing notation (e.g.\ndiff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex 86553effafcbf..b463c2bc95f28 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,6 +1524,20 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_constant_fill_value():\n+    # Test initial imputation using the constant strategy.\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    X_true = np.array([[0, 2, 3, 0], [4, 0, 5, 0], [6, 7, 0, 0], [8, 9, 0, 0]])\n+\n+    imputer = IterativeImputer(\n+        missing_values=-1, initial_strategy=\"constant\", fill_value=0, max_iter=0\n+    )\n+    X_trans = imputer.fit_transform(X)\n+\n+    assert_array_equal(X_trans, X_true)\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n\nFrom f26f59d90b4fbd027f459fadc3a40f9285e3abf3 Mon Sep 17 00:00:00 2001\nFrom: Thijs van Weezel <117186594+ValueInvestorThijs@users.noreply.github.com>\nDate: Tue, 3 Jan 2023 17:18:26 +0100\nSubject: [PATCH 5/9] Update sklearn/impute/_iterative.py\n\nCo-authored-by: Guillaume Lemaitre <g.lemaitre58@gmail.com>\n---\n sklearn/impute/_iterative.py | 11 ++++++++---\n 1 file changed, 8 insertions(+), 3 deletions(-)\n\ndiff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 25e5015a91c19..60b2013f9c5f8 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -117,9 +117,14 @@ class IterativeImputer(_BaseImputer):\n         Which strategy to use to initialize the missing values. Same as the\n         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.\n \n-    fill_value : float, default=None\n-        The value used to replace missing values if initial_strategy=='constant'.\n-        Same as the `fill_value` parameter in :class:`~sklearn.impute.SimpleImputer`.\n+    fill_value : str or numerical value, default=None\n+        When `strategy=\"constant\"`, `fill_value` is used to replace all\n+        occurrences of missing_values. For string or object data types,\n+        `fill_value` must be a string.\n+        If `None`, `fill_value` will be 0 when imputing numerical\n+        data and \"missing_value\" for strings or object data types.\n+\n+        .. versionadded:: 1.3\n \n     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \\\n             'random'}, default='ascending'\n\nFrom a54b561e06cef235c1bd317f0deb09729d43ecbd Mon Sep 17 00:00:00 2001\nFrom: Thijs van Weezel <117186594+ValueInvestorThijs@users.noreply.github.com>\nDate: Mon, 9 Jan 2023 11:50:29 +0100\nSubject: [PATCH 6/9] Update sklearn/impute/tests/test_impute.py\n\nCo-authored-by: Guillaume Lemaitre <g.lemaitre58@gmail.com>\n---\n sklearn/impute/tests/test_impute.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex b463c2bc95f28..c8235d7c6a893 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1525,7 +1525,7 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n \n \n def test_iterative_imputer_constant_fill_value():\n-    # Test initial imputation using the constant strategy.\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n     X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n \n     X_true = np.array([[0, 2, 3, 0], [4, 0, 5, 0], [6, 7, 0, 0], [8, 9, 0, 0]])\n\nFrom 7198b3b63924bc3543e6e00eabe5a1907d552918 Mon Sep 17 00:00:00 2001\nFrom: Thijs van Weezel <117186594+ValueInvestorThijs@users.noreply.github.com>\nDate: Mon, 9 Jan 2023 11:50:42 +0100\nSubject: [PATCH 7/9] Update sklearn/impute/tests/test_impute.py\n\nCo-authored-by: Guillaume Lemaitre <g.lemaitre58@gmail.com>\n---\n sklearn/impute/tests/test_impute.py | 10 ++++------\n 1 file changed, 4 insertions(+), 6 deletions(-)\n\ndiff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex c8235d7c6a893..94839c081b287 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1528,14 +1528,12 @@ def test_iterative_imputer_constant_fill_value():\n     \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n     X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n \n-    X_true = np.array([[0, 2, 3, 0], [4, 0, 5, 0], [6, 7, 0, 0], [8, 9, 0, 0]])\n-\n+    fill_value = 100\n     imputer = IterativeImputer(\n-        missing_values=-1, initial_strategy=\"constant\", fill_value=0, max_iter=0\n+        missing_values=-1, initial_strategy=\"constant\", fill_value=100, max_iter=0\n     )\n-    X_trans = imputer.fit_transform(X)\n-\n-    assert_array_equal(X_trans, X_true)\n+    imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n \n \n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n\nFrom 927ff61480cce8ba36be9aa09ca006567c3b60be Mon Sep 17 00:00:00 2001\nFrom: Thijs van Weezel <117186594+ValueInvestorThijs@users.noreply.github.com>\nDate: Mon, 9 Jan 2023 14:21:08 +0100\nSubject: [PATCH 8/9] Update sklearn/impute/tests/test_impute.py\n\nCo-authored-by: Tim Head <betatim@gmail.com>\n---\n sklearn/impute/tests/test_impute.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex 94839c081b287..5a88b34dae2aa 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1530,7 +1530,7 @@ def test_iterative_imputer_constant_fill_value():\n \n     fill_value = 100\n     imputer = IterativeImputer(\n-        missing_values=-1, initial_strategy=\"constant\", fill_value=100, max_iter=0\n+        missing_values=-1, initial_strategy=\"constant\", fill_value=fill_value, max_iter=0\n     )\n     imputer.fit_transform(X)\n     assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n\nFrom cf62faebbb0f8e9569ef5887f33f2379345688b4 Mon Sep 17 00:00:00 2001\nFrom: Thijs van Weezel <117186594+ValueInvestorThijs@users.noreply.github.com>\nDate: Mon, 9 Jan 2023 15:55:40 +0100\nSubject: [PATCH 9/9] Update sklearn/impute/tests/test_impute.py\n\n---\n sklearn/impute/tests/test_impute.py | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n\ndiff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex 5a88b34dae2aa..8851d10b0f14c 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1530,7 +1530,10 @@ def test_iterative_imputer_constant_fill_value():\n \n     fill_value = 100\n     imputer = IterativeImputer(\n-        missing_values=-1, initial_strategy=\"constant\", fill_value=fill_value, max_iter=0\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n     )\n     imputer.fit_transform(X)\n     assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/25232"}