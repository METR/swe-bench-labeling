diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py
index 38158db956..81bd92ed5b 100644
--- a/lib/matplotlib/cm.py
+++ b/lib/matplotlib/cm.py
@@ -226,8 +226,8 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):
 
     Register a new colormap to be accessed by name ::
 
-        LinearSegmentedColormap('swirly', data, lut)
-        register_cmap(cmap=swirly_cmap)
+        LinearSegmentedColormap("swirly", data, lut)
+        register_cmap(name="swirly", cmap=swirly_cmap)
 
     Parameters
     ----------
@@ -255,6 +255,10 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):
         except AttributeError as err:
             raise ValueError("Arguments must include a name or a "
                              "Colormap") from err
+
+    # Update the colormap's internal name to match the registered name
+    cmap.name = name
+
     # override_builtin is allowed here for backward compatibility
     # this is just a shim to enable that to work privately in
     # the global ColormapRegistry
@@ -262,15 +266,6 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):
     _colormaps.register(cmap, name=name, force=override_builtin)
     _colormaps._allow_override_builtin = False
 
-
-def _get_cmap(name=None, lut=None):
-    """
-    Get a colormap instance, defaulting to rc values if *name* is None.
-
-    Parameters
-    ----------
-    name : `matplotlib.colors.Colormap` or str or None, default: None
-        If a `.Colormap` instance, it will be returned. Otherwise, the name of
         a colormap known to Matplotlib, which will be resampled by *lut*. The
         default, None, means :rc:`image.cmap`.
     lut : int or None, default: None
