{"instance_id": "django__django-14373", "score": "C", "diff": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex 38e89c47bb..7185c6921c 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n-        return self.data.year\n+        return '%04d' % self.data.year\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\ndiff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex c6d3ded80f..3557324ef6 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,6 +179,23 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n+    def test_Y_format_year_before_1000(self):\n+        \"\"\"Test Y format returns 4-digit zero-padded years for years < 1000.\"\"\"\n+        tests = [\n+            (1, '0001'),\n+            (10, '0010'),\n+            (100, '0100'),\n+            (999, '0999'),\n+            (1000, '1000'),\n+            (2023, '2023'),\n+        ]\n+        for year, expected_year in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 1, 1), 'Y'),\n+                    expected_year,\n+                )\n+\n     def test_twelve_hour_format(self):\n         tests = [\n             (0, '12'),\n", "gold_standard_diff": "From 34363a391bad5a007f2ab35a6d8c4ece4c3234f6 Mon Sep 17 00:00:00 2001\nFrom: Nick Pope <nick@nickpope.me.uk>\nDate: Mon, 10 May 2021 15:33:48 +0100\nSubject: [PATCH] Fixed #32735 -- Made DateFormat.Y() return a zero-padded\n year.\n\n---\n django/utils/dateformat.py           | 4 ++--\n docs/ref/templates/builtins.txt      | 2 +-\n tests/utils_tests/test_dateformat.py | 6 +++++-\n 3 files changed, 8 insertions(+), 4 deletions(-)\n\ndiff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex 38e89c47bb55..4833b5af2cc5 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -313,8 +313,8 @@ def y(self):\n         return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n-        \"Year, 4 digits; e.g. '1999'\"\n-        return self.data.year\n+        \"\"\"Year, 4 digits with leading zeros; e.g. '1999'.\"\"\"\n+        return '%04d' % self.data.year\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\ndiff --git a/docs/ref/templates/builtins.txt b/docs/ref/templates/builtins.txt\nindex 1dd554aa13ec..e468b9c62eb0 100644\n--- a/docs/ref/templates/builtins.txt\n+++ b/docs/ref/templates/builtins.txt\n@@ -1367,7 +1367,7 @@ Format character  Description                               Example output\n ``t``             Number of days in the given month.        ``28`` to ``31``\n **Year**\n ``y``             Year, 2 digits with leading zeros.        ``'00'`` to ``'99'``\n-``Y``             Year, 4 digits.                           ``'1999'``\n+``Y``             Year, 4 digits with leading zeros.        ``'0001'``, ..., ``'1999'``, ..., ``'9999'``\n ``L``             Boolean for whether it's a leap year.     ``True`` or ``False``\n ``o``             ISO-8601 week-numbering year,             ``'1999'``\n                   corresponding to the ISO-8601 week\ndiff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex c6d3ded80f0c..f57c67078fe0 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -166,7 +166,7 @@ def test_r_format_with_non_en_locale(self):\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n             )\n \n-    def test_year_before_1000(self):\n+    def test_y_format_year_before_1000(self):\n         tests = [\n             (476, '76'),\n             (42, '42'),\n@@ -179,6 +179,10 @@ def test_year_before_1000(self):\n                     expected_date,\n                 )\n \n+    def test_Y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+\n     def test_twelve_hour_format(self):\n         tests = [\n             (0, '12'),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14373"}