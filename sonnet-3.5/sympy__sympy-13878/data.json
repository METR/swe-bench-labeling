{"instance_id": "sympy__sympy-13878", "score": "I", "diff": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..77cbd30a5e 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -47,7 +47,7 @@\n \n from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,\n                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,\n-                   Lambda, Basic, lowergamma, erf, erfc, I)\n+                   Lambda, Basic, lowergamma, uppergamma, erf, erfc, I, asin)\n from sympy import beta as beta_fn\n from sympy import cos, exp, besseli\n from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,\n@@ -153,6 +153,13 @@ class ArcsinDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        return (2/pi) * asin(sqrt((x - self.a)/(self.b - self.a)))\n+\n+    @property\n+    def set(self):\n+        return Interval(self.a, self.b)\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -670,6 +677,14 @@ def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return (1 + (x/b)**(-a))**(-p)\n+\n+    @property\n+    def set(self):\n+        return Interval(0, oo)\n+\n \n def Dagum(name, p, a, b):\n     r\"\"\"\n@@ -1042,6 +1057,10 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1108,6 +1127,10 @@ def pdf(self, x):\n         k, theta = self.k, self.theta\n         return x**(k - 1) * exp(-x/theta) / (gamma(k)*theta**k)\n \n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        return lowergamma(k, x/theta) / gamma(k)\n+\n     def sample(self):\n         return random.gammavariate(self.k, self.theta)\n \n@@ -1200,6 +1223,10 @@ def pdf(self, x):\n         a, b = self.a, self.b\n         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return uppergamma(a, b/x) / gamma(a)\n+\n def GammaInverse(name, a, b):\n     r\"\"\"\n     Create a continuous random variable with an inverse Gamma distribution.\n@@ -1374,7 +1401,7 @@ def Gompertz(name, b, eta):\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n-    set = Interval(0, oo)\n+    set = Interval(0, 1)\n \n     @staticmethod\n     def check(a, b):\n@@ -1385,6 +1412,10 @@ def pdf(self, x):\n         a, b = self.a, self.b\n         return a * b * x**(a-1) * (1-x**a)**(b-1)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return 1 - (1 - x**a)**b\n+\n def Kumaraswamy(name, a, b):\n     r\"\"\"\n     Create a Continuous Random Variable with a Kumaraswamy distribution.\n@@ -1445,6 +1476,17 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        return Piecewise(\n+            (1/2*exp((x - mu)/b), x < mu),\n+            (1 - 1/2*exp(-(x - mu)/b), True)\n+        )\n+\n+    @property\n+    def set(self):\n+        return Interval(-oo, oo)\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n@@ -1501,6 +1543,14 @@ def pdf(self, x):\n         mu, s = self.mu, self.s\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n \n+    def _cdf(self, x):\n+        mu, s = self.mu, self.s\n+        return 1 / (1 + exp(-(x - mu) / s))\n+\n+    @property\n+    def set(self):\n+        return Interval(-oo, oo)\n+\n \n def Logistic(name, mu, s):\n     r\"\"\"\n", "gold_standard_diff": "From ec433b1a583445053330fee1e089afb15914c495 Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Mon, 8 Jan 2018 11:28:36 +0530\nSubject: [PATCH 01/11] _cdf method and corresponding tests added for Arcsin\n and Dagnum\n\n---\n sympy/stats/crv_types.py                | 26 ++++++++++++++++++++++++-\n sympy/stats/tests/test_continuous_rv.py |  6 ++++++\n 2 files changed, 31 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex e636d67940f8..c0de5896d010 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -153,6 +153,15 @@ class ArcsinDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        from sympy import asin\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (S.Zero, x < a),\n+            (2*asin( sqrt((x - a)/(b - a)))/pi, x <= b),\n+            (S.One, True))\n+\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -190,6 +199,12 @@ def Arcsin(name, a=0, b=1):\n     >>> density(X)(z)\n     1/(pi*sqrt((-a + z)*(b - z)))\n \n+    >>> cdf(X)(z)\n+    Piecewise((0, a > z),\n+            (2*asin(sqrt((-a + z)/(-a + b)))/pi, b >= z),\n+            (1, True))\n+\n+\n     References\n     ==========\n \n@@ -670,6 +685,11 @@ def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n+    def _cdf(self, x):\n+        #from sympy import power\n+        p, a, b = self.p, self.a, self.b\n+        return (S.One + (x/b)**(-a))**(-p)\n+\n \n def Dagum(name, p, a, b):\n     r\"\"\"\n@@ -698,7 +718,7 @@ def Dagum(name, p, a, b):\n     Examples\n     ========\n \n-    >>> from sympy.stats import Dagum, density\n+    >>> from sympy.stats import Dagum, density, cdf\n     >>> from sympy import Symbol, simplify\n \n     >>> p = Symbol(\"p\", positive=True)\n@@ -711,6 +731,10 @@ def Dagum(name, p, a, b):\n     >>> density(X)(z)\n     a*p*(z/b)**(a*p)*((z/b)**a + 1)**(-p - 1)/z\n \n+    >>> cdf(X)(z)\n+    (1 + (z/b)**(-a))**(-p)\n+\n+\n     References\n     ==========\n \ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex edbcb743407d..b10f805f2246 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -160,11 +160,16 @@ def test_ContinuousRV():\n \n \n def test_arcsin():\n+    from sympy import asin\n+\n     a = Symbol(\"a\", real=True)\n     b = Symbol(\"b\", real=True)\n \n     X = Arcsin('x', a, b)\n     assert density(X)(x) == 1/(pi*sqrt((-x + b)*(x - a)))\n+    assert cdf(X)(x) == Piecewise((0, a > x),\n+                            (2*asin(sqrt((-a + x)/(-a + b)))/pi, b >= x),\n+                            (1, True))\n \n \n def test_benini():\n@@ -242,6 +247,7 @@ def test_dagum():\n \n     X = Dagum('x', p, a, b)\n     assert density(X)(x) == a*p*(x/b)**(a*p)*((x/b)**a + 1)**(-p - 1)/x\n+    assert cdf(X)(x) == (1 + (x/b)**(-a))**(-p)\n \n def test_erlang():\n     k = Symbol(\"k\", integer=True, positive=True)\n\nFrom 1aeaf519c9de29b5958fb769dd1c9f3136549f12 Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Tue, 9 Jan 2018 21:47:24 +0530\nSubject: [PATCH 02/11] Added precomputed cdf for following continuous random\n variables : Erlang Frechet Gamma GammaInverse Kumaraswamy Laplace Logistic\n Nakagami\n\nAlso added _cdf function for StudentT and UniformSum, but they require further improvements\n---\n sympy/stats/crv_types.py                | 72 +++++++++++++++++++++++--\n sympy/stats/tests/test_continuous_rv.py | 12 ++++-\n 2 files changed, 80 insertions(+), 4 deletions(-)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex c0de5896d010..f631ed922eca 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -47,12 +47,13 @@\n \n from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,\n                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,\n-                   Lambda, Basic, lowergamma, erf, erfc)\n+                   Lambda, Basic, lowergamma, erf, erfc, uppergamma)\n from sympy import beta as beta_fn\n from sympy import cos, exp, besseli\n from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,\n         ContinuousDistributionHandmade)\n from sympy.stats.rv import _value_check\n+from mpmath import hyp2f1\n import random\n \n oo = S.Infinity\n@@ -810,7 +811,7 @@ def Erlang(name, k, l):\n     .. [2] http://mathworld.wolfram.com/ErlangDistribution.html\n     \"\"\"\n \n-    return rv(name, GammaDistribution, (k, 1/l))\n+    return rv(name, GammaDistribution, (k, S.One/l))\n \n #-------------------------------------------------------------------------------\n # Exponential distribution -----------------------------------------------------\n@@ -1063,6 +1064,10 @@ def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return exp(-((x-m)/s)**(-a))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1103,6 +1108,9 @@ def Frechet(name, a, s=1, m=0):\n     >>> density(X)(z)\n     a*((-m + z)/s)**(-a - 1)*exp(-((-m + z)/s)**(-a))/s\n \n+    >>> cdf(X)(z)\n+     exp(-((x-m)/s)**(-a))\n+\n     References\n     ==========\n \n@@ -1132,6 +1140,10 @@ def pdf(self, x):\n     def sample(self):\n         return random.gammavariate(self.k, self.theta)\n \n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        return lowergamma(k, S(x)/theta)/gamma(k)\n+\n \n def Gamma(name, k, theta):\n     r\"\"\"\n@@ -1221,6 +1233,10 @@ def pdf(self, x):\n         a, b = self.a, self.b\n         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return uppergamma(a,b/x)/gamma(a)\n+\n def GammaInverse(name, a, b):\n     r\"\"\"\n     Create a continuous random variable with an inverse Gamma distribution.\n@@ -1265,6 +1281,9 @@ def GammaInverse(name, a, b):\n     ---------------\n        gamma(a)\n \n+    >>>cdf(X)(z)\n+    uppergamma(a, b/z)/gamma(a)\n+\n     References\n     ==========\n \n@@ -1406,6 +1425,14 @@ def pdf(self, x):\n         a, b = self.a, self.b\n         return a * b * x**(a-1) * (1-x**a)**(b-1)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (S.Zero, x < S.Zero),\n+            (1 - (1 - x**a)**b, x <= S.One),\n+            (S.One, True))\n+\n+\n def Kumaraswamy(name, a, b):\n     r\"\"\"\n     Create a Continuous Random Variable with a Kumaraswamy distribution.\n@@ -1446,6 +1473,10 @@ def Kumaraswamy(name, a, b):\n          a - 1 /   a    \\\n     a*b*z     *\\- z  + 1/\n \n+    >>> cdf(X)(z)\n+    Piecewise((0, z < 0),\n+            (-(-z**a + 1)**b + 1, z <= 1),\n+            (1, True))\n \n     References\n     ==========\n@@ -1466,6 +1497,13 @@ def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        return Piecewise(\n+                    (S.Half*exp((x - mu)/b), x < mu),\n+                    (S.One - S.Half*exp(-(x - mu)/b), x>= mu)\n+                        )\n+\n \n def Laplace(name, mu, b):\n     r\"\"\"\n@@ -1490,7 +1528,7 @@ def Laplace(name, mu, b):\n     Examples\n     ========\n \n-    >>> from sympy.stats import Laplace, density\n+    >>> from sympy.stats import Laplace, density, cdf\n     >>> from sympy import Symbol\n \n     >>> mu = Symbol(\"mu\")\n@@ -1502,6 +1540,10 @@ def Laplace(name, mu, b):\n     >>> density(X)(z)\n     exp(-Abs(mu - z)/b)/(2*b)\n \n+    >>> cdf(X)(z)\n+    Piecewise((exp((-mu + z)/b)/2, mu > z),\n+            (-exp((mu - z)/b)/2 + 1, True))\n+\n     References\n     ==========\n \n@@ -1522,6 +1564,10 @@ def pdf(self, x):\n         mu, s = self.mu, self.s\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n \n+    def _cdf(self, x):\n+        mu, s = self.mu, self.s\n+        return 1 + exp(-(x - mu)/s)\n+\n \n def Logistic(name, mu, s):\n     r\"\"\"\n@@ -1558,6 +1604,9 @@ def Logistic(name, mu, s):\n     >>> density(X)(z)\n     exp((mu - z)/s)/(s*(exp((mu - z)/s) + 1)**2)\n \n+    >>> cdf(X)(z)\n+    exp((mu - z)/s) + 1\n+\n     References\n     ==========\n \n@@ -1732,6 +1781,10 @@ def pdf(self, x):\n         mu, omega = self.mu, self.omega\n         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n \n+    def _cdf(self, x):\n+        mu, omega = self.mu, self.omega\n+        return lowergamma(mu, (mu/omega)*x**2)/gamma(mu)\n+\n \n def Nakagami(name, mu, omega):\n     r\"\"\"\n@@ -1788,6 +1841,9 @@ def Nakagami(name, mu, omega):\n     omega - -----------------------\n             gamma(mu)*gamma(mu + 1)\n \n+    >>> cdf(X)(x)\n+    lowergamma(mu, mu*x**2/omega)/gamma(mu)\n+\n     References\n     ==========\n \n@@ -2245,6 +2301,10 @@ def pdf(self, x):\n         nu = self.nu\n         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)\n \n+    def _cdf(self, x):\n+        nu = self.nu\n+        return S.Half + x*gamma((nu+1)/2)*hyp2f1(S.Half, (nu+1)/2, S(3)/2, -x**2/nu)/(sqrt(pi*nu)*gamma(nu/2))\n+\n \n def StudentT(name, nu):\n     r\"\"\"\n@@ -2569,6 +2629,12 @@ def pdf(self, x):\n             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))\n \n \n+    def _cdf(self, x):\n+        n = self.n\n+        x=Dummy(\"x\")\n+        k = Dummy(\"k\")\n+        return 1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x)))\n+\n \n def UniformSum(name, n):\n     r\"\"\"\ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex b10f805f2246..ab3a34b7f012 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -13,7 +13,7 @@\n                          moment, cmoment, smoment)\n \n from sympy import (Symbol, Abs, exp, S, N, pi, simplify, Interval, erf, erfc,\n-                   Eq, log, lowergamma, Sum, symbols, sqrt, And, gamma, beta,\n+                   Eq, log, lowergamma, uppergamma, Sum, symbols, sqrt, And, gamma, beta,\n                    Piecewise, Integral, sin, cos, besseli, factorial, binomial,\n                    floor, expand_func, Rational)\n \n@@ -295,6 +295,7 @@ def test_frechet():\n \n     X = Frechet(\"x\", a, s=s, m=m)\n     assert density(X)(x) == a*((x - m)/s)**(-a - 1)*exp(-((x - m)/s)**(-a))/s\n+    assert cdf(X)(x) == exp(-((x - m)/s)**(-a))\n \n def test_gamma():\n     k = Symbol(\"k\", positive=True)\n@@ -323,6 +324,7 @@ def test_gamma_inverse():\n \n     X = GammaInverse(\"x\", a, b)\n     assert density(X)(x) == x**(-a - 1)*b**a*exp(-b/x)/gamma(a)\n+    assert cdf(X)(x) == uppergamma(a, b/x)/gamma(a)\n \n def test_gompertz():\n     b = Symbol(\"b\", positive=True)\n@@ -344,6 +346,9 @@ def test_kumaraswamy():\n \n     X = Kumaraswamy(\"x\", a, b)\n     assert density(X)(x) == x**(a - 1)*a*b*(-x**a + 1)**(b - 1)\n+    assert cdf(X)(x) == Piecewise((0, x < 0),\n+                                (-(-x**a + 1)**b + 1, x <= 1),\n+                                (1, True))\n \n def test_laplace():\n     mu = Symbol(\"mu\")\n@@ -351,6 +356,8 @@ def test_laplace():\n \n     X = Laplace('x', mu, b)\n     assert density(X)(x) == exp(-Abs(x - mu)/b)/(2*b)\n+    assert cdf(X)(x) == Piecewise((exp((-mu + x)/b)/2, mu > x),\n+                            (-exp((mu - x)/b)/2 + 1, True))\n \n def test_logistic():\n     mu = Symbol(\"mu\", real=True)\n@@ -358,6 +365,8 @@ def test_logistic():\n \n     X = Logistic('x', mu, s)\n     assert density(X)(x) == exp((-x + mu)/s)/(s*(exp((-x + mu)/s) + 1)**2)\n+    assert cdf(X)(x) == exp((mu - x)/s) + 1\n+\n \n def test_lognormal():\n     mean = Symbol('mu', real=True, finite=True)\n@@ -408,6 +417,7 @@ def test_nakagami():\n            *gamma(mu + S.Half)/gamma(mu + 1))\n     assert simplify(variance(X, meijerg=True)) == (\n     omega - omega*gamma(mu + S(1)/2)**2/(gamma(mu)*gamma(mu + 1)))\n+    assert cdf(X)(x) == lowergamma(mu, mu*x**2/omega)/gamma(mu)\n \n \n def test_pareto():\n\nFrom 63710ccf6dd8f9300ed9201a97373111c6c301ba Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Wed, 10 Jan 2018 05:17:12 +0530\nSubject: [PATCH 03/11] Changed outputs of all the above _cdf functions in\n terms of Piecewise function\n\n---\n sympy/stats/crv_types.py                | 28 +++++++++++++++++--------\n sympy/stats/tests/test_continuous_rv.py | 13 ++++++++----\n 2 files changed, 28 insertions(+), 13 deletions(-)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex f631ed922eca..4fb839e15859 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -689,7 +689,8 @@ def pdf(self, x):\n     def _cdf(self, x):\n         #from sympy import power\n         p, a, b = self.p, self.a, self.b\n-        return (S.One + (x/b)**(-a))**(-p)\n+        return Piecewise(((S.One + x**-a/b)**-p, x>=0),\n+                    (S.Zero, True))\n \n \n def Dagum(name, p, a, b):\n@@ -733,7 +734,7 @@ def Dagum(name, p, a, b):\n     a*p*(z/b)**(a*p)*((z/b)**a + 1)**(-p - 1)/z\n \n     >>> cdf(X)(z)\n-    (1 + (z/b)**(-a))**(-p)\n+    Piecewise(((1 + z**(-a)/b)**(-p), z >= 0), (0, True))\n \n \n     References\n@@ -1066,7 +1067,8 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         a, s, m = self.a, self.s, self.m\n-        return exp(-((x-m)/s)**(-a))\n+        return Piecewise((exp(-((x-m)/s)**(-a)), x>=m),\n+                        (S.Zero, True))\n \n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n@@ -1109,7 +1111,7 @@ def Frechet(name, a, s=1, m=0):\n     a*((-m + z)/s)**(-a - 1)*exp(-((-m + z)/s)**(-a))/s\n \n     >>> cdf(X)(z)\n-     exp(-((x-m)/s)**(-a))\n+     Piecewise((exp(-((-m + z)/s)**(-a)), m <= z), (0, True))\n \n     References\n     ==========\n@@ -1142,7 +1144,9 @@ def sample(self):\n \n     def _cdf(self, x):\n         k, theta = self.k, self.theta\n-        return lowergamma(k, S(x)/theta)/gamma(k)\n+        return Piecewise(\n+                    (lowergamma(k, S(x)/theta)/gamma(k), x>0),\n+                    (S.Zero, True))\n \n \n def Gamma(name, k, theta):\n@@ -1235,7 +1239,8 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         a, b = self.a, self.b\n-        return uppergamma(a,b/x)/gamma(a)\n+        return Piecewise((uppergamma(a,b/x)/gamma(a), x>0),\n+                        (S.Zero, True))\n \n def GammaInverse(name, a, b):\n     r\"\"\"\n@@ -1282,7 +1287,8 @@ def GammaInverse(name, a, b):\n        gamma(a)\n \n     >>>cdf(X)(z)\n-    uppergamma(a, b/z)/gamma(a)\n+    Piecewise((uppergamma(a, b/z)/gamma(a), z > 0), (0, True))\n+\n \n     References\n     ==========\n@@ -1783,7 +1789,9 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         mu, omega = self.mu, self.omega\n-        return lowergamma(mu, (mu/omega)*x**2)/gamma(mu)\n+        return Piecewise(\n+                    (lowergamma(mu, (mu/omega)*x**2)/gamma(mu), x>0),\n+                    (S.Zero, True))\n \n \n def Nakagami(name, mu, omega):\n@@ -1842,7 +1850,9 @@ def Nakagami(name, mu, omega):\n             gamma(mu)*gamma(mu + 1)\n \n     >>> cdf(X)(x)\n-    lowergamma(mu, mu*x**2/omega)/gamma(mu)\n+    Piecewise((lowergamma(mu, mu*z**2/omega)/gamma(mu), z > 0),\n+            (0, True))\n+\n \n     References\n     ==========\ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ab3a34b7f012..e4b4087538e9 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -247,7 +247,8 @@ def test_dagum():\n \n     X = Dagum('x', p, a, b)\n     assert density(X)(x) == a*p*(x/b)**(a*p)*((x/b)**a + 1)**(-p - 1)/x\n-    assert cdf(X)(x) == (1 + (x/b)**(-a))**(-p)\n+    assert cdf(X)(x) == Piecewise(((1 + x**(-a)/b)**(-p), x >= 0),\n+                            (0, True))\n \n def test_erlang():\n     k = Symbol(\"k\", integer=True, positive=True)\n@@ -255,6 +256,8 @@ def test_erlang():\n \n     X = Erlang(\"x\", k, l)\n     assert density(X)(x) == x**(k - 1)*l**k*exp(-x*l)/gamma(k)\n+    assert cdf(X)(x) == Piecewise((lowergamma(k, l*x)/gamma(k), x > 0),\n+                               (0, True))\n \n def test_exponential():\n     rate = Symbol('lambda', positive=True, real=True, finite=True)\n@@ -295,7 +298,7 @@ def test_frechet():\n \n     X = Frechet(\"x\", a, s=s, m=m)\n     assert density(X)(x) == a*((x - m)/s)**(-a - 1)*exp(-((x - m)/s)**(-a))/s\n-    assert cdf(X)(x) == exp(-((x - m)/s)**(-a))\n+    assert cdf(X)(x) == Piecewise((exp(-((-m + x)/s)**(-a)), m <= x), (0, True))\n \n def test_gamma():\n     k = Symbol(\"k\", positive=True)\n@@ -324,7 +327,7 @@ def test_gamma_inverse():\n \n     X = GammaInverse(\"x\", a, b)\n     assert density(X)(x) == x**(-a - 1)*b**a*exp(-b/x)/gamma(a)\n-    assert cdf(X)(x) == uppergamma(a, b/x)/gamma(a)\n+    assert cdf(X)(x) == Piecewise((uppergamma(a, b/x)/gamma(a), x > 0), (0, True))\n \n def test_gompertz():\n     b = Symbol(\"b\", positive=True)\n@@ -417,7 +420,9 @@ def test_nakagami():\n            *gamma(mu + S.Half)/gamma(mu + 1))\n     assert simplify(variance(X, meijerg=True)) == (\n     omega - omega*gamma(mu + S(1)/2)**2/(gamma(mu)*gamma(mu + 1)))\n-    assert cdf(X)(x) == lowergamma(mu, mu*x**2/omega)/gamma(mu)\n+    assert cdf(X)(x) == Piecewise(\n+                                (lowergamma(mu, mu*x**2/omega)/gamma(mu), x > 0), \n+                                (0, True))\n \n \n def test_pareto():\n\nFrom 6a241f9acfca41ecb7523f9127c39b0cb9a44fa0 Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Wed, 10 Jan 2018 12:12:09 +0530\nSubject: [PATCH 04/11] Improvised _cdf for StudentT UniformSum\n\n---\n sympy/stats/crv_types.py                | 53 +++++++++++++++++--------\n sympy/stats/tests/test_continuous_rv.py | 30 +++++++++++---\n 2 files changed, 62 insertions(+), 21 deletions(-)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex 4fb839e15859..ed509dee4371 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -47,13 +47,12 @@\n \n from sympy import (log, sqrt, pi, S, Dummy, Interval, sympify, gamma,\n                    Piecewise, And, Eq, binomial, factorial, Sum, floor, Abs,\n-                   Lambda, Basic, lowergamma, erf, erfc, uppergamma)\n+                   Lambda, Basic, lowergamma, erf, erfc, uppergamma, hyper)\n from sympy import beta as beta_fn\n from sympy import cos, exp, besseli\n from sympy.stats.crv import (SingleContinuousPSpace, SingleContinuousDistribution,\n         ContinuousDistributionHandmade)\n from sympy.stats.rv import _value_check\n-from mpmath import hyp2f1\n import random\n \n oo = S.Infinity\n@@ -134,6 +133,7 @@ def ContinuousRV(symbol, density, set=Interval(-oo, oo)):\n     dist = ContinuousDistributionHandmade(pdf, set)\n     return SingleContinuousPSpace(symbol, dist).value\n \n+\n def rv(symbol, cls, args):\n     args = list(map(sympify, args))\n     dist = cls(*args)\n@@ -159,7 +159,7 @@ def _cdf(self, x):\n         a, b = self.a, self.b\n         return Piecewise(\n             (S.Zero, x < a),\n-            (2*asin( sqrt((x - a)/(b - a)))/pi, x <= b),\n+            (2*asin(sqrt((x - a)/(b - a)))/pi, x <= b),\n             (S.One, True))\n \n \n@@ -619,7 +619,7 @@ def pdf(self, x):\n     def _cdf(self, x):\n         k = self.k\n         return Piecewise(\n-                (S.One/gamma(k/2)*lowergamma(k/2, x/2), x>=0),\n+                (S.One/gamma(k/2)*lowergamma(k/2, x/2), x >= 0),\n                 (0, True)\n         )\n \n@@ -687,7 +687,6 @@ def pdf(self, x):\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n     def _cdf(self, x):\n-        #from sympy import power\n         p, a, b = self.p, self.a, self.b\n         return Piecewise(((S.One + x**-a/b)**-p, x>=0),\n                     (S.Zero, True))\n@@ -748,6 +747,7 @@ def Dagum(name, p, a, b):\n #-------------------------------------------------------------------------------\n # Erlang distribution ----------------------------------------------------------\n \n+\n def Erlang(name, k, l):\n     r\"\"\"\n     Create a continuous random variable with an Erlang distribution.\n@@ -835,7 +835,7 @@ def sample(self):\n \n     def _cdf(self, x):\n         return Piecewise(\n-                (S.One - exp(-self.rate*x), x>=0),\n+                (S.One - exp(-self.rate*x), x >= 0),\n                 (0, True),\n         )\n \n@@ -1067,7 +1067,7 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         a, s, m = self.a, self.s, self.m\n-        return Piecewise((exp(-((x-m)/s)**(-a)), x>=m),\n+        return Piecewise((exp(-((x-m)/s)**(-a)), x >= m),\n                         (S.Zero, True))\n \n def Frechet(name, a, s=1, m=0):\n@@ -1145,7 +1145,7 @@ def sample(self):\n     def _cdf(self, x):\n         k, theta = self.k, self.theta\n         return Piecewise(\n-                    (lowergamma(k, S(x)/theta)/gamma(k), x>0),\n+                    (lowergamma(k, S(x)/theta)/gamma(k), x > 0),\n                     (S.Zero, True))\n \n \n@@ -1223,6 +1223,7 @@ def Gamma(name, k, theta):\n #-------------------------------------------------------------------------------\n # Inverse Gamma distribution ---------------------------------------------------\n \n+\n class GammaInverseDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n@@ -1239,9 +1240,10 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         a, b = self.a, self.b\n-        return Piecewise((uppergamma(a,b/x)/gamma(a), x>0),\n+        return Piecewise((uppergamma(a,b/x)/gamma(a), x > 0),\n                         (S.Zero, True))\n \n+\n def GammaInverse(name, a, b):\n     r\"\"\"\n     Create a continuous random variable with an inverse Gamma distribution.\n@@ -1301,6 +1303,7 @@ def GammaInverse(name, a, b):\n #-------------------------------------------------------------------------------\n # Gumbel distribution --------------------------------------------------------\n \n+\n class GumbelDistribution(SingleContinuousDistribution):\n     _argnames = ('beta', 'mu')\n \n@@ -1369,6 +1372,7 @@ def pdf(self, x):\n         eta, b = self.eta, self.b\n         return b*eta*exp(b*x)*exp(eta)*exp(-eta*exp(b*x))\n \n+\n def Gompertz(name, b, eta):\n     r\"\"\"\n     Create a Continuous Random Variable with Gompertz distribution.\n@@ -1417,6 +1421,7 @@ def Gompertz(name, b, eta):\n #-------------------------------------------------------------------------------\n # Kumaraswamy distribution -----------------------------------------------------\n \n+\n class KumaraswamyDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n@@ -1507,7 +1512,7 @@ def _cdf(self, x):\n         mu, b = self.mu, self.b\n         return Piecewise(\n                     (S.Half*exp((x - mu)/b), x < mu),\n-                    (S.One - S.Half*exp(-(x - mu)/b), x>= mu)\n+                    (S.One - S.Half*exp(-(x - mu)/b), x >= mu)\n                         )\n \n \n@@ -1641,7 +1646,7 @@ def sample(self):\n     def _cdf(self, x):\n         mean, std = self.mean, self.std\n         return Piecewise(\n-                (S.Half + S.Half*erf((log(x) - mean)/sqrt(2)/std), x>0),\n+                (S.Half + S.Half*erf((log(x) - mean)/sqrt(2)/std), x > 0),\n                 (S.Zero, True)\n         )\n \n@@ -1790,7 +1795,7 @@ def pdf(self, x):\n     def _cdf(self, x):\n         mu, omega = self.mu, self.omega\n         return Piecewise(\n-                    (lowergamma(mu, (mu/omega)*x**2)/gamma(mu), x>0),\n+                    (lowergamma(mu, (mu/omega)*x**2)/gamma(mu), x > 0),\n                     (S.Zero, True))\n \n \n@@ -2030,6 +2035,7 @@ def Pareto(name, xm, alpha):\n #-------------------------------------------------------------------------------\n # QuadraticU distribution ------------------------------------------------------\n \n+\n class QuadraticUDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n@@ -2121,6 +2127,7 @@ def pdf(self, x):\n                 ((1+cos(pi*(x-mu)/s)) / (2*s), And(mu-s<=x, x<=mu+s)),\n                 (S.Zero, True))\n \n+\n def RaisedCosine(name, mu, s):\n     r\"\"\"\n     Create a Continuous Random Variable with a raised cosine distribution.\n@@ -2313,7 +2320,8 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         nu = self.nu\n-        return S.Half + x*gamma((nu+1)/2)*hyp2f1(S.Half, (nu+1)/2, S(3)/2, -x**2/nu)/(sqrt(pi*nu)*gamma(nu/2))\n+        return S.Half + x*gamma((nu+1)/2)*hyper((S.Half, (nu+1)/2),\n+                                (S(3)/2,), -x**2/nu)/(sqrt(pi*nu)*gamma(nu/2))\n \n \n def StudentT(name, nu):\n@@ -2362,6 +2370,11 @@ def StudentT(name, nu):\n     \\/ nu *beta|1/2, --|\n                \\     2 /\n \n+    >>> cdf(X)(z)\n+    1/2 + z*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,),\n+                                -z**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))\n+\n+\n     References\n     ==========\n \n@@ -2374,6 +2387,7 @@ def StudentT(name, nu):\n #-------------------------------------------------------------------------------\n # Trapezoidal distribution ------------------------------------------------------\n \n+\n class TrapezoidalDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b', 'c', 'd')\n \n@@ -2385,6 +2399,7 @@ def pdf(self, x):\n             (2*(d-x) / ((d-c)*(d+c-a-b)), And(c <= x, x <= d)),\n             (S.Zero, True))\n \n+\n def Trapezoidal(name, a, b, c, d):\n     r\"\"\"\n     Create a continuous random variable with a trapezoidal distribution.\n@@ -2638,12 +2653,13 @@ def pdf(self, x):\n         return 1/factorial(\n             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))\n \n-\n     def _cdf(self, x):\n         n = self.n\n-        x=Dummy(\"x\")\n         k = Dummy(\"k\")\n-        return 1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**n, (k, 0, floor(x)))\n+        return Piecewise((S.Zero, x < 0),\n+                        (1/factorial(n)*Sum((-1)**k*binomial(n, k)*(x - k)**(n),\n+                        (k, 0, floor(x))), x <= n),\n+                        (S.One, True))\n \n \n def UniformSum(name, n):\n@@ -2693,6 +2709,11 @@ def UniformSum(name, n):\n     --------------------------------\n                 (n - 1)!\n \n+    >>> cdf(X)(z)\n+    Piecewise((0, z < 0), (Sum((-1)**_k*(-_k + z)**n*binomial(n, _k),\n+                            (_k, 0, floor(z)))/factorial(n), n >= z), (1, True))\n+\n+\n     References\n     ==========\n \ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex e4b4087538e9..dc96c3d38476 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -15,7 +15,7 @@\n from sympy import (Symbol, Abs, exp, S, N, pi, simplify, Interval, erf, erfc,\n                    Eq, log, lowergamma, uppergamma, Sum, symbols, sqrt, And, gamma, beta,\n                    Piecewise, Integral, sin, cos, besseli, factorial, binomial,\n-                   floor, expand_func, Rational)\n+                   floor, expand_func, Rational, hyper)\n \n \n from sympy.stats.crv_types import NormalDistribution\n@@ -234,12 +234,14 @@ def test_chi_noncentral():\n     assert density(X)(x) == (x**k*l*(x*l)**(-k/2)*\n                           exp(-x**2/2 - l**2/2)*besseli(k/2 - 1, x*l))\n \n+\n def test_chi_squared():\n     k = Symbol(\"k\", integer=True)\n \n     X = ChiSquared('x', k)\n     assert density(X)(x) == 2**(-k/2)*x**(k/2 - 1)*exp(-x/2)/gamma(k/2)\n \n+\n def test_dagum():\n     p = Symbol(\"p\", positive=True)\n     b = Symbol(\"b\", positive=True)\n@@ -250,6 +252,7 @@ def test_dagum():\n     assert cdf(X)(x) == Piecewise(((1 + x**(-a)/b)**(-p), x >= 0),\n                             (0, True))\n \n+\n def test_erlang():\n     k = Symbol(\"k\", integer=True, positive=True)\n     l = Symbol(\"l\", positive=True)\n@@ -259,6 +262,7 @@ def test_erlang():\n     assert cdf(X)(x) == Piecewise((lowergamma(k, l*x)/gamma(k), x > 0),\n                                (0, True))\n \n+\n def test_exponential():\n     rate = Symbol('lambda', positive=True, real=True, finite=True)\n     X = Exponential('x', rate)\n@@ -275,6 +279,7 @@ def test_exponential():\n \n     assert where(X <= 1).set == Interval(0, 1)\n \n+\n def test_f_distribution():\n     d1 = Symbol(\"d1\", positive=True)\n     d2 = Symbol(\"d2\", positive=True)\n@@ -300,6 +305,7 @@ def test_frechet():\n     assert density(X)(x) == a*((x - m)/s)**(-a - 1)*exp(-((x - m)/s)**(-a))/s\n     assert cdf(X)(x) == Piecewise((exp(-((-m + x)/s)**(-a)), m <= x), (0, True))\n \n+\n def test_gamma():\n     k = Symbol(\"k\", positive=True)\n     theta = Symbol(\"theta\", positive=True)\n@@ -321,6 +327,7 @@ def test_gamma():\n     # The following is too slow\n     # assert simplify(skewness(X)).subs(k, 5) == (2/sqrt(k)).subs(k, 5)\n \n+\n def test_gamma_inverse():\n     a = Symbol(\"a\", positive=True)\n     b = Symbol(\"b\", positive=True)\n@@ -329,6 +336,7 @@ def test_gamma_inverse():\n     assert density(X)(x) == x**(-a - 1)*b**a*exp(-b/x)/gamma(a)\n     assert cdf(X)(x) == Piecewise((uppergamma(a, b/x)/gamma(a), x > 0), (0, True))\n \n+\n def test_gompertz():\n     b = Symbol(\"b\", positive=True)\n     eta = Symbol(\"eta\", positive=True)\n@@ -336,6 +344,7 @@ def test_gompertz():\n     X = Gompertz(\"x\", b, eta)\n     assert density(X)(x) == b*eta*exp(eta)*exp(b*x)*exp(-eta*exp(b*x))\n \n+\n def test_gumbel():\n     beta = Symbol(\"beta\", positive=True)\n     mu = Symbol(\"mu\")\n@@ -343,6 +352,7 @@ def test_gumbel():\n     X = Gumbel(\"x\", beta, mu)\n     assert simplify(density(X)(x)) == exp((beta*exp((mu - x)/beta) + mu - x)/beta)/beta\n \n+\n def test_kumaraswamy():\n     a = Symbol(\"a\", positive=True)\n     b = Symbol(\"b\", positive=True)\n@@ -353,6 +363,7 @@ def test_kumaraswamy():\n                                 (-(-x**a + 1)**b + 1, x <= 1),\n                                 (1, True))\n \n+\n def test_laplace():\n     mu = Symbol(\"mu\")\n     b = Symbol(\"b\", positive=True)\n@@ -417,11 +428,11 @@ def test_nakagami():\n     assert density(X)(x) == (2*x**(2*mu - 1)*mu**mu*omega**(-mu)\n                                 *exp(-x**2*mu/omega)/gamma(mu))\n     assert simplify(E(X, meijerg=True)) == (sqrt(mu)*sqrt(omega)\n-           *gamma(mu + S.Half)/gamma(mu + 1))\n+                                            *gamma(mu + S.Half)/gamma(mu + 1))\n     assert simplify(variance(X, meijerg=True)) == (\n     omega - omega*gamma(mu + S(1)/2)**2/(gamma(mu)*gamma(mu + 1)))\n     assert cdf(X)(x) == Piecewise(\n-                                (lowergamma(mu, mu*x**2/omega)/gamma(mu), x > 0), \n+                                (lowergamma(mu, mu*x**2/omega)/gamma(mu), x > 0),\n                                 (0, True))\n \n \n@@ -479,6 +490,8 @@ def test_studentt():\n \n     X = StudentT('x', nu)\n     assert density(X)(x) == (1 + x**2/nu)**(-nu/2 - 1/2)/(sqrt(nu)*beta(1/2, nu/2))\n+    assert cdf(X)(x) == 1/2 + x*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2),\n+                                (3/2,), -x**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))\n \n \n def test_trapezoidal():\n@@ -663,6 +676,7 @@ def test_probability_unevaluated():\n     T = Normal('T', 30, 3)\n     assert type(P(T > 33, evaluate=False)) == Integral\n \n+\n def test_density_unevaluated():\n     X = Normal('X', 0, 1)\n     Y = Normal('Y', 0, 2)\n@@ -678,6 +692,7 @@ def test_NormalDistribution():\n     assert nd.expectation(x, x) == 0\n     assert nd.expectation(x**2, x) == 1\n \n+\n def test_random_parameters():\n     mu = Normal('mu', 2, 3)\n     meas = Normal('T', mu, 1)\n@@ -686,17 +701,20 @@ def test_random_parameters():\n     #assert density(meas, evaluate=False)(z) == Integral(mu.pspace.pdf *\n     #        meas.pspace.pdf, (mu.symbol, -oo, oo)).subs(meas.symbol, z)\n \n+\n def test_random_parameters_given():\n     mu = Normal('mu', 2, 3)\n     meas = Normal('T', mu, 1)\n     assert given(meas, Eq(mu, 5)) == Normal('T', 5, 1)\n \n+\n def test_conjugate_priors():\n     mu = Normal('mu', 2, 3)\n     x = Normal('x', mu, 1)\n     assert isinstance(simplify(density(mu, Eq(x, y), evaluate=False)(z)),\n             Integral)\n \n+\n def test_difficult_univariate():\n     \"\"\" Since using solve in place of deltaintegrate we're able to perform\n     substantially more complex density computations on single continuous random\n@@ -713,6 +731,7 @@ def test_issue_10003():\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n \n+\n def test_precomputed_cdf():\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n@@ -730,7 +749,8 @@ def test_precomputed_cdf():\n         compdiff = simplify(compdiff.rewrite(erfc))\n         assert compdiff == 0\n \n+\n def test_issue_13324():\n     X = Uniform('X', 0, 1)\n-    assert E(X, X > Rational(1,2)) == Rational(3,4)\n-    assert E(X, X > 0) == Rational(1,2)\n+    assert E(X, X > Rational(1, 2)) == Rational(3, 4)\n+    assert E(X, X > 0) == Rational(1, 2)\n\nFrom b6dade8a96eae69132b9b29823e5d6edc1e7536f Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Wed, 10 Jan 2018 18:53:13 +0530\nSubject: [PATCH 05/11] added an example for evaluation of cdf of UniformSum\n distribution with specific values of 'x' and 'n'\n\n---\n sympy/stats/crv_types.py | 8 ++++++++\n 1 file changed, 8 insertions(+)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex ed509dee4371..297030bdabf6 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -2714,6 +2714,14 @@ def UniformSum(name, n):\n                             (_k, 0, floor(z)))/factorial(n), n >= z), (1, True))\n \n \n+    Compute cdf with specific 'x' and 'n' values as follows :\n+    >>> cdf(UniformSum(\"x\", 5), evaluate=False)(2).doit()\n+    9/40\n+\n+    In above formof cdf functtion evaluate=False prevents an attempt at premature evaluation of the sum,\n+    before the argument 2 is passed. Once 2 is passed, the sum is easily\n+    evaluated with doit and without any hypergeometric complications.\n+\n     References\n     ==========\n \n\nFrom 7b73716842869642b5498c7ba74324c03a84d29d Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Thu, 11 Jan 2018 14:35:20 +0530\nSubject: [PATCH 06/11] Added test_long_precomputed_cdf() function and\n corrected formula for precomputed cdf of dagum and logistic random variables\n test_long_precomputed_cdf() also will keep a check on the consistency of\n density and cdf functions as they both are related.\n\n---\n sympy/stats/crv_types.py                | 26 ++++++++++-----------\n sympy/stats/tests/test_continuous_rv.py | 30 +++++++++++++++++++++----\n 2 files changed, 39 insertions(+), 17 deletions(-)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex 297030bdabf6..f26bb041689c 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -188,7 +188,7 @@ def Arcsin(name, a=0, b=1):\n     Examples\n     ========\n \n-    >>> from sympy.stats import Arcsin, density\n+    >>> from sympy.stats import Arcsin, density, cdf\n     >>> from sympy import Symbol, simplify\n \n     >>> a = Symbol(\"a\", real=True)\n@@ -688,7 +688,7 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         p, a, b = self.p, self.a, self.b\n-        return Piecewise(((S.One + x**-a/b)**-p, x>=0),\n+        return Piecewise(((S.One + (S(x)/b)**-a)**-p, x>=0),\n                     (S.Zero, True))\n \n \n@@ -733,7 +733,7 @@ def Dagum(name, p, a, b):\n     a*p*(z/b)**(a*p)*((z/b)**a + 1)**(-p - 1)/z\n \n     >>> cdf(X)(z)\n-    Piecewise(((1 + z**(-a)/b)**(-p), z >= 0), (0, True))\n+    Piecewise(((1 + (z/b)**(-a))**(-p), z >= 0), (0, True))\n \n \n     References\n@@ -1097,7 +1097,7 @@ def Frechet(name, a, s=1, m=0):\n     Examples\n     ========\n \n-    >>> from sympy.stats import Frechet, density, E, std\n+    >>> from sympy.stats import Frechet, density, E, std, cdf\n     >>> from sympy import Symbol, simplify\n \n     >>> a = Symbol(\"a\", positive=True)\n@@ -1288,7 +1288,7 @@ def GammaInverse(name, a, b):\n     ---------------\n        gamma(a)\n \n-    >>>cdf(X)(z)\n+    >>> cdf(X)(z)\n     Piecewise((uppergamma(a, b/z)/gamma(a), z > 0), (0, True))\n \n \n@@ -1469,7 +1469,7 @@ def Kumaraswamy(name, a, b):\n     Examples\n     ========\n \n-    >>> from sympy.stats import Kumaraswamy, density, E, variance\n+    >>> from sympy.stats import Kumaraswamy, density, E, variance, cdf\n     >>> from sympy import Symbol, simplify, pprint\n \n     >>> a = Symbol(\"a\", positive=True)\n@@ -1577,7 +1577,7 @@ def pdf(self, x):\n \n     def _cdf(self, x):\n         mu, s = self.mu, self.s\n-        return 1 + exp(-(x - mu)/s)\n+        return S.One/(1 + exp(-(x - mu)/s))\n \n \n def Logistic(name, mu, s):\n@@ -1603,7 +1603,7 @@ def Logistic(name, mu, s):\n     Examples\n     ========\n \n-    >>> from sympy.stats import Logistic, density\n+    >>> from sympy.stats import Logistic, density, cdf\n     >>> from sympy import Symbol\n \n     >>> mu = Symbol(\"mu\", real=True)\n@@ -1616,7 +1616,7 @@ def Logistic(name, mu, s):\n     exp((mu - z)/s)/(s*(exp((mu - z)/s) + 1)**2)\n \n     >>> cdf(X)(z)\n-    exp((mu - z)/s) + 1\n+    1/(exp((mu - z)/s) + 1)\n \n     References\n     ==========\n@@ -1825,7 +1825,7 @@ def Nakagami(name, mu, omega):\n     Examples\n     ========\n \n-    >>> from sympy.stats import Nakagami, density, E, variance\n+    >>> from sympy.stats import Nakagami, density, E, variance, cdf\n     >>> from sympy import Symbol, simplify, pprint\n \n     >>> mu = Symbol(\"mu\", positive=True)\n@@ -1854,7 +1854,7 @@ def Nakagami(name, mu, omega):\n     omega - -----------------------\n             gamma(mu)*gamma(mu + 1)\n \n-    >>> cdf(X)(x)\n+    >>> cdf(X)(z)\n     Piecewise((lowergamma(mu, mu*z**2/omega)/gamma(mu), z > 0),\n             (0, True))\n \n@@ -2348,7 +2348,7 @@ def StudentT(name, nu):\n     Examples\n     ========\n \n-    >>> from sympy.stats import StudentT, density, E, variance\n+    >>> from sympy.stats import StudentT, density, E, variance, cdf\n     >>> from sympy import Symbol, simplify, pprint\n \n     >>> nu = Symbol(\"nu\", positive=True)\n@@ -2688,7 +2688,7 @@ def UniformSum(name, n):\n     Examples\n     ========\n \n-    >>> from sympy.stats import UniformSum, density\n+    >>> from sympy.stats import UniformSum, density, cdf\n     >>> from sympy import Symbol, pprint\n \n     >>> n = Symbol(\"n\", integer=True)\ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex dc96c3d38476..9515202f268d 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -1,4 +1,5 @@\n from __future__ import division\n+import random\n from sympy.stats import (P, E, where, density, variance, covariance, skewness,\n                          given, pspace, cdf, ContinuousRV, sample,\n                          Arcsin, Benini, Beta, BetaPrime, Cauchy,\n@@ -15,7 +16,7 @@\n from sympy import (Symbol, Abs, exp, S, N, pi, simplify, Interval, erf, erfc,\n                    Eq, log, lowergamma, uppergamma, Sum, symbols, sqrt, And, gamma, beta,\n                    Piecewise, Integral, sin, cos, besseli, factorial, binomial,\n-                   floor, expand_func, Rational, hyper)\n+                   floor, expand_func, Rational, hyper, diff)\n \n \n from sympy.stats.crv_types import NormalDistribution\n@@ -249,8 +250,8 @@ def test_dagum():\n \n     X = Dagum('x', p, a, b)\n     assert density(X)(x) == a*p*(x/b)**(a*p)*((x/b)**a + 1)**(-p - 1)/x\n-    assert cdf(X)(x) == Piecewise(((1 + x**(-a)/b)**(-p), x >= 0),\n-                            (0, True))\n+    assert cdf(X)(x) == Piecewise(((1 + (x/b)**(-a))**(-p), x >= 0),\n+                                    (0, True))\n \n \n def test_erlang():\n@@ -379,7 +380,7 @@ def test_logistic():\n \n     X = Logistic('x', mu, s)\n     assert density(X)(x) == exp((-x + mu)/s)/(s*(exp((-x + mu)/s) + 1)**2)\n-    assert cdf(X)(x) == exp((mu - x)/s) + 1\n+    assert cdf(X)(x) == 1/(exp((mu - x)/s) + 1)\n \n \n def test_lognormal():\n@@ -750,6 +751,27 @@ def test_precomputed_cdf():\n         assert compdiff == 0\n \n \n+def test_long_precomputed_cdf():\n+    x = symbols(\"x\", real=True, finite=True)\n+    distribs = [\n+            Arcsin(\"A\", -5, 9),\n+            Dagum(\"D\", 4, 10, 3),\n+            Erlang(\"E\", 14, 5),\n+            Frechet(\"F\", 2, 6, -3),\n+            Gamma(\"G\", 2, 7),\n+            GammaInverse(\"GI\", 3, 5),\n+            Kumaraswamy(\"K\", 6, 8),\n+            Laplace(\"LA\", -5, 4),\n+            Logistic(\"L\", -6, 7),\n+            Nakagami(\"N\", 2, 7),\n+            StudentT(\"S\", 4)\n+            ]\n+    for distr in distribs:\n+        for _ in range(5):\n+            assert abs((simplify(diff(cdf(distr)(x), x))\n+                - density(distr)(x)).evalf(subs={x: random.random()})) < 1e-15\n+\n+\n def test_issue_13324():\n     X = Uniform('X', 0, 1)\n     assert E(X, X > Rational(1, 2)) == Rational(3, 4)\n\nFrom 80930b976ab66779055ffebb987380842c3cb489 Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Fri, 12 Jan 2018 08:38:01 +0530\nSubject: [PATCH 07/11] Added test for UniformSums cdf and density\n\n---\n sympy/stats/tests/test_continuous_rv.py | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex 9515202f268d..d4fc46ae7e61 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -771,6 +771,11 @@ def test_long_precomputed_cdf():\n             assert abs((simplify(diff(cdf(distr)(x), x))\n                 - density(distr)(x)).evalf(subs={x: random.random()})) < 1e-15\n \n+    US = UniformSum(\"US\", 5)\n+    pdf01 = density(US)(x).subs(floor(x), 0).doit()   # pdf on (0, 1)\n+    cdf01 = cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()   # cdf on (0, 1)\n+    (diff(cdf01, x) - pdf01).subs(x, random.random()) == 0\n+\n \n def test_issue_13324():\n     X = Uniform('X', 0, 1)\n\nFrom efe74228cd0984023c59819c5eea355278ee2636 Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Wed, 17 Jan 2018 05:11:59 +0530\nSubject: [PATCH 08/11] Changed random with verify_numerically method\n\n---\n sympy/stats/tests/test_continuous_rv.py | 7 +++----\n 1 file changed, 3 insertions(+), 4 deletions(-)\n\ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ec02bdddc6a6..d2bf95392ded 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -1,5 +1,5 @@\n from __future__ import division\n-import random\n+from sympy.utilities.randtest import verify_numerically as tn\n from sympy.stats import (P, E, where, density, variance, covariance, skewness,\n                          given, pspace, cdf, characteristic_function, ContinuousRV, sample,\n                          Arcsin, Benini, Beta, BetaPrime, Cauchy,\n@@ -785,13 +785,12 @@ def test_long_precomputed_cdf():\n             ]\n     for distr in distribs:\n         for _ in range(5):\n-            assert abs((simplify(diff(cdf(distr)(x), x))\n-                - density(distr)(x)).evalf(subs={x: random.random()})) < 1e-15\n+            assert tn(diff(cdf(distr)(x), x), density(distr)(x), x, a=0, b=0, c=1, d=0) \n \n     US = UniformSum(\"US\", 5)\n     pdf01 = density(US)(x).subs(floor(x), 0).doit()   # pdf on (0, 1)\n     cdf01 = cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()   # cdf on (0, 1)\n-    (diff(cdf01, x) - pdf01).subs(x, random.random()) == 0\n+    assert tn(diff(cdf01, x), pdf01, x, a=0, b=0, c=1, d=0)\n \n \n def test_issue_13324():\n\nFrom 589b7e33994f21f5ed0de36949e95f402fb26df5 Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Thu, 18 Jan 2018 20:49:14 +0530\nSubject: [PATCH 09/11] deleted one whitespace\n\n---\n sympy/stats/tests/test_continuous_rv.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex d2bf95392ded..2145d906effa 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -785,7 +785,7 @@ def test_long_precomputed_cdf():\n             ]\n     for distr in distribs:\n         for _ in range(5):\n-            assert tn(diff(cdf(distr)(x), x), density(distr)(x), x, a=0, b=0, c=1, d=0) \n+            assert tn(diff(cdf(distr)(x), x), density(distr)(x), x, a=0, b=0, c=1, d=0)\n \n     US = UniformSum(\"US\", 5)\n     pdf01 = density(US)(x).subs(floor(x), 0).doit()   # pdf on (0, 1)\n\nFrom 21036544c299704ceb8a0ed396b45f785b599e9e Mon Sep 17 00:00:00 2001\nFrom: jashan498 <jashansingh.4398@gmail.com>\nDate: Fri, 19 Jan 2018 23:18:15 +0530\nSubject: [PATCH 10/11]  some minor changes in docstring\n\n---\n sympy/stats/crv_types.py | 9 +++++----\n 1 file changed, 5 insertions(+), 4 deletions(-)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex 06ee361613bf..bf7b89a9a825 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -2721,16 +2721,17 @@ def UniformSum(name, n):\n \n     >>> cdf(X)(z)\n     Piecewise((0, z < 0), (Sum((-1)**_k*(-_k + z)**n*binomial(n, _k),\n-                            (_k, 0, floor(z)))/factorial(n), n >= z), (1, True))\n+                    (_k, 0, floor(z)))/factorial(n), n >= z), (1, True))\n \n \n     Compute cdf with specific 'x' and 'n' values as follows :\n     >>> cdf(UniformSum(\"x\", 5), evaluate=False)(2).doit()\n     9/40\n \n-    In above formof cdf functtion evaluate=False prevents an attempt at premature evaluation of the sum,\n-    before the argument 2 is passed. Once 2 is passed, the sum is easily\n-    evaluated with doit and without any hypergeometric complications.\n+    The argument evaluate=False prevents an attempt at evaluation\n+    of the sum for general n, before the argument 2 is passed.\n+    Once 2 is passed, the sum is easilyevaluated with doit and without\n+    any hypergeometric complications.\n \n     References\n     ==========\n\nFrom 30c9ac7fae98c69ad540ccb1145fc27fca426f8d Mon Sep 17 00:00:00 2001\nFrom: Leonid Kovalev <normalhuman@users.noreply.github.com>\nDate: Sun, 21 Jan 2018 13:35:28 -0500\nSubject: [PATCH 11/11] Shorten a docstring\n\nThis was an unnecessary sentence, a bit too conversational.\n---\n sympy/stats/crv_types.py | 2 --\n 1 file changed, 2 deletions(-)\n\ndiff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex bf7b89a9a825..b602439edc3e 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -2730,8 +2730,6 @@ def UniformSum(name, n):\n \n     The argument evaluate=False prevents an attempt at evaluation\n     of the sum for general n, before the argument 2 is passed.\n-    Once 2 is passed, the sum is easilyevaluated with doit and without\n-    any hypergeometric complications.\n \n     References\n     ==========\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13878"}