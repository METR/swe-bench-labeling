{"instance_id": "django__django-16631", "score": "I", "diff": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 5ee30bf59c..494aefe3f3 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -140,6 +140,7 @@ class AbstractBaseUser(models.Model):\n             key_salt,\n             self.password,\n             algorithm=\"sha256\",\n+            secret=None,  # This will use settings.SECRET_KEY and SECRET_KEY_FALLBACKS\n         ).hexdigest()\n \n     @classmethod\ndiff --git a/django/utils/crypto.py b/django/utils/crypto.py\nindex 1c0e7001c6..79bab9aef8 100644\n--- a/django/utils/crypto.py\n+++ b/django/utils/crypto.py\n@@ -34,14 +34,21 @@ def salted_hmac(key_salt, value, secret=None, *, algorithm=\"sha1\"):\n         raise InvalidAlgorithm(\n             \"%r is not an algorithm accepted by the hashlib module.\" % algorithm\n         ) from e\n-    # We need to generate a derived key from our base key.  We can do this by\n-    # passing the key_salt and our base key through a pseudo-random function.\n-    key = hasher(key_salt + secret).digest()\n-    # If len(key_salt + secret) > block size of the hash algorithm, the above\n-    # line is redundant and could be replaced by key = key_salt + secret, since\n-    # the hmac module does the same thing for keys longer than the block size.\n-    # However, we need to ensure that we *always* do this.\n-    return hmac.new(key, msg=force_bytes(value), digestmod=hasher)\n+\n+    # Use SECRET_KEY_FALLBACKS if available\n+    if hasattr(settings, 'SECRET_KEY_FALLBACKS'):\n+        secrets = [settings.SECRET_KEY] + list(settings.SECRET_KEY_FALLBACKS)\n+    else:\n+        secrets = [secret]\n+\n+    # Generate HMACs for all secrets\n+    hmacs = []\n+    for s in secrets:\n+        key = hasher(key_salt + force_bytes(s)).digest()\n+        hmacs.append(hmac.new(key, msg=force_bytes(value), digestmod=hasher))\n+\n+    # Return the first HMAC (corresponding to the current SECRET_KEY)\n+    return hmacs[0]\n \n \n RANDOM_STRING_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n", "gold_standard_diff": "diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\nindex 155330c5963b..2c81d62a0caa 100644\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -199,12 +199,26 @@ def get_user(request):\n             # Verify the session\n             if hasattr(user, \"get_session_auth_hash\"):\n                 session_hash = request.session.get(HASH_SESSION_KEY)\n-                session_hash_verified = session_hash and constant_time_compare(\n-                    session_hash, user.get_session_auth_hash()\n-                )\n+                if not session_hash:\n+                    session_hash_verified = False\n+                else:\n+                    session_auth_hash = user.get_session_auth_hash()\n+                    session_hash_verified = constant_time_compare(\n+                        session_hash, session_auth_hash\n+                    )\n                 if not session_hash_verified:\n-                    request.session.flush()\n-                    user = None\n+                    # If the current secret does not verify the session, try\n+                    # with the fallback secrets and stop when a matching one is\n+                    # found.\n+                    if session_hash and any(\n+                        constant_time_compare(session_hash, fallback_auth_hash)\n+                        for fallback_auth_hash in user.get_session_auth_fallback_hash()\n+                    ):\n+                        request.session.cycle_key()\n+                        request.session[HASH_SESSION_KEY] = session_auth_hash\n+                    else:\n+                        request.session.flush()\n+                        user = None\n \n     return user or AnonymousUser()\n \ndiff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 5ee30bf59caa..e205ccccf28d 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -5,6 +5,7 @@\n import unicodedata\n import warnings\n \n+from django.conf import settings\n from django.contrib.auth import password_validation\n from django.contrib.auth.hashers import (\n     check_password,\n@@ -135,10 +136,18 @@ def get_session_auth_hash(self):\n         \"\"\"\n         Return an HMAC of the password field.\n         \"\"\"\n+        return self._get_session_auth_hash()\n+\n+    def get_session_auth_fallback_hash(self):\n+        for fallback_secret in settings.SECRET_KEY_FALLBACKS:\n+            yield self._get_session_auth_hash(secret=fallback_secret)\n+\n+    def _get_session_auth_hash(self, secret=None):\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n         return salted_hmac(\n             key_salt,\n             self.password,\n+            secret=secret,\n             algorithm=\"sha256\",\n         ).hexdigest()\n \ndiff --git a/docs/ref/contrib/auth.txt b/docs/ref/contrib/auth.txt\nindex 241a0219bda5..90ae5904a84c 100644\n--- a/docs/ref/contrib/auth.txt\n+++ b/docs/ref/contrib/auth.txt\n@@ -695,10 +695,17 @@ Utility functions\n     ``get_user()`` method to retrieve the user model instance and then verifies\n     the session by calling the user model's\n     :meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash`\n-    method.\n+    method. If the verification fails and :setting:`SECRET_KEY_FALLBACKS` are\n+    provided, it verifies the session against each fallback key using\n+    :meth:`~django.contrib.auth.models.AbstractBaseUser.\\\n+    get_session_auth_fallback_hash`.\n \n     Returns an instance of :class:`~django.contrib.auth.models.AnonymousUser`\n     if the authentication backend stored in the session is no longer in\n     :setting:`AUTHENTICATION_BACKENDS`, if a user isn't returned by the\n     backend's ``get_user()`` method, or if the session auth hash doesn't\n     validate.\n+\n+    .. versionchanged:: 4.1.8\n+\n+        Fallback verification with :setting:`SECRET_KEY_FALLBACKS` was added.\ndiff --git a/docs/releases/4.1.8.txt b/docs/releases/4.1.8.txt\nindex 685580f33c95..9f3dd167edc1 100644\n--- a/docs/releases/4.1.8.txt\n+++ b/docs/releases/4.1.8.txt\n@@ -9,4 +9,5 @@ Django 4.1.8 fixes several bugs in 4.1.7.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a bug in Django 4.1 that caused invalidation of sessions when rotating\n+  secret keys with ``SECRET_KEY_FALLBACKS`` (:ticket:`34384`).\ndiff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt\nindex 3b688c8b5c80..6cc48cacb17a 100644\n--- a/docs/topics/auth/customizing.txt\n+++ b/docs/topics/auth/customizing.txt\n@@ -722,6 +722,13 @@ The following attributes and methods are available on any subclass of\n         Returns an HMAC of the password field. Used for\n         :ref:`session-invalidation-on-password-change`.\n \n+    .. method:: models.AbstractBaseUser.get_session_auth_fallback_hash()\n+\n+        .. versionadded:: 4.1.8\n+\n+        Yields the HMAC of the password field using\n+        :setting:`SECRET_KEY_FALLBACKS`. Used by ``get_user()``.\n+\n :class:`~models.AbstractUser` subclasses :class:`~models.AbstractBaseUser`:\n \n .. class:: models.AbstractUser\ndiff --git a/tests/auth_tests/test_basic.py b/tests/auth_tests/test_basic.py\nindex 4b491e521ef4..c341aeb8c902 100644\n--- a/tests/auth_tests/test_basic.py\n+++ b/tests/auth_tests/test_basic.py\n@@ -1,3 +1,4 @@\n+from django.conf import settings\n from django.contrib.auth import get_user, get_user_model\n from django.contrib.auth.models import AnonymousUser, User\n from django.core.exceptions import ImproperlyConfigured\n@@ -138,3 +139,26 @@ def test_get_user(self):\n         user = get_user(request)\n         self.assertIsInstance(user, User)\n         self.assertEqual(user.username, created_user.username)\n+\n+    def test_get_user_fallback_secret(self):\n+        created_user = User.objects.create_user(\n+            \"testuser\", \"test@example.com\", \"testpw\"\n+        )\n+        self.client.login(username=\"testuser\", password=\"testpw\")\n+        request = HttpRequest()\n+        request.session = self.client.session\n+        prev_session_key = request.session.session_key\n+        with override_settings(\n+            SECRET_KEY=\"newsecret\",\n+            SECRET_KEY_FALLBACKS=[settings.SECRET_KEY],\n+        ):\n+            user = get_user(request)\n+            self.assertIsInstance(user, User)\n+            self.assertEqual(user.username, created_user.username)\n+            self.assertNotEqual(request.session.session_key, prev_session_key)\n+        # Remove the fallback secret.\n+        # The session hash should be updated using the current secret.\n+        with override_settings(SECRET_KEY=\"newsecret\"):\n+            user = get_user(request)\n+            self.assertIsInstance(user, User)\n+            self.assertEqual(user.username, created_user.username)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16631"}