From cf81dd37dd83c14e1906c855dcbe7dc589a21de7 Mon Sep 17 00:00:00 2001
From: Sasha Pachev <spachev@gmail.com>
Date: Thu, 4 Jun 2020 14:38:18 -0600
Subject: [PATCH 1/3] If a dictionary was being passed to
 DecimalField.to_python() it failed to generate the ValidationError, and
 instead was propagating the TypeError from the lower-level code, thus hiding
 the specifics of which value exacly caused the error. This - for example -
 affects debugging a save() on an improperly initialized object with many
 fields.

---
 django/db/models/fields/__init__.py     | 2 +-
 tests/model_fields/test_decimalfield.py | 8 +++++---
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0fd69059eec6..f358e6e0e9ba 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ def to_python(self, value):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except decimal.InvalidOperation:
+        except (decimal.InvalidOperation,TypeError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py
index e284005aa06b..ccd10fbc4ada 100644
--- a/tests/model_fields/test_decimalfield.py
+++ b/tests/model_fields/test_decimalfield.py
@@ -21,9 +21,11 @@ def test_to_python(self):
         # Uses default rounding of ROUND_HALF_EVEN.
         self.assertEqual(f.to_python(2.0625), Decimal('2.062'))
         self.assertEqual(f.to_python(2.1875), Decimal('2.188'))
-        msg = '“abc” value must be a decimal number.'
-        with self.assertRaisesMessage(ValidationError, msg):
-            f.to_python('abc')
+        bad_values = ["abc", {}]
+        for bad_value in bad_values:
+            msg = '“{}” value must be a decimal number.'.format(bad_value)
+            with self.assertRaisesMessage(ValidationError, msg):
+                f.to_python(bad_value)
 
     def test_default(self):
         f = models.DecimalField(default=Decimal('0.00'))

From d5a0515fff27dfd1ab3ae5aa8a2604e46ead3b4d Mon Sep 17 00:00:00 2001
From: Sasha Pachev <spachev@gmail.com>
Date: Thu, 4 Jun 2020 15:46:30 -0600
Subject: [PATCH 2/3] Appease flake8

---
 django/db/models/fields/__init__.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f358e6e0e9ba..693eee36a76d 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ def to_python(self, value):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except (decimal.InvalidOperation,TypeError):
+        except (decimal.InvalidOperation, TypeError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',

From dd8f334ace82b09ff015aafb33688a3d501c7267 Mon Sep 17 00:00:00 2001
From: Sasha Pachev <spachev@gmail.com>
Date: Fri, 5 Jun 2020 11:28:40 -0600
Subject: [PATCH 3/3] Updated according to review to test more invalid types
 and catch ValueError

---
 django/db/models/fields/__init__.py     |  2 +-
 tests/model_fields/test_decimalfield.py | 23 ++++++++++++++++++-----
 2 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 693eee36a76d..28374272f436 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1501,7 +1501,7 @@ def to_python(self, value):
             return self.context.create_decimal_from_float(value)
         try:
             return decimal.Decimal(value)
-        except (decimal.InvalidOperation, TypeError):
+        except (decimal.InvalidOperation, TypeError, ValueError):
             raise exceptions.ValidationError(
                 self.error_messages['invalid'],
                 code='invalid',
diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py
index ccd10fbc4ada..729b5e570aaa 100644
--- a/tests/model_fields/test_decimalfield.py
+++ b/tests/model_fields/test_decimalfield.py
@@ -21,11 +21,24 @@ def test_to_python(self):
         # Uses default rounding of ROUND_HALF_EVEN.
         self.assertEqual(f.to_python(2.0625), Decimal('2.062'))
         self.assertEqual(f.to_python(2.1875), Decimal('2.188'))
-        bad_values = ["abc", {}]
-        for bad_value in bad_values:
-            msg = '“{}” value must be a decimal number.'.format(bad_value)
-            with self.assertRaisesMessage(ValidationError, msg):
-                f.to_python(bad_value)
+
+    def test_invalid_value(self):
+        field = models.DecimalField(max_digits=4, decimal_places=2)
+        msg = '“%s” value must be a decimal number.'
+        tests = [
+            (),
+            [],
+            {},
+            set(),
+            object(),
+            complex(),
+            'non-numeric string',
+            b'non-numeric byte-string',
+        ]
+        for value in tests:
+            with self.subTest(value):
+                with self.assertRaisesMessage(ValidationError, msg % (value,)):
+                    field.clean(value, None)
 
     def test_default(self):
         f = models.DecimalField(default=Decimal('0.00'))
