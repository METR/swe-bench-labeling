{"instance_id": "pytest-dev__pytest-7236", "score": "C", "diff": "diff --git a/repro_exact.py b/repro_exact.py\nnew file mode 100644\nindex 000000000..018889ff1\n--- /dev/null\n+++ b/repro_exact.py\n@@ -0,0 +1,10 @@\n+import unittest\n+\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        xxx\n+    @unittest.skip(\"hello\")\n+    def test_one(self):\n+        pass\n+    def tearDown(self):\n+        xxx\ndiff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545af..d3b3f069f 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -122,7 +122,17 @@ class TestCaseFunction(Function):\n \n     def teardown(self):\n         if self._explicit_tearDown is not None:\n-            self._explicit_tearDown()\n+            # Only call tearDown if the test was not skipped\n+            if self._testcase is not None:\n+                # Check if test is skipped at class level or method level\n+                is_skipped = getattr(self._testcase, \"__unittest_skip__\", False)\n+                if not is_skipped:\n+                    test_method = getattr(self._testcase, self.name, None)\n+                    if test_method:\n+                        is_skipped = getattr(test_method, \"__unittest_skip__\", False)\n+                \n+                if not is_skipped:\n+                    self._explicit_tearDown()\n             self._explicit_tearDown = None\n         self._testcase = None\n         self._obj = None\ndiff --git a/testing/test_unittest_skip_pdb.py b/testing/test_unittest_skip_pdb.py\nnew file mode 100644\nindex 000000000..a8f7c2aa8\n--- /dev/null\n+++ b/testing/test_unittest_skip_pdb.py\n@@ -0,0 +1,103 @@\n+\"\"\"Test for issue: unittest.TestCase.tearDown executed on skipped tests when running --pdb\"\"\"\n+import textwrap\n+\n+\n+def test_unittest_skip_with_pdb(testdir):\n+    \"\"\"Ensure that unittest skipped tests do not call tearDown when --pdb is used.\"\"\"\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                xxx  # This should not be reached for skipped tests\n+                \n+            @unittest.skip(\"hello\")\n+            def test_one(self):\n+                pass\n+                \n+            def tearDown(self):\n+                xxx  # This should not be reached for skipped tests\n+        \"\"\"\n+    )\n+    \n+    # Without --pdb, test should be skipped normally\n+    result = testdir.runpytest(testpath, \"-v\")\n+    result.stdout.fnmatch_lines([\n+        \"*test_unittest_skip_with_pdb.py::MyTestCase::test_one SKIPPED*\",\n+        \"*1 skipped*\",\n+    ])\n+    assert result.ret == 0\n+    \n+    # With --pdb, test should still be skipped and tearDown should not be called\n+    result = testdir.runpytest(testpath, \"--pdb\", \"-v\")\n+    result.stdout.fnmatch_lines([\n+        \"*test_unittest_skip_with_pdb.py::MyTestCase::test_one SKIPPED*\",\n+        \"*1 skipped*\",\n+    ])\n+    # Should not have any errors from tearDown\n+    assert \"ERROR\" not in result.stdout.str()\n+    assert \"NameError\" not in result.stdout.str()\n+    assert result.ret == 0\n+\n+\n+def test_unittest_skip_class_with_pdb(testdir):\n+    \"\"\"Ensure that unittest skipped test classes do not call tearDown when --pdb is used.\"\"\"\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        @unittest.skip(\"skipping class\")\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                xxx  # This should not be reached\n+                \n+            def test_one(self):\n+                pass\n+                \n+            def tearDown(self):\n+                xxx  # This should not be reached\n+        \"\"\"\n+    )\n+    \n+    # With --pdb, test should still be skipped and tearDown should not be called\n+    result = testdir.runpytest(testpath, \"--pdb\", \"-v\")\n+    result.stdout.fnmatch_lines([\n+        \"*test_unittest_skip_class_with_pdb.py::MyTestCase::test_one SKIPPED*\",\n+        \"*1 skipped*\",\n+    ])\n+    # Should not have any errors from tearDown\n+    assert \"ERROR\" not in result.stdout.str()\n+    assert \"NameError\" not in result.stdout.str()\n+    assert result.ret == 0\n+\n+\n+def test_unittest_pdb_teardown_still_called_for_non_skipped(testdir):\n+    \"\"\"Ensure that tearDown is still called for non-skipped tests when using --pdb.\"\"\"\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        \n+        teardowns = []\n+\n+        class MyTestCase(unittest.TestCase):\n+            def test_normal(self):\n+                assert True\n+                \n+            def tearDown(self):\n+                teardowns.append(self._testMethodName)\n+                \n+        # This will be checked after the test run\n+        def test_teardowns_called():\n+            assert teardowns == [\"test_normal\"], f\"Expected tearDown for test_normal, got {teardowns}\"\n+        \"\"\"\n+    )\n+    \n+    # With --pdb, tearDown should still be called for non-skipped tests\n+    result = testdir.runpytest(testpath, \"--pdb\", \"-v\")\n+    result.stdout.fnmatch_lines([\n+        \"*test_unittest_pdb_teardown_still_called_for_non_skipped.py::MyTestCase::test_normal PASSED*\",\n+        \"*test_unittest_pdb_teardown_still_called_for_non_skipped.py::test_teardowns_called PASSED*\",\n+        \"*2 passed*\",\n+    ])\n+    assert result.ret == 0\n", "gold_standard_diff": "From ab60a31965bc9a4bcbae88c1fb36be317e336a14 Mon Sep 17 00:00:00 2001\nFrom: Bruno Oliveira <nicoddemus@gmail.com>\nDate: Thu, 21 May 2020 16:50:58 -0300\nSubject: [PATCH] Do not call TestCase.tearDown for skipped tests\n\nFix #7215\n---\n changelog/7215.bugfix.rst |  2 ++\n src/_pytest/unittest.py   | 11 ++++++++---\n testing/test_unittest.py  | 34 ++++++++++++++++++++++++++++++++++\n 3 files changed, 44 insertions(+), 3 deletions(-)\n create mode 100644 changelog/7215.bugfix.rst\n\ndiff --git a/changelog/7215.bugfix.rst b/changelog/7215.bugfix.rst\nnew file mode 100644\nindex 00000000000..81514913285\n--- /dev/null\n+++ b/changelog/7215.bugfix.rst\n@@ -0,0 +1,2 @@\n+Fix regression where running with ``--pdb`` would call the ``tearDown`` methods of ``unittest.TestCase``\n+subclasses for skipped tests.\ndiff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 773f545af2e..0d9133f6023 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -41,7 +41,7 @@ def collect(self):\n         if not getattr(cls, \"__test__\", True):\n             return\n \n-        skipped = getattr(cls, \"__unittest_skip__\", False)\n+        skipped = _is_skipped(cls)\n         if not skipped:\n             self._inject_setup_teardown_fixtures(cls)\n             self._inject_setup_class_fixture()\n@@ -89,7 +89,7 @@ def _make_xunit_fixture(obj, setup_name, teardown_name, scope, pass_self):\n \n     @pytest.fixture(scope=scope, autouse=True)\n     def fixture(self, request):\n-        if getattr(self, \"__unittest_skip__\", None):\n+        if _is_skipped(self):\n             reason = self.__unittest_skip_why__\n             pytest.skip(reason)\n         if setup is not None:\n@@ -220,7 +220,7 @@ def runtest(self):\n             # arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n@@ -301,3 +301,8 @@ def check_testcase_implements_trial_reporter(done=[]):\n \n     classImplements(TestCaseFunction, IReporter)\n     done.append(1)\n+\n+\n+def _is_skipped(obj) -> bool:\n+    \"\"\"Return True if the given object has been marked with @unittest.skip\"\"\"\n+    return bool(getattr(obj, \"__unittest_skip__\", False))\ndiff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 83f1b6b2a85..74a36c41bc0 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1193,6 +1193,40 @@ def test_2(self):\n     ]\n \n \n+@pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\n+def test_pdb_teardown_skipped(testdir, monkeypatch, mark):\n+    \"\"\"\n+    With --pdb, setUp and tearDown should not be called for skipped tests.\n+    \"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"test_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.test_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.test_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            {mark}(\"skipped for reasons\")\n+            def test_1(self):\n+                pass\n+\n+    \"\"\".format(\n+            mark=mark\n+        )\n+    )\n+    result = testdir.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(testdir):\n     pytest.importorskip(\"unittest.async_case\")\n \n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/7236"}