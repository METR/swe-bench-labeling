diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..0982e55b7a 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -108,6 +108,14 @@ class SessionBase:
 
     def encode(self, session_dict):
         "Return the given session dictionary serialized and encoded as a string."
+        # RemovedInDjango40Warning: DEFAULT_HASHING_ALGORITHM='sha1' will be
+        # removed in Django 4.0.
+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':
+            # Use the legacy format for compatibility during the transition to
+            # Django 3.1 when DEFAULT_HASHING_ALGORITHM is set to 'sha1'.
+            serialized = self.serializer().dumps(session_dict)
+            hash = self._hash(serialized)
+            return base64.b64encode(hash.encode() + b":" + serialized).decode('ascii')
         return signing.dumps(
             session_dict, salt=self.key_salt, serializer=self.serializer,
             compress=True,
diff --git a/minimal_test.py b/minimal_test.py
new file mode 100644
index 0000000000..61febc2069
--- /dev/null
+++ b/minimal_test.py
@@ -0,0 +1,35 @@
+import os
+import sys
+sys.path.insert(0, '/testbed')
+
+# Set up minimal Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+settings.SECRET_KEY = 'test-key'
+settings.INSTALLED_APPS = ['django.contrib.sessions']
+settings.DEFAULT_HASHING_ALGORITHM = 'sha1'
+
+import django
+django.setup()
+
+from django.contrib.sessions.backends.base import SessionBase
+import base64
+
+print("Testing session encoding with DEFAULT_HASHING_ALGORITHM='sha1'")
+session = SessionBase()
+data = {'test': 'value'}
+encoded = session.encode(data)
+print(f"Encoded: {encoded}")
+
+# Check format
+try:
+    decoded_bytes = base64.b64decode(encoded.encode('ascii'))
+    has_colon = b':' in decoded_bytes
+    print(f"Legacy format (has colon): {has_colon}")
+except:
+    print("Not legacy base64 format")
+
+decoded = session.decode(encoded)
+print(f"Decoded: {decoded}")
+print(f"Match: {decoded == data}")
diff --git a/test_session_fix.py b/test_session_fix.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_session_transition.py b/test_session_transition.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_simple_session.py b/test_simple_session.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_transition_compatibility.py b/test_transition_compatibility.py
new file mode 100644
index 0000000000..e69de29bb2
