{"instance_id": "django__django-15499", "score": "I", "diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..c64488f774 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -6,6 +6,7 @@ from django.db.models.options import normalize_together\n from django.utils.functional import cached_property\n \n from .fields import AddField, AlterField, FieldOperation, RemoveField, RenameField\n+from .managers import AlterModelManagers\n \n \n def _check_for_duplicates(arg_name, objs):\n@@ -65,6 +66,20 @@ class CreateModel(ModelOperation):\n         )\n         _check_for_duplicates(\"managers\", (name for name, _ in self.managers))\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterModelManagers) and self.name_lower == operation.name_lower:\n+            self.managers = operation.managers\n+            return [\n+                CreateModel(\n+                    name=self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=self.managers,\n+                ),\n+            ]\n+        return super().reduce(operation, app_label)\n+\n     def deconstruct(self):\n         kwargs = {\n             \"name\": self.name,\n", "gold_standard_diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee58b..8a5c04393bbf 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -170,6 +170,19 @@ def reduce(self, operation, app_label):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 59dd401a3c75..6bde378cd9f5 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,30 @@ def test_create_alter_model_options(self):\n             ],\n         )\n \n+    def test_create_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15499"}