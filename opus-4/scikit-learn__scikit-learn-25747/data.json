{"instance_id": "scikit-learn__scikit-learn-25747", "score": "I", "diff": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..d27df0005 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -55,7 +55,7 @@ def _wrap_in_pandas_container(\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n         return data_to_wrap\n \ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..321b1f643\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,117 @@\n+import pandas as pd\n+import numpy as np\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from sklearn.pipeline import make_union, FeatureUnion\n+from sklearn.preprocessing import StandardScaler\n+from typing import Optional\n+\n+\n+# Test 1: Aggregating transformer (original issue)\n+print(\"Test 1: Aggregating transformer\")\n+index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+data[\"date\"] = index.date\n+\n+class AggregatingTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: Optional[pd.Series] = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: Optional[pd.Series] = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+set_config(transform_output=\"pandas\")\n+try:\n+    result = make_union(AggregatingTransformer()).fit_transform(data)\n+    print(f\"\u2713 Success! Result shape: {result.shape}\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\n+\n+\n+# Test 2: Normal transformer (same number of rows)\n+print(\"\\nTest 2: Normal transformer (same rows)\")\n+data2 = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}, index=['x', 'y', 'z'])\n+\n+class IdentityTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+    \n+    def transform(self, X):\n+        return X\n+\n+try:\n+    result = make_union(IdentityTransformer()).fit_transform(data2)\n+    print(f\"\u2713 Success! Result shape: {result.shape}\")\n+    print(f\"  Index preserved: {list(result.index) == list(data2.index)}\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\n+\n+\n+# Test 3: Multiple transformers with different behaviors\n+print(\"\\nTest 3: Multiple transformers\")\n+class DoubleTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+    \n+    def transform(self, X):\n+        return X * 2\n+\n+try:\n+    result = make_union(IdentityTransformer(), DoubleTransformer()).fit_transform(data2)\n+    print(f\"\u2713 Success! Result shape: {result.shape}\")\n+    print(f\"  Index preserved: {list(result.index) == list(data2.index)}\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\n+\n+\n+# Test 4: StandardScaler (real sklearn transformer)\n+print(\"\\nTest 4: StandardScaler\")\n+data3 = pd.DataFrame({'feature1': [1, 2, 3, 4, 5], 'feature2': [10, 20, 30, 40, 50]})\n+\n+try:\n+    result = make_union(StandardScaler()).fit_transform(data3)\n+    print(f\"\u2713 Success! Result shape: {result.shape}\")\n+    print(f\"  Result type: {type(result)}\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\n+\n+\n+# Test 5: Mixed - aggregating and normal transformers\n+print(\"\\nTest 5: Mixed transformers (aggregating + normal)\")\n+data4 = pd.DataFrame({\n+    'value': [1, 2, 3, 4, 5, 6],\n+    'group': ['A', 'A', 'B', 'B', 'C', 'C']\n+})\n+\n+class GroupSumTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+    \n+    def transform(self, X):\n+        return X.groupby('group')['value'].sum()\n+\n+class SelectValueTransformer(BaseEstimator, TransformerMixin):  \n+    def fit(self, X, y=None):\n+        return self\n+    \n+    def transform(self, X):\n+        return X[['value']]\n+\n+try:\n+    # This should fail because the transformers return different numbers of rows\n+    result = make_union(GroupSumTransformer(), SelectValueTransformer()).fit_transform(data4)\n+    print(f\"\u2713 Success! Result shape: {result.shape}\")\n+except Exception as e:\n+    print(f\"\u2713 Expected error caught: {type(e).__name__}\")\n+\n+\n+# Test 6: Return to default mode\n+print(\"\\nTest 6: Default mode (numpy)\")\n+set_config(transform_output=\"default\")\n+\n+try:\n+    result = make_union(AggregatingTransformer()).fit_transform(data)\n+    print(f\"\u2713 Success! Result shape: {result.shape}\")\n+    print(f\"  Result type: {type(result)}\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\ndiff --git a/test_dataframe_creation.py b/test_dataframe_creation.py\nnew file mode 100644\nindex 000000000..bb6af7430\n--- /dev/null\n+++ b/test_dataframe_creation.py\n@@ -0,0 +1,23 @@\n+import pandas as pd\n+import numpy as np\n+\n+# Create a series with 4 elements\n+s = pd.Series([1, 2, 3, 4])\n+print(f\"Series shape: {s.shape}\")\n+\n+# Try to create DataFrame with mismatched index\n+long_index = pd.RangeIndex(96)\n+print(f\"Long index length: {len(long_index)}\")\n+\n+try:\n+    df = pd.DataFrame(s, index=long_index)\n+    print(f\"Success! DataFrame shape: {df.shape}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+# What about with columns?\n+try:\n+    df = pd.DataFrame(s, index=long_index, columns=['col'])\n+    print(f\"With columns - Success! DataFrame shape: {df.shape}\")\n+except Exception as e:\n+    print(f\"With columns - Error: {type(e).__name__}: {e}\")\ndiff --git a/test_debug.py b/test_debug.py\nnew file mode 100644\nindex 000000000..70dd2c6bd\n--- /dev/null\n+++ b/test_debug.py\n@@ -0,0 +1,41 @@\n+import pandas as pd\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from sklearn.pipeline import make_union, FeatureUnion\n+from typing import Optional\n+\n+index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+data[\"date\"] = index.date\n+\n+print(f\"Original data shape: {data.shape}\")\n+\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: Optional[pd.Series] = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: Optional[pd.Series] = None) -> pd.DataFrame:\n+        result = X[\"value\"].groupby(X[\"date\"]).sum()\n+        print(f\"Transform result shape: {result.shape}\")\n+        print(f\"Transform result type: {type(result)}\")\n+        return result\n+\n+\n+# Check if FeatureUnion has auto wrapping enabled\n+fu = make_union(MyTransformer())\n+print(f\"FeatureUnion auto wrap keys: {getattr(fu, '_sklearn_auto_wrap_output_keys', 'Not found')}\")\n+print(f\"FeatureUnion has get_feature_names_out: {hasattr(fu, 'get_feature_names_out')}\")\n+\n+# Check the transform method\n+print(f\"Transform method: {fu.transform}\")\n+print(f\"Transform method module: {fu.transform.__module__}\")\n+\n+set_config(transform_output=\"pandas\")\n+try:\n+    result = fu.fit_transform(data)\n+    print(f\"Success! Result shape: {result.shape}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 000000000..6e651b781\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,32 @@\n+import pandas as pd\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from sklearn.pipeline import make_union\n+from typing import Optional\n+\n+index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+data[\"date\"] = index.date\n+\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: Optional[pd.Series] = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: Optional[pd.Series] = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+\n+# This works.\n+set_config(transform_output=\"default\")\n+print(\"With default output:\")\n+print(make_union(MyTransformer()).fit_transform(data))\n+print()\n+\n+# This does not work.\n+set_config(transform_output=\"pandas\")\n+print(\"With pandas output:\")\n+try:\n+    print(make_union(MyTransformer()).fit_transform(data))\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\ndiff --git a/test_mixed_debug.py b/test_mixed_debug.py\nnew file mode 100644\nindex 000000000..48cc715e3\n--- /dev/null\n+++ b/test_mixed_debug.py\n@@ -0,0 +1,32 @@\n+import pandas as pd\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from sklearn.pipeline import make_union\n+\n+data = pd.DataFrame({\n+    'value': [1, 2, 3, 4, 5, 6],\n+    'group': ['A', 'A', 'B', 'B', 'C', 'C']\n+})\n+\n+class GroupSumTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+    \n+    def transform(self, X):\n+        result = X.groupby('group')['value'].sum()\n+        print(f\"GroupSum result shape: {result.shape}, type: {type(result)}\")\n+        return result\n+\n+class SelectValueTransformer(BaseEstimator, TransformerMixin):  \n+    def fit(self, X, y=None):\n+        return self\n+    \n+    def transform(self, X):\n+        result = X[['value']]\n+        print(f\"SelectValue result shape: {result.shape}, type: {type(result)}\")\n+        return result\n+\n+set_config(transform_output=\"pandas\")\n+result = make_union(GroupSumTransformer(), SelectValueTransformer()).fit_transform(data)\n+print(f\"Final result shape: {result.shape}\")\n+print(f\"Final result:\\n{result}\")\ndiff --git a/test_series.py b/test_series.py\nnew file mode 100644\nindex 000000000..b59dfbac8\n--- /dev/null\n+++ b/test_series.py\n@@ -0,0 +1,8 @@\n+import pandas as pd\n+\n+# Check if pd.Series is considered pd.DataFrame\n+s = pd.Series([1, 2, 3])\n+print(f\"Series isinstance DataFrame: {isinstance(s, pd.DataFrame)}\")\n+print(f\"Series type: {type(s)}\")\n+print(f\"Has index attr: {hasattr(s, 'index')}\")\n+print(f\"Index length: {len(s.index)}\")\n", "gold_standard_diff": "diff --git a/doc/whats_new/v1.2.rst b/doc/whats_new/v1.2.rst\nindex c252a7c18f5c9..2e378d478c100 100644\n--- a/doc/whats_new/v1.2.rst\n+++ b/doc/whats_new/v1.2.rst\n@@ -27,6 +27,13 @@ Changes impacting all modules\n Changelog\n ---------\n \n+:mod:`sklearn.base`\n+...................\n+\n+- |Fix| When `set_output(transform=\"pandas\")`, :class:`base.TransformerMixin` maintains\n+  the index if the :term:`transform` output is already a DataFrame. :pr:`25747` by\n+  `Thomas Fan`_.\n+\n :mod:`sklearn.calibration`\n ..........................\n \ndiff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6af96c..0a07ee77b9fc1 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -34,7 +34,7 @@ def _wrap_in_pandas_container(\n         `range(n_features)`.\n \n     index : array-like, default=None\n-        Index for data.\n+        Index for data. `index` is ignored if `data_to_wrap` is already a DataFrame.\n \n     Returns\n     -------\n@@ -55,8 +55,6 @@ def _wrap_in_pandas_container(\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n-            data_to_wrap.index = index\n         return data_to_wrap\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\ndiff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex ac73ca09439ff..52213d771ee44 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -33,7 +33,9 @@ def test__wrap_in_pandas_container_dense_update_columns_and_index():\n \n     new_df = _wrap_in_pandas_container(X_df, columns=new_columns, index=new_index)\n     assert_array_equal(new_df.columns, new_columns)\n-    assert_array_equal(new_df.index, new_index)\n+\n+    # Index does not change when the input is a DataFrame\n+    assert_array_equal(new_df.index, X_df.index)\n \n \n def test__wrap_in_pandas_container_error_validation():\n@@ -260,3 +262,33 @@ class C(A, B):\n         pass\n \n     assert C().transform(None) == \"B\"\n+\n+\n+class EstimatorWithSetOutputIndex(_SetOutputMixin):\n+    def fit(self, X, y=None):\n+        self.n_features_in_ = X.shape[1]\n+        return self\n+\n+    def transform(self, X, y=None):\n+        import pandas as pd\n+\n+        # transform by giving output a new index.\n+        return pd.DataFrame(X.to_numpy(), index=[f\"s{i}\" for i in range(X.shape[0])])\n+\n+    def get_feature_names_out(self, input_features=None):\n+        return np.asarray([f\"X{i}\" for i in range(self.n_features_in_)], dtype=object)\n+\n+\n+def test_set_output_pandas_keep_index():\n+    \"\"\"Check that set_output does not override index.\n+\n+    Non-regression test for gh-25730.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1, 2, 3], [4, 5, 6]], index=[0, 1])\n+    est = EstimatorWithSetOutputIndex().set_output(transform=\"pandas\")\n+    est.fit(X)\n+\n+    X_trans = est.transform(X)\n+    assert_array_equal(X_trans.index, [\"s0\", \"s1\"])\n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/25747"}