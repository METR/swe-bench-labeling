diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py
index 17da3cfd2c..2b855acaa2 100644
--- a/sympy/physics/quantum/dagger.py
+++ b/sympy/physics/quantum/dagger.py
@@ -85,5 +85,11 @@ def __new__(cls, arg):
             return obj
         return Expr.__new__(cls, arg)
 
+    def __mul__(self, other):
+        from sympy.physics.quantum.operator import IdentityOperator
+        if isinstance(other, IdentityOperator):
+            return self
+        return Expr.__mul__(self, other)
+
 adjoint.__name__ = "Dagger"
 adjoint._sympyrepr = lambda a, b: "Dagger(%s)" % b._print(a.args[0])
diff --git a/sympy/physics/quantum/operator.py b/sympy/physics/quantum/operator.py
index 306bfee64f..a220419487 100644
--- a/sympy/physics/quantum/operator.py
+++ b/sympy/physics/quantum/operator.py
@@ -306,12 +306,15 @@ def _print_contents_latex(self, printer, *args):
         return r'{\mathcal{I}}'
 
     def __mul__(self, other):
-
-        if isinstance(other, Operator):
+        if isinstance(other, Operator) or isinstance(other, Dagger):
             return other
-
         return Mul(self, other)
 
+    def __rmul__(self, other):
+        if isinstance(other, Operator) or isinstance(other, Dagger):
+            return other
+        return Mul(other, self)
+
     def _represent_default_basis(self, **options):
         if not self.N or self.N == oo:
             raise NotImplementedError('Cannot represent infinite dimensional' +
diff --git a/sympy/physics/quantum/tests/test_dagger_identity.py b/sympy/physics/quantum/tests/test_dagger_identity.py
new file mode 100644
index 0000000000..829b799f16
--- /dev/null
+++ b/sympy/physics/quantum/tests/test_dagger_identity.py
@@ -0,0 +1,35 @@
+import unittest
+from sympy.physics.quantum.dagger import Dagger
+from sympy.physics.quantum.operator import Operator, IdentityOperator
+
+class TestDaggerIdentity(unittest.TestCase):
+    def test_dagger_identity_multiplication(self):
+        A = Operator('A')
+        Identity = IdentityOperator()
+        
+        # Test regular operator multiplication with identity
+        self.assertEqual(A * Identity, A)
+        
+        # Test dagger operator multiplication with identity
+        B = Dagger(A)
+        self.assertEqual(B * Identity, B)
+        
+        # Test that the result is not B * Identity
+        self.assertEqual(str(B * Identity), "Dagger(A)")
+
+    def test_dagger_identity_multiplication_reversed(self):
+        A = Operator('A')
+        Identity = IdentityOperator()
+        
+        # Test identity multiplication with regular operator
+        self.assertEqual(Identity * A, A)
+        
+        # Test identity multiplication with dagger operator
+        B = Dagger(A)
+        self.assertEqual(Identity * B, B)
+        
+        # Test that the result is not Identity * B
+        self.assertEqual(str(Identity * B), "Dagger(A)")
+
+if __name__ == '__main__':
+    unittest.main()
