{"instance_id": "astropy__astropy-13033", "score": "I", "diff": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87..4067b302ba 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -75,10 +75,20 @@ class BaseTimeSeries(QTable):\n                                  .format(self.__class__.__name__, required_columns[0], plural))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n-\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                # Check if required columns are missing\n+                missing_columns = [col for col in required_columns if col not in self.colnames]\n+                \n+                if missing_columns:\n+                    # Some required columns are missing\n+                    plural_missing = 's' if len(missing_columns) > 1 else ''\n+                    raise ValueError(\"{} object is invalid - missing required column{}: {}\"\n+                                     .format(self.__class__.__name__, plural_missing, \n+                                             ', '.join(repr(col) for col in missing_columns)))\n+                else:\n+                    # All required columns exist but are in wrong order\n+                    raise ValueError(\"{} object is invalid - expected '{}' \"\n+                                     \"as the first column{} but found '{}'\"\n+                                     .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\ndiff --git a/astropy/timeseries/tests/test_sampled.py b/astropy/timeseries/tests/test_sampled.py\nindex bcc06d929e..9a6a01aa16 100644\n--- a/astropy/timeseries/tests/test_sampled.py\n+++ b/astropy/timeseries/tests/test_sampled.py\n@@ -34,8 +34,8 @@ def test_empty_initialization_invalid():\n     ts = TimeSeries()\n     with pytest.raises(ValueError) as exc:\n         ts['flux'] = [1, 2, 3]\n-    assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n-                                 \"'time' as the first column but found 'flux'\")\n+    assert exc.value.args[0] == (\"TimeSeries object is invalid - missing required \"\n+                                 \"column: 'time'\")\n \n \n def test_initialize_only_time():\n@@ -377,23 +377,23 @@ def test_required_columns():\n \n     with pytest.raises(ValueError) as exc:\n         ts.copy().keep_columns(['a', 'b'])\n-    assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n-                                 \"'time' as the first column but found 'a'\")\n+    assert exc.value.args[0] == (\"TimeSeries object is invalid - missing required \"\n+                                 \"column: 'time'\")\n \n     with pytest.raises(ValueError) as exc:\n         ts.copy().remove_column('time')\n-    assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n-                                 \"'time' as the first column but found 'a'\")\n+    assert exc.value.args[0] == (\"TimeSeries object is invalid - missing required \"\n+                                 \"column: 'time'\")\n \n     with pytest.raises(ValueError) as exc:\n         ts.copy().remove_columns(['time', 'a'])\n-    assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n-                                 \"'time' as the first column but found 'b'\")\n+    assert exc.value.args[0] == (\"TimeSeries object is invalid - missing required \"\n+                                 \"column: 'time'\")\n \n     with pytest.raises(ValueError) as exc:\n         ts.copy().rename_column('time', 'banana')\n-    assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n-                                 \"'time' as the first column but found 'banana'\")\n+    assert exc.value.args[0] == (\"TimeSeries object is invalid - missing required \"\n+                                 \"column: 'time'\")\n \n \n @pytest.mark.parametrize('cls', [BoxLeastSquares, LombScargle])\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 32ebe645ce..6ebe80c7a6 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.22\",\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..dace0608b2\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,56 @@\n+import numpy as np\n+from astropy.time import Time\n+from astropy.timeseries import TimeSeries\n+\n+print(\"Test 1: Removing a single required column\")\n+print(\"-\" * 50)\n+time = Time(np.arange(100000, 100003), format='jd')\n+ts = TimeSeries(time=time, data={\"flux\": [99.9, 99.8, 99.7]})\n+ts._required_columns = [\"time\", \"flux\"]\n+\n+try:\n+    ts.remove_column(\"flux\")\n+except ValueError as e:\n+    print(f\"\u2713 Correct error: {e}\")\n+\n+print(\"\\nTest 2: Removing multiple required columns\")\n+print(\"-\" * 50)\n+ts2 = TimeSeries(time=time, data={\"flux\": [99.9, 99.8, 99.7], \"mag\": [1, 2, 3]})\n+ts2._required_columns = [\"time\", \"flux\", \"mag\"]\n+\n+try:\n+    ts2.remove_columns([\"flux\", \"mag\"])\n+except ValueError as e:\n+    print(f\"\u2713 Correct error: {e}\")\n+\n+print(\"\\nTest 3: Wrong column order (all columns present)\")\n+print(\"-\" * 50)\n+from astropy.table import QTable\n+ts3 = TimeSeries()\n+ts3._required_columns = [\"time\", \"flux\"]\n+ts3._required_columns_relax = True\n+ts3.add_column([1, 2, 3], name=\"flux\")\n+ts3.add_column(Time(np.arange(100000, 100003), format='jd'), name=\"time\", index=0)\n+print(f\"Columns in wrong order: {ts3.colnames}\")\n+# This should not raise an error as columns are just in wrong order\n+print(\"\u2713 No error raised - columns exist but in different order\")\n+\n+print(\"\\nTest 4: Empty time series\")\n+print(\"-\" * 50)\n+ts4 = TimeSeries()\n+ts4._required_columns = [\"time\"]\n+ts4._required_columns_relax = False\n+try:\n+    ts4._check_required_columns()\n+except ValueError as e:\n+    print(f\"\u2713 Correct error for empty table: {e}\")\n+\n+print(\"\\nTest 5: Normal operation (no error expected)\")\n+print(\"-\" * 50)\n+ts5 = TimeSeries(time=time, data={\"flux\": [99.9, 99.8, 99.7]})\n+ts5._required_columns = [\"time\"]\n+try:\n+    ts5.remove_column(\"flux\")\n+    print(\"\u2713 No error - removed non-required column successfully\")\n+except ValueError as e:\n+    print(f\"\u2717 Unexpected error: {e}\")\ndiff --git a/test_empty_case.py b/test_empty_case.py\nnew file mode 100644\nindex 0000000000..aeef2015a1\n--- /dev/null\n+++ b/test_empty_case.py\n@@ -0,0 +1,15 @@\n+from astropy.timeseries import TimeSeries\n+\n+# Test empty initialization case\n+ts = TimeSeries()\n+print(f\"Empty TimeSeries columns: {ts.colnames}\")\n+print(f\"Required columns: {ts._required_columns}\")\n+print(f\"Required columns relax: {ts._required_columns_relax}\")\n+\n+try:\n+    ts['flux'] = [1, 2, 3]\n+except ValueError as e:\n+    print(f\"\\nError when adding 'flux' as first column: {e}\")\n+    \n+# Let's check what happens after adding flux\n+print(f\"\\nAfter error, columns are: {ts.colnames}\")\ndiff --git a/test_fix_demo.py b/test_fix_demo.py\nnew file mode 100644\nindex 0000000000..889e9eb0c3\n--- /dev/null\n+++ b/test_fix_demo.py\n@@ -0,0 +1,55 @@\n+import numpy as np\n+from astropy.time import Time\n+from astropy.timeseries import TimeSeries\n+\n+print(\"DEMONSTRATION OF FIX FOR MISLEADING EXCEPTION\")\n+print(\"=\" * 50)\n+\n+# Test case from the issue\n+time = Time(np.arange(100000, 100003), format='jd')\n+ts = TimeSeries(time=time, data={\"flux\": [99.9, 99.8, 99.7]})\n+ts._required_columns = [\"time\", \"flux\"]\n+\n+print(\"\\nInitial state:\")\n+print(f\"  Columns: {ts.colnames}\")\n+print(f\"  Required columns: {ts._required_columns}\")\n+\n+print(\"\\nTrying to remove required column 'flux'...\")\n+try:\n+    ts.remove_column(\"flux\")\n+except ValueError as e:\n+    print(f\"  Exception raised: {e}\")\n+    print(f\"  \u2713 FIXED: The error message now clearly states that 'flux' is a required column!\")\n+\n+# Test with multiple required columns\n+print(\"\\n\" + \"-\" * 50)\n+print(\"\\nTest with multiple required columns:\")\n+ts2 = TimeSeries(time=time, data={\"flux\": [99.9, 99.8, 99.7], \"mag\": [1, 2, 3], \"err\": [0.1, 0.2, 0.3]})\n+ts2._required_columns = [\"time\", \"flux\", \"mag\", \"err\"]\n+\n+print(f\"  Columns: {ts2.colnames}\")\n+print(f\"  Required columns: {ts2._required_columns}\")\n+\n+print(\"\\nTrying to remove multiple required columns...\")\n+try:\n+    ts2.remove_columns([\"flux\", \"mag\"])\n+except ValueError as e:\n+    print(f\"  Exception raised: {e}\")\n+    print(f\"  \u2713 FIXED: The error message lists all missing required columns!\")\n+\n+# Test column order issue (not missing, just wrong order)\n+print(\"\\n\" + \"-\" * 50)\n+print(\"\\nTest with wrong column order:\")\n+from astropy.table import Column\n+ts3 = TimeSeries(time=time, data={\"flux\": [99.9, 99.8, 99.7]})\n+\n+print(f\"  Initial columns: {ts3.colnames}\")\n+\n+print(\"\\nTrying to add column 'new_col' at index 0 (before 'time')...\")\n+try:\n+    ts3.add_column(Column([1, 2, 3], name='new_col'), index=0)\n+except ValueError as e:\n+    print(f\"  Exception raised: {e}\")\n+    print(f\"  \u2713 CORRECT: 'time' must be the first column!\")\n+\n+print(\"\\n\u2705 All tests pass! The fix successfully addresses the misleading exception issue.\")\ndiff --git a/test_reproduce_issue.py b/test_reproduce_issue.py\nnew file mode 100644\nindex 0000000000..98e17f7f9b\n--- /dev/null\n+++ b/test_reproduce_issue.py\n@@ -0,0 +1,19 @@\n+import numpy as np\n+from astropy.time import Time\n+from astropy.timeseries import TimeSeries\n+\n+# Reproduce the issue\n+time = Time(np.arange(100000, 100003), format='jd')\n+ts = TimeSeries(time=time, data={\"flux\": [99.9, 99.8, 99.7]})\n+ts._required_columns = [\"time\", \"flux\"]\n+\n+print(\"Before removing flux column:\")\n+print(\"Columns:\", ts.colnames)\n+print(\"Required columns:\", ts._required_columns)\n+\n+try:\n+    ts.remove_column(\"flux\")\n+except ValueError as e:\n+    print(\"\\nException raised:\")\n+    print(f\"ValueError: {e}\")\n+    print(\"\\nThis is misleading! It should mention that 'flux' is a required column.\")\ndiff --git a/test_scenarios.py b/test_scenarios.py\nnew file mode 100644\nindex 0000000000..2effeb04cf\n--- /dev/null\n+++ b/test_scenarios.py\n@@ -0,0 +1,55 @@\n+import numpy as np\n+from astropy.time import Time\n+from astropy.timeseries import TimeSeries\n+from astropy.table import Column\n+\n+INPUT_TIME = Time(['2016-03-22T12:30:31', '2016-03-22T12:30:32', '2016-03-22T12:30:33'])\n+\n+print(\"Creating initial TimeSeries...\")\n+ts = TimeSeries(time=INPUT_TIME,\n+                data=[[10, 2, 3], [4, 5, 6]],\n+                names=['a', 'b'])\n+print(f\"Initial columns: {ts.colnames}\")\n+\n+print(\"\\n1. Adding column at index 0 (before 'time'):\")\n+try:\n+    ts_copy = ts.copy()\n+    ts_copy.add_column(Column([3, 4, 5], name='c'), index=0)\n+except ValueError as e:\n+    print(f\"   Error: {e}\")\n+\n+print(\"\\n2. Adding multiple columns at indexes 0,1:\")\n+try:\n+    ts_copy = ts.copy()\n+    ts_copy.add_columns([Column([3, 4, 5], name='d'),\n+                         Column([3, 4, 5], name='e')], indexes=[0, 1])\n+except ValueError as e:\n+    print(f\"   Error: {e}\")\n+\n+print(\"\\n3. Keeping only columns 'a' and 'b' (removing 'time'):\")\n+try:\n+    ts_copy = ts.copy()\n+    ts_copy.keep_columns(['a', 'b'])\n+except ValueError as e:\n+    print(f\"   Error: {e}\")\n+\n+print(\"\\n4. Removing 'time' column:\")\n+try:\n+    ts_copy = ts.copy()\n+    ts_copy.remove_column('time')\n+except ValueError as e:\n+    print(f\"   Error: {e}\")\n+\n+print(\"\\n5. Removing both 'time' and 'a':\")\n+try:\n+    ts_copy = ts.copy()\n+    ts_copy.remove_columns(['time', 'a'])\n+except ValueError as e:\n+    print(f\"   Error: {e}\")\n+\n+print(\"\\n6. Renaming 'time' to 'banana':\")\n+try:\n+    ts_copy = ts.copy()\n+    ts_copy.rename_column('time', 'banana')\n+except ValueError as e:\n+    print(f\"   Error: {e}\")\n", "gold_standard_diff": "From dbc77e57c4c0adc7c86eaceeb22e7f0ac8621569 Mon Sep 17 00:00:00 2001\nFrom: orionlee <orionlee@yahoo.com>\nDate: Thu, 31 Mar 2022 16:17:49 -0700\nSubject: [PATCH] clearer ts required column exception msg #13009\n\n---\n astropy/timeseries/core.py               | 14 +++++++++++---\n astropy/timeseries/tests/test_sampled.py |  8 ++++++++\n 2 files changed, 19 insertions(+), 3 deletions(-)\n\ndiff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex c279f35f87f3..9bf81a96c313 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -55,6 +55,13 @@ class BaseTimeSeries(QTable):\n     _required_columns_relax = False\n \n     def _check_required_columns(self):\n+        def as_scalar_or_list_str(obj):\n+            if not hasattr(obj, \"__len__\"):\n+                return f\"'{obj}'\"\n+            elif len(obj) == 1:\n+                return f\"'{obj[0]}'\"\n+            else:\n+                return str(obj)\n \n         if not self._required_columns_enabled:\n             return\n@@ -76,9 +83,10 @@ def _check_required_columns(self):\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n \n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                raise ValueError(\"{} object is invalid - expected {} \"\n+                                 \"as the first column{} but found {}\"\n+                                 .format(self.__class__.__name__, as_scalar_or_list_str(required_columns),\n+                                            plural, as_scalar_or_list_str(self.colnames[:len(required_columns)])))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\ndiff --git a/astropy/timeseries/tests/test_sampled.py b/astropy/timeseries/tests/test_sampled.py\nindex bcc06d929ee6..241d7117eaf3 100644\n--- a/astropy/timeseries/tests/test_sampled.py\n+++ b/astropy/timeseries/tests/test_sampled.py\n@@ -395,6 +395,14 @@ def test_required_columns():\n     assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n                                  \"'time' as the first column but found 'banana'\")\n \n+    # https://github.com/astropy/astropy/issues/13009\n+    ts_2cols_required = ts.copy()\n+    ts_2cols_required._required_columns = ['time', 'a']\n+    with pytest.raises(ValueError) as exc:\n+        ts_2cols_required.remove_column('a')\n+    assert exc.value.args[0] == (\"TimeSeries object is invalid - expected \"\n+                                 \"['time', 'a'] as the first columns but found ['time', 'b']\")\n+\n \n @pytest.mark.parametrize('cls', [BoxLeastSquares, LombScargle])\n def test_periodogram(cls):\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/13033"}