diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py
index 9df4b7aadb..5b742af46a 100644
--- a/django/contrib/admin/templatetags/admin_modify.py
+++ b/django/contrib/admin/templatetags/admin_modify.py
@@ -100,6 +100,7 @@ def submit_row(context):
                 and context.get("show_delete", True)
             ),
             "show_save_as_new": not is_popup
+            and has_add_permission
             and has_change_permission
             and change
             and save_as,
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..4e8a31d6bb
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,61 @@
+"""Test to verify the save_as_new permission fix"""
+from django.template import Context
+from django.contrib.admin.templatetags.admin_modify import submit_row
+
+def test_scenario(description, has_add, has_change):
+    print(f"\n{description}")
+    print("-" * len(description))
+    
+    context = {
+        'add': False,  # Not in add mode
+        'change': True,  # In change mode
+        'is_popup': False,
+        'save_as': True,  # save_as is enabled in the ModelAdmin
+        'show_save': True,
+        'show_save_and_add_another': True,
+        'show_save_and_continue': True,
+        'has_add_permission': has_add,
+        'has_change_permission': has_change,
+        'has_view_permission': True,
+        'has_editable_inline_admin_formsets': False,
+        'has_delete_permission': False,
+        'show_delete': True,
+    }
+    
+    result = submit_row(context)
+    
+    print(f"has_add_permission: {has_add}")
+    print(f"has_change_permission: {has_change}")
+    print(f"show_save_as_new: {result['show_save_as_new']}")
+    
+    return result['show_save_as_new']
+
+print("Testing save_as_new permission fix")
+print("=" * 40)
+
+# Test 1: User has change permission but NOT add permission
+# Expected: show_save_as_new should be False
+result1 = test_scenario("Test 1: User has CHANGE but not ADD permission", False, True)
+assert result1 == False, "FAIL: Save as new should NOT be shown without add permission"
+print("✓ PASS: Save as new is correctly hidden")
+
+# Test 2: User has both change and add permissions
+# Expected: show_save_as_new should be True
+result2 = test_scenario("Test 2: User has both CHANGE and ADD permissions", True, True)
+assert result2 == True, "FAIL: Save as new should be shown with both permissions"
+print("✓ PASS: Save as new is correctly shown")
+
+# Test 3: User has add permission but NOT change permission
+# Expected: show_save_as_new should be False (requires both)
+result3 = test_scenario("Test 3: User has ADD but not CHANGE permission", True, False)
+assert result3 == False, "FAIL: Save as new should NOT be shown without change permission"
+print("✓ PASS: Save as new is correctly hidden")
+
+# Test 4: User has neither permission
+# Expected: show_save_as_new should be False
+result4 = test_scenario("Test 4: User has neither permission", False, False)
+assert result4 == False, "FAIL: Save as new should NOT be shown without any permissions"
+print("✓ PASS: Save as new is correctly hidden")
+
+print("\n" + "=" * 40)
+print("All tests passed! The fix correctly requires BOTH add and change permissions for 'Save as new'.")
diff --git a/test_issue.py b/test_issue.py
new file mode 100644
index 0000000000..88fee05766
--- /dev/null
+++ b/test_issue.py
@@ -0,0 +1,30 @@
+"""Simple test to demonstrate the save_as_new permission issue"""
+from django.template import Context
+from django.contrib.admin.templatetags.admin_modify import submit_row
+
+# Create a context similar to what would be passed to the template
+context = {
+    'add': False,  # Not in add mode
+    'change': True,  # In change mode
+    'is_popup': False,
+    'save_as': True,  # save_as is enabled in the ModelAdmin
+    'show_save': True,
+    'show_save_and_add_another': True,
+    'show_save_and_continue': True,
+    'has_add_permission': False,  # User does NOT have add permission
+    'has_change_permission': True,  # User has change permission
+    'has_view_permission': True,
+    'has_editable_inline_admin_formsets': False,
+    'has_delete_permission': False,
+    'show_delete': True,
+}
+
+# Call submit_row to get the updated context
+result = submit_row(context)
+
+# Check if show_save_as_new is True (it should be False since has_add_permission is False)
+print(f"has_add_permission: {context['has_add_permission']}")
+print(f"has_change_permission: {context['has_change_permission']}")
+print(f"show_save_as_new: {result['show_save_as_new']}")
+print(f"\nISSUE: show_save_as_new is {result['show_save_as_new']} even though has_add_permission is False!")
+print("The 'Save as new' button will be shown to users who don't have permission to add new objects.")
diff --git a/test_regression_simple.py b/test_regression_simple.py
new file mode 100644
index 0000000000..cbcbffd6ac
--- /dev/null
+++ b/test_regression_simple.py
@@ -0,0 +1,123 @@
+"""
+Simple regression test for the save_as_new permission issue.
+This test verifies that the "Save as new" button is only shown
+when the user has BOTH add and change permissions.
+"""
+from django.contrib.admin.templatetags.admin_modify import submit_row
+
+
+def test_save_as_new_requires_add_permission():
+    """
+    The 'Save as new' button should only be shown when user has
+    both add and change permissions, not just change permission.
+    """
+    print("Testing save_as_new permission fix...")
+    
+    # Base context that's common to all test cases
+    base_context = {
+        'add': False,  # Not in add mode
+        'change': True,  # In change mode
+        'is_popup': False,
+        'save_as': True,  # save_as is enabled in the ModelAdmin
+        'show_save': True,
+        'show_save_and_add_another': True,
+        'show_save_and_continue': True,
+        'has_view_permission': True,
+        'has_editable_inline_admin_formsets': False,
+        'has_delete_permission': False,
+        'show_delete': True,
+    }
+    
+    # Test case 1: User has change permission but NOT add permission
+    # Expected: show_save_as_new should be False
+    context1 = base_context.copy()
+    context1.update({
+        'has_add_permission': False,
+        'has_change_permission': True,
+    })
+    result1 = submit_row(context1)
+    assert not result1['show_save_as_new'], "Save as new should NOT be shown without add permission"
+    print("✓ Test 1 passed: Save as new hidden without add permission")
+    
+    # Test case 2: User has both change and add permissions
+    # Expected: show_save_as_new should be True
+    context2 = base_context.copy()
+    context2.update({
+        'has_add_permission': True,
+        'has_change_permission': True,
+    })
+    result2 = submit_row(context2)
+    assert result2['show_save_as_new'], "Save as new should be shown with both permissions"
+    print("✓ Test 2 passed: Save as new shown with both permissions")
+    
+    # Test case 3: User has add permission but NOT change permission
+    # Expected: show_save_as_new should be False
+    context3 = base_context.copy()
+    context3.update({
+        'has_add_permission': True,
+        'has_change_permission': False,
+    })
+    result3 = submit_row(context3)
+    assert not result3['show_save_as_new'], "Save as new should NOT be shown without change permission"
+    print("✓ Test 3 passed: Save as new hidden without change permission")
+    
+    # Test case 4: User has neither permission
+    # Expected: show_save_as_new should be False
+    context4 = base_context.copy()
+    context4.update({
+        'has_add_permission': False,
+        'has_change_permission': False,
+    })
+    result4 = submit_row(context4)
+    assert not result4['show_save_as_new'], "Save as new should NOT be shown without any permissions"
+    print("✓ Test 4 passed: Save as new hidden without any permissions")
+    
+    print("\nAll permission tests passed!")
+
+
+def test_save_as_new_edge_cases():
+    """Test edge cases for save_as_new button visibility."""
+    print("\nTesting edge cases...")
+    
+    # Test: Save as new should not be shown in popup windows
+    context = {
+        'add': False,
+        'change': True,
+        'is_popup': True,  # This is a popup
+        'save_as': True,
+        'show_save': True,
+        'show_save_and_add_another': True,
+        'show_save_and_continue': True,
+        'has_add_permission': True,  # Has add permission
+        'has_change_permission': True,  # Has change permission
+        'has_view_permission': True,
+        'has_editable_inline_admin_formsets': False,
+        'has_delete_permission': False,
+        'show_delete': True,
+    }
+    result = submit_row(context)
+    assert not result['show_save_as_new'], "Save as new should NOT be shown in popup windows"
+    print("✓ Test passed: Save as new hidden in popup windows")
+    
+    # Test: Save as new should not be shown when save_as is False
+    context['is_popup'] = False
+    context['save_as'] = False  # save_as is disabled in ModelAdmin
+    result = submit_row(context)
+    assert not result['show_save_as_new'], "Save as new should NOT be shown when save_as is disabled"
+    print("✓ Test passed: Save as new hidden when save_as is disabled")
+    
+    # Test: Save as new should not be shown in add mode
+    context['save_as'] = True
+    context['add'] = True
+    context['change'] = False
+    result = submit_row(context)
+    assert not result['show_save_as_new'], "Save as new should NOT be shown in add mode"
+    print("✓ Test passed: Save as new hidden in add mode")
+    
+    print("\nAll edge case tests passed!")
+
+
+if __name__ == '__main__':
+    test_save_as_new_requires_add_permission()
+    test_save_as_new_edge_cases()
+    print("\n✅ All tests passed! The fix is working correctly.")
diff --git a/test_save_as_new_permission.py b/test_save_as_new_permission.py
new file mode 100644
index 0000000000..fce1e131bb
--- /dev/null
+++ b/test_save_as_new_permission.py
@@ -0,0 +1,62 @@
+"""Test to demonstrate the save_as_new permission issue"""
+import os
+import django
+from django.test import TestCase, Client
+from django.contrib.auth.models import User, Permission
+from django.contrib.contenttypes.models import ContentType
+from django.db import models
+from django.contrib import admin
+from django.urls import reverse
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Register with admin
+@admin.register(TestModel)
+class TestModelAdmin(admin.ModelAdmin):
+    save_as = True  # Enable save_as functionality
+
+class SaveAsNewPermissionTest(TestCase):
+    def setUp(self):
+        # Create users
+        self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')
+        self.user_with_change_only = User.objects.create_user('change_only', 'change@test.com', 'password')
+        
+        # Give user only change permission (not add)
+        content_type = ContentType.objects.get_for_model(TestModel)
+        change_permission = Permission.objects.get(codename='change_testmodel', content_type=content_type)
+        self.user_with_change_only.user_permissions.add(change_permission)
+        
+        # Create a test object
+        self.test_obj = TestModel.objects.create(name='Test Object')
+        
+        self.client = Client()
+    
+    def test_save_as_new_button_visibility(self):
+        """Test that save_as_new button is not shown when user lacks add permission"""
+        # Login as user with only change permission
+        self.client.login(username='change_only', password='password')
+        
+        # Get the change form
+        url = reverse('admin:testapp_testmodel_change', args=[self.test_obj.pk])
+        response = self.client.get(url)
+        
+        # Check if save_as_new button is in the response
+        # Currently, this will FAIL because the button is shown even without add permission
+        self.assertNotIn('_saveasnew', response.content.decode())
+        self.assertNotIn('Save as new', response.content.decode())
+
+if __name__ == '__main__':
+    # Run the test
+    test = SaveAsNewPermissionTest()
+    test.setUp()
+    test.test_save_as_new_button_visibility()
+    print("Test completed!")
diff --git a/test_save_as_new_permission_regression.py b/test_save_as_new_permission_regression.py
new file mode 100644
index 0000000000..73cecae684
--- /dev/null
+++ b/test_save_as_new_permission_regression.py
@@ -0,0 +1,133 @@
+"""
+Regression test for the save_as_new permission issue.
+This test verifies that the "Save as new" button is only shown
+when the user has BOTH add and change permissions.
+"""
+from django.contrib.admin.templatetags.admin_modify import submit_row
+from django.test import TestCase
+
+
+class SaveAsNewPermissionTest(TestCase):
+    def test_save_as_new_requires_add_permission(self):
+        """
+        The 'Save as new' button should only be shown when user has
+        both add and change permissions, not just change permission.
+        """
+        # Base context that's common to all test cases
+        base_context = {
+            'add': False,  # Not in add mode
+            'change': True,  # In change mode
+            'is_popup': False,
+            'save_as': True,  # save_as is enabled in the ModelAdmin
+            'show_save': True,
+            'show_save_and_add_another': True,
+            'show_save_and_continue': True,
+            'has_view_permission': True,
+            'has_editable_inline_admin_formsets': False,
+            'has_delete_permission': False,
+            'show_delete': True,
+        }
+        
+        # Test case 1: User has change permission but NOT add permission
+        # Expected: show_save_as_new should be False
+        context1 = base_context.copy()
+        context1.update({
+            'has_add_permission': False,
+            'has_change_permission': True,
+        })
+        result1 = submit_row(context1)
+        self.assertFalse(
+            result1['show_save_as_new'],
+            "Save as new should NOT be shown without add permission"
+        )
+        
+        # Test case 2: User has both change and add permissions
+        # Expected: show_save_as_new should be True
+        context2 = base_context.copy()
+        context2.update({
+            'has_add_permission': True,
+            'has_change_permission': True,
+        })
+        result2 = submit_row(context2)
+        self.assertTrue(
+            result2['show_save_as_new'],
+            "Save as new should be shown with both permissions"
+        )
+        
+        # Test case 3: User has add permission but NOT change permission
+        # Expected: show_save_as_new should be False
+        context3 = base_context.copy()
+        context3.update({
+            'has_add_permission': True,
+            'has_change_permission': False,
+        })
+        result3 = submit_row(context3)
+        self.assertFalse(
+            result3['show_save_as_new'],
+            "Save as new should NOT be shown without change permission"
+        )
+        
+        # Test case 4: User has neither permission
+        # Expected: show_save_as_new should be False
+        context4 = base_context.copy()
+        context4.update({
+            'has_add_permission': False,
+            'has_change_permission': False,
+        })
+        result4 = submit_row(context4)
+        self.assertFalse(
+            result4['show_save_as_new'],
+            "Save as new should NOT be shown without any permissions"
+        )
+        
+    def test_save_as_new_not_shown_in_popup(self):
+        """Save as new should not be shown in popup windows regardless of permissions."""
+        context = {
+            'add': False,
+            'change': True,
+            'is_popup': True,  # This is a popup
+            'save_as': True,
+            'show_save': True,
+            'show_save_and_add_another': True,
+            'show_save_and_continue': True,
+            'has_add_permission': True,  # Has add permission
+            'has_change_permission': True,  # Has change permission
+            'has_view_permission': True,
+            'has_editable_inline_admin_formsets': False,
+            'has_delete_permission': False,
+            'show_delete': True,
+        }
+        result = submit_row(context)
+        self.assertFalse(
+            result['show_save_as_new'],
+            "Save as new should NOT be shown in popup windows"
+        )
+        
+    def test_save_as_new_not_shown_when_save_as_disabled(self):
+        """Save as new should not be shown when save_as is False in ModelAdmin."""
+        context = {
+            'add': False,
+            'change': True,
+            'is_popup': False,
+            'save_as': False,  # save_as is disabled in ModelAdmin
+            'show_save': True,
+            'show_save_and_add_another': True,
+            'show_save_and_continue': True,
+            'has_add_permission': True,  # Has add permission
+            'has_change_permission': True,  # Has change permission
+            'has_view_permission': True,
+            'has_editable_inline_admin_formsets': False,
+            'has_delete_permission': False,
+            'show_delete': True,
+        }
+        result = submit_row(context)
+        self.assertFalse(
+            result['show_save_as_new'],
+            "Save as new should NOT be shown when save_as is disabled"
+        )
+
+
+if __name__ == '__main__':
+    # Run a simple test
+    import unittest
+    unittest.main()
