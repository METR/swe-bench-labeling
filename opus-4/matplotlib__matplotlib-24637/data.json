{"instance_id": "matplotlib__matplotlib-24637", "score": "C", "diff": "diff --git a/example.svg b/example.svg\nnew file mode 100644\nindex 0000000000..71977b7da8\nBinary files /dev/null and b/example.svg differ\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd078..1bef9167b0 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1452,6 +1452,7 @@ or callable, default: value of *xycoords*\n             self._renderer = renderer\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n+        renderer.open_group('annotationbbox', self.get_gid())\n         self.update_positions(renderer)\n         if self.arrow_patch is not None:\n             if self.arrow_patch.figure is None and self.figure is not None:\n@@ -1460,6 +1461,7 @@ or callable, default: value of *xycoords*\n         self.patch.draw(renderer)\n         self.offsetbox.draw(renderer)\n         self.stale = False\n+        renderer.close_group('annotationbbox')\n \n \n class DraggableBase:\ndiff --git a/test_annotationbbox_gid.py b/test_annotationbbox_gid.py\nnew file mode 100644\nindex 0000000000..b4facea2a5\n--- /dev/null\n+++ b/test_annotationbbox_gid.py\n@@ -0,0 +1,37 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import numpy as np\n+\n+fig, ax = plt.subplots()\n+\n+# Create a simple image instead of loading from file\n+arr_img = np.random.rand(100, 100, 3)\n+\n+xy = [0.3, 0.55]\n+\n+imagebox = OffsetImage(arr_img, zoom=0.1)\n+imagebox.image.axes = ax\n+\n+ab = AnnotationBbox(imagebox, xy,\n+                    xybox=(120., -80.),\n+                    xycoords='data',\n+                    boxcoords=\"offset points\",\n+                    pad=0.5,\n+                    arrowprops=dict(\n+                        arrowstyle=\"->\",\n+                        connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                    )\n+ab.set_gid('My_label')\n+ax.add_artist(ab)\n+\n+print(f\"GID = {ab.get_gid()}\")\n+\n+fig.savefig(\"example.svg\", format=\"svg\")\n+\n+# Check if the gid is in the SVG file\n+with open(\"example.svg\", \"r\") as f:\n+    svg_content = f.read()\n+    if 'My_label' in svg_content:\n+        print(\"SUCCESS: GID found in SVG!\")\n+    else:\n+        print(\"FAIL: GID not found in SVG!\")\ndiff --git a/test_annotationbbox_gid_proper.py b/test_annotationbbox_gid_proper.py\nnew file mode 100644\nindex 0000000000..3009cbfef1\n--- /dev/null\n+++ b/test_annotationbbox_gid_proper.py\n@@ -0,0 +1,36 @@\n+\"\"\"\n+Test to be added to test_offsetbox.py\n+\"\"\"\n+\n+def test_annotationbbox_gid():\n+    \"\"\"Test that AnnotationBbox correctly passes GID to SVG renderer.\"\"\"\n+    from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    \n+    fig, ax = plt.subplots()\n+    \n+    # Create a simple image\n+    arr_img = np.random.rand(10, 10, 3)\n+    \n+    imagebox = OffsetImage(arr_img, zoom=0.5)\n+    ab = AnnotationBbox(imagebox, (0.5, 0.5),\n+                        xybox=(0.8, 0.8),\n+                        xycoords='data',\n+                        boxcoords=\"data\",\n+                        pad=0.5,\n+                        arrowprops=dict(arrowstyle=\"->\"))\n+    \n+    # Set a GID\n+    ab.set_gid('test_annotation_gid')\n+    ax.add_artist(ab)\n+    \n+    # Save to SVG\n+    from io import BytesIO\n+    buf = BytesIO()\n+    fig.savefig(buf, format=\"svg\")\n+    buf.seek(0)\n+    svg_content = buf.read().decode('utf-8')\n+    \n+    # Check if GID is in the output\n+    assert 'test_annotation_gid' in svg_content\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..22be30ee17\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,79 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox, TextArea, DrawingArea)\n+import numpy as np\n+\n+# Test 1: Basic AnnotationBbox with gid\n+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n+\n+# Create a simple image\n+arr_img = np.random.rand(50, 50, 3)\n+\n+# Test with image\n+imagebox = OffsetImage(arr_img, zoom=0.2)\n+ab1 = AnnotationBbox(imagebox, (0.5, 0.5),\n+                    xybox=(0.8, 0.8),\n+                    xycoords='data',\n+                    boxcoords=\"data\",\n+                    pad=0.5,\n+                    arrowprops=dict(arrowstyle=\"->\"))\n+ab1.set_gid('image_annotation')\n+ax1.add_artist(ab1)\n+ax1.set_title(\"Image Annotation with GID\")\n+\n+# Test with text\n+textbox = TextArea(\"Hello World!\")\n+ab2 = AnnotationBbox(textbox, (0.5, 0.5),\n+                    xybox=(0.2, 0.8),\n+                    xycoords='data',\n+                    boxcoords=\"data\",\n+                    pad=0.5,\n+                    arrowprops=dict(arrowstyle=\"->\"))\n+ab2.set_gid('text_annotation')\n+ax2.add_artist(ab2)\n+ax2.set_title(\"Text Annotation with GID\")\n+\n+# Test without gid (should not break)\n+ab3 = AnnotationBbox(TextArea(\"No GID\"), (0.8, 0.2),\n+                    xybox=(0.6, 0.2),\n+                    xycoords='data',\n+                    boxcoords=\"data\")\n+ax2.add_artist(ab3)\n+\n+# Save to SVG\n+fig.savefig(\"test_comprehensive.svg\", format=\"svg\")\n+\n+# Check results\n+with open(\"test_comprehensive.svg\", \"r\") as f:\n+    svg_content = f.read()\n+    \n+print(\"Test Results:\")\n+print(\"=\" * 40)\n+\n+# Test 1: Check if gids are present\n+if 'image_annotation' in svg_content:\n+    print(\"\u2713 Image annotation GID found\")\n+else:\n+    print(\"\u2717 Image annotation GID NOT found\")\n+    \n+if 'text_annotation' in svg_content:\n+    print(\"\u2713 Text annotation GID found\")\n+else:\n+    print(\"\u2717 Text annotation GID NOT found\")\n+\n+# Test 2: Make sure we didn't break rendering\n+if '<g id=\"annotationbbox\">' in svg_content:\n+    print(\"\u2713 Annotations without GID render correctly\")\n+else:\n+    print(\"\u2717 Warning: Might have issues with annotations without GID\")\n+\n+# Test 3: Check structure\n+import re\n+pattern = r'<g id=\"(image_annotation|text_annotation)\">'\n+matches = re.findall(pattern, svg_content)\n+if len(matches) == 2:\n+    print(f\"\u2713 Found {len(matches)} GID annotations as expected\")\n+else:\n+    print(f\"\u2717 Expected 2 GID annotations, found {len(matches)}\")\n+\n+print(\"=\" * 40)\n+print(\"All tests completed!\")\ndiff --git a/test_comprehensive.svg b/test_comprehensive.svg\nnew file mode 100644\nindex 0000000000..0f0a07c1cf\nBinary files /dev/null and b/test_comprehensive.svg differ\ndiff --git a/test_gid_fix.py b/test_gid_fix.py\nnew file mode 100644\nindex 0000000000..1cd790de00\n--- /dev/null\n+++ b/test_gid_fix.py\n@@ -0,0 +1,42 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+import numpy as np\n+import os\n+\n+def test_annotationbbox_gid():\n+    \"\"\"Test that AnnotationBbox correctly passes GID to renderer\"\"\"\n+    fig, ax = plt.subplots()\n+    \n+    # Create a simple image\n+    arr_img = np.random.rand(10, 10, 3)\n+    \n+    imagebox = OffsetImage(arr_img, zoom=0.5)\n+    ab = AnnotationBbox(imagebox, (0.5, 0.5),\n+                        xybox=(0.8, 0.8),\n+                        xycoords='data',\n+                        boxcoords=\"data\",\n+                        pad=0.5,\n+                        arrowprops=dict(arrowstyle=\"->\"))\n+    \n+    # Set a GID\n+    ab.set_gid('test_gid_123')\n+    ax.add_artist(ab)\n+    \n+    # Save to SVG\n+    svg_file = \"test_gid_output.svg\"\n+    fig.savefig(svg_file, format=\"svg\")\n+    \n+    # Check if GID is in the output\n+    with open(svg_file, \"r\") as f:\n+        svg_content = f.read()\n+    \n+    assert 'test_gid_123' in svg_content, \"GID not found in SVG output\"\n+    \n+    # Clean up\n+    os.remove(svg_file)\n+    plt.close(fig)\n+    \n+    print(\"\u2713 Test passed: AnnotationBbox GID is correctly passed to SVG renderer\")\n+\n+if __name__ == \"__main__\":\n+    test_annotationbbox_gid()\ndiff --git a/test_no_gid.py b/test_no_gid.py\nnew file mode 100644\nindex 0000000000..abb23f4c9c\n--- /dev/null\n+++ b/test_no_gid.py\n@@ -0,0 +1,45 @@\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+import numpy as np\n+import os\n+\n+def test_annotationbbox_no_gid():\n+    \"\"\"Test that AnnotationBbox works correctly without GID\"\"\"\n+    fig, ax = plt.subplots()\n+    \n+    # Create a simple image\n+    arr_img = np.random.rand(10, 10, 3)\n+    \n+    imagebox = OffsetImage(arr_img, zoom=0.5)\n+    ab = AnnotationBbox(imagebox, (0.5, 0.5),\n+                        xybox=(0.8, 0.8),\n+                        xycoords='data',\n+                        boxcoords=\"data\",\n+                        pad=0.5,\n+                        arrowprops=dict(arrowstyle=\"->\"))\n+    \n+    # Don't set a GID - test default behavior\n+    ax.add_artist(ab)\n+    \n+    # Save to SVG\n+    svg_file = \"test_no_gid_output.svg\"\n+    fig.savefig(svg_file, format=\"svg\")\n+    \n+    # Check if file was created successfully\n+    assert os.path.exists(svg_file), \"SVG file was not created\"\n+    \n+    # Check if it contains the default id pattern\n+    with open(svg_file, \"r\") as f:\n+        svg_content = f.read()\n+    \n+    # Should contain something like id=\"annotationbbox_1\"\n+    assert 'id=\"annotationbbox_' in svg_content, \"Default ID pattern not found\"\n+    \n+    # Clean up\n+    os.remove(svg_file)\n+    plt.close(fig)\n+    \n+    print(\"\u2713 Test passed: AnnotationBbox works correctly without explicit GID\")\n+\n+if __name__ == \"__main__\":\n+    test_annotationbbox_no_gid()\n", "gold_standard_diff": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex db64888ff5f6..8a9db63ccca7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1446,6 +1446,7 @@ def draw(self, renderer):\n             self._renderer = renderer\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n+        renderer.open_group(self.__class__.__name__, gid=self.get_gid())\n         self.update_positions(renderer)\n         if self.arrow_patch is not None:\n             if self.arrow_patch.figure is None and self.figure is not None:\n@@ -1453,6 +1454,7 @@ def draw(self, renderer):\n             self.arrow_patch.draw(renderer)\n         self.patch.draw(renderer)\n         self.offsetbox.draw(renderer)\n+        renderer.close_group(self.__class__.__name__)\n         self.stale = False\n \n \ndiff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 680efd67379b..c0fe8549c2f3 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -15,6 +15,7 @@\n from matplotlib.testing.decorators import check_figures_equal, image_comparison\n from matplotlib.testing._markers import needs_usetex\n from matplotlib import font_manager as fm\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n \n \n def test_visibility():\n@@ -588,3 +589,34 @@ def test_svg_font_string(font_str, include_generic):\n \n         assert font_info == f\"{size}px {font_str}\"\n     assert text_count == len(ax.texts)\n+\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/24637"}