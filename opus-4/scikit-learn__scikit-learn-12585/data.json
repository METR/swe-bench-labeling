{"instance_id": "scikit-learn__scikit-learn-12585", "score": "C", "diff": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 56ffb18bf..8f841850b 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -48,7 +48,7 @@ def clone(estimator, safe=True):\n     # XXX: not handling dictionaries\n     if estimator_type in (list, tuple, set, frozenset):\n         return estimator_type([clone(e, safe=safe) for e in estimator])\n-    elif not hasattr(estimator, 'get_params'):\n+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\n         if not safe:\n             return copy.deepcopy(estimator)\n         else:\n@@ -180,7 +180,7 @@ class BaseEstimator(object):\n         out = dict()\n         for key in self._get_param_names():\n             value = getattr(self, key, None)\n-            if deep and hasattr(value, 'get_params'):\n+            if deep and hasattr(value, 'get_params') and not isinstance(value, type):\n                 deep_items = value.get_params().items()\n                 out.update((key + '__' + k, val) for k, val in deep_items)\n             out[key] = value\n@@ -219,7 +219,8 @@ class BaseEstimator(object):\n                 valid_params[key] = value\n \n         for key, sub_params in nested_params.items():\n-            valid_params[key].set_params(**sub_params)\n+            if not isinstance(valid_params[key], type):\n+                valid_params[key].set_params(**sub_params)\n \n         return self\n \ndiff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex ebcb38925..197c8caba 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,31 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types (not instances)\n+    \n+    # Import a minimal estimator for testing\n+    from sklearn.preprocessing import StandardScaler\n+    \n+    # Test with estimator type as parameter value\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf2 = clone(clf)\n+    assert clf.empty is clf2.empty\n+    assert clf.empty is StandardScaler\n+    \n+    # Test with actual sklearn estimator with class parameter\n+    scaler = StandardScaler(with_mean=StandardScaler)\n+    scaler2 = clone(scaler)\n+    assert scaler.get_params()['with_mean'] is StandardScaler\n+    assert scaler2.get_params()['with_mean'] is StandardScaler\n+    \n+    # Test that regular instances still work\n+    scaler3 = StandardScaler(with_mean=True)\n+    scaler4 = clone(scaler3)\n+    assert scaler3.get_params()['with_mean'] == True\n+    assert scaler4.get_params()['with_mean'] == True\n+\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\ndiff --git a/test_clone_issue.py b/test_clone_issue.py\nnew file mode 100644\nindex 000000000..995bb37ef\n--- /dev/null\n+++ b/test_clone_issue.py\n@@ -0,0 +1,24 @@\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+\n+# Test case from the issue\n+try:\n+    result = clone(StandardScaler(with_mean=StandardScaler))\n+    print(\"Test 1 PASSED: No error when cloning estimator with class parameter\")\n+except TypeError as e:\n+    print(f\"Test 1 FAILED: {e}\")\n+\n+# Additional test cases\n+# Test with a regular instance (should work)\n+try:\n+    result = clone(StandardScaler())\n+    print(\"Test 2 PASSED: Regular cloning works\")\n+except Exception as e:\n+    print(f\"Test 2 FAILED: {e}\")\n+\n+# Test with nested class parameters\n+try:\n+    result = clone(StandardScaler(with_mean=StandardScaler, with_std=StandardScaler))\n+    print(\"Test 3 PASSED: Multiple class parameters work\")\n+except TypeError as e:\n+    print(f\"Test 3 FAILED: {e}\")\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..e69de29bb\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..e69de29bb\ndiff --git a/test_type_check.py b/test_type_check.py\nnew file mode 100644\nindex 000000000..9a369dc1a\n--- /dev/null\n+++ b/test_type_check.py\n@@ -0,0 +1,12 @@\n+from sklearn.preprocessing import StandardScaler\n+\n+# Check what StandardScaler is\n+print(f\"StandardScaler type: {type(StandardScaler)}\")\n+print(f\"isinstance(StandardScaler, type): {isinstance(StandardScaler, type)}\")\n+print(f\"hasattr(StandardScaler, 'get_params'): {hasattr(StandardScaler, 'get_params')}\")\n+\n+# Check instance\n+instance = StandardScaler()\n+print(f\"\\nStandardScaler instance type: {type(instance)}\")\n+print(f\"isinstance(instance, type): {isinstance(instance, type)}\")\n+print(f\"hasattr(instance, 'get_params'): {hasattr(instance, 'get_params')}\")\n", "gold_standard_diff": "From d058e70bc3d818b03cb15485baa864c9e1a7bcf8 Mon Sep 17 00:00:00 2001\nFrom: phausamann <peter.hausamann@tum.de>\nDate: Wed, 14 Nov 2018 14:05:20 +0100\nSubject: [PATCH 1/2] Fix clone failing for estimator types Fixes #12521\n\n---\n sklearn/base.py            | 2 +-\n sklearn/tests/test_base.py | 8 ++++++++\n 2 files changed, 9 insertions(+), 1 deletion(-)\n\ndiff --git a/sklearn/base.py b/sklearn/base.py\nindex 56ffb18bf8b69..34998270cea88 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -48,7 +48,7 @@ def clone(estimator, safe=True):\n     # XXX: not handling dictionaries\n     if estimator_type in (list, tuple, set, frozenset):\n         return estimator_type([clone(e, safe=safe) for e in estimator])\n-    elif not hasattr(estimator, 'get_params'):\n+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\n         if not safe:\n             return copy.deepcopy(estimator)\n         else:\ndiff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex ebcb389255cd3..435f912acd764 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,14 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n\nFrom 24865b92cbd1a5c53315a079d5626c57c272735b Mon Sep 17 00:00:00 2001\nFrom: phausamann <peter.hausamann@tum.de>\nDate: Wed, 14 Nov 2018 15:12:11 +0100\nSubject: [PATCH 2/2] PEP8 compliance\n\n---\n sklearn/tests/test_base.py | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 435f912acd764..5fc20ca85f5b7 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -168,7 +168,8 @@ def test_clone_sparse_matrices():\n \n \n def test_clone_estimator_types():\n-    # Check that clone works for parameters that are types rather than instances\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n     clf = MyEstimator(empty=MyEstimator)\n     clf2 = clone(clf)\n \n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/12585"}