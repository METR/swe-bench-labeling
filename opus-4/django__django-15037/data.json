{"instance_id": "django__django-15037", "score": "C", "diff": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477..7b01a1198c 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -128,6 +128,14 @@ class Command(BaseCommand):\n                             field_type = '%s(%s' % (rel_type, rel_to)\n                         else:\n                             field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                        \n+                        # Check if the foreign key references a non-primary key field\n+                        ref_field_name = relations[column_name][0]\n+                        ref_table_name = relations[column_name][1]\n+                        ref_pk_column = connection.introspection.get_primary_key_column(cursor, ref_table_name)\n+                        # Add to_field if the FK references a non-primary key field\n+                        if ref_field_name and ref_field_name != ref_pk_column:\n+                            extra_params['to_field'] = ref_field_name\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..d1ed541fcf\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,77 @@\n+import os\n+import django\n+from django.core.management import call_command\n+from django.db import connection\n+from io import StringIO\n+\n+# Setup Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n+from django.conf import settings\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+django.setup()\n+\n+def test_fk_to_non_pk_field():\n+    \"\"\"Test that foreign keys to non-primary key fields include to_field parameter\"\"\"\n+    \n+    with connection.cursor() as cursor:\n+        # Test case 1: FK to unique field\n+        cursor.execute(\"\"\"\n+            CREATE TABLE parent1 (\n+                id integer primary key,\n+                unique_field integer UNIQUE\n+            )\n+        \"\"\")\n+        \n+        cursor.execute(\"\"\"\n+            CREATE TABLE child1 (\n+                id integer primary key,\n+                parent_field integer,\n+                FOREIGN KEY(parent_field) references parent1(unique_field)\n+            )\n+        \"\"\")\n+        \n+        # Test case 2: Multiple FKs, one to PK and one to unique field  \n+        cursor.execute(\"\"\"\n+            CREATE TABLE parent2 (\n+                id integer primary key,\n+                unique_field varchar(50) UNIQUE\n+            )\n+        \"\"\")\n+        \n+        cursor.execute(\"\"\"\n+            CREATE TABLE child2 (\n+                id integer primary key,\n+                parent_id integer,\n+                parent_unique_ref varchar(50),\n+                FOREIGN KEY(parent_id) references parent2(id),\n+                FOREIGN KEY(parent_unique_ref) references parent2(unique_field)\n+            )\n+        \"\"\")\n+\n+    # Run inspectdb and capture output\n+    output = StringIO()\n+    call_command('inspectdb', 'parent1', 'child1', 'parent2', 'child2', stdout=output)\n+    result = output.getvalue()\n+    \n+    print(\"Generated models:\")\n+    print(result)\n+    \n+    # Verify the results\n+    assert \"to_field='unique_field'\" in result, \"FK to unique_field should have to_field parameter\"\n+    \n+    # Check that FK to primary key doesn't have to_field\n+    lines = result.split('\\n')\n+    for i, line in enumerate(lines):\n+        if 'parent_id' in line and 'ForeignKey' in line:\n+            assert 'to_field' not in line, \"FK to primary key should not have to_field parameter\"\n+    \n+    print(\"\\nAll tests passed!\")\n+\n+test_fk_to_non_pk_field()\ndiff --git a/test_fk_to_field.py b/test_fk_to_field.py\nnew file mode 100644\nindex 0000000000..dcf31320db\n--- /dev/null\n+++ b/test_fk_to_field.py\n@@ -0,0 +1,87 @@\n+\"\"\"\n+Test for inspectdb handling of foreign keys to non-primary key fields.\n+This test can be added to the Django test suite.\n+\"\"\"\n+from django.test import TestCase, TransactionTestCase, skipUnlessDBFeature\n+from django.db import connection\n+from django.core.management import call_command\n+from io import StringIO\n+\n+\n+class InspectDBForeignKeyToFieldTests(TransactionTestCase):\n+    \"\"\"Test that foreign keys to non-primary key fields are properly handled.\"\"\"\n+    \n+    available_apps = ['inspectdb']\n+    \n+    def test_foreign_key_to_non_pk_field(self):\n+        \"\"\"Foreign keys to non-primary key fields should include to_field parameter.\"\"\"\n+        with connection.cursor() as cursor:\n+            # Create tables with FK to non-PK field\n+            cursor.execute(\"\"\"\n+                CREATE TABLE inspectdb_parent (\n+                    id INTEGER PRIMARY KEY,\n+                    unique_field INTEGER UNIQUE\n+                )\n+            \"\"\")\n+            cursor.execute(\"\"\"\n+                CREATE TABLE inspectdb_child (\n+                    id INTEGER PRIMARY KEY,\n+                    parent_field INTEGER,\n+                    FOREIGN KEY(parent_field) REFERENCES inspectdb_parent(unique_field)\n+                )\n+            \"\"\")\n+            \n+        try:\n+            # Run inspectdb\n+            out = StringIO()\n+            call_command('inspectdb', 'inspectdb_parent', 'inspectdb_child', stdout=out)\n+            output = out.getvalue()\n+            \n+            # Check that to_field is included for FK to non-PK field\n+            self.assertIn(\"to_field='unique_field'\", output)\n+            \n+            # Verify the complete field definition\n+            self.assertRegex(\n+                output,\n+                r\"parent_field = models\\.ForeignKey\\(InspectdbParent, models\\.DO_NOTHING.*to_field='unique_field'.*\\)\"\n+            )\n+        finally:\n+            # Clean up\n+            with connection.cursor() as cursor:\n+                cursor.execute(\"DROP TABLE IF EXISTS inspectdb_child\")\n+                cursor.execute(\"DROP TABLE IF EXISTS inspectdb_parent\")\n+    \n+    def test_foreign_key_to_pk_field(self):\n+        \"\"\"Foreign keys to primary key fields should not include to_field parameter.\"\"\"\n+        with connection.cursor() as cursor:\n+            # Create tables with regular FK to PK\n+            cursor.execute(\"\"\"\n+                CREATE TABLE inspectdb_parent2 (\n+                    id INTEGER PRIMARY KEY,\n+                    other_field INTEGER\n+                )\n+            \"\"\")\n+            cursor.execute(\"\"\"\n+                CREATE TABLE inspectdb_child2 (\n+                    id INTEGER PRIMARY KEY,\n+                    parent_id INTEGER,\n+                    FOREIGN KEY(parent_id) REFERENCES inspectdb_parent2(id)\n+                )\n+            \"\"\")\n+            \n+        try:\n+            # Run inspectdb\n+            out = StringIO()\n+            call_command('inspectdb', 'inspectdb_parent2', 'inspectdb_child2', stdout=out)\n+            output = out.getvalue()\n+            \n+            # Check that to_field is NOT included for FK to PK field\n+            lines = output.split('\\n')\n+            for line in lines:\n+                if 'parent' in line and 'ForeignKey' in line:\n+                    self.assertNotIn(\"to_field\", line)\n+        finally:\n+            # Clean up\n+            with connection.cursor() as cursor:\n+                cursor.execute(\"DROP TABLE IF EXISTS inspectdb_child2\")\n+                cursor.execute(\"DROP TABLE IF EXISTS inspectdb_parent2\")\ndiff --git a/test_inspectdb_fk_field.py b/test_inspectdb_fk_field.py\nnew file mode 100644\nindex 0000000000..fc4dbe45fd\n--- /dev/null\n+++ b/test_inspectdb_fk_field.py\n@@ -0,0 +1,44 @@\n+import os\n+import django\n+from django.core.management import call_command\n+from django.db import connection\n+from io import StringIO\n+\n+# Setup Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n+from django.conf import settings\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+django.setup()\n+\n+# Create test tables\n+with connection.cursor() as cursor:\n+    # Create the test tables as described in the issue\n+    cursor.execute(\"\"\"\n+        CREATE TABLE foo (\n+            id integer primary key,\n+            other_id integer UNIQUE\n+        )\n+    \"\"\")\n+    \n+    cursor.execute(\"\"\"\n+        CREATE TABLE bar (\n+            id integer primary key,\n+            other_id integer,\n+            FOREIGN KEY(other_id) references foo(other_id)\n+        )\n+    \"\"\")\n+\n+# Run inspectdb and capture output\n+output = StringIO()\n+call_command('inspectdb', 'foo', 'bar', stdout=output)\n+result = output.getvalue()\n+\n+print(\"Generated models:\")\n+print(result)\n", "gold_standard_diff": "From aaf9b558583d9bb75a0c9d53b135dc8c1b75b6a2 Mon Sep 17 00:00:00 2001\nFrom: \"jordan.bae\" <jordan.bae@quotabook.com>\nDate: Sun, 31 Oct 2021 00:08:06 +0900\nSubject: [PATCH] Fixed #33187 -- Made inspectdb handle ForeignKey.to_field\n attribute.\n\n---\n django/core/management/commands/inspectdb.py |  8 ++++++--\n tests/inspectdb/models.py                    |  6 ++++++\n tests/inspectdb/tests.py                     | 10 ++++++++++\n 3 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477d4..d64725ca733a 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -116,13 +116,17 @@ def table2model(table_name):\n                         extra_params['unique'] = True\n \n                     if is_relation:\n+                        ref_db_column, ref_db_table = relations[column_name]\n                         if extra_params.pop('unique', False) or extra_params.get('primary_key'):\n                             rel_type = 'OneToOneField'\n                         else:\n                             rel_type = 'ForeignKey'\n+                            ref_pk_column = connection.introspection.get_primary_key_column(cursor, ref_db_table)\n+                            if ref_pk_column and ref_pk_column != ref_db_column:\n+                                extra_params['to_field'] = ref_db_column\n                         rel_to = (\n-                            \"self\" if relations[column_name][1] == table_name\n-                            else table2model(relations[column_name][1])\n+                            'self' if ref_db_table == table_name\n+                            else table2model(ref_db_table)\n                         )\n                         if rel_to in known_models:\n                             field_type = '%s(%s' % (rel_type, rel_to)\ndiff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py\nindex 4d2c224da9dc..ac201eeaa259 100644\n--- a/tests/inspectdb/models.py\n+++ b/tests/inspectdb/models.py\n@@ -21,6 +21,12 @@ class PeopleMoreData(models.Model):\n     license = models.CharField(max_length=255)\n \n \n+class ForeignKeyToField(models.Model):\n+    to_field_fk = models.ForeignKey(\n+        PeopleMoreData, models.CASCADE, to_field='people_unique',\n+    )\n+\n+\n class DigitsInColumnName(models.Model):\n     all_digits = models.CharField(max_length=11, db_column='123')\n     leading_digit = models.CharField(max_length=11, db_column='4extra')\ndiff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 8be168110613..1deffff14047 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,6 +204,16 @@ def test_attribute_name_not_python_keyword(self):\n             output,\n         )\n \n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_field(self):\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', \"\n+            \"models.DO_NOTHING, to_field='people_unique_id')\",\n+            out.getvalue(),\n+        )\n+\n     def test_digits_column_name_introspection(self):\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15037"}