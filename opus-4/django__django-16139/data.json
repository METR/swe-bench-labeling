{"instance_id": "django__django-16139", "score": "C", "diff": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..4e4515166c 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -162,8 +162,8 @@ class UserChangeForm(forms.ModelForm):\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n-        if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+        if password and self.instance and self.instance.pk:\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\ndiff --git a/test_edge_case.py b/test_edge_case.py\nnew file mode 100644\nindex 0000000000..0996880df7\n--- /dev/null\n+++ b/test_edge_case.py\n@@ -0,0 +1,62 @@\n+\"\"\"Test edge case where form might not have an instance\"\"\"\n+import os\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n+\n+from django.conf import settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.sessions',\n+            'django.contrib.messages',\n+        ],\n+        MIDDLEWARE=[\n+            'django.contrib.sessions.middleware.SessionMiddleware',\n+            'django.contrib.auth.middleware.AuthenticationMiddleware',\n+            'django.contrib.messages.middleware.MessageMiddleware',\n+        ],\n+        ROOT_URLCONF='',\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+import django\n+django.setup()\n+\n+from django.contrib.auth.models import User\n+from django.contrib.auth.forms import UserChangeForm\n+\n+# Create test database tables\n+from django.core.management import call_command\n+call_command('migrate', verbosity=0)\n+\n+# Test with no instance (shouldn't happen in normal use but let's check)\n+try:\n+    form = UserChangeForm()\n+    password_field = form.fields.get('password')\n+    if password_field:\n+        print(f\"Form created without instance - Password help text: {password_field.help_text}\")\n+    else:\n+        print(\"Form created without instance - no password field\")\n+except Exception as e:\n+    print(f\"Error creating form without instance: {e}\")\n+\n+# Test with instance\n+user = User.objects.create_user(username='testuser', password='testpass123')\n+form = UserChangeForm(instance=user)\n+password_field = form.fields.get('password')\n+if password_field:\n+    print(f\"With instance - Password help text: {password_field.help_text}\")\n+    if f'../../{user.pk}/password/' in password_field.help_text:\n+        print(\"\u2713 Correct URL format with user PK\")\n+    else:\n+        print(\"\u2717 Incorrect URL format\")\ndiff --git a/test_password_url_fix.py b/test_password_url_fix.py\nnew file mode 100644\nindex 0000000000..3ffd39ae5a\n--- /dev/null\n+++ b/test_password_url_fix.py\n@@ -0,0 +1,88 @@\n+\"\"\"Test case for password URL fix in UserChangeForm\"\"\"\n+import django\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+from django.contrib.auth.forms import UserChangeForm\n+\n+\n+class UserChangeFormPasswordURLTest(TestCase):\n+    \"\"\"Test that the password change URL in UserChangeForm works correctly\n+    when the UserAdmin is accessed via a to_field parameter.\"\"\"\n+    \n+    def setUp(self):\n+        self.user = User.objects.create_user(\n+            username='testuser',\n+            password='testpass123'\n+        )\n+    \n+    def test_password_url_uses_pk(self):\n+        \"\"\"Test that the password URL uses the user's primary key.\"\"\"\n+        form = UserChangeForm(instance=self.user)\n+        password_field = form.fields.get('password')\n+        \n+        # Check that the help text contains the correct URL structure\n+        self.assertIn(f'../../{self.user.pk}/password/', password_field.help_text)\n+        \n+        # Verify it doesn't use the old relative URL\n+        self.assertNotIn('../password/', password_field.help_text)\n+        \n+    def test_password_url_with_different_pk(self):\n+        \"\"\"Test that the password URL correctly uses different PKs.\"\"\"\n+        # Create another user with a different PK\n+        user2 = User.objects.create_user(\n+            username='testuser2',\n+            password='testpass456'\n+        )\n+        \n+        form1 = UserChangeForm(instance=self.user)\n+        form2 = UserChangeForm(instance=user2)\n+        \n+        password_field1 = form1.fields.get('password')\n+        password_field2 = form2.fields.get('password')\n+        \n+        # Check that each form has the correct user's PK in the URL\n+        self.assertIn(f'../../{self.user.pk}/password/', password_field1.help_text)\n+        self.assertIn(f'../../{user2.pk}/password/', password_field2.help_text)\n+        \n+        # Ensure they're different\n+        self.assertNotEqual(password_field1.help_text, password_field2.help_text)\n+\n+\n+if __name__ == '__main__':\n+    import os\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n+    \n+    from django.conf import settings\n+    if not settings.configured:\n+        settings.configure(\n+            DEBUG=True,\n+            DATABASES={\n+                'default': {\n+                    'ENGINE': 'django.db.backends.sqlite3',\n+                    'NAME': ':memory:',\n+                }\n+            },\n+            INSTALLED_APPS=[\n+                'django.contrib.contenttypes',\n+                'django.contrib.auth',\n+                'django.contrib.admin',\n+                'django.contrib.sessions',\n+                'django.contrib.messages',\n+            ],\n+            MIDDLEWARE=[\n+                'django.contrib.sessions.middleware.SessionMiddleware',\n+                'django.contrib.auth.middleware.AuthenticationMiddleware',\n+                'django.contrib.messages.middleware.MessageMiddleware',\n+            ],\n+            ROOT_URLCONF='',\n+            SECRET_KEY='test-secret-key',\n+            USE_TZ=True,\n+        )\n+    \n+    django.setup()\n+    \n+    # Run the tests\n+    from django.test.utils import get_runner\n+    TestRunner = get_runner(settings)\n+    test_runner = TestRunner(verbosity=2)\n+    failures = test_runner.run_tests(['__main__'])\ndiff --git a/test_to_field_scenario.py b/test_to_field_scenario.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_to_field_scenario.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_user_admin_to_field.py b/test_user_admin_to_field.py\nnew file mode 100644\nindex 0000000000..ab1d979f9a\n--- /dev/null\n+++ b/test_user_admin_to_field.py\n@@ -0,0 +1,79 @@\n+\"\"\"Test script to verify the issue with UserAdmin when accessed via to_field\"\"\"\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+            'django.contrib.admin',\n+            'django.contrib.sessions',\n+            'django.contrib.messages',\n+        ],\n+        MIDDLEWARE=[\n+            'django.contrib.sessions.middleware.SessionMiddleware',\n+            'django.contrib.auth.middleware.AuthenticationMiddleware',\n+            'django.contrib.messages.middleware.MessageMiddleware',\n+        ],\n+        ROOT_URLCONF='',\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+# Import after django.setup()\n+from django.test import TestCase, RequestFactory\n+from django.contrib.auth.models import User\n+from django.contrib.auth.forms import UserChangeForm\n+from django.contrib.admin.sites import AdminSite\n+from django.contrib.auth.admin import UserAdmin\n+\n+# Create test database tables\n+from django.core.management import call_command\n+call_command('migrate', verbosity=0)\n+\n+# Create a test user\n+user = User.objects.create_user(username='testuser', password='testpass123')\n+user.save()\n+\n+# Test the UserChangeForm\n+print(\"Testing UserChangeForm with normal access (no to_field):\")\n+form = UserChangeForm(instance=user)\n+password_field = form.fields.get('password')\n+if password_field:\n+    print(f\"Password help text: {password_field.help_text}\")\n+    \n+print(f\"\\nUser PK: {user.pk}\")\n+\n+# Test to see if the password reset link is correctly formed\n+print(\"\\nPassword reset link structure:\")\n+if '../../' in password_field.help_text:\n+    print(\"\u2713 Using absolute URL structure with ../../<pk>/password/\")\n+else:\n+    print(\"\u2717 Still using relative URL ../password/\")\n+    \n+# Extract the href from the help text\n+import re\n+href_match = re.search(r'href=\"([^\"]+)\"', password_field.help_text)\n+if href_match:\n+    print(f\"Extracted URL: {href_match.group(1)}\")\n+    \n+print(\"\\nThis fix ensures that:\")\n+print(\"1. When accessed normally: /admin/auth/user/1/change/\")\n+print(\"   Password URL becomes: ../../1/password/ \u2192 /admin/auth/user/1/password/\")\n+print(\"2. When accessed via to_field: /admin/auth/user/uuid-value/change/?_to_field=uuid\")\n+print(\"   Password URL becomes: ../../1/password/ \u2192 /admin/auth/user/1/password/\")\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 3bacd7a9fb..6f15408fdb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -931,6 +931,22 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n             form.fields[\"username\"].widget.attrs.get(\"autocapitalize\"), \"none\"\n         )\n \n+    def test_password_help_text_uses_pk_url(self):\n+        \"\"\"\n+        Test that password help text URL uses the user's primary key\n+        instead of relative paths to work correctly when UserAdmin is \n+        accessed via to_field.\n+        \"\"\"\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(instance=user)\n+        password_field = form.fields.get(\"password\")\n+        \n+        # Check that the help text contains the correct URL structure\n+        self.assertIn(f\"../../{user.pk}/password/\", password_field.help_text)\n+        \n+        # Verify it doesn't use the old relative URL\n+        self.assertNotIn(\"../password/\", password_field.help_text)\n+\n \n @override_settings(TEMPLATES=AUTH_TEMPLATES)\n class PasswordResetFormTest(TestDataMixin, TestCase):\n", "gold_standard_diff": "From de2c2127b66e77a034c01c81753c5c08e651a5b4 Mon Sep 17 00:00:00 2001\nFrom: Simon Kern <s.kern@s2k.digital>\nDate: Fri, 30 Sep 2022 10:50:28 +0200\nSubject: [PATCH] Fixed #34066 -- Fixed link to password reset view in\n UserChangeForm.password's help text when using to_field.\n\nCo-Authored-By: David Sanders <shang.xiao.sanders@gmail.com>\nCo-Authored-By: Mariusz Felisiak <felisiak.mariusz@gmail.com>\n---\n django/contrib/auth/forms.py   |  4 +++-\n tests/auth_tests/test_forms.py | 22 ++++++++++++++++++++++\n 2 files changed, 25 insertions(+), 1 deletion(-)\n\ndiff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723cb5..523830e8ee41 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,9 @@ def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(\n+                f\"../../{self.instance.pk}/password/\"\n+            )\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 3bacd7a9fb80..78078316e81a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,6 @@\n import datetime\n import re\n+import urllib.parse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -22,6 +23,7 @@\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,6 +894,26 @@ def test_bug_19349_bound_password_field(self):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16139"}