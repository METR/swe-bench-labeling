{"instance_id": "django__django-12273", "score": "I", "diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 844c01e95e..8f65695bbb 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -816,7 +816,7 @@ class Model(metaclass=ModelBase):\n                 inserted = True\n             # Set the parent's PK value to self.\n             if field:\n-                setattr(self, field.attname, self._get_pk_val(parent._meta))\n+                setattr(self, field.attname, getattr(self, parent._meta.pk.attname))\n                 # Since we didn't have an instance of the parent handy set\n                 # attname directly, bypassing the descriptor. Invalidate\n                 # the related object cache, in case it's been accidentally\ndiff --git a/test_debug_issue.py b/test_debug_issue.py\nnew file mode 100644\nindex 0000000000..c20a20e1e2\n--- /dev/null\n+++ b/test_debug_issue.py\n@@ -0,0 +1,110 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    SECRET_KEY='test-secret-key',\n+)\n+\n+django.setup()\n+\n+from django.db import models, connection\n+from django.db.models import base\n+\n+# Monkey patch _save_parents to add debug output\n+original_save_parents = base.Model._save_parents\n+\n+def debug_save_parents(self, cls, using, update_fields):\n+    print(f\"\\n_save_parents called for {cls.__name__}\")\n+    meta = cls._meta\n+    for parent, field in meta.parents.items():\n+        print(f\"  Parent: {parent.__name__}, field: {field}\")\n+        if field:\n+            print(f\"    field.attname = {field.attname}\")\n+            print(f\"    getattr(self, field.attname) = {getattr(self, field.attname)}\")\n+            print(f\"    parent._meta.pk.attname = {parent._meta.pk.attname}\")\n+            print(f\"    getattr(self, parent._meta.pk.attname) = {getattr(self, parent._meta.pk.attname)}\")\n+    result = original_save_parents(self, cls, using, update_fields)\n+    print(f\"  After _save_parents:\")\n+    for parent, field in meta.parents.items():\n+        if field:\n+            print(f\"    getattr(self, field.attname) = {getattr(self, field.attname)}\")\n+    return result\n+\n+base.Model._save_parents = debug_save_parents\n+\n+class Place(models.Model):\n+    name = models.CharField(max_length=50)\n+    address = models.CharField(max_length=80)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Restaurant(Place):\n+    serves_hot_dogs = models.BooleanField(default=False)\n+    serves_pizza = models.BooleanField(default=False)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Create tables\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Place)\n+    schema_editor.create_model(Restaurant)\n+\n+print(\"Testing the issue...\")\n+\n+# Create initial restaurant\n+restaurant = Restaurant.objects.create(\n+    name=\"Original Restaurant\",\n+    address=\"123 Main St\",\n+    serves_hot_dogs=True,\n+    serves_pizza=False,\n+)\n+original_pk = restaurant.pk\n+print(f\"Created Restaurant with pk={original_pk}\")\n+print(f\"  restaurant.pk = {restaurant.pk}\")\n+print(f\"  restaurant.place_ptr_id = {restaurant.place_ptr_id}\")\n+\n+# Reset the pk and change some values\n+print(\"\\nResetting primary keys...\")\n+print(f\"Before reset: restaurant.id = {restaurant.id}\")\n+restaurant.pk = None\n+restaurant.place_ptr_id = None\n+print(f\"After reset:\")\n+print(f\"  restaurant.pk = {restaurant.pk}\")\n+print(f\"  restaurant.id = {restaurant.id}\")\n+print(f\"  restaurant.place_ptr_id = {restaurant.place_ptr_id}\")\n+\n+restaurant.name = \"New Restaurant\"\n+restaurant.serves_pizza = True\n+\n+print(\"\\nSaving...\")\n+restaurant.save()\n+\n+print(f\"\\nAfter save:\")\n+print(f\"  restaurant.pk = {restaurant.pk}\")\n+print(f\"  restaurant.place_ptr_id = {restaurant.place_ptr_id}\")\n+\n+# Check all objects\n+print(\"\\nAll Places:\")\n+for p in Place.objects.all():\n+    print(f\"  pk={p.pk}, name={p.name}\")\n+\n+print(\"\\nAll Restaurants:\")  \n+for r in Restaurant.objects.all():\n+    print(f\"  pk={r.pk}, name={r.name}, hot_dogs={r.serves_hot_dogs}, pizza={r.serves_pizza}\")\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_reproduce_issue.py b/test_reproduce_issue.py\nnew file mode 100644\nindex 0000000000..774e0010e9\n--- /dev/null\n+++ b/test_reproduce_issue.py\n@@ -0,0 +1,51 @@\n+import django\n+from django.test import TestCase\n+from django.db import models\n+import uuid\n+\n+# Set up Django\n+django.setup()\n+\n+class Item(models.Model):\n+    # uid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    uid = models.AutoField(primary_key=True, editable=False)\n+    f = models.BooleanField(default=False)\n+    \n+    def reset(self):\n+        self.uid = None\n+        self.f = False\n+        \n+    class Meta:\n+        app_label = 'test_app'\n+\n+class Derived(Item):\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class SaveTestCase(TestCase):\n+    def setUp(self):\n+        self.derived = Derived.objects.create(f=True)  # create the first object\n+        item = Item.objects.get(pk=self.derived.pk)\n+        obj1 = item.derived\n+        obj1.reset()\n+        obj1.save()  # the first object is overwritten\n+        \n+    def test_f_true(self):\n+        obj = Item.objects.get(pk=self.derived.pk)\n+        self.assertTrue(obj.f)\n+\n+if __name__ == \"__main__\":\n+    # Create tables\n+    from django.db import connection\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Item)\n+        schema_editor.create_model(Derived)\n+    \n+    # Run test\n+    test = SaveTestCase()\n+    test.setUp()\n+    try:\n+        test.test_f_true()\n+        print(\"Test passed - but this indicates the bug exists!\")\n+    except AssertionError:\n+        print(\"Test failed - the object was overwritten (expected behavior with the bug)\")\ndiff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 5eef0f5bfa..8c47a31fe3 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -440,6 +440,44 @@ class ModelInheritanceDataTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n+    def test_resetting_pk_on_child_model(self):\n+        \"\"\"\n+        Test that resetting the primary key of a child model instance\n+        and saving creates a new instance instead of overwriting the\n+        existing one.\n+        \"\"\"\n+        # Create initial restaurant\n+        restaurant = Restaurant.objects.create(\n+            name=\"Original Restaurant\",\n+            address=\"123 Main St\",\n+            serves_hot_dogs=True,\n+            serves_pizza=False,\n+        )\n+        original_pk = restaurant.pk\n+        \n+        # Reset the pk and change some values\n+        restaurant.pk = None\n+        restaurant.place_ptr_id = None  # Also reset the parent link\n+        restaurant.name = \"New Restaurant\"\n+        restaurant.serves_pizza = True\n+        restaurant.save()\n+        \n+        # Check that we have a new restaurant\n+        self.assertIsNotNone(restaurant.pk)\n+        self.assertNotEqual(restaurant.pk, original_pk)\n+        \n+        # Verify original restaurant still exists\n+        original = Restaurant.objects.get(pk=original_pk)\n+        self.assertEqual(original.name, \"Original Restaurant\")\n+        self.assertTrue(original.serves_hot_dogs)\n+        self.assertFalse(original.serves_pizza)\n+        \n+        # Verify new restaurant has correct values\n+        new = Restaurant.objects.get(pk=restaurant.pk)\n+        self.assertEqual(new.name, \"New Restaurant\")\n+        self.assertTrue(new.serves_hot_dogs)\n+        self.assertTrue(new.serves_pizza)\n+\n     def test_exclude_inherited_on_null(self):\n         # Refs #12567\n         Supplier.objects.create(\n", "gold_standard_diff": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 844c01e95eeb..8ea6c05ef948 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -569,6 +569,9 @@ def _get_pk_val(self, meta=None):\n         return getattr(self, meta.pk.attname)\n \n     def _set_pk_val(self, value):\n+        for parent_link in self._meta.parents.values():\n+            if parent_link and parent_link != self._meta.pk:\n+                setattr(self, parent_link.target_field.attname, value)\n         return setattr(self, self._meta.pk.attname, value)\n \n     pk = property(_get_pk_val, _set_pk_val)\ndiff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex b0156ff9ac41..2c15925da5f7 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -10,10 +10,11 @@\n \n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n-    DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n-    MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n-    Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n-    SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Congressman, DerivedM, InternalCertificationAudit, ItalianRestaurant,\n+    M2MChild, MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A,\n+    ParkingLot4B, Person, Place, Politician, Profile, QualityControl,\n+    Restaurant, SelfRefChild, SelfRefParent, Senator, Supplier, TrainStation,\n+    User, Wholesaler,\n )\n \n \n@@ -558,3 +559,31 @@ def test_id_field_update_on_ancestor_change(self):\n         italian_restaurant.restaurant_ptr = None\n         self.assertIsNone(italian_restaurant.pk)\n         self.assertIsNone(italian_restaurant.id)\n+\n+    def test_create_new_instance_with_pk_equals_none(self):\n+        p1 = Profile.objects.create(username='john')\n+        p2 = User.objects.get(pk=p1.user_ptr_id).profile\n+        # Create a new profile by setting pk = None.\n+        p2.pk = None\n+        p2.user_ptr_id = None\n+        p2.username = 'bill'\n+        p2.save()\n+        self.assertEqual(Profile.objects.count(), 2)\n+        self.assertEqual(User.objects.get(pk=p1.user_ptr_id).username, 'john')\n+\n+    def test_create_new_instance_with_pk_equals_none_multi_inheritance(self):\n+        c1 = Congressman.objects.create(state='PA', name='John', title='senator 1')\n+        c2 = Person.objects.get(pk=c1.pk).congressman\n+        # Create a new congressman by setting pk = None.\n+        c2.pk = None\n+        c2.id = None\n+        c2.politician_ptr_id = None\n+        c2.name = 'Bill'\n+        c2.title = 'senator 2'\n+        c2.save()\n+        self.assertEqual(Congressman.objects.count(), 2)\n+        self.assertEqual(Person.objects.get(pk=c1.pk).name, 'John')\n+        self.assertEqual(\n+            Politician.objects.get(pk=c1.politician_ptr_id).title,\n+            'senator 1',\n+        )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12273"}