{"instance_id": "django__django-16901", "score": "C", "diff": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex aaab1730b7..84dcfeae51 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -129,13 +129,13 @@ class WhereNode(tree.Node):\n             # Convert if the database doesn't support XOR:\n             #   a XOR b XOR c XOR ...\n             # to:\n-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1\n+            #   (a OR b OR c OR ...) AND (a + b + c + ...) % 2 == 1\n             lhs = self.__class__(self.children, OR)\n             rhs_sum = reduce(\n                 operator.add,\n                 (Case(When(c, then=1), default=0) for c in self.children),\n             )\n-            rhs = Exact(1, rhs_sum)\n+            rhs = Exact(1, rhs_sum % 2)\n             return self.__class__([lhs, rhs], AND, self.negated).as_sql(\n                 compiler, connection\n             )\n", "gold_standard_diff": "From b81e974e9ea16bd693b194a728f77fb825ec8e54 Mon Sep 17 00:00:00 2001\nFrom: Anders Kaseorg <andersk@mit.edu>\nDate: Mon, 29 May 2023 21:59:22 -0700\nSubject: [PATCH] Fixed #34604 -- Corrected fallback SQL for n-ary logical XOR.\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nAn n-ary logical XOR Q(\u2026) ^ Q(\u2026) ^ \u2026 ^ Q(\u2026) should evaluate to true\nwhen an odd number of its operands evaluate to true, not when exactly\none operand evaluates to true.\n---\n django/db/models/sql/where.py |  7 ++++++-\n docs/ref/models/querysets.txt | 15 ++++++++++++---\n docs/releases/5.0.txt         |  5 +++++\n tests/xor_lookups/tests.py    | 21 +++++++++++++++++++++\n 4 files changed, 44 insertions(+), 4 deletions(-)\n\ndiff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex aaab1730b77e..2f23a2932ce5 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -6,6 +6,7 @@\n \n from django.core.exceptions import EmptyResultSet, FullResultSet\n from django.db.models.expressions import Case, When\n+from django.db.models.functions import Mod\n from django.db.models.lookups import Exact\n from django.utils import tree\n from django.utils.functional import cached_property\n@@ -129,12 +130,16 @@ def as_sql(self, compiler, connection):\n             # Convert if the database doesn't support XOR:\n             #   a XOR b XOR c XOR ...\n             # to:\n-            #   (a OR b OR c OR ...) AND (a + b + c + ...) == 1\n+            #   (a OR b OR c OR ...) AND MOD(a + b + c + ..., 2) == 1\n+            # The result of an n-ary XOR is true when an odd number of operands\n+            # are true.\n             lhs = self.__class__(self.children, OR)\n             rhs_sum = reduce(\n                 operator.add,\n                 (Case(When(c, then=1), default=0) for c in self.children),\n             )\n+            if len(self.children) > 2:\n+                rhs_sum = Mod(rhs_sum, 2)\n             rhs = Exact(1, rhs_sum)\n             return self.__class__([lhs, rhs], AND, self.negated).as_sql(\n                 compiler, connection\ndiff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt\nindex 1d684607f122..640818d2a52b 100644\n--- a/docs/ref/models/querysets.txt\n+++ b/docs/ref/models/querysets.txt\n@@ -2021,7 +2021,8 @@ may be generated.\n XOR (``^``)\n ~~~~~~~~~~~\n \n-Combines two ``QuerySet``\\s using the SQL ``XOR`` operator.\n+Combines two ``QuerySet``\\s using the SQL ``XOR`` operator. A ``XOR``\n+expression matches rows that are matched by an odd number of operands.\n \n The following are equivalent::\n \n@@ -2044,13 +2045,21 @@ SQL equivalent:\n     .. code-block:: sql\n \n         (x OR y OR ... OR z) AND\n-        1=(\n+        1=MOD(\n             (CASE WHEN x THEN 1 ELSE 0 END) +\n             (CASE WHEN y THEN 1 ELSE 0 END) +\n             ...\n-            (CASE WHEN z THEN 1 ELSE 0 END) +\n+            (CASE WHEN z THEN 1 ELSE 0 END),\n+            2\n         )\n \n+   .. versionchanged:: 5.0\n+\n+        In older versions, on databases without native support for the SQL\n+        ``XOR`` operator, ``XOR`` returned rows that were matched by exactly\n+        one operand. The previous behavior was not consistent with MySQL,\n+        MariaDB, and Python behavior.\n+\n Methods that do not return ``QuerySet``\\s\n -----------------------------------------\n \ndiff --git a/docs/releases/5.0.txt b/docs/releases/5.0.txt\nindex 98bd5d2a9f37..fb446fcd7a73 100644\n--- a/docs/releases/5.0.txt\n+++ b/docs/releases/5.0.txt\n@@ -424,6 +424,11 @@ Miscellaneous\n   a page. Having two ``<h1>`` elements was confusing and the site header wasn't\n   helpful as it is repeated on all pages.\n \n+* On databases without native support for the SQL ``XOR`` operator, ``^`` as\n+  the exclusive or (``XOR``) operator now returns rows that are matched by an\n+  odd number of operands rather than exactly one operand. This is consistent\n+  with the behavior of MySQL, MariaDB, and Python.\n+\n .. _deprecated-features-5.0:\n \n Features deprecated in 5.0\ndiff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex a9cdf9cb31d7..d58d16cf11b8 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -19,6 +19,27 @@ def test_filter(self):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n+    def test_filter_multiple(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+            ],\n+        )\n+\n     def test_filter_negated(self):\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16901"}