{"instance_id": "django__django-13315", "score": "I", "diff": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..559a8ec51c 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -986,9 +986,13 @@ class ForeignKey(ForeignObject):\n             raise ValueError(\"Cannot create form field for %r yet, because \"\n                              \"its related model %r has not been loaded yet\" %\n                              (self.name, self.remote_field.model))\n+        limit_choices_to = self.get_limit_choices_to()\n+        queryset = self.remote_field.model._default_manager.using(using)\n+        if limit_choices_to is not None:\n+            queryset = queryset.complex_filter(limit_choices_to)\n         return super().formfield(**{\n             'form_class': forms.ModelChoiceField,\n-            'queryset': self.remote_field.model._default_manager.using(using),\n+            'queryset': queryset,\n             'to_field_name': self.remote_field.field_name,\n             **kwargs,\n             'blank': self.blank,\ndiff --git a/tests/model_fields/test_foreignkey.py b/tests/model_fields/test_foreignkey.py\nindex d30cca9b5c..cad407a14b 100644\n--- a/tests/model_fields/test_foreignkey.py\n+++ b/tests/model_fields/test_foreignkey.py\n@@ -130,6 +130,36 @@ class ForeignKeyTests(TestCase):\n         with self.assertRaisesMessage(ValueError, 'Cannot resolve output_field'):\n             Foo._meta.get_field('bar').get_col('alias')\n \n+    @isolate_apps('model_fields')\n+    def test_limit_choices_to_prevents_duplicates(self):\n+        from django.forms.models import modelform_factory\n+\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=50)\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, limit_choices_to={'name__startswith': 'A'})\n+\n+        class GrandChild(models.Model):\n+            parent = models.ForeignKey(Child, models.CASCADE)\n+\n+        Parent.objects.bulk_create([\n+            Parent(name='Apple'),\n+            Parent(name='Banana'),\n+            Parent(name='Apricot'),\n+        ])\n+\n+        form_class = modelform_factory(GrandChild, fields=['parent'])\n+        form = form_class()\n+        \n+        # Check that only parents with names starting with 'A' are in the choices\n+        choices = form.fields['parent'].queryset\n+        self.assertEqual(choices.count(), 2)\n+        self.assertQuerysetEqual(choices, ['Apple', 'Apricot'], lambda x: x.parent.name, ordered=False)\n+\n+        # Ensure no duplicates in the choices\n+        self.assertEqual(len(set(choices)), choices.count())\n+\n     @isolate_apps('model_fields')\n     def test_non_local_to_field(self):\n         class Parent(models.Model):\n", "gold_standard_diff": "From 556fa4bbba5ba86bc1646a86fb11ab55405d4aa4 Mon Sep 17 00:00:00 2001\nFrom: alvinshaita <alvinshaita@gmail.com>\nDate: Mon, 17 Aug 2020 06:39:10 +0300\nSubject: [PATCH] Fixed #1891, Fixed #11707 -- Prevented duplicates with\n limit_choices_to on multi-value relations.\n\n---\n django/forms/models.py      | 12 +++++--\n tests/model_forms/models.py |  9 +++--\n tests/model_forms/tests.py  | 67 +++++++++++++++++++++++++++++++++++++\n 3 files changed, 84 insertions(+), 4 deletions(-)\n\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a131..0591cdf338de 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -97,10 +97,18 @@ def model_to_dict(instance, fields=None, exclude=None):\n \n def apply_limit_choices_to_to_formfield(formfield):\n     \"\"\"Apply limit_choices_to to the formfield's queryset if needed.\"\"\"\n+    from django.db.models import Exists, OuterRef, Q\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n-        if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+        if limit_choices_to:\n+            complex_filter = limit_choices_to\n+            if not isinstance(complex_filter, Q):\n+                complex_filter = Q(**limit_choices_to)\n+            complex_filter &= Q(pk=OuterRef('pk'))\n+            # Use Exists() to avoid potential duplicates.\n+            formfield.queryset = formfield.queryset.filter(\n+                Exists(formfield.queryset.model._base_manager.filter(complex_filter)),\n+            )\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\ndiff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex 1a2102f89889..4e9ed2b1e435 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -411,9 +411,14 @@ class StumpJoke(models.Model):\n         Character,\n         models.CASCADE,\n         limit_choices_to=today_callable_dict,\n-        related_name=\"+\",\n+        related_name='jokes',\n     )\n-    has_fooled_today = models.ManyToManyField(Character, limit_choices_to=today_callable_q, related_name=\"+\")\n+    has_fooled_today = models.ManyToManyField(\n+        Character,\n+        limit_choices_to=today_callable_q,\n+        related_name='jokes_today',\n+    )\n+    funny = models.BooleanField(default=False)\n \n \n # Model for #13776\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 9e900e35f48b..d7bd768e7bd5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,7 @@\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2829,6 +2830,72 @@ def test_callable_called_each_time_form_is_instantiated(self):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/13315"}