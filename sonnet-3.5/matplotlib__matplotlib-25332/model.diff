diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index b4c38368bf..34f34b665b 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -81,6 +81,7 @@ class _AxesStack:
     def __init__(self):
         self._axes = {}  # Mapping of axes to "gca" order.
         self._counter = itertools.count()
+        self._align_label_groups = {}
 
     def as_list(self):
         """List the axes that have been added to the figure."""
@@ -115,6 +116,7 @@ class SubplotParams:
                  wspace=None, hspace=None):
         """
         Defaults are given by :rc:`figure.subplot.[name]`.
+        self._align_label_groups = {}
 
         Parameters
         ----------
@@ -178,6 +180,7 @@ class FigureBase(Artist):
         # this is used by the property methods in the artist base class
         # which are over-ridden in this class
         del self._axes
+        self._align_label_groups = {}
 
         self._suptitle = None
         self._supxlabel = None
@@ -1362,6 +1365,72 @@ default: %(va)s
         This assumes that ``axs`` are from the same `.GridSpec`, so that
         their `.SubplotSpec` positions correspond to figure positions.
 
+        Examples
+        --------
+        Example with rotated xtick labels::
+
+            fig, axs = plt.subplots(1, 2)
+            for tick in axs[0].get_xticklabels():
+                tick.set_rotation(55)
+            axs[0].set_xlabel("XLabel 0")
+            axs[1].set_xlabel("XLabel 1")
+            fig.align_xlabels()
+        """
+        if axs is None:
+            axs = self.axes
+        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]
+        for ax in axs:
+            _log.debug(" Working on: %s", ax.get_xlabel())
+            rowspan = ax.get_subplotspec().rowspan
+            pos = ax.xaxis.get_label_position()  # top or bottom
+            # Search through other axes for label positions that are same as
+            # this one and that share the appropriate row number.
+            # Add to a grouper associated with each axes of siblings.
+            if pos not in self._align_label_groups:
+                self._align_label_groups[pos] = {}
+            if rowspan not in self._align_label_groups[pos]:
+                self._align_label_groups[pos][rowspan] = []
+            self._align_label_groups[pos][rowspan].append(ax)
+
+        # Do the actual alignment
+        for pos in self._align_label_groups:
+            for rowspan, group in self._align_label_groups[pos].items():
+                bboxes = [ax.xaxis.get_label().get_window_extent() for ax in group]
+                max_height = max(bbox.height for bbox in bboxes)
+                for ax in group:
+                    label = ax.xaxis.get_label()
+                    bbox = label.get_window_extent()
+                    if pos == "bottom":
+                        label.set_position((label.get_position()[0], -max_height / ax.figure.dpi * 72))
+                    else:
+                        label.set_position((label.get_position()[0], max_height / ax.figure.dpi * 72))
+
+        self.stale = True
+
+        Alignment persists for draw events after this is called.
+
+        If a label is on the bottom, it is aligned with labels on Axes that
+        also have their label on the bottom and that have the same
+        bottom-most subplot row.  If the label is on the top,
+        it is aligned with labels on Axes with the same top-most row.
+
+        Parameters
+        ----------
+        axs : list of `~matplotlib.axes.Axes`
+            Optional list of (or `~numpy.ndarray`) `~matplotlib.axes.Axes`
+            to align the xlabels.
+            Default is to align all Axes on the figure.
+
+        See Also
+        --------
+        matplotlib.figure.Figure.align_ylabels
+        matplotlib.figure.Figure.align_labels
+
+        Notes
+        -----
+        This assumes that ``axs`` are from the same `.GridSpec`, so that
+        their `.SubplotSpec` positions correspond to figure positions.
+
         Examples
         --------
         Example with rotated xtick labels::
@@ -1423,6 +1492,71 @@ default: %(va)s
         This assumes that ``axs`` are from the same `.GridSpec`, so that
         their `.SubplotSpec` positions correspond to figure positions.
 
+        Examples
+        --------
+        Example with large yticks labels::
+
+            fig, axs = plt.subplots(2, 1)
+            axs[0].plot(np.arange(0, 1000, 50))
+            axs[0].set_ylabel("YLabel 0")
+            axs[1].set_ylabel("YLabel 1")
+            fig.align_ylabels()
+        """
+        if axs is None:
+            axs = self.axes
+        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]
+        for ax in axs:
+            _log.debug(" Working on: %s", ax.get_ylabel())
+            colspan = ax.get_subplotspec().colspan
+            pos = ax.yaxis.get_label_position()  # left or right
+            # Search through other axes for label positions that are same as
+            # this one and that share the appropriate column number.
+            # Add to a list associated with each axes of siblings.
+            if pos not in self._align_label_groups:
+                self._align_label_groups[pos] = {}
+            if colspan not in self._align_label_groups[pos]:
+                self._align_label_groups[pos][colspan] = []
+            self._align_label_groups[pos][colspan].append(ax)
+
+        # Do the actual alignment
+        for pos in self._align_label_groups:
+            for colspan, group in self._align_label_groups[pos].items():
+                bboxes = [ax.yaxis.get_label().get_window_extent() for ax in group]
+                max_width = max(bbox.width for bbox in bboxes)
+                for ax in group:
+                    label = ax.yaxis.get_label()
+                    bbox = label.get_window_extent()
+                    if pos == "left":
+                        label.set_position((-max_width / ax.figure.dpi * 72, label.get_position()[1]))
+                    else:
+                        label.set_position((max_width / ax.figure.dpi * 72, label.get_position()[1]))
+
+        self.stale = True
+
+        Alignment persists for draw events after this is called.
+
+        If a label is on the left, it is aligned with labels on Axes that
+        also have their label on the left and that have the same
+        left-most subplot column.  If the label is on the right,
+        it is aligned with labels on Axes with the same right-most column.
+
+        Parameters
+        ----------
+        axs : list of `~matplotlib.axes.Axes`
+            Optional list (or `~numpy.ndarray`) of `~matplotlib.axes.Axes`
+            to align the ylabels.
+            Default is to align all Axes on the figure.
+
+        See Also
+        --------
+        matplotlib.figure.Figure.align_xlabels
+        matplotlib.figure.Figure.align_labels
+
+        Notes
+        -----
+        This assumes that ``axs`` are from the same `.GridSpec`, so that
+        their `.SubplotSpec` positions correspond to figure positions.
+
         Examples
         --------
         Example with large yticks labels::
@@ -1472,6 +1606,25 @@ default: %(va)s
         --------
         matplotlib.figure.Figure.align_xlabels
 
+        matplotlib.figure.Figure.align_ylabels
+        """
+        self._align_label_groups = {}
+        self.align_xlabels(axs=axs)
+        self.align_ylabels(axs=axs)
+
+        Alignment persists for draw events after this is called.
+
+        Parameters
+        ----------
+        axs : list of `~matplotlib.axes.Axes`
+            Optional list (or `~numpy.ndarray`) of `~matplotlib.axes.Axes`
+            to align the labels.
+            Default is to align all Axes on the figure.
+
+        See Also
+        --------
+        matplotlib.figure.Figure.align_xlabels
+
         matplotlib.figure.Figure.align_ylabels
         """
         self.align_xlabels(axs=axs)
@@ -2149,6 +2302,7 @@ class SubFigure(FigureBase):
         parent : `.Figure` or `.SubFigure`
             Figure or subfigure that contains the SubFigure.  SubFigures
             can be nested.
+        self._align_label_groups = {}
 
         subplotspec : `.gridspec.SubplotSpec`
             Defines the region in a parent gridspec where the subfigure will
@@ -2180,6 +2334,7 @@ class SubFigure(FigureBase):
             edgecolor = mpl.rcParams['figure.edgecolor']
         if frameon is None:
             frameon = mpl.rcParams['figure.frameon']
+        self._align_label_groups = {}
 
         self._subplotspec = subplotspec
         self._parent = parent
@@ -2382,6 +2537,7 @@ class Figure(FigureBase):
         ----------
         figsize : 2-tuple of floats, default: :rc:`figure.figsize`
             Figure dimension ``(width, height)`` in inches.
+        self._align_label_groups = {}
 
         dpi : float, default: :rc:`figure.dpi`
             Dots per inch.
@@ -2461,6 +2617,7 @@ None}, default: None
         """
         super().__init__(**kwargs)
         self._layout_engine = None
+        self._align_label_groups = {}
 
         if layout is not None:
             if (tight_layout is not None):
