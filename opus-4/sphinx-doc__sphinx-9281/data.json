{"instance_id": "sphinx-doc__sphinx-9281", "score": "C", "diff": "diff --git a/setup.py b/setup.py\nindex 2538952e3..94e1d8b32 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a7074..705e5bd3f 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -457,6 +457,10 @@ def object_description(object: Any) -> str:\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, enum.Enum):\n+        # Special handling for Enum values to show them in a clean format\n+        # E.g., \"MyEnum.ValueA\" instead of \"<MyEnum.ValueA: 10>\"\n+        return f\"{object.__class__.__name__}.{object.name}\"\n     try:\n         s = repr(object)\n     except Exception as exc:\ndiff --git a/test_enum_complete.py b/test_enum_complete.py\nnew file mode 100644\nindex 000000000..3778744b2\n--- /dev/null\n+++ b/test_enum_complete.py\n@@ -0,0 +1,52 @@\n+\"\"\"Test module to verify enum rendering in function signatures.\"\"\"\n+import enum\n+import inspect\n+from sphinx.util.inspect import stringify_signature\n+\n+\n+class MyEnum(enum.Enum):\n+    \"\"\"Example enum for testing.\"\"\"\n+    ValueA = 10\n+    ValueB = 20\n+    ValueC = \"string_value\"\n+\n+\n+def function_with_enum_default(e: MyEnum = MyEnum.ValueA) -> None:\n+    \"\"\"Function with enum default value.\"\"\"\n+    pass\n+\n+\n+def function_with_multiple_enums(\n+    e1: MyEnum = MyEnum.ValueA,\n+    e2: MyEnum = MyEnum.ValueB,\n+    e3: MyEnum = MyEnum.ValueC\n+) -> None:\n+    \"\"\"Function with multiple enum parameters.\"\"\"\n+    pass\n+\n+\n+def test_enum_signatures():\n+    \"\"\"Test that enum signatures are rendered correctly.\"\"\"\n+    # Test single enum parameter\n+    sig1 = inspect.signature(function_with_enum_default)\n+    str_sig1 = stringify_signature(sig1)\n+    print(f\"Function 1 signature: {str_sig1}\")\n+    assert \"MyEnum.ValueA\" in str_sig1\n+    assert \"<MyEnum.ValueA: 10>\" not in str_sig1\n+    \n+    # Test multiple enum parameters\n+    sig2 = inspect.signature(function_with_multiple_enums)\n+    str_sig2 = stringify_signature(sig2)\n+    print(f\"Function 2 signature: {str_sig2}\")\n+    assert \"MyEnum.ValueA\" in str_sig2\n+    assert \"MyEnum.ValueB\" in str_sig2\n+    assert \"MyEnum.ValueC\" in str_sig2\n+    assert \"<MyEnum.ValueA: 10>\" not in str_sig2\n+    assert \"<MyEnum.ValueB: 20>\" not in str_sig2\n+    assert \"<MyEnum.ValueC: 'string_value'>\" not in str_sig2\n+    \n+    print(\"\\nAll tests passed!\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_enum_signatures()\ndiff --git a/test_enum_edge_cases.py b/test_enum_edge_cases.py\nnew file mode 100644\nindex 000000000..b5aaef7ab\n--- /dev/null\n+++ b/test_enum_edge_cases.py\n@@ -0,0 +1,66 @@\n+\"\"\"Test edge cases for enum object_description.\"\"\"\n+import enum\n+from sphinx.util.inspect import object_description\n+\n+\n+# Test different enum types\n+class IntEnum(enum.IntEnum):\n+    ONE = 1\n+    TWO = 2\n+\n+\n+class StrEnum(enum.Enum):\n+    ALPHA = \"alpha\"\n+    BETA = \"beta\"\n+\n+\n+class MultiValueEnum(enum.Enum):\n+    PAIR = (1, 2)\n+    TRIPLE = (3, 4, 5)\n+\n+\n+class FlagEnum(enum.Flag):\n+    READ = 1\n+    WRITE = 2\n+    EXECUTE = 4\n+\n+\n+def test_edge_cases():\n+    \"\"\"Test various enum types.\"\"\"\n+    # Test IntEnum\n+    print(\"IntEnum:\")\n+    print(f\"  repr: {repr(IntEnum.ONE)}\")\n+    print(f\"  object_description: {object_description(IntEnum.ONE)}\")\n+    \n+    # Test StrEnum\n+    print(\"\\nStrEnum:\")\n+    print(f\"  repr: {repr(StrEnum.ALPHA)}\")\n+    print(f\"  object_description: {object_description(StrEnum.ALPHA)}\")\n+    \n+    # Test MultiValueEnum\n+    print(\"\\nMultiValueEnum:\")\n+    print(f\"  repr: {repr(MultiValueEnum.PAIR)}\")\n+    print(f\"  object_description: {object_description(MultiValueEnum.PAIR)}\")\n+    \n+    # Test FlagEnum\n+    print(\"\\nFlagEnum:\")\n+    print(f\"  repr: {repr(FlagEnum.READ)}\")\n+    print(f\"  object_description: {object_description(FlagEnum.READ)}\")\n+    \n+    # Test combined flags\n+    combined = FlagEnum.READ | FlagEnum.WRITE\n+    print(f\"\\nCombined Flags (READ | WRITE):\")\n+    print(f\"  repr: {repr(combined)}\")\n+    print(f\"  object_description: {object_description(combined)}\")\n+    \n+    # All should show clean format\n+    assert object_description(IntEnum.ONE) == \"IntEnum.ONE\"\n+    assert object_description(StrEnum.ALPHA) == \"StrEnum.ALPHA\"\n+    assert object_description(MultiValueEnum.PAIR) == \"MultiValueEnum.PAIR\"\n+    assert object_description(FlagEnum.READ) == \"FlagEnum.READ\"\n+    \n+    print(\"\\nAll tests passed!\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_edge_cases()\ndiff --git a/test_enum_issue.py b/test_enum_issue.py\nnew file mode 100644\nindex 000000000..944c33553\n--- /dev/null\n+++ b/test_enum_issue.py\n@@ -0,0 +1,20 @@\n+import enum\n+from sphinx.util.inspect import object_description\n+\n+\n+class MyEnum(enum.Enum):\n+    ValueA = 10\n+    ValueB = 20\n+\n+\n+def test_enum_repr():\n+    # Current behavior - shows ugly representation\n+    print(\"Current repr():\", repr(MyEnum.ValueA))\n+    print(\"Current object_description():\", object_description(MyEnum.ValueA))\n+    \n+    # Desired behavior - should show clean representation\n+    print(\"\\nDesired representation:\", f\"{MyEnum.ValueA.__class__.__name__}.{MyEnum.ValueA.name}\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_enum_repr()\ndiff --git a/test_enum_signature_fix.py b/test_enum_signature_fix.py\nnew file mode 100644\nindex 000000000..dea4a4f9f\n--- /dev/null\n+++ b/test_enum_signature_fix.py\n@@ -0,0 +1,119 @@\n+\"\"\"Test for enum signature fix - ensuring enum default values are rendered nicely.\"\"\"\n+import pytest\n+from docutils import nodes\n+from sphinx.testing.fixtures import test_params\n+from sphinx.testing.path import path\n+\n+\n+def test_enum_default_value_in_signature(app):\n+    \"\"\"Test that enum default values in function signatures are rendered cleanly.\"\"\"\n+    # Create test module with enum and function\n+    test_module_content = '''\n+import enum\n+\n+class MyEnum(enum.Enum):\n+    ValueA = 10\n+    ValueB = 20\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    \"\"\"Function with enum default value.\"\"\"\n+    pass\n+'''\n+    \n+    # Write test module\n+    test_module_path = app.srcdir / 'ugly_enum.py'\n+    test_module_path.write_text(test_module_content)\n+    \n+    # Create RST file that documents the function\n+    rst_content = '''\n+.. autofunction:: ugly_enum.ugly_enum_func\n+'''\n+    \n+    # Write RST file\n+    index_rst_path = app.srcdir / 'index.rst'\n+    index_rst_path.write_text(rst_content)\n+    \n+    # Add conf.py\n+    conf_content = '''\n+import sys\n+sys.path.insert(0, '.')\n+\n+extensions = ['sphinx.ext.autodoc']\n+'''\n+    conf_path = app.srcdir / 'conf.py'\n+    conf_path.write_text(conf_content)\n+    \n+    # Build the documentation\n+    app.builder.build_all()\n+    \n+    # Read the generated HTML\n+    with open(app.outdir / 'index.html') as f:\n+        html_content = f.read()\n+    \n+    # Check that the signature contains the clean enum format\n+    assert 'MyEnum.ValueA' in html_content\n+    # Make sure the ugly format is NOT present\n+    assert '<MyEnum.ValueA: 10>' not in html_content\n+    \n+\n+if __name__ == \"__main__\":\n+    # For local testing\n+    from sphinx.testing.path import path\n+    from sphinx.cmd.build import build_main\n+    import tempfile\n+    import os\n+    \n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        srcdir = path(tmpdir) / 'source'\n+        outdir = path(tmpdir) / 'build'\n+        srcdir.makedirs()\n+        \n+        # Create test module\n+        test_module_content = '''\n+import enum\n+\n+class MyEnum(enum.Enum):\n+    ValueA = 10\n+    ValueB = 20\n+\n+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+    \"\"\"Function with enum default value.\"\"\"\n+    pass\n+'''\n+        (srcdir / 'ugly_enum.py').write_text(test_module_content)\n+        \n+        # Create RST\n+        (srcdir / 'index.rst').write_text('.. autofunction:: ugly_enum.ugly_enum_func')\n+        \n+        # Create conf.py\n+        conf_content = '''\n+import sys\n+sys.path.insert(0, '.')\n+\n+extensions = ['sphinx.ext.autodoc']\n+'''\n+        (srcdir / 'conf.py').write_text(conf_content)\n+        \n+        # Build\n+        build_main(['-b', 'html', str(srcdir), str(outdir)])\n+        \n+        # Check result\n+        with open(outdir / 'index.html') as f:\n+            html_content = f.read()\n+            \n+        print(\"Generated HTML contains:\")\n+        import re\n+        # Find the signature in the HTML\n+        sig_match = re.search(r'<code class=\"sig-name descname\">.*?</code>.*?<em class=\"sig-param\">.*?</em>', html_content, re.DOTALL)\n+        if sig_match:\n+            print(sig_match.group(0))\n+            \n+        if 'MyEnum.ValueA' in html_content:\n+            print(\"\u2713 Clean enum format found!\")\n+        else:\n+            print(\"\u2717 Clean enum format NOT found!\")\n+            \n+        if '<MyEnum.ValueA: 10>' in html_content:\n+            print(\"\u2717 Ugly enum format still present!\")\n+        else:\n+            print(\"\u2713 Ugly enum format NOT present!\")\ndiff --git a/test_object_description_enum.py b/test_object_description_enum.py\nnew file mode 100644\nindex 000000000..ff3fb55d6\n--- /dev/null\n+++ b/test_object_description_enum.py\n@@ -0,0 +1,38 @@\n+\"\"\"\n+Test for enum handling in object_description.\n+\n+This test should be added to tests/test_util_inspect.py\n+\"\"\"\n+import enum\n+import pytest\n+from sphinx.util.inspect import object_description\n+\n+\n+class MyEnum(enum.Enum):\n+    ValueA = 10\n+    ValueB = 20\n+\n+\n+class MyStrEnum(enum.Enum):\n+    Alpha = \"alpha\"\n+    Beta = \"beta\"\n+\n+\n+def test_object_description_enum():\n+    \"\"\"Test that enum values are rendered cleanly in object_description.\"\"\"\n+    # Test regular enum with int values\n+    assert object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n+    \n+    # Test enum with string values\n+    assert object_description(MyStrEnum.Alpha) == \"MyStrEnum.Alpha\"\n+    assert object_description(MyStrEnum.Beta) == \"MyStrEnum.Beta\"\n+    \n+    # Make sure the ugly format is not present\n+    assert \"<MyEnum.ValueA: 10>\" not in object_description(MyEnum.ValueA)\n+    assert \"<MyStrEnum.Alpha: 'alpha'>\" not in object_description(MyStrEnum.Alpha)\n+\n+\n+if __name__ == \"__main__\":\n+    test_object_description_enum()\n+    print(\"All tests passed!\")\ndiff --git a/test_sphinx_enum_integration.py b/test_sphinx_enum_integration.py\nnew file mode 100644\nindex 000000000..01b6796d7\n--- /dev/null\n+++ b/test_sphinx_enum_integration.py\n@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+\"\"\"Test the enum fix in a full Sphinx build.\"\"\"\n+\n+import subprocess\n+import tempfile\n+import shutil\n+from pathlib import Path\n+\n+\n+def test_sphinx_enum_fix():\n+    \"\"\"Test enum rendering in a full Sphinx documentation build.\"\"\"\n+    \n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        tmpdir = Path(tmpdir)\n+        srcdir = tmpdir / \"source\"\n+        builddir = tmpdir / \"build\"\n+        srcdir.mkdir()\n+        \n+        # Create the Python module with enum\n+        module_content = '''\n+\"\"\"Test module for enum documentation.\"\"\"\n+import enum\n+\n+\n+class Priority(enum.Enum):\n+    \"\"\"Priority levels for tasks.\"\"\"\n+    LOW = 1\n+    MEDIUM = 2\n+    HIGH = 3\n+\n+\n+def process_task(task_name: str, priority: Priority = Priority.MEDIUM) -> None:\n+    \"\"\"Process a task with given priority.\n+    \n+    Args:\n+        task_name: Name of the task to process\n+        priority: Priority level for the task\n+    \"\"\"\n+    print(f\"Processing {task_name} with priority {priority.name}\")\n+\n+\n+class TaskManager:\n+    \"\"\"Manages tasks with priorities.\"\"\"\n+    \n+    def __init__(self, default_priority: Priority = Priority.LOW):\n+        \"\"\"Initialize task manager.\n+        \n+        Args:\n+            default_priority: Default priority for new tasks\n+        \"\"\"\n+        self.default_priority = default_priority\n+'''\n+        \n+        (srcdir / \"mymodule.py\").write_text(module_content)\n+        \n+        # Create conf.py\n+        conf_content = f'''\n+import sys\n+import os\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+project = 'EnumTest'\n+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']\n+html_theme = 'alabaster'\n+'''\n+        (srcdir / \"conf.py\").write_text(conf_content)\n+        \n+        # Create index.rst\n+        index_content = '''\n+Enum Test Documentation\n+=======================\n+\n+.. automodule:: mymodule\n+   :members:\n+   :undoc-members:\n+   :show-inheritance:\n+'''\n+        (srcdir / \"index.rst\").write_text(index_content)\n+        \n+        # Run sphinx-build\n+        result = subprocess.run(\n+            [\"sphinx-build\", \"-b\", \"html\", str(srcdir), str(builddir)],\n+            capture_output=True,\n+            text=True\n+        )\n+        \n+        print(\"Sphinx build output:\")\n+        print(result.stdout)\n+        if result.stderr:\n+            print(\"Errors:\")\n+            print(result.stderr)\n+        \n+        # Check the generated HTML\n+        html_file = builddir / \"index.html\"\n+        if html_file.exists():\n+            html_content = html_file.read_text()\n+            \n+            # Look for function signatures\n+            print(\"\\nChecking generated HTML for enum rendering...\")\n+            \n+            # Check process_task function\n+            if \"Priority.MEDIUM\" in html_content:\n+                print(\"\u2713 process_task: Clean enum format found (Priority.MEDIUM)\")\n+            else:\n+                print(\"\u2717 process_task: Clean enum format NOT found\")\n+                \n+            if \"<Priority.MEDIUM: 2>\" in html_content:\n+                print(\"\u2717 process_task: Ugly enum format still present!\")\n+            else:\n+                print(\"\u2713 process_task: Ugly enum format NOT present\")\n+                \n+            # Check TaskManager.__init__\n+            if \"Priority.LOW\" in html_content:\n+                print(\"\u2713 TaskManager.__init__: Clean enum format found (Priority.LOW)\")\n+            else:\n+                print(\"\u2717 TaskManager.__init__: Clean enum format NOT found\")\n+                \n+            if \"<Priority.LOW: 1>\" in html_content:\n+                print(\"\u2717 TaskManager.__init__: Ugly enum format still present!\")\n+            else:\n+                print(\"\u2713 TaskManager.__init__: Ugly enum format NOT present\")\n+                \n+            # Save a snippet of the HTML for debugging\n+            import re\n+            # Find all function signatures\n+            sigs = re.findall(r'<em class=\"sig-param\">.*?</em>', html_content, re.DOTALL)\n+            if sigs:\n+                print(\"\\nFound signatures:\")\n+                for sig in sigs[:5]:  # Show first 5\n+                    print(f\"  {sig}\")\n+        else:\n+            print(f\"ERROR: HTML file not found at {html_file}\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_sphinx_enum_fix()\ndiff --git a/tox.ini b/tox.ini\nindex a363e187f..3b8bc12d0 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -27,7 +27,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From 31ec519d3808617e333794493e0aabc5fe5d4f81 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Sun, 30 May 2021 02:15:28 +0900\nSubject: [PATCH] Close #9272: autodoc: Render enum values for the default\n argument value better\n\n---\n CHANGES                    | 1 +\n sphinx/util/inspect.py     | 7 +++++--\n tests/test_util_inspect.py | 9 +++++++++\n 3 files changed, 15 insertions(+), 2 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 64410011e3a..8007636a8cc 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -35,6 +35,7 @@ Features added\n * #8061, #9218: autodoc: Support variable comment for alias classes\n * #3014: autodoc: Add :event:`autodoc-process-bases` to modify the base classes\n   of the class definitions\n+* #9272: autodoc: Render enum values for the default argument value better\n * #3257: autosummary: Support instance attributes for classes\n * #9129: html search: Show search summaries when html_copy_source = False\n * #9120: html theme: Eliminate prompt characters of code-block from copyable\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a7074c8..23dd9e9307f 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -442,14 +442,14 @@ def object_description(object: Any) -> str:\n                      (object_description(key), object_description(object[key]))\n                      for key in sorted_keys)\n             return \"{%s}\" % \", \".join(items)\n-    if isinstance(object, set):\n+    elif isinstance(object, set):\n         try:\n             sorted_values = sorted(object)\n         except TypeError:\n             pass  # Cannot sort set values, fall back to generic repr\n         else:\n             return \"{%s}\" % \", \".join(object_description(x) for x in sorted_values)\n-    if isinstance(object, frozenset):\n+    elif isinstance(object, frozenset):\n         try:\n             sorted_values = sorted(object)\n         except TypeError:\n@@ -457,6 +457,9 @@ def object_description(object: Any) -> str:\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    elif isinstance(object, enum.Enum):\n+        return \"%s.%s\" % (object.__class__.__name__, object.name)\n+\n     try:\n         s = repr(object)\n     except Exception as exc:\ndiff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex de4ad92366b..2f805a87a89 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -10,6 +10,7 @@\n \n import ast\n import datetime\n+import enum\n import functools\n import sys\n import types\n@@ -516,6 +517,14 @@ def __repr__(self):\n     assert \"<CustomType(2)>: 2\" in description\n \n \n+def test_object_description_enum():\n+    class MyEnum(enum.Enum):\n+        FOO = 1\n+        BAR = 2\n+\n+    assert inspect.object_description(MyEnum.FOO) == \"MyEnum.FOO\"\n+\n+\n def test_getslots():\n     class Foo:\n         pass\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9281"}