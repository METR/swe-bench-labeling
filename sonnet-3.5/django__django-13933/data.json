{"instance_id": "django__django-13933", "score": "C", "diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..e03a3803cd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'],\n+                code='invalid_choice',\n+                params={'value': value},\n+            )\n         return value\n \n     def validate(self, value):\n", "gold_standard_diff": "From 1adc09064f88b69b3b565b57502f2a0a32b5f3a8 Mon Sep 17 00:00:00 2001\nFrom: Jerin Peter George <jerinpetergeorge@gmail.com>\nDate: Tue, 26 Jan 2021 12:05:20 +0530\nSubject: [PATCH] Fixed #32347 -- Made ModelChoiceField include the value in\n ValidationError for invalid_choice.\n\n---\n AUTHORS                                        |  1 +\n django/forms/models.py                         |  6 +++++-\n docs/ref/forms/fields.txt                      |  8 ++++++++\n docs/releases/4.0.txt                          |  6 +++++-\n tests/forms_tests/tests/test_error_messages.py | 13 +++++++++++++\n 5 files changed, 32 insertions(+), 2 deletions(-)\n\ndiff --git a/AUTHORS b/AUTHORS\nindex a92baaceb99a..f5c71c7e3061 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -442,6 +442,7 @@ answer newbie questions, and generally made Django that much better:\n     Jeremy Carbaugh <jcarbaugh@gmail.com>\n     Jeremy Dunck <jdunck@gmail.com>\n     Jeremy Lain\u00e9 <jeremy.laine@m4x.org>\n+    Jerin Peter George <jerinpetergeorge@gmail.com>\n     Jesse Young <adunar@gmail.com>\n     Jezeniel Zapanta <jezeniel.zapanta@gmail.com>\n     jhenry <jhenry@theonion.com>\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d1785f..a88c384841d4 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1284,7 +1284,11 @@ def to_python(self, value):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'],\n+                code='invalid_choice',\n+                params={'value': value},\n+            )\n         return value\n \n     def validate(self, value):\ndiff --git a/docs/ref/forms/fields.txt b/docs/ref/forms/fields.txt\nindex b13af1a27025..a4f80831ad3a 100644\n--- a/docs/ref/forms/fields.txt\n+++ b/docs/ref/forms/fields.txt\n@@ -1219,6 +1219,9 @@ generating choices. See :ref:`iterating-relationship-choices` for details.\n     * Validates that the given id exists in the queryset.\n     * Error message keys: ``required``, ``invalid_choice``\n \n+    The ``invalid_choice`` error message may contain ``%(value)s``, which will\n+    be replaced with the selected choice.\n+\n     Allows the selection of a single model object, suitable for representing a\n     foreign key. Note that the default widget for ``ModelChoiceField`` becomes\n     impractical when the number of entries increases. You should avoid using it\n@@ -1307,6 +1310,11 @@ generating choices. See :ref:`iterating-relationship-choices` for details.\n             def label_from_instance(self, obj):\n                 return \"My Object #%i\" % obj.id\n \n+    .. versionchanged:: 4.0\n+\n+        Support for containing ``%(value)s`` in the ``invalid_choice`` error\n+        message was added.\n+\n ``ModelMultipleChoiceField``\n ----------------------------\n \ndiff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt\nindex 1e408c97bda9..99ad826865f5 100644\n--- a/docs/releases/4.0.txt\n+++ b/docs/releases/4.0.txt\n@@ -135,7 +135,11 @@ File Uploads\n Forms\n ~~~~~\n \n-* ...\n+* :class:`~django.forms.ModelChoiceField` now includes the provided value in\n+  the ``params`` argument of a raised\n+  :exc:`~django.core.exceptions.ValidationError` for the ``invalid_choice``\n+  error message. This allows custom error messages to use the ``%(value)s``\n+  placeholder.\n \n Generic Views\n ~~~~~~~~~~~~~\ndiff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 1a6d1386c3d6..340c39546cb3 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -308,3 +308,16 @@ def test_modelchoicefield(self):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n         self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13933"}