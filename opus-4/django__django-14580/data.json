{"instance_id": "django__django-14580", "score": "C", "diff": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..072a2efc14 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -273,7 +273,7 @@ class TupleSerializer(BaseSequenceSerializer):\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\ndiff --git a/test_bug_fix.py b/test_bug_fix.py\nnew file mode 100644\nindex 0000000000..5b527f6676\n--- /dev/null\n+++ b/test_bug_fix.py\n@@ -0,0 +1,113 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test that verifies the fix for the missing import statement bug.\n+This test creates a migration exactly as described in the issue and verifies it works.\n+\"\"\"\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    INSTALLED_APPS=[],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+django.setup()\n+\n+from io import StringIO\n+from django.db import models\n+from django.db.migrations import CreateModel, Migration\n+from django.db.migrations.writer import MigrationWriter\n+\n+# Create test classes as described in the issue\n+class MyField(models.TextField):\n+    pass\n+\n+class MyBaseModel(models.Model):\n+    class Meta:\n+        abstract = True\n+\n+class MyMixin:\n+    pass\n+\n+# Create the migration operation\n+operation = CreateModel(\n+    name='MyModel',\n+    fields=[\n+        ('name', MyField(primary_key=True)),\n+    ],\n+    options={\n+        'abstract': False,\n+    },\n+    bases=(MyMixin, models.Model),\n+)\n+\n+# Create a migration with this operation\n+class TestMigration(Migration):\n+    initial = True\n+    dependencies = []\n+    operations = [operation]\n+\n+# Write the migration\n+writer = MigrationWriter(TestMigration)\n+migration_string = writer.as_string()\n+\n+print(\"Generated migration:\")\n+print(\"=\" * 80)\n+print(migration_string)\n+print(\"=\" * 80)\n+\n+# Check if the migration is valid Python\n+print(\"\\nChecking if migration is valid Python...\")\n+try:\n+    compiled = compile(migration_string, '<string>', 'exec')\n+    print(\"\u2713 Migration compiles successfully\")\n+    \n+    # Try to execute it to check for NameError\n+    import sys\n+    import tempfile\n+    import os\n+    \n+    # Create a temporary module to test execution\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:\n+        f.write(migration_string)\n+        temp_file = f.name\n+    \n+    # Import the module to check for NameError\n+    import importlib.util\n+    spec = importlib.util.spec_from_file_location(\"test_migration\", temp_file)\n+    module = importlib.util.module_from_spec(spec)\n+    \n+    # Add necessary modules to sys.modules for the import\n+    class MockModule:\n+        class MyMixin:\n+            pass\n+        class MyField(models.TextField):\n+            pass\n+    \n+    sys.modules['__main__'] = MockModule()\n+    \n+    try:\n+        spec.loader.exec_module(module)\n+        print(\"\u2713 Migration executes without NameError\")\n+    except NameError as e:\n+        print(f\"\u2717 NameError occurred: {e}\")\n+    finally:\n+        os.unlink(temp_file)\n+        \n+except SyntaxError as e:\n+    print(f\"\u2717 Migration has syntax error: {e}\")\n+\n+# Check for the specific issue mentioned in the bug report\n+print(\"\\nChecking for the specific bug...\")\n+if \"bases=(MyMixin, models.Model)\" in migration_string or \"bases=(__main__.MyMixin, models.Model)\" in migration_string:\n+    if \"from django.db import models\" in migration_string:\n+        print(\"\u2713 BUG FIXED: Migration correctly imports 'models' when using 'models.Model' in bases\")\n+    else:\n+        print(\"\u2717 BUG PRESENT: Migration uses 'models.Model' in bases but doesn't import 'models'\")\n+else:\n+    print(\"? Could not find the expected bases pattern in the migration\")\ndiff --git a/test_full_migration.py b/test_full_migration.py\nnew file mode 100644\nindex 0000000000..caa11b3681\n--- /dev/null\n+++ b/test_full_migration.py\n@@ -0,0 +1,124 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test script to verify the fix for the missing import statement in generated migration\n+\"\"\"\n+import os\n+import tempfile\n+import subprocess\n+\n+# Create a test Django project structure\n+test_dir = tempfile.mkdtemp()\n+project_dir = os.path.join(test_dir, 'test_project')\n+os.makedirs(project_dir)\n+\n+# Create basic Django project files\n+manage_py = \"\"\"#!/usr/bin/env python\n+import os\n+import sys\n+\n+if __name__ == '__main__':\n+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n+    from django.core.management import execute_from_command_line\n+    execute_from_command_line(sys.argv)\n+\"\"\"\n+\n+settings_py = \"\"\"\n+SECRET_KEY = 'test'\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'test_app',\n+]\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\n+\"\"\"\n+\n+# Create the project structure\n+with open(os.path.join(project_dir, 'manage.py'), 'w') as f:\n+    f.write(manage_py)\n+os.chmod(os.path.join(project_dir, 'manage.py'), 0o755)\n+\n+with open(os.path.join(project_dir, '__init__.py'), 'w') as f:\n+    f.write('')\n+\n+with open(os.path.join(project_dir, 'settings.py'), 'w') as f:\n+    f.write(settings_py)\n+\n+# Create app\n+app_dir = os.path.join(project_dir, 'test_app')\n+os.makedirs(app_dir)\n+\n+with open(os.path.join(app_dir, '__init__.py'), 'w') as f:\n+    f.write('')\n+\n+# Create models with the exact structure from the issue\n+models_py = \"\"\"from django.db import models\n+\n+class MyField(models.TextField):\n+    pass\n+\n+class MyBaseModel(models.Model):\n+    class Meta:\n+        abstract = True\n+\n+class MyMixin:\n+    pass\n+\n+class MyModel(MyMixin, MyBaseModel):\n+    name = MyField(primary_key=True)\n+\"\"\"\n+\n+with open(os.path.join(app_dir, 'models.py'), 'w') as f:\n+    f.write(models_py)\n+\n+# Create migrations directory\n+migrations_dir = os.path.join(app_dir, 'migrations')\n+os.makedirs(migrations_dir)\n+with open(os.path.join(migrations_dir, '__init__.py'), 'w') as f:\n+    f.write('')\n+\n+# Run makemigrations\n+print(\"Running makemigrations...\")\n+os.chdir(project_dir)\n+result = subprocess.run([\n+    'python', 'manage.py', 'makemigrations', 'test_app'\n+], capture_output=True, text=True)\n+\n+print(f\"makemigrations output: {result.stdout}\")\n+if result.stderr:\n+    print(f\"makemigrations errors: {result.stderr}\")\n+\n+# Check the generated migration file\n+migration_file = os.path.join(migrations_dir, '0001_initial.py')\n+if os.path.exists(migration_file):\n+    print(\"\\nGenerated migration file:\")\n+    print(\"=\" * 80)\n+    with open(migration_file, 'r') as f:\n+        migration_content = f.read()\n+        print(migration_content)\n+    print(\"=\" * 80)\n+    \n+    # Check if the migration is valid Python\n+    print(\"\\nTesting if migration is valid Python...\")\n+    try:\n+        compile(migration_content, migration_file, 'exec')\n+        print(\"\u2713 Migration file is valid Python code\")\n+    except SyntaxError as e:\n+        print(f\"\u2717 Migration file has syntax error: {e}\")\n+    \n+    # Check if proper imports are present\n+    if \"models.Model\" in migration_content:\n+        if \"from django.db import models\" in migration_content:\n+            print(\"\u2713 Migration correctly imports 'models' when using 'models.Model'\")\n+        else:\n+            print(\"\u2717 ERROR: Migration uses 'models.Model' but doesn't import 'models'!\")\n+else:\n+    print(\"No migration file was generated!\")\n+\n+# Clean up\n+import shutil\n+shutil.rmtree(test_dir)\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..db55fb21c2\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,95 @@\n+import os\n+import tempfile\n+import shutil\n+import django\n+from django.conf import settings\n+\n+# Set up Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['test_app'],\n+)\n+django.setup()\n+\n+from django.db import models\n+from django.db.migrations.writer import MigrationWriter\n+from django.db.migrations import CreateModel\n+\n+# Create a temporary app directory structure\n+app_name = 'test_app'\n+temp_dir = tempfile.mkdtemp()\n+app_dir = os.path.join(temp_dir, app_name)\n+os.makedirs(app_dir)\n+\n+# Create __init__.py\n+with open(os.path.join(app_dir, '__init__.py'), 'w') as f:\n+    f.write('')\n+\n+# Create models.py\n+models_content = '''from django.db import models\n+\n+class MyField(models.TextField):\n+    pass\n+\n+class MyBaseModel(models.Model):\n+    class Meta:\n+        abstract = True\n+\n+class MyMixin:\n+    pass\n+\n+class MyModel(MyMixin, MyBaseModel):\n+    name = MyField(primary_key=True)\n+'''\n+\n+with open(os.path.join(app_dir, 'models.py'), 'w') as f:\n+    f.write(models_content)\n+\n+# Import the models\n+import sys\n+sys.path.insert(0, temp_dir)\n+from test_app.models import MyField, MyMixin, MyModel\n+\n+# Create a migration operation\n+operation = CreateModel(\n+    name='MyModel',\n+    fields=[\n+        ('name', MyField(primary_key=True)),\n+    ],\n+    options={\n+        'abstract': False,\n+    },\n+    bases=(MyMixin, models.Model),\n+)\n+\n+# Create a migration\n+from django.db.migrations import Migration\n+\n+class TestMigration(Migration):\n+    initial = True\n+    dependencies = []\n+    operations = [operation]\n+\n+# Write the migration\n+writer = MigrationWriter(TestMigration)\n+migration_string = writer.as_string()\n+\n+print(\"Generated migration:\")\n+print(\"=\" * 80)\n+print(migration_string)\n+print(\"=\" * 80)\n+\n+# Check if the migration has the necessary imports\n+if \"models.Model\" in migration_string and \"from django.db import models\" not in migration_string:\n+    print(\"\\nERROR: Migration uses models.Model but doesn't import models!\")\n+else:\n+    print(\"\\nOK: Migration has necessary imports\")\n+\n+# Clean up\n+shutil.rmtree(temp_dir)\ndiff --git a/test_simple.py b/test_simple.py\nnew file mode 100644\nindex 0000000000..a1d44adad4\n--- /dev/null\n+++ b/test_simple.py\n@@ -0,0 +1,44 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Test script to reproduce the issue with missing import statement in generated migration\n+\"\"\"\n+from django.db import models\n+from django.db.migrations.serializer import serializer_factory\n+\n+# Test serializing models.Model type directly\n+print(\"Testing TypeSerializer with models.Model:\")\n+print(\"-\" * 50)\n+\n+value = models.Model\n+serializer = serializer_factory(value)\n+result, imports = serializer.serialize()\n+\n+print(f\"Value: {value}\")\n+print(f\"Serialized result: {result}\")\n+print(f\"Required imports: {imports}\")\n+print()\n+\n+# Test serializing a tuple with models.Model\n+print(\"Testing TupleSerializer with (MyMixin, models.Model):\")\n+print(\"-\" * 50)\n+\n+class MyMixin:\n+    pass\n+\n+value = (MyMixin, models.Model)\n+serializer = serializer_factory(value)\n+result, imports = serializer.serialize()\n+\n+print(f\"Value: {value}\")\n+print(f\"Serialized result: {result}\")\n+print(f\"Required imports: {imports}\")\n+print()\n+\n+# Check if the imports are correct\n+print(\"Analysis:\")\n+print(\"-\" * 50)\n+if \"models.Model\" in result and not any(\"models\" in imp for imp in imports):\n+    print(\"ERROR: The serialized result contains 'models.Model' but no import for 'models' is included!\")\n+    print(\"This will cause a NameError when the migration is executed.\")\n+else:\n+    print(\"OK: All necessary imports are included.\")\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a590ff4398..4d76611d43 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,6 +658,13 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_serialize_type_model(self):\n+        \"\"\"Test that models.Model serialization includes proper imports.\"\"\"\n+        self.assertSerializedResultEqual(\n+            models.Model,\n+            (\"models.Model\", {\"from django.db import models\"})\n+        )\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n", "gold_standard_diff": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda55..6e78462e95db 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -273,7 +273,7 @@ def _format(self):\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", ['from django.db import models']),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a590ff4398a7..471194ffc224 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,6 +658,13 @@ def test_serialize_functools_partialmethod(self):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14580"}