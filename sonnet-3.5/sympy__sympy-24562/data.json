{"instance_id": "sympy__sympy-24562", "score": "I", "diff": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 52f7ea45ad..c863af16f7 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1625,6 +1625,12 @@ def __new__(cls, p, q=None, gcd=None):\n             q = 1\n             gcd = 1\n \n+        # Handle the case when both p and q are strings\n+        if isinstance(p, str) and isinstance(q, str):\n+            fp = fractions.Fraction(p)\n+            fq = fractions.Fraction(q)\n+            return Rational(fp.numerator * fq.denominator, fp.denominator * fq.numerator, 1)\n+\n         if not isinstance(p, SYMPY_INTS):\n             p = Rational(p)\n             q *= p.q\ndiff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8baf408933..37edf96135 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -1583,6 +1583,10 @@ def test_Rational_gcd_lcm_cofactors():\n     assert Rational(4, 3).gcd(Rational(2, 9)) == Rational(2, 9)\n     assert Rational(4, 3).lcm(Rational(2, 9)) == Rational(4, 3)\n     assert Rational(4, 5).gcd(Rational(2, 9)) == Rational(2, 45)\n+def test_Rational_string_input():\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('0.5', '100') != Rational(1, 100100)\n+    assert Rational(0.5, 100) == Rational(1, 200)\n     assert Rational(4, 5).lcm(Rational(2, 9)) == Integer(4)\n     assert Rational(5, 9).lcm(Rational(3, 7)) == Rational(Integer(5).lcm(3),Integer(9).gcd(7))\n \n", "gold_standard_diff": "From 55e64be745db6bac7930adf7607e902183ad3ef1 Mon Sep 17 00:00:00 2001\nFrom: Abhishek Patidar <1e9abhi1e10@gmail.com>\nDate: Sat, 21 Jan 2023 17:35:17 +0530\nSubject: [PATCH] fixes rational calc value error\n\n---\n sympy/core/numbers.py            | 8 +++++---\n sympy/core/tests/test_numbers.py | 7 +++++++\n 2 files changed, 12 insertions(+), 3 deletions(-)\n\ndiff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 3b1aec24296e..ae14d9809d02 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1624,10 +1624,11 @@ def __new__(cls, p, q=None, gcd=None):\n \n             q = 1\n             gcd = 1\n+        Q = 1\n \n         if not isinstance(p, SYMPY_INTS):\n             p = Rational(p)\n-            q *= p.q\n+            Q *= p.q\n             p = p.p\n         else:\n             p = int(p)\n@@ -1635,9 +1636,10 @@ def __new__(cls, p, q=None, gcd=None):\n         if not isinstance(q, SYMPY_INTS):\n             q = Rational(q)\n             p *= q.q\n-            q = q.p\n+            Q *= q.p\n         else:\n-            q = int(q)\n+            Q *= int(q)\n+        q = Q\n \n         # p and q are now ints\n         if q == 0:\ndiff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e42e2b0c70a..ee8867abe96e 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -366,6 +366,13 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543():\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n \n def test_Number_new():\n     \"\"\"\"\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/24562"}