{"instance_id": "django__django-16315", "score": "I", "diff": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 62273fc43c..59cd32283c 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -353,12 +353,13 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n+            field_dict = {field.name: field for field in fields}\n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(self.quote_name(field_dict[field].column) for field in unique_fields),\n                 \", \".join(\n                     [\n-                        f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        f\"{self.quote_name(field_dict[field].column)} = EXCLUDED.{self.quote_name(field_dict[field].column)}\"\n+                        for field in update_fields\n                     ]\n                 ),\n             )\n", "gold_standard_diff": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be8580f2c446..cf419cb8cf7f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -720,7 +720,6 @@ def _check_bulk_create_options(\n                     \"Unique fields that can trigger the upsert must be provided.\"\n                 )\n             # Updating primary keys and non-concrete fields is forbidden.\n-            update_fields = [self.model._meta.get_field(name) for name in update_fields]\n             if any(not f.concrete or f.many_to_many for f in update_fields):\n                 raise ValueError(\n                     \"bulk_create() can only be used with concrete fields in \"\n@@ -732,9 +731,6 @@ def _check_bulk_create_options(\n                     \"update_fields.\"\n                 )\n             if unique_fields:\n-                unique_fields = [\n-                    self.model._meta.get_field(name) for name in unique_fields\n-                ]\n                 if any(not f.concrete or f.many_to_many for f in unique_fields):\n                     raise ValueError(\n                         \"bulk_create() can only be used with concrete fields \"\n@@ -786,8 +782,11 @@ def bulk_create(\n         if unique_fields:\n             # Primary key is allowed in unique_fields.\n             unique_fields = [\n-                opts.pk.name if name == \"pk\" else name for name in unique_fields\n+                self.model._meta.get_field(opts.pk.name if name == \"pk\" else name)\n+                for name in unique_fields\n             ]\n+        if update_fields:\n+            update_fields = [self.model._meta.get_field(name) for name in update_fields]\n         on_conflict = self._check_bulk_create_options(\n             ignore_conflicts,\n             update_conflicts,\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0562a71dd118..caf36382b545 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1725,8 +1725,8 @@ def as_sql(self):\n         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(\n             fields,\n             self.query.on_conflict,\n-            self.query.update_fields,\n-            self.query.unique_fields,\n+            (f.column for f in self.query.update_fields),\n+            (f.column for f in self.query.unique_fields),\n         )\n         if (\n             self.returning_fields\ndiff --git a/docs/releases/4.1.4.txt b/docs/releases/4.1.4.txt\nindex 7cdd2521ea16..509135f3b2b0 100644\n--- a/docs/releases/4.1.4.txt\n+++ b/docs/releases/4.1.4.txt\n@@ -23,3 +23,6 @@ Bugfixes\n \n * Fixed a bug in Django 4.1 that caused a crash of ``QuerySet.bulk_create()``\n   with ``\"pk\"`` in ``unique_fields`` (:ticket:`34177`).\n+\n+* Fixed a bug in Django 4.1 that caused a crash of ``QuerySet.bulk_create()``\n+  on fields with ``db_column`` (:ticket:`34171`).\ndiff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex 27abc416bd24..8a21c7dfa144 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -69,6 +69,11 @@ class TwoFields(models.Model):\n     name = models.CharField(max_length=15, null=True)\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class UpsertConflict(models.Model):\n     number = models.IntegerField(unique=True)\n     rank = models.IntegerField()\ndiff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex 6c490d1235aa..a5050c9b0bf3 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -21,6 +21,7 @@\n from .models import (\n     BigAutoFieldModel,\n     Country,\n+    FieldsWithDbColumns,\n     NoFields,\n     NullableFields,\n     Pizzeria,\n@@ -772,3 +773,34 @@ def test_update_conflicts_unique_fields(self):\n     @skipIfDBFeature(\"supports_update_conflicts_with_target\")\n     def test_update_conflicts_no_unique_fields(self):\n         self._test_update_conflicts([])\n+\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_update_conflicts_unique_fields_update_fields_db_column(self):\n+        FieldsWithDbColumns.objects.bulk_create(\n+            [\n+                FieldsWithDbColumns(rank=1, name=\"a\"),\n+                FieldsWithDbColumns(rank=2, name=\"b\"),\n+            ]\n+        )\n+        self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            FieldsWithDbColumns(rank=1, name=\"c\"),\n+            FieldsWithDbColumns(rank=2, name=\"d\"),\n+        ]\n+        FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n+        self.assertCountEqual(\n+            FieldsWithDbColumns.objects.values(\"rank\", \"name\"),\n+            [\n+                {\"rank\": 1, \"name\": \"c\"},\n+                {\"rank\": 2, \"name\": \"d\"},\n+            ],\n+        )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16315"}