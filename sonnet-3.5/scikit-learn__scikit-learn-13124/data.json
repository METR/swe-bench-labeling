{"instance_id": "scikit-learn__scikit-learn-13124", "score": "I", "diff": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 24394f869..f51ca2e7e 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -575,33 +575,37 @@ class StratifiedKFold(_BaseKFold):\n         .. versionchanged:: 0.20\n             ``n_splits`` default value will change from 3 to 5 in v0.22.\n \n-    shuffle : boolean, optional\n-        Whether to shuffle each stratification of the data before splitting\n-        into batches.\n+    shuffle : boolean, optional, default=False\n+        Whether to shuffle the data within each class before splitting\n+        into batches. This ensures that the samples within each fold are\n+        randomly selected while still preserving the overall percentage\n+        of samples for each class.\n \n     random_state : int, RandomState instance or None, optional, default=None\n-        If int, random_state is the seed used by the random number generator;\n-        If RandomState instance, random_state is the random number generator;\n-        If None, the random number generator is the RandomState instance used\n-        by `np.random`. Used when ``shuffle`` == True.\n+        Controls the randomness of the shuffling. Pass an int for reproducible\n+        output across multiple function calls. See sklearn.utils.check_random_state.\n+        Used when ``shuffle`` == True.\n \n     Examples\n     --------\n     >>> import numpy as np\n     >>> from sklearn.model_selection import StratifiedKFold\n-    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n-    >>> y = np.array([0, 0, 1, 1])\n-    >>> skf = StratifiedKFold(n_splits=2)\n+    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4], [5, 6], [7, 8]])\n+    >>> y = np.array([0, 0, 1, 1, 2, 2])\n+    >>> skf = StratifiedKFold(n_splits=2, shuffle=True, random_state=42)\n     >>> skf.get_n_splits(X, y)\n     2\n     >>> print(skf)  # doctest: +NORMALIZE_WHITESPACE\n-    StratifiedKFold(n_splits=2, random_state=None, shuffle=False)\n+    StratifiedKFold(n_splits=2, random_state=42, shuffle=True)\n     >>> for train_index, test_index in skf.split(X, y):\n     ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n     ...    X_train, X_test = X[train_index], X[test_index]\n     ...    y_train, y_test = y[train_index], y[test_index]\n-    TRAIN: [1 3] TEST: [0 2]\n-    TRAIN: [0 2] TEST: [1 3]\n+    ...    print(\"TRAIN labels:\", y_train, \"TEST labels:\", y_test)\n+    TRAIN: [1 2 4] TEST: [0 3 5]\n+    TRAIN labels: [0 1 2] TEST labels: [0 1 2]\n+    TRAIN: [0 3 5] TEST: [1 2 4]\n+    TRAIN labels: [0 1 2] TEST labels: [0 1 2]\n \n     Notes\n     -----\n@@ -620,7 +624,7 @@ class StratifiedKFold(_BaseKFold):\n         super().__init__(n_splits, shuffle, random_state)\n \n     def _make_test_folds(self, X, y=None):\n-        rng = self.random_state\n+        rng = check_random_state(self.random_state)\n         y = np.asarray(y)\n         type_of_target_y = type_of_target(y)\n         allowed_target_types = ('binary', 'multiclass')\n@@ -645,29 +649,26 @@ class StratifiedKFold(_BaseKFold):\n                            \" be less than n_splits=%d.\"\n                            % (min_groups, self.n_splits)), Warning)\n \n-        # pre-assign each sample to a test fold index using individual KFold\n-        # splitting strategies for each class so as to respect the balance of\n-        # classes\n-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n-        # will break when the data is not 100% stratifiable for all classes.\n-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n-        per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n-            for count in y_counts]\n+        # Shuffle the data within each class\n+        indices = np.arange(n_samples)\n+        for cls in unique_y:\n+            cls_mask = y == cls\n+            if self.shuffle:\n+                rng.shuffle(indices[cls_mask])\n \n+        # Assign samples to folds\n         test_folds = np.zeros(n_samples, dtype=np.int)\n-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n-                cls_test_folds = test_folds[y == cls]\n-                # the test split can be too big because we used\n-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n-                # stratifiable for all the classes\n-                # (we use a warning instead of raising an exception)\n-                # If this is the case, let's trim it:\n-                test_split = test_split[test_split < len(cls_test_folds)]\n-                cls_test_folds[test_split] = test_fold_indices\n-                test_folds[y == cls] = cls_test_folds\n+        for cls in unique_y:\n+            cls_mask = y == cls\n+            cls_indices = indices[cls_mask]\n+            n_cls_samples = cls_mask.sum()\n+            fold_sizes = np.full(self.n_splits, n_cls_samples // self.n_splits, dtype=int)\n+            fold_sizes[:n_cls_samples % self.n_splits] += 1\n+            current = 0\n+            for fold_size, fold_idx in zip(fold_sizes, range(self.n_splits)):\n+                start, stop = current, current + fold_size\n+                test_folds[cls_indices[start:stop]] = fold_idx\n+                current = stop\n \n         return test_folds\n \n", "gold_standard_diff": "diff --git a/doc/whats_new/v0.21.rst b/doc/whats_new/v0.21.rst\nindex fdd0230fc840b..3d7393eb901e5 100644\n--- a/doc/whats_new/v0.21.rst\n+++ b/doc/whats_new/v0.21.rst\n@@ -200,6 +200,11 @@ Support for Python 3.4 and below has been officially dropped.\n   :func:`~model_selection.validation_curve` only the latter is required.\n   :issue:`12613` and :issue:`12669` by :user:`Marc Torrellas <marctorrellas>`.\n \n+- |Fix| Fixed a bug where :class:`model_selection.StratifiedKFold`\n+  shuffles each class's samples with the same ``random_state``,\n+  making ``shuffle=True`` ineffective.\n+  :issue:`13124` by :user:`Hanmin Qin <qinhanmin2014>`.\n+\n :mod:`sklearn.neighbors`\n ........................\n \ndiff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 21ffbc49a2004..e8d46faac91d9 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -576,8 +576,7 @@ class StratifiedKFold(_BaseKFold):\n             ``n_splits`` default value will change from 3 to 5 in v0.22.\n \n     shuffle : boolean, optional\n-        Whether to shuffle each stratification of the data before splitting\n-        into batches.\n+        Whether to shuffle each class's samples before splitting into batches.\n \n     random_state : int, RandomState instance or None, optional, default=None\n         If int, random_state is the seed used by the random number generator;\n@@ -620,7 +619,7 @@ def __init__(self, n_splits='warn', shuffle=False, random_state=None):\n         super().__init__(n_splits, shuffle, random_state)\n \n     def _make_test_folds(self, X, y=None):\n-        rng = self.random_state\n+        rng = check_random_state(self.random_state)\n         y = np.asarray(y)\n         type_of_target_y = type_of_target(y)\n         allowed_target_types = ('binary', 'multiclass')\ndiff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 2be8d172ef822..cab88fb669db2 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,17 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Ensure that we shuffle each class's samples with different\n+    # random_state in StratifiedKFold\n+    # See https://github.com/scikit-learn/scikit-learn/pull/13124\n+    X = np.arange(10)\n+    y = [0] * 5 + [1] * 5\n+    kf1 = StratifiedKFold(5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(5, shuffle=True, random_state=1)\n+    test_set1 = sorted([tuple(s[1]) for s in kf1.split(X, y)])\n+    test_set2 = sorted([tuple(s[1]) for s in kf2.split(X, y)])\n+    assert test_set1 != test_set2\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/13124"}