{"instance_id": "django__django-14608", "score": "C", "diff": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..1b0d4554e0 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,7 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n \n     def clean(self):\n         \"\"\"\ndiff --git a/test_formset_comprehensive.py b/test_formset_comprehensive.py\nnew file mode 100644\nindex 0000000000..07cfc5943e\n--- /dev/null\n+++ b/test_formset_comprehensive.py\n@@ -0,0 +1,132 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+django.setup()\n+\n+from django import forms\n+from django.forms import formset_factory\n+from django.core.exceptions import ValidationError\n+\n+\n+class SimpleForm(forms.Form):\n+    name = forms.CharField()\n+    email = forms.EmailField()\n+\n+\n+# Test case 1: Custom clean method raises ValidationError\n+class CleanErrorFormSet(forms.BaseFormSet):\n+    def clean(self):\n+        raise ValidationError(\"This is a non-form error from clean()\")\n+\n+\n+# Test case 2: Management form errors\n+def test_management_form_errors():\n+    FormSet = formset_factory(SimpleForm)\n+    \n+    # Invalid management form data\n+    data = {\n+        # Missing TOTAL_FORMS\n+        'form-INITIAL_FORMS': '0',\n+    }\n+    \n+    formset = FormSet(data)\n+    is_valid = formset.is_valid()\n+    \n+    print(\"Test: Management form errors\")\n+    print(f\"Is valid: {is_valid}\")\n+    print(f\"Non-form errors HTML: {formset.non_form_errors().as_ul()}\")\n+    print(f\"Has 'nonform' class: {'nonform' in formset.non_form_errors().as_ul()}\")\n+    print()\n+\n+\n+# Test case 3: Max forms validation\n+def test_max_forms_validation():\n+    FormSet = formset_factory(SimpleForm, max_num=1, validate_max=True)\n+    \n+    data = {\n+        'form-TOTAL_FORMS': '2',\n+        'form-INITIAL_FORMS': '0',\n+        'form-MIN_NUM_FORMS': '0',\n+        'form-MAX_NUM_FORMS': '1',\n+        'form-0-name': 'Test1',\n+        'form-0-email': 'test1@example.com',\n+        'form-1-name': 'Test2',\n+        'form-1-email': 'test2@example.com',\n+    }\n+    \n+    formset = FormSet(data)\n+    is_valid = formset.is_valid()\n+    \n+    print(\"Test: Max forms validation\")\n+    print(f\"Is valid: {is_valid}\")\n+    print(f\"Non-form errors HTML: {formset.non_form_errors().as_ul()}\")\n+    print(f\"Has 'nonform' class: {'nonform' in formset.non_form_errors().as_ul()}\")\n+    print()\n+\n+\n+# Test case 4: Min forms validation\n+def test_min_forms_validation():\n+    FormSet = formset_factory(SimpleForm, min_num=2, validate_min=True)\n+    \n+    data = {\n+        'form-TOTAL_FORMS': '1',\n+        'form-INITIAL_FORMS': '0',\n+        'form-MIN_NUM_FORMS': '2',\n+        'form-MAX_NUM_FORMS': '1000',\n+        'form-0-name': 'Test1',\n+        'form-0-email': 'test1@example.com',\n+    }\n+    \n+    formset = FormSet(data)\n+    is_valid = formset.is_valid()\n+    \n+    print(\"Test: Min forms validation\")\n+    print(f\"Is valid: {is_valid}\")\n+    print(f\"Non-form errors HTML: {formset.non_form_errors().as_ul()}\")\n+    print(f\"Has 'nonform' class: {'nonform' in formset.non_form_errors().as_ul()}\")\n+    print()\n+\n+\n+# Test case 5: Custom error class\n+class CustomErrorList(forms.utils.ErrorList):\n+    def as_ul(self):\n+        if not self.data:\n+            return ''\n+        return f'<div class=\"custom-errors {self.error_class}\">{super().as_ul()}</div>'\n+\n+\n+def test_custom_error_class():\n+    FormSet = formset_factory(SimpleForm, formset=CleanErrorFormSet)\n+    \n+    data = {\n+        'form-TOTAL_FORMS': '1',\n+        'form-INITIAL_FORMS': '0',\n+        'form-MIN_NUM_FORMS': '0',\n+        'form-MAX_NUM_FORMS': '1000',\n+        'form-0-name': 'Test',\n+        'form-0-email': 'test@example.com',\n+    }\n+    \n+    formset = FormSet(data, error_class=CustomErrorList)\n+    is_valid = formset.is_valid()\n+    \n+    print(\"Test: Custom error class\")\n+    print(f\"Is valid: {is_valid}\")\n+    print(f\"Non-form errors HTML: {formset.non_form_errors().as_ul()}\")\n+    print(f\"Has 'nonform' class: {'nonform' in formset.non_form_errors().as_ul()}\")\n+    print()\n+\n+\n+if __name__ == \"__main__\":\n+    test_management_form_errors()\n+    test_max_forms_validation()\n+    test_min_forms_validation()\n+    test_custom_error_class()\ndiff --git a/test_formset_nonform_class.py b/test_formset_nonform_class.py\nnew file mode 100644\nindex 0000000000..cb786a1970\n--- /dev/null\n+++ b/test_formset_nonform_class.py\n@@ -0,0 +1,107 @@\n+\"\"\"\n+Test for the 'nonform' CSS class in FormSet non-form errors\n+\"\"\"\n+from django.core.exceptions import ValidationError\n+from django.forms import BaseFormSet, Form, CharField, formset_factory\n+from django.test import SimpleTestCase\n+\n+\n+class TestFormSetNonFormClass(SimpleTestCase):\n+    \"\"\"Test that formset non-form errors include the 'nonform' CSS class.\"\"\"\n+    \n+    def test_clean_error_css_class(self):\n+        \"\"\"Non-form errors from clean() should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        class TestFormSet(BaseFormSet):\n+            def clean(self):\n+                raise ValidationError(\"This is a non-form error\")\n+        \n+        FormSet = formset_factory(TestForm, formset=TestFormSet)\n+        data = {\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-0-name': 'Test',\n+        }\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('This is a non-form error', html)\n+    \n+    def test_max_forms_error_css_class(self):\n+        \"\"\"Max forms validation errors should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        FormSet = formset_factory(TestForm, max_num=1, validate_max=True)\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-0-name': 'Test1',\n+            'form-1-name': 'Test2',\n+        }\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('Please submit at most 1 form', html)\n+    \n+    def test_min_forms_error_css_class(self):\n+        \"\"\"Min forms validation errors should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        FormSet = formset_factory(TestForm, min_num=2, validate_min=True)\n+        data = {\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-0-name': 'Test1',\n+        }\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('Please submit at least 2 forms', html)\n+    \n+    def test_management_form_error_css_class(self):\n+        \"\"\"Management form errors should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        FormSet = formset_factory(TestForm)\n+        data = {}  # Missing management form data\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('ManagementForm data is missing', html)\ndiff --git a/test_formset_nonform_css.py b/test_formset_nonform_css.py\nnew file mode 100644\nindex 0000000000..901d5850fa\n--- /dev/null\n+++ b/test_formset_nonform_css.py\n@@ -0,0 +1,62 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+)\n+django.setup()\n+\n+from django import forms\n+from django.forms import formset_factory\n+from django.core.exceptions import ValidationError\n+\n+\n+class SimpleForm(forms.Form):\n+    name = forms.CharField()\n+\n+\n+class CustomFormSet(forms.BaseFormSet):\n+    def clean(self):\n+        # Raise a non-form error\n+        raise ValidationError(\"This is a non-form error\")\n+\n+\n+def test_nonform_css_class():\n+    FormSet = formset_factory(SimpleForm, formset=CustomFormSet)\n+    \n+    # Create formset with invalid data to trigger clean()\n+    data = {\n+        'form-TOTAL_FORMS': '1',\n+        'form-INITIAL_FORMS': '0',\n+        'form-MIN_NUM_FORMS': '0',\n+        'form-MAX_NUM_FORMS': '1000',\n+        'form-0-name': 'Test',\n+    }\n+    \n+    formset = FormSet(data)\n+    \n+    # Trigger validation\n+    is_valid = formset.is_valid()\n+    print(f\"Is valid: {is_valid}\")\n+    \n+    # Get non-form errors\n+    non_form_errors = formset.non_form_errors()\n+    print(f\"Non-form errors: {non_form_errors}\")\n+    print(f\"Non-form errors class: {non_form_errors.error_class}\")\n+    \n+    # Render as HTML to see CSS classes\n+    html = non_form_errors.as_ul()\n+    print(f\"HTML output: {html}\")\n+    \n+    # Check if 'nonform' CSS class is present\n+    has_nonform_class = 'nonform' in html\n+    print(f\"Has 'nonform' CSS class: {has_nonform_class}\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_nonform_css_class()\ndiff --git a/test_modelformset_nonform.py b/test_modelformset_nonform.py\nnew file mode 100644\nindex 0000000000..472f1591de\n--- /dev/null\n+++ b/test_modelformset_nonform.py\n@@ -0,0 +1,71 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    USE_I18N=True,\n+    USE_L10N=True,\n+    USE_TZ=True,\n+    SECRET_KEY='test-secret-key',\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+django.setup()\n+\n+from django.db import models\n+from django.forms import modelformset_factory\n+from django.core.exceptions import ValidationError\n+\n+\n+# Create a simple model\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+# Create the tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Article)\n+\n+\n+# Test ModelFormSet with custom clean\n+def test_modelformset_nonform_class():\n+    ArticleFormSet = modelformset_factory(Article, fields=['title'], extra=1)\n+    \n+    # Create a custom formset class with clean method\n+    class CustomArticleFormSet(ArticleFormSet):\n+        def clean(self):\n+            raise ValidationError(\"This is a non-form error in ModelFormSet\")\n+    \n+    data = {\n+        'form-TOTAL_FORMS': '1',\n+        'form-INITIAL_FORMS': '0',\n+        'form-MIN_NUM_FORMS': '0',\n+        'form-MAX_NUM_FORMS': '1000',\n+        'form-0-title': 'Test Article',\n+    }\n+    \n+    formset = CustomArticleFormSet(data)\n+    is_valid = formset.is_valid()\n+    \n+    print(f\"Is valid: {is_valid}\")\n+    print(f\"Non-form errors: {formset.non_form_errors()}\")\n+    print(f\"Non-form errors class: {formset.non_form_errors().error_class}\")\n+    print(f\"HTML: {formset.non_form_errors().as_ul()}\")\n+    print(f\"Has 'nonform' class: {'nonform' in formset.non_form_errors().as_ul()}\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_modelformset_nonform_class()\ndiff --git a/tests/forms_tests/tests/test_formset_nonform_class.py b/tests/forms_tests/tests/test_formset_nonform_class.py\nnew file mode 100644\nindex 0000000000..cb786a1970\n--- /dev/null\n+++ b/tests/forms_tests/tests/test_formset_nonform_class.py\n@@ -0,0 +1,107 @@\n+\"\"\"\n+Test for the 'nonform' CSS class in FormSet non-form errors\n+\"\"\"\n+from django.core.exceptions import ValidationError\n+from django.forms import BaseFormSet, Form, CharField, formset_factory\n+from django.test import SimpleTestCase\n+\n+\n+class TestFormSetNonFormClass(SimpleTestCase):\n+    \"\"\"Test that formset non-form errors include the 'nonform' CSS class.\"\"\"\n+    \n+    def test_clean_error_css_class(self):\n+        \"\"\"Non-form errors from clean() should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        class TestFormSet(BaseFormSet):\n+            def clean(self):\n+                raise ValidationError(\"This is a non-form error\")\n+        \n+        FormSet = formset_factory(TestForm, formset=TestFormSet)\n+        data = {\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-0-name': 'Test',\n+        }\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('This is a non-form error', html)\n+    \n+    def test_max_forms_error_css_class(self):\n+        \"\"\"Max forms validation errors should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        FormSet = formset_factory(TestForm, max_num=1, validate_max=True)\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-0-name': 'Test1',\n+            'form-1-name': 'Test2',\n+        }\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('Please submit at most 1 form', html)\n+    \n+    def test_min_forms_error_css_class(self):\n+        \"\"\"Min forms validation errors should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        FormSet = formset_factory(TestForm, min_num=2, validate_min=True)\n+        data = {\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-0-name': 'Test1',\n+        }\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('Please submit at least 2 forms', html)\n+    \n+    def test_management_form_error_css_class(self):\n+        \"\"\"Management form errors should have 'nonform' CSS class.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        FormSet = formset_factory(TestForm)\n+        data = {}  # Missing management form data\n+        \n+        formset = FormSet(data)\n+        self.assertFalse(formset.is_valid())\n+        \n+        # Check that the error list has the 'nonform' class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Check the rendered HTML\n+        html = non_form_errors.as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', html)\n+        self.assertIn('ManagementForm data is missing', html)\n", "gold_standard_diff": "From 84400d2e9db7c51fee4e9bb04c028f665b8e7624 Mon Sep 17 00:00:00 2001\nFrom: Ties Jan Hefting <hello@tiesjan.com>\nDate: Wed, 7 Jul 2021 22:50:30 +0200\nSubject: [PATCH] Fixed #32905 -- Added CSS class for non-form errors of\n formsets.\n\n---\n AUTHORS                                  |  1 +\n django/forms/formsets.py                 |  7 +++++--\n docs/releases/4.0.txt                    |  4 ++++\n docs/topics/forms/formsets.txt           | 14 ++++++++++++++\n tests/admin_views/tests.py               |  5 ++++-\n tests/forms_tests/tests/test_formsets.py | 14 ++++++++++++++\n 6 files changed, 42 insertions(+), 3 deletions(-)\n\ndiff --git a/AUTHORS b/AUTHORS\nindex 4e4dbc00fdc4..72a87ce7b730 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -906,6 +906,7 @@ answer newbie questions, and generally made Django that much better:\n     Thomas Stromberg <tstromberg@google.com>\n     Thomas Tanner <tanner@gmx.net>\n     tibimicu@gmx.net\n+    Ties Jan Hefting <hello@tiesjan.com>\n     Tim Allen <tim@pyphilly.org>\n     Tim Givois <tim.givois.mendez@gmail.com>\n     Tim Graham <timograham@gmail.com>\ndiff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f88..b8e0d62fd92c 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ def full_clean(self):\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,10 @@ def full_clean(self):\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(\n+                e.error_list,\n+                error_class='nonform'\n+            )\n \n     def clean(self):\n         \"\"\"\ndiff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt\nindex f0742db7bd85..ee3922c9b6b8 100644\n--- a/docs/releases/4.0.txt\n+++ b/docs/releases/4.0.txt\n@@ -218,6 +218,10 @@ Forms\n   error message. This allows custom error messages to use the ``%(value)s``\n   placeholder.\n \n+* :class:`~django.forms.formsets.BaseFormSet` now renders non-form errors with\n+  an additional class of ``nonform`` to help distinguish them from\n+  form-specific errors.\n+\n Generic Views\n ~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt\nindex 1f2c7c3fadc3..0281b6a4d6d4 100644\n--- a/docs/topics/forms/formsets.txt\n+++ b/docs/topics/forms/formsets.txt\n@@ -365,6 +365,20 @@ The formset ``clean`` method is called after all the ``Form.clean`` methods\n have been called. The errors will be found using the ``non_form_errors()``\n method on the formset.\n \n+Non-form errors will be rendered with an additional class of ``nonform`` to\n+help distinguish them from form-specific errors. For example,\n+``{{ formset.non_form_errors }}`` would look like:\n+\n+.. code-block:: html+django\n+\n+    <ul class=\"errorlist nonform\">\n+        <li>Articles in a set must have distinct titles.</li>\n+    </ul>\n+\n+.. versionchanged:: 4.0\n+\n+    The additional ``nonform`` class was added.\n+\n Validating the number of forms in a formset\n ===========================================\n \ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 880ba0b85f75..b277476296cf 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3348,7 +3348,10 @@ def test_non_form_errors_is_errorlist(self):\n         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n-        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n+        self.assertEqual(\n+            str(non_form_errors),\n+            str(ErrorList(['Grace is not a Zombie'], error_class='nonform')),\n+        )\n \n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\ndiff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 889560aa7427..5afb816f7fc9 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,10 @@ def test_formset_validate_max_flag(self):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +363,11 @@ def test_formset_validate_min_flag(self):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>'\n+            'Please submit at least 3 forms.</li></ul>',\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +992,11 @@ def test_non_form_errors(self):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>'\n+            'You may only specify a drink once.</li></ul>',\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14608"}