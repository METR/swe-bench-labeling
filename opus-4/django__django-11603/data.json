{"instance_id": "django__django-11603", "score": "C", "diff": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex da4ff928aa..3effaa7533 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -99,6 +99,7 @@ class Aggregate(Func):\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -121,11 +122,13 @@ class Count(Aggregate):\n class Max(Aggregate):\n     function = 'MAX'\n     name = 'Max'\n+    allow_distinct = True\n \n \n class Min(Aggregate):\n     function = 'MIN'\n     name = 'Min'\n+    allow_distinct = True\n \n \n class StdDev(NumericOutputFieldMixin, Aggregate):\n@@ -142,6 +145,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):\n class Sum(FixDurationInputMixin, Aggregate):\n     function = 'SUM'\n     name = 'Sum'\n+    allow_distinct = True\n \n \n class Variance(NumericOutputFieldMixin, Aggregate):\n", "gold_standard_diff": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex da4ff928aa05..8b10829eb8ee 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -99,6 +99,7 @@ def _get_repr_options(self):\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -142,6 +143,7 @@ def _get_repr_options(self):\n class Sum(FixDurationInputMixin, Aggregate):\n     function = 'SUM'\n     name = 'Sum'\n+    allow_distinct = True\n \n \n class Variance(NumericOutputFieldMixin, Aggregate):\ndiff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt\nindex f84097ae9666..409d8f0f2987 100644\n--- a/docs/ref/models/querysets.txt\n+++ b/docs/ref/models/querysets.txt\n@@ -3378,7 +3378,7 @@ by the aggregate.\n ``Avg``\n ~~~~~~~\n \n-.. class:: Avg(expression, output_field=None, filter=None, **extra)\n+.. class:: Avg(expression, output_field=None, distinct=False, filter=None, **extra)\n \n     Returns the mean value of the given expression, which must be numeric\n     unless you specify a different ``output_field``.\n@@ -3387,6 +3387,18 @@ by the aggregate.\n     * Return type: ``float`` if input is ``int``, otherwise same as input\n       field, or ``output_field`` if supplied\n \n+    Has one optional argument:\n+\n+    .. attribute:: distinct\n+\n+        If ``distinct=True``, ``Avg`` returns the mean value of unique values.\n+        This is the SQL equivalent of ``AVG(DISTINCT <field>)``. The default\n+        value is ``False``.\n+\n+    .. versionchanged:: 3.0\n+\n+        Support for ``distinct=True`` was added.\n+\n ``Count``\n ~~~~~~~~~\n \n@@ -3451,13 +3463,25 @@ by the aggregate.\n ``Sum``\n ~~~~~~~\n \n-.. class:: Sum(expression, output_field=None, filter=None, **extra)\n+.. class:: Sum(expression, output_field=None, distinct=False, filter=None, **extra)\n \n     Computes the sum of all values of the given expression.\n \n     * Default alias: ``<field>__sum``\n     * Return type: same as input field, or ``output_field`` if supplied\n \n+    Has one optional argument:\n+\n+    .. attribute:: distinct\n+\n+        If ``distinct=True``, ``Sum`` returns the sum of unique values. This is\n+        the SQL equivalent of ``SUM(DISTINCT <field>)``. The default value is\n+        ``False``.\n+\n+    .. versionchanged:: 3.0\n+\n+        Support for ``distinct=True`` was added.\n+\n ``Variance``\n ~~~~~~~~~~~~\n \ndiff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt\nindex 4bfebba73b5d..da1578c0eb76 100644\n--- a/docs/releases/3.0.txt\n+++ b/docs/releases/3.0.txt\n@@ -291,6 +291,9 @@ Models\n   customize the get and set behavior by overriding their\n   :py:ref:`descriptors <descriptors>`.\n \n+* :class:`~django.db.models.Avg` and :class:`~django.db.models.Sum` now support\n+  the ``distinct`` argument.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex bd6ecf699c1b..0f799c4bc3f6 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -388,9 +388,6 @@ def test_count(self):\n         vals = Book.objects.aggregate(Count(\"rating\"))\n         self.assertEqual(vals, {\"rating__count\": 6})\n \n-        vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n-        self.assertEqual(vals, {\"rating__count\": 4})\n-\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n@@ -403,6 +400,16 @@ def test_count_distinct_expression(self):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n+    def test_distinct_on_aggregate(self):\n+        for aggregate, expected_result in (\n+            (Avg, 4.125),\n+            (Count, 4),\n+            (Sum, 16.5),\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(books['ratings'], expected_result)\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11603"}