{"instance_id": "sphinx-doc__sphinx-8721", "score": "C", "diff": "diff --git a/setup.py b/setup.py\nindex 8d40de1a8..03f325278 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..060604e25 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \ndiff --git a/test_separate_builds.py b/test_separate_builds.py\nnew file mode 100644\nindex 000000000..a222239d5\n--- /dev/null\n+++ b/test_separate_builds.py\n@@ -0,0 +1,81 @@\n+\"\"\"Test separate HTML and EPUB builds.\"\"\"\n+\n+import os\n+import tempfile\n+import shutil\n+from pathlib import Path\n+from sphinx.cmd.build import build_main\n+import zipfile\n+\n+def test_separate_builds():\n+    \"\"\"Test building HTML and EPUB separately with different doctrees.\"\"\"\n+    \n+    test_root = Path(__file__).parent / 'tests' / 'roots' / 'test-ext-viewcode'\n+    \n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        # Build HTML with its own doctree\n+        html_outdir = Path(tmpdir) / 'html_output'\n+        html_doctree = Path(tmpdir) / 'html_doctrees'\n+        \n+        print(\"Building HTML...\")\n+        args = [\n+            '-b', 'html',\n+            '-d', str(html_doctree),\n+            str(test_root),\n+            str(html_outdir)\n+        ]\n+        build_main(args)\n+        \n+        # Build EPUB with its own doctree\n+        epub_outdir = Path(tmpdir) / 'epub_output'\n+        epub_doctree = Path(tmpdir) / 'epub_doctrees'\n+        \n+        print(\"\\nBuilding EPUB...\")\n+        args = [\n+            '-b', 'epub',\n+            '-d', str(epub_doctree),\n+            str(test_root),\n+            str(epub_outdir)\n+        ]\n+        build_main(args)\n+        \n+        # Check HTML output\n+        print(\"\\nChecking HTML output...\")\n+        html_modules = html_outdir / '_modules'\n+        if html_modules.exists():\n+            print(f\"\u2713 HTML _modules directory exists\")\n+            module_files = list(html_modules.rglob('*.html'))\n+            print(f\"  Found {len(module_files)} module files\")\n+        \n+        # Check EPUB output\n+        print(\"\\nChecking EPUB output...\")\n+        epub_file = epub_outdir / 'Python.epub'\n+        if epub_file.exists():\n+            # Extract epub\n+            extract_dir = epub_outdir / 'extracted'\n+            with zipfile.ZipFile(epub_file, 'r') as zip_ref:\n+                zip_ref.extractall(extract_dir)\n+            \n+            # Check for _modules\n+            epub_has_modules = False\n+            for root, dirs, files in os.walk(extract_dir):\n+                if '_modules' in dirs or '_modules' in str(root):\n+                    epub_has_modules = True\n+                    print(f\"\u2717 Found _modules directory in EPUB: {root}\")\n+                    \n+            # Check for viewcode links\n+            for root, dirs, files in os.walk(extract_dir):\n+                for file in files:\n+                    if file.endswith('.xhtml'):\n+                        filepath = os.path.join(root, file)\n+                        with open(filepath, 'r', encoding='utf-8') as f:\n+                            content = f.read()\n+                            if 'viewcode-link' in content:\n+                                print(f\"\u2717 Found viewcode-link in: {file}\")\n+                                epub_has_modules = True\n+                                \n+            if not epub_has_modules:\n+                print(\"\u2713 EPUB does not contain viewcode content\")\n+\n+if __name__ == '__main__':\n+    test_separate_builds()\ndiff --git a/test_viewcode_epub.py b/test_viewcode_epub.py\nnew file mode 100644\nindex 000000000..9893008fb\n--- /dev/null\n+++ b/test_viewcode_epub.py\n@@ -0,0 +1,94 @@\n+\"\"\"Test for viewcode epub issue.\"\"\"\n+\n+import os\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.util import ensuredir\n+\n+\n+@pytest.mark.sphinx('html', 'epub', testroot='ext-viewcode')\n+def test_viewcode_epub_disabled(app, status, warning):\n+    \"\"\"Test that viewcode doesn't create pages for epub when viewcode_enable_epub=False.\"\"\"\n+    \n+    # Run the build\n+    app.build()\n+    \n+    # Check that HTML pages were created\n+    html_modules_dir = os.path.join(app.outdir, '_modules')\n+    assert os.path.exists(html_modules_dir)\n+    \n+    # Check that epub _modules directory doesn't exist or is empty\n+    # The issue is that when running \"make html epub\", the epub builder\n+    # would also get the module pages from the html builder\n+    \n+    # Let's look for any .xhtml files in the output that contain viewcode content\n+    epub_has_viewcode = False\n+    for root, dirs, files in os.walk(app.outdir):\n+        for file in files:\n+            if file.endswith('.xhtml'):\n+                filepath = os.path.join(root, file)\n+                with open(filepath, 'r', encoding='utf-8') as f:\n+                    content = f.read()\n+                    if '_modules' in content or 'viewcode-block' in content:\n+                        epub_has_viewcode = True\n+                        break\n+    \n+    # In the current broken state, this would be True\n+    # After the fix, it should be False\n+    assert not epub_has_viewcode, \"EPUB should not contain viewcode pages when viewcode_enable_epub=False\"\n+\n+\n+if __name__ == '__main__':\n+    # Quick test runner\n+    import tempfile\n+    import shutil\n+    from pathlib import Path\n+    \n+    # Setup test directory\n+    test_root = Path(__file__).parent / 'tests' / 'roots' / 'test-ext-viewcode'\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        outdir = Path(tmpdir) / 'output'\n+        \n+        # Create app for HTML and EPUB\n+        app = Sphinx(\n+            srcdir=str(test_root),\n+            confdir=str(test_root),\n+            outdir=str(outdir),\n+            doctreedir=str(Path(tmpdir) / 'doctrees'),\n+            buildername='html',\n+            confoverrides={'extensions': ['sphinx.ext.viewcode'], 'viewcode_enable_epub': False}\n+        )\n+        \n+        # Build HTML\n+        app.build()\n+        \n+        # Now build EPUB with same config\n+        app2 = Sphinx(\n+            srcdir=str(test_root),\n+            confdir=str(test_root),\n+            outdir=str(outdir),\n+            doctreedir=str(Path(tmpdir) / 'doctrees'),\n+            buildername='epub',\n+            confoverrides={'extensions': ['sphinx.ext.viewcode'], 'viewcode_enable_epub': False}\n+        )\n+        app2.build()\n+        \n+        print(f\"Output dir: {outdir}\")\n+        print(\"Checking for viewcode in epub...\")\n+        \n+        # Check results\n+        epub_has_viewcode = False\n+        for root, dirs, files in os.walk(outdir):\n+            for file in files:\n+                if file.endswith('.xhtml'):\n+                    filepath = os.path.join(root, file)\n+                    with open(filepath, 'r', encoding='utf-8') as f:\n+                        content = f.read()\n+                        if '_modules' in content or 'viewcode-block' in content:\n+                            print(f\"Found viewcode content in: {filepath}\")\n+                            epub_has_viewcode = True\n+        \n+        if epub_has_viewcode:\n+            print(\"ERROR: EPUB contains viewcode pages when viewcode_enable_epub=False\")\n+        else:\n+            print(\"SUCCESS: EPUB does not contain viewcode pages\")\ndiff --git a/test_viewcode_issue.py b/test_viewcode_issue.py\nnew file mode 100644\nindex 000000000..1bc0fa2fe\n--- /dev/null\n+++ b/test_viewcode_issue.py\n@@ -0,0 +1,94 @@\n+\"\"\"Test for viewcode epub issue - simulating make html epub.\"\"\"\n+\n+import os\n+import tempfile\n+import shutil\n+from pathlib import Path\n+from sphinx.cmd.build import build_main\n+\n+def test_make_html_epub():\n+    \"\"\"Test that simulates 'make html epub' command.\"\"\"\n+    \n+    # Setup test directory\n+    test_root = Path(__file__).parent / 'tests' / 'roots' / 'test-ext-viewcode'\n+    \n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        outdir = Path(tmpdir) / 'output'\n+        doctreedir = Path(tmpdir) / 'doctrees'\n+        \n+        # Simulate 'make html epub' by passing both builders\n+        # This is what happens when you run: make html epub\n+        args = [\n+            '-b', 'html',  # First builder\n+            '-d', str(doctreedir),\n+            str(test_root),  # source dir\n+            str(outdir / 'html')  # output dir for html\n+        ]\n+        \n+        # Build HTML first\n+        print(\"Building HTML...\")\n+        result = build_main(args)\n+        \n+        # Now build EPUB (this is the second part of 'make html epub')\n+        args = [\n+            '-b', 'epub',  # Second builder\n+            '-d', str(doctreedir),\n+            str(test_root),  # source dir\n+            str(outdir / 'epub')  # output dir for epub\n+        ]\n+        \n+        print(\"\\nBuilding EPUB...\")\n+        result = build_main(args)\n+        \n+        print(f\"\\nOutput dir: {outdir}\")\n+        print(\"\\nChecking HTML output for _modules...\")\n+        \n+        # Check HTML output\n+        html_modules = outdir / 'html' / '_modules'\n+        if html_modules.exists():\n+            print(f\"\u2713 HTML _modules directory exists: {html_modules}\")\n+            module_files = list(html_modules.rglob('*.html'))\n+            print(f\"  Found {len(module_files)} module files\")\n+        else:\n+            print(\"\u2717 HTML _modules directory does not exist\")\n+            \n+        print(\"\\nChecking EPUB output for _modules...\")\n+        \n+        # Check EPUB output - unzip and inspect\n+        epub_file = outdir / 'epub' / 'Python.epub'\n+        if epub_file.exists():\n+            print(f\"\u2713 EPUB file exists: {epub_file}\")\n+            \n+            # Extract epub to inspect contents\n+            import zipfile\n+            extract_dir = outdir / 'epub_extracted'\n+            with zipfile.ZipFile(epub_file, 'r') as zip_ref:\n+                zip_ref.extractall(extract_dir)\n+            \n+            # Look for _modules in the extracted epub\n+            epub_has_modules = False\n+            for root, dirs, files in os.walk(extract_dir):\n+                if '_modules' in dirs or '_modules' in str(root):\n+                    epub_has_modules = True\n+                    print(f\"\u2717 Found _modules directory in EPUB: {root}\")\n+                    \n+                for file in files:\n+                    if file.endswith('.xhtml'):\n+                        filepath = os.path.join(root, file)\n+                        with open(filepath, 'r', encoding='utf-8') as f:\n+                            content = f.read()\n+                            if '_modules/' in content or 'viewcode-link' in content:\n+                                print(f\"\u2717 Found viewcode content in EPUB file: {file}\")\n+                                epub_has_modules = True\n+                                \n+            if not epub_has_modules:\n+                print(\"\u2713 EPUB does not contain _modules or viewcode content\")\n+                print(\"\\nSUCCESS: EPUB correctly excludes viewcode when viewcode_enable_epub=False\")\n+            else:\n+                print(\"\\nERROR: EPUB contains viewcode pages when viewcode_enable_epub=False\")\n+                \n+        else:\n+            print(\"\u2717 EPUB file does not exist\")\n+\n+if __name__ == '__main__':\n+    test_make_html_epub()\ndiff --git a/tox.ini b/tox.ini\nindex 21a0faec3..be1a9127e 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex bc9dfa33582..f38a0dc6052 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -65,6 +65,7 @@ Bugs fixed\n   availability of the same URL twice\n * #8094: texinfo: image files on the different directory with document are not\n   copied\n+* #8720: viewcode: module pages are generated for epub on incremental build\n * #8671: :confval:`highlight_options` is not working\n * #8341: C, fix intersphinx lookup types for names in declarations.\n * C, C++: in general fix intersphinx and role lookup types.\ndiff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91cb7..c2bcee4f59f 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -182,6 +182,10 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name == \"singlehtml\":\n+        return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \ndiff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex 79864095b51..21002966bb1 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,21 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8721"}