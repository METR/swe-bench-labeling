{"instance_id": "django__django-16527", "score": "C", "diff": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb..5b742af46a 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..4e8a31d6bb\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,61 @@\n+\"\"\"Test to verify the save_as_new permission fix\"\"\"\n+from django.template import Context\n+from django.contrib.admin.templatetags.admin_modify import submit_row\n+\n+def test_scenario(description, has_add, has_change):\n+    print(f\"\\n{description}\")\n+    print(\"-\" * len(description))\n+    \n+    context = {\n+        'add': False,  # Not in add mode\n+        'change': True,  # In change mode\n+        'is_popup': False,\n+        'save_as': True,  # save_as is enabled in the ModelAdmin\n+        'show_save': True,\n+        'show_save_and_add_another': True,\n+        'show_save_and_continue': True,\n+        'has_add_permission': has_add,\n+        'has_change_permission': has_change,\n+        'has_view_permission': True,\n+        'has_editable_inline_admin_formsets': False,\n+        'has_delete_permission': False,\n+        'show_delete': True,\n+    }\n+    \n+    result = submit_row(context)\n+    \n+    print(f\"has_add_permission: {has_add}\")\n+    print(f\"has_change_permission: {has_change}\")\n+    print(f\"show_save_as_new: {result['show_save_as_new']}\")\n+    \n+    return result['show_save_as_new']\n+\n+print(\"Testing save_as_new permission fix\")\n+print(\"=\" * 40)\n+\n+# Test 1: User has change permission but NOT add permission\n+# Expected: show_save_as_new should be False\n+result1 = test_scenario(\"Test 1: User has CHANGE but not ADD permission\", False, True)\n+assert result1 == False, \"FAIL: Save as new should NOT be shown without add permission\"\n+print(\"\u2713 PASS: Save as new is correctly hidden\")\n+\n+# Test 2: User has both change and add permissions\n+# Expected: show_save_as_new should be True\n+result2 = test_scenario(\"Test 2: User has both CHANGE and ADD permissions\", True, True)\n+assert result2 == True, \"FAIL: Save as new should be shown with both permissions\"\n+print(\"\u2713 PASS: Save as new is correctly shown\")\n+\n+# Test 3: User has add permission but NOT change permission\n+# Expected: show_save_as_new should be False (requires both)\n+result3 = test_scenario(\"Test 3: User has ADD but not CHANGE permission\", True, False)\n+assert result3 == False, \"FAIL: Save as new should NOT be shown without change permission\"\n+print(\"\u2713 PASS: Save as new is correctly hidden\")\n+\n+# Test 4: User has neither permission\n+# Expected: show_save_as_new should be False\n+result4 = test_scenario(\"Test 4: User has neither permission\", False, False)\n+assert result4 == False, \"FAIL: Save as new should NOT be shown without any permissions\"\n+print(\"\u2713 PASS: Save as new is correctly hidden\")\n+\n+print(\"\\n\" + \"=\" * 40)\n+print(\"All tests passed! The fix correctly requires BOTH add and change permissions for 'Save as new'.\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..88fee05766\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,30 @@\n+\"\"\"Simple test to demonstrate the save_as_new permission issue\"\"\"\n+from django.template import Context\n+from django.contrib.admin.templatetags.admin_modify import submit_row\n+\n+# Create a context similar to what would be passed to the template\n+context = {\n+    'add': False,  # Not in add mode\n+    'change': True,  # In change mode\n+    'is_popup': False,\n+    'save_as': True,  # save_as is enabled in the ModelAdmin\n+    'show_save': True,\n+    'show_save_and_add_another': True,\n+    'show_save_and_continue': True,\n+    'has_add_permission': False,  # User does NOT have add permission\n+    'has_change_permission': True,  # User has change permission\n+    'has_view_permission': True,\n+    'has_editable_inline_admin_formsets': False,\n+    'has_delete_permission': False,\n+    'show_delete': True,\n+}\n+\n+# Call submit_row to get the updated context\n+result = submit_row(context)\n+\n+# Check if show_save_as_new is True (it should be False since has_add_permission is False)\n+print(f\"has_add_permission: {context['has_add_permission']}\")\n+print(f\"has_change_permission: {context['has_change_permission']}\")\n+print(f\"show_save_as_new: {result['show_save_as_new']}\")\n+print(f\"\\nISSUE: show_save_as_new is {result['show_save_as_new']} even though has_add_permission is False!\")\n+print(\"The 'Save as new' button will be shown to users who don't have permission to add new objects.\")\ndiff --git a/test_regression_simple.py b/test_regression_simple.py\nnew file mode 100644\nindex 0000000000..cbcbffd6ac\n--- /dev/null\n+++ b/test_regression_simple.py\n@@ -0,0 +1,123 @@\n+\"\"\"\n+Simple regression test for the save_as_new permission issue.\n+This test verifies that the \"Save as new\" button is only shown\n+when the user has BOTH add and change permissions.\n+\"\"\"\n+from django.contrib.admin.templatetags.admin_modify import submit_row\n+\n+\n+def test_save_as_new_requires_add_permission():\n+    \"\"\"\n+    The 'Save as new' button should only be shown when user has\n+    both add and change permissions, not just change permission.\n+    \"\"\"\n+    print(\"Testing save_as_new permission fix...\")\n+    \n+    # Base context that's common to all test cases\n+    base_context = {\n+        'add': False,  # Not in add mode\n+        'change': True,  # In change mode\n+        'is_popup': False,\n+        'save_as': True,  # save_as is enabled in the ModelAdmin\n+        'show_save': True,\n+        'show_save_and_add_another': True,\n+        'show_save_and_continue': True,\n+        'has_view_permission': True,\n+        'has_editable_inline_admin_formsets': False,\n+        'has_delete_permission': False,\n+        'show_delete': True,\n+    }\n+    \n+    # Test case 1: User has change permission but NOT add permission\n+    # Expected: show_save_as_new should be False\n+    context1 = base_context.copy()\n+    context1.update({\n+        'has_add_permission': False,\n+        'has_change_permission': True,\n+    })\n+    result1 = submit_row(context1)\n+    assert not result1['show_save_as_new'], \"Save as new should NOT be shown without add permission\"\n+    print(\"\u2713 Test 1 passed: Save as new hidden without add permission\")\n+    \n+    # Test case 2: User has both change and add permissions\n+    # Expected: show_save_as_new should be True\n+    context2 = base_context.copy()\n+    context2.update({\n+        'has_add_permission': True,\n+        'has_change_permission': True,\n+    })\n+    result2 = submit_row(context2)\n+    assert result2['show_save_as_new'], \"Save as new should be shown with both permissions\"\n+    print(\"\u2713 Test 2 passed: Save as new shown with both permissions\")\n+    \n+    # Test case 3: User has add permission but NOT change permission\n+    # Expected: show_save_as_new should be False\n+    context3 = base_context.copy()\n+    context3.update({\n+        'has_add_permission': True,\n+        'has_change_permission': False,\n+    })\n+    result3 = submit_row(context3)\n+    assert not result3['show_save_as_new'], \"Save as new should NOT be shown without change permission\"\n+    print(\"\u2713 Test 3 passed: Save as new hidden without change permission\")\n+    \n+    # Test case 4: User has neither permission\n+    # Expected: show_save_as_new should be False\n+    context4 = base_context.copy()\n+    context4.update({\n+        'has_add_permission': False,\n+        'has_change_permission': False,\n+    })\n+    result4 = submit_row(context4)\n+    assert not result4['show_save_as_new'], \"Save as new should NOT be shown without any permissions\"\n+    print(\"\u2713 Test 4 passed: Save as new hidden without any permissions\")\n+    \n+    print(\"\\nAll permission tests passed!\")\n+\n+\n+def test_save_as_new_edge_cases():\n+    \"\"\"Test edge cases for save_as_new button visibility.\"\"\"\n+    print(\"\\nTesting edge cases...\")\n+    \n+    # Test: Save as new should not be shown in popup windows\n+    context = {\n+        'add': False,\n+        'change': True,\n+        'is_popup': True,  # This is a popup\n+        'save_as': True,\n+        'show_save': True,\n+        'show_save_and_add_another': True,\n+        'show_save_and_continue': True,\n+        'has_add_permission': True,  # Has add permission\n+        'has_change_permission': True,  # Has change permission\n+        'has_view_permission': True,\n+        'has_editable_inline_admin_formsets': False,\n+        'has_delete_permission': False,\n+        'show_delete': True,\n+    }\n+    result = submit_row(context)\n+    assert not result['show_save_as_new'], \"Save as new should NOT be shown in popup windows\"\n+    print(\"\u2713 Test passed: Save as new hidden in popup windows\")\n+    \n+    # Test: Save as new should not be shown when save_as is False\n+    context['is_popup'] = False\n+    context['save_as'] = False  # save_as is disabled in ModelAdmin\n+    result = submit_row(context)\n+    assert not result['show_save_as_new'], \"Save as new should NOT be shown when save_as is disabled\"\n+    print(\"\u2713 Test passed: Save as new hidden when save_as is disabled\")\n+    \n+    # Test: Save as new should not be shown in add mode\n+    context['save_as'] = True\n+    context['add'] = True\n+    context['change'] = False\n+    result = submit_row(context)\n+    assert not result['show_save_as_new'], \"Save as new should NOT be shown in add mode\"\n+    print(\"\u2713 Test passed: Save as new hidden in add mode\")\n+    \n+    print(\"\\nAll edge case tests passed!\")\n+\n+\n+if __name__ == '__main__':\n+    test_save_as_new_requires_add_permission()\n+    test_save_as_new_edge_cases()\n+    print(\"\\n\u2705 All tests passed! The fix is working correctly.\")\ndiff --git a/test_save_as_new_permission.py b/test_save_as_new_permission.py\nnew file mode 100644\nindex 0000000000..fce1e131bb\n--- /dev/null\n+++ b/test_save_as_new_permission.py\n@@ -0,0 +1,62 @@\n+\"\"\"Test to demonstrate the save_as_new permission issue\"\"\"\n+import os\n+import django\n+from django.test import TestCase, Client\n+from django.contrib.auth.models import User, Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.contrib import admin\n+from django.urls import reverse\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')\n+django.setup()\n+\n+# Create a test model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'testapp'\n+\n+# Register with admin\n+@admin.register(TestModel)\n+class TestModelAdmin(admin.ModelAdmin):\n+    save_as = True  # Enable save_as functionality\n+\n+class SaveAsNewPermissionTest(TestCase):\n+    def setUp(self):\n+        # Create users\n+        self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+        self.user_with_change_only = User.objects.create_user('change_only', 'change@test.com', 'password')\n+        \n+        # Give user only change permission (not add)\n+        content_type = ContentType.objects.get_for_model(TestModel)\n+        change_permission = Permission.objects.get(codename='change_testmodel', content_type=content_type)\n+        self.user_with_change_only.user_permissions.add(change_permission)\n+        \n+        # Create a test object\n+        self.test_obj = TestModel.objects.create(name='Test Object')\n+        \n+        self.client = Client()\n+    \n+    def test_save_as_new_button_visibility(self):\n+        \"\"\"Test that save_as_new button is not shown when user lacks add permission\"\"\"\n+        # Login as user with only change permission\n+        self.client.login(username='change_only', password='password')\n+        \n+        # Get the change form\n+        url = reverse('admin:testapp_testmodel_change', args=[self.test_obj.pk])\n+        response = self.client.get(url)\n+        \n+        # Check if save_as_new button is in the response\n+        # Currently, this will FAIL because the button is shown even without add permission\n+        self.assertNotIn('_saveasnew', response.content.decode())\n+        self.assertNotIn('Save as new', response.content.decode())\n+\n+if __name__ == '__main__':\n+    # Run the test\n+    test = SaveAsNewPermissionTest()\n+    test.setUp()\n+    test.test_save_as_new_button_visibility()\n+    print(\"Test completed!\")\ndiff --git a/test_save_as_new_permission_regression.py b/test_save_as_new_permission_regression.py\nnew file mode 100644\nindex 0000000000..73cecae684\n--- /dev/null\n+++ b/test_save_as_new_permission_regression.py\n@@ -0,0 +1,133 @@\n+\"\"\"\n+Regression test for the save_as_new permission issue.\n+This test verifies that the \"Save as new\" button is only shown\n+when the user has BOTH add and change permissions.\n+\"\"\"\n+from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.test import TestCase\n+\n+\n+class SaveAsNewPermissionTest(TestCase):\n+    def test_save_as_new_requires_add_permission(self):\n+        \"\"\"\n+        The 'Save as new' button should only be shown when user has\n+        both add and change permissions, not just change permission.\n+        \"\"\"\n+        # Base context that's common to all test cases\n+        base_context = {\n+            'add': False,  # Not in add mode\n+            'change': True,  # In change mode\n+            'is_popup': False,\n+            'save_as': True,  # save_as is enabled in the ModelAdmin\n+            'show_save': True,\n+            'show_save_and_add_another': True,\n+            'show_save_and_continue': True,\n+            'has_view_permission': True,\n+            'has_editable_inline_admin_formsets': False,\n+            'has_delete_permission': False,\n+            'show_delete': True,\n+        }\n+        \n+        # Test case 1: User has change permission but NOT add permission\n+        # Expected: show_save_as_new should be False\n+        context1 = base_context.copy()\n+        context1.update({\n+            'has_add_permission': False,\n+            'has_change_permission': True,\n+        })\n+        result1 = submit_row(context1)\n+        self.assertFalse(\n+            result1['show_save_as_new'],\n+            \"Save as new should NOT be shown without add permission\"\n+        )\n+        \n+        # Test case 2: User has both change and add permissions\n+        # Expected: show_save_as_new should be True\n+        context2 = base_context.copy()\n+        context2.update({\n+            'has_add_permission': True,\n+            'has_change_permission': True,\n+        })\n+        result2 = submit_row(context2)\n+        self.assertTrue(\n+            result2['show_save_as_new'],\n+            \"Save as new should be shown with both permissions\"\n+        )\n+        \n+        # Test case 3: User has add permission but NOT change permission\n+        # Expected: show_save_as_new should be False\n+        context3 = base_context.copy()\n+        context3.update({\n+            'has_add_permission': True,\n+            'has_change_permission': False,\n+        })\n+        result3 = submit_row(context3)\n+        self.assertFalse(\n+            result3['show_save_as_new'],\n+            \"Save as new should NOT be shown without change permission\"\n+        )\n+        \n+        # Test case 4: User has neither permission\n+        # Expected: show_save_as_new should be False\n+        context4 = base_context.copy()\n+        context4.update({\n+            'has_add_permission': False,\n+            'has_change_permission': False,\n+        })\n+        result4 = submit_row(context4)\n+        self.assertFalse(\n+            result4['show_save_as_new'],\n+            \"Save as new should NOT be shown without any permissions\"\n+        )\n+        \n+    def test_save_as_new_not_shown_in_popup(self):\n+        \"\"\"Save as new should not be shown in popup windows regardless of permissions.\"\"\"\n+        context = {\n+            'add': False,\n+            'change': True,\n+            'is_popup': True,  # This is a popup\n+            'save_as': True,\n+            'show_save': True,\n+            'show_save_and_add_another': True,\n+            'show_save_and_continue': True,\n+            'has_add_permission': True,  # Has add permission\n+            'has_change_permission': True,  # Has change permission\n+            'has_view_permission': True,\n+            'has_editable_inline_admin_formsets': False,\n+            'has_delete_permission': False,\n+            'show_delete': True,\n+        }\n+        result = submit_row(context)\n+        self.assertFalse(\n+            result['show_save_as_new'],\n+            \"Save as new should NOT be shown in popup windows\"\n+        )\n+        \n+    def test_save_as_new_not_shown_when_save_as_disabled(self):\n+        \"\"\"Save as new should not be shown when save_as is False in ModelAdmin.\"\"\"\n+        context = {\n+            'add': False,\n+            'change': True,\n+            'is_popup': False,\n+            'save_as': False,  # save_as is disabled in ModelAdmin\n+            'show_save': True,\n+            'show_save_and_add_another': True,\n+            'show_save_and_continue': True,\n+            'has_add_permission': True,  # Has add permission\n+            'has_change_permission': True,  # Has change permission\n+            'has_view_permission': True,\n+            'has_editable_inline_admin_formsets': False,\n+            'has_delete_permission': False,\n+            'show_delete': True,\n+        }\n+        result = submit_row(context)\n+        self.assertFalse(\n+            result['show_save_as_new'],\n+            \"Save as new should NOT be shown when save_as is disabled\"\n+        )\n+\n+\n+if __name__ == '__main__':\n+    # Run a simple test\n+    import unittest\n+    unittest.main()\n", "gold_standard_diff": "From 2878938626aed211d03db33a9a135c9b1d933069 Mon Sep 17 00:00:00 2001\nFrom: Frederic Mheir <fredericmheir@Frederics-MacBook-Pro.local>\nDate: Sun, 5 Feb 2023 16:38:21 -0500\nSubject: [PATCH] Fixed #34301 -- Made admin's submit_row check add permission\n for \"Save as new\" button.\n\n---\n .../admin/templatetags/admin_modify.py        |  2 +-\n tests/admin_views/test_templatetags.py        | 35 ++++++++++++++++++-\n 2 files changed, 35 insertions(+), 2 deletions(-)\n\ndiff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb93..0e3046ae5aa6 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,7 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n-            and has_change_permission\n+            and has_add_permission\n             and change\n             and save_as,\n             \"show_save_and_add_another\": can_save_and_add_another,\ndiff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex a13133095bed..185fe156a6c5 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -3,6 +3,7 @@\n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -10,7 +11,7 @@\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,6 +34,38 @@ def test_submit_row(self):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16527"}