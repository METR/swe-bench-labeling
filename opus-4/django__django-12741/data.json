{"instance_id": "django__django-12741", "score": "C", "diff": "diff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py\nindex e8ed3967f7..bc8021cf4e 100644\n--- a/django/core/management/commands/flush.py\n+++ b/django/core/management/commands/flush.py\n@@ -60,7 +60,7 @@ Are you sure you want to do this?\n \n         if confirm == 'yes':\n             try:\n-                connection.ops.execute_sql_flush(database, sql_list)\n+                connection.ops.execute_sql_flush(sql_list)\n             except Exception as exc:\n                 raise CommandError(\n                     \"Database %s couldn't be flushed. Possible reasons:\\n\"\ndiff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 70ac07ae09..f07580c18b 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -400,9 +400,9 @@ class BaseDatabaseOperations:\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')\n \n-    def execute_sql_flush(self, using, sql_list):\n+    def execute_sql_flush(self, sql_list):\n         \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):\n+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):\n             with self.connection.cursor() as cursor:\n                 for sql in sql_list:\n                     cursor.execute(sql)\ndiff --git a/final_test.py b/final_test.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_execute_sql_flush.py b/test_execute_sql_flush.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_minimal.py b/test_minimal.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 0485fe8465..b0ffe958c8 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\ndiff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex d6c2331378..40fc6de7fc 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -162,7 +162,7 @@ class LongNameTest(TransactionTestCase):\n             VLM_m2m._meta.db_table,\n         ]\n         sql_list = connection.ops.sql_flush(no_style(), tables, reset_sequences=True)\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n \n class SequenceResetTest(TestCase):\ndiff --git a/verify_changes.py b/verify_changes.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\n", "gold_standard_diff": "From 8d4eccb3e5b67dfed993f566472e9d59ac09e5a8 Mon Sep 17 00:00:00 2001\nFrom: Jon Dufresne <jon.dufresne@gmail.com>\nDate: Fri, 17 Apr 2020 15:30:57 -0700\nSubject: [PATCH] Fixed #31477 -- Simplified\n DatabaseOperations.execute_sql_flush() signature.\n\n---\n django/core/management/commands/flush.py | 2 +-\n django/db/backends/base/operations.py    | 7 +++++--\n docs/releases/3.1.txt                    | 4 ++++\n tests/backends/base/test_operations.py   | 2 +-\n tests/backends/tests.py                  | 2 +-\n 5 files changed, 12 insertions(+), 5 deletions(-)\n\ndiff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py\nindex e8ed3967f70e..bc8021cf4eb2 100644\n--- a/django/core/management/commands/flush.py\n+++ b/django/core/management/commands/flush.py\n@@ -60,7 +60,7 @@ def handle(self, **options):\n \n         if confirm == 'yes':\n             try:\n-                connection.ops.execute_sql_flush(database, sql_list)\n+                connection.ops.execute_sql_flush(sql_list)\n             except Exception as exc:\n                 raise CommandError(\n                     \"Database %s couldn't be flushed. Possible reasons:\\n\"\ndiff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 70ac07ae0950..305306e8ce90 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -400,9 +400,12 @@ def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')\n \n-    def execute_sql_flush(self, using, sql_list):\n+    def execute_sql_flush(self, sql_list):\n         \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):\n+        with transaction.atomic(\n+            using=self.connection.alias,\n+            savepoint=self.connection.features.can_rollback_ddl,\n+        ):\n             with self.connection.cursor() as cursor:\n                 for sql in sql_list:\n                     cursor.execute(sql)\ndiff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt\nindex 3ec3afcf3ac4..4cf8183d4b0b 100644\n--- a/docs/releases/3.1.txt\n+++ b/docs/releases/3.1.txt\n@@ -526,6 +526,10 @@ backends.\n * The ``allow_cascade`` argument of ``DatabaseOperations.sql_flush()`` is now a\n   keyword-only argument.\n \n+* The ``using`` positional argument of\n+  ``DatabaseOperations.execute_sql_flush()`` is removed. The method now uses\n+  the database of the called instance.\n+\n Dropped support for MariaDB 10.1\n --------------------------------\n \ndiff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 0485fe84651f..b0ffe958c8ab 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ def test_execute_sql_flush_statements(self):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\ndiff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex d6c2331378cc..40fc6de7fc11 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -162,7 +162,7 @@ def test_sequence_name_length_limits_flush(self):\n             VLM_m2m._meta.db_table,\n         ]\n         sql_list = connection.ops.sql_flush(no_style(), tables, reset_sequences=True)\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n \n class SequenceResetTest(TestCase):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12741"}