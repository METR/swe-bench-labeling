{"instance_id": "matplotlib__matplotlib-24026", "score": "C", "diff": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex c580043eeb..deb0a7aa13 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -69,8 +69,12 @@ def stackplot(axes, x, *args,\n     y = np.row_stack(args)\n \n     labels = iter(labels)\n+    from matplotlib.colors import to_rgba\n+\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        # Convert 'CN' color aliases to actual color values\n+        converted_colors = [to_rgba(c) if isinstance(c, str) and c.startswith('C') else c for c in colors]\n+        axes.set_prop_cycle(color=converted_colors)\n \n     # Assume data passed has not been 'stacked', so stack it here.\n     # We'll need a float buffer for the upcoming calculations.\n", "gold_standard_diff": "From 735fe2993bec8a9597744b81edd63585d2e311bf Mon Sep 17 00:00:00 2001\nFrom: Elliott Sales de Andrade <quantum.analyst@gmail.com>\nDate: Tue, 27 Sep 2022 22:40:58 -0400\nSubject: [PATCH] Don't modify Axes property cycle in stackplot\n\nThis is not documented, and likely unwanted, and it breaks using cycle\ncolours ('C0', 'C1', etc.) in the colour list.\n\nFixes #24024\n---\n lib/matplotlib/stackplot.py       | 13 ++++++++-----\n lib/matplotlib/tests/test_axes.py |  5 +++--\n 2 files changed, 11 insertions(+), 7 deletions(-)\n\ndiff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex c580043eebbc..c97a21e029f9 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -6,6 +6,8 @@\n (https://stackoverflow.com/users/66549/doug)\n \"\"\"\n \n+import itertools\n+\n import numpy as np\n \n from matplotlib import _api\n@@ -70,7 +72,9 @@ def stackplot(axes, x, *args,\n \n     labels = iter(labels)\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        colors = itertools.cycle(colors)\n+    else:\n+        colors = (axes._get_lines.get_next_color() for _ in y)\n \n     # Assume data passed has not been 'stacked', so stack it here.\n     # We'll need a float buffer for the upcoming calculations.\n@@ -108,17 +112,16 @@ def stackplot(axes, x, *args,\n         stack += first_line\n \n     # Color between x = 0 and the first array.\n-    color = axes._get_lines.get_next_color()\n     coll = axes.fill_between(x, first_line, stack[0, :],\n-                             facecolor=color, label=next(labels, None),\n+                             facecolor=next(colors), label=next(labels, None),\n                              **kwargs)\n     coll.sticky_edges.y[:] = [0]\n     r = [coll]\n \n     # Color between array i-1 and array i\n     for i in range(len(y) - 1):\n-        color = axes._get_lines.get_next_color()\n         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],\n-                                   facecolor=color, label=next(labels, None),\n+                                   facecolor=next(colors),\n+                                   label=next(labels, None),\n                                    **kwargs))\n     return r\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 405560d4a386..1ae3c375934c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2851,10 +2851,11 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-    # Reuse testcase from above for a labeled data test\n+    # Reuse testcase from above for a test with labeled data and with colours\n+    # from the Axes property cycle.\n     data = {\"x\": x, \"y1\": y1, \"y2\": y2, \"y3\": y3}\n     fig, ax = plt.subplots()\n-    ax.stackplot(\"x\", \"y1\", \"y2\", \"y3\", data=data)\n+    ax.stackplot(\"x\", \"y1\", \"y2\", \"y3\", data=data, colors=[\"C0\", \"C1\", \"C2\"])\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/24026"}