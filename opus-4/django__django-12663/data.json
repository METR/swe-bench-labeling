{"instance_id": "django__django-12663", "score": "I", "diff": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..e8e89c7fd5 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -21,7 +21,7 @@ from django.utils.dateparse import (\n     parse_date, parse_datetime, parse_duration, parse_time,\n )\n from django.utils.duration import duration_microseconds, duration_string\n-from django.utils.functional import Promise, cached_property\n+from django.utils.functional import Promise, cached_property, LazyObject\n from django.utils.ipv6 import clean_ipv6_address\n from django.utils.itercompat import is_iterable\n from django.utils.text import capfirst\n@@ -804,6 +804,20 @@ class Field(RegisterLookupMixin):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        elif isinstance(value, LazyObject):\n+            # Evaluate SimpleLazyObject and other LazyObject instances\n+            # We need to get the wrapped value. Accessing any attribute triggers evaluation.\n+            # We'll use a safe approach by checking if it's been evaluated first.\n+            from django.utils.functional import empty\n+            if hasattr(value, '_wrapped') and value._wrapped is not empty:\n+                # Already evaluated, use the wrapped value\n+                value = value._wrapped\n+            else:\n+                # Not yet evaluated, force evaluation by accessing an attribute\n+                # The __class__ attribute access will trigger _setup() for SimpleLazyObject\n+                _ = value.__class__\n+                # Now get the wrapped value\n+                value = value._wrapped\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\ndiff --git a/test_exact_issue.py b/test_exact_issue.py\nnew file mode 100644\nindex 0000000000..c5515736a5\n--- /dev/null\n+++ b/test_exact_issue.py\n@@ -0,0 +1,81 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ],\n+    USE_TZ=False,\n+    SECRET_KEY='test-key'\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+# Now run the test\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.db.models import OuterRef, Subquery\n+from django.utils.functional import SimpleLazyObject\n+from django.test import TestCase\n+from django.db import connection\n+from django.core.management import call_command\n+\n+# Create necessary tables\n+call_command('migrate', verbosity=0)\n+\n+class A(models.Model):\n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'test_a'\n+\n+class B(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE)\n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'test_b'\n+\n+class C(models.Model):\n+    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'test_c'\n+\n+# Create tables\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(A)\n+    schema_editor.create_model(B)\n+    schema_editor.create_model(C)\n+\n+# Test reproducing the exact issue from the bug report\n+print(\"Testing the exact scenario from the issue...\")\n+try:\n+    owner_user = (\n+        B.objects.filter(a=OuterRef(\"pk\"))\n+        .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+        .values(\"owner_user\")\n+    )\n+    user = SimpleLazyObject(lambda: User.objects.create_user(\"testuser\"))\n+    A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+        owner_user=user\n+    )\n+    print(\"FAILED: Expected TypeError but query succeeded!\")\n+except TypeError as e:\n+    if \"int() argument must be a string\" in str(e) and \"SimpleLazyObject\" in str(e):\n+        print(\"ERROR: The original bug is still present!\")\n+        print(f\"Error: {e}\")\n+    else:\n+        print(f\"Different TypeError occurred: {e}\")\n+except Exception as e:\n+    print(f\"Different error occurred: {type(e).__name__}: {e}\")\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..b7165c32cf\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,107 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ],\n+    USE_TZ=False,\n+    SECRET_KEY='test-key'\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+# Now run the test\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.db.models import OuterRef, Subquery\n+from django.utils.functional import SimpleLazyObject\n+from django.test import TestCase\n+from django.db import connection\n+from django.core.management import call_command\n+\n+# Create necessary tables\n+call_command('migrate', verbosity=0)\n+\n+class A(models.Model):\n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'test_a'\n+\n+class B(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE)\n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'test_b'\n+\n+class C(models.Model):\n+    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n+    class Meta:\n+        app_label = 'test_app'\n+        db_table = 'test_c'\n+\n+# Create tables\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(A)\n+    schema_editor.create_model(B)\n+    schema_editor.create_model(C)\n+\n+# Create test user first\n+test_user = User.objects.create_user('testuser')\n+\n+# Test the original issue\n+try:\n+    owner_user = (\n+        B.objects.filter(a=OuterRef(\"pk\"))\n+        .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+        .values(\"owner_user\")\n+    )\n+    user = SimpleLazyObject(lambda: test_user.id)\n+    result = A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+        owner_user=user\n+    )\n+    # Force evaluation to trigger any errors\n+    list(result)\n+    print(\"SUCCESS: SimpleLazyObject now works with subquery annotations!\")\n+except Exception as e:\n+    print(f\"FAILED: {type(e).__name__}: {e}\")\n+\n+# Also test with an unevaluated SimpleLazyObject\n+try:\n+    owner_user = (\n+        B.objects.filter(a=OuterRef(\"pk\"))\n+        .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+        .values(\"owner_user\")\n+    )\n+    # This time use a lazy object that creates a new user\n+    user = SimpleLazyObject(lambda: User.objects.create_user('testuser2').id)\n+    result = A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+        owner_user=user\n+    )\n+    # Force evaluation\n+    list(result)\n+    print(\"SUCCESS: Unevaluated SimpleLazyObject also works!\")\n+except Exception as e:\n+    print(f\"FAILED with unevaluated: {type(e).__name__}: {e}\")\n+\n+# Test that regular values still work\n+try:\n+    result = A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+        owner_user=test_user.id\n+    )\n+    list(result)\n+    print(\"SUCCESS: Regular objects still work!\")\n+except Exception as e:\n+    print(f\"FAILED with regular object: {type(e).__name__}: {e}\")\ndiff --git a/test_simple_case.py b/test_simple_case.py\nnew file mode 100644\nindex 0000000000..0dddeb8806\n--- /dev/null\n+++ b/test_simple_case.py\n@@ -0,0 +1,20 @@\n+from django.utils.functional import SimpleLazyObject, LazyObject, empty\n+from django.db.models.fields import IntegerField\n+\n+# Test the fixed get_prep_value\n+field = IntegerField()\n+\n+# Test 1: Direct SimpleLazyObject with integer\n+lazy_int = SimpleLazyObject(lambda: 42)\n+result = field.get_prep_value(lazy_int)\n+print(f\"Test 1 - SimpleLazyObject(42): {result} (type: {type(result).__name__})\")\n+\n+# Test 2: Already evaluated SimpleLazyObject\n+lazy_int2 = SimpleLazyObject(lambda: 100)\n+_ = lazy_int2.__class__  # Force evaluation\n+result2 = field.get_prep_value(lazy_int2)\n+print(f\"Test 2 - Evaluated SimpleLazyObject(100): {result2} (type: {type(result2).__name__})\")\n+\n+# Test 3: Regular integer\n+result3 = field.get_prep_value(123)\n+print(f\"Test 3 - Regular int(123): {result3} (type: {type(result3).__name__})\")\ndiff --git a/test_simple_lazy_object.py b/test_simple_lazy_object.py\nnew file mode 100644\nindex 0000000000..1ab293839f\n--- /dev/null\n+++ b/test_simple_lazy_object.py\n@@ -0,0 +1,31 @@\n+from django.contrib.auth.models import User\n+from django.db import models\n+from django.db.models import OuterRef, Subquery\n+from django.utils.functional import SimpleLazyObject\n+from django.test import TestCase\n+\n+class A(models.Model):\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class B(models.Model):\n+    a = models.ForeignKey(A, on_delete=models.CASCADE)\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class C(models.Model):\n+    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class BugTestCase(TestCase):\n+    def test_bug(self):\n+        owner_user = (\n+            B.objects.filter(a=OuterRef(\"pk\"))\n+            .annotate(owner_user=Subquery(C.objects.values(\"owner\")))\n+            .values(\"owner_user\")\n+        )\n+        user = SimpleLazyObject(lambda: User.objects.create_user(\"testuser\"))\n+        A.objects.annotate(owner_user=Subquery(owner_user)).filter(\n+            owner_user=user\n+        )\ndiff --git a/test_slo_behavior.py b/test_slo_behavior.py\nnew file mode 100644\nindex 0000000000..56ed4d3ff3\n--- /dev/null\n+++ b/test_slo_behavior.py\n@@ -0,0 +1,39 @@\n+from django.utils.functional import SimpleLazyObject\n+\n+# Test how SimpleLazyObject behaves with int()\n+lazy_int = SimpleLazyObject(lambda: 42)\n+print(f\"lazy_int = SimpleLazyObject(lambda: 42)\")\n+print(f\"int(lazy_int) = {int(lazy_int)}\")\n+print(f\"lazy_int._wrapped = {lazy_int._wrapped}\")\n+\n+# Now with a string\n+lazy_str = SimpleLazyObject(lambda: \"hello\")\n+print(f\"\\nlazy_str = SimpleLazyObject(lambda: 'hello')\")\n+try:\n+    print(f\"int(lazy_str) = {int(lazy_str)}\")\n+except Exception as e:\n+    print(f\"int(lazy_str) raised: {type(e).__name__}: {e}\")\n+\n+# Now with a User object - this is what the issue is about\n+import django\n+from django.conf import settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},\n+    INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],\n+    USE_TZ=False,\n+    SECRET_KEY='test'\n+)\n+django.setup()\n+\n+from django.contrib.auth.models import User\n+from django.core.management import call_command\n+call_command('migrate', verbosity=0)\n+\n+user = User.objects.create_user('test')\n+lazy_user = SimpleLazyObject(lambda: user)\n+print(f\"\\nlazy_user = SimpleLazyObject(lambda: User(username='test'))\")\n+try:\n+    print(f\"int(lazy_user) = {int(lazy_user)}\")\n+except Exception as e:\n+    print(f\"int(lazy_user) raised: {type(e).__name__}: {e}\")\ndiff --git a/test_without_fix.py b/test_without_fix.py\nnew file mode 100644\nindex 0000000000..5d927394fa\n--- /dev/null\n+++ b/test_without_fix.py\n@@ -0,0 +1,32 @@\n+from django.utils.functional import SimpleLazyObject\n+from django.db.models.fields import IntegerField\n+\n+# Create a version of get_prep_value without our fix\n+def old_get_prep_value(self, value):\n+    \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n+    from django.utils.functional import Promise\n+    if isinstance(value, Promise):\n+        value = value._proxy____cast()\n+    return value\n+\n+# Override IntegerField's get_prep_value with the old version\n+original_get_prep_value = IntegerField.get_prep_value\n+IntegerField.get_prep_value = old_get_prep_value\n+\n+# Test the old behavior\n+field = IntegerField()\n+\n+# This should fail with the original error\n+try:\n+    lazy_int = SimpleLazyObject(lambda: 42)\n+    # Need to call the superclass get_prep_value, then the IntegerField specific one\n+    from django.db.models.fields import Field\n+    value = Field.get_prep_value(field, lazy_int)  # This returns the SimpleLazyObject\n+    if value is not None:\n+        result = int(value)  # This is what IntegerField.get_prep_value does\n+    print(f\"ERROR: Should have failed but got: {result}\")\n+except TypeError as e:\n+    print(f\"SUCCESS: Got expected TypeError with old code: {e}\")\n+\n+# Restore the fix\n+IntegerField.get_prep_value = original_get_prep_value\n", "gold_standard_diff": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9fe0c9a656db..e5524a8198e5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -233,7 +233,8 @@ def __init__(self, model, where=WhereNode, alias_cols=True):\n     @property\n     def output_field(self):\n         if len(self.select) == 1:\n-            return self.select[0].field\n+            select = self.select[0]\n+            return getattr(select, 'target', None) or select.field\n         elif len(self.annotation_select) == 1:\n             return next(iter(self.annotation_select.values())).output_field\n \ndiff --git a/docs/releases/3.0.6.txt b/docs/releases/3.0.6.txt\nindex e25d6e8fc896..6fd7aad02b4f 100644\n--- a/docs/releases/3.0.6.txt\n+++ b/docs/releases/3.0.6.txt\n@@ -9,4 +9,6 @@ Django 3.0.6 fixes several bugs in 3.0.5.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 3.0 that caused a crash when filtering a\n+  ``Subquery()`` annotation of a queryset containing a single related field\n+  against a ``SimpleLazyObject`` (:ticket:`31420`).\ndiff --git a/tests/expressions/models.py b/tests/expressions/models.py\nindex a81ba9e16b53..a3129207fa84 100644\n--- a/tests/expressions/models.py\n+++ b/tests/expressions/models.py\n@@ -6,10 +6,15 @@\n from django.db import models\n \n \n+class Manager(models.Model):\n+    name = models.CharField(max_length=50)\n+\n+\n class Employee(models.Model):\n     firstname = models.CharField(max_length=50)\n     lastname = models.CharField(max_length=50)\n     salary = models.IntegerField(blank=True, null=True)\n+    manager = models.ForeignKey(Manager, models.CASCADE, null=True)\n \n     def __str__(self):\n         return '%s %s' % (self.firstname, self.lastname)\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0fac4642f76b..b17a286d5df0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -21,10 +21,11 @@\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n+from django.utils.functional import SimpleLazyObject\n \n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n-    Result, SimulationRun, Time,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n+    RemoteEmployee, Result, SimulationRun, Time,\n )\n \n \n@@ -608,6 +609,21 @@ def test_subquery_filter_by_aggregate(self):\n         )\n         self.assertEqual(qs.get().float, 1.2)\n \n+    def test_subquery_filter_by_lazy(self):\n+        self.max.manager = Manager.objects.create(name='Manager')\n+        self.max.save()\n+        max_manager = SimpleLazyObject(\n+            lambda: Manager.objects.get(pk=self.max.manager.pk)\n+        )\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=max_manager)\n+        self.assertEqual(qs.get(), self.gmbh)\n+\n     def test_aggregate_subquery_annotation(self):\n         with self.assertNumQueries(1) as ctx:\n             aggregate = Company.objects.annotate(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12663"}