{"instance_id": "django__django-16454", "score": "I", "diff": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..e0bfef8558 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,31 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        \"\"\"\n+        Override add_subparsers to ensure that the subparsers are created\n+        with the same error handling behavior as the parent.\n+        \"\"\"\n+        # Store original parser class if present\n+        parser_class = kwargs.get('parser_class', type(self))\n+        \n+        # Create custom subparser class that inherits parent's attributes\n+        parent_called_from_command_line = self.called_from_command_line\n+        parent_missing_args_message = self.missing_args_message\n+        \n+        class SubCommandParser(parser_class):\n+            def __init__(self, **parser_kwargs):\n+                # Pass parent's attributes to subparser\n+                parser_kwargs.setdefault('called_from_command_line', parent_called_from_command_line)\n+                parser_kwargs.setdefault('missing_args_message', parent_missing_args_message)\n+                super().__init__(**parser_kwargs)\n+        \n+        # Set our custom class as the parser class\n+        kwargs['parser_class'] = SubCommandParser\n+        \n+        # Call parent's add_subparsers with our custom parser class\n+        return super().add_subparsers(**kwargs)\n+\n \n def handle_default_options(options):\n     \"\"\"\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex e40632385c..c8d677b667 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -406,6 +406,31 @@ class CommandTests(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, msg):\n             management.call_command(\"subparser_dest\", subcommand=\"foo\", bar=12)\n \n+    def test_subparser_error_formatting(self):\n+        \"\"\"\n+        Management command subparsers should retain error formatting from the\n+        parent CommandParser, raising CommandError instead of showing a stack trace.\n+        \"\"\"\n+        # Test missing required argument to subparser - should raise CommandError\n+        msg = \"Error: the following arguments are required: bar\"\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command(\"subparser\", \"foo\")\n+            \n+        # Direct test of CommandParser subparser inheritance\n+        from django.core.management.base import CommandParser\n+        \n+        # Test with called_from_command_line=False (should raise CommandError)\n+        parser = CommandParser(called_from_command_line=False)\n+        subparsers = parser.add_subparsers()\n+        subparser = subparsers.add_parser(\"test\")\n+        subparser.add_argument(\"required_arg\")\n+        \n+        with self.assertRaises(CommandError):\n+            parser.parse_args([\"test\"])  # Missing required_arg\n+            \n+        # Verify the subparser has inherited the parent's attributes\n+        self.assertFalse(subparser.called_from_command_line)\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = \"some epilog text\"\n", "gold_standard_diff": "From 017fa23d3b0aee9142f531c2a0002fc86c82a54c Mon Sep 17 00:00:00 2001\nFrom: Adam Johnson <me@adamj.eu>\nDate: Sun, 15 Jan 2023 09:19:52 +0000\nSubject: [PATCH] Fixed #34259 -- Passed called_from_command_line to command\n subparsers.\n\n---\n django/core/management/base.py                | 10 ++++++++\n .../management/commands/subparser_vanilla.py  | 13 ++++++++++\n tests/user_commands/tests.py                  | 24 +++++++++++++++++++\n 3 files changed, 47 insertions(+)\n create mode 100644 tests/user_commands/management/commands/subparser_vanilla.py\n\ndiff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a1570..631c761c004a 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -6,6 +6,7 @@\n import os\n import sys\n from argparse import ArgumentParser, HelpFormatter\n+from functools import partial\n from io import TextIOBase\n \n import django\n@@ -71,6 +72,15 @@ def error(self, message):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        parser_class = kwargs.get(\"parser_class\", type(self))\n+        if issubclass(parser_class, CommandParser):\n+            kwargs[\"parser_class\"] = partial(\n+                parser_class,\n+                called_from_command_line=self.called_from_command_line,\n+            )\n+        return super().add_subparsers(**kwargs)\n+\n \n def handle_default_options(options):\n     \"\"\"\ndiff --git a/tests/user_commands/management/commands/subparser_vanilla.py b/tests/user_commands/management/commands/subparser_vanilla.py\nnew file mode 100644\nindex 000000000000..1605f21cadcc\n--- /dev/null\n+++ b/tests/user_commands/management/commands/subparser_vanilla.py\n@@ -0,0 +1,13 @@\n+import argparse\n+\n+from django.core.management.base import BaseCommand\n+\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+        parser_foo = subparsers.add_parser(\"foo\")\n+        parser_foo.add_argument(\"bar\", type=int)\n+\n+    def handle(self, *args, **options):\n+        pass\ndiff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex e40632385cb1..408108b5525f 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,30 @@ def test_skip_checks(self):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+    def test_subparser_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.maxDiff = None\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\",\n+        )\n+\n+    def test_subparser_non_django_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser_vanilla\", \"foo\", \"seven\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser_vanilla foo: error: argument bar: invalid int value: \"\n+            \"'seven'\",\n+        )\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16454"}