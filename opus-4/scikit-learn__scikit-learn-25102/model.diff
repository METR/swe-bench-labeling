diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..c44cdc78c 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
@@ -36,6 +37,11 @@ def _wrap_in_pandas_container(
     index : array-like, default=None
         Index for data.
 
+    dtypes : dict, Series or None, default=None
+        Output dtype(s) for the dataframe columns. If None, the dtypes
+        are inferred from the data. Only used if dtypes are preserved
+        in the output configuration.
+
     Returns
     -------
     dataframe : DataFrame
@@ -57,9 +63,14 @@ def _wrap_in_pandas_container(
             data_to_wrap.columns = columns
         if index is not None:
             data_to_wrap.index = index
+        if dtypes is not None:
+            data_to_wrap = data_to_wrap.astype(dtypes)
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    if dtypes is not None:
+        df = df.astype(dtypes)
+    return df
 
 
 def _get_output_config(method, estimator=None):
@@ -127,10 +138,25 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         return data_to_wrap
 
     # dense_config == "pandas"
+    # Check if we need to preserve dtypes
+    dtypes = None
+    preserve_dtypes = getattr(estimator, "_sklearn_preserve_dtypes", False)
+    if preserve_dtypes and hasattr(original_input, "dtypes"):
+        # Get the original dtypes that we need to preserve
+        original_dtypes = original_input.dtypes
+        # Get the feature names that will be in the output
+        feature_names_out = estimator.get_feature_names_out()
+        # Map the original dtypes to the output features
+        dtypes = {}
+        for out_name in feature_names_out:
+            if out_name in original_dtypes:
+                dtypes[out_name] = original_dtypes[out_name]
+    
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
 
 
@@ -208,7 +234,7 @@ class _SetOutputMixin:
             setattr(cls, method, wrapped_method)
 
     @available_if(_auto_wrap_is_configured)
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=False):
         """Set output container.
 
         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
@@ -223,6 +249,11 @@ class _SetOutputMixin:
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
 
+        preserve_dtypes : bool, default=False
+            If True and transform="pandas", preserve the dtypes of the input
+            data for features that are not modified by the transformer.
+            Only applicable for pandas DataFrames.
+
         Returns
         -------
         self : estimator instance
@@ -235,6 +266,7 @@ class _SetOutputMixin:
             self._sklearn_output_config = {}
 
         self._sklearn_output_config["transform"] = transform
+        self._sklearn_preserve_dtypes = preserve_dtypes
         return self
 
 
diff --git a/test_dtype_preservation.py b/test_dtype_preservation.py
new file mode 100644
index 000000000..49b393b97
--- /dev/null
+++ b/test_dtype_preservation.py
@@ -0,0 +1,22 @@
+import numpy as np
+from sklearn.datasets import load_iris
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import chi2
+
+X, y = load_iris(return_X_y=True, as_frame=True)
+X = X.astype(
+   {
+       "petal width (cm)": np.float16,
+       "petal length (cm)": np.float16,
+   }
+)
+X["cat"] = y.astype("category")
+
+print("Original dtypes:")
+print(X.dtypes)
+
+selector = SelectKBest(chi2, k=2)
+selector.set_output(transform="pandas")
+X_out = selector.fit_transform(X, y)
+print("\nTransformed dtypes:")
+print(X_out.dtypes)
diff --git a/test_dtype_preservation_fixed.py b/test_dtype_preservation_fixed.py
new file mode 100644
index 000000000..bc15d41ba
--- /dev/null
+++ b/test_dtype_preservation_fixed.py
@@ -0,0 +1,29 @@
+import numpy as np
+from sklearn.datasets import load_iris
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import chi2
+
+X, y = load_iris(return_X_y=True, as_frame=True)
+X = X.astype(
+   {
+       "petal width (cm)": np.float16,
+       "petal length (cm)": np.float16,
+   }
+)
+X["cat"] = y.astype("category")
+
+print("Original dtypes:")
+print(X.dtypes)
+
+selector = SelectKBest(chi2, k=2)
+selector.set_output(transform="pandas", preserve_dtypes=True)
+X_out = selector.fit_transform(X, y)
+print("\nTransformed dtypes (with preserve_dtypes=True):")
+print(X_out.dtypes)
+
+# Test without preserving dtypes
+selector2 = SelectKBest(chi2, k=2)
+selector2.set_output(transform="pandas", preserve_dtypes=False)
+X_out2 = selector2.fit_transform(X, y)
+print("\nTransformed dtypes (with preserve_dtypes=False):")
+print(X_out2.dtypes)
diff --git a/test_set_output_dtype_preservation.py b/test_set_output_dtype_preservation.py
new file mode 100644
index 000000000..a441bc949
--- /dev/null
+++ b/test_set_output_dtype_preservation.py
@@ -0,0 +1,93 @@
+import pytest
+import numpy as np
+import pandas as pd
+from sklearn.utils._set_output import _SetOutputMixin
+
+
+class DummyTransformer(_SetOutputMixin):
+    """A simple transformer for testing dtype preservation."""
+    
+    def __init__(self):
+        self.n_features_in_ = None
+        self.feature_names_in_ = None
+    
+    def fit(self, X, y=None):
+        if hasattr(X, "columns"):
+            self.n_features_in_ = X.shape[1]
+            self.feature_names_in_ = np.asarray(X.columns)
+        else:
+            self.n_features_in_ = X.shape[1]
+            self.feature_names_in_ = None
+        return self
+    
+    def transform(self, X):
+        # Select columns 0 and 2 and convert to numpy array to simulate
+        # a transformer that computes new values
+        if hasattr(X, "iloc"):
+            data = X.iloc[:, [0, 2]].values
+        else:
+            data = X[:, [0, 2]]
+        return data
+    
+    def get_feature_names_out(self, input_features=None):
+        if self.feature_names_in_ is not None:
+            return self.feature_names_in_[[0, 2]]
+        else:
+            return np.array([f"x{i}" for i in [0, 2]], dtype=object)
+    
+    def fit_transform(self, X, y=None):
+        return self.fit(X, y).transform(X)
+
+
+def test_dtype_preservation():
+    """Test that dtypes are preserved when preserve_dtypes=True."""
+    # Create a DataFrame with mixed dtypes
+    df = pd.DataFrame({
+        'a': [1.0, 2.0, 3.0],
+        'b': [4, 5, 6],
+        'c': pd.Series([7.0, 8.0, 9.0], dtype=np.float16),
+        'd': pd.Categorical(['A', 'B', 'C'])
+    })
+    
+    transformer = DummyTransformer()
+    
+    # Test with preserve_dtypes=True
+    transformer.set_output(transform="pandas", preserve_dtypes=True)
+    result = transformer.fit_transform(df)
+    
+    assert result['a'].dtype == df['a'].dtype  # float64
+    assert result['c'].dtype == df['c'].dtype  # float16
+    
+    # Test with preserve_dtypes=False (default)
+    transformer2 = DummyTransformer()
+    transformer2.set_output(transform="pandas", preserve_dtypes=False)
+    result2 = transformer2.fit_transform(df)
+    
+    # When not preserving dtypes, pandas will keep the dtype from the input
+    # if it's a DataFrame slice, so we check that dtypes are at least numeric
+    print(f"result2['a'].dtype: {result2['a'].dtype}")
+    print(f"result2['c'].dtype: {result2['c'].dtype}")
+    assert np.issubdtype(result2['a'].dtype, np.number)
+    assert np.issubdtype(result2['c'].dtype, np.number)
+
+
+def test_categorical_dtype_preservation():
+    """Test that categorical dtypes are preserved."""
+    df = pd.DataFrame({
+        'cat1': pd.Categorical(['A', 'B', 'C']),
+        'num': [1, 2, 3],
+        'cat2': pd.Categorical(['X', 'Y', 'Z'])
+    })
+    
+    transformer = DummyTransformer()
+    transformer.set_output(transform="pandas", preserve_dtypes=True)
+    result = transformer.fit_transform(df)
+    
+    assert isinstance(result['cat1'].dtype, pd.CategoricalDtype)
+    assert isinstance(result['cat2'].dtype, pd.CategoricalDtype)
+
+
+if __name__ == "__main__":
+    test_dtype_preservation()
+    test_categorical_dtype_preservation()
+    print("All tests passed!")
