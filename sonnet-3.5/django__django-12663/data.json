{"instance_id": "django__django-12663", "score": "I", "diff": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..42bee5b46f 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1768,6 +1768,9 @@ class IntegerField(Field):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        from django.utils.functional import SimpleLazyObject\n+        if isinstance(value, SimpleLazyObject):\n+            value = value._wrapped\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n", "gold_standard_diff": "From 4237050684427db45ea834fe89d9e11c0520201e Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Sat, 4 Apr 2020 20:55:20 +0200\nSubject: [PATCH] Fixed #31420 -- Fixed crash when filtering subquery\n annotation against a SimpleLazyObject.\n\nThanks Simon Charette for the solution and analysis.\n---\n django/db/models/sql/query.py |  3 ++-\n docs/releases/3.0.6.txt       |  4 +++-\n tests/expressions/models.py   |  5 +++++\n tests/expressions/tests.py    | 20 ++++++++++++++++++--\n 4 files changed, 28 insertions(+), 4 deletions(-)\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9fe0c9a656db..e5524a8198e5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -233,7 +233,8 @@ def __init__(self, model, where=WhereNode, alias_cols=True):\n     @property\n     def output_field(self):\n         if len(self.select) == 1:\n-            return self.select[0].field\n+            select = self.select[0]\n+            return getattr(select, 'target', None) or select.field\n         elif len(self.annotation_select) == 1:\n             return next(iter(self.annotation_select.values())).output_field\n \ndiff --git a/docs/releases/3.0.6.txt b/docs/releases/3.0.6.txt\nindex e25d6e8fc896..6fd7aad02b4f 100644\n--- a/docs/releases/3.0.6.txt\n+++ b/docs/releases/3.0.6.txt\n@@ -9,4 +9,6 @@ Django 3.0.6 fixes several bugs in 3.0.5.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 3.0 that caused a crash when filtering a\n+  ``Subquery()`` annotation of a queryset containing a single related field\n+  against a ``SimpleLazyObject`` (:ticket:`31420`).\ndiff --git a/tests/expressions/models.py b/tests/expressions/models.py\nindex a81ba9e16b53..a3129207fa84 100644\n--- a/tests/expressions/models.py\n+++ b/tests/expressions/models.py\n@@ -6,10 +6,15 @@\n from django.db import models\n \n \n+class Manager(models.Model):\n+    name = models.CharField(max_length=50)\n+\n+\n class Employee(models.Model):\n     firstname = models.CharField(max_length=50)\n     lastname = models.CharField(max_length=50)\n     salary = models.IntegerField(blank=True, null=True)\n+    manager = models.ForeignKey(Manager, models.CASCADE, null=True)\n \n     def __str__(self):\n         return '%s %s' % (self.firstname, self.lastname)\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0fac4642f76b..b17a286d5df0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -21,10 +21,11 @@\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n+from django.utils.functional import SimpleLazyObject\n \n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n-    Result, SimulationRun, Time,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n+    RemoteEmployee, Result, SimulationRun, Time,\n )\n \n \n@@ -608,6 +609,21 @@ def test_subquery_filter_by_aggregate(self):\n         )\n         self.assertEqual(qs.get().float, 1.2)\n \n+    def test_subquery_filter_by_lazy(self):\n+        self.max.manager = Manager.objects.create(name='Manager')\n+        self.max.save()\n+        max_manager = SimpleLazyObject(\n+            lambda: Manager.objects.get(pk=self.max.manager.pk)\n+        )\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=max_manager)\n+        self.assertEqual(qs.get(), self.gmbh)\n+\n     def test_aggregate_subquery_annotation(self):\n         with self.assertNumQueries(1) as ctx:\n             aggregate = Company.objects.annotate(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12663"}