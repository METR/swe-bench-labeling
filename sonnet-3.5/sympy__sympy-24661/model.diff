diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 52711d1324..652aee5349 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -897,14 +897,15 @@ def stringify_expr(s: str, local_dict: DICT, global_dict: DICT,
     return untokenize(tokens)
 
 
-def eval_expr(code, local_dict: DICT, global_dict: DICT):
+def eval_expr(code, local_dict: DICT, global_dict: DICT, evaluate=True):
     """
     Evaluate Python code generated by ``stringify_expr``.
 
     Generally, ``parse_expr`` should be used.
     """
-    expr = eval(
-        code, global_dict, local_dict)  # take local objects in preference
+    from sympy.core.parameters import evaluate as sympy_evaluate
+    with sympy_evaluate(evaluate):
+        expr = eval(code, global_dict, local_dict)  # take local objects in preference
     return expr
 
 
@@ -914,6 +915,9 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,
                global_dict: Optional[DICT] = None, evaluate=True):
     """Converts the string ``s`` to a SymPy expression, in ``local_dict``.
 
+    Note: The `evaluate` parameter is now properly handled for all expressions,
+    including relationals.
+
     Parameters
     ==========
 
@@ -1075,7 +1079,7 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,
         code = compile(evaluateFalse(code), '<string>', 'eval')
 
     try:
-        rv = eval_expr(code, local_dict, global_dict)
+        rv = eval_expr(code, local_dict, global_dict, evaluate=evaluate)
         # restore neutral definitions for names
         for i in local_dict.pop(null, ()):
             local_dict[i] = null
diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py
index 7c43e1fce3..70268e4b7e 100644
--- a/sympy/parsing/tests/test_sympy_parser.py
+++ b/sympy/parsing/tests/test_sympy_parser.py
@@ -319,6 +319,11 @@ def test_issue_19501():
         (implicit_multiplication_application,)))
     assert eq.free_symbols == {x}
 
+def test_relational_evaluate_false():
+    from sympy import Lt
+    assert parse_expr('1 < 2', evaluate=False) == Lt(1, 2, evaluate=False)
+    assert str(parse_expr('1 < 2', evaluate=False)) == '1 < 2'
+
 
 def test_parsing_definitions():
     from sympy.abc import x
