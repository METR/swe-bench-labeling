{"instance_id": "django__django-16819", "score": "I", "diff": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 7e5dea2377..b6332add71 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,5 @@\n+from django.db.migrations.operations.indexes import AddIndex, RemoveIndex\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -40,10 +42,23 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n+        skip_next = False\n         for i, operation in enumerate(operations):\n+            if skip_next:\n+                skip_next = False\n+                continue\n+\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n             for j, other in enumerate(operations[i + 1 :]):\n+                # Check for consecutive AddIndex and RemoveIndex operations\n+                if (isinstance(operation, AddIndex) and isinstance(other, RemoveIndex)) or \\\n+                   (isinstance(operation, RemoveIndex) and isinstance(other, AddIndex)):\n+                    if operation.model_name == other.model_name and operation.index.fields == other.index.fields:\n+                        # Skip both operations as they cancel each other out\n+                        skip_next = True\n+                        break\n+\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1 : i + j + 1]\n@@ -65,5 +80,6 @@ class MigrationOptimizer:\n                     # Can't perform a right reduction.\n                     right = False\n             else:\n-                new_operations.append(operation)\n+                if not skip_next:\n+                    new_operations.append(operation)\n         return new_operations\n", "gold_standard_diff": "From 5302ed13f8c887ff2e1520393bbe3456fa08351b Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Mon, 1 May 2023 17:15:51 +0200\nSubject: [PATCH] Fixed #34528 -- Reduced Add/RemoveIndex operations when\n optimizing migrations.\n\n---\n django/db/migrations/operations/models.py |  5 +++++\n tests/migrations/test_optimizer.py        | 14 ++++++++++++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 967a91fdc89c..b89b6b511bbf 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -861,6 +861,11 @@ def describe(self):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n+            return []\n+        return super().reduce(operation, app_label)\n+\n \n class RemoveIndex(IndexOperation):\n     \"\"\"Remove an index from a model.\"\"\"\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 8cd4c67fbd0d..2f6616ad5b46 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1158,3 +1158,17 @@ def test_rename_index(self):\n                 ),\n             ]\n         )\n+\n+    def test_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [],\n+        )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16819"}