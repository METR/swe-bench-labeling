{"instance_id": "sphinx-doc__sphinx-9711", "score": "C", "diff": "diff --git a/setup.py b/setup.py\nindex 3dbc8746b..31bd48c0a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp>=2.0.0',\n-    'sphinxcontrib-serializinghtml>=1.1.5',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',\n+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.14,<0.18',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 7ec6c8518..5e9c36519 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -10,6 +10,8 @@\n \n from typing import TYPE_CHECKING, Any, Dict\n \n+from packaging.version import Version, InvalidVersion\n+\n from sphinx.config import Config\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n@@ -51,11 +53,29 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version':\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n                                           (extname, reqversion, extension.version))\n+        \n+        try:\n+            required_version = Version(reqversion)\n+            actual_version = Version(extension.version)\n+            if actual_version < required_version:\n+                raise VersionRequirementError(__('This project needs the extension %s at least in '\n+                                                 'version %s and therefore cannot be built with '\n+                                                 'the loaded version (%s).') %\n+                                              (extname, reqversion, extension.version))\n+        except InvalidVersion:\n+            # Fall back to string comparison if version parsing fails\n+            logger.warning(__('Version comparison for %s extension failed. '\n+                              'Using string comparison as fallback.'), extname)\n+            if reqversion > extension.version:\n+                raise VersionRequirementError(__('This project needs the extension %s at least in '\n+                                                 'version %s and therefore cannot be built with '\n+                                                 'the loaded version (%s).') %\n+                                              (extname, reqversion, extension.version))\n \n \n def setup(app: \"Sphinx\") -> Dict[str, Any]:\ndiff --git a/tests/test_needs_extensions.py b/tests/test_needs_extensions.py\nnew file mode 100644\nindex 000000000..f0804359d\n--- /dev/null\n+++ b/tests/test_needs_extensions.py\n@@ -0,0 +1,110 @@\n+\"\"\"Test the needs_extensions functionality.\"\"\"\n+\n+import pytest\n+\n+from sphinx.config import Config\n+from sphinx.errors import VersionRequirementError\n+from sphinx.extension import Extension, verify_needs_extensions\n+\n+\n+class MockApp:\n+    \"\"\"Mock Sphinx application for testing.\"\"\"\n+    def __init__(self):\n+        self.extensions = {}\n+\n+\n+def test_needs_extensions_version_comparison():\n+    \"\"\"Test that version comparison works correctly with semantic versioning.\"\"\"\n+    app = MockApp()\n+    \n+    # Test case 1: Version 0.10 should be accepted when 0.6 is required\n+    config = Config({}, {})\n+    config.needs_extensions = {'test_ext': '0.6'}\n+    ext = Extension('test_ext', None, version='0.10')\n+    app.extensions['test_ext'] = ext\n+    \n+    # Should not raise an error\n+    verify_needs_extensions(app, config)\n+    \n+    # Test case 2: Version 0.5 should be rejected when 0.6 is required\n+    config2 = Config({}, {})\n+    config2.needs_extensions = {'test_ext': '0.6'}\n+    ext2 = Extension('test_ext', None, version='0.5')\n+    app.extensions['test_ext'] = ext2\n+    \n+    with pytest.raises(VersionRequirementError):\n+        verify_needs_extensions(app, config2)\n+    \n+    # Test case 3: Same version should be accepted\n+    config3 = Config({}, {})\n+    config3.needs_extensions = {'test_ext': '0.6'}\n+    ext3 = Extension('test_ext', None, version='0.6')\n+    app.extensions['test_ext'] = ext3\n+    \n+    # Should not raise an error\n+    verify_needs_extensions(app, config3)\n+    \n+    # Test case 4: Version 1.0 should be accepted when 0.10 is required\n+    config4 = Config({}, {})\n+    config4.needs_extensions = {'test_ext': '0.10'}\n+    ext4 = Extension('test_ext', None, version='1.0')\n+    app.extensions['test_ext'] = ext4\n+    \n+    # Should not raise an error\n+    verify_needs_extensions(app, config4)\n+    \n+    # Test case 5: Version 0.9 should be rejected when 0.10 is required\n+    config5 = Config({}, {})\n+    config5.needs_extensions = {'test_ext': '0.10'}\n+    ext5 = Extension('test_ext', None, version='0.9')\n+    app.extensions['test_ext'] = ext5\n+    \n+    with pytest.raises(VersionRequirementError):\n+        verify_needs_extensions(app, config5)\n+\n+\n+def test_needs_extensions_unknown_version():\n+    \"\"\"Test handling of 'unknown version'.\"\"\"\n+    app = MockApp()\n+    config = Config({}, {})\n+    config.needs_extensions = {'test_ext': '0.6'}\n+    ext = Extension('test_ext', None, version='unknown version')\n+    app.extensions['test_ext'] = ext\n+    \n+    with pytest.raises(VersionRequirementError):\n+        verify_needs_extensions(app, config)\n+\n+\n+def test_needs_extensions_missing_extension():\n+    \"\"\"Test handling of missing extensions.\"\"\"\n+    app = MockApp()\n+    config = Config({}, {})\n+    config.needs_extensions = {'missing_ext': '0.6'}\n+    \n+    # Should not raise an error, just warn\n+    verify_needs_extensions(app, config)\n+\n+\n+def test_needs_extensions_none():\n+    \"\"\"Test when needs_extensions is None.\"\"\"\n+    app = MockApp()\n+    config = Config({}, {})\n+    config.needs_extensions = None\n+    \n+    # Should not raise an error\n+    verify_needs_extensions(app, config)\n+\n+\n+def test_needs_extensions_invalid_version_format():\n+    \"\"\"Test fallback to string comparison for invalid version formats.\"\"\"\n+    app = MockApp()\n+    config = Config({}, {})\n+    \n+    # Both versions are invalid for packaging.version.Version\n+    config.needs_extensions = {'test_ext': 'custom-0.6'}\n+    ext = Extension('test_ext', None, version='custom-0.10')\n+    app.extensions['test_ext'] = ext\n+    \n+    # With string comparison 'custom-0.10' < 'custom-0.6', so it should fail\n+    with pytest.raises(VersionRequirementError):\n+        verify_needs_extensions(app, config)\ndiff --git a/tox.ini b/tox.ini\nindex 00c8e13bd..11d3352df 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -22,14 +22,14 @@ deps =\n     du15: docutils==0.15.*\n     du16: docutils==0.16.*\n     du17: docutils==0.17.*\n-    py311: git+https://github.com/pytest-dev/py\n+    py311: git+https://github.com/pytest -rA-dev/py\n extras =\n     test\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:du-latest]\n commands =\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex ae7cbbe7ccc..4c70a1bbb56 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -63,6 +63,7 @@ Bugs fixed\n * #9678: linkcheck: file extension was shown twice in warnings\n * #9697: py domain: An index entry with parens was registered for ``py:method``\n   directive with ``:property:`` option\n+* #9708: needs_extension failed to check double-digit version correctly\n \n Testing\n --------\ndiff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 7ec6c8518c3..34bf7763ad7 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -10,6 +10,8 @@\n \n from typing import TYPE_CHECKING, Any, Dict\n \n+from packaging.version import InvalidVersion, Version\n+\n from sphinx.config import Config\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n@@ -51,7 +53,18 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        fulfilled = True\n+        if extension.version == 'unknown version':\n+            fulfilled = False\n+        else:\n+            try:\n+                if Version(reqversion) > Version(extension.version):\n+                    fulfilled = False\n+            except InvalidVersion:\n+                if reqversion > extension.version:\n+                    fulfilled = False\n+\n+        if not fulfilled:\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\ndiff --git a/tests/test_extension.py b/tests/test_extension.py\nnew file mode 100644\nindex 00000000000..db9f4e48761\n--- /dev/null\n+++ b/tests/test_extension.py\n@@ -0,0 +1,31 @@\n+\"\"\"\n+    test_extension\n+    ~~~~~~~~~~~~~~\n+\n+    Test sphinx.extesion module.\n+\n+    :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.\n+    :license: BSD, see LICENSE for details.\n+\"\"\"\n+\n+import pytest\n+\n+from sphinx.errors import VersionRequirementError\n+from sphinx.extension import Extension, verify_needs_extensions\n+\n+\n+def test_needs_extensions(app):\n+    # empty needs_extensions\n+    assert app.config.needs_extensions == {}\n+    verify_needs_extensions(app, app.config)\n+\n+    # needs_extensions fulfilled\n+    app.config.needs_extensions = {'test.extension': '3.9'}\n+    app.extensions['test.extension'] = Extension('test.extension', 'test.extension', version='3.10')\n+    verify_needs_extensions(app, app.config)\n+\n+    # needs_extensions not fulfilled\n+    app.config.needs_extensions = {'test.extension': '3.11'}\n+    app.extensions['test.extension'] = Extension('test.extension', 'test.extension', version='3.10')\n+    with pytest.raises(VersionRequirementError):\n+        verify_needs_extensions(app, app.config)\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/9711"}