{"instance_id": "sympy__sympy-24213", "score": "C", "diff": "diff --git a/sympy/physics/units/tests/test_unitsystem.py b/sympy/physics/units/tests/test_unitsystem.py\nindex a04f3aabb6..54b53f719b 100644\n--- a/sympy/physics/units/tests/test_unitsystem.py\n+++ b/sympy/physics/units/tests/test_unitsystem.py\n@@ -84,3 +84,48 @@ def test_derived_units_must_exist_in_unit_system():\n             units = preferred_unit.atoms(Quantity)\n             for unit in units:\n                 assert unit in unit_system._units, f\"Unit {unit} is not in unit system {unit_system}\"\n+\n+\n+def test_collect_factor_and_dimension_equivalent_dimensions():\n+    \"\"\"Test that collect_factor_and_dimension recognizes equivalent dimensions in addition.\n+    \n+    This is a regression test for the issue where acceleration*time + velocity\n+    was incorrectly raising a ValueError even though the dimensions are equivalent.\n+    \"\"\"\n+    from sympy.physics import units\n+    from sympy.physics.units.systems.si import SI\n+    \n+    # Create test quantities\n+    v1 = units.Quantity('v1')\n+    SI.set_quantity_dimension(v1, units.velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)\n+    \n+    a1 = units.Quantity('a1')\n+    SI.set_quantity_dimension(a1, units.acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)\n+    \n+    t1 = units.Quantity('t1')\n+    SI.set_quantity_dimension(t1, units.time)\n+    SI.set_quantity_scale_factor(t1, 5 * units.second)\n+    \n+    # Test that acceleration*time + velocity works (equivalent dimensions)\n+    expr1 = a1*t1 + v1\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert factor == -47.0\n+    \n+    # Test that length/time + velocity works (equivalent dimensions)\n+    l1 = units.Quantity('l1')\n+    SI.set_quantity_dimension(l1, units.length)\n+    SI.set_quantity_scale_factor(l1, 10 * units.meter)\n+    \n+    expr2 = l1 / t1 + v1\n+    factor2, dimension2 = SI._collect_factor_and_dimension(expr2)\n+    assert factor2 == 4.0\n+    \n+    # Test that incompatible dimensions still raise error\n+    m1 = units.Quantity('m1')\n+    SI.set_quantity_dimension(m1, units.mass)\n+    SI.set_quantity_scale_factor(m1, 5 * units.kilogram)\n+    \n+    from sympy.testing.pytest import raises\n+    raises(ValueError, lambda: SI._collect_factor_and_dimension(v1 + m1))\ndiff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n", "gold_standard_diff": "From f6543ed346d0485fdc753ebd5ccf6edebcb07258 Mon Sep 17 00:00:00 2001\nFrom: Andrey Lekar <andrey_lekar@adoriasoft.com>\nDate: Thu, 3 Nov 2022 15:56:42 +0200\nSubject: [PATCH] Fix collect_factor_and_dimension\n\n---\n sympy/physics/units/tests/test_quantities.py | 16 ++++++++++++++++\n sympy/physics/units/unitsystem.py            |  2 +-\n 2 files changed, 17 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex c1830ba5f772..0d6784decf2d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,22 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\ndiff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b3c..5705c821c217 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/24213"}