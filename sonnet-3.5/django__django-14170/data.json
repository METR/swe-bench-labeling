{"instance_id": "django__django-14170", "score": "I", "diff": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075..43095262cc 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -548,8 +548,8 @@ class YearLookup(Lookup):\n \n     def as_sql(self, compiler, connection):\n         # Avoid the extract operation if the rhs is a direct value to allow\n-        # indexes to be used.\n-        if self.rhs_is_direct_value():\n+        # indexes to be used, but only for non-ISO year lookups.\n+        if self.rhs_is_direct_value() and not isinstance(self.lhs.lhs.output_field, DateTimeField):\n             # Skip the extract part by directly using the originating field,\n             # that is self.lhs.lhs.\n             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n@@ -558,6 +558,7 @@ class YearLookup(Lookup):\n             start, finish = self.year_lookup_bounds(connection, self.rhs)\n             params.extend(self.get_bound_params(start, finish))\n             return '%s %s' % (lhs_sql, rhs_sql), params\n+        # For ISO year lookups or non-direct values, use the default behavior\n         return super().as_sql(compiler, connection)\n \n     def get_direct_rhs_sql(self, connection, rhs):\ndiff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 258600127f..3099914182 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -642,6 +642,30 @@ class DateFunctionTests(TestCase):\n         with self.assertRaisesMessage(ValueError, \"Cannot truncate TimeField 'start_time' to DateTimeField\"):\n             list(DTModel.objects.annotate(truncated=Trunc('start_time', 'month')))\n \n+    def test_iso_year_lookup(self):\n+        # Create test data\n+        start_datetime = datetime(2015, 1, 1, 0, 0, 0)  # ISO year 2015\n+        end_datetime = datetime(2016, 1, 3, 0, 0, 0)  # ISO year 2015\n+        if settings.USE_TZ:\n+            start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n+            end_datetime = timezone.make_aware(end_datetime, is_dst=False)\n+        self.create_model(start_datetime, end_datetime)\n+\n+        # Test __iso_year lookup\n+        qs = DTModel.objects.filter(start_datetime__iso_year=2015)\n+        self.assertEqual(qs.count(), 1)\n+        \n+        # Test that the EXTRACT function is used for __iso_year lookup\n+        self.assertIn('EXTRACT', str(qs.query).upper())\n+\n+        # Test annotation with ExtractIsoYear\n+        qs = DTModel.objects.annotate(iso_year=ExtractIsoYear('start_datetime')).filter(iso_year=2015)\n+        self.assertEqual(qs.count(), 1)\n+\n+        # Ensure that regular year lookup still works\n+        qs = DTModel.objects.filter(start_datetime__year=2015)\n+        self.assertEqual(qs.count(), 1)\n+        self.assertNotIn('EXTRACT', str(qs.query).upper())  # Should use BETWEEN optimization\n         with self.assertRaisesMessage(ValueError, \"Cannot truncate DateField 'start_date' to DateTimeField\"):\n             list(DTModel.objects.annotate(truncated=Trunc('start_date', 'month', output_field=DateTimeField())))\n \n", "gold_standard_diff": "From 3a185cee2af919cd0e897d884eaafe421cd3ba48 Mon Sep 17 00:00:00 2001\nFrom: Florian Demmer <fdemmer@gmail.com>\nDate: Thu, 18 Mar 2021 12:59:55 +0100\nSubject: [PATCH] Fixed #32573 -- Fixed bounds in __iso_year lookup\n optimization.\n\n---\n django/db/backends/base/operations.py         | 28 +++++++++++++++----\n django/db/models/lookups.py                   | 10 +++++--\n docs/releases/4.0.txt                         |  5 +++-\n .../datetime/test_extract_trunc.py            | 19 +++++++++++--\n 4 files changed, 50 insertions(+), 12 deletions(-)\n\ndiff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 0fcc607bcfb0..f6a043e31f52 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -526,30 +526,46 @@ def adapt_ipaddressfield_value(self, value):\n         \"\"\"\n         return value or None\n \n-    def year_lookup_bounds_for_date_field(self, value):\n+    def year_lookup_bounds_for_date_field(self, value, iso_year=False):\n         \"\"\"\n         Return a two-elements list with the lower and upper bound to be used\n         with a BETWEEN operator to query a DateField value using a year\n         lookup.\n \n         `value` is an int, containing the looked-up year.\n+        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n         \"\"\"\n-        first = datetime.date(value, 1, 1)\n-        second = datetime.date(value, 12, 31)\n+        if iso_year:\n+            first = datetime.date.fromisocalendar(value, 1, 1)\n+            second = (\n+                datetime.date.fromisocalendar(value + 1, 1, 1) -\n+                datetime.timedelta(days=1)\n+            )\n+        else:\n+            first = datetime.date(value, 1, 1)\n+            second = datetime.date(value, 12, 31)\n         first = self.adapt_datefield_value(first)\n         second = self.adapt_datefield_value(second)\n         return [first, second]\n \n-    def year_lookup_bounds_for_datetime_field(self, value):\n+    def year_lookup_bounds_for_datetime_field(self, value, iso_year=False):\n         \"\"\"\n         Return a two-elements list with the lower and upper bound to be used\n         with a BETWEEN operator to query a DateTimeField value using a year\n         lookup.\n \n         `value` is an int, containing the looked-up year.\n+        If `iso_year` is True, return bounds for ISO-8601 week-numbering years.\n         \"\"\"\n-        first = datetime.datetime(value, 1, 1)\n-        second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n+        if iso_year:\n+            first = datetime.datetime.fromisocalendar(value, 1, 1)\n+            second = (\n+                datetime.datetime.fromisocalendar(value + 1, 1, 1) -\n+                datetime.timedelta(microseconds=1)\n+            )\n+        else:\n+            first = datetime.datetime(value, 1, 1)\n+            second = datetime.datetime(value, 12, 31, 23, 59, 59, 999999)\n         if settings.USE_TZ:\n             tz = timezone.get_current_timezone()\n             first = timezone.make_aware(first, tz)\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 916478d075b1..6c923fe1a68e 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -539,11 +539,17 @@ class IRegex(Regex):\n \n class YearLookup(Lookup):\n     def year_lookup_bounds(self, connection, year):\n+        from django.db.models.functions import ExtractIsoYear\n+        iso_year = isinstance(self.lhs, ExtractIsoYear)\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n-            bounds = connection.ops.year_lookup_bounds_for_datetime_field(year)\n+            bounds = connection.ops.year_lookup_bounds_for_datetime_field(\n+                year, iso_year=iso_year,\n+            )\n         else:\n-            bounds = connection.ops.year_lookup_bounds_for_date_field(year)\n+            bounds = connection.ops.year_lookup_bounds_for_date_field(\n+                year, iso_year=iso_year,\n+            )\n         return bounds\n \n     def as_sql(self, compiler, connection):\ndiff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt\nindex 2b82c62d0229..f47b2fb5a02b 100644\n--- a/docs/releases/4.0.txt\n+++ b/docs/releases/4.0.txt\n@@ -289,7 +289,10 @@ Database backend API\n This section describes changes that may be needed in third-party database\n backends.\n \n-* ...\n+* ``DatabaseOperations.year_lookup_bounds_for_date_field()`` and\n+  ``year_lookup_bounds_for_datetime_field()`` methods now take the optional\n+  ``iso_year`` argument in order to support bounds for ISO-8601 week-numbering\n+  years.\n \n :mod:`django.contrib.gis`\n -------------------------\ndiff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 258600127f93..63040f519837 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -359,9 +359,9 @@ def test_extract_iso_year_func_boundaries(self):\n             week_52_day_2014 = timezone.make_aware(week_52_day_2014, is_dst=False)\n             week_53_day_2015 = timezone.make_aware(week_53_day_2015, is_dst=False)\n         days = [week_52_day_2014, week_1_day_2014_2015, week_53_day_2015]\n-        self.create_model(week_53_day_2015, end_datetime)\n-        self.create_model(week_52_day_2014, end_datetime)\n-        self.create_model(week_1_day_2014_2015, end_datetime)\n+        obj_1_iso_2014 = self.create_model(week_52_day_2014, end_datetime)\n+        obj_1_iso_2015 = self.create_model(week_1_day_2014_2015, end_datetime)\n+        obj_2_iso_2015 = self.create_model(week_53_day_2015, end_datetime)\n         qs = DTModel.objects.filter(start_datetime__in=days).annotate(\n             extracted=ExtractIsoYear('start_datetime'),\n         ).order_by('start_datetime')\n@@ -371,6 +371,19 @@ def test_extract_iso_year_func_boundaries(self):\n             (week_53_day_2015, 2015),\n         ], lambda m: (m.start_datetime, m.extracted))\n \n+        qs = DTModel.objects.filter(\n+            start_datetime__iso_year=2015,\n+        ).order_by('start_datetime')\n+        self.assertSequenceEqual(qs, [obj_1_iso_2015, obj_2_iso_2015])\n+        qs = DTModel.objects.filter(\n+            start_datetime__iso_year__gt=2014,\n+        ).order_by('start_datetime')\n+        self.assertSequenceEqual(qs, [obj_1_iso_2015, obj_2_iso_2015])\n+        qs = DTModel.objects.filter(\n+            start_datetime__iso_year__lte=2014,\n+        ).order_by('start_datetime')\n+        self.assertSequenceEqual(qs, [obj_1_iso_2014])\n+\n     def test_extract_month_func(self):\n         start_datetime = datetime(2015, 6, 15, 14, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14170"}