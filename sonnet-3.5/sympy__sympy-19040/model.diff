diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index 68b69d1a24..f8d59646c6 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -6274,6 +6274,10 @@ def factor(f, *gens, **args):
     over other domain, e.g. an algebraic or finite field, use appropriate
     options: ``extension``, ``modulus`` or ``domain``.
 
+    When the ``extension`` option is used, the function ensures that all
+    factors are preserved, including those that might not involve the
+    extension.
+
     Examples
     ========
 
@@ -6346,6 +6350,14 @@ def _try_factor(expr):
                 partials[p] = fac
         return f.xreplace(partials)
 
+    # Handle the case when extension is provided
+    if 'extension' in args:
+        from sympy import expand, Mul
+        expanded_f = expand(f)
+        factors = _generic_factor_list(expanded_f, gens, args, method='factor')
+        # Ensure all factors are preserved
+        return Mul(*[factor**power for factor, power in factors[1]], evaluate=False) * factors[0]
+
     try:
         return _generic_factor(f, gens, args, method='factor')
     except PolynomialError as msg:
diff --git a/sympy/polys/tests/test_factortools.py b/sympy/polys/tests/test_factortools.py
index 7bcd935756..b03b529b67 100644
--- a/sympy/polys/tests/test_factortools.py
+++ b/sympy/polys/tests/test_factortools.py
@@ -681,3 +681,21 @@ def test_dmp_irreducible_p():
     R, x, y = ring("x,y", ZZ)
     assert R.dmp_irreducible_p(x**2 + x + 1) is True
     assert R.dmp_irreducible_p(x**2 + 2*x + 1) is False
+
+def test_factor_with_extension():
+    from sympy import factor, expand, I
+    from sympy.abc import x, y
+
+    # Test case for the issue
+    f = expand((x - 1) * (y - 1))
+    assert factor(f) == (x - 1) * (y - 1)
+    assert factor(f, extension=[I]) == (x - 1) * (y - 1)
+
+    # Additional test cases
+    f = expand((x - I) * (x + I) * (y - 1))
+    assert factor(f) == (x**2 + 1) * (y - 1)
+    assert factor(f, extension=[I]) == (x - I) * (x + I) * (y - 1)
+
+    f = expand((x - 1) * (x - 2) * (y - 3))
+    assert factor(f) == (x - 1) * (x - 2) * (y - 3)
+    assert factor(f, extension=[I]) == (x - 1) * (x - 2) * (y - 3)
\ No newline at end of file
