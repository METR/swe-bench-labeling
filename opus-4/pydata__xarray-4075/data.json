{"instance_id": "pydata__xarray-4075", "score": "C", "diff": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 996d2e4c..a9feac10 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -141,8 +141,14 @@ class Weighted:\n \n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n-\n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        \n+        # Convert weights to numeric if they are boolean to ensure correct sum\n+        # when mask is also boolean (e.g., when weights are boolean)\n+        weights = self.weights\n+        if weights.dtype == bool:\n+            weights = weights.astype(int)\n+\n+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\ndiff --git a/xarray/tests/test_weighted.py b/xarray/tests/test_weighted.py\nindex 24531215..e1b5d32b 100644\n--- a/xarray/tests/test_weighted.py\n+++ b/xarray/tests/test_weighted.py\n@@ -158,6 +158,64 @@ def test_weighted_mean_nan(weights, expected, skipna):\n     assert_equal(expected, result)\n \n \n+def test_weighted_mean_boolean_weights():\n+    # Test case from issue #4349\n+    dta = DataArray([1., 1., 1.])\n+    wgt = DataArray(np.array([1, 1, 0], dtype=bool))\n+    result = dta.weighted(wgt).mean()\n+    expected = DataArray(1.0)\n+    assert_equal(result, expected)\n+\n+\n+def test_weighted_sum_boolean_weights():\n+    dta = DataArray([1., 2., 3.])\n+    wgt = DataArray(np.array([True, False, True]))\n+    result = dta.weighted(wgt).sum()\n+    expected = DataArray(4.0)\n+    assert_equal(result, expected)\n+\n+\n+def test_weighted_sum_of_weights_boolean():\n+    dta = DataArray([1., 2., 3.])\n+    wgt = DataArray(np.array([True, True, False]))\n+    result = dta.weighted(wgt).sum_of_weights()\n+    expected = DataArray(2.0)\n+    assert_equal(result, expected)\n+\n+\n+@pytest.mark.parametrize(\"skipna\", [True, False])\n+def test_weighted_mean_boolean_weights_with_nan(skipna):\n+    dta = DataArray([1., np.nan, 3.])\n+    wgt = DataArray(np.array([True, True, False]))\n+    result = dta.weighted(wgt).mean(skipna=skipna)\n+    if skipna:\n+        expected = DataArray(1.0)\n+    else:\n+        expected = DataArray(np.nan)\n+    assert_equal(result, expected)\n+\n+\n+def test_weighted_operations_boolean_multidim():\n+    # Test multi-dimensional case with boolean weights\n+    dta = DataArray([[1., 2.], [3., 4.]], dims=['x', 'y'])\n+    wgt = DataArray([[True, False], [True, True]], dims=['x', 'y'])\n+    \n+    # Test mean over all dimensions\n+    result_mean = dta.weighted(wgt).mean()\n+    expected_mean = DataArray((1 + 3 + 4) / 3.0)\n+    assert_allclose(result_mean, expected_mean)\n+    \n+    # Test mean over one dimension\n+    result_mean_x = dta.weighted(wgt).mean(dim='x')\n+    expected_mean_x = DataArray([2.0, 4.0], dims=['y'])\n+    assert_allclose(result_mean_x, expected_mean_x)\n+    \n+    # Test sum\n+    result_sum = dta.weighted(wgt).sum()\n+    expected_sum = DataArray(8.0)\n+    assert_equal(result_sum, expected_sum)\n+\n+\n def expected_weighted(da, weights, dim, skipna, operation):\n     \"\"\"\n     Generate expected result using ``*`` and ``sum``. This is checked against\n", "gold_standard_diff": "From 39f610fcbb80c783d1911a330f5b72cfca922549 Mon Sep 17 00:00:00 2001\nFrom: Mathias Hauser <mathias.hauser@env.ethz.ch>\nDate: Mon, 18 May 2020 20:16:33 +0200\nSubject: [PATCH 1/5] add tests\n\n---\n xarray/tests/test_weighted.py | 23 +++++++++++++++++++++++\n 1 file changed, 23 insertions(+)\n\ndiff --git a/xarray/tests/test_weighted.py b/xarray/tests/test_weighted.py\nindex 24531215dfb..1bf685cc95d 100644\n--- a/xarray/tests/test_weighted.py\n+++ b/xarray/tests/test_weighted.py\n@@ -59,6 +59,18 @@ def test_weighted_sum_of_weights_nan(weights, expected):\n     assert_equal(expected, result)\n \n \n+def test_weighted_sum_of_weights_bool():\n+    # https://github.com/pydata/xarray/issues/4074\n+\n+    da = DataArray([1, 2])\n+    weights = DataArray([True, True])\n+    result = da.weighted(weights).sum_of_weights()\n+\n+    expected = DataArray(2)\n+\n+    assert_equal(expected, result)\n+\n+\n @pytest.mark.parametrize(\"da\", ([1.0, 2], [1, np.nan], [np.nan, np.nan]))\n @pytest.mark.parametrize(\"factor\", [0, 1, 3.14])\n @pytest.mark.parametrize(\"skipna\", (True, False))\n@@ -158,6 +170,17 @@ def test_weighted_mean_nan(weights, expected, skipna):\n     assert_equal(expected, result)\n \n \n+def test_weighted_mean_bool():\n+    # https://github.com/pydata/xarray/issues/4074\n+    da = DataArray([1, 1])\n+    weights = DataArray([True, True])\n+    expected = DataArray(1)\n+\n+    result = da.weighted(weights).mean()\n+\n+    assert_equal(expected, result)\n+\n+\n def expected_weighted(da, weights, dim, skipna, operation):\n     \"\"\"\n     Generate expected result using ``*`` and ``sum``. This is checked against\n\nFrom 44d8284ba2f173b56d920233ff2a9c8a4a6fc118 Mon Sep 17 00:00:00 2001\nFrom: Mathias Hauser <mathias.hauser@env.ethz.ch>\nDate: Mon, 18 May 2020 20:40:04 +0200\nSubject: [PATCH 2/5] weights: bool -> int\n\n---\n xarray/core/weighted.py | 8 +++++++-\n 1 file changed, 7 insertions(+), 1 deletion(-)\n\ndiff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 996d2e4c43e..9f534c7dd4c 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,13 @@ def _sum_of_weights(\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        weights = self.weights\n+        # bool -> int, because ``xr.dot([True, True], [True, True])`` -> True\n+        # (and not 2) GH4074\n+        if weights.dtype == bool:\n+            weights = weights.astype(int)\n+\n+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n\nFrom 4ca6fbe73edf6a223cafca961ef347c0bf8f3795 Mon Sep 17 00:00:00 2001\nFrom: Mathias Hauser <mathias.hauser@env.ethz.ch>\nDate: Mon, 18 May 2020 20:40:23 +0200\nSubject: [PATCH 3/5] whats new\n\n---\n doc/whats-new.rst | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex cd30fab0160..9a62a4ff42c 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -110,6 +110,8 @@ Bug fixes\n - Fix bug in time parsing failing to fall back to cftime. This was causing time\n   variables with a time unit of `'msecs'` to fail to parse. (:pull:`3998`)\n   By `Ryan May <https://github.com/dopplershift>`_.\n+- Fix weighted mean when passing boolean weights (:issue:`4074`).\n+  By `Mathias Hauser <https://github.com/mathause>`_\n \n Documentation\n ~~~~~~~~~~~~~\n@@ -175,7 +177,7 @@ New Features\n \n - Weighted array reductions are now supported via the new :py:meth:`DataArray.weighted`\n   and :py:meth:`Dataset.weighted` methods. See :ref:`comput.weighted`. (:issue:`422`, :pull:`2922`).\n-  By `Mathias Hauser <https://github.com/mathause>`_\n+  By `Mathias Hauser <https://github.com/mathause>`_.\n - The new jupyter notebook repr (``Dataset._repr_html_`` and\n   ``DataArray._repr_html_``) (introduced in 0.14.1) is now on by default. To\n   disable, use ``xarray.set_options(display_style=\"text\")``.\n\nFrom a09328ac0df3845590191854eedfa925b168ecd5 Mon Sep 17 00:00:00 2001\nFrom: Mathias Hauser <mathause@users.noreply.github.com>\nDate: Mon, 18 May 2020 20:43:03 +0200\nSubject: [PATCH 4/5] Apply suggestions from code review\n\n---\n doc/whats-new.rst       | 2 +-\n xarray/core/weighted.py | 2 +-\n 2 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 9a62a4ff42c..f0fede28ebb 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -111,7 +111,7 @@ Bug fixes\n   variables with a time unit of `'msecs'` to fail to parse. (:pull:`3998`)\n   By `Ryan May <https://github.com/dopplershift>`_.\n - Fix weighted mean when passing boolean weights (:issue:`4074`).\n-  By `Mathias Hauser <https://github.com/mathause>`_\n+  By `Mathias Hauser <https://github.com/mathause>`_.\n \n Documentation\n ~~~~~~~~~~~~~\ndiff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 9f534c7dd4c..19718f5f575 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -144,7 +144,7 @@ def _sum_of_weights(\n \n         weights = self.weights\n         # bool -> int, because ``xr.dot([True, True], [True, True])`` -> True\n-        # (and not 2) GH4074\n+        # (and not 2); GH4074\n         if weights.dtype == bool:\n             weights = weights.astype(int)\n \n\nFrom f65e2e033099e640af81391f7862808ccd20de40 Mon Sep 17 00:00:00 2001\nFrom: Mathias Hauser <mathias.hauser@env.ethz.ch>\nDate: Mon, 18 May 2020 21:12:40 +0200\nSubject: [PATCH 5/5] avoid unecessary copy\n\n---\n xarray/core/weighted.py | 11 ++++++-----\n 1 file changed, 6 insertions(+), 5 deletions(-)\n\ndiff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 19718f5f575..21ed06ea85f 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,13 +142,14 @@ def _sum_of_weights(\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        weights = self.weights\n         # bool -> int, because ``xr.dot([True, True], [True, True])`` -> True\n         # (and not 2); GH4074\n-        if weights.dtype == bool:\n-            weights = weights.astype(int)\n-\n-        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n+        if self.weights.dtype == bool:\n+            sum_of_weights = self._reduce(\n+                mask, self.weights.astype(int), dim=dim, skipna=False\n+            )\n+        else:\n+            sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/4075"}