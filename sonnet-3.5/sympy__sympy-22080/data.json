{"instance_id": "sympy__sympy-22080", "score": "I", "diff": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 0ed6ce2eb1..bf1ba52e85 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -173,9 +173,22 @@ def _import(module, reload=False):\n # linecache.\n _lambdify_generated_counter = 1\n \n+def handle_mod_for_empty_modules(expr):\n+    \"\"\"\n+    Special handling for Mod function when modules=[]\n+    \"\"\"\n+    from sympy import Mod\n+    def custom_mod(a, b):\n+        return a - b * (a // b)\n+    return expr.replace(Mod, custom_mod)\n+\n @doctest_depends_on(modules=('numpy', 'scipy', 'tensorflow',), python_version=(3,))\n def lambdify(args: Iterable, expr, modules=None, printer=None, use_imps=True,\n              dummify=False, cse=False):\n+    # Special handling for Mod when modules=[]\n+    if modules == []:\n+        expr = handle_mod_for_empty_modules(expr)\n+\n     \"\"\"Convert a SymPy expression into a function that allows for fast\n     numeric evaluation.\n \n@@ -187,6 +200,9 @@ def lambdify(args: Iterable, expr, modules=None, printer=None, use_imps=True,\n        Passing a set for the *args* parameter is deprecated as sets are\n        unordered. Use an ordered iterable such as a list or tuple.\n \n+    .. versionchanged:: 1.x.x\n+       Special handling for Mod function when modules=[] is specified.\n+\n     Explanation\n     ===========\n \n", "gold_standard_diff": "From 82faea5dae02409a198d6315e0eae16c30879ae7 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Bj=C3=B6rn=20Ingvar=20Dahlgren?= <bjodah@gmail.com>\nDate: Sun, 12 Sep 2021 09:10:44 +0200\nSubject: [PATCH 1/3] Add precedence for Mod, fix unary minus printing (fixes\n gh-17737)\n\n---\n sympy/printing/codeprinter.py          | 11 +++++++++--\n sympy/printing/precedence.py           |  1 +\n sympy/utilities/tests/test_lambdify.py | 10 +++++++++-\n 3 files changed, 19 insertions(+), 3 deletions(-)\n\ndiff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\nindex ba0e746f5dac..4b300f4a2fed 100644\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -9,7 +9,7 @@\n from sympy.core.mul import _keep_coeff\n from sympy.core.symbol import Symbol\n from sympy.printing.str import StrPrinter\n-from sympy.printing.precedence import precedence\n+from sympy.printing.precedence import precedence, PRECEDENCE\n \n \n class requires:\n@@ -487,7 +487,14 @@ def _print_Mul(self, expr):\n \n         a = a or [S.One]\n \n-        a_str = [self.parenthesize(x, prec) for x in a]\n+        if len(a) == 1 and sign == \"-\":\n+            # Unary minus does not have a SymPy class, and hence there's no\n+            # precedence weight associated with it, Python's unary minus has\n+            # an operator precedence between multiplication and exponentiation,\n+            # so we use this to compute a weight.\n+            a_str = [self.parenthesize(a[0], 0.5*(PRECEDENCE[\"Pow\"]+PRECEDENCE[\"Mul\"]))]\n+        else:\n+            a_str = [self.parenthesize(x, prec) for x in a]\n         b_str = [self.parenthesize(x, prec) for x in b]\n \n         # To parenthesize Pow with exp = -1 and having more than one Symbol\ndiff --git a/sympy/printing/precedence.py b/sympy/printing/precedence.py\nindex 47ff463faf3f..bddc43048f1d 100644\n--- a/sympy/printing/precedence.py\n+++ b/sympy/printing/precedence.py\n@@ -40,6 +40,7 @@\n     \"MatAdd\": PRECEDENCE[\"Add\"],\n     \"MatPow\": PRECEDENCE[\"Pow\"],\n     \"MatrixSolve\": PRECEDENCE[\"Mul\"],\n+    \"Mod\": PRECEDENCE[\"Mul\"],\n     \"TensAdd\": PRECEDENCE[\"Add\"],\n     # As soon as `TensMul` is a subclass of `Mul`, remove this:\n     \"TensMul\": PRECEDENCE[\"Mul\"],\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex e25986b4a00e..524e9d1220df 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -264,7 +264,15 @@ def test_issue_12984():\n         warnings.simplefilter(\"ignore\", RuntimeWarning)\n         assert str(func_numexpr(-1, 24, 42)) == 'nan'\n \n-#================== Test some functions ============================\n+\n+def test_empty_modules():\n+    x, y = symbols('x y')\n+    expr = -(x % y)\n+\n+    no_modules = lambdify([x, y], expr)\n+    empty_modules = lambdify([x, y], expr, modules=[])\n+    assert no_modules(3, 7) == empty_modules(3, 7)\n+    assert no_modules(3, 7) == -3\n \n \n def test_exponentiation():\n\nFrom a265281fc7bc29215cb5bc04ac92e3584798fac7 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Bj=C3=B6rn=20Ingvar=20Dahlgren?= <bjodah@gmail.com>\nDate: Sun, 12 Sep 2021 11:56:24 +0200\nSubject: [PATCH 2/3] update tests: ccode now output parenthesis for\n UnevaluatedExpr\n\n---\n sympy/codegen/tests/test_rewriting.py | 6 +++---\n 1 file changed, 3 insertions(+), 3 deletions(-)\n\ndiff --git a/sympy/codegen/tests/test_rewriting.py b/sympy/codegen/tests/test_rewriting.py\nindex c8af626b7e50..32dfa8395e7b 100644\n--- a/sympy/codegen/tests/test_rewriting.py\n+++ b/sympy/codegen/tests/test_rewriting.py\n@@ -266,10 +266,10 @@ def test_create_expand_pow_optimization():\n     # gh issue 15335\n     assert cc(x**(-4)) == '1.0/(x*x*x*x)'\n     assert cc(x**(-5)) == 'pow(x, -5)'\n-    assert cc(-x**4) == '-x*x*x*x'\n-    assert cc(x**4 - x**2) == '-x*x + x*x*x*x'\n+    assert cc(-x**4) == '-(x*x*x*x)'\n+    assert cc(x**4 - x**2) == '-(x*x) + x*x*x*x'\n     i = Symbol('i', integer=True)\n-    assert cc(x**i - x**2) == 'pow(x, i) - x*x'\n+    assert cc(x**i - x**2) == 'pow(x, i) - (x*x)'\n     # gh issue 20753\n     cc2 = lambda x: ccode(optimize(x, [create_expand_pow_optimization(\n         4, base_req=lambda b: b.is_Function)]))\n\nFrom d11dd0cf34ce16baa220f4aa4df9029173d3b3ce Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Bj=C3=B6rn=20Ingvar=20Dahlgren?= <bjodah@gmail.com>\nDate: Sun, 12 Sep 2021 22:16:13 +0200\nSubject: [PATCH 3/3] Add test for pycode on -Mod(x,y) and Mod(-x, y)\n\n---\n sympy/printing/tests/test_pycode.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex cf18825eb1b6..847ea41b12ff 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -30,6 +30,8 @@ def test_PythonCodePrinter():\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n+    assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/22080"}