{"instance_id": "django__django-10999", "score": "I", "diff": "diff --git a/debug_timedelta.py b/debug_timedelta.py\nnew file mode 100644\nindex 0000000000..34b91f8288\n--- /dev/null\n+++ b/debug_timedelta.py\n@@ -0,0 +1,23 @@\n+import datetime\n+\n+# Let's see how timedelta behaves with these values\n+print(\"Testing timedelta construction:\")\n+\n+# Case 1: 5 days, -2:30:00\n+td1 = datetime.timedelta(days=5, hours=-2, minutes=-30)\n+print(f\"timedelta(days=5, hours=-2, minutes=-30) = {td1}\")\n+\n+# What parse_duration actually does for \"5 days, -2:30:00\"\n+# It parses: days=5, hours=-2, minutes=30 (positive), seconds=00\n+td2 = datetime.timedelta(days=5, hours=-2, minutes=30)\n+print(f\"timedelta(days=5, hours=-2, minutes=30) = {td2}\")\n+\n+# Case 2: -1:30:45.123456  \n+# What I expected\n+td3 = datetime.timedelta(hours=-1, minutes=-30, seconds=-45, microseconds=-123456)\n+print(f\"timedelta(hours=-1, minutes=-30, seconds=-45, microseconds=-123456) = {td3}\")\n+\n+# What parse_duration actually does\n+# It parses: hours=-1, minutes=30 (positive), seconds=45 (positive), microseconds=123456\n+td4 = datetime.timedelta(hours=-1, minutes=30, seconds=45, microseconds=123456)\n+print(f\"timedelta(hours=-1, minutes=30, seconds=45, microseconds=123456) = {td4}\")\ndiff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\nindex 8d08b7d1d3..a037758784 100644\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -29,7 +29,7 @@ datetime_re = re.compile(\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n+    r'((?:(?P<hours>-?\\d+):)(?=-?\\d+:-?\\d+))?'\n     r'(?:(?P<minutes>-?\\d+):)?'\n     r'(?P<seconds>-?\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_comprehensive2.py b/test_comprehensive2.py\nnew file mode 100644\nindex 0000000000..dd74e4deb4\n--- /dev/null\n+++ b/test_comprehensive2.py\n@@ -0,0 +1,79 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+from django.utils.dateparse import parse_duration\n+import datetime\n+\n+# Test comprehensive cases\n+test_cases = [\n+    # (input_string, expected_timedelta)\n+    # Basic negative hours\n+    (\"-1:00:00\", datetime.timedelta(hours=-1)),\n+    (\"-10:00:00\", datetime.timedelta(hours=-10)),\n+    \n+    # Negative minutes with positive hours\n+    (\"1:-30:00\", datetime.timedelta(hours=1, minutes=-30)),\n+    (\"2:-45:00\", datetime.timedelta(hours=2, minutes=-45)),\n+    \n+    # Negative seconds\n+    (\"1:30:-45\", datetime.timedelta(hours=1, minutes=30, seconds=-45)),\n+    (\"0:0:-30\", datetime.timedelta(seconds=-30)),\n+    \n+    # All negative\n+    (\"-1:-30:-45\", datetime.timedelta(hours=-1, minutes=-30, seconds=-45)),\n+    \n+    # With days\n+    (\"-1 days, 2:30:00\", datetime.timedelta(days=-1, hours=2, minutes=30)),\n+    (\"5 days, -2:30:00\", datetime.timedelta(days=5, hours=-2, minutes=-30)),\n+    \n+    # Edge cases with zeros\n+    (\"0:-30:00\", datetime.timedelta(minutes=-30)),\n+    (\"-0:30:00\", datetime.timedelta(minutes=30)),  # -0 is treated as 0\n+    (\"0:0:-15\", datetime.timedelta(seconds=-15)),\n+    \n+    # With microseconds\n+    (\"0:0:-1.500000\", datetime.timedelta(seconds=-1, microseconds=-500000)),\n+    (\"-1:30:45.123456\", datetime.timedelta(hours=-1, minutes=-30, seconds=-45, microseconds=-123456)),\n+    \n+    # Regular positive cases (regression test)\n+    (\"1:30:00\", datetime.timedelta(hours=1, minutes=30)),\n+    (\"2 days, 3:45:30\", datetime.timedelta(days=2, hours=3, minutes=45, seconds=30)),\n+    (\"0:0:0.123456\", datetime.timedelta(microseconds=123456)),\n+]\n+\n+print(\"Running comprehensive tests...\")\n+print(\"=\" * 80)\n+\n+all_passed = True\n+for input_str, expected in test_cases:\n+    result = parse_duration(input_str)\n+    passed = result == expected\n+    all_passed &= passed\n+    \n+    status = \"PASS\" if passed else \"FAIL\"\n+    print(f\"{status} | Input: {input_str:25} | Result: {result}\")\n+    \n+    if not passed and result is not None:\n+        print(f\"       Expected: {expected}\")\n+        print(f\"       Difference: {result - expected}\")\n+\n+print(\"=\" * 80)\n+print(f\"Overall: {'All tests passed!' if all_passed else 'Some tests failed!'}\")\n+\n+# Test that invalid formats still return None\n+print(\"\\nTesting invalid formats (should return None):\")\n+invalid_cases = [\n+    \"invalid\",\n+    \"1:2:3:4\",\n+    \":::\",\n+    \"-:30:00\",\n+    \"1:-:00\",\n+    \"abc:def:ghi\",\n+]\n+\n+for invalid in invalid_cases:\n+    result = parse_duration(invalid)\n+    status = \"OK\" if result is None else \"UNEXPECTED\"\n+    print(f\"Input: {invalid:15} | Result: {result} | {status}\")\ndiff --git a/test_duration_parse.py b/test_duration_parse.py\nnew file mode 100644\nindex 0000000000..fc35dee149\n--- /dev/null\n+++ b/test_duration_parse.py\n@@ -0,0 +1,41 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+from django.utils.dateparse import parse_duration\n+\n+# Test cases for negative durations\n+test_cases = [\n+    # Format: (input_string, expected_result_description)\n+    (\"-1:30:00\", \"negative 1 hour 30 minutes\"),\n+    (\"-01:30:00\", \"negative 1 hour 30 minutes\"),\n+    (\"-10:30:00\", \"negative 10 hours 30 minutes\"),\n+    (\"-1:-30:-45\", \"negative 1 hour, negative 30 minutes, negative 45 seconds\"),\n+    (\"1:-30:00\", \"1 hour, negative 30 minutes\"),\n+    (\"1:30:-45\", \"1 hour 30 minutes, negative 45 seconds\"),\n+    (\"-1 days, 2:30:00\", \"negative 1 day, 2 hours 30 minutes\"),\n+    (\"5 days, -2:30:00\", \"5 days, negative 2 hours 30 minutes\"),\n+]\n+\n+print(\"Testing parse_duration with negative values...\")\n+print(\"=\" * 60)\n+\n+for test_input, description in test_cases:\n+    result = parse_duration(test_input)\n+    print(f\"Input: {test_input:20} | Result: {result} | Description: {description}\")\n+\n+print(\"\\n\" + \"=\" * 60)\n+print(\"Testing that the fix doesn't break positive durations...\")\n+\n+positive_cases = [\n+    \"1:30:00\",\n+    \"01:30:00\", \n+    \"10:30:45\",\n+    \"1 days, 2:30:00\",\n+    \"5 days, 12:30:45.123456\",\n+]\n+\n+for test_input in positive_cases:\n+    result = parse_duration(test_input)\n+    print(f\"Input: {test_input:25} | Result: {result}\")\ndiff --git a/test_lookahead_fix.py b/test_lookahead_fix.py\nnew file mode 100644\nindex 0000000000..20d3fc7bae\n--- /dev/null\n+++ b/test_lookahead_fix.py\n@@ -0,0 +1,34 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+sys.path.insert(0, '/testbed')\n+\n+from django.utils.dateparse import parse_duration\n+\n+# Test cases that specifically test the lookahead fix\n+print(\"Testing cases that require the lookahead fix...\")\n+print(\"=\" * 70)\n+\n+test_cases = [\n+    \"1:-30:00\",\n+    \"2:-45:30\", \n+    \"1:30:-45\",\n+    \"0:45:-30\",\n+    \"-1:-30:-45\",\n+    \"0:-15:00\",\n+]\n+\n+for test_input in test_cases:\n+    result = parse_duration(test_input)\n+    status = \"PASS\" if result is not None else \"FAIL\"\n+    print(f\"{status} | Input: {test_input:15} | Result: {result}\")\n+\n+print(\"\\nPositive cases (regression test):\")\n+print(\"=\" * 70)\n+\n+positive_cases = [\"1:30:00\", \"10:45:30\", \"0:30:45\"]\n+\n+for test_input in positive_cases:\n+    result = parse_duration(test_input)\n+    status = \"PASS\" if result is not None else \"FAIL\"\n+    print(f\"{status} | Input: {test_input:15} | Result: {result}\")\ndiff --git a/test_negative_lookahead.py b/test_negative_lookahead.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_regex.py b/test_regex.py\nnew file mode 100644\nindex 0000000000..f293c8718c\n--- /dev/null\n+++ b/test_regex.py\n@@ -0,0 +1,47 @@\n+#!/usr/bin/env python\n+import re\n+\n+# Current regex\n+current_regex = re.compile(\n+    r'^'\n+    r'(?:(?P<days>-?\\d+) (days?, )?)?'\n+    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n+    r'(?:(?P<minutes>-?\\d+):)?'\n+    r'(?P<seconds>-?\\d+)'\n+    r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n+    r'$'\n+)\n+\n+# Fixed regex  \n+fixed_regex = re.compile(\n+    r'^'\n+    r'(?:(?P<days>-?\\d+) (days?, )?)?'\n+    r'((?:(?P<hours>-?\\d+):)(?=-?\\d+:-?\\d+))?'\n+    r'(?:(?P<minutes>-?\\d+):)?'\n+    r'(?P<seconds>-?\\d+)'\n+    r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n+    r'$'\n+)\n+\n+test_strings = [\n+    \"-1:30:00\",\n+    \"-1:-30:-45\",\n+    \"1:-30:00\",\n+    \"1:30:-45\",\n+    \"1:30:00\",  # positive case\n+]\n+\n+print(\"Testing current regex vs fixed regex:\")\n+print(\"=\" * 60)\n+\n+for test in test_strings:\n+    current_match = current_regex.match(test)\n+    fixed_match = fixed_regex.match(test)\n+    \n+    print(f\"\\nInput: {test}\")\n+    print(f\"Current regex match: {current_match}\")\n+    if current_match:\n+        print(f\"  Groups: {current_match.groupdict()}\")\n+    print(f\"Fixed regex match: {fixed_match}\")\n+    if fixed_match:\n+        print(f\"  Groups: {fixed_match.groupdict()}\")\ndiff --git a/test_regex_comparison.py b/test_regex_comparison.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_simple.py b/test_simple.py\nnew file mode 100644\nindex 0000000000..8c14d7a55b\n--- /dev/null\n+++ b/test_simple.py\n@@ -0,0 +1,17 @@\n+import re\n+\n+# The key change in the regex\n+old_lookahead = \"(?=\\d+:\\d+)\"\n+new_lookahead = \"(?=-?\\d+:-?\\d+)\"\n+\n+print(\"The fix changes the lookahead pattern:\")\n+print(f\"Old: {old_lookahead} - only matches positive digits\")\n+print(f\"New: {new_lookahead} - matches optional negative signs\")\n+print()\n+\n+# Example that shows the difference\n+test = \"1:-30:00\"\n+print(f\"Testing string: '{test}'\")\n+print(f\"  After '1:' we have '-30:00'\")\n+print(f\"  Old lookahead (?=\\d+:\\d+) expects digits, but sees '-30:00' - NO MATCH\")\n+print(f\"  New lookahead (?=-?\\d+:-?\\d+) allows optional '-', sees '-30:00' - MATCH!\")\n", "gold_standard_diff": "diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\nindex 8d08b7d1d342..f90d95258133 100644\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -29,9 +29,10 @@\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n-    r'(?:(?P<minutes>-?\\d+):)?'\n-    r'(?P<seconds>-?\\d+)'\n+    r'(?P<sign>-?)'\n+    r'((?:(?P<hours>\\d+):)(?=\\d+:\\d+))?'\n+    r'(?:(?P<minutes>\\d+):)?'\n+    r'(?P<seconds>\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n     r'$'\n )\ndiff --git a/tests/utils_tests/test_dateparse.py b/tests/utils_tests/test_dateparse.py\nindex 8d464278cec8..535815c7e28c 100644\n--- a/tests/utils_tests/test_dateparse.py\n+++ b/tests/utils_tests/test_dateparse.py\n@@ -113,9 +113,12 @@ def test_negative(self):\n         test_values = (\n             ('-4 15:30', timedelta(days=-4, minutes=15, seconds=30)),\n             ('-172800', timedelta(days=-2)),\n-            ('-15:30', timedelta(minutes=-15, seconds=30)),\n-            ('-1:15:30', timedelta(hours=-1, minutes=15, seconds=30)),\n+            ('-15:30', timedelta(minutes=-15, seconds=-30)),\n+            ('-1:15:30', timedelta(hours=-1, minutes=-15, seconds=-30)),\n             ('-30.1', timedelta(seconds=-30, milliseconds=-100)),\n+            ('-00:01:01', timedelta(minutes=-1, seconds=-1)),\n+            ('-01:01', timedelta(seconds=-61)),\n+            ('-01:-01', None),\n         )\n         for source, expected in test_values:\n             with self.subTest(source=source):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/10999"}