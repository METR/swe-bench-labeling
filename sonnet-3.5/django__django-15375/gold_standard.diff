From ff15eb918db00a5fa64b98578bcd3db85a535b1f Mon Sep 17 00:00:00 2001
From: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date: Fri, 28 Jan 2022 15:27:23 +0100
Subject: [PATCH] Fixed #33468 -- Fixed QuerySet.aggregate() after annotate()
 crash on aggregates with default.

Thanks Adam Johnson for the report.

Regression in 501a8db46595b2d5b99c1d3b1146a832f43cdf1c.
---
 django/db/models/aggregates.py |  4 +++-
 docs/releases/4.0.2.txt        |  4 ++++
 tests/aggregation/tests.py     | 12 ++++++++++++
 3 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index 8c4eae79068f..bc31b48d8d9c 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -65,7 +65,9 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize
         if hasattr(default, 'resolve_expression'):
             default = default.resolve_expression(query, allow_joins, reuse, summarize)
         c.default = None  # Reset the default argument before wrapping.
-        return Coalesce(c, default, output_field=c._output_field_or_none)
+        coalesce = Coalesce(c, default, output_field=c._output_field_or_none)
+        coalesce.is_summary = c.is_summary
+        return coalesce
 
     @property
     def default_alias(self):
diff --git a/docs/releases/4.0.2.txt b/docs/releases/4.0.2.txt
index af0f728c546d..b1ac91f7e923 100644
--- a/docs/releases/4.0.2.txt
+++ b/docs/releases/4.0.2.txt
@@ -32,3 +32,7 @@ Bugfixes
 * Fixed a duplicate operation regression in Django 4.0 that caused a migration
   crash when altering a primary key type for a concrete parent model referenced
   by a foreign key (:ticket:`33462`).
+
+* Fixed a bug in Django 4.0 that caused a crash of ``QuerySet.aggregate()``
+  after ``annotate()`` on an aggregate function with a
+  :ref:`default <aggregate-default>` (:ticket:`33468`).
diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py
index 87ae945a7ebb..5c9aa5d53467 100644
--- a/tests/aggregation/tests.py
+++ b/tests/aggregation/tests.py
@@ -1630,6 +1630,18 @@ def test_aggregation_default_passed_another_aggregate(self):
         )
         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)
 
+    def test_aggregation_default_after_annotation(self):
+        result = Publisher.objects.annotate(
+            double_num_awards=F('num_awards') * 2,
+        ).aggregate(value=Sum('double_num_awards', default=0))
+        self.assertEqual(result['value'], 40)
+
+    def test_aggregation_default_not_in_aggregate(self):
+        result = Publisher.objects.annotate(
+            avg_rating=Avg('book__rating', default=2.5),
+        ).aggregate(Sum('num_awards'))
+        self.assertEqual(result['num_awards__sum'], 20)
+
     def test_exists_none_with_aggregate(self):
         qs = Book.objects.all().annotate(
             count=Count('id'),
