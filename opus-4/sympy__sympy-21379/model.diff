diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py
index 860989f7c1..b9b60e5cde 100644
--- a/sympy/functions/elementary/hyperbolic.py
+++ b/sympy/functions/elementary/hyperbolic.py
@@ -248,7 +248,20 @@ def _eval_is_real(self):
         # if `im` is of the form n*pi
         # else, check if it is a number
         re, im = arg.as_real_imag()
-        return (im%pi).is_zero
+        # Check if im is zero directly to avoid unnecessary polynomial operations
+        if im.is_zero:
+            return True
+        # Also check if im equals zero to handle cases where is_zero is None
+        if im == 0:
+            return True
+        # Try to compute (im % pi).is_zero, but if it fails due to polynomial
+        # issues with Piecewise, return None (undetermined)
+        from sympy.polys.polyerrors import PolynomialError
+        try:
+            return (im%pi).is_zero
+        except PolynomialError:
+            # Can't determine if it's real when Piecewise is involved
+            return None
 
     def _eval_is_extended_real(self):
         if self.args[0].is_extended_real:
@@ -437,7 +450,14 @@ def _eval_is_real(self):
         # the imaginary part can be an expression like n*pi
         # if not, check if the imaginary part is a number
         re, im = arg.as_real_imag()
-        return (im%pi).is_zero
+        # Try to compute (im % pi).is_zero, but if it fails due to polynomial
+        # issues with Piecewise, return None (undetermined)
+        from sympy.polys.polyerrors import PolynomialError
+        try:
+            return (im%pi).is_zero
+        except PolynomialError:
+            # Can't determine if it's real when Piecewise is involved
+            return None
 
     def _eval_is_positive(self):
         # cosh(x+I*y) = cos(y)*cosh(x) + I*sin(y)*sinh(x)
@@ -448,27 +468,35 @@ def _eval_is_positive(self):
         z = self.args[0]
 
         x, y = z.as_real_imag()
-        ymod = y % (2*pi)
-
-        yzero = ymod.is_zero
-        # shortcut if ymod is zero
-        if yzero:
-            return True
-
-        xzero = x.is_zero
-        # shortcut x is not zero
-        if xzero is False:
-            return yzero
-
-        return fuzzy_or([
-                # Case 1:
-                yzero,
-                # Case 2:
-                fuzzy_and([
-                    xzero,
-                    fuzzy_or([ymod < pi/2, ymod > 3*pi/2])
+        
+        # Try to compute ymod, but if it fails due to polynomial
+        # issues with Piecewise, return None (undetermined)
+        from sympy.polys.polyerrors import PolynomialError
+        try:
+            ymod = y % (2*pi)
+
+            yzero = ymod.is_zero
+            # shortcut if ymod is zero
+            if yzero:
+                return True
+
+            xzero = x.is_zero
+            # shortcut x is not zero
+            if xzero is False:
+                return yzero
+
+            return fuzzy_or([
+                    # Case 1:
+                    yzero,
+                    # Case 2:
+                    fuzzy_and([
+                        xzero,
+                        fuzzy_or([ymod < pi/2, ymod > 3*pi/2])
+                    ])
                 ])
-            ])
+        except PolynomialError:
+            # Can't determine when Piecewise is involved
+            return None
 
 
     def _eval_is_nonnegative(self):
@@ -657,14 +685,21 @@ def _eval_is_real(self):
 
         re, im = arg.as_real_imag()
 
-        # if denom = 0, tanh(arg) = zoo
-        if re == 0 and im % pi == pi/2:
+        # Try to handle modulo operations, but if they fail due to polynomial
+        # issues with Piecewise, return None (undetermined)
+        from sympy.polys.polyerrors import PolynomialError
+        try:
+            # if denom = 0, tanh(arg) = zoo
+            if re == 0 and im % pi == pi/2:
+                return None
+
+            # check if im is of the form n*pi/2 to make sin(2*im) = 0
+            # if not, im could be a number, return False in that case
+            return (im % (pi/2)).is_zero
+        except PolynomialError:
+            # Can't determine if it's real when Piecewise is involved
             return None
 
-        # check if im is of the form n*pi/2 to make sin(2*im) = 0
-        # if not, im could be a number, return False in that case
-        return (im % (pi/2)).is_zero
-
     def _eval_is_extended_real(self):
         if self.args[0].is_extended_real:
             return True
