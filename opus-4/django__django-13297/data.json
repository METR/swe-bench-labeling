{"instance_id": "django__django-13297", "score": "C", "diff": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..f4714571c3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -806,6 +806,10 @@ class Field(RegisterLookupMixin):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        # Handle SimpleLazyObject instances by forcing their evaluation\n+        from django.utils.functional import SimpleLazyObject\n+        if isinstance(value, SimpleLazyObject):\n+            value = str(value)  # Force evaluation by converting to string\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\ndiff --git a/test_field_lazy_object.py b/test_field_lazy_object.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..b038e96013\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,85 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django first\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+    SECRET_KEY='test',\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+    }]\n+)\n+\n+django.setup()\n+\n+# Now we can import Django stuff\n+from django.test import TestCase, RequestFactory\n+from django.views.generic import TemplateView\n+from django.db import models\n+from django.shortcuts import get_object_or_404\n+from django.http import Http404\n+\n+\n+# Create a simple model for testing\n+class Account(models.Model):\n+    slug = models.SlugField(unique=True)\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+# The problematic view from the issue\n+class OfferView(TemplateView):\n+    template_name = \"offers/offer.html\"\n+    \n+    def get_context_data(self, **kwargs):\n+        offer_slug = kwargs.get(\"offer_slug\", \"\")\n+        print(f\"offer_slug type: {type(offer_slug)}, value: {offer_slug}\")\n+        # This line will fail in Django 3.1 because offer_slug is a SimpleLazyObject\n+        offer = get_object_or_404(Account, slug=offer_slug)\n+        return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+\n+# Test to reproduce the issue\n+def test_template_view_kwargs_lazy_object():\n+    # Setup\n+    from django.db import connection\n+    from django.db.migrations.executor import MigrationExecutor\n+    from django.db.migrations.migration import Migration\n+    from django.db.migrations import operations\n+    \n+    # Create table\n+    with connection.schema_editor() as schema_editor:\n+        schema_editor.create_model(Account)\n+    \n+    # Create test data\n+    Account.objects.create(slug=\"test-offer\", name=\"Test Offer\")\n+    \n+    # Create a mock request\n+    factory = RequestFactory()\n+    request = factory.get('/offers/test-offer/')\n+    \n+    # Create view instance\n+    view = OfferView()\n+    view.setup(request, offer_slug=\"test-offer\")\n+    \n+    # Test the get method - this should trigger the issue\n+    try:\n+        response = view.get(request, offer_slug=\"test-offer\")\n+        print(\"SUCCESS: No error occurred\")\n+    except Exception as e:\n+        print(f\"ERROR: {type(e).__name__}: {e}\")\n+        import traceback\n+        traceback.print_exc()\n+\n+\n+if __name__ == \"__main__\":\n+    test_template_view_kwargs_lazy_object()\ndiff --git a/test_simplelazyobject_db.py b/test_simplelazyobject_db.py\nnew file mode 100644\nindex 0000000000..257786e1c8\n--- /dev/null\n+++ b/test_simplelazyobject_db.py\n@@ -0,0 +1,85 @@\n+\"\"\"\n+Test that SimpleLazyObject instances can be used in database queries.\n+\"\"\"\n+import django\n+from django.conf import settings\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n+\n+# Configure Django\n+settings.configure(\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],\n+    SECRET_KEY='test',\n+)\n+django.setup()\n+\n+from django.db import models\n+from django.db import connection\n+\n+\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    slug = models.SlugField(unique=True)\n+    \n+    class Meta:\n+        app_label = 'test_app'\n+\n+\n+class SimpleLazyObjectDBTest(TestCase):\n+    def setUp(self):\n+        # Create table\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.create_model(TestModel)\n+        \n+    def test_simplelazyobject_in_filter(self):\n+        \"\"\"Test that SimpleLazyObject can be used in queryset filters.\"\"\"\n+        # Create test data\n+        obj = TestModel.objects.create(name=\"Test\", slug=\"test-slug\")\n+        \n+        # Create a SimpleLazyObject that wraps the slug value\n+        @SimpleLazyObject\n+        def lazy_slug():\n+            return \"test-slug\"\n+        \n+        # This should not raise an error\n+        result = TestModel.objects.filter(slug=lazy_slug).first()\n+        self.assertEqual(result.id, obj.id)\n+        self.assertEqual(result.slug, \"test-slug\")\n+        \n+    def test_simplelazyobject_in_get(self):\n+        \"\"\"Test that SimpleLazyObject can be used in get() queries.\"\"\"\n+        # Create test data\n+        obj = TestModel.objects.create(name=\"Test2\", slug=\"test-slug-2\")\n+        \n+        # Create a SimpleLazyObject that wraps the slug value\n+        lazy_slug = SimpleLazyObject(lambda: \"test-slug-2\")\n+        \n+        # This should not raise an error\n+        result = TestModel.objects.get(slug=lazy_slug)\n+        self.assertEqual(result.id, obj.id)\n+        self.assertEqual(result.slug, \"test-slug-2\")\n+        \n+    def test_simplelazyobject_with_different_field_types(self):\n+        \"\"\"Test SimpleLazyObject with different field types.\"\"\"\n+        obj = TestModel.objects.create(name=\"Test3\", slug=\"test-3\")\n+        \n+        # Test with CharField\n+        lazy_name = SimpleLazyObject(lambda: \"Test3\")\n+        result = TestModel.objects.filter(name=lazy_name).first()\n+        self.assertEqual(result.id, obj.id)\n+        \n+        # Test with primary key (IntegerField)\n+        lazy_pk = SimpleLazyObject(lambda: obj.id)\n+        result = TestModel.objects.get(pk=lazy_pk)\n+        self.assertEqual(result.id, obj.id)\n+\n+\n+if __name__ == \"__main__\":\n+    import unittest\n+    unittest.main()\ndiff --git a/view_file.py b/view_file.py\nnew file mode 100644\nindex 0000000000..6814ca0fb2\n--- /dev/null\n+++ b/view_file.py\n@@ -0,0 +1,4 @@\n+with open('/testbed/django/db/models/fields/__init__.py', 'r') as f:\n+    lines = f.readlines()\n+    for i in range(800, 820):\n+        print(f\"{i}: {lines[i]}\", end=\"\")\n", "gold_standard_diff": "From 20799cc0a6d98816b9ef0577e24691bd26b80d7d Mon Sep 17 00:00:00 2001\nFrom: Adam Johnson <me@adamj.eu>\nDate: Wed, 12 Aug 2020 12:19:46 +0100\nSubject: [PATCH] Fixes #31877 -- Used lazy() for TemplateView kwarg\n deprecation warning.\n\nSimpleLazyObjects cause a crash when filtering.\n\nThanks Tim L. White for the report.\nRegression in 4ed534758cb6a11df9f49baddecca5a6cdda9311.\n---\n django/views/generic/base.py     |  5 ++---\n docs/releases/3.1.1.txt          |  4 ++++\n tests/generic_views/test_base.py | 22 ++++++++++++++++++++--\n 3 files changed, 26 insertions(+), 5 deletions(-)\n\ndiff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d78..7e5c06874da6 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -11,7 +11,7 @@\n from django.urls import reverse\n from django.utils.decorators import classonlymethod\n from django.utils.deprecation import RemovedInDjango40Warning\n-from django.utils.functional import SimpleLazyObject\n+from django.utils.functional import lazy\n \n logger = logging.getLogger('django.request')\n \n@@ -169,7 +169,6 @@ def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):\n     context_kwargs = {}\n     for key, value in url_kwargs.items():\n         # Bind into function closure.\n-        @SimpleLazyObject\n         def access_value(key=key, value=value):\n             warnings.warn(\n                 'TemplateView passing URL kwargs to the context is '\n@@ -178,7 +177,7 @@ def access_value(key=key, value=value):\n                 RemovedInDjango40Warning, stacklevel=2,\n             )\n             return value\n-        context_kwargs[key] = access_value\n+        context_kwargs[key] = lazy(access_value, type(value))()\n     return context_kwargs\n \n \ndiff --git a/docs/releases/3.1.1.txt b/docs/releases/3.1.1.txt\nindex 6aa091bb82ee..d0fa9a441865 100644\n--- a/docs/releases/3.1.1.txt\n+++ b/docs/releases/3.1.1.txt\n@@ -25,3 +25,7 @@ Bugfixes\n   :meth:`~django.db.models.query.QuerySet.select_for_update()`. When using\n   related fields pointing to a proxy model in the ``of`` argument, the\n   corresponding model was not locked (:ticket:`31866`).\n+\n+* Fixed a regression in Django 3.1 that caused a crash when passing deprecated\n+  keyword arguments to a queryset in ``TemplateView.get_context_data()``\n+  (:ticket:`31877`).\ndiff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex d498d23a680c..eeb9fd08d096 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -3,7 +3,8 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n+    RequestFactory, SimpleTestCase, TestCase, ignore_warnings,\n+    override_settings,\n )\n from django.test.utils import require_jinja2\n from django.urls import resolve\n@@ -11,6 +12,7 @@\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n+from .models import Artist\n \n \n class SimpleView(View):\n@@ -571,7 +573,9 @@ def test_template_mixin_without_template(self):\n \n \n @override_settings(ROOT_URLCONF='generic_views.urls')\n-class DeprecationTests(SimpleTestCase):\n+class DeprecationTests(TestCase):\n+    rf = RequestFactory()\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_template_params(self):\n         \"\"\"A generic template view passes kwargs as context.\"\"\"\n@@ -603,3 +607,17 @@ def test_template_params_warning(self):\n             str(response.context['foo2'])\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, artist_name, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                artist = Artist.objects.get(name=artist_name)\n+                return {**context, 'artist': artist}\n+\n+        artist = Artist.objects.create(name='Rene Magritte')\n+        response = ArtistView.as_view()(self.rf.get('/'), artist_name=artist.name)\n+        self.assertEqual(response.context_data['artist'], artist)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13297"}