{"instance_id": "sphinx-doc__sphinx-7757", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 5e822fe9b..77b63df38 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex fc1136ae2..9497987c3 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -172,13 +172,10 @@ def _parse_arglist(arglist: str) -> addnodes.desc_parameterlist:\n             node += nodes.Text(' ')\n             node += addnodes.desc_sig_name('', '', *children)  # type: ignore\n         if param.default is not param.empty:\n-            if param.annotation is not param.empty:\n-                node += nodes.Text(' ')\n-                node += addnodes.desc_sig_operator('', '=')\n-                node += nodes.Text(' ')\n-            else:\n-                node += addnodes.desc_sig_operator('', '=')\n-            node += nodes.inline('', param.default, classes=['default_value'],\n+            node += nodes.Text(' ')\n+            node += addnodes.desc_sig_operator('', '=')\n+            node += nodes.Text(' ')\n+            node += nodes.inline('', str(param.default), classes=['default_value'],\n                                  support_smartquotes=False)\n \n         params += node\ndiff --git a/tests/roots/test-positional-only-args/conf.py b/tests/roots/test-positional-only-args/conf.py\nnew file mode 100644\nindex 000000000..5f27b6583\n--- /dev/null\n+++ b/tests/roots/test-positional-only-args/conf.py\n@@ -0,0 +1,3 @@\n+extensions = ['sphinx.ext.autodoc']\n+\n+master_doc = 'index'\ndiff --git a/tests/roots/test-positional-only-args/index.rst b/tests/roots/test-positional-only-args/index.rst\nnew file mode 100644\nindex 000000000..c5325d16f\n--- /dev/null\n+++ b/tests/roots/test-positional-only-args/index.rst\n@@ -0,0 +1,6 @@\n+Test for positional-only arguments\n+==================================\n+\n+.. py:function:: foo(a, b=0, /, c=1)\n+\n+   This is a test function with positional-only arguments.\ndiff --git a/tests/test_build_html.py b/tests/test_build_html.py\nindex b3406b74c..bd507876b 100644\n--- a/tests/test_build_html.py\n+++ b/tests/test_build_html.py\n@@ -1573,3 +1573,11 @@ def test_html_scaled_image_link(app):\n     assert re.search('\\n<img alt=\"_images/img.png\" class=\"no-scaled-link\"'\n                      ' src=\"_images/img.png\" style=\"[^\"]+\" />',\n                      context)\n+\n+@pytest.mark.sphinx('html', testroot='positional-only-args')\n+def test_positional_only_args(app, warning):\n+    app.build()\n+    content = (app.outdir / 'index.html').read_text(encoding='utf8')\n+    assert 'foo(a, b=0, /, c=1)' in content\n+    assert '<span class=\"default_value\">0</span>' in content\n+    assert '<span class=\"default_value\">1</span>' in content\n\\ No newline at end of file\ndiff --git a/tox.ini b/tox.ini\nindex d9f040544..bf39854b6 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "diff --git a/CHANGES b/CHANGES\nindex 6c2761c53e8..af2fb413a94 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -127,6 +127,7 @@ Bugs fixed\n * #7646: handle errors on event handlers\n * #4187: LaTeX: EN DASH disappears from PDF bookmarks in Japanese documents\n * #7701: LaTeX: Anonymous indirect hyperlink target causes duplicated labels\n+* #7756: py domain: The default value for positional only argument is not shown\n * C++, fix rendering and xrefs in nested names explicitly starting\n   in global scope, e.g., ``::A::B``.\n * C, fix rendering and xrefs in nested names explicitly starting\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 15f0d66e279..bac02025cf9 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -518,19 +518,34 @@ def signature_from_str(signature: str) -> inspect.Signature:\n \n     # parameters\n     args = definition.args\n+    defaults = list(args.defaults)\n     params = []\n+    if hasattr(args, \"posonlyargs\"):\n+        posonlyargs = len(args.posonlyargs)  # type: ignore\n+        positionals = posonlyargs + len(args.args)\n+    else:\n+        posonlyargs = 0\n+        positionals = len(args.args)\n+\n+    for _ in range(len(defaults), positionals):\n+        defaults.insert(0, Parameter.empty)\n \n     if hasattr(args, \"posonlyargs\"):\n-        for arg in args.posonlyargs:  # type: ignore\n+        for i, arg in enumerate(args.posonlyargs):  # type: ignore\n+            if defaults[i] is Parameter.empty:\n+                default = Parameter.empty\n+            else:\n+                default = ast_unparse(defaults[i])\n+\n             annotation = ast_unparse(arg.annotation) or Parameter.empty\n             params.append(Parameter(arg.arg, Parameter.POSITIONAL_ONLY,\n-                                    annotation=annotation))\n+                                    default=default, annotation=annotation))\n \n     for i, arg in enumerate(args.args):\n-        if len(args.args) - i <= len(args.defaults):\n-            default = ast_unparse(args.defaults[-len(args.args) + i])\n-        else:\n+        if defaults[i + posonlyargs] is Parameter.empty:\n             default = Parameter.empty\n+        else:\n+            default = ast_unparse(defaults[i + posonlyargs])\n \n         annotation = ast_unparse(arg.annotation) or Parameter.empty\n         params.append(Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD,\ndiff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex f16feb6980d..de0eda1a676 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -335,10 +335,14 @@ def test_signature_from_str_kwonly_args():\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n-    sig = inspect.signature_from_str('(a, /, b)')\n-    assert list(sig.parameters.keys()) == ['a', 'b']\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n-    assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n \n \n def test_signature_from_str_invalid():\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7757"}