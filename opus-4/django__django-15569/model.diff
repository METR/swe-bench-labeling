diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 0caa165e15..6917820604 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -217,6 +217,7 @@ class RegisterLookupMixin:
         if lookup_name is None:
             lookup_name = lookup.lookup_name
         del cls.class_lookups[lookup_name]
+        cls._clear_cached_lookups()
 
 
 def select_related_descend(field, restricted, requested, load_fields, reverse=False):
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index fa59a3e0b1..33feb78b3a 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -2770,17 +2770,17 @@ class SchemaTests(TransactionTestCase):
             with connection.schema_editor() as editor:
                 editor.add_constraint(Author, constraint)
                 sql = constraint.create_sql(Author, editor)
-        table = Author._meta.db_table
-        constraints = self.get_constraints(table)
-        self.assertIn(constraint.name, constraints)
-        self.assertIs(constraints[constraint.name]["unique"], True)
-        # SQL contains columns.
-        self.assertIs(sql.references_column(table, "name"), True)
-        self.assertIs(sql.references_column(table, "weight"), True)
-        # Remove constraint.
-        with connection.schema_editor() as editor:
-            editor.remove_constraint(Author, constraint)
-        self.assertNotIn(constraint.name, self.get_constraints(table))
+            table = Author._meta.db_table
+            constraints = self.get_constraints(table)
+            self.assertIn(constraint.name, constraints)
+            self.assertIs(constraints[constraint.name]["unique"], True)
+            # SQL contains columns.
+            self.assertIs(sql.references_column(table, "name"), True)
+            self.assertIs(sql.references_column(table, "weight"), True)
+            # Remove constraint.
+            with connection.schema_editor() as editor:
+                editor.remove_constraint(Author, constraint)
+            self.assertNotIn(constraint.name, self.get_constraints(table))
 
     @skipUnlessDBFeature("supports_expression_indexes")
     def test_func_unique_constraint_collate(self):
@@ -3273,15 +3273,15 @@ class SchemaTests(TransactionTestCase):
             with connection.schema_editor() as editor:
                 editor.add_index(Author, index)
                 sql = index.create_sql(Author, editor)
-        table = Author._meta.db_table
-        self.assertIn(index.name, self.get_constraints(table))
-        # SQL contains columns.
-        self.assertIs(sql.references_column(table, "name"), True)
-        self.assertIs(sql.references_column(table, "weight"), True)
-        # Remove index.
-        with connection.schema_editor() as editor:
-            editor.remove_index(Author, index)
-        self.assertNotIn(index.name, self.get_constraints(table))
+            table = Author._meta.db_table
+            self.assertIn(index.name, self.get_constraints(table))
+            # SQL contains columns.
+            self.assertIs(sql.references_column(table, "name"), True)
+            self.assertIs(sql.references_column(table, "weight"), True)
+            # Remove index.
+            with connection.schema_editor() as editor:
+                editor.remove_index(Author, index)
+            self.assertNotIn(index.name, self.get_constraints(table))
 
     @skipUnlessDBFeature("supports_expression_indexes")
     def test_composite_func_index(self):
