diff --git a/doc/whats_new/v1.3.rst b/doc/whats_new/v1.3.rst
index fdceb35b6e4f6..ea5157d8824c8 100644
--- a/doc/whats_new/v1.3.rst
+++ b/doc/whats_new/v1.3.rst
@@ -235,6 +235,9 @@ Changelog
   output pandas dataframes with indexes that are not consistent with each other and the output is configured
   to be pandas. :pr:`26286` by `Thomas Fan`_.
 
+- |Fix| :class:`compose.ColumnTransformer` correctly sets the output of the
+  remainder when `set_output` is called. :pr:`26323` by `Thomas Fan`_.
+
 :mod:`sklearn.covariance`
 .........................
 
diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1baea..aab021c0c8d4f 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -293,6 +293,7 @@ def set_output(self, *, transform=None):
             Estimator instance.
         """
         super().set_output(transform=transform)
+
         transformers = (
             trans
             for _, trans, _ in chain(
@@ -303,6 +304,9 @@ def set_output(self, *, transform=None):
         for trans in transformers:
             _safe_set_output(trans, transform=transform)
 
+        if self.remainder not in {"passthrough", "drop"}:
+            _safe_set_output(self.remainder, transform=transform)
+
         return self
 
     def get_params(self, deep=True):
diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py
index b9c8f58317e4e..cb9ddc0b4f344 100644
--- a/sklearn/compose/tests/test_column_transformer.py
+++ b/sklearn/compose/tests/test_column_transformer.py
@@ -22,6 +22,7 @@
 from sklearn.exceptions import NotFittedError
 from sklearn.preprocessing import FunctionTransformer
 from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder
+from sklearn.feature_selection import VarianceThreshold
 
 
 class Trans(TransformerMixin, BaseEstimator):
@@ -2185,3 +2186,27 @@ def test_raise_error_if_index_not_aligned():
     )
     with pytest.raises(ValueError, match=msg):
         ct.fit_transform(X)
+
+
+def test_remainder_set_output():
+    """Check that the output is set for the remainder.
+
+    Non-regression test for #26306.
+    """
+
+    pd = pytest.importorskip("pandas")
+    df = pd.DataFrame({"a": [True, False, True], "b": [1, 2, 3]})
+
+    ct = make_column_transformer(
+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),
+        remainder=VarianceThreshold(),
+        verbose_feature_names_out=False,
+    )
+    ct.set_output(transform="pandas")
+
+    out = ct.fit_transform(df)
+    pd.testing.assert_frame_equal(out, df)
+
+    ct.set_output(transform="default")
+    out = ct.fit_transform(df)
+    assert isinstance(out, np.ndarray)
