{"instance_id": "django__django-14725", "score": "I", "diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..eb841a9f91 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,9 +573,10 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, allow_new=True, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.allow_new = allow_new\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -599,6 +600,9 @@ class BaseModelFormSet(BaseFormSet):\n         return field.to_python\n \n     def _construct_form(self, i, **kwargs):\n+        if not self.allow_new and i >= self.initial_form_count():\n+            return None  # Don't create new forms if allow_new is False\n+\n         pk_required = i < self.initial_form_count()\n         if pk_required:\n             if self.is_bound:\n@@ -813,6 +817,8 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n+        if not self.allow_new:\n+            return self.new_objects\n         for form in self.extra_forms:\n             if not form.has_changed():\n                 continue\n@@ -875,7 +881,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         allow_new=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -896,6 +903,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                               renderer=renderer)\n     FormSet.model = model\n+    FormSet.allow_new = allow_new\n     return FormSet\n \n \n@@ -1076,7 +1084,8 @@ def inlineformset_factory(parent_model, model, form=ModelForm,\n                           widgets=None, validate_max=False, localized_fields=None,\n                           labels=None, help_texts=None, error_messages=None,\n                           min_num=None, validate_min=False, field_classes=None,\n-                          absolute_max=None, can_delete_extra=True, renderer=None):\n+                          absolute_max=None, can_delete_extra=True, renderer=None,\n+                          allow_new=True):\n     \"\"\"\n     Return an ``InlineFormSet`` for the given kwargs.\n \n@@ -1109,6 +1118,7 @@ def inlineformset_factory(parent_model, model, form=ModelForm,\n         'absolute_max': absolute_max,\n         'can_delete_extra': can_delete_extra,\n         'renderer': renderer,\n+        'allow_new': allow_new,\n     }\n     FormSet = modelformset_factory(model, **kwargs)\n     FormSet.fk = fk\n", "gold_standard_diff": "From e87f57fdb8dcdabc452bd15abd015bf6c9b1f7a8 Mon Sep 17 00:00:00 2001\nFrom: vgolubev <nakmak1998@gmail.com>\nDate: Sun, 1 Aug 2021 23:33:12 +0300\nSubject: [PATCH] Fixed #26142 -- Allowed model formsets to prevent new object\n creation.\n\nThanks Jacob Walls, David Smith, and Mariusz Felisiak for reviews.\n\nCo-authored-by: parth <parthvin@gmail.com>\n---\n django/forms/models.py           | 13 +++++--\n docs/ref/forms/models.txt        | 15 ++++++-\n docs/releases/4.1.txt            |  3 ++\n docs/topics/forms/modelforms.txt | 23 ++++++++++-\n tests/model_formsets/tests.py    | 67 ++++++++++++++++++++++++++++++++\n 5 files changed, 114 insertions(+), 7 deletions(-)\n\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3db..c82aaf12e1b6 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -676,7 +676,10 @@ def save_m2m():\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        if self.edit_only:\n+            return self.save_existing_objects(commit)\n+        else:\n+            return self.save_existing_objects(commit) + self.save_new_objects(commit)\n \n     save.alters_data = True\n \n@@ -875,7 +878,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         edit_only=False):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -896,6 +900,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                               renderer=renderer)\n     FormSet.model = model\n+    FormSet.edit_only = edit_only\n     return FormSet\n \n \n@@ -1076,7 +1081,8 @@ def inlineformset_factory(parent_model, model, form=ModelForm,\n                           widgets=None, validate_max=False, localized_fields=None,\n                           labels=None, help_texts=None, error_messages=None,\n                           min_num=None, validate_min=False, field_classes=None,\n-                          absolute_max=None, can_delete_extra=True, renderer=None):\n+                          absolute_max=None, can_delete_extra=True, renderer=None,\n+                          edit_only=False):\n     \"\"\"\n     Return an ``InlineFormSet`` for the given kwargs.\n \n@@ -1109,6 +1115,7 @@ def inlineformset_factory(parent_model, model, form=ModelForm,\n         'absolute_max': absolute_max,\n         'can_delete_extra': can_delete_extra,\n         'renderer': renderer,\n+        'edit_only': edit_only,\n     }\n     FormSet = modelformset_factory(model, **kwargs)\n     FormSet.fk = fk\ndiff --git a/docs/ref/forms/models.txt b/docs/ref/forms/models.txt\nindex c0f0757b3e7f..9b0dbc964d02 100644\n--- a/docs/ref/forms/models.txt\n+++ b/docs/ref/forms/models.txt\n@@ -52,7 +52,7 @@ Model Form API reference. For introductory material about model forms, see the\n ``modelformset_factory``\n ========================\n \n-.. function:: modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None)\n+.. function:: modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)\n \n     Returns a ``FormSet`` class for the given ``model`` class.\n \n@@ -67,16 +67,23 @@ Model Form API reference. For introductory material about model forms, see the\n     through to :func:`~django.forms.formsets.formset_factory`. See\n     :doc:`formsets </topics/forms/formsets>` for details.\n \n+    The ``edit_only`` argument allows :ref:`preventing new objects creation\n+    <model-formsets-edit-only>`.\n+\n     See :ref:`model-formsets` for example usage.\n \n     .. versionchanged:: 4.0\n \n         The ``renderer`` argument was added.\n \n+    .. versionchanged:: 4.1\n+\n+        The ``edit_only`` argument was added.\n+\n ``inlineformset_factory``\n =========================\n \n-.. function:: inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None)\n+.. function:: inlineformset_factory(parent_model, model, form=ModelForm, formset=BaseInlineFormSet, fk_name=None, fields=None, exclude=None, extra=3, can_order=False, can_delete=True, max_num=None, formfield_callback=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, edit_only=False)\n \n     Returns an ``InlineFormSet`` using :func:`modelformset_factory` with\n     defaults of ``formset=``:class:`~django.forms.models.BaseInlineFormSet`,\n@@ -90,3 +97,7 @@ Model Form API reference. For introductory material about model forms, see the\n     .. versionchanged:: 4.0\n \n         The ``renderer`` argument was added.\n+\n+    .. versionchanged:: 4.1\n+\n+        The ``edit_only`` argument was added.\ndiff --git a/docs/releases/4.1.txt b/docs/releases/4.1.txt\nindex f5e7a07bb35c..6633262255f2 100644\n--- a/docs/releases/4.1.txt\n+++ b/docs/releases/4.1.txt\n@@ -189,6 +189,9 @@ Forms\n   labels in ``<legend>`` tags via the new ``tag`` argument of\n   :meth:`~django.forms.BoundField.label_tag`.\n \n+* The new ``edit_only`` argument for :func:`.modelformset_factory` and\n+  :func:`.inlineformset_factory` allows preventing new objects creation.\n+\n Generic Views\n ~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/forms/modelforms.txt b/docs/topics/forms/modelforms.txt\nindex cf79fc69c468..3045cefd9ec7 100644\n--- a/docs/topics/forms/modelforms.txt\n+++ b/docs/topics/forms/modelforms.txt\n@@ -953,8 +953,8 @@ extra forms displayed.\n \n Also, ``extra=0`` doesn't prevent creation of new model instances as you can\n :ref:`add additional forms with JavaScript <understanding-the-managementform>`\n-or send additional POST data. Formsets :ticket:`don't yet provide functionality\n-<26142>` for an \"edit only\" view that prevents creation of new instances.\n+or send additional POST data. See :ref:`model-formsets-edit-only` on how to do\n+this.\n \n If the value of ``max_num`` is greater than the number of existing related\n objects, up to ``extra`` additional blank forms will be added to the formset,\n@@ -972,6 +972,25 @@ so long as the total number of forms does not exceed ``max_num``::\n A ``max_num`` value of ``None`` (the default) puts a high limit on the number\n of forms displayed (1000). In practice this is equivalent to no limit.\n \n+.. _model-formsets-edit-only:\n+\n+Preventing new objects creation\n+-------------------------------\n+\n+.. versionadded:: 4.1\n+\n+Using the ``edit_only`` parameter, you can prevent creation of any new\n+objects::\n+\n+    >>> AuthorFormSet = modelformset_factory(\n+    ...     Author,\n+    ...     fields=('name', 'title'),\n+    ...     edit_only=True,\n+    ... )\n+\n+Here, the formset will only edit existing ``Author`` instances. No other\n+objects will be created or edited.\n+\n Using a model formset in a view\n -------------------------------\n \ndiff --git a/tests/model_formsets/tests.py b/tests/model_formsets/tests.py\nindex bb1a8a8a5e77..06129c90f54c 100644\n--- a/tests/model_formsets/tests.py\n+++ b/tests/model_formsets/tests.py\n@@ -1771,6 +1771,73 @@ def test_initial_form_count_empty_data(self):\n         formset = AuthorFormSet({})\n         self.assertEqual(formset.initial_form_count(), 0)\n \n+    def test_edit_only(self):\n+        charles = Author.objects.create(name='Charles Baudelaire')\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', edit_only=True)\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '0',\n+            'form-0-name': 'Arthur Rimbaud',\n+            'form-1-name': 'Walt Whitman',\n+        }\n+        formset = AuthorFormSet(data)\n+        self.assertIs(formset.is_valid(), True)\n+        formset.save()\n+        self.assertSequenceEqual(Author.objects.all(), [charles])\n+        data = {\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '1',\n+            'form-MAX_NUM_FORMS': '0',\n+            'form-0-id': charles.pk,\n+            'form-0-name': 'Arthur Rimbaud',\n+            'form-1-name': 'Walt Whitman',\n+        }\n+        formset = AuthorFormSet(data)\n+        self.assertIs(formset.is_valid(), True)\n+        formset.save()\n+        charles.refresh_from_db()\n+        self.assertEqual(charles.name, 'Arthur Rimbaud')\n+        self.assertSequenceEqual(Author.objects.all(), [charles])\n+\n+    def test_edit_only_inlineformset_factory(self):\n+        charles = Author.objects.create(name='Charles Baudelaire')\n+        book = Book.objects.create(author=charles, title='Les Paradis Artificiels')\n+        AuthorFormSet = inlineformset_factory(\n+            Author, Book, can_delete=False, fields='__all__', edit_only=True,\n+        )\n+        data = {\n+            'book_set-TOTAL_FORMS': '4',\n+            'book_set-INITIAL_FORMS': '1',\n+            'book_set-MAX_NUM_FORMS': '0',\n+            'book_set-0-id': book.pk,\n+            'book_set-0-title': 'Les Fleurs du Mal',\n+            'book_set-0-author': charles.pk,\n+            'book_set-1-title': 'Flowers of Evil',\n+            'book_set-1-author': charles.pk,\n+        }\n+        formset = AuthorFormSet(data, instance=charles)\n+        self.assertIs(formset.is_valid(), True)\n+        formset.save()\n+        book.refresh_from_db()\n+        self.assertEqual(book.title, 'Les Fleurs du Mal')\n+        self.assertSequenceEqual(Book.objects.all(), [book])\n+\n+    def test_edit_only_object_outside_of_queryset(self):\n+        charles = Author.objects.create(name='Charles Baudelaire')\n+        walt = Author.objects.create(name='Walt Whitman')\n+        data = {\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '1',\n+            'form-0-id': walt.pk,\n+            'form-0-name': 'Parth Patil',\n+        }\n+        AuthorFormSet = modelformset_factory(Author, fields='__all__', edit_only=True)\n+        formset = AuthorFormSet(data, queryset=Author.objects.filter(pk=charles.pk))\n+        self.assertIs(formset.is_valid(), True)\n+        formset.save()\n+        self.assertCountEqual(Author.objects.all(), [charles, walt])\n+\n \n class TestModelFormsetOverridesTroughFormMeta(TestCase):\n     def test_modelformset_factory_widgets(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14725"}