diff --git a/django/core/paginator.py b/django/core/paginator.py
index 1f92da5d4f..089471130f 100644
--- a/django/core/paginator.py
+++ b/django/core/paginator.py
@@ -106,6 +106,13 @@ class Paginator:
         """
         return range(1, self.num_pages + 1)
 
+    def __iter__(self):
+        """
+        Iterate through all pages of the paginator.
+        """
+        for page_num in self.page_range:
+            yield self.page(page_num)
+
     def _check_object_list_is_ordered(self):
         """
         Warn if self.object_list is unordered (typically a QuerySet).
diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py
index ef6e355e8d..8713aaee95 100644
--- a/tests/pagination/tests.py
+++ b/tests/pagination/tests.py
@@ -265,6 +265,45 @@ class PaginationTests(SimpleTestCase):
         """
         self.assertIsInstance(Paginator([1, 2, 3], 2).page_range, type(range(0)))
 
+    def test_paginator_iteration(self):
+        """
+        Paginator can be iterated to get all pages.
+        """
+        # Test basic iteration
+        items = list(range(1, 16))  # 15 items
+        paginator = Paginator(items, 5)  # 5 items per page
+        
+        pages = list(paginator)
+        self.assertEqual(len(pages), 3)
+        
+        # Check that we get Page objects with correct content
+        self.assertEqual(pages[0].object_list, [1, 2, 3, 4, 5])
+        self.assertEqual(pages[1].object_list, [6, 7, 8, 9, 10])
+        self.assertEqual(pages[2].object_list, [11, 12, 13, 14, 15])
+        
+        # Check page numbers
+        for i, page in enumerate(paginator, 1):
+            self.assertEqual(page.number, i)
+            from django.core.paginator import Page
+            self.assertIsInstance(page, Page)
+        
+        # Test with orphans
+        paginator2 = Paginator(list(range(1, 17)), 5, orphans=2)
+        pages2 = list(paginator2)
+        self.assertEqual(len(pages2), 3)
+        self.assertEqual(len(pages2[2].object_list), 6)  # Last page has 6 items
+        
+        # Test empty paginator with allow_empty_first_page=True
+        empty_paginator = Paginator([], 5)
+        empty_pages = list(empty_paginator)
+        self.assertEqual(len(empty_pages), 1)
+        self.assertEqual(empty_pages[0].object_list, [])
+        
+        # Test empty paginator with allow_empty_first_page=False
+        empty_paginator2 = Paginator([], 5, allow_empty_first_page=False)
+        empty_pages2 = list(empty_paginator2)
+        self.assertEqual(len(empty_pages2), 0)
+
     def test_get_page(self):
         """
         Paginator.get_page() returns a valid page even with invalid page
