{"instance_id": "sphinx-doc__sphinx-8593", "score": "C", "diff": "diff --git a/debug_test.py b/debug_test.py\nnew file mode 100644\nindex 000000000..6bcd07495\n--- /dev/null\n+++ b/debug_test.py\n@@ -0,0 +1,14 @@\n+import sys\n+import os\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+from sphinx.util.docstrings import extract_metadata, prepare_commentdoc\n+\n+# Test extracting metadata from comment docstrings\n+comment_doc = \"#: :meta public:\"\n+lines = prepare_commentdoc(comment_doc)\n+print(\"Comment doc lines:\", lines)\n+\n+# Now test extract_metadata \n+metadata = extract_metadata('\\n'.join(lines))\n+print(\"Metadata extracted:\", metadata)\ndiff --git a/setup.py b/setup.py\nindex 8d40de1a8..03f325278 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/simple_test.py b/simple_test.py\nnew file mode 100644\nindex 000000000..13acf1555\n--- /dev/null\n+++ b/simple_test.py\n@@ -0,0 +1,59 @@\n+\"\"\"Simple test for :meta public: fix\"\"\"\n+\n+import tempfile\n+import shutil\n+from pathlib import Path\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.path import path as sphinx_path\n+\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    srcdir = sphinx_path(tmpdir) / 'source' \n+    srcdir.makedirs()\n+    \n+    # Write conf.py\n+    (srcdir / 'conf.py').write_text('''\n+extensions = ['sphinx.ext.autodoc']\n+''')\n+    \n+    # Create test module\n+    module_content = '''\n+\"\"\"Test module\"\"\"\n+\n+# Variables with comment docstrings\n+_private_var = 1  #: This is private (no meta)\n+_public_var = 2  #: :meta public:\n+_another_public = 3  #: :meta public: This one is also public  \n+regular_var = 5\n+'''\n+    (srcdir / 'test_module.py').write_text(module_content)\n+    \n+    # Create index.rst\n+    (srcdir / 'index.rst').write_text('''\n+.. automodule:: test_module\n+   :members:\n+''')\n+    \n+    # Build\n+    app = SphinxTestApp(srcdir=srcdir, buildername='text')\n+    app.build()\n+    \n+    # Check output\n+    content = (app.outdir / 'index.txt').read_text()\n+    print(\"Output content:\")\n+    print(content)\n+    print(\"\\nChecking assertions...\")\n+    \n+    # Verify our fix works\n+    assert '_public_var' in content, \"FAIL: _public_var with :meta public: should be shown\"\n+    print(\"\u2713 _public_var is shown (has :meta public:)\")\n+    \n+    assert '_another_public' in content, \"FAIL: _another_public with :meta public: should be shown\"  \n+    print(\"\u2713 _another_public is shown (has :meta public:)\")\n+    \n+    assert '_private_var' not in content, \"FAIL: _private_var without :meta public: should not be shown\"\n+    print(\"\u2713 _private_var is not shown (no :meta public:)\")\n+    \n+    assert 'regular_var' in content, \"FAIL: regular_var should be shown\"\n+    print(\"\u2713 regular_var is shown (public by default)\")\n+    \n+    print(\"\\nAll tests passed!\")\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5be..8a24cb44d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -729,6 +729,14 @@ class Documenter:\n             has_doc = bool(doc)\n \n             metadata = extract_metadata(doc)\n+            \n+            # Check for metadata in attr_docs (comment docstrings) if regular doc doesn't have it\n+            if (namespace, membername) in attr_docs and 'private' not in metadata and 'public' not in metadata:\n+                # Extract metadata from comment docstring  \n+                attr_doc = '\\n'.join(attr_docs[(namespace, membername)])\n+                attr_metadata = extract_metadata(attr_doc)\n+                metadata.update(attr_metadata)\n+            \n             if 'private' in metadata:\n                 # consider a member private if docstring has \"private\" metadata\n                 isprivate = True\ndiff --git a/test_autodoc_meta_public.py b/test_autodoc_meta_public.py\nnew file mode 100644\nindex 000000000..e07899b76\n--- /dev/null\n+++ b/test_autodoc_meta_public.py\n@@ -0,0 +1,133 @@\n+\"\"\"Test autodoc :meta public: functionality\"\"\"\n+\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.path import path\n+\n+\n+def test_autodoc_meta_public_in_comment_docstring(app_params, make_app):\n+    \"\"\"Test that :meta public: works in comment docstrings for variables\"\"\"\n+    \n+    # Create test module content\n+    module_content = '''\n+\"\"\"Test module\"\"\"\n+\n+# Variables with comment docstrings\n+_private_var = 1  #: This is private (no meta)\n+_public_var = 2  #: :meta public:\n+_another_public = 3  #: :meta public: This one is also public\n+_mixed_meta = 4  #: Has content :meta public: and more content\n+\n+# Variables with regular docstrings can't have metadata\n+# (they would need to be in the __doc__ attribute, which doesn't exist for module variables)\n+regular_var = 5\n+\n+# Private variable without any documentation\n+_undocumented = 6\n+'''\n+    \n+    # Create test rst content\n+    rst_content = '''\n+.. automodule:: test_module\n+   :members:\n+'''\n+    \n+    # Setup the test app with our content\n+    args, kwargs = app_params\n+    srcdir = path(kwargs['srcdir'])\n+    \n+    # Write the test module\n+    (srcdir / 'test_module.py').write_text(module_content)\n+    \n+    # Write the rst file\n+    (srcdir / 'index.rst').write_text(rst_content)\n+    \n+    # Build the app\n+    app = make_app(*args, **kwargs)\n+    app.build()\n+    \n+    # Check the output\n+    content = (app.outdir / 'index.txt').read_text()\n+    \n+    # _public_var should be shown (has :meta public:)\n+    assert '_public_var' in content, \"Variable with :meta public: should be shown\"\n+    \n+    # _another_public should be shown (has :meta public:)\n+    assert '_another_public' in content, \"Variable with :meta public: should be shown\"\n+    \n+    # _mixed_meta should be shown (has :meta public:)\n+    assert '_mixed_meta' in content, \"Variable with :meta public: should be shown\"\n+    \n+    # _private_var should NOT be shown (no meta public)\n+    assert '_private_var' not in content, \"Private variable without :meta public: should not be shown\"\n+    \n+    # _undocumented should NOT be shown (no documentation at all)\n+    assert '_undocumented' not in content, \"Undocumented private variable should not be shown\"\n+    \n+    # regular_var should be shown (not private)\n+    assert 'regular_var' in content, \"Public variable should be shown\"\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_meta_private_in_comment_docstring(app):\n+    \"\"\"Test that :meta private: works in comment docstrings for variables\"\"\"\n+    \n+    # Create test module content\n+    module_content = '''\n+\"\"\"Test module\"\"\"\n+\n+# Public variables with :meta private:\n+public_but_private = 1  #: :meta private:\n+another_private = 2  #: This is private :meta private:\n+\n+# Public variable without meta\n+public_var = 3  #: This is public\n+'''\n+    \n+    # Write the test module  \n+    (app.srcdir / 'test_private_module.py').write_text(module_content)\n+    \n+    # Create index.rst that imports the module\n+    index_content = '''\n+.. automodule:: test_private_module\n+   :members:\n+'''\n+    (app.srcdir / 'index.rst').write_text(index_content)\n+    \n+    # Build\n+    app.build()\n+    \n+    # Check the output\n+    content = (app.outdir / 'index.txt').read_text()\n+    \n+    # Variables with :meta private: should NOT be shown\n+    assert 'public_but_private' not in content, \"Variable with :meta private: should not be shown\"\n+    assert 'another_private' not in content, \"Variable with :meta private: should not be shown\"\n+    \n+    # Regular public variable should be shown\n+    assert 'public_var' in content, \"Public variable without meta should be shown\"\n+\n+\n+if __name__ == '__main__':\n+    # Simple standalone test\n+    import tempfile\n+    import shutil\n+    from pathlib import Path\n+    \n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        srcdir = Path(tmpdir) / 'source'\n+        srcdir.mkdir()\n+        outdir = Path(tmpdir) / 'build'\n+        \n+        # Write conf.py\n+        (srcdir / 'conf.py').write_text('''\n+extensions = ['sphinx.ext.autodoc']\n+''')\n+        \n+        # Test public meta\n+        test_autodoc_meta_public_in_comment_docstring(\n+            ([], {'srcdir': srcdir, 'outdir': outdir, 'buildername': 'text'}),\n+            lambda *args, **kwargs: SphinxTestApp(*args, **kwargs)\n+        )\n+        \n+        print(\"All tests passed!\")\ndiff --git a/test_meta_public.py b/test_meta_public.py\nnew file mode 100644\nindex 000000000..2f97a9e9c\n--- /dev/null\n+++ b/test_meta_public.py\n@@ -0,0 +1,50 @@\n+\"\"\"Test module for :meta public: bug\"\"\"\n+\n+# Create a test module\n+import os\n+import tempfile\n+from sphinx.testing.path import path\n+from sphinx.testing.util import SphinxTestApp\n+\n+# Create temporary directory\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    srcdir = path(tmpdir) / 'src'\n+    srcdir.makedirs()\n+    \n+    # Create the example.py module\n+    (srcdir / 'example.py').write_text(\"\"\"\n+_foo = None  #: :meta public:\n+_bar = None  #: This is bar\n+_baz = None\n+public_var = 1\n+\"\"\")\n+    \n+    # Create conf.py\n+    (srcdir / 'conf.py').write_text(\"\"\"\n+extensions = ['sphinx.ext.autodoc']\n+\"\"\")\n+    \n+    # Create index.rst\n+    (srcdir / 'index.rst').write_text(\"\"\"\n+Test\n+====\n+\n+.. automodule:: example\n+   :members:\n+\"\"\")\n+    \n+    # Build the docs\n+    app = SphinxTestApp(srcdir=srcdir)\n+    app.build()\n+    \n+    # Check the output\n+    output_file = app.outdir / 'index.html'\n+    content = output_file.read_text()\n+    \n+    print(\"=== HTML Output ===\")\n+    print(content)\n+    print(\"\\n=== Checking for _foo ===\")\n+    if '_foo' in content:\n+        print(\"SUCCESS: _foo is shown in the output\")\n+    else:\n+        print(\"FAIL: _foo is NOT shown in the output\")\ndiff --git a/test_meta_public2.py b/test_meta_public2.py\nnew file mode 100644\nindex 000000000..82ae85c28\n--- /dev/null\n+++ b/test_meta_public2.py\n@@ -0,0 +1,76 @@\n+\"\"\"Test module for :meta public: bug\"\"\"\n+\n+# Create a test module  \n+import os\n+import sys\n+import tempfile\n+from pathlib import Path\n+\n+# Create temporary directory\n+tmpdir = tempfile.mkdtemp()\n+print(f\"Working in: {tmpdir}\")\n+\n+# Create the example.py module\n+example_content = \"\"\"\n+'''Example module'''\n+\n+_foo = None  #: :meta public:\n+_bar = None  #: This is bar\n+_baz = None\n+public_var = 1\n+\"\"\"\n+\n+with open(os.path.join(tmpdir, 'example.py'), 'w') as f:\n+    f.write(example_content)\n+\n+# Create conf.py\n+conf_content = \"\"\"\n+import sys\n+import os\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = ['sphinx.ext.autodoc']\n+\"\"\"\n+\n+with open(os.path.join(tmpdir, 'conf.py'), 'w') as f:\n+    f.write(conf_content)\n+\n+# Create index.rst\n+index_content = \"\"\"\n+Test\n+====\n+\n+.. automodule:: example\n+   :members:\n+\"\"\"\n+\n+with open(os.path.join(tmpdir, 'index.rst'), 'w') as f:\n+    f.write(index_content)\n+\n+# Build with sphinx-build command\n+import subprocess\n+os.chdir(tmpdir)\n+result = subprocess.run([sys.executable, '-m', 'sphinx', '-b', 'text', '.', '_build'], \n+                       capture_output=True, text=True)\n+\n+print(\"Build stdout:\", result.stdout)\n+print(\"Build stderr:\", result.stderr)\n+\n+# Check the text output\n+output_file = os.path.join(tmpdir, '_build', 'index.txt')\n+if os.path.exists(output_file):\n+    with open(output_file, 'r') as f:\n+        content = f.read()\n+    print(\"\\n=== Text Output ===\")\n+    print(content)\n+    print(\"\\n=== Checking for _foo ===\")\n+    if '_foo' in content:\n+        print(\"SUCCESS: _foo is shown in the output\")\n+    else:\n+        print(\"FAIL: _foo is NOT shown in the output\")\n+else:\n+    print(\"ERROR: Output file not found!\")\n+\n+# Cleanup\n+import shutil\n+shutil.rmtree(tmpdir)\ndiff --git a/tox.ini b/tox.ini\nindex dbb705a3a..9f4fc3a32 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From ce52a90d9250d6f770325eca20fcc3c4c13b982f Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Sun, 27 Dec 2020 01:42:15 +0900\nSubject: [PATCH] Fix #8592: autodoc: `:meta public:` does not effect to\n variables\n\nTo control the visibility of variables, ModuleDocumenter have to load\ndocstring of them on `get_object_members()` phase.  This reimplements\nit and `get_module_members()` helper to fetch docstring on earlier\nphase (as ClassDocumenter does).\n---\n CHANGES                                       |  3 ++\n doc/extdev/deprecated.rst                     |  5 ++\n sphinx/ext/autodoc/__init__.py                | 54 +++++++++++++------\n sphinx/ext/autodoc/importer.py                |  6 ++-\n .../roots/test-ext-autodoc/target/private.py  |  4 ++\n tests/test_ext_autodoc_private_members.py     | 30 ++++++++++-\n 6 files changed, 85 insertions(+), 17 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 9360f347300..a88ecb8ce65 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -10,6 +10,8 @@ Incompatible changes\n Deprecated\n ----------\n \n+* ``sphinx.ext.autodoc.importer.get_module_members()``\n+\n Features added\n --------------\n \n@@ -18,6 +20,7 @@ Bugs fixed\n \n * #741: autodoc: inherited-members doesn't work for instance attributes on super\n   class\n+* #8592: autodoc: ``:meta public:`` does not effect to variables\n \n Testing\n --------\ndiff --git a/doc/extdev/deprecated.rst b/doc/extdev/deprecated.rst\nindex 30d108035a4..d1e6a8933b1 100644\n--- a/doc/extdev/deprecated.rst\n+++ b/doc/extdev/deprecated.rst\n@@ -26,6 +26,11 @@ The following is a list of deprecated interfaces.\n      - (will\u00a0be) Removed\n      - Alternatives\n \n+   * - ``sphinx.ext.autodoc.importer.get_module_members()``\n+     - 3.5\n+     - 5.0\n+     - ``sphinx.ext.autodoc.ModuleDocumenter.get_module_members()``\n+\n    * - The ``follow_wrapped`` argument of ``sphinx.util.inspect.signature()``\n      - 3.4\n      - 5.0\ndiff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5bea1..0e07966d22a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -25,8 +25,8 @@\n from sphinx.deprecation import (RemovedInSphinx40Warning, RemovedInSphinx50Warning,\n                                 RemovedInSphinx60Warning)\n from sphinx.environment import BuildEnvironment\n-from sphinx.ext.autodoc.importer import (ClassAttribute, get_class_members, get_module_members,\n-                                         get_object_members, import_module, import_object)\n+from sphinx.ext.autodoc.importer import (ClassAttribute, get_class_members, get_object_members,\n+                                         import_module, import_object)\n from sphinx.ext.autodoc.mock import mock\n from sphinx.locale import _, __\n from sphinx.pycode import ModuleAnalyzer, PycodeError\n@@ -1043,30 +1043,54 @@ def add_directive_header(self, sig: str) -> None:\n         if self.options.deprecated:\n             self.add_line('   :deprecated:', sourcename)\n \n+    def get_module_members(self) -> Dict[str, ObjectMember]:\n+        \"\"\"Get members of target module.\"\"\"\n+        if self.analyzer:\n+            attr_docs = self.analyzer.attr_docs\n+        else:\n+            attr_docs = {}\n+\n+        members = {}  # type: Dict[str, ObjectMember]\n+        for name in dir(self.object):\n+            try:\n+                value = safe_getattr(self.object, name, None)\n+                docstring = attr_docs.get(('', name), [])\n+                members[name] = ObjectMember(name, value, docstring=\"\\n\".join(docstring))\n+            except AttributeError:\n+                continue\n+\n+        # annotation only member (ex. attr: int)\n+        try:\n+            for name in inspect.getannotations(self.object):\n+                if name not in members:\n+                    docstring = attr_docs.get(('', name), [])\n+                    members[name] = ObjectMember(name, INSTANCEATTR,\n+                                                 docstring=\"\\n\".join(docstring))\n+        except AttributeError:\n+            pass\n+\n+        return members\n+\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n+        members = self.get_module_members()\n         if want_all:\n-            members = get_module_members(self.object)\n             if not self.__all__:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n-                return True, members\n+                return True, list(members.values())\n             else:\n-                ret = []\n-                for name, value in members:\n-                    if name in self.__all__:\n-                        ret.append(ObjectMember(name, value))\n-                    else:\n-                        ret.append(ObjectMember(name, value, skipped=True))\n+                for member in members.values():\n+                    if member.__name__ not in self.__all__:\n+                        member.skipped = True\n \n-                return False, ret\n+                return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n             for name in memberlist:\n-                try:\n-                    value = safe_getattr(self.object, name)\n-                    ret.append(ObjectMember(name, value))\n-                except AttributeError:\n+                if name in members:\n+                    ret.append(members[name])\n+                else:\n                     logger.warning(__('missing attribute mentioned in :members: option: '\n                                       'module %s, attribute %s') %\n                                    (safe_getattr(self.object, '__name__', '???'), name),\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 1c5ea979e60..b6adb7ceb1d 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -13,7 +13,8 @@\n import warnings\n from typing import Any, Callable, Dict, List, Mapping, NamedTuple, Optional, Tuple\n \n-from sphinx.deprecation import RemovedInSphinx40Warning, deprecated_alias\n+from sphinx.deprecation import (RemovedInSphinx40Warning, RemovedInSphinx50Warning,\n+                                deprecated_alias)\n from sphinx.pycode import ModuleAnalyzer, PycodeError\n from sphinx.util import logging\n from sphinx.util.inspect import (getannotations, getmro, getslots, isclass, isenumclass,\n@@ -141,6 +142,9 @@ def get_module_members(module: Any) -> List[Tuple[str, Any]]:\n     \"\"\"Get members of target module.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n \n+    warnings.warn('sphinx.ext.autodoc.importer.get_module_members() is deprecated.',\n+                  RemovedInSphinx50Warning)\n+\n     members = {}  # type: Dict[str, Tuple[str, Any]]\n     for name in dir(module):\n         try:\ndiff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex a39ce085eca..02d174863f9 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -9,3 +9,7 @@ def _public_function(name):\n \n     :meta public:\n     \"\"\"\n+\n+\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\ndiff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex 6bce5ce7884..ac7f3c28618 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -23,6 +23,13 @@ def test_private_field(app):\n         '.. py:module:: target.private',\n         '',\n         '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n         '.. py:function:: _public_function(name)',\n         '   :module: target.private',\n         '',\n@@ -44,6 +51,20 @@ def test_private_field_and_private_members(app):\n         '.. py:module:: target.private',\n         '',\n         '',\n+        '.. py:data:: PRIVATE_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n         '.. py:function:: _public_function(name)',\n         '   :module: target.private',\n         '',\n@@ -66,13 +87,20 @@ def test_private_field_and_private_members(app):\n def test_private_members(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None,\n-               \"private-members\": \"_public_function\"}\n+               \"private-members\": \"_PUBLIC_CONSTANT,_public_function\"}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n         '',\n         '.. py:module:: target.private',\n         '',\n         '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n         '.. py:function:: _public_function(name)',\n         '   :module: target.private',\n         '',\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8593"}