diff --git a/simple_test.py b/simple_test.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_comprehensive_suppress_context.py b/test_comprehensive_suppress_context.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_suppress_context.py b/test_suppress_context.py
new file mode 100644
index 0000000000..028cf18b67
--- /dev/null
+++ b/test_suppress_context.py
@@ -0,0 +1,82 @@
+#!/usr/bin/env python
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='test-secret-key',
+    ROOT_URLCONF='test_urls',
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    MIDDLEWARE=[],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+            ],
+        },
+    }],
+)
+
+django.setup()
+
+from django.views import View
+from django.http import HttpResponse
+from django.urls import path
+from django.test import RequestFactory
+from django.views.debug import ExceptionReporter
+
+# Create the test view
+class TestView(View):
+    def get(self, request, *args, **kwargs):
+        try:
+            raise RuntimeError('my error')
+        except Exception as exc:
+            raise ValueError('my new error') from None
+
+# Test the exception reporter
+factory = RequestFactory()
+request = factory.get('/')
+
+view = TestView()
+try:
+    view.get(request)
+except Exception as exc:
+    # Create an exception reporter
+    reporter = ExceptionReporter(request, type(exc), exc, exc.__traceback__)
+    
+    # Check if the explicit_or_implicit_cause function works correctly
+    def explicit_or_implicit_cause(exc_value):
+        explicit = getattr(exc_value, '__cause__', None)
+        suppress_context = getattr(exc_value, '__suppress_context__', None)
+        implicit = getattr(exc_value, '__context__', None)
+        return explicit or (None if suppress_context else implicit)
+    
+    print(f"Exception: {exc}")
+    print(f"Exception.__cause__: {exc.__cause__}")
+    print(f"Exception.__context__: {exc.__context__}")
+    print(f"Exception.__suppress_context__: {exc.__suppress_context__}")
+    print(f"Result of explicit_or_implicit_cause: {explicit_or_implicit_cause(exc)}")
+    
+    # Get traceback frames to see if context is suppressed
+    frames = reporter.get_traceback_frames()
+    print(f"\nNumber of exception frames in debug view: {len(frames)}")
+    
+    # Check if RuntimeError appears in the frames
+    has_runtime_error = False
+    for frame in frames:
+        if 'RuntimeError' in str(frame.get('exc_cause_explicit', '')) or 'RuntimeError' in str(frame.get('exc_cause', '')):
+            has_runtime_error = True
+            break
+    
+    print(f"RuntimeError appears in debug frames: {has_runtime_error}")
+    print(f"Expected: RuntimeError should NOT appear (due to 'from None')")
