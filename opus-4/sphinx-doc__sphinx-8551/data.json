{"instance_id": "sphinx-doc__sphinx-8551", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex 8d40de1a8..03f325278 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 79d7e4f46..857e411f3 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -271,7 +271,11 @@ class PyXrefMixin:\n                   contnode: Node = None, env: BuildEnvironment = None) -> Node:\n         result = super().make_xref(rolename, domain, target,  # type: ignore\n                                    innernode, contnode, env)\n-        result['refspecific'] = True\n+        # Only set refspecific for unqualified names or names starting with '.'\n+        # This ensures proper scoping: unqualified names are looked up first in the\n+        # current module/class scope before checking other modules\n+        if target.startswith('.') or '.' not in target:\n+            result['refspecific'] = True\n         if target.startswith(('.', '~')):\n             prefix, result['reftarget'] = target[0], target[1:]\n             if prefix == '.':\ndiff --git a/test_debug.py b/test_debug.py\nnew file mode 100644\nindex 000000000..e4d1bc70f\n--- /dev/null\n+++ b/test_debug.py\n@@ -0,0 +1,73 @@\n+\"\"\"Debug script to understand the issue better.\"\"\"\n+import os\n+import sys\n+import tempfile\n+import shutil\n+from sphinx.application import Sphinx\n+from sphinx.util.docutils import SphinxStandaloneReader\n+\n+# Create a temporary directory for the test\n+test_dir = tempfile.mkdtemp()\n+print(f\"Test directory: {test_dir}\")\n+\n+# Create conf.py\n+conf_content = \"\"\"\n+project = 'Test Project'\n+extensions = []\n+\"\"\"\n+with open(os.path.join(test_dir, 'conf.py'), 'w') as f:\n+    f.write(conf_content)\n+\n+# Create a minimal test case\n+index_content = \"\"\"\n+Test Documentation\n+==================\n+\n+.. py:class:: mod.A\n+\n+.. py:class:: mod.submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: test()\n+   \n+   :param A a: This should resolve to mod.submod.A\n+   :rtype: A\n+\"\"\"\n+with open(os.path.join(test_dir, 'index.rst'), 'w') as f:\n+    f.write(index_content)\n+\n+# Initialize Sphinx app\n+app = Sphinx(srcdir=test_dir, confdir=test_dir, outdir=os.path.join(test_dir, '_build'),\n+             doctreedir=os.path.join(test_dir, '.doctrees'), buildername='html')\n+\n+# Read and parse the document\n+env = app.env\n+docname = 'index'\n+env.prepare_settings(docname)\n+\n+# Read source\n+with open(os.path.join(test_dir, 'index.rst'), 'r') as f:\n+    source = f.read()\n+\n+# Parse document\n+reader = SphinxStandaloneReader()\n+reader.setup(app)\n+parser = app.registry.create_source_parser(app, 'restructuredtext')\n+doc = reader.read(source, parser, {'source': os.path.join(test_dir, 'index.rst'), 'gettext_compact': True})\n+\n+# Process the document\n+app.emit('doctree-read', doc, docname)\n+\n+# Check what objects are registered in the Python domain\n+py_domain = env.domains['py']\n+print(\"\\nRegistered objects:\")\n+for name, obj in py_domain.objects.items():\n+    print(f\"  {name}: {obj}\")\n+\n+print(\"\\nCurrent module context during parsing:\")\n+# This would be set by py:currentmodule directive\n+print(f\"  py:module = {env.ref_context.get('py:module', 'None')}\")\n+\n+# Clean up\n+shutil.rmtree(test_dir)\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 000000000..c8115cf1a\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,76 @@\n+\"\"\"Test script to reproduce the issue with :type: and :rtype: cross-references.\"\"\"\n+import os\n+import shutil\n+import tempfile\n+from sphinx.cmd.build import build_main\n+\n+# Create a temporary directory for the test\n+test_dir = tempfile.mkdtemp()\n+print(f\"Test directory: {test_dir}\")\n+\n+# Create conf.py\n+conf_content = \"\"\"\n+project = 'Test Project'\n+extensions = []\n+\"\"\"\n+with open(os.path.join(test_dir, 'conf.py'), 'w') as f:\n+    f.write(conf_content)\n+\n+# Create index.rst with the problematic content\n+index_content = \"\"\"\n+Test Documentation\n+==================\n+\n+.. py:class:: mod.A\n+.. py:class:: mod.submod.A\n+\n+.. py:function:: f()\n+\n+\t- :py:class:`mod.A`\n+\t- :py:class:`mod.submod.A`\n+\n+\t:param mod.A a:\n+\t:param mod.submod.A b:\n+\t:rtype: mod.A\n+\t:rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod\n+\n+.. py:function:: f()\n+\n+\t- :py:class:`A`\n+\t- :py:class:`mod.A`\n+\t- :py:class:`mod.submod.A`\n+\n+\t:param A a:\n+\t:param mod.A b:\n+\t:param mod.submod.A c:\n+\t:rtype: A\n+\t:rtype: mod.A\n+\t:rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: f()\n+\n+\t- :py:class:`A`\n+\t- :py:class:`mod.A`\n+\t- :py:class:`mod.submod.A`\n+\n+\t:param A a: BUG: links to mod.A instead of mod.submod.A\n+\t:param mod.A b:\n+\t:param mod.submod.A c:\n+\t:rtype: A\n+\t:rtype: mod.A\n+\t:rtype: mod.submod.A\n+\"\"\"\n+with open(os.path.join(test_dir, 'index.rst'), 'w') as f:\n+    f.write(index_content)\n+\n+# Build the documentation\n+print(\"\\nBuilding documentation...\")\n+result = build_main(['-b', 'html', test_dir, os.path.join(test_dir, '_build')])\n+\n+# Clean up\n+shutil.rmtree(test_dir)\n+print(f\"\\nBuild result: {result}\")\ndiff --git a/test_simple.py b/test_simple.py\nnew file mode 100644\nindex 000000000..d596a9598\n--- /dev/null\n+++ b/test_simple.py\n@@ -0,0 +1,50 @@\n+\"\"\"Simple test to check if the fix works.\"\"\"\n+import os\n+import shutil\n+import tempfile\n+from sphinx.cmd.build import build_main\n+\n+# Create a temporary directory for the test\n+test_dir = tempfile.mkdtemp()\n+print(f\"Test directory: {test_dir}\")\n+\n+# Create conf.py\n+conf_content = \"\"\"\n+project = 'Test Project'\n+extensions = []\n+\"\"\"\n+with open(os.path.join(test_dir, 'conf.py'), 'w') as f:\n+    f.write(conf_content)\n+\n+# Create index.rst with a minimal case  \n+index_content = \"\"\"\n+Test Documentation\n+==================\n+\n+.. py:class:: mod.A\n+   \n+   Class A in module mod\n+\n+.. py:class:: mod.submod.A\n+   \n+   Class A in module mod.submod\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: test()\n+   \n+   Test function in mod.submod\n+   \n+   :param A a: Parameter of type A (should be mod.submod.A)\n+   :rtype: A\n+\"\"\"\n+with open(os.path.join(test_dir, 'index.rst'), 'w') as f:\n+    f.write(index_content)\n+\n+# Build the documentation\n+print(\"\\nBuilding documentation...\")\n+result = build_main(['-b', 'html', test_dir, os.path.join(test_dir, '_build')])\n+\n+# Clean up\n+shutil.rmtree(test_dir)\n+print(f\"\\nBuild result: {result}\")\ndiff --git a/test_trace.py b/test_trace.py\nnew file mode 100644\nindex 000000000..907705953\n--- /dev/null\n+++ b/test_trace.py\n@@ -0,0 +1,66 @@\n+\"\"\"Test to trace what's happening.\"\"\"\n+# Patch the find_obj method to add debug output\n+import sphinx.domains.python\n+\n+original_find_obj = sphinx.domains.python.PythonDomain.find_obj\n+\n+def patched_find_obj(self, env, modname, classname, name, type, searchmode=0):\n+    print(f\"\\n[DEBUG] find_obj called:\")\n+    print(f\"  modname={modname}, classname={classname}, name={name}\")\n+    print(f\"  type={type}, searchmode={searchmode}\")\n+    print(f\"  Available objects: {list(self.objects.keys())}\")\n+    \n+    result = original_find_obj(self, env, modname, classname, name, type, searchmode)\n+    print(f\"  Result: {result}\")\n+    return result\n+\n+sphinx.domains.python.PythonDomain.find_obj = patched_find_obj\n+\n+# Now run the test\n+import os\n+import shutil\n+import tempfile\n+from sphinx.cmd.build import build_main\n+\n+# Create a temporary directory for the test\n+test_dir = tempfile.mkdtemp()\n+\n+# Create conf.py\n+conf_content = \"\"\"\n+project = 'Test Project'\n+extensions = []\n+\"\"\"\n+with open(os.path.join(test_dir, 'conf.py'), 'w') as f:\n+    f.write(conf_content)\n+\n+# Create index.rst with a minimal case  \n+index_content = \"\"\"\n+Test Documentation\n+==================\n+\n+.. py:class:: mod.A\n+   \n+   Class A in module mod\n+\n+.. py:class:: mod.submod.A\n+   \n+   Class A in module mod.submod\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: test()\n+   \n+   Test function in mod.submod\n+   \n+   :param A a: Parameter of type A (should be mod.submod.A)\n+   :rtype: A\n+\"\"\"\n+with open(os.path.join(test_dir, 'index.rst'), 'w') as f:\n+    f.write(index_content)\n+\n+# Build the documentation  \n+print(\"\\nBuilding documentation...\")\n+result = build_main(['-b', 'html', test_dir, os.path.join(test_dir, '_build')])\n+\n+# Clean up\n+shutil.rmtree(test_dir)\ndiff --git a/tox.ini b/tox.ini\nindex dbb705a3a..9f4fc3a32 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From 30c594fbc592a741956c067f5188f9bf6ecd25da Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Sat, 19 Dec 2020 16:28:48 +0900\nSubject: [PATCH] Fix #8365: py domain: :type: and :rtype: gives false\n ambiguous warnings\n\nThe searching context like py:module and py:class are missing in the\npending_xref nodes generated from info-field-lists.  This sets these\nsearching context info to them.\n---\n CHANGES                  |  2 ++\n sphinx/domains/python.py |  2 ++\n sphinx/util/docfields.py |  1 +\n tests/test_domain_py.py  | 47 ++++++++++++++++++++++++++++++++++++++++\n 4 files changed, 52 insertions(+)\n\ndiff --git a/CHANGES b/CHANGES\nindex 484e654eda5..047eeb70c88 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -81,6 +81,8 @@ Bugs fixed\n * #8131: linkcheck: Use GET when HEAD requests cause Too Many Redirects, to\n   accommodate infinite redirect loops on HEAD\n * #8437: Makefile: ``make clean`` with empty BUILDDIR is dangerous\n+* #8365: py domain: ``:type:`` and ``:rtype:`` gives false ambiguous class\n+  lookup warnings\n * #8352: std domain: Failed to parse an option that starts with bracket\n * #8519: LaTeX: Prevent page brake in the middle of a seealso\n \ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 79d7e4f466d..c4d134d0874 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -272,6 +272,8 @@ def make_xref(self, rolename: str, domain: str, target: str,\n         result = super().make_xref(rolename, domain, target,  # type: ignore\n                                    innernode, contnode, env)\n         result['refspecific'] = True\n+        result['py:module'] = env.ref_context.get('py:module')\n+        result['py:class'] = env.ref_context.get('py:class')\n         if target.startswith(('.', '~')):\n             prefix, result['reftarget'] = target[0], target[1:]\n             if prefix == '.':\ndiff --git a/sphinx/util/docfields.py b/sphinx/util/docfields.py\nindex 404bb127f82..9a57ccff75a 100644\n--- a/sphinx/util/docfields.py\n+++ b/sphinx/util/docfields.py\n@@ -295,6 +295,7 @@ def transform(self, node: nodes.field_list) -> None:\n                         self.directive.domain,\n                         target,\n                         contnode=content[0],\n+                        env=self.directive.state.document.settings.env\n                     )\n                     if _is_single_paragraph(field_body):\n                         paragraph = cast(nodes.paragraph, field_body[0])\ndiff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 2dc97bed99e..f95521e2e91 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -774,6 +774,53 @@ def test_pydecoratormethod_signature(app):\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n \n+def test_info_field_list(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param str name: blah blah\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    print(doctree)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph])]))\n+\n+    # :param str name:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"name\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param age: + :type age:\n+    assert_node(doctree[3][1][0][0][1][0][1][0],\n+                ([addnodes.literal_strong, \"age\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+\n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8551"}