{"instance_id": "django__django-11119", "score": "C", "diff": "diff --git a/django/template/engine.py b/django/template/engine.py\nindex dfaa67ba12..ff9ce58d59 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -160,7 +160,7 @@ class Engine:\n         if isinstance(context, Context):\n             return t.render(context)\n         else:\n-            return t.render(Context(context))\n+            return t.render(Context(context, autoescape=self.autoescape))\n \n     def select_template(self, template_name_list):\n         \"\"\"\ndiff --git a/test_autoescape.py b/test_autoescape.py\nnew file mode 100644\nindex 0000000000..68ef4d7ddf\n--- /dev/null\n+++ b/test_autoescape.py\n@@ -0,0 +1,33 @@\n+from django.template import Engine\n+\n+# First create a test template\n+import os\n+import tempfile\n+\n+# Create a temporary directory for templates\n+temp_dir = tempfile.mkdtemp()\n+template_path = os.path.join(temp_dir, 'test_template')\n+with open(template_path, 'w') as f:\n+    f.write('{{ content }}')\n+\n+# Test case 1: Engine with autoescape=False\n+engine = Engine(dirs=[temp_dir], autoescape=False)\n+result = engine.render_to_string('test_template', {'content': '<script>alert(\"XSS\")</script>'})\n+print(\"Test 1 - Engine with autoescape=False:\")\n+print(\"Result: \" + repr(result))\n+print('Expected: \\'<script>alert(\"XSS\")</script>\\'')\n+expected = '<script>alert(\"XSS\")</script>'\n+print(\"Autoescape working correctly: \" + str(result == expected))\n+print()\n+\n+# Test case 2: Engine with autoescape=True (default)\n+engine_escaped = Engine(dirs=[temp_dir], autoescape=True)\n+result_escaped = engine_escaped.render_to_string('test_template', {'content': '<script>alert(\"XSS\")</script>'})\n+print(\"Test 2 - Engine with autoescape=True:\")\n+print(\"Result: \" + repr(result_escaped))\n+print('Expected: \\'&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;\\'')\n+print(\"Autoescape working correctly: \" + str('&lt;script&gt;' in result_escaped))\n+\n+# Clean up\n+import shutil\n+shutil.rmtree(temp_dir)\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..af3a820942\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,61 @@\n+from django.template import Engine, Context\n+import os\n+import tempfile\n+import shutil\n+\n+# Create a temporary directory for templates\n+temp_dir = tempfile.mkdtemp()\n+template_path = os.path.join(temp_dir, 'test_template')\n+with open(template_path, 'w') as f:\n+    f.write('{{ content }}')\n+\n+# Test 1: Engine with autoescape=False, using render_to_string\n+print(\"Test 1: Engine(autoescape=False) with render_to_string\")\n+engine = Engine(dirs=[temp_dir], autoescape=False)\n+result = engine.render_to_string('test_template', {'content': '<b>HTML</b>'})\n+print(\"Result:\", repr(result))\n+print(\"Expected: '<b>HTML</b>'\")\n+print(\"Pass:\", result == '<b>HTML</b>')\n+print()\n+\n+# Test 2: Engine with autoescape=True, using render_to_string\n+print(\"Test 2: Engine(autoescape=True) with render_to_string\")\n+engine_escaped = Engine(dirs=[temp_dir], autoescape=True)\n+result_escaped = engine_escaped.render_to_string('test_template', {'content': '<b>HTML</b>'})\n+print(\"Result:\", repr(result_escaped))\n+print(\"Expected: '&lt;b&gt;HTML&lt;/b&gt;'\")\n+print(\"Pass:\", result_escaped == '&lt;b&gt;HTML&lt;/b&gt;')\n+print()\n+\n+# Test 3: Passing a Context object should preserve its autoescape setting\n+print(\"Test 3: Passing a Context object with autoescape=False\")\n+engine_default = Engine(dirs=[temp_dir])  # default autoescape=True\n+ctx = Context({'content': '<b>HTML</b>'}, autoescape=False)\n+result_ctx = engine_default.render_to_string('test_template', ctx)\n+print(\"Result:\", repr(result_ctx))\n+print(\"Expected: '<b>HTML</b>'\")\n+print(\"Pass:\", result_ctx == '<b>HTML</b>')\n+print()\n+\n+# Test 4: Passing a Context object with autoescape=True\n+print(\"Test 4: Passing a Context object with autoescape=True\")\n+engine_noauto = Engine(dirs=[temp_dir], autoescape=False)\n+ctx_escaped = Context({'content': '<b>HTML</b>'}, autoescape=True)\n+result_ctx_escaped = engine_noauto.render_to_string('test_template', ctx_escaped)\n+print(\"Result:\", repr(result_ctx_escaped))\n+print(\"Expected: '&lt;b&gt;HTML&lt;/b&gt;'\")\n+print(\"Pass:\", result_ctx_escaped == '&lt;b&gt;HTML&lt;/b&gt;')\n+print()\n+\n+# Test 5: Using select_template with autoescape=False\n+print(\"Test 5: Engine(autoescape=False) with select_template\")\n+template_path2 = os.path.join(temp_dir, 'test_template2')\n+with open(template_path2, 'w') as f:\n+    f.write('{{ content }}')\n+result_select = engine.render_to_string(['nonexistent', 'test_template2'], {'content': '<i>italic</i>'})\n+print(\"Result:\", repr(result_select))\n+print(\"Expected: '<i>italic</i>'\")\n+print(\"Pass:\", result_select == '<i>italic</i>')\n+\n+# Clean up\n+shutil.rmtree(temp_dir)\ndiff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex 2bb8601fbb..73773bf31e 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -20,6 +20,26 @@ class RenderToStringTest(SimpleTestCase):\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n         )\n+    \n+    def test_autoescape_off(self):\n+        \"\"\"\n+        #xxxxx -- render_to_string should honor the engine's autoescape attribute\n+        \"\"\"\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+    \n+    def test_autoescape_on(self):\n+        \"\"\"\n+        #xxxxx -- render_to_string should honor the engine's autoescape attribute\n+        \"\"\"\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n \n class GetDefaultTests(SimpleTestCase):\n", "gold_standard_diff": "From 624573726aa5982d1c73aac85fb27aea3b3b23b7 Mon Sep 17 00:00:00 2001\nFrom: Nathan Gaberel <nathan@gnab.fr>\nDate: Sat, 23 Mar 2019 20:27:45 +0000\nSubject: [PATCH] Fixed #29791 -- Made Engine.render_to_string() honor\n autoescape.\n\n---\n AUTHORS                             | 1 +\n django/template/engine.py           | 2 +-\n tests/template_tests/test_engine.py | 7 +++++++\n 3 files changed, 9 insertions(+), 1 deletion(-)\n\ndiff --git a/AUTHORS b/AUTHORS\nindex 01908ad6c9c7..c8054c9e20b6 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -627,6 +627,7 @@ answer newbie questions, and generally made Django that much better:\n     Nasir Hussain <nasirhjafri@gmail.com>\n     Natalia Bidart <nataliabidart@gmail.com>\n     Nate Bragg <jonathan.bragg@alum.rpi.edu>\n+    Nathan Gaberel <nathan@gnab.fr>\n     Neal Norwitz <nnorwitz@google.com>\n     Neboj\u0161a Dor\u0111evi\u0107\n     Ned Batchelder <https://nedbatchelder.com/>\ndiff --git a/django/template/engine.py b/django/template/engine.py\nindex dfaa67ba1207..ff9ce58d599e 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -160,7 +160,7 @@ def render_to_string(self, template_name, context=None):\n         if isinstance(context, Context):\n             return t.render(context)\n         else:\n-            return t.render(Context(context))\n+            return t.render(Context(context, autoescape=self.autoescape))\n \n     def select_template(self, template_name_list):\n         \"\"\"\ndiff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex 2bb8601fbbaf..b975ea87b467 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -21,6 +21,13 @@ def test_basic_context(self):\n             'obj:test\\n',\n         )\n \n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n \n class GetDefaultTests(SimpleTestCase):\n \n", "gold_standard_pr_link": "https://github.com/django/django/pull/11119"}