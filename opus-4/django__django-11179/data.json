{"instance_id": "django__django-11179", "score": "C", "diff": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..3a462f1c4c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\ndiff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 55eeb226ea..25763d838a 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -208,6 +208,39 @@ class DeletionTests(TestCase):\n \n         models.signals.pre_delete.disconnect(pre_delete)\n \n+    def test_fast_delete_pk_cleared(self):\n+        \"\"\"\n+        Test that the primary key is cleared when using the fast delete path\n+        (single object with no dependencies).\n+        \"\"\"\n+        # Create a simple object with no dependencies\n+        r = R.objects.create()\n+        r_pk = r.pk\n+        self.assertIsNotNone(r_pk)\n+        \n+        # Delete it - this should use the fast delete path\n+        r.delete()\n+        \n+        # PK should be None after deletion\n+        self.assertIsNone(r.pk, \"PK should be None after fast delete\")\n+        \n+    def test_regular_delete_pk_cleared(self):\n+        \"\"\"\n+        Test that the primary key is cleared when using the regular delete path\n+        (object with dependencies).\n+        \"\"\"\n+        # Create an object with dependencies\n+        r = R.objects.create()\n+        s = S.objects.create(r=r)\n+        r_pk = r.pk\n+        self.assertIsNotNone(r_pk)\n+        \n+        # Delete it - this should use the regular delete path\n+        r.delete()\n+        \n+        # PK should be None after deletion\n+        self.assertIsNone(r.pk, \"PK should be None after regular delete\")\n+\n     def test_deletion_order(self):\n         pre_delete_order = []\n         post_delete_order = []\n", "gold_standard_diff": "From afc708cf6d047b35db57bd7c55baeffef459d279 Mon Sep 17 00:00:00 2001\nFrom: Florian Apolloner <florian@apolloner.eu>\nDate: Fri, 5 Apr 2019 17:52:59 +0200\nSubject: [PATCH] Fixed #30330 -- Fixed setting of primary key to None during\n fast-delete.\n\nRegression in bc7dd8490b882b2cefdc7faf431dc64c532b79c9.\n---\n django/db/models/deletion.py | 1 +\n docs/releases/2.2.1.txt      | 3 +++\n tests/delete/tests.py        | 9 +++++++++\n 3 files changed, 13 insertions(+)\n\ndiff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9b6..3a462f1c4c46 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ def delete(self):\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\ndiff --git a/docs/releases/2.2.1.txt b/docs/releases/2.2.1.txt\nindex f7ac012fb7f9..2b82a33d292e 100644\n--- a/docs/releases/2.2.1.txt\n+++ b/docs/releases/2.2.1.txt\n@@ -22,3 +22,6 @@ Bugfixes\n   :class:`~django.contrib.postgres.aggregates.ArrayAgg` and\n   :class:`~django.contrib.postgres.aggregates.StringAgg` when it contains an\n   expression with params (:ticket:`30332`).\n+\n+* Fixed a regression in Django 2.2 that caused a single instance fast-delete\n+  to not set the primary key to ``None`` (:ticket:`30330`).\ndiff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 55eeb226eaf9..ed47d0667dd8 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,7 @@\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -471,6 +472,14 @@ def test_fast_delete_qs(self):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11179"}