diff --git a/test_quantile_attrs.py b/test_quantile_attrs.py
new file mode 100644
index 00000000..b649f68b
--- /dev/null
+++ b/test_quantile_attrs.py
@@ -0,0 +1,20 @@
+import xarray as xr
+
+# Test case from the issue
+da = xr.DataArray([0, 0], dims="x", attrs={'units':'K'})
+print("Original attrs:", da.attrs)
+
+# Test with keep_attrs=True
+out = da.quantile(.9, dim='x', keep_attrs=True)
+print("After quantile with keep_attrs=True:", out.attrs)
+print("Expected: OrderedDict([('units', 'K')])")
+
+# Test with keep_attrs=False
+out2 = da.quantile(.9, dim='x', keep_attrs=False)
+print("\nAfter quantile with keep_attrs=False:", out2.attrs)
+print("Expected: OrderedDict()")
+
+# Test with keep_attrs=None (default)
+out3 = da.quantile(.9, dim='x')
+print("\nAfter quantile with keep_attrs=None (default):", out3.attrs)
+print("Expected: OrderedDict() (default behavior)")
diff --git a/test_quantile_attrs_comprehensive.py b/test_quantile_attrs_comprehensive.py
new file mode 100644
index 00000000..f6cca717
--- /dev/null
+++ b/test_quantile_attrs_comprehensive.py
@@ -0,0 +1,51 @@
+import xarray as xr
+import numpy as np
+
+print("Test 1: Single quantile with attributes")
+da = xr.DataArray([0, 1, 2, 3, 4], dims="x", attrs={'units': 'K', 'description': 'temperature'})
+print("Original attrs:", da.attrs)
+out = da.quantile(0.5, dim='x', keep_attrs=True)
+print("After quantile(0.5) with keep_attrs=True:", out.attrs)
+print("Expected: same as original\n")
+
+print("Test 2: Multiple quantiles with attributes") 
+da = xr.DataArray([0, 1, 2, 3, 4], dims="x", attrs={'units': 'K'})
+out = da.quantile([0.25, 0.5, 0.75], dim='x', keep_attrs=True)
+print("After quantile([0.25, 0.5, 0.75]) with keep_attrs=True:", out.attrs)
+print("Expected: OrderedDict([('units', 'K')])\n")
+
+print("Test 3: No dimension reduction (quantile over all dims)")
+da = xr.DataArray([[0, 1], [2, 3]], dims=["x", "y"], attrs={'units': 'K'})
+out = da.quantile(0.5, keep_attrs=True)
+print("After quantile(0.5) over all dims with keep_attrs=True:", out.attrs)
+print("Expected: OrderedDict([('units', 'K')])\n")
+
+print("Test 4: Dataset quantile preserving DataArray attributes")
+ds = xr.Dataset({
+    'temp': xr.DataArray([0, 1, 2], dims='x', attrs={'units': 'K'}),
+    'pressure': xr.DataArray([100, 101, 102], dims='x', attrs={'units': 'Pa'})
+})
+print("Original dataset variable attrs:")
+print("  temp:", ds['temp'].attrs)
+print("  pressure:", ds['pressure'].attrs)
+
+out_ds = ds.quantile(0.5, dim='x', keep_attrs=True)
+print("After dataset quantile with keep_attrs=True:")
+print("  temp:", out_ds['temp'].attrs)
+print("  pressure:", out_ds['pressure'].attrs)
+print("Expected: same as original\n")
+
+print("Test 5: Test with coordinates having attributes")
+da = xr.DataArray(
+    [0, 1, 2, 3, 4], 
+    dims="x",
+    coords={'x': xr.DataArray(range(5), dims='x', attrs={'units': 'meters'})},
+    attrs={'units': 'K'}
+)
+print("Original data attrs:", da.attrs)
+print("Original coord attrs:", da.coords['x'].attrs)
+out = da.quantile(0.5, dim='x', keep_attrs=True)
+print("After quantile:")
+print("  data attrs:", out.attrs)
+# Note: coordinate attributes behavior might be different
+print("Expected data attrs: OrderedDict([('units', 'K')])")
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index d6f0da42..015b99e8 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -4768,7 +4768,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
                             # the former is often more efficient
                             reduce_dims = None
                         variables[name] = var.quantile(
-                            q, dim=reduce_dims, interpolation=interpolation
+                            q, dim=reduce_dims, interpolation=interpolation, 
+                            keep_attrs=keep_attrs
                         )
 
             else:
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 2e9906ce..4937aa34 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -1592,7 +1592,7 @@ class Variable(
         """
         return self.broadcast_equals(other, equiv=duck_array_ops.array_notnull_equiv)
 
-    def quantile(self, q, dim=None, interpolation="linear"):
+    def quantile(self, q, dim=None, interpolation="linear", keep_attrs=None):
         """Compute the qth quantile of the data along the specified dimension.
 
         Returns the qth quantiles(s) of the array elements.
@@ -1615,6 +1615,10 @@ class Variable(
                 * higher: ``j``.
                 * nearest: ``i`` or ``j``, whichever is nearest.
                 * midpoint: ``(i + j) / 2``.
+        keep_attrs : bool, optional
+            If True, the variable's attributes (`attrs`) will be copied from
+            the original object to the new one.  If False (default), the new
+            object will be returned without attributes.
 
         Returns
         -------
@@ -1658,7 +1662,12 @@ class Variable(
         qs = np.nanpercentile(
             self.data, q * 100.0, axis=axis, interpolation=interpolation
         )
-        return Variable(new_dims, qs)
+        
+        if keep_attrs is None:
+            keep_attrs = _get_keep_attrs(default=False)
+        attrs = self._attrs if keep_attrs else None
+        
+        return Variable(new_dims, qs, attrs=attrs)
 
     def rank(self, dim, pct=False):
         """Ranks the data.
