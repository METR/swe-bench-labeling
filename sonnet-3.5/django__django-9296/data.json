{"instance_id": "django__django-9296", "score": "C", "diff": "diff --git a/django/core/paginator.py b/django/core/paginator.py\nindex 1f92da5d4f..cc1cd6fe3e 100644\n--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -34,6 +34,10 @@ class Paginator:\n         self.orphans = int(orphans)\n         self.allow_empty_first_page = allow_empty_first_page\n \n+    def __iter__(self):\n+        for page_num in self.page_range:\n+            yield self.page(page_num)\n+\n     def validate_number(self, number):\n         \"\"\"Validate the given 1-based page number.\"\"\"\n         try:\n", "gold_standard_diff": "diff --git a/django/core/paginator.py b/django/core/paginator.py\nindex 1f92da5d4fdc..ec0ebe04039c 100644\n--- a/django/core/paginator.py\n+++ b/django/core/paginator.py\n@@ -34,6 +34,10 @@ def __init__(self, object_list, per_page, orphans=0,\n         self.orphans = int(orphans)\n         self.allow_empty_first_page = allow_empty_first_page\n \n+    def __iter__(self):\n+        for page_number in self.page_range:\n+            yield self.page(page_number)\n+\n     def validate_number(self, number):\n         \"\"\"Validate the given 1-based page number.\"\"\"\n         try:\ndiff --git a/docs/ref/paginator.txt b/docs/ref/paginator.txt\nindex 9ee6f0104cfa..877d6ba0d88a 100644\n--- a/docs/ref/paginator.txt\n+++ b/docs/ref/paginator.txt\n@@ -14,6 +14,13 @@ classes live in :source:`django/core/paginator.py`.\n \n .. class:: Paginator(object_list, per_page, orphans=0, allow_empty_first_page=True)\n \n+    A paginator acts like a sequence of :class:`Page` when using ``len()`` or\n+    iterating it directly.\n+\n+    .. versionchanged:: 3.1\n+\n+        Support for iterating over ``Paginator`` was added.\n+\n .. attribute:: Paginator.object_list\n \n     Required. A list, tuple, ``QuerySet``, or other sliceable object with a\n@@ -98,8 +105,8 @@ Attributes\n ``Page`` class\n ==============\n \n-You usually won't construct ``Page`` objects by hand -- you'll get them using\n-:meth:`Paginator.page`.\n+You usually won't construct ``Page`` objects by hand -- you'll get them by\n+iterating :class:`Paginator`, or by using :meth:`Paginator.page`.\n \n .. class:: Page(object_list, number, paginator)\n \ndiff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt\nindex da954bab56d1..d2078469ee84 100644\n--- a/docs/releases/3.1.txt\n+++ b/docs/releases/3.1.txt\n@@ -162,6 +162,11 @@ Models\n \n * ...\n \n+Pagination\n+~~~~~~~~~~\n+\n+* Support for iterating over ``Paginator`` was added.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex ef6e355e8da4..f82d333ae764 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,13 @@ def test_get_page_empty_object_list_and_allow_empty_first_page_false(self):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n", "gold_standard_pr_link": "https://github.com/django/django/pull/9296"}