{"instance_id": "django__django-13089", "score": "C", "diff": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex 33c79c5a14..6ee1c83cd6 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,9 +267,11 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                fetched = cursor.fetchone()\n+                if fetched:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [fetched[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n", "gold_standard_diff": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex 33c79c5a1481..acbe70225556 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,9 +267,12 @@ def _cull(self, db, cursor, now):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                last_cache_key = cursor.fetchone()\n+                if last_cache_key:\n+                    cursor.execute(\n+                        'DELETE FROM %s WHERE cache_key < %%s' % table,\n+                        [last_cache_key[0]],\n+                    )\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\ndiff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex d404475e1605..dc4a22106030 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -621,6 +621,20 @@ def test_cull(self):\n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n \n+    def test_cull_delete_when_store_empty(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        # Force _cull to delete on first cached record.\n+        cull_cache._max_entries = -1\n+        try:\n+            cull_cache.set('force_cull_delete', 'value', 1000)\n+            self.assertIs(cull_cache.has_key('force_cull_delete'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n     def _perform_invalid_key_test(self, key, expected_warning):\n         \"\"\"\n         All the builtin backends should warn (except memcached that should\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13089"}