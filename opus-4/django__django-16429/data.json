{"instance_id": "django__django-16429", "score": "C", "diff": "diff --git a/django/utils/timesince.py b/django/utils/timesince.py\nindex 701c49bab9..f052116849 100644\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -97,6 +97,8 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             d.hour,\n             d.minute,\n             d.second,\n+            d.microsecond,\n+            d.tzinfo,\n         )\n     else:\n         pivot = d\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..b3a9be9c28\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,59 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        USE_TZ=True,\n+        INSTALLED_APPS=[],\n+        DATABASES={},\n+        SECRET_KEY='test-secret-key',\n+    )\n+\n+django.setup()\n+\n+import datetime\n+from django.utils import timezone\n+from django.utils.timesince import timesince\n+\n+def test_various_cases():\n+    print(\"Testing various cases with USE_TZ=True...\")\n+    \n+    # Test 1: 1 month ago\n+    now = timezone.now()\n+    d = now - datetime.timedelta(days=31)\n+    result = timesince(d)\n+    print(f\"1 month ago: {result}\")\n+    \n+    # Test 2: 2 months ago\n+    d = now - datetime.timedelta(days=62)\n+    result = timesince(d)\n+    print(f\"2 months ago: {result}\")\n+    \n+    # Test 3: 1 year ago\n+    d = now - datetime.timedelta(days=366)\n+    result = timesince(d)\n+    print(f\"1 year ago: {result}\")\n+    \n+    # Test 4: 1 year and 1 month ago\n+    d = now - datetime.timedelta(days=397)\n+    result = timesince(d)\n+    print(f\"1 year 1 month ago: {result}\")\n+    \n+    # Test 5: Test with naive datetime (should still work)\n+    now_naive = datetime.datetime.now()\n+    d_naive = now_naive - datetime.timedelta(days=31)\n+    result = timesince(d_naive, now_naive)\n+    print(f\"1 month ago (naive): {result}\")\n+    \n+    # Test 6: Test mixed aware/naive (d is naive, now is not provided)\n+    # This should use a naive now since d is naive\n+    d_naive = datetime.datetime.now() - datetime.timedelta(days=31)\n+    result = timesince(d_naive)\n+    print(f\"1 month ago (d naive, now auto): {result}\")\n+    \n+    print(\"\\nAll tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_various_cases()\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..70b0e33904\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,54 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        USE_TZ=True,\n+        INSTALLED_APPS=[],\n+        DATABASES={},\n+        SECRET_KEY='test-secret-key',\n+    )\n+\n+django.setup()\n+\n+import datetime\n+from django.utils import timezone\n+from django.utils.timesince import timesince\n+\n+def test_edge_cases():\n+    print(\"Testing edge cases...\")\n+    \n+    # Test with different timezones\n+    eastern = timezone.get_fixed_timezone(-300)  # UTC-5\n+    pacific = timezone.get_fixed_timezone(-480)  # UTC-8\n+    \n+    now_eastern = timezone.now().astimezone(eastern)\n+    d_eastern = now_eastern - datetime.timedelta(days=31)\n+    \n+    # Test same timezone\n+    result = timesince(d_eastern, now_eastern)\n+    print(f\"Same timezone (Eastern): {result}\")\n+    \n+    # Test cross-timezone\n+    now_pacific = timezone.now().astimezone(pacific)\n+    result = timesince(d_eastern, now_pacific)\n+    print(f\"Cross timezone (d=Eastern, now=Pacific): {result}\")\n+    \n+    # Test with years + months\n+    d = timezone.now() - datetime.timedelta(days=400)\n+    result = timesince(d)\n+    print(f\"~400 days ago: {result}\")\n+    \n+    # Test with microseconds to ensure they're preserved\n+    now = timezone.now()\n+    d = now.replace(microsecond=123456) - datetime.timedelta(days=31)\n+    result = timesince(d, now)\n+    print(f\"With microseconds: {result}\")\n+    print(f\"d microseconds: {d.microsecond}, now microseconds: {now.microsecond}\")\n+    \n+    print(\"\\nAll edge case tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_edge_cases()\ndiff --git a/test_timesince_issue.py b/test_timesince_issue.py\nnew file mode 100644\nindex 0000000000..3b2f30f250\n--- /dev/null\n+++ b/test_timesince_issue.py\n@@ -0,0 +1,35 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        USE_TZ=True,\n+        INSTALLED_APPS=[],\n+        DATABASES={},\n+        SECRET_KEY='test-secret-key',\n+    )\n+\n+django.setup()\n+\n+import datetime\n+from django.utils import timezone\n+from django.utils.timesince import timesince\n+\n+# Test the issue\n+def test_long_interval_with_tz():\n+    now = timezone.now()\n+    d = now - datetime.timedelta(days=31)\n+    try:\n+        result = timesince(d)\n+        print(f\"Success! Result: {result}\")\n+    except TypeError as e:\n+        print(f\"Error occurred: {e}\")\n+        print(f\"now type: {type(now)}, tzinfo: {now.tzinfo}\")\n+        print(f\"d type: {type(d)}, tzinfo: {d.tzinfo}\")\n+        import traceback\n+        traceback.print_exc()\n+\n+if __name__ == \"__main__\":\n+    test_long_interval_with_tz()\ndiff --git a/test_timeuntil.py b/test_timeuntil.py\nnew file mode 100644\nindex 0000000000..e657800d0e\n--- /dev/null\n+++ b/test_timeuntil.py\n@@ -0,0 +1,37 @@\n+import os\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        USE_TZ=True,\n+        INSTALLED_APPS=[],\n+        DATABASES={},\n+        SECRET_KEY='test-secret-key',\n+    )\n+\n+django.setup()\n+\n+import datetime\n+from django.utils import timezone\n+from django.utils.timesince import timesince, timeuntil\n+\n+def test_timeuntil():\n+    print(\"Testing timeuntil with timezone-aware datetimes...\")\n+    \n+    # Test future date\n+    now = timezone.now()\n+    future = now + datetime.timedelta(days=31)\n+    result = timeuntil(future)\n+    print(f\"1 month in future: {result}\")\n+    \n+    # Test with years + months\n+    future = now + datetime.timedelta(days=400)\n+    result = timeuntil(future)\n+    print(f\"~400 days in future: {result}\")\n+    \n+    print(\"\\nAll timeuntil tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_timeuntil()\ndiff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex bf05f32f5e..834b6b159c 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -236,6 +236,25 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n+    @requires_tz_support\n+    def test_long_interval_with_tz(self):\n+        \"\"\"Test timesince with USE_TZ=True and >1 month interval.\"\"\"\n+        from django.test import override_settings\n+        with override_settings(USE_TZ=True):\n+            now = timezone.now()\n+            d = now - datetime.timedelta(days=31)\n+            self.assertEqual(timesince(d), \"1\\xa0month\")\n+            \n+            # Test multiple months\n+            d = now - datetime.timedelta(days=62)\n+            self.assertEqual(timesince(d), \"2\\xa0months\")\n+            \n+            # Test with years\n+            d = now - datetime.timedelta(days=400)\n+            result = timesince(d)\n+            # Should be something like \"1 year, 1 month\"\n+            self.assertTrue(result.startswith(\"1\\xa0year\"))\n+\n     def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n", "gold_standard_diff": "From 871bcb64c008a6939e09ed9ab79873dc1bdae209 Mon Sep 17 00:00:00 2001\nFrom: Sage Abdullah <me@laymonage.com>\nDate: Thu, 5 Jan 2023 11:51:28 +0000\nSubject: [PATCH] Fixed timesince() crash with timezone-aware dates and\n interval longer than 1 month.\n\n---\n django/utils/timesince.py           |  1 +\n tests/utils_tests/test_timesince.py | 12 ++++++++++--\n 2 files changed, 11 insertions(+), 2 deletions(-)\n\ndiff --git a/django/utils/timesince.py b/django/utils/timesince.py\nindex 701c49bab942..f582d0e4f24a 100644\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -97,6 +97,7 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             d.hour,\n             d.minute,\n             d.second,\n+            tzinfo=d.tzinfo,\n         )\n     else:\n         pivot = d\ndiff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex bf05f32f5eea..242e582f9ef7 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,7 +1,7 @@\n import datetime\n \n from django.test import TestCase\n-from django.test.utils import requires_tz_support\n+from django.test.utils import override_settings, requires_tz_support\n from django.utils import timezone, translation\n from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n@@ -171,7 +171,7 @@ def utcoffset(self, dt):\n         self.assertEqual(timeuntil(past), \"0\\xa0minutes\")\n \n     def test_thousand_years_ago(self):\n-        t = datetime.datetime(1007, 8, 14, 13, 46, 0)\n+        t = self.t.replace(year=self.t.year - 1000)\n         self.assertEqual(timesince(t, self.t), \"1000\\xa0years\")\n         self.assertEqual(timeuntil(self.t, t), \"1000\\xa0years\")\n \n@@ -240,3 +240,11 @@ def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n+\n+\n+@requires_tz_support\n+@override_settings(USE_TZ=True)\n+class TZAwareTimesinceTests(TimesinceTests):\n+    def setUp(self):\n+        super().setUp()\n+        self.t = timezone.make_aware(self.t, timezone.get_default_timezone())\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16429"}