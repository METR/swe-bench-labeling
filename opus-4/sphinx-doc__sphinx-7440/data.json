{"instance_id": "sphinx-doc__sphinx-7440", "score": "C", "diff": "diff --git a/setup.py b/setup.py\nindex a427d5493..978e3d8e0 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex d820cfe5c..0784fc470 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -305,7 +305,7 @@ def make_glossary_term(env: \"BuildEnvironment\", textnodes: Iterable[Node], index\n         term['ids'].append(node_id)\n \n     std = cast(StandardDomain, env.get_domain('std'))\n-    std.note_object('term', termtext.lower(), node_id, location=term)\n+    std.note_object('term', termtext, node_id, location=term)\n \n     # add an index entry too\n     indexnode = addnodes.index()\n@@ -931,6 +931,15 @@ class StandardDomain(Domain):\n             if (objtype, target) in self.objects:\n                 docname, labelid = self.objects[objtype, target]\n                 break\n+            elif objtype == 'term':\n+                # For terms, perform case-insensitive lookup\n+                for (obj_type, obj_name), (doc, label) in self.objects.items():\n+                    if obj_type == 'term' and obj_name.lower() == target.lower():\n+                        docname, labelid = doc, label\n+                        break\n+                else:\n+                    continue\n+                break\n         else:\n             docname, labelid = '', ''\n         if not docname:\n@@ -953,8 +962,15 @@ class StandardDomain(Domain):\n         for objtype in self.object_types:\n             key = (objtype, target)\n             if objtype == 'term':\n-                key = (objtype, ltarget)\n-            if key in self.objects:\n+                # For terms, perform case-insensitive lookup\n+                for (obj_type, obj_name), (doc, label) in self.objects.items():\n+                    if obj_type == 'term' and obj_name.lower() == ltarget:\n+                        docname, labelid = doc, label\n+                        results.append(('std:' + self.role_for_objtype(objtype),\n+                                        make_refnode(builder, fromdocname, docname,\n+                                                     labelid, contnode)))\n+                        break\n+            elif key in self.objects:\n                 docname, labelid = self.objects[key]\n                 results.append(('std:' + self.role_for_objtype(objtype),\n                                 make_refnode(builder, fromdocname, docname,\ndiff --git a/test_case_sensitive_glossary.py b/test_case_sensitive_glossary.py\nnew file mode 100644\nindex 000000000..8b9b8b211\n--- /dev/null\n+++ b/test_case_sensitive_glossary.py\n@@ -0,0 +1,49 @@\n+\"\"\"Test case-sensitive glossary terms\"\"\"\n+\n+import pytest\n+from docutils import nodes\n+from sphinx.testing import restructuredtext\n+\n+\n+def test_glossary_case_sensitive_terms(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"      A database management system\\n\"\n+            \"\\n\" \n+            \"   mysql\\n\"\n+            \"      The command-line client for MySQL\\n\")\n+    \n+    # This should not produce a duplicate term warning\n+    with app._warning.suppress_logging():\n+        doctree = restructuredtext.parse(app, text)\n+    \n+    # Check that both terms are in the glossary\n+    terms = []\n+    for node in doctree.traverse(nodes.term):\n+        terms.append(node.astext())\n+    \n+    assert \"MySQL\" in terms\n+    assert \"mysql\" in terms\n+    assert len(terms) == 2\n+\n+\n+def test_glossary_case_insensitive_reference(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"      A database management system\\n\"\n+            \"\\n\"\n+            \"Now reference with different case: :term:`mysql`\\n\")\n+    \n+    with app._warning.suppress_logging():\n+        doctree = restructuredtext.parse(app, text)\n+    \n+    # The reference should still work (case-insensitive)\n+    refs = list(doctree.traverse(nodes.reference))\n+    assert len(refs) > 0\n+    \n+\n+if __name__ == \"__main__\":\n+    import sys\n+    sys.exit(pytest.main([__file__, \"-v\"]))\ndiff --git a/test_glossary_case.py b/test_glossary_case.py\nnew file mode 100644\nindex 000000000..23a4017ad\n--- /dev/null\n+++ b/test_glossary_case.py\n@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\"\"\"Test case for glossary duplicate term with different case\"\"\"\n+\n+import tempfile\n+import os\n+import sys\n+import subprocess\n+\n+def test_glossary_case_sensitivity():\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        srcdir = os.path.join(tmpdir, 'source')\n+        os.makedirs(srcdir)\n+        \n+        # Create conf.py\n+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'Test'\\nextensions = []\\n\")\n+        \n+        # Create index.rst with glossary containing MySQL and mysql\n+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"Test Glossary\n+=============\n+\n+.. glossary::\n+\n+   MySQL\n+      A database management system\n+\n+   mysql\n+      The command-line client for MySQL\n+\"\"\")\n+        \n+        # Try to build\n+        outdir = os.path.join(tmpdir, 'build')\n+        \n+        # Run sphinx-build\n+        result = subprocess.run([sys.executable, '-m', 'sphinx', '-b', 'html', srcdir, outdir],\n+                              capture_output=True, text=True)\n+        \n+        print(\"STDOUT:\")\n+        print(result.stdout)\n+        print(\"\\nSTDERR:\")\n+        print(result.stderr)\n+        \n+        if \"duplicate term description\" in result.stderr or \"duplicate term description\" in result.stdout:\n+            print(\"\\nConfirmed: Different case terms are treated as duplicates\")\n+        else:\n+            print(\"\\nNo duplicate term error detected\")\n+\n+if __name__ == \"__main__\":\n+    test_glossary_case_sensitivity()\ndiff --git a/test_glossary_comprehensive.py b/test_glossary_comprehensive.py\nnew file mode 100644\nindex 000000000..1859af241\n--- /dev/null\n+++ b/test_glossary_comprehensive.py\n@@ -0,0 +1,97 @@\n+#!/usr/bin/env python\n+\"\"\"Comprehensive test for glossary case sensitivity fix\"\"\"\n+\n+import tempfile\n+import os\n+import sys\n+import subprocess\n+\n+def test_glossary_comprehensive():\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        srcdir = os.path.join(tmpdir, 'source')\n+        os.makedirs(srcdir)\n+        \n+        # Create conf.py\n+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'Test'\\nextensions = []\\n\")\n+        \n+        # Create index.rst with glossary containing terms with different cases\n+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"Test Glossary\n+=============\n+\n+.. glossary::\n+\n+   MySQL\n+      A database management system\n+\n+   mysql\n+      The command-line client for MySQL\n+      \n+   API\n+      Application Programming Interface\n+      \n+   api\n+      A specific implementation of an API\n+\n+Now let's reference these terms:\n+\n+- :term:`MySQL` - should link to MySQL (uppercase)\n+- :term:`mysql` - should link to mysql (lowercase) \n+- :term:`MYSQL` - should link to MySQL (case-insensitive)\n+- :term:`Mysql` - should link to either MySQL or mysql (case-insensitive)\n+- :term:`API` - should link to API\n+- :term:`api` - should link to api\n+- :term:`Api` - should link to either API or api (case-insensitive)\n+\"\"\")\n+        \n+        # Try to build\n+        outdir = os.path.join(tmpdir, 'build')\n+        \n+        # Run sphinx-build\n+        result = subprocess.run([sys.executable, '-m', 'sphinx', '-b', 'html', srcdir, outdir],\n+                              capture_output=True, text=True)\n+        \n+        print(\"=== BUILD OUTPUT ===\")\n+        print(\"STDOUT:\")\n+        print(result.stdout)\n+        print(\"\\nSTDERR:\")\n+        print(result.stderr)\n+        print(\"\\n=== ANALYSIS ===\")\n+        \n+        if \"duplicate term description\" in result.stderr or \"duplicate term description\" in result.stdout:\n+            print(\"ERROR: Duplicate term warning detected!\")\n+            return False\n+        \n+        if result.returncode != 0:\n+            print(\"ERROR: Build failed with return code:\", result.returncode)\n+            return False\n+            \n+        # Check the generated HTML to verify links are working\n+        index_html = os.path.join(outdir, 'index.html')\n+        if os.path.exists(index_html):\n+            with open(index_html, 'r') as f:\n+                html_content = f.read()\n+                \n+            # Count term references in the HTML\n+            mysql_refs = html_content.count('href=\"#term-MySQL\"') + html_content.count('href=\"#term-mysql\"')\n+            api_refs = html_content.count('href=\"#term-API\"') + html_content.count('href=\"#term-api\"')\n+            \n+            print(f\"Found {mysql_refs} references to MySQL/mysql terms\")\n+            print(f\"Found {api_refs} references to API/api terms\")\n+            \n+            if mysql_refs > 0 and api_refs > 0:\n+                print(\"\\nSUCCESS: All tests passed!\")\n+                print(\"- Different case terms can coexist in glossary\")\n+                print(\"- Case-insensitive term references are working\")\n+                return True\n+            else:\n+                print(\"\\nERROR: Term references not found in HTML\")\n+                return False\n+        else:\n+            print(\"\\nERROR: index.html not generated\")\n+            return False\n+\n+if __name__ == \"__main__\":\n+    success = test_glossary_comprehensive()\n+    sys.exit(0 if success else 1)\ndiff --git a/test_phpmyadmin_case.py b/test_phpmyadmin_case.py\nnew file mode 100644\nindex 000000000..f3d8d0d5a\n--- /dev/null\n+++ b/test_phpmyadmin_case.py\n@@ -0,0 +1,92 @@\n+#!/usr/bin/env python\n+\"\"\"Test the specific phpMyAdmin case from the issue\"\"\"\n+\n+import tempfile\n+import os\n+import sys\n+import subprocess\n+\n+def test_phpmyadmin_glossary_case():\n+    with tempfile.TemporaryDirectory() as tmpdir:\n+        srcdir = os.path.join(tmpdir, 'source')\n+        os.makedirs(srcdir)\n+        \n+        # Create conf.py\n+        with open(os.path.join(srcdir, 'conf.py'), 'w') as f:\n+            f.write(\"project = 'phpMyAdmin'\\nextensions = []\\n\")\n+        \n+        # Create glossary.rst mimicking the phpMyAdmin case\n+        with open(os.path.join(srcdir, 'glossary.rst'), 'w') as f:\n+            f.write(\"\"\"Glossary\n+========\n+\n+.. glossary::\n+    :sorted:\n+\n+    .htaccess\n+        Directory-level configuration file supported by Apache and compatible web servers.\n+\n+    Apache\n+        The Apache HTTP Server is a free and open-source cross-platform web server software.\n+\n+    BLOB\n+        Binary large object, a collection of binary data stored as a single entity in a database.\n+\n+    Cookie\n+        A small piece of data stored on the user's computer by the web browser.\n+\n+    MySQL\n+        The world's most popular open source database.\n+        \n+    mysql\n+        MySQL client command line tool.\n+\n+    SSL\n+        Secure Sockets Layer is a standard security technology for establishing an encrypted connection.\n+\"\"\")\n+        \n+        # Create index.rst\n+        with open(os.path.join(srcdir, 'index.rst'), 'w') as f:\n+            f.write(\"\"\"phpMyAdmin Documentation\n+========================\n+\n+.. toctree::\n+   :maxdepth: 2\n+   \n+   glossary\n+\n+Terms:\n+\n+- :term:`MySQL` is the database\n+- :term:`mysql` is the command line tool\n+- You can use :term:`MYSQL` (case insensitive)\n+\"\"\")\n+        \n+        # Try to build with -W flag to turn warnings into errors\n+        outdir = os.path.join(tmpdir, 'build')\n+        \n+        # Run sphinx-build\n+        result = subprocess.run([sys.executable, '-m', 'sphinx', '-W', '-b', 'html', srcdir, outdir],\n+                              capture_output=True, text=True)\n+        \n+        print(\"=== BUILD OUTPUT ===\")\n+        print(\"Return code:\", result.returncode)\n+        print(\"\\nSTDOUT:\")\n+        print(result.stdout)\n+        print(\"\\nSTDERR:\")  \n+        print(result.stderr)\n+        \n+        if result.returncode == 0:\n+            print(\"\\n\u2713 SUCCESS: Build completed without errors!\")\n+            print(\"  - MySQL and mysql terms can coexist\")\n+            print(\"  - No 'duplicate term description' error\")\n+            return True\n+        else:\n+            print(\"\\n\u2717 FAILED: Build failed\")\n+            if \"duplicate term description\" in result.stderr:\n+                print(\"  - Still getting duplicate term error\")\n+            return False\n+\n+if __name__ == \"__main__\":\n+    success = test_phpmyadmin_glossary_case()\n+    sys.exit(0 if success else 1)\ndiff --git a/tox.ini b/tox.ini\nindex d9f040544..bf39854b6 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ extras =\n setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From a5dadeb890beca64bb9eabe86e6634c9dd3e1d50 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Wed, 8 Apr 2020 22:46:03 +0900\nSubject: [PATCH] Fix #7418: std domain: duplication warning for glossary terms\n is case insensitive\n\n---\n CHANGES                  | 3 +++\n doc/extdev/index.rst     | 2 +-\n sphinx/domains/std.py    | 4 ++--\n tests/test_domain_std.py | 8 ++++----\n 4 files changed, 10 insertions(+), 7 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 7d5f801863a..c9c962380b5 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -7,6 +7,8 @@ Dependencies\n Incompatible changes\n --------------------\n \n+* #7418: std domain: :rst:dir:`term` role becomes case sensitive\n+\n Deprecated\n ----------\n \n@@ -17,6 +19,7 @@ Bugs fixed\n ----------\n \n * #7428: py domain: a reference to class ``None`` emits a nitpicky warning\n+* #7418: std domain: duplication warning for glossary terms is case insensitive\n \n Testing\n --------\ndiff --git a/doc/extdev/index.rst b/doc/extdev/index.rst\nindex 8c909e31504..266da52b73a 100644\n--- a/doc/extdev/index.rst\n+++ b/doc/extdev/index.rst\n@@ -27,7 +27,7 @@ Discovery of builders by entry point\n \n .. versionadded:: 1.6\n \n-:term:`Builder` extensions can be discovered by means of `entry points`_ so\n+:term:`builder` extensions can be discovered by means of `entry points`_ so\n that they do not have to be listed in the :confval:`extensions` configuration\n value.\n \ndiff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex d820cfe5c5b..52546fb4c7b 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -305,7 +305,7 @@ def make_glossary_term(env: \"BuildEnvironment\", textnodes: Iterable[Node], index\n         term['ids'].append(node_id)\n \n     std = cast(StandardDomain, env.get_domain('std'))\n-    std.note_object('term', termtext.lower(), node_id, location=term)\n+    std.note_object('term', termtext, node_id, location=term)\n \n     # add an index entry too\n     indexnode = addnodes.index()\n@@ -565,7 +565,7 @@ class StandardDomain(Domain):\n         # links to tokens in grammar productions\n         'token':   TokenXRefRole(),\n         # links to terms in glossary\n-        'term':    XRefRole(lowercase=True, innernodeclass=nodes.inline,\n+        'term':    XRefRole(innernodeclass=nodes.inline,\n                             warn_dangling=True),\n         # links to headings or arbitrary labels\n         'ref':     XRefRole(lowercase=True, innernodeclass=nodes.inline,\ndiff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex aa1d29eb114..0032c18ef38 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -99,7 +99,7 @@ def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n             \"   term1\\n\"\n-            \"   term2\\n\"\n+            \"   TERM2\\n\"\n             \"       description\\n\"\n             \"\\n\"\n             \"   term3 : classifier\\n\"\n@@ -114,7 +114,7 @@ def test_glossary(app):\n     assert_node(doctree, (\n         [glossary, definition_list, ([definition_list_item, ([term, (\"term1\",\n                                                                      index)],\n-                                                             [term, (\"term2\",\n+                                                             [term, (\"TERM2\",\n                                                                      index)],\n                                                              definition)],\n                                      [definition_list_item, ([term, (\"term3\",\n@@ -127,7 +127,7 @@ def test_glossary(app):\n     assert_node(doctree[0][0][0][0][1],\n                 entries=[(\"single\", \"term1\", \"term-term1\", \"main\", None)])\n     assert_node(doctree[0][0][0][1][1],\n-                entries=[(\"single\", \"term2\", \"term-term2\", \"main\", None)])\n+                entries=[(\"single\", \"TERM2\", \"term-TERM2\", \"main\", None)])\n     assert_node(doctree[0][0][0][2],\n                 [definition, nodes.paragraph, \"description\"])\n     assert_node(doctree[0][0][1][0][1],\n@@ -143,7 +143,7 @@ def test_glossary(app):\n     # index\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n-    assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n+    assert (\"TERM2\", \"TERM2\", \"term\", \"index\", \"term-TERM2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/7440"}