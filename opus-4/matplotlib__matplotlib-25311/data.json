{"instance_id": "matplotlib__matplotlib-25311", "score": "I", "diff": "diff --git a/test_draggable_pickle.py b/test_draggable_pickle.py\nnew file mode 100644\nindex 0000000000..94549bdf52\n--- /dev/null\n+++ b/test_draggable_pickle.py\n@@ -0,0 +1,64 @@\n+import matplotlib\n+matplotlib.use('Agg')  # Use non-interactive backend\n+import matplotlib.pyplot as plt\n+import pickle\n+import io\n+\n+# Test 1: Basic draggable legend\n+fig = plt.figure()\n+ax = fig.add_subplot(111)\n+\n+time=[0,1,2,3,4]\n+speed=[40,43,45,47,48]\n+\n+ax.plot(time,speed,label=\"speed\")\n+\n+leg=ax.legend()\n+leg.set_draggable(True)\n+\n+print(\"Test 1 - Draggable legend:\")\n+try:\n+    buffer = io.BytesIO()\n+    pickle.dump(fig, buffer)\n+    buffer.seek(0)\n+    fig2 = pickle.load(buffer)\n+    print(\"\u2713 Pickling successful!\")\n+    \n+    # Check if the legend is still draggable after unpickling\n+    leg2 = fig2.axes[0].get_legend()\n+    print(f\"  Legend draggable after unpickling: {leg2.get_draggable()}\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\n+\n+# Test 2: Test with draggable annotation\n+fig3 = plt.figure()\n+ax3 = fig3.add_subplot(111)\n+ax3.plot([1, 2, 3], [1, 2, 3])\n+ann = ax3.annotate(\"Test\", xy=(2, 2), xytext=(1, 1))\n+ann.draggable = True\n+\n+print(\"\\nTest 2 - Draggable annotation:\")\n+try:\n+    buffer = io.BytesIO()\n+    pickle.dump(fig3, buffer)\n+    buffer.seek(0)\n+    fig4 = pickle.load(buffer)\n+    print(\"\u2713 Pickling successful!\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\n+\n+# Test 3: Non-draggable legend should work\n+fig5 = plt.figure()\n+ax5 = fig5.add_subplot(111)\n+ax5.plot([1, 2, 3], [1, 2, 3], label=\"test\")\n+leg5 = ax5.legend()\n+\n+print(\"\\nTest 3 - Non-draggable legend:\")\n+try:\n+    buffer = io.BytesIO()\n+    pickle.dump(fig5, buffer)\n+    buffer.seek(0)\n+    fig6 = pickle.load(buffer)\n+    print(\"\u2713 Pickling successful!\")\n+except Exception as e:\n+    print(f\"\u2717 Error: {type(e).__name__}: {e}\")\ndiff --git a/test_issue_example.py b/test_issue_example.py\nnew file mode 100644\nindex 0000000000..56f77d487e\n--- /dev/null\n+++ b/test_issue_example.py\n@@ -0,0 +1,33 @@\n+import matplotlib\n+matplotlib.use('Agg')  # Use Agg backend for now\n+import matplotlib.pyplot as plt\n+import pickle\n+\n+fig = plt.figure()\n+ax = fig.add_subplot(111)\n+\n+time=[0,1,2,3,4]\n+speed=[40,43,45,47,48]\n+\n+ax.plot(time,speed,label=\"speed\")\n+\n+leg=ax.legend()\n+leg.set_draggable(True) #pickling works after removing this line \n+\n+try:\n+    result = pickle.dumps(fig)\n+    print(\"Pickling successful!\")\n+    \n+    # Test unpickling\n+    import io\n+    buffer = io.BytesIO(result)\n+    fig2 = pickle.load(buffer)\n+    print(\"Unpickling successful!\")\n+    \n+    # Check if legend is still draggable\n+    leg2 = fig2.axes[0].get_legend()\n+    print(f\"Legend draggable after unpickling: {leg2.get_draggable()}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/test_pickle_legend.py b/test_pickle_legend.py\nnew file mode 100644\nindex 0000000000..abdc505004\n--- /dev/null\n+++ b/test_pickle_legend.py\n@@ -0,0 +1,21 @@\n+import matplotlib\n+matplotlib.use('Agg')  # Use non-interactive backend\n+import matplotlib.pyplot as plt\n+import pickle\n+\n+fig = plt.figure()\n+ax = fig.add_subplot(111)\n+\n+time=[0,1,2,3,4]\n+speed=[40,43,45,47,48]\n+\n+ax.plot(time,speed,label=\"speed\")\n+\n+leg=ax.legend()\n+leg.set_draggable(True) #pickling works after removing this line \n+\n+try:\n+    pickle.dumps(fig)\n+    print(\"Pickling successful!\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n", "gold_standard_diff": "From dfaa99155274400e445d78324a9a00614a44f392 Mon Sep 17 00:00:00 2001\nFrom: Antony Lee <anntzer.lee@gmail.com>\nDate: Thu, 23 Feb 2023 22:03:23 +0100\nSubject: [PATCH] Make draggable legends picklable.\n\n---\n lib/matplotlib/offsetbox.py         |  4 +++-\n lib/matplotlib/tests/test_pickle.py | 12 +++++++++---\n 2 files changed, 12 insertions(+), 4 deletions(-)\n\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d94c..a46b9cd4319d 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1505,7 +1505,6 @@ def __init__(self, ref_artist, use_blit=False):\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self.canvas = self.ref_artist.figure.canvas\n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n@@ -1514,6 +1513,9 @@ def __init__(self, ref_artist, use_blit=False):\n                 'button_release_event', self.on_release),\n         ]\n \n+    # A property, not an attribute, to maintain picklability.\n+    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+\n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n             dx = evt.x - self.mouse_x\ndiff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex ec6bdcc2fe14..a31927d59634 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,6 +1,7 @@\n from io import BytesIO\n import ast\n import pickle\n+import pickletools\n \n import numpy as np\n import pytest\n@@ -88,6 +89,7 @@ def _generate_complete_test_figure(fig_ref):\n \n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n+    plt.legend(draggable=True)\n \n \n @mpl.style.context(\"default\")\n@@ -95,9 +97,13 @@ def _generate_complete_test_figure(fig_ref):\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n-    pkl = BytesIO()\n-    pickle.dump(fig_ref, pkl, pickle.HIGHEST_PROTOCOL)\n-    loaded = pickle.loads(pkl.getbuffer())\n+    pkl = pickle.dumps(fig_ref, pickle.HIGHEST_PROTOCOL)\n+    # FigureCanvasAgg is picklable and GUI canvases are generally not, but there should\n+    # be no reference to the canvas in the pickle stream in either case.  In order to\n+    # keep the test independent of GUI toolkits, run it with Agg and check that there's\n+    # no reference to FigureCanvasAgg in the pickle stream.\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    loaded = pickle.loads(pkl)\n     loaded.canvas.draw()\n \n     fig_test.set_size_inches(loaded.get_size_inches())\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/25311"}