diff --git a/AUTHORS b/AUTHORS
index ca2872f32..723f7f9ce 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -98,6 +98,7 @@ David Mohr
 David Paul RÃ¶thlisberger
 David Szotten
 David Vierra
+AI Assistant
 Daw-Ran Liou
 Debi Mishra
 Denis Kirisov
diff --git a/changelog/10626.bugfix.rst b/changelog/10626.bugfix.rst
new file mode 100644
index 000000000..76a74c72a
--- /dev/null
+++ b/changelog/10626.bugfix.rst
@@ -0,0 +1 @@
+Fixed an issue where pytest markers were not properly collected from all base classes in the Method Resolution Order (MRO) when inheriting from multiple classes.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 3db877506..d2950ec6b 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -1714,7 +1714,7 @@ class Function(PyobjMixin, nodes.Item):
         # Note: when FunctionDefinition is introduced, we should change ``originalname``
         # to a readonly property that returns FunctionDefinition.name.
 
-        self.own_markers.extend(get_unpacked_marks(self.obj))
+        self.own_markers.extend(self.collect_markers_from_mro())
         if callspec:
             self.callspec = callspec
             self.own_markers.extend(callspec.marks)
@@ -1737,6 +1737,18 @@ class Function(PyobjMixin, nodes.Item):
         self.fixturenames = fixtureinfo.names_closure
         self._initrequest()
 
+    def collect_markers_from_mro(self):
+        markers = []
+        if hasattr(self.obj, '__self__'):  # Check if it's a bound method
+            cls = self.obj.__self__.__class__
+        elif hasattr(self.obj, '__class__'):  # Check if it's a class
+            cls = self.obj.__class__
+        else:
+            return markers  # Return empty list if it's not a method or class
+        for base_cls in cls.__mro__:
+            markers.extend(get_unpacked_marks(base_cls))
+        return markers
+
     @classmethod
     def from_parent(cls, parent, **kw):  # todo: determine sound type limitations
         """The public constructor."""
