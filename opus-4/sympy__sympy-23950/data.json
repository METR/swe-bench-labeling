{"instance_id": "sympy__sympy-23950", "score": "C", "diff": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex b2d4268d12..ed052ea9bd 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,36 @@ def binary_symbols(self):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        \"\"\"\n+        Rewrite `Contains(x, S)` in terms of real sets.\n+\n+        If `x` is a symbol, this returns the set S itself, since \n+        Contains(x, S) is true for all x in S.\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy import Symbol, S, Contains\n+        >>> x = Symbol('x', real=True)\n+        >>> Contains(x, S.Reals).as_set()\n+        Reals\n+        >>> Contains(x, S.Integers).as_set()\n+        Integers\n+\n+        \"\"\"\n+        x, S = self.args\n+        if x.is_Symbol:\n+            return S\n+        else:\n+            # For non-symbols, follow the behavior of Boolean.as_set()\n+            free = self.free_symbols\n+            if len(free) == 1:\n+                # Single free symbol case\n+                sym = free.pop()\n+                from sympy.sets.conditionset import ConditionSet\n+                return ConditionSet(sym, self, S)\n+            else:\n+                # Multiple free symbols\n+                raise NotImplementedError(\"Sorry, as_set has not yet been\"\n+                                          \" implemented for multivariate\"\n+                                          \" expressions\")\ndiff --git a/test_contains.py b/test_contains.py\nnew file mode 100644\nindex 0000000000..742e8c09dd\n--- /dev/null\n+++ b/test_contains.py\n@@ -0,0 +1,54 @@\n+from sympy import *\n+\n+x = Symbol('x')\n+\n+# Test 1: Basic as_set() functionality\n+print(\"Test 1: Contains(x, Reals).as_set()\")\n+result = Contains(x, Reals).as_set()\n+print(f\"Result: {result}\")\n+print(f\"Type: {type(result)}\")\n+assert result == Reals\n+print(\"\u2713 Passed\\n\")\n+\n+# Test 2: as_relational functionality  \n+print(\"Test 2: Contains(x, Reals).as_set().as_relational(x)\")\n+result = Contains(x, Reals).as_set().as_relational(x)\n+print(f\"Result: {result}\")\n+assert result == And(-oo < x, x < oo)\n+print(\"\u2713 Passed\\n\")\n+\n+# Test 3: Piecewise with Contains\n+print(\"Test 3: Piecewise((6, Contains(x, Reals)), (7, True))\")\n+try:\n+    result = Piecewise((6, Contains(x, Reals)), (7, True))\n+    print(f\"Result: {result}\")\n+    print(\"\u2713 Passed - No AttributeError\\n\")\n+except AttributeError as e:\n+    print(f\"\u2717 Failed with AttributeError: {e}\\n\")\n+\n+# Test 4: Contains with different sets\n+print(\"Test 4: Contains with various sets\")\n+print(\"Contains(x, Integers).as_set():\", Contains(x, Integers).as_set())\n+print(\"Contains(x, Naturals).as_set():\", Contains(x, Naturals).as_set())\n+print(\"Contains(x, Interval(0, 1)).as_set():\", Contains(x, Interval(0, 1)).as_set())\n+print(\"\u2713 All return the respective sets\\n\")\n+\n+# Test 5: Non-symbol case\n+print(\"Test 5: Contains with non-symbol\")\n+try:\n+    y = Symbol('y')\n+    expr = x + y\n+    result = Contains(expr, Reals).as_set()\n+    print(f\"\u2717 Failed - Should have raised NotImplementedError\")\n+except NotImplementedError as e:\n+    print(f\"\u2713 Correctly raises NotImplementedError: {e}\")\n+    \n+# Test single variable expression\n+expr2 = x**2\n+result2 = Contains(expr2, Reals).as_set()\n+print(f\"Contains(x**2, Reals).as_set(): {result2}\")\n+from sympy.sets.conditionset import ConditionSet\n+assert isinstance(result2, ConditionSet)\n+print(\"\u2713 Returns ConditionSet for univariate non-symbol expressions\\n\")\n+\n+print(\"All tests passed!\")\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_issue_fix.py b/test_issue_fix.py\nnew file mode 100644\nindex 0000000000..b15531f4e2\n--- /dev/null\n+++ b/test_issue_fix.py\n@@ -0,0 +1,25 @@\n+from sympy import *\n+\n+x = Symbol('x')\n+\n+# Issue example 1: Contains.as_set() should not return Contains\n+print(\"Issue example 1:\")\n+result = Contains(x, Reals).as_set()\n+print(f\"Contains(x, Reals).as_set() = {result}\")\n+print(f\"Is result a Contains object? {isinstance(result, Contains)}\")\n+print(f\"Is result a Set object? {isinstance(result, Set)}\")\n+assert not isinstance(result, Contains), \"as_set() should not return Contains\"\n+assert isinstance(result, Set), \"as_set() should return a Set\"\n+print(\"\u2713 Fixed: as_set() returns a proper Set, not Contains\\n\")\n+\n+# Issue example 2: Piecewise with Contains should work\n+print(\"Issue example 2 (from PR #14965):\")\n+try:\n+    # This was failing with AttributeError: 'Contains' object has no attribute 'as_relational'\n+    pw = Piecewise((6, Contains(x, Reals)), (7, True))\n+    print(f\"Piecewise((6, Contains(x, Reals)), (7, True)) = {pw}\")\n+    print(\"\u2713 Fixed: No AttributeError raised\")\n+except AttributeError as e:\n+    print(f\"\u2717 Failed with AttributeError: {e}\")\n+\n+print(\"\\nThe issue has been successfully resolved!\")\n", "gold_standard_diff": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex b2d4268d1288..997a4d8e1685 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,4 @@ def binary_symbols(self):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        return self.args[1]\ndiff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 1973fed19c4e..cd56148d9d22 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -41,10 +41,9 @@ def test_binary_symbols():\n def test_as_set():\n     x = Symbol('x')\n     y = Symbol('y')\n-    # Contains is a BooleanFunction whose value depends on an arg's\n-    # containment in a Set -- rewriting as a Set is not yet implemented\n-    raises(NotImplementedError, lambda:\n-           Contains(x, FiniteSet(y)).as_set())\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/23950"}