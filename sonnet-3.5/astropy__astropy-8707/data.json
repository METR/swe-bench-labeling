{"instance_id": "astropy__astropy-8707", "score": "I", "diff": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d738..57eb501fc3 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -547,12 +547,25 @@ class Card(_Verify):\n     @classmethod\n     def fromstring(cls, image):\n         \"\"\"\n-        Construct a `Card` object from a (raw) string. It will pad the string\n+        Construct a `Card` object from a (raw) string or bytes. It will pad the string\n         if it is not the length of a card image (80 columns).  If the card\n         image is longer than 80 columns, assume it contains ``CONTINUE``\n         card(s).\n+\n+        Parameters\n+        ----------\n+        image : str or bytes\n+            A string or bytes containing the card image.\n+\n+        Returns\n+        -------\n+        card : Card\n+            A new `Card` instance.\n         \"\"\"\n \n+        if isinstance(image, bytes):\n+            image = image.decode('ascii')\n+\n         card = cls()\n         card._image = _pad(image)\n         card._verified = False\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex ad07e6d52d..28725e3d59 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -329,15 +329,15 @@ class Header:\n     @classmethod\n     def fromstring(cls, data, sep=''):\n         \"\"\"\n-        Creates an HDU header from a byte string containing the entire header\n+        Creates an HDU header from a byte string or unicode string containing the entire header\n         data.\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes containing the entire header.\n \n-        sep : str, optional\n+        sep : str or bytes, optional\n             The string separating cards from each other, such as a newline.  By\n             default there is no card separator (as is the case in a raw FITS\n             file).\n@@ -348,6 +348,11 @@ class Header:\n             A new `Header` instance.\n         \"\"\"\n \n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n+        if isinstance(sep, bytes):\n+            sep = sep.decode('ascii')\n+\n         cards = []\n \n         # If the card separator contains characters that may validly appear in\n", "gold_standard_diff": "From 344939fd2e785c023689032289d49d36d9ef4a0d Mon Sep 17 00:00:00 2001\nFrom: \"Erik M. Bray\" <erik.bray@lri.fr>\nDate: Wed, 15 May 2019 14:45:31 +0200\nSubject: [PATCH 1/7] Allow Card.fromstring to work on bytes\n\n---\n astropy/io/fits/card.py              | 7 +++++++\n astropy/io/fits/tests/test_header.py | 9 +++++++++\n 2 files changed, 16 insertions(+)\n\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d73838..312f47b20848 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -554,6 +554,13 @@ def fromstring(cls, image):\n         \"\"\"\n \n         card = cls()\n+        if isinstance(image, bytes):\n+            # FITS supports only ASCII, but decode as latin1 and just take all\n+            # bytes for now; if it results in mojibake due to e.g. UTF-8\n+            # encoded data in a FITS header that's OK because it shouldn't be\n+            # there in the first place\n+            image = image.decode('latin1')\n+\n         card._image = _pad(image)\n         card._verified = False\n         return card\ndiff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 7c1725aedbca..51b63d0edcef 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -85,6 +85,15 @@ def test_card_constructor_default_args(self):\n         c = fits.Card()\n         assert '' == c.keyword\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n     def test_string_value_card(self):\n         \"\"\"Test Card constructor with string value\"\"\"\n \n\nFrom 370f6c4fc223785d67b15098a514127f490ed587 Mon Sep 17 00:00:00 2001\nFrom: \"Erik M. Bray\" <erik.bray@lri.fr>\nDate: Wed, 15 May 2019 15:17:47 +0200\nSubject: [PATCH 2/7] Add support for Header.fromstring to work on bytes\n\nThis is a bit of a workaround.  Longer-term, given time, it would make more\nsense to redo all the header/card parsing to work intrinsically on *bytes*.\n\nThat would be a much bigger, more disruptive change.\n---\n astropy/io/fits/header.py            | 26 +++++++++++++++++++++-----\n astropy/io/fits/tests/test_header.py | 15 +++++++++++++++\n 2 files changed, 36 insertions(+), 5 deletions(-)\n\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex ad07e6d52d39..d9608e2e0b37 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -350,6 +350,9 @@ def fromstring(cls, data, sep=''):\n \n         cards = []\n \n+        if not isinstance(sep, str):\n+            sep = sep.decode('latin1')\n+\n         # If the card separator contains characters that may validly appear in\n         # a card, the only way to unambiguously distinguish between cards is to\n         # require that they be Card.length long.  However, if the separator\n@@ -357,6 +360,19 @@ def fromstring(cls, data, sep=''):\n         # immediately at the separator\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n \n+        if isinstance(data, bytes):\n+            CONTINUE = b'CONTINUE'\n+            END = b'END'\n+            end_card = END_CARD.encode('ascii')\n+            if not isinstance(sep, bytes):\n+                sep = sep.encode('latin1')\n+            join = lambda i: b''.join(i)\n+        else:\n+            CONTINUE = 'CONTINUE'\n+            END = 'END'\n+            end_card = END_CARD\n+            join = lambda i: ''.join(i)\n+\n         # Split the header into individual cards\n         idx = 0\n         image = []\n@@ -374,17 +390,17 @@ def fromstring(cls, data, sep=''):\n             idx = end_idx + len(sep)\n \n             if image:\n-                if next_image[:8] == 'CONTINUE':\n+                if next_image[:8] == CONTINUE:\n                     image.append(next_image)\n                     continue\n-                cards.append(Card.fromstring(''.join(image)))\n+                cards.append(Card.fromstring(join(image)))\n \n             if require_full_cardlength:\n-                if next_image == END_CARD:\n+                if next_image == end_card:\n                     image = []\n                     break\n             else:\n-                if next_image.split(sep)[0].rstrip() == 'END':\n+                if next_image.split(sep)[0].rstrip() == END:\n                     image = []\n                     break\n \n@@ -392,7 +408,7 @@ def fromstring(cls, data, sep=''):\n \n         # Add the last image that was found before the end, if any\n         if image:\n-            cards.append(Card.fromstring(''.join(image)))\n+            cards.append(Card.fromstring(join(image)))\n \n         return cls._fromcards(cards)\n \ndiff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 51b63d0edcef..15146bae029d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2338,6 +2338,21 @@ def test_newlines_in_commentary(self):\n             else:\n                 c.verify('exception')\n \n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n \n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n\nFrom d2ab907b63e6a8fea397b2832d6ff40061481048 Mon Sep 17 00:00:00 2001\nFrom: \"Erik M. Bray\" <erik.bray@lri.fr>\nDate: Thu, 16 May 2019 11:25:55 +0200\nSubject: [PATCH 3/7] Simplify so that the 'sep' argument is only ever accepted\n as a string.\n\nAdd some examples to the docstring.\n---\n astropy/io/fits/header.py | 44 ++++++++++++++++++++++++++++++++-------\n 1 file changed, 36 insertions(+), 8 deletions(-)\n\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex d9608e2e0b37..46a8959cbee0 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -334,13 +334,45 @@ def fromstring(cls, data, sep=''):\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes containing the entire header.  In the case of bytes\n+           they will be decoded using latin-1 (only plain ASCII characters are\n+           allowed in FITS headers but latin-1 allows us to retain any invalid\n+           bytes that might appear in malformatted FITS files).\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n             default there is no card separator (as is the case in a raw FITS\n-            file).\n+            file).  In general this is only used in cases where a header was\n+            printed as text (e.g. with newlines after each card) and you want\n+            to create a new `Header` from it by copy/pasting.\n+\n+        Examples\n+        --------\n+\n+        >>> from astropy.io.fits import Header\n+        >>> hdr = Header({'SIMPLE': True})\n+        >>> Header.fromstring(hdr.tostring()) == hdr\n+        True\n+\n+        If you want to create a `Header` from printed text it's not necessary\n+        to have the exact binary structure as it would appear in a FITS file,\n+        with the full 80 byte card length.  Rather, each \"card\" can end in a\n+        newline and does not have to be padded out to a full card length as\n+        long as it \"looks like\" a FITS header::\n+\n+        >>> hdr = Header.fromstring(\\\"\\\"\\\"\\\\\n+        ... SIMPLE  =                    T / conforms to FITS standard\n+        ... BITPIX  =                    8 / array data type\n+        ... NAXIS   =                    0 / number of array dimensions\n+        ... EXTEND  =                    T\n+        ... \\\"\\\"\\\", sep='\\\\n')\n+        >>> hdr['SIMPLE']\n+        True\n+        >>> hdr['BITPIX']\n+        8\n+        >>> len(hdr)\n+        4\n \n         Returns\n         -------\n@@ -350,9 +382,6 @@ def fromstring(cls, data, sep=''):\n \n         cards = []\n \n-        if not isinstance(sep, str):\n-            sep = sep.decode('latin1')\n-\n         # If the card separator contains characters that may validly appear in\n         # a card, the only way to unambiguously distinguish between cards is to\n         # require that they be Card.length long.  However, if the separator\n@@ -364,8 +393,7 @@ def fromstring(cls, data, sep=''):\n             CONTINUE = b'CONTINUE'\n             END = b'END'\n             end_card = END_CARD.encode('ascii')\n-            if not isinstance(sep, bytes):\n-                sep = sep.encode('latin1')\n+            sep = sep.encode('latin1')\n             join = lambda i: b''.join(i)\n         else:\n             CONTINUE = 'CONTINUE'\n\nFrom 8af2c6111f921df5c03e21479304ed9b41955d4d Mon Sep 17 00:00:00 2001\nFrom: \"Erik M. Bray\" <erik.bray@lri.fr>\nDate: Thu, 16 May 2019 12:00:17 +0200\nSubject: [PATCH 4/7] Add a bit more commentary on why we decode bytes as\n latin1\n\n---\n astropy/io/fits/header.py | 5 +++++\n 1 file changed, 5 insertions(+)\n\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex 46a8959cbee0..1b4b383a056d 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -390,6 +390,11 @@ def fromstring(cls, data, sep=''):\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n \n         if isinstance(data, bytes):\n+            # FITS supports only ASCII, but decode as latin1 and just take all\n+            # bytes for now; if it results in mojibake due to e.g. UTF-8\n+            # encoded data in a FITS header that's OK because it shouldn't be\n+            # there in the first place--accepting it here still gives us the\n+            # opportunity to display warnings later during validation\n             CONTINUE = b'CONTINUE'\n             END = b'END'\n             end_card = END_CARD.encode('ascii')\n\nFrom 185362687e6cbd5f7731dc989551b5734b1655b6 Mon Sep 17 00:00:00 2001\nFrom: \"Erik M. Bray\" <erik.bray@lri.fr>\nDate: Thu, 16 May 2019 12:02:10 +0200\nSubject: [PATCH 5/7] Add changelog entry for #8707\n\n---\n CHANGES.rst | 3 +++\n 1 file changed, 3 insertions(+)\n\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 3dc79416e8fb..7e3eca8099eb 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -401,6 +401,9 @@ astropy.io.fits\n    Previously setting a header card value to ``None`` resulted in an\n    empty string field rather than a FITS undefined value. [#8572]\n \n+- Allow ``Header.fromstring`` and ``Card.fromstring`` to accept ``bytes``.\n+  [#8707]\n+\n astropy.io.registry\n ^^^^^^^^^^^^^^^^^^^\n \n\nFrom 9e948aa917b85748e5fed57338a8417da9dd150c Mon Sep 17 00:00:00 2001\nFrom: \"Erik M. Bray\" <erik.bray@lri.fr>\nDate: Thu, 16 May 2019 12:04:42 +0200\nSubject: [PATCH 6/7] Minor review nitpick; this is more consistent with the\n surrounding logic\n\n---\n astropy/io/fits/header.py | 8 ++++----\n 1 file changed, 4 insertions(+), 4 deletions(-)\n\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex 1b4b383a056d..28ceb12ae5ea 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -399,12 +399,12 @@ def fromstring(cls, data, sep=''):\n             END = b'END'\n             end_card = END_CARD.encode('ascii')\n             sep = sep.encode('latin1')\n-            join = lambda i: b''.join(i)\n+            empty = b''\n         else:\n             CONTINUE = 'CONTINUE'\n             END = 'END'\n             end_card = END_CARD\n-            join = lambda i: ''.join(i)\n+            empty = ''\n \n         # Split the header into individual cards\n         idx = 0\n@@ -426,7 +426,7 @@ def fromstring(cls, data, sep=''):\n                 if next_image[:8] == CONTINUE:\n                     image.append(next_image)\n                     continue\n-                cards.append(Card.fromstring(join(image)))\n+                cards.append(Card.fromstring(empty.join(image)))\n \n             if require_full_cardlength:\n                 if next_image == end_card:\n@@ -441,7 +441,7 @@ def fromstring(cls, data, sep=''):\n \n         # Add the last image that was found before the end, if any\n         if image:\n-            cards.append(Card.fromstring(join(image)))\n+            cards.append(Card.fromstring(empty.join(image)))\n \n         return cls._fromcards(cards)\n \n\nFrom 91e060fd1bec68079a59cc65e153c1dd74cdf707 Mon Sep 17 00:00:00 2001\nFrom: \"Erik M. Bray\" <erik.bray@lri.fr>\nDate: Thu, 16 May 2019 16:02:57 +0200\nSubject: [PATCH 7/7] Don't skip the doctests in Header.fromfile\n\nDo fix a docbuild warning about inconsistent literal block quoting.\n---\n astropy/io/fits/header.py | 5 +++--\n 1 file changed, 3 insertions(+), 2 deletions(-)\n\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex 28ceb12ae5ea..29d7a4f5d328 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -34,7 +34,8 @@\n END_CARD = 'END' + ' ' * 77\n \n \n-__doctest_skip__ = ['Header', 'Header.*']\n+__doctest_skip__ = ['Header', 'Header.comments', 'Header.fromtextfile',\n+                    'Header.totextfile', 'Header.set', 'Header.update']\n \n \n class Header:\n@@ -359,7 +360,7 @@ def fromstring(cls, data, sep=''):\n         to have the exact binary structure as it would appear in a FITS file,\n         with the full 80 byte card length.  Rather, each \"card\" can end in a\n         newline and does not have to be padded out to a full card length as\n-        long as it \"looks like\" a FITS header::\n+        long as it \"looks like\" a FITS header:\n \n         >>> hdr = Header.fromstring(\\\"\\\"\\\"\\\\\n         ... SIMPLE  =                    T / conforms to FITS standard\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/8707"}