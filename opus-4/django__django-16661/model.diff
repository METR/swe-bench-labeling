diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5240b07cd6..79da3f8ab1 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -464,10 +464,15 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             # It is allowed to filter on values that would be found from local
             # model anyways. For example, if you filter on employee__department__id,
             # then the id value would be found already from employee__department_id.
-            if not prev_field or (
-                prev_field.is_relation
-                and field not in prev_field.path_infos[-1].target_fields
-            ):
+            # However, explicit OneToOneFields used as primary keys should not be skipped
+            # (they are different from auto-created parent links in concrete inheritance).
+            skip_field = False
+            if prev_field and prev_field.is_relation and field in prev_field.path_infos[-1].target_fields:
+                # Only skip if this is an auto-created parent link (concrete inheritance)
+                if field.one_to_one and field.primary_key and field.auto_created:
+                    skip_field = True
+            
+            if not skip_field:
                 relation_parts.append(part)
             if not getattr(field, "path_infos", None):
                 # This is not a relational field, so further parts
diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py
index c6b4a565c8..f77b00c219 100644
--- a/tests/modeladmin/tests.py
+++ b/tests/modeladmin/tests.py
@@ -154,6 +154,28 @@ class ModelAdminTests(TestCase):
             ma.lookup_allowed("employee__department__code", "test_value"), True
         )
 
+    @isolate_apps('modeladmin')
+    def test_lookup_allowed_foreign_primary(self):
+        class Country(models.Model):
+            name = models.CharField(max_length=256)
+
+        class Place(models.Model):
+            country = models.ForeignKey(Country, models.CASCADE)
+
+        class Restaurant(models.Model):
+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)
+
+        class Waiter(models.Model):
+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)
+
+        class WaiterAdmin(ModelAdmin):
+            list_filter = [
+                'restaurant__place__country',
+            ]
+
+        ma = WaiterAdmin(Waiter, self.site)
+        self.assertIs(ma.lookup_allowed('restaurant__place__country', 'test_value'), True)
+
     def test_field_arguments(self):
         # If fields is specified, fieldsets_add and fieldsets_change should
         # just stick the fields into a formsets structure and return it.
