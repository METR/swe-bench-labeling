{"instance_id": "matplotlib__matplotlib-23299", "score": "I", "diff": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..d2f12aafcc 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -630,11 +630,22 @@ class RcParams(MutableMapping, dict):\n             if key in _deprecated_map:\n                 version, alt_key, alt_val, inverse_alt = _deprecated_map[key]\n                 _api.warn_deprecated(\n-                    version, name=key, obj_type=\"rcparam\", alternative=alt_key)\n-                key = alt_key\n-                val = alt_val(val)\n-            elif key in _deprecated_remain_as_none and val is not None:\n+elif key == 'backend':\n+                if val is rcsetup._auto_backend_sentinel:\n+                    if 'backend' in self:\n+                        return\n+                # Store the current Gcf.figs state\n+                from matplotlib import _pylab_helpers\n+                current_figs = dict(_pylab_helpers.Gcf.figs)\n                 version, = _deprecated_remain_as_none[key]\n+                try:\n+                    cval = self.validate[key](val)\n+                except ValueError as ve:\n+                    raise ValueError(f\"Key {key}: {ve}\") from None\n+                dict.__setitem__(self, key, cval)\n+                # Restore the Gcf.figs state\n+                _pylab_helpers.Gcf.figs.update(current_figs)\n+                return\n                 _api.warn_deprecated(version, name=key, obj_type=\"rcparam\")\n             elif key in _deprecated_ignore_map:\n                 version, alt_key = _deprecated_ignore_map[key]\n", "gold_standard_diff": "diff --git a/doc/api/next_api_changes/behavior/23299-TAC.rst b/doc/api/next_api_changes/behavior/23299-TAC.rst\nnew file mode 100644\nindex 000000000000..745bd47d6c6b\n--- /dev/null\n+++ b/doc/api/next_api_changes/behavior/23299-TAC.rst\n@@ -0,0 +1,6 @@\n+mpl.rc_context no longer resets the value of ``'backend'``\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+`matplotlib.rc_context` incorrectly reset the value of :rc:`backend` if backend\n+resolution was triggered in the context. This affected only the value. The actual backend\n+was not changed. Now, `matplotlib.rc_context` does not reset  :rc:`backend` anymore.\ndiff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724c9..528be266ffac 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -1059,6 +1059,8 @@ def rc_context(rc=None, fname=None):\n     \"\"\"\n     Return a context manager for temporarily changing rcParams.\n \n+    The :rc:`backend` will not be reset by the context manager.\n+\n     Parameters\n     ----------\n     rc : dict\n@@ -1087,7 +1089,8 @@ def rc_context(rc=None, fname=None):\n              plt.plot(x, y)  # uses 'print.rc'\n \n     \"\"\"\n-    orig = rcParams.copy()\n+    orig = dict(rcParams.copy())\n+    del orig['backend']\n     try:\n         if fname:\n             rc_file(fname)\ndiff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 99856b344255..d5f316f54595 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -496,6 +496,13 @@ def test_keymaps():\n         assert isinstance(mpl.rcParams[k], list)\n \n \n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+\n def test_rcparams_reset_after_fail():\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/23299"}