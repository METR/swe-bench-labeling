{"instance_id": "django__django-15278", "score": "I", "diff": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 094c3e3cda..be7d47f723 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -1,5 +1,5 @@\n from django.db.migrations.utils import field_references\n-from django.db.models import NOT_PROVIDED\n+from django.db.models import NOT_PROVIDED, OneToOneField\n from django.utils.functional import cached_property\n \n from .base import Operation\n@@ -97,10 +97,30 @@ class AddField(FieldOperation):\n             field = to_model._meta.get_field(self.name)\n             if not self.preserve_default:\n                 field.default = self.field.default\n-            schema_editor.add_field(\n-                from_model,\n-                field,\n-            )\n+            \n+            # Check if we're adding a nullable OneToOneField on SQLite\n+            if (isinstance(field, OneToOneField) and\n+                field.null and\n+                schema_editor.connection.vendor == 'sqlite'):\n+                # Add the column without the UNIQUE constraint\n+                schema_editor.add_field(\n+                    from_model,\n+                    field,\n+                    unique=False,\n+                )\n+                # Add the UNIQUE constraint separately\n+                schema_editor.alter_field(\n+                    from_model,\n+                    field,\n+                    field,\n+                )\n+            else:\n+                # For other cases, use the original method\n+                schema_editor.add_field(\n+                    from_model,\n+                    field,\n+                )\n+            \n             if not self.preserve_default:\n                 field.default = NOT_PROVIDED\n \n", "gold_standard_diff": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6752a8e3c0b5..3ff0a3f7dbc1 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -324,10 +324,15 @@ def delete_model(self, model, handle_autom2m=True):\n \n     def add_field(self, model, field):\n         \"\"\"Create a field on a model.\"\"\"\n-        # Fields with default values cannot by handled by ALTER TABLE ADD\n-        # COLUMN statement because DROP DEFAULT is not supported in\n-        # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        if (\n+            # Primary keys and unique fields are not supported in ALTER TABLE\n+            # ADD COLUMN.\n+            field.primary_key or field.unique or\n+            # Fields with default values cannot by handled by ALTER TABLE ADD\n+            # COLUMN statement because DROP DEFAULT is not supported in\n+            # ALTER TABLE.\n+            not field.null or self.effective_default(field) is not None\n+        ):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex cd6a52f6af9e..60e69503cc6e 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,6 +624,18 @@ def get_prep_value(self, value):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n+\n     def test_add_field_binary(self):\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15278"}