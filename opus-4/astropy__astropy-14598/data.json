{"instance_id": "astropy__astropy-14598", "score": "I", "diff": "diff --git a/pyproject.toml b/pyproject.toml\nindex 243782fdfc..b2688da2a5 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\ndiff --git a/test_continue_flow.py b/test_continue_flow.py\nnew file mode 100644\nindex 0000000000..9f241d5d8a\n--- /dev/null\n+++ b/test_continue_flow.py\n@@ -0,0 +1,42 @@\n+from astropy.io import fits\n+\n+# Test a specific case where it fails\n+n = 65\n+value = \"x\" * n + \"''\"\n+print(f\"Original value: '{value}'\")\n+print(f\"Length: {len(value)}\")\n+\n+# Create a card\n+card1 = fits.Card('CONFIG', value)\n+print(f\"\\nCard1 image:\\n{repr(str(card1))}\")\n+\n+# The card is split into multiple lines\n+lines = []\n+for i in range(0, len(str(card1)), 80):\n+    lines.append(str(card1)[i:i+80])\n+    \n+print(\"\\nCard lines:\")\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: {repr(line)}\")\n+\n+# Now parse it back\n+card2 = fits.Card.fromstring(str(card1))\n+print(f\"\\nCard2 value: '{card2.value}'\")\n+print(f\"Values equal: {card1.value == card2.value}\")\n+\n+# Let's check what _parse_value would see\n+# The CONTINUE card has '''' which should parse to ''\n+print(\"\\n\\nManual parsing of CONTINUE line:\")\n+continue_line = lines[1]\n+value_part = continue_line[10:].strip()\n+print(f\"Value part of CONTINUE: {repr(value_part)}\")\n+\n+import re\n+_strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n+strg_re = re.compile(_strg)\n+match = strg_re.match(value_part)\n+if match:\n+    captured = match.group('strg')\n+    print(f\"Regex captured: {repr(captured)}\")\n+    value_after_sub = re.sub(\"''\", \"'\", captured)\n+    print(f\"After re.sub: {repr(value_after_sub)}\")\ndiff --git a/test_fits_format.py b/test_fits_format.py\nnew file mode 100644\nindex 0000000000..179b40c3d6\n--- /dev/null\n+++ b/test_fits_format.py\n@@ -0,0 +1,80 @@\n+# In FITS format:\n+# Python string -> FITS card representation\n+# \"hello\"      -> 'hello    '\n+# \"hello'\"     -> 'hello''  '  (single quote is escaped as '')\n+# \"hello''\"    -> 'hello'''' '  (two quotes are escaped as '''')\n+# \"\"           -> ''          \n+\n+# When parsing back:\n+# FITS 'hello    ' -> regex captures \"hello    \" -> strip -> \"hello\"\n+# FITS 'hello''  ' -> regex captures \"hello''  \" -> replace '' with ' -> \"hello'\"\n+# FITS 'hello'''''' -> regex captures \"hello''''\" -> replace '' with ' -> \"hello''\"\n+# FITS ''         -> regex captures \"\" -> \"\"\n+\n+# The issue seems to be with CONTINUE cards specifically\n+# Let's trace through what happens:\n+\n+# Original Python value: \"x\" * 65 + \"''\"\n+# This has 67 characters ending with two single quotes\n+\n+# When formatted to FITS:\n+# It needs to be 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''''\n+# That's 1 + 65 + 4 + 1 = 71 chars for the quoted value\n+# Plus \"CONFIG  = \" is 10 chars, total 81 chars\n+# So it needs CONTINUE\n+\n+# First card:  CONFIG  = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''&'\n+# Second card: CONTINUE  ''''\n+\n+# When parsing the CONTINUE card:\n+# The value part is ''''\n+# The regex matches '(.*)' and captures ''\n+# Then replace(\"''\", \"'\") converts it to '\n+# But this is wrong! The captured '' represents a single quote in FITS format\n+\n+print(\"Testing FITS string format understanding:\")\n+import re\n+\n+_strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n+strg_re = re.compile(_strg)\n+\n+# In _parse_value (line 771), it does:\n+# value = re.sub(\"''\", \"'\", m.group(\"strg\"))\n+# This is correct for converting FITS escaped quotes to Python\n+\n+# But in _split (line 862) for CONTINUE cards, it does:\n+# value = value.rstrip().replace(\"''\", \"'\")\n+# This is ALSO trying to convert FITS escaped quotes\n+\n+# The issue is that both are doing the conversion!\n+# When we have FITS string 'hello''''':\n+# - The regex captures \"hello''\"\n+# - _parse_value converts '' to ' giving \"hello'\"\n+# But for CONTINUE cards in _split:\n+# - The regex captures \"''\" from ''''\n+# - Then it ALSO does replace giving \"'\"\n+\n+# So the fix is: in _split, we should NOT do the replace because\n+# _parse_value will do it later when the full string is parsed\n+\n+test_cases = [\n+    # (FITS representation, expected Python value)\n+    (\"''\", \"\"),  # Empty string\n+    (\"''''\", \"'\"),  # Single quote\n+    (\"''''''\", \"''\"),  # Two quotes\n+    (\"'hello'''\", \"hello'\"),  # String ending with quote\n+    (\"'hello'''''\", \"hello''\"),  # String ending with two quotes\n+]\n+\n+for fits_str, expected in test_cases:\n+    m = strg_re.match(fits_str)\n+    if m:\n+        captured = m.group('strg')\n+        # This is what _parse_value does\n+        parsed = re.sub(\"''\", \"'\", captured)\n+        print(f\"FITS: {fits_str:12} -> captured: {repr(captured):8} -> parsed: {repr(parsed):8} (expected: {repr(expected)})\")\n+        \n+        # Now what _split does (wrongly)\n+        split_result = captured.rstrip().replace(\"''\", \"'\")\n+        if split_result != parsed:\n+            print(f\"  WARNING: _split gives different result: {repr(split_result)}\")\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..1c36059efc\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,54 @@\n+import re\n+\n+# Test the current behavior\n+_strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n+_comm_field = r\"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\\n)*))\"\n+_strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?\")\n+\n+# Test case: CONTINUE card with ''''\n+vc = \"''''\"\n+m = _strg_comment_RE.match(vc)\n+if m:\n+    value = m.group(\"strg\") or \"\"\n+    print(f\"Original extracted value: '{value}'\")\n+    \n+    # Current behavior - this is wrong!\n+    value_current = value.rstrip().replace(\"''\", \"'\")\n+    print(f\"Current behavior result: '{value_current}'\")\n+    \n+    # The issue is that the regex already handles escaped quotes\n+    # We should NOT do the replace on CONTINUE cards\n+    # For the main card, line 771 in _parse_value does: value = re.sub(\"''\", \"'\", m.group(\"strg\"))\n+    # This is correct because it's converting FITS escaped quotes to Python strings\n+    \n+    # But in _split for CONTINUE cards, we're double-processing\n+    # The regex extracts the content between quotes, which for '''' is ''\n+    # Then replace(\"''\", \"'\") incorrectly converts it to '\n+    \n+    # The fix should be to remove the replace() call on line 862\n+    value_fixed = value.rstrip()\n+    print(f\"Fixed behavior result: '{value_fixed}'\")\n+\n+print(\"\\n\\nTest with actual string:\")\n+# When we have a string like \"xxx''\" in Python\n+# It gets formatted in FITS as 'xxx''''\n+# When split to CONTINUE, the tail becomes ''''\n+# The regex correctly extracts '' from ''''\n+# But then replace(\"''\", \"'\") wrongly converts it to '\n+\n+test_values = [\n+    (\"''''\", \"Empty string escaped\"),\n+    (\"'test'''\", \"String with trailing escaped quote\"),\n+    (\"'test''test'\", \"String with escaped quote in middle\"),\n+]\n+\n+for test_val, desc in test_values:\n+    print(f\"\\n{desc}: {test_val}\")\n+    m = _strg_comment_RE.match(test_val)\n+    if m:\n+        value = m.group(\"strg\") or \"\"\n+        print(f\"  Regex extracted: '{value}'\")\n+        value_current = value.rstrip().replace(\"''\", \"'\")\n+        print(f\"  Current (buggy): '{value_current}'\")\n+        value_fixed = value.rstrip()\n+        print(f\"  Fixed: '{value_fixed}'\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..2a90fc7648\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,37 @@\n+from astropy.io import fits\n+\n+# Test 1: Original test case\n+print(\"Test 1: Double quotes at the end\")\n+for n in range(60, 70):\n+    card1 = fits.Card('CONFIG', \"x\" * n + \"''\")\n+    card2 = fits.Card.fromstring(str(card1))\n+    print(n, len(card1.value), card1.value == card2.value)\n+    if card1.value != card2.value:\n+        print(f\"  Card1 value: '{card1.value}'\")\n+        print(f\"  Card2 value: '{card2.value}'\")\n+        print(f\"  Card1 str: '{str(card1)}'\")\n+\n+print(\"\\nTest 2: Double quotes in the middle\")\n+for n in range(50, 70):\n+    card1 = fits.Card('CONFIG', \"x\" * n + \"''\" + \"x\"*10)\n+    card2 = fits.Card.fromstring(str(card1))\n+    print(n, len(card1.value), card1.value == card2.value)\n+    if card1.value != card2.value:\n+        print(f\"  Card1 value: '{card1.value}'\")\n+        print(f\"  Card2 value: '{card2.value}'\")\n+\n+print(\"\\nTest 3: Analyze just card formatting\")\n+for n in [65, 67, 68, 69]:\n+    card1 = fits.Card('CONFIG', \"x\" * n + \"''\")\n+    print(f\"\\nn={n}:\")\n+    print(f\"  Value: '{card1.value}'\")\n+    print(f\"  Card string: '{str(card1)}'\")\n+    print(f\"  Card length: {len(str(card1))}\")\n+    # Let's check what's happening with the trailing quote\n+    card_str = str(card1)\n+    if card_str.endswith(\"' \"):\n+        print(\"  Ends with single quote and space\")\n+    elif card_str.endswith(\"''\"):\n+        print(\"  Ends with double quotes\")\n+    elif card_str.rstrip().endswith(\"'\"):\n+        print(\"  Ends with single quote (after stripping)\")\ndiff --git a/test_regex.py b/test_regex.py\nnew file mode 100644\nindex 0000000000..b96f119c91\n--- /dev/null\n+++ b/test_regex.py\n@@ -0,0 +1,34 @@\n+import re\n+\n+# The regex from card.py\n+_strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n+\n+test_strings = [\n+    \"'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'''\",\n+    \"'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx''&'\",\n+    \"''''\"\n+]\n+\n+strg_re = re.compile(_strg)\n+\n+for test_str in test_strings:\n+    match = strg_re.match(test_str)\n+    if match:\n+        print(f\"Input: {test_str}\")\n+        print(f\"Matched strg: '{match.group('strg')}'\")\n+        # Apply the replacement from line 771\n+        value = re.sub(\"''\", \"'\", match.group('strg'))\n+        print(f\"After re.sub: '{value}'\")\n+        print()\n+    else:\n+        print(f\"No match for: {test_str}\")\n+        print()\n+\n+# Let's look at the actual CONTINUE card string\n+continue_str = \"''''\"\n+print(f\"\\nAnalyzing CONTINUE card value: {continue_str}\")\n+match = strg_re.match(continue_str)\n+if match:\n+    print(f\"Matched strg: '{match.group('strg')}'\")\n+    value = re.sub(\"''\", \"'\", match.group('strg'))\n+    print(f\"After re.sub: '{value}'\")\ndiff --git a/test_regex2.py b/test_regex2.py\nnew file mode 100644\nindex 0000000000..2d091a7947\n--- /dev/null\n+++ b/test_regex2.py\n@@ -0,0 +1,55 @@\n+import re\n+\n+# The regex from card.py\n+_strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n+\n+# Let's break down the regex pattern:\n+# \\' - Match a single quote at the start\n+# (?P<strg>(...)) - Named capture group 'strg'\n+#   [ -~]+? - One or more printable ASCII chars (non-greedy)\n+#   | - OR  \n+#   \\'\\' - Two single quotes\n+#   | - OR\n+#   (empty) - Nothing\n+#   *? - Zero or more spaces (non-greedy)\n+# \\' - Match a single quote at the end\n+# (?=$|/| ) - Lookahead: end of string, slash, or space\n+\n+# The issue is that the regex matches greedily and includes the double quotes\n+\n+# Let's test different patterns\n+test_cases = [\n+    (\"''''\", \"Empty string with escaped quotes\"),\n+    (\"'''&'\", \"Empty string with continuation &\"),\n+    (\"'test'''\", \"String ending with escaped quote\"),\n+    (\"'test''&'\", \"String ending with escaped quote and continuation\"),\n+]\n+\n+strg_re = re.compile(_strg)\n+\n+for test_str, desc in test_cases:\n+    print(f\"\\nTest: {test_str} ({desc})\")\n+    match = strg_re.match(test_str)\n+    if match:\n+        captured = match.group('strg')\n+        print(f\"  Captured: '{captured}'\")\n+        value = re.sub(\"''\", \"'\", captured)\n+        print(f\"  After re.sub: '{value}'\")\n+        \n+        # Show what the string looks like in the regex\n+        print(f\"  Full match: '{match.group(0)}'\")\n+        print(f\"  Start: {match.start()}, End: {match.end()}\")\n+    else:\n+        print(\"  No match!\")\n+\n+# Now let's see what happens when parsing a full CONTINUE card\n+print(\"\\n\\nFull CONTINUE card parsing:\")\n+continue_card = \"CONTINUE  ''''                                                                  \"\n+# Extract the value part (after position 10)\n+value_part = continue_card[10:].strip()\n+print(f\"Value part: '{value_part}'\")\n+match = strg_re.match(value_part)\n+if match:\n+    print(f\"Matched strg: '{match.group('strg')}'\")\n+    value = re.sub(\"''\", \"'\", match.group('strg'))\n+    print(f\"After re.sub: '{value}'\")\n", "gold_standard_diff": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 1b3285ddce92..89a5c0c0e86e 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -66,7 +66,7 @@ class Card(_Verify):\n     # followed by an optional comment\n     _strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n     _comm_field = r\"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\\n)*))\"\n-    _strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?\")\n+    _strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?$\")\n \n     # FSC commentary card string which must contain printable ASCII characters.\n     # Note: \\Z matches the end of the string without allowing newlines\n@@ -859,7 +859,7 @@ def _split(self):\n                     return kw, vc\n \n                 value = m.group(\"strg\") or \"\"\n-                value = value.rstrip().replace(\"''\", \"'\")\n+                value = value.rstrip()\n                 if value and value[-1] == \"&\":\n                     value = value[:-1]\n                 values.append(value)\ndiff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex c573100c91d2..44cfb955451b 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -582,6 +582,22 @@ def test_long_string_value_via_fromstring(self, capsys):\n                 \"CONTINUE  '' / comments in line 1 comments with ''.                             \"\n             )\n \n+    def test_long_string_value_with_quotes(self):\n+        testval = \"x\" * 100 + \"''\"\n+        c = fits.Card(\"TEST\", testval)\n+        c = fits.Card.fromstring(c.image)\n+        assert c.value == testval\n+\n+        testval = \"x\" * 100 + \"''xxx\"\n+        c = fits.Card(\"TEST\", testval)\n+        c = fits.Card.fromstring(c.image)\n+        assert c.value == testval\n+\n+        testval = \"x\" * 100 + \"'' xxx\"\n+        c = fits.Card(\"TEST\", testval)\n+        c = fits.Card.fromstring(c.image)\n+        assert c.value == testval\n+\n     def test_continue_card_with_equals_in_value(self):\n         \"\"\"\n         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/117\ndiff --git a/docs/changes/io.fits/14598.bugfix.rst b/docs/changes/io.fits/14598.bugfix.rst\nnew file mode 100644\nindex 000000000000..853c33561960\n--- /dev/null\n+++ b/docs/changes/io.fits/14598.bugfix.rst\n@@ -0,0 +1 @@\n+Fix issues with double quotes in CONTINUE cards.\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/14598"}