diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py
index f4b1722757..a3765ae0f1 100644
--- a/django/contrib/auth/backends.py
+++ b/django/contrib/auth/backends.py
@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):
     def authenticate(self, request, username=None, password=None, **kwargs):
         if username is None:
             username = kwargs.get(UserModel.USERNAME_FIELD)
+        if username is None or password is None:
+            return
         try:
             user = UserModel._default_manager.get_by_natural_key(username)
         except UserModel.DoesNotExist:
diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py
index 6447edefc9..35986bee8a 100644
--- a/tests/auth_tests/test_auth_backends.py
+++ b/tests/auth_tests/test_auth_backends.py
@@ -261,6 +261,28 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):
         )
         self.assertEqual(authenticate(username='test', password='test'), user)
 
+    def test_authenticate_with_none_credentials(self):
+        """
+        Authentication should not make a database query when username or password is None.
+        """
+        # First, make sure normal authentication works
+        self.assertEqual(authenticate(**self.user_credentials), self.user)
+        
+        # Test with None username - should not make any queries
+        with self.assertNumQueries(0):
+            result = authenticate(username=None, password='test')
+            self.assertIsNone(result)
+        
+        # Test with None password - should not make any queries
+        with self.assertNumQueries(0):
+            result = authenticate(username='test', password=None)
+            self.assertIsNone(result)
+        
+        # Test with both None - should not make any queries
+        with self.assertNumQueries(0):
+            result = authenticate(username=None, password=None)
+            self.assertIsNone(result)
+
 
 @override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')
 class ExtensionUserModelBackendTest(BaseModelBackendTest, TestCase):
@@ -777,3 +799,5 @@ class AllowAllUsersModelBackendTest(TestCase):
         request.session = self.client.session
         user = get_user(request)
         self.assertEqual(user, self.user)
+        self.assertEqual(user, self.user)
+
