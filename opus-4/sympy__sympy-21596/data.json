{"instance_id": "sympy__sympy-21596", "score": "I", "diff": "diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py\nindex c54dc8f72a..37bce49f5e 100644\n--- a/sympy/sets/handlers/intersection.py\n+++ b/sympy/sets/handlers/intersection.py\n@@ -306,9 +306,9 @@ def intersection_sets(self, other): # noqa:F811\n             # univarite imaginary part in same variable\n             x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])\n             if x and all(i == n for i in x):\n-                base_set -= FiniteSet(xis)\n+                base_set = base_set.intersect(FiniteSet(*xis))\n             else:\n-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)\n+                base_set = ConditionSet(n, Eq(im, 0), base_set)\n         # exclude values that make denominators 0\n         for i in denoms(f):\n             if i.has(n):\n@@ -316,9 +316,9 @@ def intersection_sets(self, other): # noqa:F811\n                 if sol != []:\n                     x, xis = sol\n                     if x and all(i == n for i in x):\n-                        base_set -= FiniteSet(xis)\n+                        base_set -= FiniteSet(*xis)\n                 else:\n-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)\n+                    base_set -= ConditionSet(n, Eq(i, 0), base_set)\n         return imageset(lam, base_set)\n \n     elif isinstance(other, Interval):\ndiff --git a/test_additional.py b/test_additional.py\nnew file mode 100644\nindex 0000000000..d4104cbe00\n--- /dev/null\n+++ b/test_additional.py\n@@ -0,0 +1,42 @@\n+from sympy import *\n+from sympy.abc import n, x\n+\n+print(\"Test 1: Original issue case\")\n+S1 = imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers)\n+print(\"S1:\", S1)\n+print(\"S1.intersect(Reals):\", S1.intersect(Reals))\n+print(\"2 in S1.intersect(Reals):\", 2 in S1.intersect(Reals))\n+print(\"-1 in S1.intersect(Reals):\", -1 in S1.intersect(Reals))\n+print(\"1 in S1.intersect(Reals):\", 1 in S1.intersect(Reals))\n+print()\n+\n+print(\"Test 2: Always real case\")\n+S2 = imageset(Lambda(n, 2*n), S.Integers)\n+print(\"S2:\", S2)\n+print(\"S2.intersect(Reals):\", S2.intersect(Reals))\n+print()\n+\n+print(\"Test 3: Never real case\")\n+S3 = imageset(Lambda(n, n + I), S.Integers)\n+print(\"S3:\", S3)\n+print(\"S3.intersect(Reals):\", S3.intersect(Reals))\n+print()\n+\n+print(\"Test 4: More complex imaginary part\")\n+S4 = imageset(Lambda(n, n + n**2*I), S.Integers)\n+print(\"S4:\", S4)\n+print(\"S4.intersect(Reals):\", S4.intersect(Reals))\n+print(\"0 in S4.intersect(Reals):\", 0 in S4.intersect(Reals))\n+print()\n+\n+print(\"Test 5: With denominators\")\n+S5 = imageset(Lambda(n, 1/n + I), S.Integers - {0})\n+print(\"S5:\", S5)\n+print(\"S5.intersect(Reals):\", S5.intersect(Reals))\n+print()\n+\n+print(\"Test 6: Intersection with interval\")\n+S6 = imageset(Lambda(x, 2*x), S.Reals)\n+print(\"S6:\", S6)\n+print(\"S6.intersect(Interval(0, 4)):\", S6.intersect(Interval(0, 4)))\n+print()\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..a4e02ce848\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,19 @@\n+from sympy import *\n+from sympy.abc import n\n+\n+# Test case from the issue\n+S1 = imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers)\n+print(\"S1:\", S1)\n+print(\"2 in S1:\", 2 in S1)\n+\n+# The issue: this should be False, not True\n+print(\"2 in S1.intersect(Reals):\", 2 in S1.intersect(Reals))\n+\n+# What the intersection should be\n+print(\"S1.intersect(Reals):\", S1.intersect(Reals))\n+\n+# Verify the correct values\n+print(\"\\nChecking individual values:\")\n+for val in [-2, -1, 0, 1, 2]:\n+    result = val + (val - 1)*(val + 1)*I\n+    print(f\"f({val}) = {result}, is real: {result.is_real}\")\n", "gold_standard_diff": "diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py\nindex c54dc8f72ae7..1ad7e98253c7 100644\n--- a/sympy/sets/handlers/intersection.py\n+++ b/sympy/sets/handlers/intersection.py\n@@ -5,7 +5,7 @@\n from sympy.sets.fancysets import (Integers, Naturals, Reals, Range,\n     ImageSet, Rationals)\n from sympy.sets.sets import UniversalSet, imageset, ProductSet\n-\n+from sympy.simplify.radsimp import numer\n \n @dispatch(ConditionSet, ConditionSet)  # type: ignore # noqa:F811\n def intersection_sets(a, b): # noqa:F811\n@@ -280,6 +280,19 @@ def intersection_sets(self, other): # noqa:F811\n         from sympy.core.function import expand_complex\n         from sympy.solvers.solvers import denoms, solve_linear\n         from sympy.core.relational import Eq\n+\n+        def _solution_union(exprs, sym):\n+            # return a union of linear solutions to i in expr;\n+            # if i cannot be solved, use a ConditionSet for solution\n+            sols = []\n+            for i in exprs:\n+                x, xis = solve_linear(i, 0, [sym])\n+                if x == sym:\n+                    sols.append(FiniteSet(xis))\n+                else:\n+                    sols.append(ConditionSet(sym, Eq(i, 0)))\n+            return Union(*sols)\n+\n         f = self.lamda.expr\n         n = self.lamda.variables[0]\n \n@@ -303,22 +316,14 @@ def intersection_sets(self, other): # noqa:F811\n         elif ifree != {n}:\n             return None\n         else:\n-            # univarite imaginary part in same variable\n-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])\n-            if x and all(i == n for i in x):\n-                base_set -= FiniteSet(xis)\n-            else:\n-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)\n+            # univarite imaginary part in same variable;\n+            # use numer instead of as_numer_denom to keep\n+            # this as fast as possible while still handling\n+            # simple cases\n+            base_set &= _solution_union(\n+                Mul.make_args(numer(im)), n)\n         # exclude values that make denominators 0\n-        for i in denoms(f):\n-            if i.has(n):\n-                sol = list(zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols]))\n-                if sol != []:\n-                    x, xis = sol\n-                    if x and all(i == n for i in x):\n-                        base_set -= FiniteSet(xis)\n-                else:\n-                    base_set -= ConditionSet(n, Eq(i, 0), S.Integers)\n+        base_set -= _solution_union(denoms(f), n)\n         return imageset(lam, base_set)\n \n     elif isinstance(other, Interval):\ndiff --git a/sympy/sets/tests/test_fancysets.py b/sympy/sets/tests/test_fancysets.py\nindex 098020ca4e7e..7facabe185df 100644\n--- a/sympy/sets/tests/test_fancysets.py\n+++ b/sympy/sets/tests/test_fancysets.py\n@@ -2,8 +2,9 @@\n from sympy.core.expr import unchanged\n from sympy.sets.fancysets import (ImageSet, Range, normalize_theta_set,\n                                   ComplexRegion)\n-from sympy.sets.sets import (Complement, FiniteSet, Interval, Union, imageset,\n+from sympy.sets.sets import (FiniteSet, Interval, Union, imageset,\n                              Intersection, ProductSet, Contains)\n+from sympy.sets.conditionset import ConditionSet\n from sympy.simplify.simplify import simplify\n from sympy import (S, Symbol, Lambda, symbols, cos, sin, pi, oo, Basic,\n                    Rational, sqrt, tan, log, exp, Abs, I, Tuple, eye,\n@@ -657,7 +658,23 @@ def test_infinitely_indexed_set_2():\n def test_imageset_intersect_real():\n     from sympy import I\n     from sympy.abc import n\n-    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == Complement(S.Integers, FiniteSet((-1, 1)))\n+    assert imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers).intersect(S.Reals) == FiniteSet(-1, 1)\n+    im = (n - 1)*(n + S.Half)\n+    assert imageset(Lambda(n, n + im*I), S.Integers\n+        ).intersect(S.Reals) == FiniteSet(1)\n+    assert imageset(Lambda(n, n + im*(n + 1)*I), S.Naturals0\n+        ).intersect(S.Reals) == FiniteSet(1)\n+    assert imageset(Lambda(n, n/2 + im.expand()*I), S.Integers\n+        ).intersect(S.Reals) == ImageSet(Lambda(x, x/2), ConditionSet(\n+        n, Eq(n**2 - n/2 - S(1)/2, 0), S.Integers))\n+    assert imageset(Lambda(n, n/(1/n - 1) + im*(n + 1)*I), S.Integers\n+        ).intersect(S.Reals) == FiniteSet(S.Half)\n+    assert imageset(Lambda(n, n/(n - 6) +\n+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(\n+        S.Reals) == FiniteSet(-1)\n+    assert imageset(Lambda(n, n/(n**2 - 9) +\n+        (n - 3)*(n + 1)*I/(2*n + 2)), S.Integers).intersect(\n+        S.Reals) is S.EmptySet\n     s = ImageSet(\n         Lambda(n, -I*(I*(2*pi*n - pi/4) + log(Abs(sqrt(-I))))),\n         S.Integers)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/21596"}