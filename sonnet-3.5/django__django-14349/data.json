{"instance_id": "django__django-14349", "score": "C", "diff": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex a385819510..ff5821fcfb 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -98,9 +98,22 @@ class URLValidator(RegexValidator):\n         if schemes is not None:\n             self.schemes = schemes\n \n+    def check_forbidden_chars(self, value):\n+        forbidden_chars = ['\\n', '\\r', '\\t']\n+        for char in forbidden_chars:\n+            if char in value:\n+                raise ValidationError(\n+                    _('URL cannot contain newline, carriage return, or tab characters.'),\n+                    code='invalid'\n+                )\n+\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n+        # Check for forbidden characters\n+        self.check_forbidden_chars(value)\n+\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n", "gold_standard_diff": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex a385819510d9..f9abec602cb1 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -92,6 +92,7 @@ class URLValidator(RegexValidator):\n         r'\\Z', re.IGNORECASE)\n     message = _('Enter a valid URL.')\n     schemes = ['http', 'https', 'ftp', 'ftps']\n+    unsafe_chars = frozenset('\\t\\r\\n')\n \n     def __init__(self, schemes=None, **kwargs):\n         super().__init__(**kwargs)\n@@ -101,6 +102,8 @@ def __init__(self, schemes=None, **kwargs):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if self.unsafe_chars.intersection(value):\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\ndiff --git a/docs/releases/2.2.22.txt b/docs/releases/2.2.22.txt\nnew file mode 100644\nindex 000000000000..6808a267afeb\n--- /dev/null\n+++ b/docs/releases/2.2.22.txt\n@@ -0,0 +1,22 @@\n+===========================\n+Django 2.2.22 release notes\n+===========================\n+\n+*May 6, 2021*\n+\n+Django 2.2.22 fixes a security issue in 2.2.21.\n+\n+CVE-2021-32052: Header injection possibility since ``URLValidator`` accepted newlines in input on Python 3.9.5+\n+===============================================================================================================\n+\n+On Python 3.9.5+, :class:`~django.core.validators.URLValidator` didn't prohibit\n+newlines and tabs. If you used values with newlines in HTTP response, you could\n+suffer from header injection attacks. Django itself wasn't vulnerable because\n+:class:`~django.http.HttpResponse` prohibits newlines in HTTP headers.\n+\n+Moreover, the ``URLField`` form field which uses ``URLValidator`` silently\n+removes newlines and tabs on Python 3.9.5+, so the possibility of newlines\n+entering your data only existed if you are using this validator outside of the\n+form fields.\n+\n+This issue was introduced by the :bpo:`43882` fix.\ndiff --git a/docs/releases/3.1.10.txt b/docs/releases/3.1.10.txt\nnew file mode 100644\nindex 000000000000..e9a8fcc2d81b\n--- /dev/null\n+++ b/docs/releases/3.1.10.txt\n@@ -0,0 +1,22 @@\n+===========================\n+Django 3.1.10 release notes\n+===========================\n+\n+*May 6, 2021*\n+\n+Django 3.1.10 fixes a security issue in 3.1.9.\n+\n+CVE-2021-32052: Header injection possibility since ``URLValidator`` accepted newlines in input on Python 3.9.5+\n+===============================================================================================================\n+\n+On Python 3.9.5+, :class:`~django.core.validators.URLValidator` didn't prohibit\n+newlines and tabs. If you used values with newlines in HTTP response, you could\n+suffer from header injection attacks. Django itself wasn't vulnerable because\n+:class:`~django.http.HttpResponse` prohibits newlines in HTTP headers.\n+\n+Moreover, the ``URLField`` form field which uses ``URLValidator`` silently\n+removes newlines and tabs on Python 3.9.5+, so the possibility of newlines\n+entering your data only existed if you are using this validator outside of the\n+form fields.\n+\n+This issue was introduced by the :bpo:`43882` fix.\ndiff --git a/docs/releases/3.2.2.txt b/docs/releases/3.2.2.txt\nindex d47da08d6c15..a899bc6e2994 100644\n--- a/docs/releases/3.2.2.txt\n+++ b/docs/releases/3.2.2.txt\n@@ -2,9 +2,24 @@\n Django 3.2.2 release notes\n ==========================\n \n-*Expected June 1, 2021*\n+*May 6, 2021*\n \n-Django 3.2.2 fixes several bugs in 3.2.1.\n+Django 3.2.2 fixes a security issue and a bug in 3.2.1.\n+\n+CVE-2021-32052: Header injection possibility since ``URLValidator`` accepted newlines in input on Python 3.9.5+\n+===============================================================================================================\n+\n+On Python 3.9.5+, :class:`~django.core.validators.URLValidator` didn't prohibit\n+newlines and tabs. If you used values with newlines in HTTP response, you could\n+suffer from header injection attacks. Django itself wasn't vulnerable because\n+:class:`~django.http.HttpResponse` prohibits newlines in HTTP headers.\n+\n+Moreover, the ``URLField`` form field which uses ``URLValidator`` silently\n+removes newlines and tabs on Python 3.9.5+, so the possibility of newlines\n+entering your data only existed if you are using this validator outside of the\n+form fields.\n+\n+This issue was introduced by the :bpo:`43882` fix.\n \n Bugfixes\n ========\ndiff --git a/docs/releases/index.txt b/docs/releases/index.txt\nindex c714ea95b4bb..99c19b088a6b 100644\n--- a/docs/releases/index.txt\n+++ b/docs/releases/index.txt\n@@ -41,6 +41,7 @@ versions of the documentation contain the release notes for any later releases.\n .. toctree::\n    :maxdepth: 1\n \n+   3.1.10\n    3.1.9\n    3.1.8\n    3.1.7\n@@ -78,6 +79,7 @@ versions of the documentation contain the release notes for any later releases.\n .. toctree::\n    :maxdepth: 1\n \n+   2.2.22\n    2.2.21\n    2.2.20\n    2.2.19\ndiff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex d6d013c026db..09d5c40ff5bd 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,9 +226,15 @@\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Newlines and tabs are not accepted.\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14349"}