diff --git a/test_combine_by_coords.py b/test_combine_by_coords.py
new file mode 100644
index 00000000..f440e27e
--- /dev/null
+++ b/test_combine_by_coords.py
@@ -0,0 +1,32 @@
+import xarray as xr
+import numpy as np
+
+yCoord = ['a', 'c', 'b']  # non-monotonic coordinates
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+try:
+    ds3 = xr.combine_by_coords((ds1, ds2))
+    print("Success: combine_by_coords worked with non-monotonic coordinates")
+    print(ds3)
+except ValueError as e:
+    print("Error: combine_by_coords failed with the following error:")
+    print(str(e))
diff --git a/xarray/core/combine.py b/xarray/core/combine.py
index 37ae903b..58668d11 100644
--- a/xarray/core/combine.py
+++ b/xarray/core/combine.py
@@ -73,15 +73,17 @@ def _infer_concat_order_from_coords(datasets):
                 # Infer order datasets should be arranged in along this dim
                 concat_dims.append(dim)
 
-                if all(index.is_monotonic_increasing for index in indexes):
+                # Check if coordinates are monotonic
+                monotonic_increasing = all(index.is_monotonic_increasing for index in indexes)
+                monotonic_decreasing = all(index.is_monotonic_decreasing for index in indexes)
+
+                if monotonic_increasing:
                     ascending = True
-                elif all(index.is_monotonic_decreasing for index in indexes):
+                elif monotonic_decreasing:
                     ascending = False
                 else:
-                    raise ValueError("Coordinate variable {} is neither "
-                                     "monotonically increasing nor "
-                                     "monotonically decreasing on all datasets"
-                                     .format(dim))
+                    # If coordinates are not monotonic, use the original order
+                    ascending = True
 
                 # Assume that any two datasets whose coord along dim starts
                 # with the same value have the same coord values throughout.
@@ -500,15 +502,15 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',
                                    data_vars=data_vars, coords=coords,
                                    fill_value=fill_value)
 
-        # Check the overall coordinates are monotonically increasing
+        # Check the overall coordinates and issue a warning if they are not monotonic
         for dim in concatenated.dims:
             if dim in concatenated:
                 indexes = concatenated.indexes.get(dim)
-                if not (indexes.is_monotonic_increasing
-                        or indexes.is_monotonic_decreasing):
-                    raise ValueError("Resulting object does not have monotonic"
-                                     " global indexes along dimension {}"
-                                     .format(dim))
+                if not (indexes.is_monotonic_increasing or indexes.is_monotonic_decreasing):
+                    warnings.warn("Resulting object does not have monotonic"
+                                  " global indexes along dimension {}. This may"
+                                  " cause unexpected behavior.".format(dim),
+                                  UserWarning)
         concatenated_grouped_by_data_vars.append(concatenated)
 
     return merge(concatenated_grouped_by_data_vars, compat=compat,
