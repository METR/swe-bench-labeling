{"instance_id": "sympy__sympy-13974", "score": "I", "diff": "", "gold_standard_diff": "From 7cad5a0649697a668e2412068974af3088ed3e30 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Johan=20Bl=C3=A5b=C3=A4ck?= <johan_bluecreek@riseup.net>\nDate: Sat, 20 Jan 2018 15:13:00 +0100\nSubject: [PATCH 1/4] Adding support for simplifying powers of tensorproducts\n\nThis commit adds support for `tensor_product_simp()` to also handle `Pow`\nexpressions with tensorproducts.\n\nThere is a new function `tensor_product_simp_Pow()` that only evaluates powers\nwhose base is a tensorproduct, and `tensor_product_simp_Mul()` has been\nchanged to call `tensor_product_simp_Pow()` when appropraite.\n\nThis solves issue #13779, resolves one of the \"TODO\" items present in a\ncomment in `tensorproduct.py` (comment has been changed) and is an alternative\nsolution to the PR #13784.\n---\n sympy/physics/quantum/tensorproduct.py | 42 +++++++++++++++++++++-----\n 1 file changed, 34 insertions(+), 8 deletions(-)\n\ndiff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 9dd10d219e43..997d30851bfd 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -18,6 +18,8 @@\n     matrix_tensor_product\n )\n \n+from sympy import srepr\n+\n __all__ = [\n     'TensorProduct',\n     'tensor_product_simp'\n@@ -309,14 +311,18 @@ def tensor_product_simp_Mul(e):\n         (A*C)x(B*D)\n \n     \"\"\"\n-    # TODO: This won't work with Muls that have other composites of\n-    # TensorProducts, like an Add, Pow, Commutator, etc.\n+    # TODO: This don't work with Muls that have other composites of\n+    # TensorProducts, like an Add, Commutator, etc.\n     # TODO: This only works for the equivalent of single Qbit gates.\n     if not isinstance(e, Mul):\n         return e\n     c_part, nc_part = e.args_cnc()\n     n_nc = len(nc_part)\n-    if n_nc == 0 or n_nc == 1:\n+    if n_nc == 0:\n+        return e\n+    elif n_nc == 1:\n+        if isinstance(nc_part[0], Pow):\n+            return  Mul(*c_part) * tensor_product_simp_Pow(nc_part[0])\n         return e\n     elif e.has(TensorProduct):\n         current = nc_part[0]\n@@ -335,15 +341,32 @@ def tensor_product_simp_Mul(e):\n                 for i in range(len(new_args)):\n                     new_args[i] = new_args[i] * next.args[i]\n             else:\n-                # this won't quite work as we don't want next in the\n-                # TensorProduct\n-                for i in range(len(new_args)):\n-                    new_args[i] = new_args[i] * next\n+                if isinstance(next, Pow):\n+                    new_tp = tensor_product_simp_Pow(next)\n+                    for i in range(len(new_args)):\n+                        new_args[i] = new_args[i] * new_tp.args[i]\n+                else:\n+                    # this won't quite work as we don't want next in the\n+                    # TensorProduct\n+                    for i in range(len(new_args)):\n+                        new_args[i] = new_args[i] * next\n             current = next\n         return Mul(*c_part) * TensorProduct(*new_args)\n+    elif e.has(Pow):\n+        new_args = [ tensor_product_simp_Pow(nc) for nc in nc_part ]\n+        return tensor_product_simp_Mul(Mul(*c_part) * TensorProduct(*new_args))\n     else:\n         return e\n \n+def tensor_product_simp_Pow(e):\n+    \"\"\"Evaluates ``Pow`` expressions whose base is ``TensorProduct``\"\"\"\n+    if not isinstance(e, Pow):\n+        return e\n+\n+    if isinstance(e.base, TensorProduct):\n+        return TensorProduct(*[ b**e.exp for b in e.base.args])\n+    else:\n+        return e\n \n def tensor_product_simp(e, **hints):\n     \"\"\"Try to simplify and combine TensorProducts.\n@@ -382,7 +405,10 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        if isinstance(e.base, TensorProduct):\n+            return tensor_product_simp_Pow(e)\n+        else:\n+            return tensor_product_simp(e.base) ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n\nFrom ae978e16f4b4baaddb5ca572e42081c08e6d05d7 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Johan=20Bl=C3=A5b=C3=A4ck?= <johan_bluecreek@riseup.net>\nDate: Sat, 20 Jan 2018 18:56:40 +0100\nSubject: [PATCH 2/4] Fix errors for simplifying non-commuting symbols\n multiplying tensorproducts\n\nPrevious to this fix `tensor_product_simp(C*TensorProduct(A,B))` caused errors\nwhile `tensor_product_simp(TensorProduct(A,B)*C)` did not, for `A, B, C`\nnon-commuting symbols. `tensor_product_simp()` will now raise errors for both,\nforcing the user to be more specific to avoid unexpected results. Meaning, in\nthe above examples `C` can be imagined to be composite `C = TensorProduct(C1,\nC2)`, or to represent another block in the tenstor product, e.g.\n`TensorProduct(A,B,1) * TensorProduct(1,1,C)`.\n---\n sympy/physics/quantum/tensorproduct.py | 20 ++++++++++++--------\n 1 file changed, 12 insertions(+), 8 deletions(-)\n\ndiff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 997d30851bfd..b861d9a12ca1 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -327,7 +327,11 @@ def tensor_product_simp_Mul(e):\n     elif e.has(TensorProduct):\n         current = nc_part[0]\n         if not isinstance(current, TensorProduct):\n-            raise TypeError('TensorProduct expected, got: %r' % current)\n+            if isinstance(current, Pow):\n+                if isinstance(current.base, TensorProduct):\n+                    current = tensor_product_simp_Pow(current)\n+            else:\n+                raise TypeError('TensorProduct expected, got: %r' % current)\n         n_terms = len(current.args)\n         new_args = list(current.args)\n         for next in nc_part[1:]:\n@@ -342,14 +346,14 @@ def tensor_product_simp_Mul(e):\n                     new_args[i] = new_args[i] * next.args[i]\n             else:\n                 if isinstance(next, Pow):\n-                    new_tp = tensor_product_simp_Pow(next)\n-                    for i in range(len(new_args)):\n-                        new_args[i] = new_args[i] * new_tp.args[i]\n+                    if isinstance(next.base, TensorProduct):\n+                        new_tp = tensor_product_simp_Pow(next)\n+                        for i in range(len(new_args)):\n+                            new_args[i] = new_args[i] * new_tp.args[i]\n+                    else:\n+                        raise TypeError('TensorProduct expected, got: %r' % next)\n                 else:\n-                    # this won't quite work as we don't want next in the\n-                    # TensorProduct\n-                    for i in range(len(new_args)):\n-                        new_args[i] = new_args[i] * next\n+                    raise TypeError('TensorProduct expected, got: %r' % next)\n             current = next\n         return Mul(*c_part) * TensorProduct(*new_args)\n     elif e.has(Pow):\n\nFrom 3cfa3377eec97cdfbf55b8dd70a7472576ef28d6 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Johan=20Bl=C3=A5b=C3=A4ck?= <johan_bluecreek@riseup.net>\nDate: Sat, 20 Jan 2018 19:07:34 +0100\nSubject: [PATCH 3/4] Tests for `tensor_product_simp()` acting on expressions\n with powers\n\nNon-trivial tests for expressions mixing powers and tensorproducts\n---\n sympy/physics/quantum/tests/test_tensorproduct.py | 7 ++++++-\n 1 file changed, 6 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex 9f65844c85d6..c8955a08f164 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -10,7 +10,7 @@\n from sympy.physics.quantum.density import Density\n from sympy.core.trace import Tr\n \n-A, B, C = symbols('A,B,C', commutative=False)\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n x = symbols('x')\n \n mat1 = Matrix([[1, 2*I], [1 + I, 3]])\n@@ -47,6 +47,11 @@ def test_tensor_product_commutator():\n \n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n+    # tests for Pow-expressions\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2,B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C,D)) == x*TP(A**2*C,B**2*D)\n+    assert tensor_product_simp(TP(A,B)-TP(C,D)**x) == TP(A,B)-TP(C**x,D**x)\n \n \n def test_issue_5923():\n\nFrom c2360561e9fe2119791149f5b097bd860e0ab4cc Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Johan=20Bl=C3=A5b=C3=A4ck?= <johan_bluecreek@riseup.net>\nDate: Tue, 23 Jan 2018 13:11:22 +0100\nSubject: [PATCH 4/4] Fixing minor issues mentioned by reviewers\n\n---\n sympy/physics/quantum/tensorproduct.py | 3 +--\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\ndiff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex b861d9a12ca1..3ffda734c2ec 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -18,7 +18,6 @@\n     matrix_tensor_product\n )\n \n-from sympy import srepr\n \n __all__ = [\n     'TensorProduct',\n@@ -311,7 +310,7 @@ def tensor_product_simp_Mul(e):\n         (A*C)x(B*D)\n \n     \"\"\"\n-    # TODO: This don't work with Muls that have other composites of\n+    # TODO: This won't work with Muls that have other composites of\n     # TensorProducts, like an Add, Commutator, etc.\n     # TODO: This only works for the equivalent of single Qbit gates.\n     if not isinstance(e, Mul):\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13974"}