diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py
index 871b016715..99f9ff2a72 100644
--- a/django/utils/datastructures.py
+++ b/django/utils/datastructures.py
@@ -25,6 +25,9 @@ class OrderedSet:
     def __iter__(self):
         return iter(self.dict)
 
+    def __reversed__(self):
+        return reversed(self.dict)
+
     def __contains__(self, item):
         return item in self.dict
 
diff --git a/test_duplicates.py b/test_duplicates.py
new file mode 100644
index 0000000000..9964670985
--- /dev/null
+++ b/test_duplicates.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.datastructures import OrderedSet
+
+# Test with duplicates in initialization
+s = OrderedSet([1, 2, 3, 2, 1, 4, 3, 5])
+print("OrderedSet with duplicates:", list(s))
+print("Reversed:", list(reversed(s)))
+
+# Test adding duplicates
+s2 = OrderedSet([1, 2, 3])
+s2.add(2)  # Adding existing element
+s2.add(4)  # Adding new element
+s2.add(1)  # Adding existing element
+print("\nAfter adding duplicates:", list(s2))
+print("Reversed:", list(reversed(s2)))
diff --git a/test_ordered_set_comprehensive.py b/test_ordered_set_comprehensive.py
new file mode 100644
index 0000000000..75a4f0db39
--- /dev/null
+++ b/test_ordered_set_comprehensive.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.datastructures import OrderedSet
+
+# Test 1: Basic reversed functionality
+print("Test 1: Basic reversed functionality")
+s = OrderedSet([1, 2, 3, 4, 5])
+print("Original:", list(s))
+print("Reversed:", list(reversed(s)))
+print()
+
+# Test 2: Empty OrderedSet
+print("Test 2: Empty OrderedSet")
+s_empty = OrderedSet()
+print("Original:", list(s_empty))
+print("Reversed:", list(reversed(s_empty)))
+print()
+
+# Test 3: Single element
+print("Test 3: Single element")
+s_single = OrderedSet([42])
+print("Original:", list(s_single))
+print("Reversed:", list(reversed(s_single)))
+print()
+
+# Test 4: With strings
+print("Test 4: With strings")
+s_strings = OrderedSet(['apple', 'banana', 'cherry'])
+print("Original:", list(s_strings))
+print("Reversed:", list(reversed(s_strings)))
+print()
+
+# Test 5: Order preservation after add/remove
+print("Test 5: Order preservation after add/remove")
+s_dynamic = OrderedSet([1, 2, 3])
+s_dynamic.add(4)
+s_dynamic.add(5)
+s_dynamic.remove(2)
+print("After modifications:", list(s_dynamic))
+print("Reversed:", list(reversed(s_dynamic)))
+print()
+
+# Test 6: Multiple reversed calls
+print("Test 6: Multiple reversed calls")
+s_multi = OrderedSet(['a', 'b', 'c'])
+rev1 = list(reversed(s_multi))
+rev2 = list(reversed(s_multi))
+print("First reversed:", rev1)
+print("Second reversed:", rev2)
+print("Are they equal?", rev1 == rev2)
diff --git a/test_ordered_set_reversed.py b/test_ordered_set_reversed.py
new file mode 100644
index 0000000000..038cade53a
--- /dev/null
+++ b/test_ordered_set_reversed.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.datastructures import OrderedSet
+
+# Test current behavior
+s = OrderedSet([1, 2, 3, 4, 5])
+print("OrderedSet contents:", list(s))
+
+# Try to use reversed() - this should fail currently
+try:
+    print("Reversed:", list(reversed(s)))
+except TypeError as e:
+    print("Error using reversed():", e)
diff --git a/test_reversed_iterator.py b/test_reversed_iterator.py
new file mode 100644
index 0000000000..93e6b7099a
--- /dev/null
+++ b/test_reversed_iterator.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python
+import sys
+sys.path.insert(0, '.')
+
+from django.utils.datastructures import OrderedSet
+
+# Check that reversed() returns an iterator, not a list
+s = OrderedSet([1, 2, 3, 4, 5])
+rev_iter = reversed(s)
+
+print("Type of reversed(OrderedSet):", type(rev_iter))
+print("Is it an iterator?", hasattr(rev_iter, '__iter__') and hasattr(rev_iter, '__next__'))
+
+# Consume the iterator one by one
+print("\nConsuming iterator one by one:")
+print("First:", next(rev_iter))
+print("Second:", next(rev_iter))
+print("Remaining:", list(rev_iter))
+
+# Show that the iterator is exhausted
+try:
+    next(rev_iter)
+except StopIteration:
+    print("\nIterator is exhausted (StopIteration raised) âœ“")
diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py
index 45d172f984..a2dd5bde36 100644
--- a/tests/utils_tests/test_datastructures.py
+++ b/tests/utils_tests/test_datastructures.py
@@ -55,6 +55,25 @@ class OrderedSetTests(SimpleTestCase):
         s.add(2)
         self.assertEqual(len(s), 2)
 
+    def test_reversed(self):
+        # Test basic reversed functionality
+        s = OrderedSet([1, 2, 3, 4, 5])
+        self.assertEqual(list(reversed(s)), [5, 4, 3, 2, 1])
+        
+        # Test empty OrderedSet
+        s_empty = OrderedSet()
+        self.assertEqual(list(reversed(s_empty)), [])
+        
+        # Test single element
+        s_single = OrderedSet(['a'])
+        self.assertEqual(list(reversed(s_single)), ['a'])
+        
+        # Test order preservation after modifications
+        s_dynamic = OrderedSet([1, 2, 3])
+        s_dynamic.add(4)
+        s_dynamic.remove(2)
+        self.assertEqual(list(reversed(s_dynamic)), [4, 3, 1])
+
 
 class MultiValueDictTests(SimpleTestCase):
 
