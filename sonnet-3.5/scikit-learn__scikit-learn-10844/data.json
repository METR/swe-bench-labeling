{"instance_id": "scikit-learn__scikit-learn-10844", "score": "C", "diff": "diff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py\nindex a987778ae..33c375f89 100644\n--- a/sklearn/metrics/cluster/supervised.py\n+++ b/sklearn/metrics/cluster/supervised.py\n@@ -856,7 +856,8 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\n-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.\n+    # Avoid overflow for large pk and qk by splitting the sqrt\n+    return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\n", "gold_standard_diff": "diff --git a/doc/whats_new/v0.20.rst b/doc/whats_new/v0.20.rst\nindex e71a8af0d78db..45009ef249a6f 100644\n--- a/doc/whats_new/v0.20.rst\n+++ b/doc/whats_new/v0.20.rst\n@@ -354,6 +354,12 @@ Metrics\n   :func:`mutual_info_score`.\n   :issue:`9772` by :user:`Kumar Ashutosh <thechargedneutron>`.\n \n+- Fixed a bug in :func:`metrics.cluster.fowlkes_mallows_score` to avoid integer\n+  overflow. Casted return value of `contingency_matrix` to `int64` and computed\n+  product of square roots rather than square root of product.\n+  :issue:`9515` by :user:`Alan Liddell <aliddell>` and\n+  :user:`Manh Dao <manhdao>`.\n+\n Neighbors\n \n - Fixed a bug so ``predict`` in :class:`neighbors.RadiusNeighborsRegressor` can\ndiff --git a/sklearn/metrics/cluster/supervised.py b/sklearn/metrics/cluster/supervised.py\nindex a987778ae5d2e..a33d0cb25acb0 100644\n--- a/sklearn/metrics/cluster/supervised.py\n+++ b/sklearn/metrics/cluster/supervised.py\n@@ -852,11 +852,12 @@ def fowlkes_mallows_score(labels_true, labels_pred, sparse=False):\n     labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n     n_samples, = labels_true.shape\n \n-    c = contingency_matrix(labels_true, labels_pred, sparse=True)\n+    c = contingency_matrix(labels_true, labels_pred,\n+                           sparse=True).astype(np.int64)\n     tk = np.dot(c.data, c.data) - n_samples\n     pk = np.sum(np.asarray(c.sum(axis=0)).ravel() ** 2) - n_samples\n     qk = np.sum(np.asarray(c.sum(axis=1)).ravel() ** 2) - n_samples\n-    return tk / np.sqrt(pk * qk) if tk != 0. else 0.\n+    return np.sqrt(tk / pk) * np.sqrt(tk / qk) if tk != 0. else 0.\n \n \n def entropy(labels):\ndiff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex 8da03d1e17457..8be39cd220d2a 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -173,15 +173,16 @@ def test_expected_mutual_info_overflow():\n     assert expected_mutual_information(np.array([[70000]]), 70000) <= 1\n \n \n-def test_int_overflow_mutual_info_score():\n-    # Test overflow in mutual_info_classif\n+def test_int_overflow_mutual_info_fowlkes_mallows_score():\n+    # Test overflow in mutual_info_classif and fowlkes_mallows_score\n     x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n                  204) + [4] * (814 + 39) + [5] * (316 + 20))\n     y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n                  [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n                  [1] * 20)\n \n-    assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n+    assert_all_finite(mutual_info_score(x, y))\n+    assert_all_finite(fowlkes_mallows_score(x, y))\n \n \n def test_entropy():\n", "gold_standard_pr_link": "https://github.com/scikit-learn/scikit-learn/pull/10844"}