{"instance_id": "django__django-13794", "score": "I", "diff": "diff --git a/apply_fix.py b/apply_fix.py\nnew file mode 100644\nindex 0000000000..227afad85e\n--- /dev/null\n+++ b/apply_fix.py\n@@ -0,0 +1,36 @@\n+import re\n+\n+# Read the original file\n+with open('django/template/defaultfilters.py', 'r', encoding='utf-8') as f:\n+    content = f.read()\n+\n+# First, add the import for force_str\n+# Find the line with \"from django.utils.encoding import iri_to_uri\"\n+import_pattern = r'(from django\\.utils\\.encoding import iri_to_uri)'\n+import_replacement = r'from django.utils.encoding import force_str, iri_to_uri'\n+\n+content = re.sub(import_pattern, import_replacement, content)\n+\n+# Now fix the add filter function\n+# Find the add function and replace it\n+add_pattern = r'(@register\\.filter\\(is_safe=False\\)\\ndef add\\(value, arg\\):\\n    \"\"\"Add the arg to the value\\.\"\"\"\\n    try:\\n        return int\\(value\\) \\+ int\\(arg\\)\\n    except \\(ValueError, TypeError\\):\\n        try:\\n            return value \\+ arg\\n        except Exception:\\n            return \\'\\')'\n+\n+add_replacement = '''@register.filter(is_safe=False)\n+def add(value, arg):\n+    \"\"\"Add the arg to the value.\"\"\"\n+    try:\n+        return int(value) + int(arg)\n+    except (ValueError, TypeError):\n+        try:\n+            # Convert lazy strings to regular strings before concatenation\n+            return force_str(value) + force_str(arg)\n+        except Exception:\n+            return \\'\\''''\n+\n+content = re.sub(add_pattern, add_replacement, content, flags=re.MULTILINE | re.DOTALL)\n+\n+# Write the modified content back\n+with open('django/template/defaultfilters.py', 'w', encoding='utf-8') as f:\n+    f.write(content)\n+\n+print(\"File modified successfully!\")\ndiff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 1c844580c6..0cfa766b1d 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -10,7 +10,7 @@ from urllib.parse import quote\n \n from django.utils import formats\n from django.utils.dateformat import format, time_format\n-from django.utils.encoding import iri_to_uri\n+from django.utils.encoding import force_str, iri_to_uri\n from django.utils.html import (\n     avoid_wrapping, conditional_escape, escape, escapejs,\n     json_script as _json_script, linebreaks, strip_tags, urlize as _urlize,\n@@ -679,10 +679,18 @@ def add(value, arg):\n     except (ValueError, TypeError):\n         try:\n             return value + arg\n+        except TypeError:\n+            # Check if either value is a lazy string (Promise)\n+            from django.utils.functional import Promise\n+            if isinstance(value, Promise) or isinstance(arg, Promise):\n+                return force_str(value) + force_str(arg)\n+            return ''\n         except Exception:\n             return ''\n \n \n+\n+\n @register.filter(is_safe=False)\n def get_digit(value, arg):\n     \"\"\"\ndiff --git a/django/template/defaultfilters.py.backup b/django/template/defaultfilters.py.backup\nnew file mode 100644\nindex 0000000000..1c844580c6\n--- /dev/null\n+++ b/django/template/defaultfilters.py.backup\n@@ -0,0 +1,922 @@\n+\"\"\"Default variable filters.\"\"\"\n+import random as random_module\n+import re\n+import types\n+from decimal import ROUND_HALF_UP, Context, Decimal, InvalidOperation\n+from functools import wraps\n+from operator import itemgetter\n+from pprint import pformat\n+from urllib.parse import quote\n+\n+from django.utils import formats\n+from django.utils.dateformat import format, time_format\n+from django.utils.encoding import iri_to_uri\n+from django.utils.html import (\n+    avoid_wrapping, conditional_escape, escape, escapejs,\n+    json_script as _json_script, linebreaks, strip_tags, urlize as _urlize,\n+)\n+from django.utils.safestring import SafeData, mark_safe\n+from django.utils.text import (\n+    Truncator, normalize_newlines, phone2numeric, slugify as _slugify, wrap,\n+)\n+from django.utils.timesince import timesince, timeuntil\n+from django.utils.translation import gettext, ngettext\n+\n+from .base import Variable, VariableDoesNotExist\n+from .library import Library\n+\n+register = Library()\n+\n+\n+#######################\n+# STRING DECORATOR    #\n+#######################\n+\n+def stringfilter(func):\n+    \"\"\"\n+    Decorator for filters which should only receive strings. The object\n+    passed as the first positional argument will be converted to a string.\n+    \"\"\"\n+    def _dec(*args, **kwargs):\n+        args = list(args)\n+        args[0] = str(args[0])\n+        if (isinstance(args[0], SafeData) and\n+                getattr(_dec._decorated_function, 'is_safe', False)):\n+            return mark_safe(func(*args, **kwargs))\n+        return func(*args, **kwargs)\n+\n+    # Include a reference to the real function (used to check original\n+    # arguments by the template parser, and to bear the 'is_safe' attribute\n+    # when multiple decorators are applied).\n+    _dec._decorated_function = getattr(func, '_decorated_function', func)\n+\n+    return wraps(func)(_dec)\n+\n+\n+###################\n+# STRINGS         #\n+###################\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def addslashes(value):\n+    \"\"\"\n+    Add slashes before quotes. Useful for escaping strings in CSV, for\n+    example. Less useful for escaping JavaScript; use the ``escapejs``\n+    filter instead.\n+    \"\"\"\n+    return value.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"').replace(\"'\", \"\\\\'\")\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def capfirst(value):\n+    \"\"\"Capitalize the first character of the value.\"\"\"\n+    return value and value[0].upper() + value[1:]\n+\n+\n+@register.filter(\"escapejs\")\n+@stringfilter\n+def escapejs_filter(value):\n+    \"\"\"Hex encode characters for use in JavaScript strings.\"\"\"\n+    return escapejs(value)\n+\n+\n+@register.filter(is_safe=True)\n+def json_script(value, element_id):\n+    \"\"\"\n+    Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n+    tag.\n+    \"\"\"\n+    return _json_script(value, element_id)\n+\n+\n+@register.filter(is_safe=True)\n+def floatformat(text, arg=-1):\n+    \"\"\"\n+    Display a float to a specified number of decimal places.\n+\n+    If called without an argument, display the floating point number with one\n+    decimal place -- but only if there's a decimal place to be displayed:\n+\n+    * num1 = 34.23234\n+    * num2 = 34.00000\n+    * num3 = 34.26000\n+    * {{ num1|floatformat }} displays \"34.2\"\n+    * {{ num2|floatformat }} displays \"34\"\n+    * {{ num3|floatformat }} displays \"34.3\"\n+\n+    If arg is positive, always display exactly arg number of decimal places:\n+\n+    * {{ num1|floatformat:3 }} displays \"34.232\"\n+    * {{ num2|floatformat:3 }} displays \"34.000\"\n+    * {{ num3|floatformat:3 }} displays \"34.260\"\n+\n+    If arg is negative, display arg number of decimal places -- but only if\n+    there are places to be displayed:\n+\n+    * {{ num1|floatformat:\"-3\" }} displays \"34.232\"\n+    * {{ num2|floatformat:\"-3\" }} displays \"34\"\n+    * {{ num3|floatformat:\"-3\" }} displays \"34.260\"\n+\n+    If arg has the 'g' suffix, force the result to be grouped by the\n+    THOUSAND_SEPARATOR for the active locale. When the active locale is\n+    en (English):\n+\n+    * {{ 6666.6666|floatformat:\"2g\" }} displays \"6,666.67\"\n+    * {{ 10000|floatformat:\"g\" }} displays \"10,000\"\n+\n+    If the input float is infinity or NaN, display the string representation\n+    of that value.\n+    \"\"\"\n+    force_grouping = False\n+    if isinstance(arg, str) and arg.endswith('g'):\n+        force_grouping = True\n+        arg = arg[:-1] or -1\n+    try:\n+        input_val = repr(text)\n+        d = Decimal(input_val)\n+    except InvalidOperation:\n+        try:\n+            d = Decimal(str(float(text)))\n+        except (ValueError, InvalidOperation, TypeError):\n+            return ''\n+    try:\n+        p = int(arg)\n+    except ValueError:\n+        return input_val\n+\n+    try:\n+        m = int(d) - d\n+    except (ValueError, OverflowError, InvalidOperation):\n+        return input_val\n+\n+    if not m and p < 0:\n+        return mark_safe(\n+            formats.number_format('%d' % (int(d)), 0, force_grouping=force_grouping),\n+        )\n+\n+    exp = Decimal(1).scaleb(-abs(p))\n+    # Set the precision high enough to avoid an exception (#15789).\n+    tupl = d.as_tuple()\n+    units = len(tupl[1])\n+    units += -tupl[2] if m else tupl[2]\n+    prec = abs(p) + units + 1\n+\n+    # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n+    # and `exponent` from Decimal.as_tuple() directly.\n+    rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))\n+    sign, digits, exponent = rounded_d.as_tuple()\n+    digits = [str(digit) for digit in reversed(digits)]\n+    while len(digits) <= abs(exponent):\n+        digits.append('0')\n+    digits.insert(-exponent, '.')\n+    if sign and rounded_d:\n+        digits.append('-')\n+    number = ''.join(reversed(digits))\n+    return mark_safe(\n+        formats.number_format(number, abs(p), force_grouping=force_grouping),\n+    )\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def iriencode(value):\n+    \"\"\"Escape an IRI value for use in a URL.\"\"\"\n+    return iri_to_uri(value)\n+\n+\n+@register.filter(is_safe=True, needs_autoescape=True)\n+@stringfilter\n+def linenumbers(value, autoescape=True):\n+    \"\"\"Display text with line numbers.\"\"\"\n+    lines = value.split('\\n')\n+    # Find the maximum width of the line count, for use with zero padding\n+    # string format command\n+    width = str(len(str(len(lines))))\n+    if not autoescape or isinstance(value, SafeData):\n+        for i, line in enumerate(lines):\n+            lines[i] = (\"%0\" + width + \"d. %s\") % (i + 1, line)\n+    else:\n+        for i, line in enumerate(lines):\n+            lines[i] = (\"%0\" + width + \"d. %s\") % (i + 1, escape(line))\n+    return mark_safe('\\n'.join(lines))\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def lower(value):\n+    \"\"\"Convert a string into all lowercase.\"\"\"\n+    return value.lower()\n+\n+\n+@register.filter(is_safe=False)\n+@stringfilter\n+def make_list(value):\n+    \"\"\"\n+    Return the value turned into a list.\n+\n+    For an integer, it's a list of digits.\n+    For a string, it's a list of characters.\n+    \"\"\"\n+    return list(value)\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def slugify(value):\n+    \"\"\"\n+    Convert to ASCII. Convert spaces to hyphens. Remove characters that aren't\n+    alphanumerics, underscores, or hyphens. Convert to lowercase. Also strip\n+    leading and trailing whitespace.\n+    \"\"\"\n+    return _slugify(value)\n+\n+\n+@register.filter(is_safe=True)\n+def stringformat(value, arg):\n+    \"\"\"\n+    Format the variable according to the arg, a string formatting specifier.\n+\n+    This specifier uses Python string formatting syntax, with the exception\n+    that the leading \"%\" is dropped.\n+\n+    See https://docs.python.org/library/stdtypes.html#printf-style-string-formatting\n+    for documentation of Python string formatting.\n+    \"\"\"\n+    if isinstance(value, tuple):\n+        value = str(value)\n+    try:\n+        return (\"%\" + str(arg)) % value\n+    except (ValueError, TypeError):\n+        return \"\"\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def title(value):\n+    \"\"\"Convert a string into titlecase.\"\"\"\n+    t = re.sub(\"([a-z])'([A-Z])\", lambda m: m[0].lower(), value.title())\n+    return re.sub(r'\\d([A-Z])', lambda m: m[0].lower(), t)\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def truncatechars(value, arg):\n+    \"\"\"Truncate a string after `arg` number of characters.\"\"\"\n+    try:\n+        length = int(arg)\n+    except ValueError:  # Invalid literal for int().\n+        return value  # Fail silently.\n+    return Truncator(value).chars(length)\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def truncatechars_html(value, arg):\n+    \"\"\"\n+    Truncate HTML after `arg` number of chars.\n+    Preserve newlines in the HTML.\n+    \"\"\"\n+    try:\n+        length = int(arg)\n+    except ValueError:  # invalid literal for int()\n+        return value  # Fail silently.\n+    return Truncator(value).chars(length, html=True)\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def truncatewords(value, arg):\n+    \"\"\"\n+    Truncate a string after `arg` number of words.\n+    Remove newlines within the string.\n+    \"\"\"\n+    try:\n+        length = int(arg)\n+    except ValueError:  # Invalid literal for int().\n+        return value  # Fail silently.\n+    return Truncator(value).words(length, truncate=' \u2026')\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def truncatewords_html(value, arg):\n+    \"\"\"\n+    Truncate HTML after `arg` number of words.\n+    Preserve newlines in the HTML.\n+    \"\"\"\n+    try:\n+        length = int(arg)\n+    except ValueError:  # invalid literal for int()\n+        return value  # Fail silently.\n+    return Truncator(value).words(length, html=True, truncate=' \u2026')\n+\n+\n+@register.filter(is_safe=False)\n+@stringfilter\n+def upper(value):\n+    \"\"\"Convert a string into all uppercase.\"\"\"\n+    return value.upper()\n+\n+\n+@register.filter(is_safe=False)\n+@stringfilter\n+def urlencode(value, safe=None):\n+    \"\"\"\n+    Escape a value for use in a URL.\n+\n+    The ``safe`` parameter determines the characters which should not be\n+    escaped by Python's quote() function. If not provided, use the default safe\n+    characters (but an empty string can be provided when *all* characters\n+    should be escaped).\n+    \"\"\"\n+    kwargs = {}\n+    if safe is not None:\n+        kwargs['safe'] = safe\n+    return quote(value, **kwargs)\n+\n+\n+@register.filter(is_safe=True, needs_autoescape=True)\n+@stringfilter\n+def urlize(value, autoescape=True):\n+    \"\"\"Convert URLs in plain text into clickable links.\"\"\"\n+    return mark_safe(_urlize(value, nofollow=True, autoescape=autoescape))\n+\n+\n+@register.filter(is_safe=True, needs_autoescape=True)\n+@stringfilter\n+def urlizetrunc(value, limit, autoescape=True):\n+    \"\"\"\n+    Convert URLs into clickable links, truncating URLs to the given character\n+    limit, and adding 'rel=nofollow' attribute to discourage spamming.\n+\n+    Argument: Length to truncate URLs to.\n+    \"\"\"\n+    return mark_safe(_urlize(value, trim_url_limit=int(limit), nofollow=True, autoescape=autoescape))\n+\n+\n+@register.filter(is_safe=False)\n+@stringfilter\n+def wordcount(value):\n+    \"\"\"Return the number of words.\"\"\"\n+    return len(value.split())\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def wordwrap(value, arg):\n+    \"\"\"Wrap words at `arg` line length.\"\"\"\n+    return wrap(value, int(arg))\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def ljust(value, arg):\n+    \"\"\"Left-align the value in a field of a given width.\"\"\"\n+    return value.ljust(int(arg))\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def rjust(value, arg):\n+    \"\"\"Right-align the value in a field of a given width.\"\"\"\n+    return value.rjust(int(arg))\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def center(value, arg):\n+    \"\"\"Center the value in a field of a given width.\"\"\"\n+    return value.center(int(arg))\n+\n+\n+@register.filter\n+@stringfilter\n+def cut(value, arg):\n+    \"\"\"Remove all values of arg from the given string.\"\"\"\n+    safe = isinstance(value, SafeData)\n+    value = value.replace(arg, '')\n+    if safe and arg != ';':\n+        return mark_safe(value)\n+    return value\n+\n+\n+###################\n+# HTML STRINGS    #\n+###################\n+\n+@register.filter(\"escape\", is_safe=True)\n+@stringfilter\n+def escape_filter(value):\n+    \"\"\"Mark the value as a string that should be auto-escaped.\"\"\"\n+    return conditional_escape(value)\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def force_escape(value):\n+    \"\"\"\n+    Escape a string's HTML. Return a new string containing the escaped\n+    characters (as opposed to \"escape\", which marks the content for later\n+    possible escaping).\n+    \"\"\"\n+    return escape(value)\n+\n+\n+@register.filter(\"linebreaks\", is_safe=True, needs_autoescape=True)\n+@stringfilter\n+def linebreaks_filter(value, autoescape=True):\n+    \"\"\"\n+    Replace line breaks in plain text with appropriate HTML; a single\n+    newline becomes an HTML line break (``<br>``) and a new line\n+    followed by a blank line becomes a paragraph break (``</p>``).\n+    \"\"\"\n+    autoescape = autoescape and not isinstance(value, SafeData)\n+    return mark_safe(linebreaks(value, autoescape))\n+\n+\n+@register.filter(is_safe=True, needs_autoescape=True)\n+@stringfilter\n+def linebreaksbr(value, autoescape=True):\n+    \"\"\"\n+    Convert all newlines in a piece of plain text to HTML line breaks\n+    (``<br>``).\n+    \"\"\"\n+    autoescape = autoescape and not isinstance(value, SafeData)\n+    value = normalize_newlines(value)\n+    if autoescape:\n+        value = escape(value)\n+    return mark_safe(value.replace('\\n', '<br>'))\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def safe(value):\n+    \"\"\"Mark the value as a string that should not be auto-escaped.\"\"\"\n+    return mark_safe(value)\n+\n+\n+@register.filter(is_safe=True)\n+def safeseq(value):\n+    \"\"\"\n+    A \"safe\" filter for sequences. Mark each element in the sequence,\n+    individually, as safe, after converting them to strings. Return a list\n+    with the results.\n+    \"\"\"\n+    return [mark_safe(obj) for obj in value]\n+\n+\n+@register.filter(is_safe=True)\n+@stringfilter\n+def striptags(value):\n+    \"\"\"Strip all [X]HTML tags.\"\"\"\n+    return strip_tags(value)\n+\n+\n+###################\n+# LISTS           #\n+###################\n+\n+def _property_resolver(arg):\n+    \"\"\"\n+    When arg is convertible to float, behave like operator.itemgetter(arg)\n+    Otherwise, behave like Variable(arg).resolve\n+\n+    >>> _property_resolver(1)('abc')\n+    'b'\n+    >>> _property_resolver('1')('abc')\n+    Traceback (most recent call last):\n+    ...\n+    TypeError: string indices must be integers\n+    >>> class Foo:\n+    ...     a = 42\n+    ...     b = 3.14\n+    ...     c = 'Hey!'\n+    >>> _property_resolver('b')(Foo())\n+    3.14\n+    \"\"\"\n+    try:\n+        float(arg)\n+    except ValueError:\n+        return Variable(arg).resolve\n+    else:\n+        return itemgetter(arg)\n+\n+\n+@register.filter(is_safe=False)\n+def dictsort(value, arg):\n+    \"\"\"\n+    Given a list of dicts, return that list sorted by the property given in\n+    the argument.\n+    \"\"\"\n+    try:\n+        return sorted(value, key=_property_resolver(arg))\n+    except (TypeError, VariableDoesNotExist):\n+        return ''\n+\n+\n+@register.filter(is_safe=False)\n+def dictsortreversed(value, arg):\n+    \"\"\"\n+    Given a list of dicts, return that list sorted in reverse order by the\n+    property given in the argument.\n+    \"\"\"\n+    try:\n+        return sorted(value, key=_property_resolver(arg), reverse=True)\n+    except (TypeError, VariableDoesNotExist):\n+        return ''\n+\n+\n+@register.filter(is_safe=False)\n+def first(value):\n+    \"\"\"Return the first item in a list.\"\"\"\n+    try:\n+        return value[0]\n+    except IndexError:\n+        return ''\n+\n+\n+@register.filter(is_safe=True, needs_autoescape=True)\n+def join(value, arg, autoescape=True):\n+    \"\"\"Join a list with a string, like Python's ``str.join(list)``.\"\"\"\n+    try:\n+        if autoescape:\n+            value = [conditional_escape(v) for v in value]\n+        data = conditional_escape(arg).join(value)\n+    except TypeError:  # Fail silently if arg isn't iterable.\n+        return value\n+    return mark_safe(data)\n+\n+\n+@register.filter(is_safe=True)\n+def last(value):\n+    \"\"\"Return the last item in a list.\"\"\"\n+    try:\n+        return value[-1]\n+    except IndexError:\n+        return ''\n+\n+\n+@register.filter(is_safe=False)\n+def length(value):\n+    \"\"\"Return the length of the value - useful for lists.\"\"\"\n+    try:\n+        return len(value)\n+    except (ValueError, TypeError):\n+        return 0\n+\n+\n+@register.filter(is_safe=False)\n+def length_is(value, arg):\n+    \"\"\"Return a boolean of whether the value's length is the argument.\"\"\"\n+    try:\n+        return len(value) == int(arg)\n+    except (ValueError, TypeError):\n+        return ''\n+\n+\n+@register.filter(is_safe=True)\n+def random(value):\n+    \"\"\"Return a random item from the list.\"\"\"\n+    return random_module.choice(value)\n+\n+\n+@register.filter(\"slice\", is_safe=True)\n+def slice_filter(value, arg):\n+    \"\"\"\n+    Return a slice of the list using the same syntax as Python's list slicing.\n+    \"\"\"\n+    try:\n+        bits = []\n+        for x in str(arg).split(':'):\n+            if not x:\n+                bits.append(None)\n+            else:\n+                bits.append(int(x))\n+        return value[slice(*bits)]\n+\n+    except (ValueError, TypeError):\n+        return value  # Fail silently.\n+\n+\n+@register.filter(is_safe=True, needs_autoescape=True)\n+def unordered_list(value, autoescape=True):\n+    \"\"\"\n+    Recursively take a self-nested list and return an HTML unordered list --\n+    WITHOUT opening and closing <ul> tags.\n+\n+    Assume the list is in the proper format. For example, if ``var`` contains:\n+    ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, then\n+    ``{{ var|unordered_list }}`` returns::\n+\n+        <li>States\n+        <ul>\n+                <li>Kansas\n+                <ul>\n+                        <li>Lawrence</li>\n+                        <li>Topeka</li>\n+                </ul>\n+                </li>\n+                <li>Illinois</li>\n+        </ul>\n+        </li>\n+    \"\"\"\n+    if autoescape:\n+        escaper = conditional_escape\n+    else:\n+        def escaper(x):\n+            return x\n+\n+    def walk_items(item_list):\n+        item_iterator = iter(item_list)\n+        try:\n+            item = next(item_iterator)\n+            while True:\n+                try:\n+                    next_item = next(item_iterator)\n+                except StopIteration:\n+                    yield item, None\n+                    break\n+                if isinstance(next_item, (list, tuple, types.GeneratorType)):\n+                    try:\n+                        iter(next_item)\n+                    except TypeError:\n+                        pass\n+                    else:\n+                        yield item, next_item\n+                        item = next(item_iterator)\n+                        continue\n+                yield item, None\n+                item = next_item\n+        except StopIteration:\n+            pass\n+\n+    def list_formatter(item_list, tabs=1):\n+        indent = '\\t' * tabs\n+        output = []\n+        for item, children in walk_items(item_list):\n+            sublist = ''\n+            if children:\n+                sublist = '\\n%s<ul>\\n%s\\n%s</ul>\\n%s' % (\n+                    indent, list_formatter(children, tabs + 1), indent, indent)\n+            output.append('%s<li>%s%s</li>' % (\n+                indent, escaper(item), sublist))\n+        return '\\n'.join(output)\n+\n+    return mark_safe(list_formatter(value))\n+\n+\n+###################\n+# INTEGERS        #\n+###################\n+\n+@register.filter(is_safe=False)\n+def add(value, arg):\n+    \"\"\"Add the arg to the value.\"\"\"\n+    try:\n+        return int(value) + int(arg)\n+    except (ValueError, TypeError):\n+        try:\n+            return value + arg\n+        except Exception:\n+            return ''\n+\n+\n+@register.filter(is_safe=False)\n+def get_digit(value, arg):\n+    \"\"\"\n+    Given a whole number, return the requested digit of it, where 1 is the\n+    right-most digit, 2 is the second-right-most digit, etc. Return the\n+    original value for invalid input (if input or argument is not an integer,\n+    or if argument is less than 1). Otherwise, output is always an integer.\n+    \"\"\"\n+    try:\n+        arg = int(arg)\n+        value = int(value)\n+    except ValueError:\n+        return value  # Fail silently for an invalid argument\n+    if arg < 1:\n+        return value\n+    try:\n+        return int(str(value)[-arg])\n+    except IndexError:\n+        return 0\n+\n+\n+###################\n+# DATES           #\n+###################\n+\n+@register.filter(expects_localtime=True, is_safe=False)\n+def date(value, arg=None):\n+    \"\"\"Format a date according to the given format.\"\"\"\n+    if value in (None, ''):\n+        return ''\n+    try:\n+        return formats.date_format(value, arg)\n+    except AttributeError:\n+        try:\n+            return format(value, arg)\n+        except AttributeError:\n+            return ''\n+\n+\n+@register.filter(expects_localtime=True, is_safe=False)\n+def time(value, arg=None):\n+    \"\"\"Format a time according to the given format.\"\"\"\n+    if value in (None, ''):\n+        return ''\n+    try:\n+        return formats.time_format(value, arg)\n+    except (AttributeError, TypeError):\n+        try:\n+            return time_format(value, arg)\n+        except (AttributeError, TypeError):\n+            return ''\n+\n+\n+@register.filter(\"timesince\", is_safe=False)\n+def timesince_filter(value, arg=None):\n+    \"\"\"Format a date as the time since that date (i.e. \"4 days, 6 hours\").\"\"\"\n+    if not value:\n+        return ''\n+    try:\n+        if arg:\n+            return timesince(value, arg)\n+        return timesince(value)\n+    except (ValueError, TypeError):\n+        return ''\n+\n+\n+@register.filter(\"timeuntil\", is_safe=False)\n+def timeuntil_filter(value, arg=None):\n+    \"\"\"Format a date as the time until that date (i.e. \"4 days, 6 hours\").\"\"\"\n+    if not value:\n+        return ''\n+    try:\n+        return timeuntil(value, arg)\n+    except (ValueError, TypeError):\n+        return ''\n+\n+\n+###################\n+# LOGIC           #\n+###################\n+\n+@register.filter(is_safe=False)\n+def default(value, arg):\n+    \"\"\"If value is unavailable, use given default.\"\"\"\n+    return value or arg\n+\n+\n+@register.filter(is_safe=False)\n+def default_if_none(value, arg):\n+    \"\"\"If value is None, use given default.\"\"\"\n+    if value is None:\n+        return arg\n+    return value\n+\n+\n+@register.filter(is_safe=False)\n+def divisibleby(value, arg):\n+    \"\"\"Return True if the value is divisible by the argument.\"\"\"\n+    return int(value) % int(arg) == 0\n+\n+\n+@register.filter(is_safe=False)\n+def yesno(value, arg=None):\n+    \"\"\"\n+    Given a string mapping values for true, false, and (optionally) None,\n+    return one of those strings according to the value:\n+\n+    ==========  ======================  ==================================\n+    Value       Argument                Outputs\n+    ==========  ======================  ==================================\n+    ``True``    ``\"yeah,no,maybe\"``     ``yeah``\n+    ``False``   ``\"yeah,no,maybe\"``     ``no``\n+    ``None``    ``\"yeah,no,maybe\"``     ``maybe``\n+    ``None``    ``\"yeah,no\"``           ``\"no\"`` (converts None to False\n+                                        if no mapping for None is given.\n+    ==========  ======================  ==================================\n+    \"\"\"\n+    if arg is None:\n+        # Translators: Please do not add spaces around commas.\n+        arg = gettext('yes,no,maybe')\n+    bits = arg.split(',')\n+    if len(bits) < 2:\n+        return value  # Invalid arg.\n+    try:\n+        yes, no, maybe = bits\n+    except ValueError:\n+        # Unpack list of wrong size (no \"maybe\" value provided).\n+        yes, no, maybe = bits[0], bits[1], bits[1]\n+    if value is None:\n+        return maybe\n+    if value:\n+        return yes\n+    return no\n+\n+\n+###################\n+# MISC            #\n+###################\n+\n+@register.filter(is_safe=True)\n+def filesizeformat(bytes_):\n+    \"\"\"\n+    Format the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,\n+    102 bytes, etc.).\n+    \"\"\"\n+    try:\n+        bytes_ = int(bytes_)\n+    except (TypeError, ValueError, UnicodeDecodeError):\n+        value = ngettext(\"%(size)d byte\", \"%(size)d bytes\", 0) % {'size': 0}\n+        return avoid_wrapping(value)\n+\n+    def filesize_number_format(value):\n+        return formats.number_format(round(value, 1), 1)\n+\n+    KB = 1 << 10\n+    MB = 1 << 20\n+    GB = 1 << 30\n+    TB = 1 << 40\n+    PB = 1 << 50\n+\n+    negative = bytes_ < 0\n+    if negative:\n+        bytes_ = -bytes_  # Allow formatting of negative numbers.\n+\n+    if bytes_ < KB:\n+        value = ngettext(\"%(size)d byte\", \"%(size)d bytes\", bytes_) % {'size': bytes_}\n+    elif bytes_ < MB:\n+        value = gettext(\"%s KB\") % filesize_number_format(bytes_ / KB)\n+    elif bytes_ < GB:\n+        value = gettext(\"%s MB\") % filesize_number_format(bytes_ / MB)\n+    elif bytes_ < TB:\n+        value = gettext(\"%s GB\") % filesize_number_format(bytes_ / GB)\n+    elif bytes_ < PB:\n+        value = gettext(\"%s TB\") % filesize_number_format(bytes_ / TB)\n+    else:\n+        value = gettext(\"%s PB\") % filesize_number_format(bytes_ / PB)\n+\n+    if negative:\n+        value = \"-%s\" % value\n+    return avoid_wrapping(value)\n+\n+\n+@register.filter(is_safe=False)\n+def pluralize(value, arg='s'):\n+    \"\"\"\n+    Return a plural suffix if the value is not 1, '1', or an object of\n+    length 1. By default, use 's' as the suffix:\n+\n+    * If value is 0, vote{{ value|pluralize }} display \"votes\".\n+    * If value is 1, vote{{ value|pluralize }} display \"vote\".\n+    * If value is 2, vote{{ value|pluralize }} display \"votes\".\n+\n+    If an argument is provided, use that string instead:\n+\n+    * If value is 0, class{{ value|pluralize:\"es\" }} display \"classes\".\n+    * If value is 1, class{{ value|pluralize:\"es\" }} display \"class\".\n+    * If value is 2, class{{ value|pluralize:\"es\" }} display \"classes\".\n+\n+    If the provided argument contains a comma, use the text before the comma\n+    for the singular case and the text after the comma for the plural case:\n+\n+    * If value is 0, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n+    * If value is 1, cand{{ value|pluralize:\"y,ies\" }} display \"candy\".\n+    * If value is 2, cand{{ value|pluralize:\"y,ies\" }} display \"candies\".\n+    \"\"\"\n+    if ',' not in arg:\n+        arg = ',' + arg\n+    bits = arg.split(',')\n+    if len(bits) > 2:\n+        return ''\n+    singular_suffix, plural_suffix = bits[:2]\n+\n+    try:\n+        return singular_suffix if float(value) == 1 else plural_suffix\n+    except ValueError:  # Invalid string that's not a number.\n+        pass\n+    except TypeError:  # Value isn't a string or a number; maybe it's a list?\n+        try:\n+            return singular_suffix if len(value) == 1 else plural_suffix\n+        except TypeError:  # len() of unsized object.\n+            pass\n+    return ''\n+\n+\n+@register.filter(\"phone2numeric\", is_safe=True)\n+def phone2numeric_filter(value):\n+    \"\"\"Take a phone number and converts it in to its numerical equivalent.\"\"\"\n+    return phone2numeric(value)\n+\n+\n+@register.filter(is_safe=True)\n+def pprint(value):\n+    \"\"\"A wrapper around pprint.pprint -- for debugging, really.\"\"\"\n+    try:\n+        return pformat(value)\n+    except Exception as e:\n+        return \"Error in formatting: %s: %s\" % (e.__class__.__name__, e)\ndiff --git a/fix_add_filter.py b/fix_add_filter.py\nnew file mode 100644\nindex 0000000000..275feb94ff\n--- /dev/null\n+++ b/fix_add_filter.py\n@@ -0,0 +1,22 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_I18N=True,\n+    SECRET_KEY='test-key'\n+)\n+django.setup()\n+\n+from django.utils.encoding import force_str\n+\n+# Let's see what the current add filter code is\n+with open('django/template/defaultfilters.py', 'r', encoding='utf-8') as f:\n+    lines = f.readlines()\n+    for i, line in enumerate(lines[670:690], 670):\n+        print(f\"{i}: {line}\", end='')\n+\n+# Let's also check the imports\n+print(\"\\n\\nImports section:\")\n+for i, line in enumerate(lines[:30]):\n+    print(f\"{i}: {line}\", end='')\ndiff --git a/fix_add_selective.py b/fix_add_selective.py\nnew file mode 100644\nindex 0000000000..d91909a088\n--- /dev/null\n+++ b/fix_add_selective.py\n@@ -0,0 +1,53 @@\n+# Read the file\n+with open('django/template/defaultfilters.py', 'r', encoding='utf-8') as f:\n+    lines = f.readlines()\n+\n+# Find the add function\n+start_line = None\n+end_line = None\n+\n+for i, line in enumerate(lines):\n+    if line.strip() == '@register.filter(is_safe=False)' and i < len(lines) - 1 and 'def add(' in lines[i+1]:\n+        start_line = i\n+    if start_line is not None and line.strip() == \"return ''\" and 'except' in lines[i-1]:\n+        end_line = i\n+        break\n+\n+print(f\"Found add function from line {start_line} to {end_line}\")\n+\n+# First, let's also check if we need to import Promise\n+need_promise_import = True\n+for line in lines[:30]:\n+    if 'from django.utils.functional import' in line and 'Promise' in line:\n+        need_promise_import = False\n+        break\n+\n+# Replace the function with a more selective approach\n+new_function = '''@register.filter(is_safe=False)\n+def add(value, arg):\n+    \"\"\"Add the arg to the value.\"\"\"\n+    try:\n+        return int(value) + int(arg)\n+    except (ValueError, TypeError):\n+        try:\n+            return value + arg\n+        except TypeError:\n+            # Check if either value is a lazy string (Promise)\n+            from django.utils.functional import Promise\n+            if isinstance(value, Promise) or isinstance(arg, Promise):\n+                return force_str(value) + force_str(arg)\n+            return ''\n+        except Exception:\n+            return ''\n+'''\n+\n+# Replace the lines\n+if start_line is not None and end_line is not None:\n+    # Delete old lines and insert new ones\n+    new_lines = lines[:start_line] + [new_function + '\\n'] + lines[end_line+1:]\n+    \n+    # Write back\n+    with open('django/template/defaultfilters.py', 'w', encoding='utf-8') as f:\n+        f.writelines(new_lines)\n+    \n+    print(\"Successfully replaced the add function!\")\ndiff --git a/new_add_function.txt b/new_add_function.txt\nnew file mode 100644\nindex 0000000000..6da51a8d1a\n--- /dev/null\n+++ b/new_add_function.txt\n@@ -0,0 +1,11 @@\n+@register.filter(is_safe=False)\n+def add(value, arg):\n+    \"\"\"Add the arg to the value.\"\"\"\n+    try:\n+        return int(value) + int(arg)\n+    except (ValueError, TypeError):\n+        try:\n+            # Convert lazy strings to regular strings before concatenation\n+            return force_str(value) + force_str(arg)\n+        except Exception:\n+            return ''\ndiff --git a/replace_add_function.py b/replace_add_function.py\nnew file mode 100644\nindex 0000000000..100adfb820\n--- /dev/null\n+++ b/replace_add_function.py\n@@ -0,0 +1,41 @@\n+# Read the file\n+with open('django/template/defaultfilters.py', 'r', encoding='utf-8') as f:\n+    lines = f.readlines()\n+\n+# Find the add function (around line 674)\n+start_line = None\n+end_line = None\n+\n+for i, line in enumerate(lines):\n+    if line.strip() == '@register.filter(is_safe=False)' and i < len(lines) - 1 and 'def add(' in lines[i+1]:\n+        start_line = i\n+    if start_line is not None and line.strip() == \"return ''\" and 'except' in lines[i-1]:\n+        end_line = i\n+        break\n+\n+print(f\"Found add function from line {start_line} to {end_line}\")\n+\n+# Replace the function\n+new_function = '''@register.filter(is_safe=False)\n+def add(value, arg):\n+    \"\"\"Add the arg to the value.\"\"\"\n+    try:\n+        return int(value) + int(arg)\n+    except (ValueError, TypeError):\n+        try:\n+            # Convert lazy strings to regular strings before concatenation\n+            return force_str(value) + force_str(arg)\n+        except Exception:\n+            return ''\n+'''\n+\n+# Replace the lines\n+if start_line is not None and end_line is not None:\n+    # Delete old lines and insert new ones\n+    new_lines = lines[:start_line] + [new_function + '\\n'] + lines[end_line+1:]\n+    \n+    # Write back\n+    with open('django/template/defaultfilters.py', 'w', encoding='utf-8') as f:\n+        f.writelines(new_lines)\n+    \n+    print(\"Successfully replaced the add function!\")\ndiff --git a/test_add_lazy_string.py b/test_add_lazy_string.py\nnew file mode 100644\nindex 0000000000..c0c089379c\n--- /dev/null\n+++ b/test_add_lazy_string.py\n@@ -0,0 +1,33 @@\n+from django.template.defaultfilters import add\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy\n+\n+\n+class LazyStringAddTests(SimpleTestCase):\n+    \"\"\"Tests for adding lazy strings with the add filter.\"\"\"\n+\n+    def test_add_regular_string_to_lazy_string(self):\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(\"World \", lazy_str)\n+        self.assertEqual(result, \"World Hello\")\n+\n+    def test_add_lazy_string_to_regular_string(self):\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(lazy_str, \" World\")\n+        self.assertEqual(result, \"Hello World\")\n+\n+    def test_add_two_lazy_strings(self):\n+        lazy_str1 = gettext_lazy(\"Hello\")\n+        lazy_str2 = gettext_lazy(\" World\")\n+        result = add(lazy_str1, lazy_str2)\n+        self.assertEqual(result, \"Hello World\")\n+\n+    def test_add_empty_string_to_lazy_string(self):\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(\"\", lazy_str)\n+        self.assertEqual(result, \"Hello\")\n+\n+    def test_add_lazy_string_to_empty_string(self):\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(lazy_str, \"\")\n+        self.assertEqual(result, \"Hello\")\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..0e3d54c7d4\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,65 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_I18N=True,\n+    SECRET_KEY='test-key'\n+)\n+django.setup()\n+\n+from django.template.defaultfilters import add\n+from django.utils.translation import gettext_lazy\n+from django.utils.safestring import mark_safe\n+\n+# Create test values\n+lazy_str = gettext_lazy(\"Hello\")\n+regular_str = \"World\"\n+safe_str = mark_safe(\"<b>Bold</b>\")\n+number = 42\n+\n+print(\"Testing various combinations with the add filter:\")\n+print(\"=\" * 50)\n+\n+# Test 1: Regular string + lazy string\n+result = add(regular_str, lazy_str)\n+print(f\"1. Regular string + lazy string: '{regular_str}' + '{lazy_str}' = '{result}'\")\n+\n+# Test 2: Lazy string + regular string\n+result = add(lazy_str, regular_str)\n+print(f\"2. Lazy string + regular string: '{lazy_str}' + '{regular_str}' = '{result}'\")\n+\n+# Test 3: Two lazy strings\n+lazy_str2 = gettext_lazy(\"World\")\n+result = add(lazy_str, lazy_str2)\n+print(f\"3. Two lazy strings: '{lazy_str}' + '{lazy_str2}' = '{result}'\")\n+\n+# Test 4: Numbers (should still work)\n+result = add(10, 32)\n+print(f\"4. Numbers: 10 + 32 = {result}\")\n+\n+# Test 5: Number strings (should add as numbers)\n+result = add(\"10\", \"32\")\n+print(f\"5. Number strings: '10' + '32' = {result}\")\n+\n+# Test 6: Mixed number and string\n+result = add(\"Hello\", \"32\")\n+print(f\"6. Mixed (string + number string): 'Hello' + '32' = '{result}'\")\n+\n+# Test 7: Safe string + lazy string\n+result = add(safe_str, lazy_str)\n+print(f\"7. Safe string + lazy string: '{safe_str}' + '{lazy_str}' = '{result}'\")\n+\n+# Test 8: Empty string + lazy string\n+result = add(\"\", lazy_str)\n+print(f\"8. Empty string + lazy string: '' + '{lazy_str}' = '{result}'\")\n+\n+# Test 9: None values (should return empty string)\n+result = add(None, lazy_str)\n+print(f\"9. None + lazy string: None + '{lazy_str}' = '{result}'\")\n+\n+# Test 10: Lists (should concatenate)\n+result = add([1, 2], [3, 4])\n+print(f\"10. Lists: [1, 2] + [3, 4] = {result}\")\n+\n+print(\"\\nAll tests completed successfully!\")\ndiff --git a/test_lazy_string_add.py b/test_lazy_string_add.py\nnew file mode 100644\nindex 0000000000..420651d9d5\n--- /dev/null\n+++ b/test_lazy_string_add.py\n@@ -0,0 +1,54 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    USE_I18N=True,\n+    SECRET_KEY='test-key'\n+)\n+django.setup()\n+\n+from django.utils.functional import lazy\n+from django.template.defaultfilters import add\n+from django.utils.translation import gettext_lazy\n+\n+# Create a lazy string\n+lazy_str = gettext_lazy(\"Hello\")\n+\n+# Test the add filter with regular string and lazy string\n+print(\"Testing add filter with lazy string...\")\n+print(f\"lazy_str type: {type(lazy_str)}\")\n+print(f\"lazy_str value: {lazy_str}\")\n+\n+# This should work but currently raises TypeError\n+try:\n+    result = add(\"World \", lazy_str)\n+    print(f\"Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {type(e).__name__}: {e}\")\n+\n+# Let's also test the reverse\n+try:\n+    result2 = add(lazy_str, \" World\")\n+    print(f\"Result2: {result2}\")\n+except Exception as e:\n+    print(f\"Error2: {type(e).__name__}: {e}\")\n+\n+# Let's trace what happens inside add()\n+print(\"\\nDebugging the add filter:\")\n+value = \"World \"\n+arg = lazy_str\n+print(f\"value type: {type(value)}, arg type: {type(arg)}\")\n+\n+try:\n+    result = int(value) + int(arg)\n+    print(f\"Integer addition result: {result}\")\n+except (ValueError, TypeError) as e:\n+    print(f\"Integer conversion failed: {type(e).__name__}: {e}\")\n+    try:\n+        result = value + arg\n+        print(f\"String concatenation result: {result}\")\n+    except Exception as e2:\n+        print(f\"String concatenation failed: {type(e2).__name__}: {e2}\")\n+        result = ''\n+        print(f\"Returning empty string: '{result}'\")\ndiff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 0fcc661f4a..a5837191d0 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -51,3 +51,38 @@ class FunctionTests(SimpleTestCase):\n \n     def test_add(self):\n         self.assertEqual(add('1', '2'), 3)\n+\n+\n+class LazyStringTests(SimpleTestCase):\n+    \"\"\"Tests for adding lazy strings with the add filter.\"\"\"\n+\n+    def test_add_regular_string_to_lazy_string(self):\n+        from django.utils.translation import gettext_lazy\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(\"World \", lazy_str)\n+        self.assertEqual(result, \"World Hello\")\n+\n+    def test_add_lazy_string_to_regular_string(self):\n+        from django.utils.translation import gettext_lazy\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(lazy_str, \" World\")\n+        self.assertEqual(result, \"Hello World\")\n+\n+    def test_add_two_lazy_strings(self):\n+        from django.utils.translation import gettext_lazy\n+        lazy_str1 = gettext_lazy(\"Hello\")\n+        lazy_str2 = gettext_lazy(\" World\")\n+        result = add(lazy_str1, lazy_str2)\n+        self.assertEqual(result, \"Hello World\")\n+\n+    def test_add_empty_string_to_lazy_string(self):\n+        from django.utils.translation import gettext_lazy\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(\"\", lazy_str)\n+        self.assertEqual(result, \"Hello\")\n+\n+    def test_add_lazy_string_to_empty_string(self):\n+        from django.utils.translation import gettext_lazy\n+        lazy_str = gettext_lazy(\"Hello\")\n+        result = add(lazy_str, \"\")\n+        self.assertEqual(result, \"Hello\")\n", "gold_standard_diff": "From 577f2338f16bea055abc49c5a43fa3ecb05dffc8 Mon Sep 17 00:00:00 2001\nFrom: Hasan Ramezani <hasan.r67@gmail.com>\nDate: Sat, 19 Dec 2020 20:53:30 +0100\nSubject: [PATCH] Fixed #32208 -- Allowed adding lazy() objects.\n\nCo-authored-by: Claude Paroz <claude@2xlibre.net>\n---\n django/utils/functional.py                    |  6 ++++++\n tests/template_tests/filter_tests/test_add.py | 17 +++++++++++++++++\n tests/utils_tests/test_functional.py          |  5 +++++\n 3 files changed, 28 insertions(+)\n\ndiff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 6d38f932f97a..5c8a0c233f50 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -176,6 +176,12 @@ def __mod__(self, rhs):\n                 return str(self) % rhs\n             return self.__cast() % rhs\n \n+        def __add__(self, other):\n+            return self.__cast() + other\n+\n+        def __radd__(self, other):\n+            return other + self.__cast()\n+\n         def __deepcopy__(self, memo):\n             # Instances of this class are effectively immutable. It's just a\n             # collection of functions. So we don't need to do anything\ndiff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 0fcc661f4aed..b5786ca1362b 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -2,6 +2,7 @@\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n \n@@ -46,6 +47,22 @@ def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n \n class FunctionTests(SimpleTestCase):\n \ndiff --git a/tests/utils_tests/test_functional.py b/tests/utils_tests/test_functional.py\nindex 6e454cfef3e3..595479a50362 100644\n--- a/tests/utils_tests/test_functional.py\n+++ b/tests/utils_tests/test_functional.py\n@@ -184,6 +184,11 @@ class Foo:\n         with self.assertRaisesMessage(TypeError, msg):\n             Foo().cp\n \n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n     def test_lazy_equality(self):\n         \"\"\"\n         == and != work correctly for Promises.\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13794"}