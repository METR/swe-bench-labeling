diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 593048464b..7749d7f705 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -266,8 +266,12 @@ def distance(self, p):
         sqrt(x**2 + y**2)
 
         """
-        return sqrt(sum([(a - b)**2 for a, b in zip(
-            self.args, p.args if isinstance(p, Point) else p)]))
+        p = Point(p) if not isinstance(p, Point) else p
+        # Handle points of different dimensions by padding with zeros
+        dim = max(len(self.args), len(p.args))
+        coords1 = list(self.args) + [S.Zero] * (dim - len(self.args))
+        coords2 = list(p.args) + [S.Zero] * (dim - len(p.args))
+        return sqrt(sum([(a - b)**2 for a, b in zip(coords1, coords2)]))
 
     def taxicab_distance(self, p):
         """The Taxicab Distance from self to point p.
@@ -300,7 +304,11 @@ def taxicab_distance(self, p):
 
         """
         p = Point(p)
-        return sum(abs(a - b) for a, b in zip(self.args, p.args))
+        # Handle points of different dimensions by padding with zeros
+        dim = max(len(self.args), len(p.args))
+        coords1 = list(self.args) + [S.Zero] * (dim - len(self.args))
+        coords2 = list(p.args) + [S.Zero] * (dim - len(p.args))
+        return sum(abs(a - b) for a, b in zip(coords1, coords2))
 
     def midpoint(self, p):
         """The midpoint between self and point p.
@@ -329,7 +337,12 @@ def midpoint(self, p):
         Point2D(7, 3)
 
         """
-        return Point([simplify((a + b)*S.Half) for a, b in zip(self.args, p.args)])
+        p = Point(p) if not isinstance(p, Point) else p
+        # Handle points of different dimensions by padding with zeros
+        dim = max(len(self.args), len(p.args))
+        coords1 = list(self.args) + [S.Zero] * (dim - len(self.args))
+        coords2 = list(p.args) + [S.Zero] * (dim - len(p.args))
+        return Point([simplify((a + b)*S.Half) for a, b in zip(coords1, coords2)])
 
     def evalf(self, prec=None, **options):
         """Evaluate the coordinates of the point.
@@ -406,7 +419,11 @@ def intersection(self, o):
     def dot(self, p2):
         """Return dot product of self with another Point."""
         p2 = Point(p2)
-        return Add(*[a*b for a,b in zip(self, p2)])
+        # Handle points of different dimensions by padding with zeros
+        dim = max(len(self.args), len(p2.args))
+        coords1 = list(self.args) + [S.Zero] * (dim - len(self.args))
+        coords2 = list(p2.args) + [S.Zero] * (dim - len(p2.args))
+        return Add(*[a*b for a,b in zip(coords1, coords2)])
 
     def equals(self, other):
         """Returns whether the coordinates of self and other agree."""
diff --git a/test_abs.py b/test_abs.py
new file mode 100644
index 0000000000..0eb96fafd1
--- /dev/null
+++ b/test_abs.py
@@ -0,0 +1,13 @@
+from sympy.geometry import Point
+from sympy import sqrt
+
+# Test __abs__ method which uses distance to origin
+p1 = Point(3, 4)
+print(f"abs(Point(3, 4)) = {abs(p1)} (expected: 5)")
+
+p2 = Point(1, 0, 2)
+print(f"abs(Point(1, 0, 2)) = {abs(p2)} (expected: sqrt(5))")
+
+# Edge case: different dimension point
+p3 = Point(0, 0, 0, 3)
+print(f"abs(Point(0, 0, 0, 3)) = {abs(p3)} (expected: 3)")
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 0000000000..faed2cca40
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,53 @@
+from sympy.geometry import Point, Point2D, Point3D
+from sympy import sqrt, S
+
+# Test distance between points of same dimensions (should not change)
+print("Testing same dimension distance:")
+p1 = Point(1, 1)
+p2 = Point(4, 5)
+print(f"2D to 2D: {p1.distance(p2)} (expected: 5)")
+
+p3 = Point(1, 1, 1)
+p4 = Point(2, 2, 2)
+print(f"3D to 3D: {p3.distance(p4)} (expected: sqrt(3))")
+
+# Test distance between points of different dimensions
+print("\nTesting different dimension distance:")
+p5 = Point(2, 0)
+p6 = Point(1, 0, 2)
+print(f"2D to 3D: {p5.distance(p6)} (expected: sqrt(5))")
+print(f"3D to 2D: {p6.distance(p5)} (expected: sqrt(5))")
+
+# Test taxicab distance
+print("\nTesting taxicab distance:")
+print(f"2D to 2D: {p1.taxicab_distance(p2)} (expected: 7)")
+print(f"2D to 3D: {p5.taxicab_distance(p6)} (expected: 3)")
+print(f"3D to 2D: {p6.taxicab_distance(p5)} (expected: 3)")
+
+# Test midpoint
+print("\nTesting midpoint:")
+print(f"2D to 2D: {p1.midpoint(p2)} (expected: Point2D(5/2, 3))")
+print(f"2D to 3D: {p5.midpoint(p6)} (expected: Point3D(3/2, 0, 1))")
+print(f"3D to 2D: {p6.midpoint(p5)} (expected: Point3D(3/2, 0, 1))")
+
+# Test dot product
+print("\nTesting dot product:")
+print(f"2D to 2D: {p1.dot(p2)} (expected: 4+5=9)")
+print(f"2D to 3D: {p5.dot(p6)} (expected: 2*1+0*0+0*2=2)")
+print(f"3D to 2D: {p6.dot(p5)} (expected: 1*2+0*0+2*0=2)")
+
+# Test edge cases
+print("\nTesting edge cases:")
+p_origin_2d = Point(0, 0)
+p_origin_3d = Point(0, 0, 0)
+print(f"Origin 2D to 3D point: {p_origin_2d.distance(p6)} (expected: sqrt(1+0+4)=sqrt(5))")
+print(f"3D point to origin 2D: {p6.distance(p_origin_2d)} (expected: sqrt(1+0+4)=sqrt(5))")
+
+# Test with symbolic coordinates
+print("\nTesting with symbolic coordinates:")
+from sympy import symbols
+x, y, z = symbols('x y z', real=True)
+p_sym_2d = Point(x, y)
+p_sym_3d = Point(1, 2, z)
+print(f"Symbolic 2D to 3D: {p_sym_2d.distance(p_sym_3d)}")
+print(f"Expected: sqrt((x-1)^2 + (y-2)^2 + z^2)")
diff --git a/test_distance_bug.py b/test_distance_bug.py
new file mode 100644
index 0000000000..ee0a6e34fc
--- /dev/null
+++ b/test_distance_bug.py
@@ -0,0 +1,21 @@
+from sympy.geometry import Point
+from sympy import sqrt
+
+# Test the bug
+p1 = Point(2, 0)
+p2 = Point(1, 0, 2)
+
+print(f"Point 1: {p1}")
+print(f"Point 2: {p2}")
+print(f"Calculated distance: {p1.distance(p2)}")
+print(f"Expected distance: {sqrt(5)}")
+print(f"Expected distance (numeric): {float(sqrt(5))}")
+
+# Additional test cases
+p3 = Point(0, 0, 0)
+p4 = Point(1, 1)
+print(f"\nPoint 3: {p3}")
+print(f"Point 4: {p4}")
+print(f"Distance p3 to p4: {p3.distance(p4)}")
+print(f"Distance p4 to p3: {p4.distance(p3)}")
+print(f"Expected: {sqrt(2)}")
diff --git a/test_distance_fix.py b/test_distance_fix.py
new file mode 100644
index 0000000000..73cd13aeec
--- /dev/null
+++ b/test_distance_fix.py
@@ -0,0 +1,60 @@
+"""Test case for the distance calculation bug fix for points of different dimensions"""
+from sympy.geometry import Point
+from sympy import sqrt
+
+def test_distance_different_dimensions():
+    """Test that distance calculation works correctly for points of different dimensions"""
+    # Original bug case from the issue
+    p1 = Point(2, 0)
+    p2 = Point(1, 0, 2)
+    assert p1.distance(p2) == sqrt(5)
+    assert p2.distance(p1) == sqrt(5)  # Should be symmetric
+    
+    # Additional test cases
+    p3 = Point(0, 0, 0)
+    p4 = Point(1, 1)
+    assert p3.distance(p4) == sqrt(2)
+    assert p4.distance(p3) == sqrt(2)
+    
+    # Test with more complex coordinates
+    p5 = Point(3, 4)
+    p6 = Point(0, 0, 0)
+    assert p5.distance(p6) == 5
+    assert p6.distance(p5) == 5
+    
+def test_taxicab_distance_different_dimensions():
+    """Test that taxicab distance works correctly for points of different dimensions"""
+    p1 = Point(2, 0)
+    p2 = Point(1, 0, 2)
+    assert p1.taxicab_distance(p2) == 3  # |2-1| + |0-0| + |0-2|
+    assert p2.taxicab_distance(p1) == 3
+    
+def test_midpoint_different_dimensions():
+    """Test that midpoint calculation works correctly for points of different dimensions"""
+    p1 = Point(2, 0)
+    p2 = Point(1, 0, 2)
+    mid = p1.midpoint(p2)
+    assert mid == Point(1.5, 0, 1)
+    assert p2.midpoint(p1) == mid  # Should be symmetric
+    
+def test_dot_product_different_dimensions():
+    """Test that dot product works correctly for points of different dimensions"""
+    p1 = Point(2, 3)
+    p2 = Point(1, 2, 4)
+    assert p1.dot(p2) == 8  # 2*1 + 3*2 + 0*4
+    assert p2.dot(p1) == 8  # Should be symmetric
+
+if __name__ == "__main__":
+    test_distance_different_dimensions()
+    print("✓ Distance tests passed")
+    
+    test_taxicab_distance_different_dimensions()
+    print("✓ Taxicab distance tests passed")
+    
+    test_midpoint_different_dimensions()
+    print("✓ Midpoint tests passed")
+    
+    test_dot_product_different_dimensions()
+    print("✓ Dot product tests passed")
+    
+    print("\nAll tests passed!")
