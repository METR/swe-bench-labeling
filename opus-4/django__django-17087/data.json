{"instance_id": "django__django-17087", "score": "C", "diff": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..06657ebaab 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\ndiff --git a/run_writer_test.py b/run_writer_test.py\nnew file mode 100644\nindex 0000000000..eaee7fb365\n--- /dev/null\n+++ b/run_writer_test.py\n@@ -0,0 +1,18 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.test.utils import get_runner\n+\n+if __name__ == \"__main__\":\n+    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'\n+    django.setup()\n+    TestRunner = get_runner(settings)\n+    test_runner = TestRunner()\n+    \n+    # Run only our specific test\n+    failures = test_runner.run_tests([\"migrations.test_writer.WriterTests.test_serialize_nested_class_method\"])\n+    \n+    if failures:\n+        sys.exit(1)\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bef8f64061..463c9452af 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -739,6 +739,36 @@ class WriterTests(SimpleTestCase):\n         \"\"\"An unbound method used within a class body can be serialized.\"\"\"\n         self.serialize_round_trip(TestModel1.thing)\n \n+    def test_serialize_nested_class_method(self):\n+        \"\"\"Test serialization of class methods from nested classes.\"\"\"\n+        class OuterModel:\n+            class InnerClass:\n+                @classmethod\n+                def inner_method(cls):\n+                    return []\n+        \n+        # Test direct serialization of nested class method\n+        result = self.serialize_round_trip(OuterModel.InnerClass.inner_method)\n+        self.assertEqual(result(), [])\n+        \n+        # Test that the serialized string contains the full qualified name\n+        string, imports = MigrationWriter.serialize(OuterModel.InnerClass.inner_method)\n+        self.assertIn(\"OuterModel.InnerClass.inner_method\", string)\n+        \n+        # Test deeply nested classes\n+        class Level1:\n+            class Level2:\n+                class Level3:\n+                    @classmethod\n+                    def deep_method(cls):\n+                        return \"deep\"\n+        \n+        result = self.serialize_round_trip(Level1.Level2.Level3.deep_method)\n+        self.assertEqual(result(), \"deep\")\n+        \n+        string, imports = MigrationWriter.serialize(Level1.Level2.Level3.deep_method)\n+        self.assertIn(\"Level1.Level2.Level3.deep_method\", string)\n+\n     def test_serialize_local_function_reference(self):\n         \"\"\"A reference in a local scope can't be serialized.\"\"\"\n \n", "gold_standard_diff": "From 94534a001d173c82cea110f69cd7927a2af1f83d Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Nicol=C3=B2?= <nicolo.intrieri@spinforward.it>\nDate: Mon, 17 Jul 2023 22:20:04 +0200\nSubject: [PATCH] Fixed #34716 -- nested class methods serialization in\n migrations\n\n---\n django/db/migrations/serializer.py |  2 +-\n tests/migrations/test_writer.py    | 13 +++++++++++++\n 2 files changed, 14 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e204f..06657ebaabe0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ def serialize(self):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex bef8f64061a4..5ee814d2aff5 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -211,6 +211,10 @@ class NestedChoices(models.TextChoices):\n         X = \"X\", \"X value\"\n         Y = \"Y\", \"Y value\"\n \n+        @classmethod\n+        def method(cls):\n+            return cls.X\n+\n     def safe_exec(self, string, value=None):\n         d = {}\n         try:\n@@ -468,6 +472,15 @@ def test_serialize_nested_class(self):\n                     ),\n                 )\n \n+    def test_serialize_nested_class_method(self):\n+        self.assertSerializedResultEqual(\n+            self.NestedChoices.method,\n+            (\n+                \"migrations.test_writer.WriterTests.NestedChoices.method\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n", "gold_standard_pr_link": "https://github.com/django/django/pull/17087"}