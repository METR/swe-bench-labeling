{"instance_id": "django__django-14089", "score": "C", "diff": "diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\nindex 871b016715..99f9ff2a72 100644\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -25,6 +25,9 @@ class OrderedSet:\n     def __iter__(self):\n         return iter(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict)\n+\n     def __contains__(self, item):\n         return item in self.dict\n \ndiff --git a/test_duplicates.py b/test_duplicates.py\nnew file mode 100644\nindex 0000000000..9964670985\n--- /dev/null\n+++ b/test_duplicates.py\n@@ -0,0 +1,18 @@\n+#!/usr/bin/env python\n+import sys\n+sys.path.insert(0, '.')\n+\n+from django.utils.datastructures import OrderedSet\n+\n+# Test with duplicates in initialization\n+s = OrderedSet([1, 2, 3, 2, 1, 4, 3, 5])\n+print(\"OrderedSet with duplicates:\", list(s))\n+print(\"Reversed:\", list(reversed(s)))\n+\n+# Test adding duplicates\n+s2 = OrderedSet([1, 2, 3])\n+s2.add(2)  # Adding existing element\n+s2.add(4)  # Adding new element\n+s2.add(1)  # Adding existing element\n+print(\"\\nAfter adding duplicates:\", list(s2))\n+print(\"Reversed:\", list(reversed(s2)))\ndiff --git a/test_ordered_set_comprehensive.py b/test_ordered_set_comprehensive.py\nnew file mode 100644\nindex 0000000000..75a4f0db39\n--- /dev/null\n+++ b/test_ordered_set_comprehensive.py\n@@ -0,0 +1,52 @@\n+#!/usr/bin/env python\n+import sys\n+sys.path.insert(0, '.')\n+\n+from django.utils.datastructures import OrderedSet\n+\n+# Test 1: Basic reversed functionality\n+print(\"Test 1: Basic reversed functionality\")\n+s = OrderedSet([1, 2, 3, 4, 5])\n+print(\"Original:\", list(s))\n+print(\"Reversed:\", list(reversed(s)))\n+print()\n+\n+# Test 2: Empty OrderedSet\n+print(\"Test 2: Empty OrderedSet\")\n+s_empty = OrderedSet()\n+print(\"Original:\", list(s_empty))\n+print(\"Reversed:\", list(reversed(s_empty)))\n+print()\n+\n+# Test 3: Single element\n+print(\"Test 3: Single element\")\n+s_single = OrderedSet([42])\n+print(\"Original:\", list(s_single))\n+print(\"Reversed:\", list(reversed(s_single)))\n+print()\n+\n+# Test 4: With strings\n+print(\"Test 4: With strings\")\n+s_strings = OrderedSet(['apple', 'banana', 'cherry'])\n+print(\"Original:\", list(s_strings))\n+print(\"Reversed:\", list(reversed(s_strings)))\n+print()\n+\n+# Test 5: Order preservation after add/remove\n+print(\"Test 5: Order preservation after add/remove\")\n+s_dynamic = OrderedSet([1, 2, 3])\n+s_dynamic.add(4)\n+s_dynamic.add(5)\n+s_dynamic.remove(2)\n+print(\"After modifications:\", list(s_dynamic))\n+print(\"Reversed:\", list(reversed(s_dynamic)))\n+print()\n+\n+# Test 6: Multiple reversed calls\n+print(\"Test 6: Multiple reversed calls\")\n+s_multi = OrderedSet(['a', 'b', 'c'])\n+rev1 = list(reversed(s_multi))\n+rev2 = list(reversed(s_multi))\n+print(\"First reversed:\", rev1)\n+print(\"Second reversed:\", rev2)\n+print(\"Are they equal?\", rev1 == rev2)\ndiff --git a/test_ordered_set_reversed.py b/test_ordered_set_reversed.py\nnew file mode 100644\nindex 0000000000..038cade53a\n--- /dev/null\n+++ b/test_ordered_set_reversed.py\n@@ -0,0 +1,15 @@\n+#!/usr/bin/env python\n+import sys\n+sys.path.insert(0, '.')\n+\n+from django.utils.datastructures import OrderedSet\n+\n+# Test current behavior\n+s = OrderedSet([1, 2, 3, 4, 5])\n+print(\"OrderedSet contents:\", list(s))\n+\n+# Try to use reversed() - this should fail currently\n+try:\n+    print(\"Reversed:\", list(reversed(s)))\n+except TypeError as e:\n+    print(\"Error using reversed():\", e)\ndiff --git a/test_reversed_iterator.py b/test_reversed_iterator.py\nnew file mode 100644\nindex 0000000000..93e6b7099a\n--- /dev/null\n+++ b/test_reversed_iterator.py\n@@ -0,0 +1,24 @@\n+#!/usr/bin/env python\n+import sys\n+sys.path.insert(0, '.')\n+\n+from django.utils.datastructures import OrderedSet\n+\n+# Check that reversed() returns an iterator, not a list\n+s = OrderedSet([1, 2, 3, 4, 5])\n+rev_iter = reversed(s)\n+\n+print(\"Type of reversed(OrderedSet):\", type(rev_iter))\n+print(\"Is it an iterator?\", hasattr(rev_iter, '__iter__') and hasattr(rev_iter, '__next__'))\n+\n+# Consume the iterator one by one\n+print(\"\\nConsuming iterator one by one:\")\n+print(\"First:\", next(rev_iter))\n+print(\"Second:\", next(rev_iter))\n+print(\"Remaining:\", list(rev_iter))\n+\n+# Show that the iterator is exhausted\n+try:\n+    next(rev_iter)\n+except StopIteration:\n+    print(\"\\nIterator is exhausted (StopIteration raised) \u2713\")\ndiff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 45d172f984..a2dd5bde36 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -55,6 +55,25 @@ class OrderedSetTests(SimpleTestCase):\n         s.add(2)\n         self.assertEqual(len(s), 2)\n \n+    def test_reversed(self):\n+        # Test basic reversed functionality\n+        s = OrderedSet([1, 2, 3, 4, 5])\n+        self.assertEqual(list(reversed(s)), [5, 4, 3, 2, 1])\n+        \n+        # Test empty OrderedSet\n+        s_empty = OrderedSet()\n+        self.assertEqual(list(reversed(s_empty)), [])\n+        \n+        # Test single element\n+        s_single = OrderedSet(['a'])\n+        self.assertEqual(list(reversed(s_single)), ['a'])\n+        \n+        # Test order preservation after modifications\n+        s_dynamic = OrderedSet([1, 2, 3])\n+        s_dynamic.add(4)\n+        s_dynamic.remove(2)\n+        self.assertEqual(list(reversed(s_dynamic)), [4, 3, 1])\n+\n \n class MultiValueDictTests(SimpleTestCase):\n \n", "gold_standard_diff": "From 2e5aa444d140a9f2bc858e493ff85ced589f1a58 Mon Sep 17 00:00:00 2001\nFrom: Diego Lima <diego.lima@lais.huol.ufrn.br>\nDate: Sat, 6 Mar 2021 17:41:24 -0300\nSubject: [PATCH] Fixed #32517 -- Made OrderedSet reversible.\n\nRefs #32516.\n---\n django/utils/datastructures.py           | 3 +++\n tests/utils_tests/test_datastructures.py | 7 ++++++-\n 2 files changed, 9 insertions(+), 1 deletion(-)\n\ndiff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\nindex 871b016715b2..99f9ff2a725d 100644\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -25,6 +25,9 @@ def discard(self, item):\n     def __iter__(self):\n         return iter(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict)\n+\n     def __contains__(self, item):\n         return item in self.dict\n \ndiff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 45d172f98413..465f1864ddfa 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,7 +1,7 @@\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n-\n+import collections.abc\n import copy\n import pickle\n \n@@ -34,6 +34,11 @@ def test_discard(self):\n         s.discard(2)\n         self.assertEqual(len(s), 1)\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n     def test_contains(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/14089"}