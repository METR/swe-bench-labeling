{"instance_id": "sympy__sympy-21930", "score": "I", "diff": "diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\nindex d19ee2fc63..c1ba9d9acc 100644\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -478,7 +478,7 @@ def __repr__(self):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b^\\\\dagger_{%s}\" % self.state.name\n+        return \"{b^\\\\dagger_{%s}}\" % self.state.name\n \n B = AnnihilateBoson\n Bd = CreateBoson\n@@ -939,7 +939,7 @@ def __repr__(self):\n         return \"CreateFermion(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"a^\\\\dagger_{%s}\" % self.state.name\n+        return \"{a^\\\\dagger_{%s}}\" % self.state.name\n \n Fd = CreateFermion\n F = AnnihilateFermion\ndiff --git a/test_all_issues.py b/test_all_issues.py\nnew file mode 100644\nindex 0000000000..70c6e6de2a\n--- /dev/null\n+++ b/test_all_issues.py\n@@ -0,0 +1,27 @@\n+import sympy as sp\n+from sympy.physics.secondquant import B, Bd, F, Fd, Commutator\n+from sympy.printing.latex import latex\n+\n+# Test cases\n+a = sp.Symbol('0')\n+\n+print(\"Testing Bosonic operators:\")\n+print(\"Bd(a):\", latex(Bd(a)))\n+print(\"Bd(a)**2:\", latex(Bd(a)**2))\n+print(\"Bd(a)**3:\", latex(Bd(a)**3))\n+print(\"B(a):\", latex(B(a)))\n+print(\"B(a)**2:\", latex(B(a)**2))\n+\n+print(\"\\nTesting Fermionic operators:\")\n+print(\"Fd(a):\", latex(Fd(a)))\n+print(\"Fd(a)**2:\", latex(Fd(a)**2))\n+print(\"Fd(a)**3:\", latex(Fd(a)**3))\n+print(\"F(a):\", latex(F(a)))\n+print(\"F(a)**2:\", latex(F(a)**2))\n+\n+print(\"\\nTesting Commutators:\")\n+comm1 = Commutator(Bd(a)**2, B(a))\n+print(\"Commutator(Bd(a)**2, B(a)):\", latex(comm1))\n+\n+comm2 = Commutator(Fd(a)**2, F(a))\n+print(\"Commutator(Fd(a)**2, F(a)):\", latex(comm2))\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..01b4f59114\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,43 @@\n+import sympy as sp\n+from sympy.physics.secondquant import B, Bd, F, Fd, Commutator, NO, wicks\n+from sympy.printing.latex import latex\n+\n+# Test various cases\n+a = sp.Symbol('a')\n+b = sp.Symbol('b')\n+i = sp.Symbol('i', below_fermi=True)\n+j = sp.Symbol('j', above_fermi=True)\n+\n+print(\"Test 1: Basic operators\")\n+print(\"Bd(a):\", latex(Bd(a)))\n+print(\"B(a):\", latex(B(a)))\n+print(\"Fd(a):\", latex(Fd(a)))\n+print(\"F(a):\", latex(F(a)))\n+\n+print(\"\\nTest 2: Powers\")\n+print(\"Bd(a)**2:\", latex(Bd(a)**2))\n+print(\"Bd(a)**3:\", latex(Bd(a)**3))\n+print(\"Fd(i)**2:\", latex(Fd(i)**2))\n+\n+print(\"\\nTest 3: Products\")\n+print(\"Bd(a)*Bd(b):\", latex(Bd(a)*Bd(b)))\n+print(\"Bd(a)*B(b):\", latex(Bd(a)*B(b)))\n+\n+print(\"\\nTest 4: Commutators\")\n+print(\"Commutator(Bd(a), B(a)):\", latex(Commutator(Bd(a), B(a))))\n+print(\"Commutator(Bd(a)**2, B(b)):\", latex(Commutator(Bd(a)**2, B(b))))\n+\n+print(\"\\nTest 5: Normal ordering\")\n+print(\"NO(Bd(a)*B(a)):\", latex(NO(Bd(a)*B(a))))\n+\n+print(\"\\nTest 6: Complex expressions\")\n+expr = Bd(a)*Bd(b) + B(a)*B(b)\n+print(\"Bd(a)*Bd(b) + B(a)*B(b):\", latex(expr))\n+\n+print(\"\\nTest 7: Numeric indices\")\n+n0 = sp.Symbol('0')\n+n1 = sp.Symbol('1')\n+print(\"Bd(0):\", latex(Bd(n0)))\n+print(\"Bd(1)**2:\", latex(Bd(n1)**2))\n+\n+print(\"\\nAll tests passed!\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..7d0d28fdcb\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,17 @@\n+import sympy as sp\n+from sympy.physics.secondquant import B, Bd, Commutator\n+from sympy.printing.latex import latex\n+\n+# Test case\n+a = sp.Symbol('0')\n+\n+# Test individual operators\n+print(\"Bd(a):\", latex(Bd(a)))\n+print(\"Bd(a)**2:\", latex(Bd(a)**2))\n+\n+# Test the commutator\n+comm = Commutator(Bd(a)**2, B(a))\n+print(\"Commutator:\", latex(comm))\n+\n+# The issue is that Bd(a)**2 produces b^\\dagger_{0}^{2}\n+# which has double superscripts, it should be {b^\\dagger_{0}}^{2}\ndiff --git a/test_issue2.py b/test_issue2.py\nnew file mode 100644\nindex 0000000000..c58fe3223d\n--- /dev/null\n+++ b/test_issue2.py\n@@ -0,0 +1,23 @@\n+import sympy as sp\n+from sympy.physics.secondquant import B, Bd, Commutator\n+from sympy.printing.latex import latex\n+\n+# Test case\n+a = sp.Symbol('0')\n+bd = Bd(a)\n+\n+print(\"Type of Bd(a):\", type(bd))\n+print(\"Is Symbol?\", bd.is_Symbol)\n+print(\"Is Function?\", bd.is_Function)\n+print(\"Bd(a):\", latex(bd))\n+\n+# Check what happens with Pow\n+pow_expr = bd**2\n+print(\"\\nType of Bd(a)**2:\", type(pow_expr))\n+print(\"Base:\", pow_expr.base)\n+print(\"Exp:\", pow_expr.exp)\n+\n+# Check LaTeX printer settings\n+from sympy.printing.latex import LatexPrinter\n+printer = LatexPrinter()\n+print(\"\\nparenthesize_super setting:\", printer._settings.get('parenthesize_super', None))\ndiff --git a/test_latex_output.py b/test_latex_output.py\nnew file mode 100644\nindex 0000000000..4234142628\n--- /dev/null\n+++ b/test_latex_output.py\n@@ -0,0 +1,24 @@\n+import sympy as sp\n+from sympy.physics.secondquant import B, Bd, F, Fd, Commutator\n+from sympy.printing.latex import latex\n+\n+# Test the specific example from the issue\n+a = sp.Symbol('0')\n+comm = Commutator(Bd(a)**2, B(a))\n+latex_output = latex(comm)\n+print(\"LaTeX output:\", latex_output)\n+\n+# Check that the LaTeX output is correct\n+expected = r\"- \\left[b_{0},{b^\\dagger_{0}}^{2}\\right]\"\n+print(\"Expected:\", expected)\n+print(\"Match:\", latex_output == expected)\n+\n+# Additional tests to ensure proper formatting\n+print(\"\\nAdditional tests:\")\n+print(\"Bd(a):\", latex(Bd(a)))\n+print(\"Bd(a)**2:\", latex(Bd(a)**2))\n+print(\"Bd(a)**3:\", latex(Bd(a)**3))\n+\n+# Test that the LaTeX is valid (no double superscripts)\n+assert \"^\\\\dagger\" not in latex(Bd(a)**2).replace(\"{\", \"\").replace(\"}\", \"\")\n+print(\"\\nNo double superscripts found - LaTeX is valid!\")\ndiff --git a/test_latex_rendering.py b/test_latex_rendering.py\nnew file mode 100644\nindex 0000000000..60884df380\n--- /dev/null\n+++ b/test_latex_rendering.py\n@@ -0,0 +1,20 @@\n+import sympy as sp\n+from sympy.physics.secondquant import B, Bd, F, Fd, Commutator\n+from sympy.printing.latex import latex\n+\n+# Test case from the issue\n+a = sp.Symbol('0')\n+\n+print(\"BEFORE FIX (simulated):\")\n+print(\"Bd(a):\", \"b^\\\\dagger_{0}\")\n+print(\"Bd(a)**2:\", \"b^\\\\dagger_{0}^{2}\")  # Double superscript - INVALID LaTeX\n+print(\"Commutator:\", \"- \\\\left[b_{0},b^\\\\dagger_{0}^{2}\\\\right]\")\n+\n+print(\"\\nAFTER FIX (actual):\")\n+print(\"Bd(a):\", latex(Bd(a)))\n+print(\"Bd(a)**2:\", latex(Bd(a)**2))  # Now properly wrapped in braces\n+comm = Commutator(Bd(a)**2, B(a))\n+print(\"Commutator:\", latex(comm))\n+\n+print(\"\\nThe fix ensures that the LaTeX is valid by wrapping the base\")\n+print(\"expression in braces, so {b^\\\\dagger_{0}}^{2} instead of b^\\\\dagger_{0}^{2}\")\n", "gold_standard_diff": "From c609973e8001e4e5396dce8f531112c15cef2c40 Mon Sep 17 00:00:00 2001\nFrom: Oscar Gustafsson <oscar.gustafsson@gmail.com>\nDate: Sun, 22 Aug 2021 22:26:09 +0200\nSubject: [PATCH] Fixed issue #19661\n\n---\n sympy/physics/secondquant.py            |  6 +++---\n sympy/physics/tests/test_secondquant.py | 16 +++++++++++-----\n 2 files changed, 14 insertions(+), 8 deletions(-)\n\ndiff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\nindex d19ee2fc63e4..c01bb76de2b2 100644\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -218,7 +218,7 @@ def _sortkey(cls, index):\n             return (12, label, h)\n \n     def _latex(self, printer):\n-        return \"%s^{%s}_{%s}\" % (\n+        return \"{%s^{%s}_{%s}}\" % (\n             self.symbol,\n             \"\".join([ i.name for i in self.args[1]]),\n             \"\".join([ i.name for i in self.args[2]])\n@@ -478,7 +478,7 @@ def __repr__(self):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b^\\\\dagger_{%s}\" % self.state.name\n+        return \"{b^\\\\dagger_{%s}}\" % self.state.name\n \n B = AnnihilateBoson\n Bd = CreateBoson\n@@ -939,7 +939,7 @@ def __repr__(self):\n         return \"CreateFermion(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"a^\\\\dagger_{%s}\" % self.state.name\n+        return \"{a^\\\\dagger_{%s}}\" % self.state.name\n \n Fd = CreateFermion\n F = AnnihilateFermion\ndiff --git a/sympy/physics/tests/test_secondquant.py b/sympy/physics/tests/test_secondquant.py\nindex 39662ee3189f..eebde16b6411 100644\n--- a/sympy/physics/tests/test_secondquant.py\n+++ b/sympy/physics/tests/test_secondquant.py\n@@ -94,7 +94,7 @@ def test_operator():\n def test_create():\n     i, j, n, m = symbols('i,j,n,m')\n     o = Bd(i)\n-    assert latex(o) == \"b^\\\\dagger_{i}\"\n+    assert latex(o) == \"{b^\\\\dagger_{i}}\"\n     assert isinstance(o, CreateBoson)\n     o = o.subs(i, j)\n     assert o.atoms(Symbol) == {j}\n@@ -258,7 +258,7 @@ def test_commutation():\n     c1 = Commutator(F(a), Fd(a))\n     assert Commutator.eval(c1, c1) == 0\n     c = Commutator(Fd(a)*F(i),Fd(b)*F(j))\n-    assert latex(c) == r'\\left[a^\\dagger_{a} a_{i},a^\\dagger_{b} a_{j}\\right]'\n+    assert latex(c) == r'\\left[{a^\\dagger_{a}} a_{i},{a^\\dagger_{b}} a_{j}\\right]'\n     assert repr(c) == 'Commutator(CreateFermion(a)*AnnihilateFermion(i),CreateFermion(b)*AnnihilateFermion(j))'\n     assert str(c) == '[CreateFermion(a)*AnnihilateFermion(i),CreateFermion(b)*AnnihilateFermion(j)]'\n \n@@ -288,7 +288,7 @@ def test_create_f():\n     assert Dagger(B(p)).apply_operator(q) == q*CreateBoson(p)\n     assert repr(Fd(p)) == 'CreateFermion(p)'\n     assert srepr(Fd(p)) == \"CreateFermion(Symbol('p'))\"\n-    assert latex(Fd(p)) == r'a^\\dagger_{p}'\n+    assert latex(Fd(p)) == r'{a^\\dagger_{p}}'\n \n \n def test_annihilate_f():\n@@ -426,7 +426,7 @@ def test_NO():\n     assert no.has_q_annihilators == -1\n     assert str(no) == ':CreateFermion(a)*CreateFermion(i):'\n     assert repr(no) == 'NO(CreateFermion(a)*CreateFermion(i))'\n-    assert latex(no) == r'\\left\\{a^\\dagger_{a} a^\\dagger_{i}\\right\\}'\n+    assert latex(no) == r'\\left\\{{a^\\dagger_{a}} {a^\\dagger_{i}}\\right\\}'\n     raises(NotImplementedError, lambda:  NO(Bd(p)*F(q)))\n \n \n@@ -531,7 +531,7 @@ def test_Tensors():\n     assert tabij.subs(b, c) == AT('t', (a, c), (i, j))\n     assert (2*tabij).subs(i, c) == 2*AT('t', (a, b), (c, j))\n     assert tabij.symbol == Symbol('t')\n-    assert latex(tabij) == 't^{ab}_{ij}'\n+    assert latex(tabij) == '{t^{ab}_{ij}}'\n     assert str(tabij) == 't((_a, _b),(_i, _j))'\n \n     assert AT('t', (a, a), (i, j)).subs(a, b) == AT('t', (b, b), (i, j))\n@@ -1255,6 +1255,12 @@ def test_internal_external_pqrs_AT():\n         assert substitute_dummies(exprs[0]) == substitute_dummies(permut)\n \n \n+def test_issue_19661():\n+    a = Symbol('0')\n+    assert latex(Commutator(Bd(a)**2, B(a))\n+                 ) == '- \\\\left[b_{0},{b^\\\\dagger_{0}}^{2}\\\\right]'\n+\n+\n def test_canonical_ordering_AntiSymmetricTensor():\n     v = symbols(\"v\")\n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/21930"}