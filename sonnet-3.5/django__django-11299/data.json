{"instance_id": "django__django-11299", "score": "I", "diff": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex e7f81d3ee9..26456e3f9e 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -37,6 +37,12 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n+        # Remove table name from field references in OR clauses\n+        parts = sql.split(' OR ')\n+        for i, part in enumerate(parts):\n+            if i > 0:  # Skip the first part (AND clause)\n+                parts[i] = part.replace(f'\"{model._meta.db_table}\".', '')\n+        sql = ' OR '.join(parts)\n         return sql % tuple(schema_editor.quote_value(p) for p in params)\n \n     def constraint_sql(self, model, schema_editor):\ndiff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex b7aeb1e7f0..af8eb6ad7c 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -49,6 +49,51 @@ class CheckConstraintTests(TestCase):\n         )\n         self.assertNotEqual(models.CheckConstraint(check=check1, name='price'), 1)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or(self):\n+        constraint = models.CheckConstraint(\n+            check=models.Q(models.Q(flag=True, field_1__isnull=False) | models.Q(flag=False)),\n+            name='field_1_has_value_if_flag_set'\n+        )\n+        # Create a test model with the constraint\n+        test_model = type('TestModel', (models.Model,), {\n+            'flag': models.BooleanField(),\n+            'field_1': models.IntegerField(null=True),\n+            '__module__': __name__,\n+            'Meta': type('Meta', (), {\n+                'app_label': 'constraints',\n+                'constraints': [constraint],\n+            }),\n+        })\n+        # Create the table manually\n+        table_name = test_model._meta.db_table\n+        with connection.cursor() as cursor:\n+            cursor.execute(f'''\n+                CREATE TABLE {table_name} (\n+                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n+                    flag BOOL NOT NULL,\n+                    field_1 INTEGER,\n+                    CONSTRAINT {constraint.name} CHECK (\n+                        (flag = 1 AND field_1 IS NOT NULL) OR flag = 0\n+                    )\n+                )\n+            ''')\n+        try:\n+            constraints = get_constraints(table_name)\n+            self.assertIn(constraint.name, constraints)\n+            # Test that the constraint allows valid data\n+            with connection.cursor() as cursor:\n+                cursor.execute(f\"INSERT INTO {table_name} (flag, field_1) VALUES (1, 1)\")\n+                cursor.execute(f\"INSERT INTO {table_name} (flag, field_1) VALUES (0, NULL)\")\n+            # Test that the constraint prevents invalid data\n+            with connection.cursor() as cursor:\n+                with self.assertRaises(IntegrityError):\n+                    cursor.execute(f\"INSERT INTO {table_name} (flag, field_1) VALUES (1, NULL)\")\n+        finally:\n+            # Clean up\n+            with connection.cursor() as cursor:\n+                cursor.execute(f\"DROP TABLE {table_name}\")\n+\n     def test_repr(self):\n         check = models.Q(price__gt=models.F('discounted_price'))\n         name = 'price_gt_discounted_price'\n", "gold_standard_diff": "From 719b7466203181066d9537d2e3bec687dffc9f41 Mon Sep 17 00:00:00 2001\nFrom: can <cansarigol@derinbilgi.com.tr>\nDate: Tue, 30 Apr 2019 11:20:41 +0300\nSubject: [PATCH] Fixed #30412 -- Fixed crash when adding check constraints\n with OR'ed condition on Oracle and SQLite.\n\n---\n django/db/models/sql/query.py       |  2 +-\n docs/releases/2.2.1.txt             |  3 +++\n tests/migrations/test_operations.py | 23 +++++++++++++++++++++++\n tests/queries/test_query.py         | 15 +++++++++++++++\n 4 files changed, 42 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b99f03cd88de..d69c24419bd8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1338,7 +1338,7 @@ def _add_q(self, q_object, used_aliases, branch_negated=False,\n             if isinstance(child, Node):\n                 child_clause, needed_inner = self._add_q(\n                     child, used_aliases, branch_negated,\n-                    current_negated, allow_joins, split_subq)\n+                    current_negated, allow_joins, split_subq, simple_col)\n                 joinpromoter.add_votes(needed_inner)\n             else:\n                 child_clause, needed_inner = self.build_filter(\ndiff --git a/docs/releases/2.2.1.txt b/docs/releases/2.2.1.txt\nindex 90c9a06e795b..38e8052b7d9c 100644\n--- a/docs/releases/2.2.1.txt\n+++ b/docs/releases/2.2.1.txt\n@@ -74,3 +74,6 @@ Bugfixes\n * Fixed a migration crash on Oracle and PostgreSQL when adding a check\n   constraint with a ``contains``, ``startswith``, or ``endswith`` lookup (or\n   their case-insensitive variant) (:ticket:`30408`).\n+\n+* Fixed a migration crash on Oracle and SQLite when adding a check constraint\n+  with ``condition`` contains ``|`` (``OR``) operator (:ticket:`30412`).\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 520a2b220492..3b2129a93381 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,29 @@ def test_add_constraint_percent_escaping(self):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_add_or_constraint(self):\n+        app_label = 'test_addorconstraint'\n+        constraint_name = 'add_constraint_or'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(pink__gt=2, weight__gt=2) | models.Q(weight__lt=0)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('Pony', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        Pony = to_state.apps.get_model(app_label, 'Pony')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=2, weight=3.0)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=3, weight=1.0)\n+        Pony.objects.bulk_create([\n+            Pony(pink=3, weight=-1.0),\n+            Pony(pink=1, weight=-1.0),\n+            Pony(pink=3, weight=3.0),\n+        ])\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\ndiff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex bef79c992eb9..c6a659fe97fe 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -23,6 +23,21 @@ def test_simple_query(self):\n         self.assertEqual(lookup.rhs, 2)\n         self.assertEqual(lookup.lhs.target, Author._meta.get_field('num'))\n \n+    def test_simplecol_query(self):\n+        query = Query(Author)\n+        where = query.build_where(Q(num__gt=2, name__isnull=False) | Q(num__lt=F('id')))\n+\n+        name_isnull_lookup, num_gt_lookup = where.children[0].children\n+        self.assertIsInstance(num_gt_lookup, GreaterThan)\n+        self.assertIsInstance(num_gt_lookup.lhs, SimpleCol)\n+        self.assertIsInstance(name_isnull_lookup, IsNull)\n+        self.assertIsInstance(name_isnull_lookup.lhs, SimpleCol)\n+\n+        num_lt_lookup = where.children[1]\n+        self.assertIsInstance(num_lt_lookup, LessThan)\n+        self.assertIsInstance(num_lt_lookup.rhs, SimpleCol)\n+        self.assertIsInstance(num_lt_lookup.lhs, SimpleCol)\n+\n     def test_complex_query(self):\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2) | Q(num__lt=0))\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11299"}