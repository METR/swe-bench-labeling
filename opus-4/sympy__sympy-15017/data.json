{"instance_id": "sympy__sympy-15017", "score": "I", "diff": "diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\nindex 9be94a8631..a3b91d09df 100644\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -121,7 +121,7 @@ def reshape(self, *newshape):\n         [[1, 2], [3, 4], [5, 6]]\n \n         \"\"\"\n-        new_total_size = functools.reduce(lambda x,y: x*y, newshape)\n+        new_total_size = functools.reduce(lambda x,y: x*y, newshape, 1)\n         if new_total_size != self._loop_size:\n             raise ValueError(\"Invalid reshape parameters \" + newshape)\n \n@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)\n         return self\n \n     def __setitem__(self, index, value):\n@@ -174,7 +174,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)\n         return self\n \n     def __setitem__(self, index, value):\ndiff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 099b291167..1b68b5e657 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -66,6 +66,8 @@ def __new__(cls, iterable, shape=None, **kwargs):\n     def _parse_index(self, index):\n \n         if isinstance(index, (SYMPY_INTS, Integer)):\n+            if self._rank == 0:\n+                raise ValueError(\"index out of range\")\n             if index >= self._loop_size:\n                 raise ValueError(\"index out of range\")\n             return index\ndiff --git a/sympy/tensor/array/sparse_ndim_array.py b/sympy/tensor/array/sparse_ndim_array.py\nindex 72b5d51299..2b9c38fe11 100644\n--- a/sympy/tensor/array/sparse_ndim_array.py\n+++ b/sympy/tensor/array/sparse_ndim_array.py\n@@ -116,7 +116,7 @@ def iterator():\n         return iterator()\n \n     def reshape(self, *newshape):\n-        new_total_size = functools.reduce(lambda x,y: x*y, newshape)\n+        new_total_size = functools.reduce(lambda x,y: x*y, newshape, 1)\n         if new_total_size != self._loop_size:\n             raise ValueError(\"Invalid reshape parameters \" + newshape)\n \n@@ -130,7 +130,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):\n \n         shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)\n         shape = Tuple(*map(_sympify, shape))\n-        loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        loop_size = functools.reduce(lambda x,y: x*y, shape, 1)\n \n         # Sparse array:\n         if isinstance(flat_list, (dict, Dict)):\n@@ -167,7 +167,7 @@ def __new__(cls, iterable=None, shape=None, **kwargs):\n         self = object.__new__(cls)\n         self._shape = shape\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)\n \n         # Sparse array:\n         if isinstance(flat_list, (dict, Dict)):\ndiff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 5a576c44f0..44b317a4c7 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -73,7 +73,7 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\ndiff --git a/test_issue_fix.py b/test_issue_fix.py\nnew file mode 100644\nindex 0000000000..edeffbe0b4\n--- /dev/null\n+++ b/test_issue_fix.py\n@@ -0,0 +1,26 @@\n+#!/usr/bin/env python\n+\"\"\"Test script to verify the fix for rank-0 array len() issue\"\"\"\n+\n+import sympy\n+\n+print(\"Testing the issue fix:\")\n+print(\"=\" * 50)\n+\n+# Create a rank-0 array as shown in the issue\n+a = sympy.Array(3)\n+print(f\"a = sympy.Array(3)\")\n+print(f\"a = {a}\")\n+print(f\"len(a) = {len(a)}\")\n+print(f\"len(list(a)) = {len(list(a))}\")\n+print(f\"list(a) = {list(a)}\")\n+\n+print(\"\\nExpected behavior:\")\n+print(\"- len(a) should return 1 (not 0)\")\n+print(\"- This matches len(list(a)) which is 1\")\n+print(\"- This is consistent with numpy where np.asarray(1).size == 1\")\n+\n+# Test that the fix is correct\n+assert len(a) == 1, \"len(rank-0 array) should be 1\"\n+assert len(a) == len(list(a)), \"len(a) should match len(list(a))\"\n+\n+print(\"\\n\u2713 All tests passed! The issue has been fixed.\")\n", "gold_standard_diff": "diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\nindex 9be94a8631ca..3e04e75891cf 100644\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -149,7 +149,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)\n         return self\n \n     def __setitem__(self, index, value):\ndiff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 5a576c44f068..326ffd2266b5 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -9,6 +9,10 @@\n \n \n def test_ndim_array_initiation():\n+    arr_with_no_elements = ImmutableDenseNDimArray([], shape=(0,))\n+    assert len(arr_with_no_elements) == 0\n+    assert arr_with_no_elements.rank() == 1\n+\n     arr_with_one_element = ImmutableDenseNDimArray([23])\n     assert len(arr_with_one_element) == 1\n     assert arr_with_one_element[0] == 23\n@@ -73,11 +77,11 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    assert rank_zero_array[0] == x\n \n \n def test_reshape():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/15017"}