From 4ceedc102ddaeb7926a66ae9d6e672dd4060f4b1 Mon Sep 17 00:00:00 2001
From: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date: Sat, 15 May 2021 16:09:23 +0900
Subject: [PATCH] Close #8061, #9218: autodoc: Support variable comment for
 alias classes

---
 CHANGES                                        |  1 +
 sphinx/ext/autodoc/__init__.py                 | 17 +++++++++++++++--
 tests/roots/test-ext-autodoc/target/classes.py |  3 +++
 tests/test_ext_autodoc_autoclass.py            | 12 ++++++++++++
 4 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/CHANGES b/CHANGES
index 3ef0bb53eaf..c81f9a4b4d3 100644
--- a/CHANGES
+++ b/CHANGES
@@ -28,6 +28,7 @@ Features added
 * #9195: autodoc: The arguments of ``typing.Literal`` are wrongly rendered
 * #9185: autodoc: :confval:`autodoc_typehints` allows ``'both'`` setting to
   allow typehints to be included both in the signature and description
+* #8061, #9218: autodoc: Support variable comment for alias classes
 * #3257: autosummary: Support instance attributes for classes
 * #9129: html search: Show search summaries when html_copy_source = False
 * #9120: html theme: Eliminate prompt characters of code-block from copyable
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index c6449613992..1658376b7ba 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1661,7 +1661,11 @@ def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
         if self.doc_as_attr:
             # Don't show the docstring of the class when it is an alias.
-            return None
+            comment = self.get_variable_comment()
+            if comment:
+                return []
+            else:
+                return None
 
         lines = getattr(self, '_new_docstrings', None)
         if lines is not None:
@@ -1706,9 +1710,18 @@ def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:
         tab_width = self.directive.state.document.settings.tab_width
         return [prepare_docstring(docstring, ignore, tab_width) for docstring in docstrings]
 
+    def get_variable_comment(self) -> Optional[List[str]]:
+        try:
+            key = ('', '.'.join(self.objpath))
+            analyzer = ModuleAnalyzer.for_module(self.get_real_modname())
+            analyzer.analyze()
+            return list(self.analyzer.attr_docs.get(key, []))
+        except PycodeError:
+            return None
+
     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False
                     ) -> None:
-        if self.doc_as_attr:
+        if self.doc_as_attr and not self.get_variable_comment():
             try:
                 more_content = StringList([_('alias of %s') % restify(self.object)], source='')
             except AttributeError:
diff --git a/tests/roots/test-ext-autodoc/target/classes.py b/tests/roots/test-ext-autodoc/target/classes.py
index a3b4c64774d..7526e65bc74 100644
--- a/tests/roots/test-ext-autodoc/target/classes.py
+++ b/tests/roots/test-ext-autodoc/target/classes.py
@@ -30,3 +30,6 @@ class Quux(List[Union[int, float]]):
 
 
 Alias = Foo
+
+#: docstring
+OtherAlias = Bar
diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py
index 096dc939738..ee0c00ae27f 100644
--- a/tests/test_ext_autodoc_autoclass.py
+++ b/tests/test_ext_autodoc_autoclass.py
@@ -327,3 +327,15 @@ def autodoc_process_docstring(*args):
         '',
         '   alias of :class:`target.classes.Foo`',
     ]
+
+
+def test_class_alias_having_doccomment(app):
+    actual = do_autodoc(app, 'class', 'target.classes.OtherAlias')
+    assert list(actual) == [
+        '',
+        '.. py:attribute:: OtherAlias',
+        '   :module: target.classes',
+        '',
+        '   docstring',
+        '',
+    ]
