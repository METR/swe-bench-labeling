{"instance_id": "django__django-12193", "score": "C", "diff": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 6fe220bea7..ddd052be8d 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -524,6 +524,8 @@ class CheckboxInput(Input):\n         if self.check_test(value):\n             if attrs is None:\n                 attrs = {}\n+            else:\n+                attrs = attrs.copy()\n             attrs['checked'] = True\n         return super().get_context(name, value, attrs)\n \ndiff --git a/test_checkbox_issue.py b/test_checkbox_issue.py\nnew file mode 100644\nindex 0000000000..80bb456dc8\n--- /dev/null\n+++ b/test_checkbox_issue.py\n@@ -0,0 +1,53 @@\n+\"\"\"Direct test to show the CheckboxInput issue.\"\"\"\n+import os\n+import sys\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n+\n+import django\n+from django.conf import settings\n+\n+# Configure minimal settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django.forms.widgets import CheckboxInput\n+\n+def test_checkbox_input_mutates_attrs():\n+    \"\"\"Test that shows CheckboxInput modifies the attrs dict passed to it.\"\"\"\n+    \n+    # Create a CheckboxInput widget\n+    checkbox = CheckboxInput()\n+    \n+    # Create a shared attrs dict\n+    shared_attrs = {'class': 'my-checkbox'}\n+    \n+    print(\"Initial shared_attrs:\", shared_attrs)\n+    \n+    # Call get_context with value=True (checkbox should be checked)\n+    context1 = checkbox.get_context('checkbox1', True, shared_attrs)\n+    print(\"After first call with True value:\", shared_attrs)\n+    \n+    # Call get_context with value=False (checkbox should NOT be checked)\n+    # But since the attrs dict was modified, it will still have checked=True\n+    context2 = checkbox.get_context('checkbox2', False, shared_attrs)\n+    print(\"After second call with False value:\", shared_attrs)\n+    \n+    # The issue: shared_attrs now has 'checked': True even though \n+    # the second checkbox should not be checked\n+    assert 'checked' in shared_attrs, \"CheckboxInput modified the attrs dict!\"\n+    \n+    print(\"\\nThis demonstrates the bug: CheckboxInput mutates the attrs dict\")\n+    print(\"passed to get_context(), causing subsequent widgets to inherit\")\n+    print(\"the 'checked' attribute.\")\n+\n+if __name__ == \"__main__\":\n+    test_checkbox_input_mutates_attrs()\ndiff --git a/test_fix_verification.py b/test_fix_verification.py\nnew file mode 100644\nindex 0000000000..23ba99c083\n--- /dev/null\n+++ b/test_fix_verification.py\n@@ -0,0 +1,56 @@\n+\"\"\"Test to verify the CheckboxInput fix.\"\"\"\n+import os\n+import sys\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n+\n+import django\n+from django.conf import settings\n+\n+# Configure minimal settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django.forms.widgets import CheckboxInput\n+\n+def test_checkbox_input_fix():\n+    \"\"\"Test that CheckboxInput no longer modifies the attrs dict passed to it.\"\"\"\n+    \n+    # Create a CheckboxInput widget\n+    checkbox = CheckboxInput()\n+    \n+    # Create a shared attrs dict\n+    shared_attrs = {'class': 'my-checkbox'}\n+    \n+    print(\"Initial shared_attrs:\", shared_attrs)\n+    \n+    # Call get_context with value=True (checkbox should be checked)\n+    context1 = checkbox.get_context('checkbox1', True, shared_attrs)\n+    print(\"After first call with True value:\", shared_attrs)\n+    print(\"Context 1 attrs:\", context1['widget']['attrs'])\n+    \n+    # Call get_context with value=False (checkbox should NOT be checked)\n+    context2 = checkbox.get_context('checkbox2', False, shared_attrs)\n+    print(\"After second call with False value:\", shared_attrs)\n+    print(\"Context 2 attrs:\", context2['widget']['attrs'])\n+    \n+    # Verify the fix: shared_attrs should NOT be modified\n+    assert 'checked' not in shared_attrs, \"CheckboxInput should not modify the original attrs dict!\"\n+    \n+    # Verify that the contexts have the correct checked state\n+    assert context1['widget']['attrs'].get('checked') == True, \"First checkbox should be checked\"\n+    assert 'checked' not in context2['widget']['attrs'], \"Second checkbox should not be checked\"\n+    \n+    print(\"\\nSUCCESS: CheckboxInput no longer mutates the attrs dict!\")\n+    print(\"Each widget gets the correct checked state.\")\n+\n+if __name__ == \"__main__\":\n+    test_checkbox_input_fix()\ndiff --git a/test_issue_simple.py b/test_issue_simple.py\nnew file mode 100644\nindex 0000000000..3a20cd3988\n--- /dev/null\n+++ b/test_issue_simple.py\n@@ -0,0 +1,79 @@\n+\"\"\"Test to reproduce the SplitArrayField BooleanField issue.\"\"\"\n+import os\n+import sys\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n+\n+import django\n+from django.conf import settings\n+\n+# Configure minimal settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+# Now import the forms\n+from django import forms\n+\n+# Import SplitArrayWidget and SplitArrayField directly from the file\n+import importlib.util\n+spec = importlib.util.spec_from_file_location(\"array\", \"/testbed/django/contrib/postgres/forms/array.py\")\n+array_module = importlib.util.module_from_spec(spec)\n+spec.loader.exec_module(array_module)\n+SplitArrayField = array_module.SplitArrayField\n+SplitArrayWidget = array_module.SplitArrayWidget\n+\n+def test_split_array_boolean_issue():\n+    \"\"\"Test that demonstrates the bug with SplitArrayField and BooleanField.\"\"\"\n+    \n+    # Create a form with SplitArrayField containing BooleanFields\n+    class TestForm(forms.Form):\n+        array_field = SplitArrayField(forms.BooleanField(required=False), size=5)\n+    \n+    # Initial data: [False, True, False, False, False]\n+    # Expected: only the second checkbox should be checked\n+    initial_data = {'array_field': [False, True, False, False, False]}\n+    form = TestForm(initial=initial_data)\n+    \n+    # Get the widget and render it\n+    field = form.fields['array_field']\n+    widget = field.widget\n+    \n+    # Render the widget\n+    context = widget.get_context('array_field', initial_data['array_field'], {})\n+    \n+    # Check each subwidget\n+    print(\"Checking subwidgets:\")\n+    for i, subwidget in enumerate(context['widget']['subwidgets']):\n+        is_checked = subwidget.get('attrs', {}).get('checked', False)\n+        expected = initial_data['array_field'][i]\n+        status = \"OK\" if is_checked == expected else \"FAIL\"\n+        print(f\"  Widget {i}: checked={is_checked}, expected={expected} - {status}\")\n+    \n+    # Count how many are checked\n+    checked_count = sum(1 for sw in context['widget']['subwidgets'] \n+                       if sw.get('attrs', {}).get('checked', False))\n+    \n+    print(f\"\\nTotal checked: {checked_count} (expected: 1)\")\n+    \n+    # This should fail because of the bug\n+    assert checked_count == 1, f\"Expected 1 checkbox to be checked, but found {checked_count}\"\n+\n+if __name__ == \"__main__\":\n+    test_split_array_boolean_issue()\ndiff --git a/test_split_array_boolean.py b/test_split_array_boolean.py\nnew file mode 100644\nindex 0000000000..9a776d3ac2\n--- /dev/null\n+++ b/test_split_array_boolean.py\n@@ -0,0 +1,42 @@\n+import sys\n+import os\n+sys.path.insert(0, '/testbed')\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.postgres_tests.settings')\n+\n+import django\n+django.setup()\n+\n+from django import forms\n+from django.contrib.postgres.forms.array import SplitArrayField\n+\n+# Test case to reproduce the issue  \n+def test_split_array_boolean_field():\n+    class TestForm(forms.Form):\n+        array_field = SplitArrayField(forms.BooleanField(required=False), size=5)\n+    \n+    # Create form with initial data: [False, True, False, False, False]\n+    initial_data = {'array_field': [False, True, False, False, False]}\n+    form = TestForm(initial=initial_data)\n+    \n+    # Render the form\n+    html = str(form)\n+    print(\"Form HTML:\")\n+    print(html)\n+    \n+    # Check if the checkboxes have the correct checked state\n+    import re\n+    checkbox_pattern = r'<input[^>]*name=\"array_field_(\\d+)\"[^>]*>'\n+    checkboxes = re.findall(checkbox_pattern, html)\n+    \n+    print(\"\\nAnalyzing checkboxes:\")\n+    for i in range(5):\n+        checkbox_html = re.search(r'<input[^>]*name=\"array_field_' + str(i) + r'\"[^>]*>', html)\n+        if checkbox_html:\n+            checkbox_str = checkbox_html.group(0)\n+            is_checked = 'checked' in checkbox_str\n+            expected = initial_data['array_field'][i]\n+            print(f\"Checkbox {i}: checked={is_checked}, expected={expected}, OK={is_checked == expected}\")\n+            print(f\"  HTML: {checkbox_str}\")\n+\n+if __name__ == \"__main__\":\n+    test_split_array_boolean_field()\ndiff --git a/test_split_array_fix.py b/test_split_array_fix.py\nnew file mode 100644\nindex 0000000000..ad4ab3b7ab\n--- /dev/null\n+++ b/test_split_array_fix.py\n@@ -0,0 +1,76 @@\n+\"\"\"Test to verify the SplitArrayField BooleanField fix.\"\"\"\n+import os\n+import sys\n+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n+\n+# Configure Django\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'django.conf.global_settings'\n+\n+import django\n+from django.conf import settings\n+\n+# Configure minimal settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    TEMPLATES=[{\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    }],\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+django.setup()\n+\n+from django import forms\n+# Direct import to simulate SplitArrayWidget behavior\n+from django.forms.widgets import CheckboxInput\n+\n+def test_split_array_widget_simulation():\n+    \"\"\"Simulate the SplitArrayWidget behavior with BooleanField.\"\"\"\n+    \n+    print(\"Simulating SplitArrayWidget behavior with CheckboxInput...\")\n+    \n+    # Create checkbox widget (like BooleanField does)\n+    checkbox = CheckboxInput()\n+    \n+    # Simulate the SplitArrayWidget.get_context loop\n+    values = [False, True, False, False, False]\n+    final_attrs = {'class': 'array-widget'}  # Shared attrs dict\n+    \n+    subwidgets = []\n+    for i, value in enumerate(values):\n+        # This simulates what happens in SplitArrayWidget.get_context\n+        widget_context = checkbox.get_context(f'array_{i}', value, final_attrs)\n+        subwidgets.append(widget_context['widget'])\n+        \n+        # Print status\n+        is_checked = widget_context['widget']['attrs'].get('checked', False)\n+        print(f\"Widget {i}: value={value}, checked={is_checked}, OK={is_checked == value}\")\n+    \n+    # Verify results\n+    checked_count = sum(1 for sw in subwidgets if sw['attrs'].get('checked', False))\n+    print(f\"\\nTotal checked: {checked_count} (expected: 1)\")\n+    \n+    # Check that only widget 1 (with value=True) is checked\n+    for i, (sw, expected) in enumerate(zip(subwidgets, values)):\n+        is_checked = sw['attrs'].get('checked', False)\n+        assert is_checked == expected, f\"Widget {i} has incorrect checked state: {is_checked} != {expected}\"\n+    \n+    print(\"SUCCESS: All widgets have correct checked state!\")\n+\n+if __name__ == \"__main__\":\n+    test_split_array_widget_simulation()\ndiff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 6483b7f211..d9ee6c5ed1 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -89,3 +89,19 @@ class CheckboxInputTest(WidgetTest):\n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+\n+    def test_get_context_does_not_mutate_attrs(self):\n+        \"\"\"\n+        The CheckboxInput widget should not mutate the attrs dict passed to\n+        get_context() (#<issue_number>).\n+        \"\"\"\n+        attrs = {'class': 'my-checkbox'}\n+        # First call with value=True\n+        context1 = self.widget.get_context('cb1', True, attrs)\n+        self.assertNotIn('checked', attrs)  # attrs should not be mutated\n+        self.assertIn('checked', context1['widget']['attrs'])  # but context should have it\n+        \n+        # Second call with value=False using the same attrs dict\n+        context2 = self.widget.get_context('cb2', False, attrs)\n+        self.assertNotIn('checked', attrs)  # attrs still should not be mutated\n+        self.assertNotIn('checked', context2['widget']['attrs'])  # and context should not have it\ndiff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 481d93f830..3f59432617 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1010,6 +1010,27 @@ class TestSplitFormField(PostgreSQLSimpleTestCase):\n             'Item 3 in the array did not validate: Ensure this value has at most 2 characters (it has 4).',\n         ])\n \n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n+    def test_boolean_field_rendering(self):\n+        \"\"\"Test that BooleanField widgets maintain correct checked state.\"\"\"\n+        class SplitForm(forms.Form):\n+            array = SplitArrayField(forms.BooleanField(required=False), size=5)\n+\n+        # Test with [False, True, False, False, False]\n+        form = SplitForm(initial={'array': [False, True, False, False, False]})\n+        html = str(form)\n+        \n+        # Count how many checkboxes are checked\n+        import re\n+        checkboxes = re.findall(r'<input[^>]*name=\"array_\\d+\"[^>]*>', html)\n+        checked_count = sum(1 for cb in checkboxes if 'checked' in cb)\n+        \n+        # Only the second checkbox (index 1) should be checked\n+        self.assertEqual(checked_count, 1)\n+        \n+        # Verify that the second checkbox is the one that's checked\n+        self.assertIn('name=\"array_1\"', re.search(r'<input[^>]*checked[^>]*>', html).group(0))\n+\n     def test_splitarraywidget_value_omitted_from_data(self):\n         class Form(forms.ModelForm):\n             field = SplitArrayField(forms.IntegerField(), required=False, size=2)\n", "gold_standard_diff": "From 02eff7ef60466da108b1a33f1e4dc01eec45c99d Mon Sep 17 00:00:00 2001\nFrom: Peter Andersen <peter@porksmash.com>\nDate: Mon, 9 Dec 2019 08:54:40 -0800\nSubject: [PATCH] Fixed #31073 -- Prevented CheckboxInput.get_context() from\n mutating attrs.\n\n---\n django/forms/widgets.py                              |  4 +---\n tests/forms_tests/widget_tests/test_checkboxinput.py |  5 +++++\n tests/postgres_tests/test_array.py                   | 11 +++++++++++\n 3 files changed, 17 insertions(+), 3 deletions(-)\n\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 6fe220bea703..d83d63c16971 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -522,9 +522,7 @@ def format_value(self, value):\n \n     def get_context(self, name, value, attrs):\n         if self.check_test(value):\n-            if attrs is None:\n-                attrs = {}\n-            attrs['checked'] = True\n+            attrs = {**(attrs or {}), 'checked': True}\n         return super().get_context(name, value, attrs)\n \n     def value_from_datadict(self, data, files, name):\ndiff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 6483b7f2115f..8dba2178c9db 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -89,3 +89,8 @@ def test_value_from_datadict_string_int(self):\n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+\n+    def test_get_context_does_not_mutate_attrs(self):\n+        attrs = {'checked': False}\n+        self.widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\ndiff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 481d93f830e4..ee66fbcd60c2 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,17 @@ def test_get_context(self):\n             }\n         )\n \n+    def test_checkbox_get_context_attrs(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=2,\n+        ).get_context('name', [True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12193"}