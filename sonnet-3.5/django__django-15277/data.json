{"instance_id": "django__django-15277", "score": "C", "diff": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523346..88c9ca9f28 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n", "gold_standard_diff": "From b894199eb08d9162e70f7115f91e1e9d2030fc9f Mon Sep 17 00:00:00 2001\nFrom: Keryn Knight <keryn@kerynknight.com>\nDate: Tue, 4 Jan 2022 05:30:16 +0100\nSubject: [PATCH 1/2] Refs #33406 -- Added test for not creating broken\n validators when resolving Value.output_field.\n\n---\n tests/expressions/tests.py | 23 +++++++++++++++++++++++\n 1 file changed, 23 insertions(+)\n\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 13c7e2b2127b..b622c3a9aab7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1852,6 +1852,29 @@ def test_resolve_output_field_failure(self):\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n \n class ExistsTests(TestCase):\n     def test_optimizations(self):\n\nFrom 0ed2919814c80e31626dffdb6b80d0c20d43452f Mon Sep 17 00:00:00 2001\nFrom: Keryn Knight <keryn@kerynknight.com>\nDate: Mon, 3 Jan 2022 11:29:24 +0000\nSubject: [PATCH 2/2] Fixed #33406 -- Avoided creation of\n MaxLengthValidator(None) when resolving Value.output_field for strings.\n\nThis brings the behaviour in line with Field subclasses which append to\nthe validators within __init__(), like BinaryField, and prevents the\ncreation of a validator which incorrectly throws a TypeError, if it\nwere used.\n---\n django/db/models/fields/__init__.py | 3 ++-\n tests/expressions/tests.py          | 1 +\n 2 files changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b52334627..88c9ca9f2849 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex b622c3a9aab7..9fd31d550c9b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1859,6 +1859,7 @@ def test_output_field_does_not_create_broken_validators(self):\n         and this demonstrates that they don't throw an exception.\n         \"\"\"\n         value_types = [\n+            'str',\n             True,\n             42,\n             3.14,\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15277"}