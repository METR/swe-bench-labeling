{"instance_id": "sympy__sympy-13615", "score": "I", "diff": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 917717bb74..0320cb09ae 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1719,17 +1719,32 @@ def reduce(A, B):\n         Simplify a :class:`Complement`.\n \n         \"\"\"\n-        if B == S.UniversalSet or A.is_subset(B):\n+        if B == S.UniversalSet:\n             return EmptySet()\n \n         if isinstance(B, Union):\n             return Intersection(s.complement(A) for s in B.args)\n \n-        result = B._complement(A)\n-        if result != None:\n-            return result\n-        else:\n-            return Complement(A, B, evaluate=False)\n+        if isinstance(A, FiniteSet):\n+            # Handle the case where A contains both symbols and numbers\n+            numeric_elements = [elem for elem in A if elem.is_number]\n+            symbolic_elements = [elem for elem in A if not elem.is_number]\n+            \n+            if isinstance(B, Interval):\n+                numeric_complement = FiniteSet(*[elem for elem in numeric_elements if elem < B.start or elem > B.end])\n+            elif isinstance(B, FiniteSet):\n+                numeric_complement = FiniteSet(*[elem for elem in numeric_elements if elem not in B])\n+            else:\n+                # For other set types, we can't determine the complement of numeric elements\n+                numeric_complement = FiniteSet(*numeric_elements)\n+            \n+            if symbolic_elements:\n+                return Union(numeric_complement, FiniteSet(*symbolic_elements))\n+            else:\n+                return numeric_complement\n+\n+        # For all other cases, return the unevaluated Complement\n+        return Complement(A, B, evaluate=False)\n \n     def _contains(self, other):\n         A = self.args[0]\n", "gold_standard_diff": "From 3a87abbfdac36ca6ead627c47c1876889bf79948 Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Fri, 17 Nov 2017 01:40:44 +0530\nSubject: [PATCH 1/9] fixed bug in finding Complement\n\n---\n sympy/sets/sets.py | 12 ++++++++++--\n 1 file changed, 10 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 773096d6e9b2..4268d55fa20e 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -215,8 +215,16 @@ def _complement(self, other):\n         elif isinstance(other, EmptySet):\n             return S.EmptySet\n \n-        elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+        elif isinstance(other, FiniteSet): \n+            both_l = non_num, num = [], []\n+            for el in other:\n+                both_l[el.is_number].append(el)\n+            non_num = FiniteSet(*non_num)\n+            out_range = FiniteSet(*[el for el in num if self.contains(el) != True])\n+            if non_num:\n+                return Union(out_range, Complement(non_num , self , evaluate =False))\n+            else:\n+                return out_range\n \n     def symmetric_difference(self, other):\n         \"\"\"\n\nFrom afd1e1a6390a8e693f19cd32b357041513058dc6 Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Fri, 17 Nov 2017 01:41:02 +0530\nSubject: [PATCH 2/9] added tests\n\n---\n sympy/sets/tests/test_sets.py | 4 ++++\n 1 file changed, 4 insertions(+)\n\ndiff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 8c59d85b2045..8673d56db3cd 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -187,6 +187,10 @@ def test_Complement():\n \n     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n+    # isssue 12712\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+            Complement(FiniteSet(x, y), Interval(-10, 10)) \n+\n \n def test_complement():\n     assert Interval(0, 1).complement(S.Reals) == \\\n\nFrom f18d22c8bf95c5d11d43cc9fcbb14b8f900ac7a9 Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Fri, 17 Nov 2017 01:43:25 +0530\nSubject: [PATCH 3/9] removed whitespace errors\n\n---\n sympy/sets/sets.py            | 2 +-\n sympy/sets/tests/test_sets.py | 2 +-\n 2 files changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 4268d55fa20e..e3b40838a277 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -215,7 +215,7 @@ def _complement(self, other):\n         elif isinstance(other, EmptySet):\n             return S.EmptySet\n \n-        elif isinstance(other, FiniteSet): \n+        elif isinstance(other, FiniteSet):\n             both_l = non_num, num = [], []\n             for el in other:\n                 both_l[el.is_number].append(el)\ndiff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 8673d56db3cd..f4d0483197ed 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -189,7 +189,7 @@ def test_Complement():\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n     # isssue 12712\n     assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n-            Complement(FiniteSet(x, y), Interval(-10, 10)) \n+            Complement(FiniteSet(x, y), Interval(-10, 10))\n \n \n def test_complement():\n\nFrom 3d5846014f8c6074cd8adc3f91e0bce12ed5f064 Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Fri, 17 Nov 2017 12:51:15 +0530\nSubject: [PATCH 4/9] improved code qulaity\n\n---\n sympy/sets/sets.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e3b40838a277..6876985fdcef 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -222,7 +222,7 @@ def _complement(self, other):\n             non_num = FiniteSet(*non_num)\n             out_range = FiniteSet(*[el for el in num if self.contains(el) != True])\n             if non_num:\n-                return Union(out_range, Complement(non_num , self , evaluate =False))\n+                return Union(out_range, Complement(non_num, self, evaluate = False))\n             else:\n                 return out_range\n \n\nFrom 2c6c7e4dd3311e43d22764f4522a1657ccc0a1fd Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Fri, 17 Nov 2017 16:13:38 +0530\nSubject: [PATCH 5/9] updated condition\n\n---\n sympy/sets/sets.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 6876985fdcef..d05ceb9a826e 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -220,7 +220,7 @@ def _complement(self, other):\n             for el in other:\n                 both_l[el.is_number].append(el)\n             non_num = FiniteSet(*non_num)\n-            out_range = FiniteSet(*[el for el in num if self.contains(el) != True])\n+            out_range = FiniteSet(*[el for el in num if self.contains(el) == False])\n             if non_num:\n                 return Union(out_range, Complement(non_num, self, evaluate = False))\n             else:\n\nFrom d25a5983752629f55d5ba191c79c66d15c3069d2 Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Fri, 17 Nov 2017 20:46:22 +0530\nSubject: [PATCH 6/9] updated condition for None\n\n---\n sympy/sets/sets.py | 12 +++++-------\n 1 file changed, 5 insertions(+), 7 deletions(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d05ceb9a826e..a8aec26d73f8 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -216,13 +216,11 @@ def _complement(self, other):\n             return S.EmptySet\n \n         elif isinstance(other, FiniteSet):\n-            both_l = non_num, num = [], []\n-            for el in other:\n-                both_l[el.is_number].append(el)\n-            non_num = FiniteSet(*non_num)\n-            out_range = FiniteSet(*[el for el in num if self.contains(el) == False])\n-            if non_num:\n-                return Union(out_range, Complement(non_num, self, evaluate = False))\n+\n+            none_range = FiniteSet(*[el for el in other if self.contains(el) not in [True, False]])\n+            out_range = FiniteSet(*[el for el in other if self.contains(el) == False])\n+            if none_range:\n+                return Union(out_range, Complement(none_range, self, evaluate = False))\n             else:\n                 return out_range\n \n\nFrom 0792dc0ada835c1b9285148bdf982bd2f1cf3feb Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Sun, 19 Nov 2017 06:26:48 +0530\nSubject: [PATCH 7/9] removed spaces\n\n---\n sympy/sets/sets.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex a8aec26d73f8..b28bfb99af20 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -220,7 +220,7 @@ def _complement(self, other):\n             none_range = FiniteSet(*[el for el in other if self.contains(el) not in [True, False]])\n             out_range = FiniteSet(*[el for el in other if self.contains(el) == False])\n             if none_range:\n-                return Union(out_range, Complement(none_range, self, evaluate = False))\n+                return Union(out_range, Complement(none_range, self, evaluate=False))\n             else:\n                 return out_range\n \n\nFrom 0837cd5448f03575eaccd3f4ef4178ed03946cf7 Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Mon, 20 Nov 2017 11:11:45 +0530\nSubject: [PATCH 8/9] added a ternary_sift function\n\n---\n sympy/sets/sets.py | 16 ++++++++++------\n 1 file changed, 10 insertions(+), 6 deletions(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 632ea858532f..ee05e00f421e 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -217,13 +217,17 @@ def _complement(self, other):\n             return S.EmptySet\n \n         elif isinstance(other, FiniteSet):\n+            from sympy.utilities.iterables import sift\n \n-            none_range = FiniteSet(*[el for el in other if self.contains(el) not in [True, False]])\n-            out_range = FiniteSet(*[el for el in other if self.contains(el) == False])\n-            if none_range:\n-                return Union(out_range, Complement(none_range, self, evaluate=False))\n-            else:\n-                return out_range\n+            def ternary_sift(el):\n+                contains = self.contains(el)\n+                return contains if contains in [True, False] else None\n+\n+            sifted = sift(other, lambda i: ternary_sift(i))\n+            # ignore those that are contained in self\n+            return Union(FiniteSet(*(sifted[False])),\n+                Complement(FiniteSet(*(sifted[None])), self, evaluate=False)\n+                if sifted[None] else S.EmptySet)\n \n     def symmetric_difference(self, other):\n         \"\"\"\n\nFrom 98df0946fba625988de13eed6ef414ab7e29b183 Mon Sep 17 00:00:00 2001\nFrom: ashishkg0022 <ashishkg0022@gmail.com>\nDate: Mon, 20 Nov 2017 17:34:14 +0530\nSubject: [PATCH 9/9] update function passing\n\n---\n sympy/sets/sets.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex ee05e00f421e..659b778808ae 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -223,7 +223,7 @@ def ternary_sift(el):\n                 contains = self.contains(el)\n                 return contains if contains in [True, False] else None\n \n-            sifted = sift(other, lambda i: ternary_sift(i))\n+            sifted = sift(other, ternary_sift)\n             # ignore those that are contained in self\n             return Union(FiniteSet(*(sifted[False])),\n                 Complement(FiniteSet(*(sifted[None])), self, evaluate=False)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13615"}