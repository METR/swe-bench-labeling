{"instance_id": "sympy__sympy-18763", "score": "I", "diff": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8743723ea0..62699aca53 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -698,7 +698,11 @@ def _print_Derivative(self, expr):\n \n     def _print_Subs(self, subs):\n         expr, old, new = subs.args\n-        latex_expr = self._print(expr)\n+        # Only parenthesize if the expression is Add (to handle cases like -x + y)\n+        if expr.is_Add:\n+            latex_expr = r\"\\left(%s\\right)\" % self._print(expr)\n+        else:\n+            latex_expr = self._print(expr)\n         latex_old = (self._print(e) for e in old)\n         latex_new = (self._print(e) for e in new)\n         latex_subs = r'\\\\ '.join(\ndiff --git a/test_issue_fix.py b/test_issue_fix.py\nnew file mode 100644\nindex 0000000000..bd3eb8d96a\n--- /dev/null\n+++ b/test_issue_fix.py\n@@ -0,0 +1,33 @@\n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n+# Test the specific case mentioned in the issue\n+expr = 3*Subs(-x+y, (x,), (1,))\n+result = latex(expr)\n+expected = r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+print(f\"Expression: {expr}\")\n+print(f\"LaTeX result: {result}\")\n+print(f\"Expected: {expected}\")\n+print(f\"Test {'PASSED' if result == expected else 'FAILED'}\")\n+\n+# Additional test cases to ensure we don't break anything\n+test_cases = [\n+    (Subs(x*y, (x, y), (1, 2)), r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'),\n+    (Subs(x+y, (x,), (1,)), r'\\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'),\n+    (2*Subs(x*y, (x,), (1,)), r'2 \\left. x y \\right|_{\\substack{ x=1 }}'),\n+    (Subs(x**2, (x,), (1,)), r'\\left. x^{2} \\right|_{\\substack{ x=1 }}'),\n+]\n+\n+print(\"\\nAdditional test cases:\")\n+all_pass = True\n+for expr, expected in test_cases:\n+    result = latex(expr)\n+    passed = result == expected\n+    all_pass = all_pass and passed\n+    print(f\"  {expr}: {'PASSED' if passed else 'FAILED'}\")\n+    if not passed:\n+        print(f\"    Expected: {expected}\")\n+        print(f\"    Got: {result}\")\n+\n+print(f\"\\nOverall: {'All tests PASSED' if all_pass else 'Some tests FAILED'}\")\ndiff --git a/test_subs_latex.py b/test_subs_latex.py\nnew file mode 100644\nindex 0000000000..64309e17be\n--- /dev/null\n+++ b/test_subs_latex.py\n@@ -0,0 +1,30 @@\n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n+# Test the issue\n+expr = 3*Subs(-x+y, (x,), (1,))\n+print(\"Expression:\", expr)\n+print(\"Current LaTeX:\", latex(expr))\n+print(\"Expected LaTeX:\", r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}')\n+\n+# Let's also test some other cases\n+expr2 = Subs(-x+y, (x,), (1,))\n+print(\"\\nExpression:\", expr2)\n+print(\"Current LaTeX:\", latex(expr2))\n+\n+expr3 = Subs(x*y, (x,), (1,))\n+print(\"\\nExpression:\", expr3)\n+print(\"Current LaTeX:\", latex(expr3))\n+\n+expr4 = 3*Subs(x*y, (x,), (1,))\n+print(\"\\nExpression:\", expr4)\n+print(\"Current LaTeX:\", latex(expr4))\n+\n+# Test with more complex expressions\n+expr5 = Subs(x+y+2, (x,), (1,))\n+print(\"\\nExpression:\", expr5)\n+print(\"Current LaTeX:\", latex(expr5))\n+\n+expr6 = 3*Subs(x+y+2, (x,), (1,))\n+print(\"\\nExpression:\", expr6)\n+print(\"Current LaTeX:\", latex(expr6))\n", "gold_standard_diff": "From 0b7a21a2ead67197c716ee71745eeb28c7c74af8 Mon Sep 17 00:00:00 2001\nFrom: jgulian <josephdgulian@gmail.com>\nDate: Mon, 2 Mar 2020 22:28:25 -0500\nSubject: [PATCH] printing: Added parenthesis for substitution latex printing\n and revised tests\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nWhen printing expressions with substitutions, it may be hard to interpret\nwhere the substitution begins, and where it ends. This commit adds parenthesis\nto the latex output around the substitution in the expression, making the\noutput easier to interpret.\n\nExample:\nIn[1]: from sympy import *\nIn[2]: from sympy.abc import x, y\nIn[3]: expr = 3*Subs(-x+y, (x,),(1,))\nIn[4]: print(latex(expr))\n3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}\nIn[5]: pprint(expr)\n3\u22c5(-x + y)\u2502\n          \u2502x=1\n---\n sympy/printing/latex.py            | 2 +-\n sympy/printing/tests/test_latex.py | 3 ++-\n 2 files changed, 3 insertions(+), 2 deletions(-)\n\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8743723ea041..f6ed0d350ec5 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -703,7 +703,7 @@ def _print_Subs(self, subs):\n         latex_new = (self._print(e) for e in new)\n         latex_subs = r'\\\\ '.join(\n             e[0] + '=' + e[1] for e in zip(latex_old, latex_new))\n-        return r'\\left. %s \\right|_{\\substack{ %s }}' % (latex_expr,\n+        return r'\\left. \\left(%s\\right) \\right|_{\\substack{ %s }}' % (latex_expr,\n                                                          latex_subs)\n \n     def _print_Integral(self, expr):\ndiff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 3d387cf05250..59ddf0ac0e8f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -674,7 +674,8 @@ def test_latex_derivatives():\n \n def test_latex_subs():\n     assert latex(Subs(x*y, (\n-        x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+        x, y), (1, 2))) == r'\\left. \\left(x y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n \n \n def test_latex_integrals():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/18763"}