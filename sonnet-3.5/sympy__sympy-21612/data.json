{"instance_id": "sympy__sympy-21612", "score": "I", "diff": "diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 2e4a45ad20..a124c5d64d 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -382,11 +382,7 @@ def convert_frac(frac):\n \n     expr_top = convert_expr(frac.upper)\n     expr_bot = convert_expr(frac.lower)\n-    inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)\n-    if expr_top == 1:\n-        return inverse_denom\n-    else:\n-        return sympy.Mul(expr_top, inverse_denom, evaluate=False)\n+    return sympy.Mul(expr_top, sympy.Pow(expr_bot, -1, evaluate=False), evaluate=False)\n \n def convert_binom(binom):\n     expr_n = convert_expr(binom.n)\ndiff --git a/test_latex_frac.py b/test_latex_frac.py\nnew file mode 100644\nindex 0000000000..6817710576\n--- /dev/null\n+++ b/test_latex_frac.py\n@@ -0,0 +1,52 @@\n+from sympy import Symbol, Mul, Pow, Add\n+from sympy.parsing.latex._parse_latex_antlr import convert_frac\n+\n+class MockFrac:\n+    def __init__(self, upper, lower):\n+        self.upper = MockExpr(upper)\n+        self.lower = MockExpr(lower)\n+\n+class MockExpr:\n+    def __init__(self, value):\n+        self.value = value\n+\n+def mock_convert_expr(expr):\n+    if isinstance(expr, MockFrac):\n+        return Mul(\n+            mock_convert_expr(expr.upper.value),\n+            Pow(mock_convert_expr(expr.lower.value), -1, evaluate=False),\n+            evaluate=False\n+        )\n+    elif isinstance(expr, str):\n+        if expr == 'a^3+b':\n+            return Add(Pow(Symbol('a'), 3), Symbol('b'), evaluate=False)\n+        elif expr == 'c':\n+            return Symbol('c')\n+        elif expr == '1':\n+            return Symbol('1')\n+        elif expr == 'c^2':\n+            return Pow(Symbol('c'), 2, evaluate=False)\n+    return expr\n+\n+def test_nested_fractions():\n+    # Mock the nested fraction structure\n+    inner_frac1 = MockFrac('a^3+b', 'c')\n+    inner_frac2 = MockFrac('1', 'c^2')\n+    outer_frac = MockFrac(inner_frac1, inner_frac2)\n+\n+    # Convert the mock fraction\n+    result = mock_convert_expr(outer_frac)\n+\n+    # Expected result\n+    a, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n+    expected = Mul(\n+        Mul(Add(Pow(a, 3), b, evaluate=False), Pow(c, -1, evaluate=False), evaluate=False),\n+        Pow(Mul(Symbol('1'), Pow(Pow(c, 2, evaluate=False), -1, evaluate=False), evaluate=False), -1, evaluate=False),\n+        evaluate=False\n+    )\n+\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+\n+if __name__ == \"__main__\":\n+    test_nested_fractions()\n+    print(\"Test passed successfully!\")\n", "gold_standard_diff": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex c3fdcdd4358f..3e4b7d1b19e3 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -333,7 +333,7 @@ def apow(i):\n                     b.append(apow(item))\n                 else:\n                     if (len(item.args[0].args) != 1 and\n-                            isinstance(item.base, Mul)):\n+                            isinstance(item.base, (Mul, Pow))):\n                         # To avoid situations like #14160\n                         pow_paren.append(item)\n                     b.append(item.base)\ndiff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 690b1a8bbfb6..68c7d63769f4 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -252,6 +252,8 @@ def test_Mul():\n     # For issue 14160\n     assert str(Mul(-2, x, Pow(Mul(y,y,evaluate=False), -1, evaluate=False),\n                                                 evaluate=False)) == '-2*x/(y*y)'\n+    # issue 21537\n+    assert str(Mul(x, Pow(1/y, -1, evaluate=False), evaluate=False)) == 'x/(1/y)'\n \n \n     class CustomClass1(Expr):\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/21612"}