{"instance_id": "django__django-11477", "score": "I", "diff": "diff --git a/django/urls/base.py b/django/urls/base.py\nindex 0e1c3d909c..8188133b23 100644\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -172,7 +172,9 @@ def translate_url(url, lang_code):\n         to_be_reversed = \"%s:%s\" % (match.namespace, match.url_name) if match.namespace else match.url_name\n         with override(lang_code):\n             try:\n-                url = reverse(to_be_reversed, args=match.args, kwargs=match.kwargs)\n+                # Filter out kwargs with None values to handle optional named groups correctly\n+                kwargs = {k: v for k, v in match.kwargs.items() if v is not None}\n+                url = reverse(to_be_reversed, args=match.args, kwargs=kwargs)\n             except NoReverseMatch:\n                 pass\n             else:\ndiff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex 6ed2c4ffeb..7268c3fb9f 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,17 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_groups(self):\n+        \"\"\"\n+        Test that translate_url correctly handles URLs with optional named groups.\n+        Optional parameters that are None should not appear in the translated URL.\n+        \"\"\"\n+        with translation.override('en'):\n+            # URL with both parameters\n+            self.assertEqual(translate_url('/optional/foo/bar/', 'nl'), '/optional/foo/bar/')\n+            # URL with only required parameter - optional parameter should not appear as \"None\"\n+            self.assertEqual(translate_url('/optional/foo/', 'nl'), '/optional/foo/')\n+\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\ndiff --git a/tests/i18n/patterns/urls/default.py b/tests/i18n/patterns/urls/default.py\nindex b0c2f2585e..11f422e115 100644\n--- a/tests/i18n/patterns/urls/default.py\n+++ b/tests/i18n/patterns/urls/default.py\n@@ -10,6 +10,8 @@ urlpatterns = [\n     path('not-prefixed-include/', include('i18n.patterns.urls.included')),\n     re_path(_(r'^translated/$'), view, name='no-prefix-translated'),\n     re_path(_(r'^translated/(?P<slug>[\\w-]+)/$'), view, name='no-prefix-translated-slug'),\n+    # URL pattern with optional named group for testing\n+    re_path(r'^optional/(?P<arg1>\\w+)/(?:(?P<arg2>\\w+)/)?$', view, name='optional-groups'),\n ]\n \n urlpatterns += i18n_patterns(\n", "gold_standard_diff": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex af0508f94e3d..247e3680c0ae 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -153,7 +153,7 @@ def match(self, path):\n             # If there are any named groups, use those as kwargs, ignoring\n             # non-named groups. Otherwise, pass all non-named arguments as\n             # positional arguments.\n-            kwargs = match.groupdict()\n+            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n             args = () if kwargs else match.groups()\n             return path[match.end():], args, kwargs\n         return None\ndiff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex 6ed2c4ffebd6..866bcb0bb812 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -158,6 +158,15 @@ def test_translate_url_utility(self):\n             # path() URL pattern\n             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')\n             self.assertEqual(translation.get_language(), 'en')\n+            # URL with parameters.\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n \n         with translation.override('nl'):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\ndiff --git a/tests/i18n/patterns/urls/default.py b/tests/i18n/patterns/urls/default.py\nindex b0c2f2585ec4..22fff166b3cf 100644\n--- a/tests/i18n/patterns/urls/default.py\n+++ b/tests/i18n/patterns/urls/default.py\n@@ -15,6 +15,11 @@\n urlpatterns += i18n_patterns(\n     path('prefixed/', view, name='prefixed'),\n     path('prefixed.xml', view, name='prefixed_xml'),\n+    re_path(\n+        _(r'^with-arguments/(?P<argument>[\\w-]+)/(?:(?P<optional>[\\w-]+).html)?$'),\n+        view,\n+        name='with-arguments',\n+    ),\n     re_path(_(r'^users/$'), view, name='users'),\n     re_path(_(r'^account/'), include('i18n.patterns.urls.namespace', namespace='account')),\n )\ndiff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 953fe6b6d735..b40801b39d35 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -11,6 +11,7 @@\n     path('users/<id>/', views.empty_view, name='user-with-id'),\n     path('included_urls/', include('urlpatterns.included_urls')),\n     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),\n+    re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n ]\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 74503e451879..214739f678c3 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -54,6 +54,20 @@ def test_re_path(self):\n         self.assertEqual(match.kwargs, {'pk': '1'})\n         self.assertEqual(match.route, '^regex/(?P<pk>[0-9]+)/$')\n \n+    def test_re_path_with_optional_parameter(self):\n+        for url, kwargs in (\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1'}),\n+        ):\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n+                )\n+\n     def test_path_lookup_with_inclusion(self):\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\ndiff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex ba8cbedf4a0d..d26923ab9d11 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -180,6 +180,8 @@\n     ('named_optional', '/optional/1/', [], {'arg1': 1}),\n     ('named_optional', '/optional/1/2/', [1, 2], {}),\n     ('named_optional', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),\n+    ('named_optional_terminated', '/optional/1/', [1], {}),\n+    ('named_optional_terminated', '/optional/1/', [], {'arg1': 1}),\n     ('named_optional_terminated', '/optional/1/2/', [1, 2], {}),\n     ('named_optional_terminated', '/optional/1/2/', [], {'arg1': 1, 'arg2': 2}),\n     ('hardcoded', '/hardcoded/', [], {}),\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11477"}