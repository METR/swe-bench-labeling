{"instance_id": "astropy__astropy-7671", "score": "C", "diff": "diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex 3e784f9fc3..1b61272801 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -13,6 +13,9 @@ __all__ = ['resolve_name', 'minversion', 'find_current_module',\n            'isinstancemethod']\n \n \n+\n+\n+\n __doctest_skip__ = ['find_current_module']\n \n \n@@ -139,10 +142,54 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n     else:\n         have_version = resolve_name(module.__name__, version_path)\n \n-    if inclusive:\n-        return LooseVersion(have_version) >= LooseVersion(version)\n-    else:\n-        return LooseVersion(have_version) > LooseVersion(version)\n+    try:\n+        # First try with LooseVersion as it's more standard\n+        if inclusive:\n+            return LooseVersion(have_version) >= LooseVersion(version)\n+        else:\n+            return LooseVersion(have_version) > LooseVersion(version)\n+    except TypeError:\n+        # LooseVersion fails with mixed types (e.g., '1.14.3' vs '1.14dev')\n+        # Try packaging.version if available (lightweight compared to pkg_resources)\n+        try:\n+            from packaging.version import Version\n+            if inclusive:\n+                return Version(have_version) >= Version(version)\n+            else:\n+                return Version(have_version) > Version(version)\n+        except ImportError:\n+            # Fall back to pkg_resources as it handles dev versions correctly\n+            try:\n+                from pkg_resources import parse_version\n+                if inclusive:\n+                    return parse_version(have_version) >= parse_version(version)\n+                else:\n+                    return parse_version(have_version) > parse_version(version)\n+            except ImportError:\n+                # Last resort: treat dev versions as less than release versions\n+                # This is a simple heuristic that may not be perfect but handles common cases\n+                import re\n+                \n+                def normalize_version(v):\n+                    # Strip dev/rc/alpha/beta suffixes for comparison\n+                    # Dev versions are treated as less than the base version\n+                    match = re.match(r'^(\\d+(?:\\.\\d+)*)', str(v))\n+                    if match:\n+                        base = match.group(1)\n+                        if 'dev' in str(v).lower() or 'rc' in str(v).lower() or 'alpha' in str(v).lower() or 'beta' in str(v).lower():\n+                            # Append .0 to make dev versions sort before x.y.z versions\n+                            return base + '.0'\n+                        return base\n+                    return str(v)\n+                \n+                norm_have = normalize_version(have_version)\n+                norm_version = normalize_version(version)\n+                \n+                # Now both should be numeric-only and comparable with LooseVersion\n+                if inclusive:\n+                    return LooseVersion(norm_have) >= LooseVersion(norm_version)\n+                else:\n+                    return LooseVersion(norm_have) > LooseVersion(norm_version)\n \n \n def find_current_module(depth=1, finddiff=False):\ndiff --git a/debug_version.py b/debug_version.py\nnew file mode 100644\nindex 0000000000..cb5ca62acd\n--- /dev/null\n+++ b/debug_version.py\n@@ -0,0 +1,22 @@\n+from astropy.utils.introspection import _version_to_tuple\n+\n+# Test the tuple conversion\n+print(\"Testing _version_to_tuple:\")\n+versions = ['1.14.3', '1.14dev', '1.14', '1.14rc1']\n+\n+for v in versions:\n+    t = _version_to_tuple(v)\n+    print(\"  '{}' -> {}\".format(v, t))\n+\n+# Test comparisons\n+print(\"\\nTesting comparisons:\")\n+v1_tuple = _version_to_tuple('1.14.3')\n+v2_tuple = _version_to_tuple('1.14dev')\n+print(\"  '1.14.3' tuple: {}\".format(v1_tuple))\n+print(\"  '1.14dev' tuple: {}\".format(v2_tuple))\n+\n+try:\n+    result = v1_tuple >= v2_tuple\n+    print(\"  '1.14.3' >= '1.14dev': {}\".format(result))\n+except Exception as e:\n+    print(\"  Comparison failed: {} - {}\".format(type(e).__name__, e))\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..eccb960c2c\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,47 @@\n+#!/usr/bin/env python\n+from astropy.utils import minversion\n+from types import ModuleType\n+\n+def test_case(module_version, required_version, expected, test_name):\n+    test_module = ModuleType(str(\"test_module\"))\n+    test_module.__version__ = module_version\n+    \n+    try:\n+        result = minversion(test_module, required_version)\n+        status = \"PASS\" if result == expected else \"FAIL\"\n+        print(\"{}: {} (module='{}', required='{}') -> {} (expected: {})\".format(\n+            status, test_name, module_version, required_version, result, expected))\n+    except Exception as e:\n+        print(\"FAIL: {} - {} - {}\".format(test_name, type(e).__name__, e))\n+\n+print(\"Testing minversion with various version combinations...\")\n+print()\n+\n+# Test cases from the issue\n+test_case('1.14.3', '1.14dev', True, \"Issue case: release > dev\")\n+test_case('1.14', '1.14dev', True, \"Issue case without patch: release >= dev\")\n+\n+# Original test cases from test_introspection.py \n+test_case('0.12.2', '0.12', True, \"Basic: 0.12.2 >= 0.12\")\n+test_case('0.12.2', '0.12.1', True, \"Basic: 0.12.2 >= 0.12.1\")\n+test_case('0.12.2', '0.12.0.dev', True, \"Basic: 0.12.2 >= 0.12.0.dev\")\n+test_case('0.12.2', '1', False, \"Basic: 0.12.2 < 1\")\n+test_case('0.12.2', '1.2rc1', False, \"Basic: 0.12.2 < 1.2rc1\")\n+\n+# Additional edge cases\n+test_case('1.14dev', '1.14', False, \"Dev version: dev < release\")\n+test_case('1.14rc1', '1.14', False, \"RC version: rc < release\")\n+test_case('1.14.0', '1.14', True, \"Patch zero: 1.14.0 >= 1.14\")\n+test_case('2.0', '1.14.3', True, \"Major version: 2.0 > 1.14.3\")\n+test_case('1.14.3', '1.14.3', True, \"Equal versions\")\n+test_case('1.14.3', '1.14.4', False, \"Patch version comparison\")\n+\n+# Test numpy if available\n+print(\"\\nTesting with numpy...\")\n+try:\n+    import numpy\n+    print(\"numpy version: {}\".format(numpy.__version__))\n+    result = minversion('numpy', '1.14dev')\n+    print(\"minversion('numpy', '1.14dev'): {}\".format(result))\n+except Exception as e:\n+    print(\"Error testing numpy: {} - {}\".format(type(e).__name__, e))\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..0857b3de0a\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,19 @@\n+#!/usr/bin/env python\n+from astropy.utils import minversion\n+from types import ModuleType\n+\n+# Test case from the issue\n+test_module = ModuleType(str(\"test_module\"))\n+test_module.__version__ = '1.14.3'\n+\n+print(\"Testing minversion fix...\")\n+print(\"Test case: module version='1.14.3', required version='1.14dev'\")\n+\n+try:\n+    result = minversion(test_module, '1.14dev')\n+    print(\"Result: {}\".format(result))\n+    print(\"SUCCESS: No TypeError!\")\n+except TypeError as e:\n+    print(\"FAILED: TypeError - {}\".format(e))\n+except Exception as e:\n+    print(\"FAILED: {} - {}\".format(type(e).__name__, e))\ndiff --git a/test_minversion_fix.py b/test_minversion_fix.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\n", "gold_standard_diff": "diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py\nindex 3e784f9fc340..e437b40c8711 100644\n--- a/astropy/utils/introspection.py\n+++ b/astropy/utils/introspection.py\n@@ -4,6 +4,7 @@\n \n \n import inspect\n+import re\n import types\n import importlib\n from distutils.version import LooseVersion\n@@ -139,6 +140,14 @@ def minversion(module, version, inclusive=True, version_path='__version__'):\n     else:\n         have_version = resolve_name(module.__name__, version_path)\n \n+    # LooseVersion raises a TypeError when strings like dev, rc1 are part\n+    # of the version number. Match the dotted numbers only. Regex taken\n+    # from PEP440, https://www.python.org/dev/peps/pep-0440/, Appendix B\n+    expr = '^([1-9]\\\\d*!)?(0|[1-9]\\\\d*)(\\\\.(0|[1-9]\\\\d*))*'\n+    m = re.match(expr, version)\n+    if m:\n+        version = m.group(0)\n+\n     if inclusive:\n         return LooseVersion(have_version) >= LooseVersion(version)\n     else:\ndiff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex d8262d4581a9..99dd9de7305d 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -67,7 +67,7 @@ def test_minversion():\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n-    good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n+    good_versions = ['0.12', '0.12.1', '0.12.0.dev', '0.12dev']\n     bad_versions = ['1', '1.2rc1']\n     for version in good_versions:\n         assert minversion(test_module, version)\n", "gold_standard_pr_link": "https://github.com/astropy/astropy/pull/7671"}