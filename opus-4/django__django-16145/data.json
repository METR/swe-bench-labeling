{"instance_id": "django__django-16145", "score": "C", "diff": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 3c39f57e4d..67a36ef2b7 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -147,7 +147,7 @@ class Command(BaseCommand):\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n-                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else self.addr,\n+                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else (\"0.0.0.0\" if self.addr == \"0\" else self.addr),\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\ndiff --git a/final_test.py b/final_test.py\nnew file mode 100644\nindex 0000000000..6c0066575b\n--- /dev/null\n+++ b/final_test.py\n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+\n+# Add Django to path\n+sys.path.insert(0, '/testbed')\n+\n+# Configure Django settings inline\n+from django.conf import settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-key',\n+    ALLOWED_HOSTS=['*'],\n+    INSTALLED_APPS=[],\n+)\n+\n+import django\n+django.setup()\n+\n+# Now test directly\n+from io import StringIO\n+from django.core.management.commands.runserver import Command\n+\n+print(\"Testing Django runserver command output fix...\")\n+print(\"=\" * 60)\n+\n+# Test case 1: '0:9001' should display as 'http://0.0.0.0:9001/'\n+print(\"\\nTest 1: runserver 0:9001\")\n+cmd = Command()\n+cmd.stdout = StringIO()\n+cmd.stderr = StringIO()\n+\n+# Parse the address\n+options = {\n+    'addrport': '0:9001',\n+    'use_reloader': False,\n+    'skip_checks': True,\n+    'use_threading': False,\n+    'use_ipv6': False,\n+    'no_color': False\n+}\n+\n+# Get parsed values\n+try:\n+    cmd.handle(**options)\n+except SystemExit:\n+    # This is expected - runserver tries to exit after binding\n+    pass\n+except Exception as e:\n+    print(f\"  Error during handle: {e}\")\n+    import traceback\n+    traceback.print_exc()\n+print(f\"  Parsed addr: '{cmd.addr}'\")\n+print(f\"  Parsed port: '{cmd.port}'\")\n+\n+# Test the display logic\n+addr_display = \"[%s]\" % cmd.addr if cmd._raw_ipv6 else (\"0.0.0.0\" if cmd.addr == \"0\" else cmd.addr)\n+print(f\"  Display addr: '{addr_display}'\")\n+print(f\"  Expected: '0.0.0.0'\")\n+print(f\"  Result: {'\u2713 PASS' if addr_display == '0.0.0.0' else '\u2717 FAIL'}\")\n+\n+# Test case 2: Regular address should work normally\n+print(\"\\nTest 2: runserver 127.0.0.1:9002\")\n+cmd2 = Command()\n+options2 = {\n+    'addrport': '127.0.0.1:9002',\n+    'use_reloader': False,\n+    'skip_checks': True,\n+    'use_threading': False,\n+    'use_ipv6': False,\n+    'no_color': False\n+}\n+try:\n+    cmd2.handle(**options2)\n+except (SystemExit, Exception):\n+    pass\n+addr_display2 = \"[%s]\" % cmd2.addr if cmd2._raw_ipv6 else (\"0.0.0.0\" if cmd2.addr == \"0\" else cmd2.addr)\n+print(f\"  Display addr: '{addr_display2}'\")\n+print(f\"  Expected: '127.0.0.1'\")\n+print(f\"  Result: {'\u2713 PASS' if addr_display2 == '127.0.0.1' else '\u2717 FAIL'}\")\n+\n+print(\"\\n\" + \"=\" * 60)\n+print(\"Summary: The fix correctly converts '0' to '0.0.0.0' for display\")\n+print(\"while preserving other addresses as-is.\")\ndiff --git a/simple_test.py b/simple_test.py\nnew file mode 100644\nindex 0000000000..f4b23df239\n--- /dev/null\n+++ b/simple_test.py\n@@ -0,0 +1,33 @@\n+import os\n+import sys\n+import django\n+from io import StringIO\n+\n+# Add the Django project to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+\n+# Import after setting up Django\n+from django.core.management.commands.runserver import Command\n+\n+# Create a command instance\n+cmd = Command()\n+cmd.stdout = StringIO()\n+cmd.stderr = StringIO()\n+\n+# Test with '0:8000'\n+try:\n+    cmd.handle(addrport='0:8000', use_reloader=False, skip_checks=True, use_threading=False, use_ipv6=False)\n+except Exception as e:\n+    # Expected to fail when trying to bind\n+    pass\n+\n+output = cmd.stdout.getvalue()\n+print(\"Output from handle with '0:8000':\")\n+print(output)\n+print(\"\\nChecking URL in output:\")\n+if 'http://0:8000/' in output:\n+    print(\"\u2717 Found 'http://0:8000/' - This is the bug!\")\n+if 'http://0.0.0.0:8000/' in output:\n+    print(\"\u2713 Found 'http://0.0.0.0:8000/' - This is what we want!\")\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..1521194a9c\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,82 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+from io import StringIO\n+\n+# Add Django to path\n+sys.path.insert(0, '/testbed')\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'\n+\n+import django\n+django.setup()\n+\n+from django.core.management.commands.runserver import Command\n+\n+# Test case 1: runserver 0:8000\n+print(\"Testing 'runserver 0:8000':\")\n+cmd = Command()\n+cmd.stdout = StringIO()\n+cmd.stderr = StringIO()\n+\n+# Simulate the command line arguments\n+options = {\n+    'addrport': '0:8000',\n+    'use_reloader': False,\n+    'skip_checks': True,\n+    'use_threading': False,\n+    'use_ipv6': False,\n+    'no_color': False\n+}\n+\n+# Run handle to parse the address\n+cmd.handle(**options)\n+\n+# The output is written during inner_run, let's check that directly\n+cmd.stdout = StringIO()\n+try:\n+    cmd.inner_run(**options)\n+except Exception:\n+    # Expected to fail when trying to bind\n+    pass\n+\n+output = cmd.stdout.getvalue()\n+print(output)\n+\n+print(\"\\nChecking the output:\")\n+if 'http://0:8000/' in output:\n+    print(\"\u2717 Found 'http://0:8000/' - BUG NOT FIXED\")\n+else:\n+    print(\"\u2713 Did not find 'http://0:8000/'\")\n+    \n+if 'http://0.0.0.0:8000/' in output:\n+    print(\"\u2713 Found 'http://0.0.0.0:8000/' - FIX WORKS!\")\n+else:\n+    print(\"\u2717 Did not find 'http://0.0.0.0:8000/'\")\n+\n+# Test case 2: Make sure normal addresses still work\n+print(\"\\n\\nTesting 'runserver 127.0.0.1:8000':\")\n+cmd2 = Command()\n+cmd2.stdout = StringIO()\n+cmd2.stderr = StringIO()\n+\n+options2 = {\n+    'addrport': '127.0.0.1:8000',\n+    'use_reloader': False,\n+    'skip_checks': True, \n+    'use_threading': False,\n+    'use_ipv6': False,\n+    'no_color': False\n+}\n+\n+cmd2.handle(**options2)\n+cmd2.stdout = StringIO()\n+try:\n+    cmd2.inner_run(**options2)\n+except Exception:\n+    pass\n+\n+output2 = cmd2.stdout.getvalue()\n+if 'http://127.0.0.1:8000/' in output2:\n+    print(\"\u2713 Normal addresses still work correctly\")\n+else:\n+    print(\"\u2717 Normal addresses broken\")\ndiff --git a/test_runserver_output.py b/test_runserver_output.py\nnew file mode 100644\nindex 0000000000..a970bc8416\n--- /dev/null\n+++ b/test_runserver_output.py\n@@ -0,0 +1,72 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import subprocess\n+\n+# Add Django to path\n+sys.path.insert(0, '/testbed')\n+\n+# Create a minimal settings file\n+settings_content = \"\"\"\n+DEBUG = True\n+SECRET_KEY = 'test-key'\n+ALLOWED_HOSTS = ['*']\n+\"\"\"\n+\n+with open('/tmp/test_settings.py', 'w') as f:\n+    f.write(settings_content)\n+\n+# Test the runserver command with different addresses\n+test_cases = [\n+    ('0:9001', 'http://0.0.0.0:9001/'),\n+    ('127.0.0.1:9002', 'http://127.0.0.1:9002/'),\n+    ('localhost:9003', 'http://localhost:9003/'),\n+]\n+\n+for addr, expected_url in test_cases:\n+    print(f\"\\nTesting 'python manage.py runserver {addr}':\")\n+    \n+    # Run the command and capture output\n+    env = os.environ.copy()\n+    env['DJANGO_SETTINGS_MODULE'] = 'test_settings'\n+    env['PYTHONPATH'] = '/tmp:' + env.get('PYTHONPATH', '')\n+    \n+    # Create a simple manage.py script\n+    manage_content = \"\"\"\n+import os\n+import sys\n+\n+if __name__ == \"__main__\":\n+    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"test_settings\")\n+    from django.core.management import execute_from_command_line\n+    execute_from_command_line(sys.argv)\n+\"\"\"\n+    \n+    with open('/tmp/manage.py', 'w') as f:\n+        f.write(manage_content)\n+    \n+    # Run the command with a timeout\n+    cmd = [sys.executable, '/tmp/manage.py', 'runserver', '--noreload', addr]\n+    try:\n+        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, \n+                               text=True, env=env)\n+        # Give it a moment to start and print the message\n+        import time\n+        time.sleep(0.5)\n+        proc.terminate()\n+        stdout, stderr = proc.communicate(timeout=1)\n+        \n+        output = stdout + stderr\n+        \n+        if expected_url in output:\n+            print(f\"\u2713 Found '{expected_url}' in output\")\n+        else:\n+            print(f\"\u2717 Did not find '{expected_url}' in output\")\n+            print(f\"Output was: {output[:500]}...\")  # Show first 500 chars\n+            \n+        # For addr '0:9001', make sure it doesn't show the wrong URL\n+        if addr.startswith('0:') and 'http://0:' in output:\n+            print(\"\u2717 Found incorrect 'http://0:' URL in output\")\n+            \n+    except Exception as e:\n+        print(f\"Error running command: {e}\")\ndiff --git a/test_runserver_zero.py b/test_runserver_zero.py\nnew file mode 100644\nindex 0000000000..3a9cce6a5a\n--- /dev/null\n+++ b/test_runserver_zero.py\n@@ -0,0 +1,49 @@\n+import os\n+import sys\n+import django\n+from io import StringIO\n+from django.core.management import call_command\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        }\n+    )\n+    django.setup()\n+\n+# Test the runserver command with '0:8000'\n+out = StringIO()\n+err = StringIO()\n+try:\n+    # This will fail to actually start the server, but we just want to capture the output\n+    call_command('runserver', '0:8000', stdout=out, stderr=err, skip_checks=True, use_reloader=False)\n+except Exception as e:\n+    # We expect this to fail since we're not actually running the server\n+    pass\n+\n+output = out.getvalue()\n+print(\"Output from 'runserver 0:8000':\")\n+print(output)\n+print(\"\\nChecking if output contains 'http://0:8000/' (should not):\")\n+if 'http://0:8000/' in output:\n+    print(\"FOUND - This is the bug!\")\n+else:\n+    print(\"NOT FOUND\")\n+    \n+print(\"\\nChecking if output contains 'http://0.0.0.0:8000/' (should):\")\n+if 'http://0.0.0.0:8000/' in output:\n+    print(\"FOUND - This is what we want!\")\n+else:\n+    print(\"NOT FOUND\")\ndiff --git a/trace_runserver.py b/trace_runserver.py\nnew file mode 100644\nindex 0000000000..10243aa203\n--- /dev/null\n+++ b/trace_runserver.py\n@@ -0,0 +1,48 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import re\n+\n+# Add Django to path\n+sys.path.insert(0, '/testbed')\n+os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'\n+\n+import django\n+django.setup()\n+\n+# Import the regex from runserver  \n+from django.core.management.commands.runserver import naiveip_re\n+\n+# Test regex parsing for '0:8000'\n+test_input = '0:8000'\n+m = re.match(naiveip_re, test_input)\n+if m:\n+    addr, ipv4, ipv6, fqdn, port = m.groups()\n+    print(f\"Input: {test_input}\")\n+    print(f\"Parsed addr: '{addr}'\")\n+    print(f\"Parsed port: '{port}'\")\n+    print(f\"ipv4: {ipv4}\")\n+    print(f\"ipv6: {ipv6}\")\n+    print(f\"fqdn: {fqdn}\")\n+    \n+# Now let's trace through the logic\n+print(\"\\nFollowing the logic in handle():\")\n+if not addr:\n+    print(\"addr is falsy - would use default address\")\n+else:\n+    print(f\"addr is truthy ('{addr}') - will use this address as-is\")\n+    \n+print(f\"\\nThe problem: '0' should be treated as '0.0.0.0' but it's displayed as-is\")\n+\n+# Let's also check what happens at the OS level\n+print(\"\\nLet's see what Python's socket module does with address '0':\")\n+import socket\n+try:\n+    # Create a test socket\n+    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n+    s.bind(('0', 0))  # Bind to address '0' with any port\n+    bound_addr = s.getsockname()\n+    print(f\"Socket bound to: {bound_addr}\")\n+    s.close()\n+except Exception as e:\n+    print(f\"Error: {e}\")\ndiff --git a/verify_fix.py b/verify_fix.py\nnew file mode 100644\nindex 0000000000..7758460b09\n--- /dev/null\n+++ b/verify_fix.py\n@@ -0,0 +1,32 @@\n+#!/usr/bin/env python\n+\"\"\"\n+This script verifies that the fix for displaying '0:8000' as '0.0.0.0:8000' works correctly.\n+\"\"\"\n+\n+# First, let's check the logic directly\n+addr = \"0\"\n+_raw_ipv6 = False\n+\n+# This is the fixed line from runserver.py line 150\n+display_addr = \"[%s]\" % addr if _raw_ipv6 else (\"0.0.0.0\" if addr == \"0\" else addr)\n+\n+print(\"Testing the fix logic directly:\")\n+print(f\"Input addr: '{addr}'\")\n+print(f\"Display addr: '{display_addr}'\")\n+print(f\"Expected: '0.0.0.0'\")\n+print(f\"Result: {'\u2713 PASS' if display_addr == '0.0.0.0' else '\u2717 FAIL'}\")\n+\n+# Test other cases\n+print(\"\\nTesting other cases:\")\n+test_cases = [\n+    (\"0\", False, \"0.0.0.0\"),\n+    (\"127.0.0.1\", False, \"127.0.0.1\"),\n+    (\"localhost\", False, \"localhost\"),\n+    (\"192.168.1.1\", False, \"192.168.1.1\"),\n+    (\"::1\", True, \"[::1]\"),\n+]\n+\n+for addr, _raw_ipv6, expected in test_cases:\n+    display_addr = \"[%s]\" % addr if _raw_ipv6 else (\"0.0.0.0\" if addr == \"0\" else addr)\n+    status = \"\u2713 PASS\" if display_addr == expected else \"\u2717 FAIL\"\n+    print(f\"  addr='{addr}', ipv6={_raw_ipv6} -> '{display_addr}' (expected '{expected}') {status}\")\n", "gold_standard_diff": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 3c39f57e4dda..2b91feb3753b 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -129,6 +129,13 @@ def inner_run(self, *args, **options):\n         shutdown_message = options.get(\"shutdown_message\", \"\")\n         quit_command = \"CTRL-BREAK\" if sys.platform == \"win32\" else \"CONTROL-C\"\n \n+        if self._raw_ipv6:\n+            addr = f\"[{self.addr}]\"\n+        elif self.addr == \"0\":\n+            addr = \"0.0.0.0\"\n+        else:\n+            addr = self.addr\n+\n         if not options[\"skip_checks\"]:\n             self.stdout.write(\"Performing system checks...\\n\\n\")\n             self.check(display_num_errors=True)\n@@ -147,7 +154,7 @@ def inner_run(self, *args, **options):\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n-                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else self.addr,\n+                \"addr\": addr,\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\ndiff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 9d2ca839d54b..0a44e8a53884 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1587,6 +1587,21 @@ def test_runserver_addrport(self):\n         call_command(self.cmd, addrport=\"7000\")\n         self.assertServerSettings(\"127.0.0.1\", \"7000\")\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n     @unittest.skipUnless(socket.has_ipv6, \"platform doesn't support IPv6\")\n     def test_runner_addrport_ipv6(self):\n         call_command(self.cmd, addrport=\"\", use_ipv6=True)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16145"}