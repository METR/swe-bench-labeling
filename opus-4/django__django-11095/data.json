{"instance_id": "django__django-11095", "score": "C", "diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f9a0..bd461810e3 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -580,9 +580,15 @@ class ModelAdmin(BaseModelAdmin):\n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"\n+        Hook for specifying custom inlines based on the request or model instance.\n+        \"\"\"\n+        return self.inlines\n+\n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\ndiff --git a/test_default_behavior.py b/test_default_behavior.py\nnew file mode 100644\nindex 0000000000..ea239d4df9\n--- /dev/null\n+++ b/test_default_behavior.py\n@@ -0,0 +1,104 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[\n+        'django.contrib.admin',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+        'django.contrib.sessions',\n+        'django.contrib.messages',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+\n+django.setup()\n+\n+# Now import Django components\n+from django.contrib import admin\n+from django.contrib.admin import TabularInline\n+from django.db import models\n+\n+\n+# Test models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+# Test inline classes\n+class BookInline(TabularInline):\n+    model = Book\n+\n+\n+# Test admin class without get_inlines override (default behavior)\n+class AuthorAdminDefault(admin.ModelAdmin):\n+    inlines = [BookInline]\n+\n+\n+# Test that default behavior is preserved\n+def test_default_behavior():\n+    print(\"Testing default behavior (without get_inlines override)...\")\n+    \n+    # Create test instances\n+    admin_site = admin.AdminSite()\n+    author_admin = AuthorAdminDefault(Author, admin_site)\n+    \n+    # Mock request with user\n+    class MockUser:\n+        def has_perm(self, perm):\n+            return True\n+        \n+        def has_module_perms(self, app_label):\n+            return True\n+    \n+    class MockRequest:\n+        def __init__(self):\n+            self.user = MockUser()\n+    \n+    request = MockRequest()\n+    \n+    # Create mock author objects\n+    class MockAuthor:\n+        def __init__(self, name):\n+            self.name = name\n+    \n+    # Test without object\n+    inline_instances = author_admin.get_inline_instances(request, None)\n+    print(f\"Without object: {len(inline_instances)} inlines\")\n+    assert len(inline_instances) == 1, f\"Expected 1 inline, got {len(inline_instances)}\"\n+    \n+    # Test with object\n+    author1 = MockAuthor(name=\"Bob\")\n+    inline_instances = author_admin.get_inline_instances(request, author1)\n+    print(f\"With object: {len(inline_instances)} inlines\")\n+    assert len(inline_instances) == 1, f\"Expected 1 inline, got {len(inline_instances)}\"\n+    \n+    # Verify that get_inlines method exists and returns self.inlines by default\n+    inlines = author_admin.get_inlines(request, author1)\n+    assert inlines == author_admin.inlines, \"Default get_inlines should return self.inlines\"\n+    print(\"Default get_inlines returns self.inlines as expected\")\n+    \n+    print(\"\\nSuccess! Default behavior is preserved when get_inlines is not overridden.\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_default_behavior()\ndiff --git a/test_get_inlines.py b/test_get_inlines.py\nnew file mode 100644\nindex 0000000000..33a5a5fa02\n--- /dev/null\n+++ b/test_get_inlines.py\n@@ -0,0 +1,125 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[\n+        'django.contrib.admin',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+        'django.contrib.sessions',\n+        'django.contrib.messages',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+\n+django.setup()\n+\n+# Now import Django components\n+from django.contrib import admin\n+from django.contrib.admin import TabularInline\n+from django.db import models\n+\n+\n+# Test models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+# Test inline classes\n+class BookInline(TabularInline):\n+    model = Book\n+\n+\n+class ArticleInline(TabularInline):\n+    model = Article\n+\n+\n+# Test admin class - this will show the expected behavior\n+class AuthorAdmin(admin.ModelAdmin):\n+    inlines = [BookInline, ArticleInline]\n+    \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"This is the new method we want to add\"\"\"\n+        # Example: only show ArticleInline if the author has a name starting with 'A'\n+        if obj and obj.name and obj.name.startswith('A'):\n+            return [ArticleInline]\n+        return self.inlines\n+\n+\n+# Test that shows current behavior \n+def test_current_behavior():\n+    print(\"Testing current behavior without get_inlines hook...\")\n+    \n+    # Create test instances\n+    admin_site = admin.AdminSite()\n+    \n+    # First test with default ModelAdmin (without get_inlines)\n+    class DefaultAuthorAdmin(admin.ModelAdmin):\n+        inlines = [BookInline, ArticleInline]\n+    \n+    default_admin = DefaultAuthorAdmin(Author, admin_site)\n+    \n+    # Mock request with user\n+    class MockUser:\n+        def has_perm(self, perm):\n+            return True\n+        \n+        def has_module_perms(self, app_label):\n+            return True\n+    \n+    class MockRequest:\n+        def __init__(self):\n+            self.user = MockUser()\n+    \n+    request = MockRequest()\n+    \n+    # Test without object\n+    inline_instances = default_admin.get_inline_instances(request, None)\n+    print(f\"Without object: {len(inline_instances)} inlines\")\n+    \n+    # Create mock author objects\n+    class MockAuthor:\n+        def __init__(self, name):\n+            self.name = name\n+    \n+    # Test with object whose name doesn't start with 'A'\n+    author1 = MockAuthor(name=\"Bob\")\n+    inline_instances = default_admin.get_inline_instances(request, author1)\n+    print(f\"Author 'Bob': {len(inline_instances)} inlines\")\n+    \n+    # Test with object whose name starts with 'A'\n+    author2 = MockAuthor(name=\"Alice\")\n+    inline_instances = default_admin.get_inline_instances(request, author2)\n+    print(f\"Author 'Alice': {len(inline_instances)} inlines\")\n+    print(\"Currently all cases show the same number of inlines!\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_current_behavior()\ndiff --git a/test_get_inlines_implementation.py b/test_get_inlines_implementation.py\nnew file mode 100644\nindex 0000000000..94d31fcbf0\n--- /dev/null\n+++ b/test_get_inlines_implementation.py\n@@ -0,0 +1,128 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    SECRET_KEY='test-secret-key',\n+    INSTALLED_APPS=[\n+        'django.contrib.admin',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+        'django.contrib.sessions',\n+        'django.contrib.messages',\n+    ],\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    }\n+)\n+\n+django.setup()\n+\n+# Now import Django components\n+from django.contrib import admin\n+from django.contrib.admin import TabularInline\n+from django.db import models\n+\n+\n+# Test models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+\n+# Test inline classes\n+class BookInline(TabularInline):\n+    model = Book\n+\n+\n+class ArticleInline(TabularInline):\n+    model = Article\n+\n+\n+# Test admin class with get_inlines override\n+class AuthorAdminWithGetInlines(admin.ModelAdmin):\n+    inlines = [BookInline, ArticleInline]\n+    \n+    def get_inlines(self, request, obj=None):\n+        \"\"\"Override get_inlines to show different inlines based on obj\"\"\"\n+        # Example: only show ArticleInline if the author has a name starting with 'A'\n+        if obj and obj.name and obj.name.startswith('A'):\n+            return [ArticleInline]\n+        return self.inlines\n+\n+\n+# Test that the new get_inlines method works \n+def test_get_inlines_implementation():\n+    print(\"Testing get_inlines implementation...\")\n+    \n+    # Create test instances\n+    admin_site = admin.AdminSite()\n+    \n+    # Test with custom get_inlines\n+    author_admin = AuthorAdminWithGetInlines(Author, admin_site)\n+    \n+    # Mock request with user\n+    class MockUser:\n+        def has_perm(self, perm):\n+            return True\n+        \n+        def has_module_perms(self, app_label):\n+            return True\n+    \n+    class MockRequest:\n+        def __init__(self):\n+            self.user = MockUser()\n+    \n+    request = MockRequest()\n+    \n+    # Create mock author objects\n+    class MockAuthor:\n+        def __init__(self, name):\n+            self.name = name\n+    \n+    # Test without object\n+    inline_instances = author_admin.get_inline_instances(request, None)\n+    print(f\"Without object: {len(inline_instances)} inlines (expected: 2)\")\n+    assert len(inline_instances) == 2, f\"Expected 2 inlines, got {len(inline_instances)}\"\n+    \n+    # Test with object whose name doesn't start with 'A'\n+    author1 = MockAuthor(name=\"Bob\")\n+    inline_instances = author_admin.get_inline_instances(request, author1)\n+    print(f\"Author 'Bob': {len(inline_instances)} inlines (expected: 2)\")\n+    assert len(inline_instances) == 2, f\"Expected 2 inlines for Bob, got {len(inline_instances)}\"\n+    \n+    # Test with object whose name starts with 'A'\n+    author2 = MockAuthor(name=\"Alice\")\n+    inline_instances = author_admin.get_inline_instances(request, author2)\n+    print(f\"Author 'Alice': {len(inline_instances)} inlines (expected: 1)\")\n+    assert len(inline_instances) == 1, f\"Expected 1 inline for Alice, got {len(inline_instances)}\"\n+    \n+    print(\"\\nSuccess! The get_inlines hook works correctly!\")\n+    print(\"- Default behavior is preserved when not overridden\")\n+    print(\"- When overridden, it allows dynamic inline selection based on request/obj\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_get_inlines_implementation()\ndiff --git a/tests/admin_inlines/test_get_inlines.py b/tests/admin_inlines/test_get_inlines.py\nnew file mode 100644\nindex 0000000000..e29d9b901c\n--- /dev/null\n+++ b/tests/admin_inlines/test_get_inlines.py\n@@ -0,0 +1,134 @@\n+from django.contrib import admin\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from django.test import RequestFactory, TestCase, override_settings\n+from django.urls import reverse\n+\n+from .models import Author, Book, Holder, Inner\n+\n+\n+class BookInline(TabularInline):\n+    model = Book\n+\n+\n+class InnerInline(TabularInline):\n+    model = Inner\n+\n+\n+class AuthorAdminWithDynamicInlines(ModelAdmin):\n+    \"\"\"Admin with dynamic inlines based on object state\"\"\"\n+    inlines = [BookInline]\n+    \n+    def get_inlines(self, request, obj=None):\n+        # Only show BookInline for authors whose name starts with 'A'\n+        if obj and obj.name and obj.name.startswith('A'):\n+            return [BookInline]\n+        return []\n+\n+\n+class HolderAdminWithRequestBasedInlines(ModelAdmin):\n+    \"\"\"Admin with inlines based on request\"\"\"\n+    inlines = [InnerInline]\n+    \n+    def get_inlines(self, request, obj=None):\n+        # Show inlines only if user has specific permission\n+        if request.user.has_perm('admin_inlines.add_inner'):\n+            return self.inlines\n+        return []\n+\n+\n+@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+class TestGetInlines(TestCase):\n+    \"\"\"Test the get_inlines hook\"\"\"\n+    \n+    factory = RequestFactory()\n+    \n+    def test_get_inlines_default_behavior(self):\n+        \"\"\"Test that default behavior returns self.inlines\"\"\"\n+        admin_site = admin.AdminSite()\n+        admin_obj = ModelAdmin(Author, admin_site)\n+        admin_obj.inlines = [BookInline]\n+        \n+        request = self.factory.get('/')\n+        request.user = None\n+        \n+        inlines = admin_obj.get_inlines(request, None)\n+        self.assertEqual(inlines, admin_obj.inlines)\n+    \n+    def test_get_inlines_with_object(self):\n+        \"\"\"Test get_inlines can be customized based on object\"\"\"\n+        admin_site = admin.AdminSite()\n+        admin_obj = AuthorAdminWithDynamicInlines(Author, admin_site)\n+        \n+        request = self.factory.get('/')\n+        request.user = None\n+        \n+        # Author with name starting with 'A'\n+        author_a = Author(name='Alice')\n+        inlines = admin_obj.get_inlines(request, author_a)\n+        self.assertEqual(inlines, [BookInline])\n+        \n+        # Author with name not starting with 'A'\n+        author_b = Author(name='Bob')\n+        inlines = admin_obj.get_inlines(request, author_b)\n+        self.assertEqual(inlines, [])\n+        \n+        # No object\n+        inlines = admin_obj.get_inlines(request, None)\n+        self.assertEqual(inlines, [])\n+    \n+    def test_get_inline_instances_uses_get_inlines(self):\n+        \"\"\"Test that get_inline_instances uses get_inlines\"\"\"\n+        admin_site = admin.AdminSite()\n+        admin_obj = AuthorAdminWithDynamicInlines(Author, admin_site)\n+        \n+        # Create a mock user\n+        class MockUser:\n+            def has_perm(self, perm):\n+                return True\n+            \n+            def has_module_perms(self, app_label):\n+                return True\n+        \n+        request = self.factory.get('/')\n+        request.user = MockUser()\n+        \n+        # Author with name starting with 'A'\n+        author_a = Author(name='Alice')\n+        inline_instances = admin_obj.get_inline_instances(request, author_a)\n+        self.assertEqual(len(inline_instances), 1)\n+        self.assertIsInstance(inline_instances[0], BookInline)\n+        \n+        # Author with name not starting with 'A'\n+        author_b = Author(name='Bob')\n+        inline_instances = admin_obj.get_inline_instances(request, author_b)\n+        self.assertEqual(len(inline_instances), 0)\n+    \n+    def test_get_inlines_with_request(self):\n+        \"\"\"Test get_inlines can be customized based on request\"\"\"\n+        admin = HolderAdminWithRequestBasedInlines(Holder, None)\n+        \n+        # User with permission\n+        class UserWithPerm:\n+            def has_perm(self, perm):\n+                return perm == 'admin_inlines.add_inner'\n+            \n+            def has_module_perms(self, app_label):\n+                return True\n+        \n+        request = self.factory.get('/')\n+        request.user = UserWithPerm()\n+        \n+        inlines = admin.get_inlines(request, None)\n+        self.assertEqual(inlines, [InnerInline])\n+        \n+        # User without permission\n+        class UserWithoutPerm:\n+            def has_perm(self, perm):\n+                return False\n+            \n+            def has_module_perms(self, app_label):\n+                return True\n+        \n+        request.user = UserWithoutPerm()\n+        inlines = admin.get_inlines(request, None)\n+        self.assertEqual(inlines, [])\n", "gold_standard_diff": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5e7b23f9a00a..d64a2e9a2866 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -327,6 +327,10 @@ def get_fieldsets(self, request, obj=None):\n             return self.fieldsets\n         return [(None, {'fields': self.get_fields(request, obj)})]\n \n+    def get_inlines(self, request, obj):\n+        \"\"\"Hook for specifying custom inlines.\"\"\"\n+        return self.inlines\n+\n     def get_ordering(self, request):\n         \"\"\"\n         Hook for specifying field ordering.\n@@ -582,7 +586,7 @@ def __str__(self):\n \n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\ndiff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt\nindex 93679c46fdbd..e6bb91cf5c2a 100644\n--- a/docs/ref/contrib/admin/index.txt\n+++ b/docs/ref/contrib/admin/index.txt\n@@ -1627,6 +1627,16 @@ templates used by the :class:`ModelAdmin` views:\n     instances of the classes defined in :attr:`inlines` or you might encounter\n     a \"Bad Request\" error when adding related objects.\n \n+.. method:: ModelAdmin.get_inlines(request, obj)\n+\n+    .. versionadded:: 3.0\n+\n+    The ``get_inlines`` method is given the ``HttpRequest`` and the\n+    ``obj`` being edited (or ``None`` on an add form) and is expected to return\n+    an iterable of inlines. You can override this method to dynamically add\n+    inlines based on the request or model instance instead of specifying them\n+    in :attr:`ModelAdmin.inlines`.\n+\n .. method:: ModelAdmin.get_urls()\n \n     The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for\ndiff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt\nindex d7ad7a8cf7cb..44656b11cd75 100644\n--- a/docs/releases/3.0.txt\n+++ b/docs/releases/3.0.txt\n@@ -47,6 +47,10 @@ Minor features\n * Added support for the ``admin_order_field`` attribute on properties in\n   :attr:`.ModelAdmin.list_display`.\n \n+* The new :meth:`ModelAdmin.get_inlines()\n+  <django.contrib.admin.ModelAdmin.get_inlines>` method allows specifying the\n+  inlines based on the request or model instance.\n+\n :mod:`django.contrib.admindocs`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 36f182280598..b9f678a13a07 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -429,3 +429,29 @@ class EpisodeAdmin(admin.ModelAdmin):\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n             self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inline_instances_override_get_inlines(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,)),\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11095"}