{"instance_id": "sphinx-doc__sphinx-8265", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex a404f1fa5..2c6848797 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f4bc58b69..ad2ba4935 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -225,7 +225,35 @@ def _pseudo_parse_arglist(signode: desc_signature, arglist: str) -> None:\n     paramlist = addnodes.desc_parameterlist()\n     stack = [paramlist]  # type: List[Element]\n     try:\n-        for argument in arglist.split(','):\n+        # Smart split that respects parentheses, brackets, and braces\n+        arguments = []\n+        current = []\n+        depth = {'(': 0, '[': 0, '{': 0}\n+        matching = {'(': ')', '[': ']', '{': '}'}\n+        \n+        i = 0\n+        while i < len(arglist):\n+            char = arglist[i]\n+            \n+            if char in depth:\n+                depth[char] += 1\n+            elif char in matching.values():\n+                for opener, closer in matching.items():\n+                    if char == closer:\n+                        depth[opener] = max(0, depth[opener] - 1)\n+            \n+            if char == ',' and all(d == 0 for d in depth.values()):\n+                arguments.append(''.join(current).strip())\n+                current = []\n+            else:\n+                current.append(char)\n+            \n+            i += 1\n+        \n+        if current:\n+            arguments.append(''.join(current).strip())\n+        \n+        for argument in arguments:\n             argument = argument.strip()\n             ends_open = ends_close = 0\n             while argument.startswith('['):\ndiff --git a/test_debug.py b/test_debug.py\nnew file mode 100644\nindex 000000000..8b1378917\n--- /dev/null\n+++ b/test_debug.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 000000000..382fff0ff\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,81 @@\n+\"\"\"Test the fix for tuple default arguments in function signatures.\"\"\"\n+\n+import os\n+import sys\n+import tempfile\n+import shutil\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+from sphinx.application import Sphinx\n+from sphinx.util.docutils import docutils_namespace\n+\n+# Create a minimal test case\n+test_source = '''\n+import sys\n+import os\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+def add_lines(lines, color=(1, 1, 1), width=5, label=None, name=None):\n+    \"\"\"Test function with tuple default argument.\"\"\"\n+    pass\n+\n+class TestClass:\n+    def add_lines(self, lines, color=(1, 1, 1), width=5, label=None, name=None):\n+        \"\"\"Test method with tuple default argument.\"\"\"\n+        pass\n+'''\n+\n+conf_py = '''\n+project = 'Test'\n+extensions = ['sphinx.ext.autodoc']\n+'''\n+\n+index_rst = '''\n+Test\n+====\n+\n+.. autofunction:: test_module.add_lines\n+\n+.. autoclass:: test_module.TestClass\n+   :members:\n+'''\n+\n+# Create temporary directory structure\n+with tempfile.TemporaryDirectory() as tmpdir:\n+    srcdir = os.path.join(tmpdir, 'source')\n+    outdir = os.path.join(tmpdir, 'build')\n+    doctreedir = os.path.join(tmpdir, 'doctree')\n+    \n+    os.makedirs(srcdir)\n+    \n+    # Add srcdir to sys.path so test_module can be imported\n+    sys.path.insert(0, srcdir)\n+    \n+    # Write test files\n+    with open(os.path.join(srcdir, 'test_module.py'), 'w') as f:\n+        f.write(test_source)\n+    \n+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:\n+        f.write(conf_py)\n+    \n+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:\n+        f.write(index_rst)\n+    \n+    # Build documentation\n+    with docutils_namespace():\n+        app = Sphinx(srcdir, srcdir, outdir, doctreedir, 'text')\n+        app.build()\n+    \n+    # Read output\n+    with open(os.path.join(outdir, 'index.txt'), 'r') as f:\n+        output = f.read()\n+    \n+    print(\"Generated documentation:\")\n+    print(output)\n+    \n+    # Check that tuple default values are preserved\n+    if 'color=(1, 1, 1)' in output:\n+        print(\"\\n\u2713 SUCCESS: Tuple default values are correctly preserved!\")\n+    else:\n+        print(\"\\n\u2717 FAILURE: Tuple default values are not preserved correctly.\")\n+        print(\"Looking for 'color=(1, 1, 1)' in the output.\")\ndiff --git a/test_improved_parse.py b/test_improved_parse.py\nnew file mode 100644\nindex 000000000..c9338d06e\n--- /dev/null\n+++ b/test_improved_parse.py\n@@ -0,0 +1,44 @@\n+import re\n+\n+def smart_split_args(arglist):\n+    \"\"\"Split an argument list by commas, but not commas inside parentheses, brackets, or braces.\"\"\"\n+    result = []\n+    current = []\n+    depth = {'(': 0, '[': 0, '{': 0}\n+    matching = {'(': ')', '[': ']', '{': '}'}\n+    \n+    i = 0\n+    while i < len(arglist):\n+        char = arglist[i]\n+        \n+        if char in depth:\n+            depth[char] += 1\n+        elif char in matching.values():\n+            for opener, closer in matching.items():\n+                if char == closer:\n+                    depth[opener] = max(0, depth[opener] - 1)\n+        \n+        if char == ',' and all(d == 0 for d in depth.values()):\n+            result.append(''.join(current).strip())\n+            current = []\n+        else:\n+            current.append(char)\n+        \n+        i += 1\n+    \n+    if current:\n+        result.append(''.join(current).strip())\n+    \n+    return result\n+\n+# Test the function\n+test_cases = [\n+    \"lines, color=(1, 1, 1), width=5, label=None, name=None\",\n+    \"a, b=[1, 2, 3], c={1: 2, 3: 4}, d=None\",\n+    \"simple, args, without, tuples\"\n+]\n+\n+for test in test_cases:\n+    print(f\"Input: {test}\")\n+    print(f\"Output: {smart_split_args(test)}\")\n+    print()\ndiff --git a/test_parse_issue.py b/test_parse_issue.py\nnew file mode 100644\nindex 000000000..f46d5843b\n--- /dev/null\n+++ b/test_parse_issue.py\n@@ -0,0 +1,9 @@\n+from sphinx.util.inspect import signature_from_str\n+\n+# Test what happens when we parse the arglist\n+arglist = \"lines, color=(1, 1, 1), width=5, label=None, name=None\"\n+try:\n+    sig = signature_from_str('(%s)' % arglist)\n+    print(\"Successfully parsed signature:\", sig)\n+except Exception as e:\n+    print(\"Failed to parse signature:\", e)\ndiff --git a/test_tuple_default.py b/test_tuple_default.py\nnew file mode 100644\nindex 000000000..7e66f9be8\n--- /dev/null\n+++ b/test_tuple_default.py\n@@ -0,0 +1,9 @@\n+import inspect\n+from sphinx.util.inspect import stringify_signature\n+\n+def add_lines(lines, color=(1, 1, 1), width=5, label=None, name=None):\n+    pass\n+\n+sig = inspect.signature(add_lines)\n+print(\"Original signature:\", sig)\n+print(\"Stringified signature:\", stringify_signature(sig, show_annotation=False))\ndiff --git a/tox.ini b/tox.ini\nindex a61299979..e2baccc07 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = --color yes\n commands=\n-    pytest --durations 25 {posargs}\n+    pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From 785f4d695cfca0eeb537c92166808bc9f187d8c0 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Sat, 3 Oct 2020 12:00:33 +0900\nSubject: [PATCH] Fix #7964: autodoc: Tuple in default value is wrongly\n rendered\n\nThis implements tuple literal support to sphinx.pycode.ast.unparse().\n---\n CHANGES                  |  1 +\n sphinx/pycode/ast.py     | 18 ++++++++++++++++--\n tests/test_pycode_ast.py |  2 +-\n 3 files changed, 18 insertions(+), 3 deletions(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 22876d43b1c..bfe8910d16b 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -34,6 +34,7 @@ Bugs fixed\n   by string not ending with blank lines\n * #8142: autodoc: Wrong constructor signature for the class derived from\n   typing.Generic\n+* #7964: autodoc: Tuple in default value is wrongly rendered\n * #8192: napoleon: description is disappeared when it contains inline literals\n * #8142: napoleon: Potential of regex denial of service in google style docs\n * #8169: LaTeX: pxjahyper loaded even when latex_engine is not platex\ndiff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 9bafff11c1a..2583448d5d7 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -166,14 +166,28 @@ def visit_Set(self, node: ast.Set) -> str:\n         return \"{\" + \", \".join(self.visit(e) for e in node.elts) + \"}\"\n \n     def visit_Subscript(self, node: ast.Subscript) -> str:\n-        return \"%s[%s]\" % (self.visit(node.value), self.visit(node.slice))\n+        def is_simple_tuple(value: ast.AST) -> bool:\n+            return (\n+                isinstance(value, ast.Tuple) and\n+                bool(value.elts) and\n+                not any(isinstance(elt, ast.Starred) for elt in value.elts)\n+            )\n+\n+        if is_simple_tuple(node.slice):\n+            elts = \", \".join(self.visit(e) for e in node.slice.elts)  # type: ignore\n+            return \"%s[%s]\" % (self.visit(node.value), elts)\n+        elif isinstance(node.slice, ast.Index) and is_simple_tuple(node.slice.value):\n+            elts = \", \".join(self.visit(e) for e in node.slice.value.elts)  # type: ignore\n+            return \"%s[%s]\" % (self.visit(node.value), elts)\n+        else:\n+            return \"%s[%s]\" % (self.visit(node.value), self.visit(node.slice))\n \n     def visit_UnaryOp(self, node: ast.UnaryOp) -> str:\n         return \"%s %s\" % (self.visit(node.op), self.visit(node.operand))\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n         if node.elts:\n-            return \", \".join(self.visit(e) for e in node.elts)\n+            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n         else:\n             return \"()\"\n \ndiff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex 9b12d24d5f6..32a784b7419 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -53,7 +53,7 @@\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n-    (\"(1, 2, 3)\", \"1, 2, 3\"),                   # Tuple\n+    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8265"}