{"instance_id": "sympy__sympy-24539", "score": "C", "diff": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 12bd2fc920..a3e722ecda 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -616,9 +616,34 @@ def set_ring(self, new_ring):\n             return new_ring.from_dict(self, self.ring.domain)\n \n     def as_expr(self, *symbols):\n+        \"\"\"\n+        Convert a polynomial to a SymPy expression.\n+\n+        Parameters\n+        ==========\n+\n+        symbols : optional\n+            Symbols to use for the generators. If not specified, the symbols\n+            from the ring will be used. If specified, the number of symbols\n+            must match the number of generators in the ring.\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy import ring, ZZ, symbols\n+        >>> R, x, y, z = ring(\"x,y,z\", ZZ)\n+        >>> f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+        >>> f.as_expr()\n+        3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+        >>> u, v, w = symbols(\"u,v,w\")\n+        >>> f.as_expr(u, v, w)\n+        3*u**2*v - u*v*w + 7*w**3 + 1\n+\n+        \"\"\"\n         if symbols and len(symbols) != self.ring.ngens:\n             raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n-        else:\n+        elif not symbols:\n             symbols = self.ring.symbols\n \n         return expr_from_dict(self.as_expr_dict(), *symbols)\n", "gold_standard_diff": "From 107bf052a18913c8241a5682791733ccec6c67ba Mon Sep 17 00:00:00 2001\nFrom: Steve Kieffer <sk@skieffer.info>\nDate: Tue, 17 Jan 2023 12:23:42 -0500\nSubject: [PATCH] Fix `PolyElement.as_expr()`\n\nMake it accept symbols.\n---\n sympy/polys/rings.py            | 9 ++++++---\n sympy/polys/tests/test_rings.py | 6 +++---\n 2 files changed, 9 insertions(+), 6 deletions(-)\n\ndiff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 12bd2fc920aa..e99f6676ec42 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -616,10 +616,13 @@ def set_ring(self, new_ring):\n             return new_ring.from_dict(self, self.ring.domain)\n \n     def as_expr(self, *symbols):\n-        if symbols and len(symbols) != self.ring.ngens:\n-            raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n-        else:\n+        if not symbols:\n             symbols = self.ring.symbols\n+        elif len(symbols) != self.ring.ngens:\n+            raise ValueError(\n+                \"Wrong number of symbols, expected %s got %s\" %\n+                (self.ring.ngens, len(symbols))\n+            )\n \n         return expr_from_dict(self.as_expr_dict(), *symbols)\n \ndiff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex b3962136a358..831c538833f3 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -259,11 +259,11 @@ def test_PolyElement_as_expr():\n     assert f != g\n     assert f.as_expr() == g\n \n-    X, Y, Z = symbols(\"x,y,z\")\n-    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n \n     assert f != g\n-    assert f.as_expr(X, Y, Z) == g\n+    assert f.as_expr(U, V, W) == g\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/24539"}