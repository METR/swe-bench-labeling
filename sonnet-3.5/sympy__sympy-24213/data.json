{"instance_id": "sympy__sympy-24213", "score": "C", "diff": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 0ff7e4fd0a..1f3103443c 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -348,6 +348,16 @@ def parse_dict(d):\n     def base_dims(self):\n         return self.args[0]\n \n+    def equivalent_dims(self, dim1, dim2):\n+        \"\"\"\n+        Check if two dimensions are equivalent.\n+\n+        This method checks if two dimensions are equivalent by comparing\n+        their base dimensional dependencies.\n+        \"\"\"\n+        deps1 = self.get_dimensional_dependencies(dim1)\n+        deps2 = self.get_dimensional_dependencies(dim2)\n+        return deps1 == deps2\n     @property\n     def derived_dims(self):\n         return self.args[1]\ndiff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..870af86caa 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,10 +175,10 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n+                        'but it should be equivalent to {}'.format(\n                             addend, addend_dim, dim))\n                 factor += addend_factor\n             return factor, dim\n", "gold_standard_diff": "From f6543ed346d0485fdc753ebd5ccf6edebcb07258 Mon Sep 17 00:00:00 2001\nFrom: Andrey Lekar <andrey_lekar@adoriasoft.com>\nDate: Thu, 3 Nov 2022 15:56:42 +0200\nSubject: [PATCH] Fix collect_factor_and_dimension\n\n---\n sympy/physics/units/tests/test_quantities.py | 16 ++++++++++++++++\n sympy/physics/units/unitsystem.py            |  2 +-\n 2 files changed, 17 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex c1830ba5f772..0d6784decf2d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,22 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\ndiff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b3c..5705c821c217 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/24213"}