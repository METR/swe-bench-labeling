From 863f52014c3ce94e71ac6199dfee47a5d97854c0 Mon Sep 17 00:00:00 2001
From: NotWearingPants <26556598+NotWearingPants@users.noreply.github.com>
Date: Sat, 20 Aug 2022 21:15:24 +0300
Subject: [PATCH] feat: support Contains.as_set

---
 sympy/sets/contains.py            | 2 +-
 sympy/sets/tests/test_contains.py | 7 +++----
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py
index b2d4268d1288..997a4d8e1685 100644
--- a/sympy/sets/contains.py
+++ b/sympy/sets/contains.py
@@ -45,4 +45,4 @@ def binary_symbols(self):
             isinstance(i, (Eq, Ne))])
 
     def as_set(self):
-        raise NotImplementedError()
+        return self.args[1]
diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py
index 1973fed19c4e..cd56148d9d22 100644
--- a/sympy/sets/tests/test_contains.py
+++ b/sympy/sets/tests/test_contains.py
@@ -41,10 +41,9 @@ def test_binary_symbols():
 def test_as_set():
     x = Symbol('x')
     y = Symbol('y')
-    # Contains is a BooleanFunction whose value depends on an arg's
-    # containment in a Set -- rewriting as a Set is not yet implemented
-    raises(NotImplementedError, lambda:
-           Contains(x, FiniteSet(y)).as_set())
+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)
+    assert Contains(x, S.Integers).as_set() == S.Integers
+    assert Contains(x, S.Reals).as_set() == S.Reals
 
 def test_type_error():
     # Pass in a parameter not of type "set"
