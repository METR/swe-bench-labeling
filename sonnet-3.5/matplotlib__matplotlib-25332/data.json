{"instance_id": "matplotlib__matplotlib-25332", "score": "I", "diff": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex b4c38368bf..34f34b665b 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -81,6 +81,7 @@ class _AxesStack:\n     def __init__(self):\n         self._axes = {}  # Mapping of axes to \"gca\" order.\n         self._counter = itertools.count()\n+        self._align_label_groups = {}\n \n     def as_list(self):\n         \"\"\"List the axes that have been added to the figure.\"\"\"\n@@ -115,6 +116,7 @@ class SubplotParams:\n                  wspace=None, hspace=None):\n         \"\"\"\n         Defaults are given by :rc:`figure.subplot.[name]`.\n+        self._align_label_groups = {}\n \n         Parameters\n         ----------\n@@ -178,6 +180,7 @@ class FigureBase(Artist):\n         # this is used by the property methods in the artist base class\n         # which are over-ridden in this class\n         del self._axes\n+        self._align_label_groups = {}\n \n         self._suptitle = None\n         self._supxlabel = None\n@@ -1362,6 +1365,72 @@ default: %(va)s\n         This assumes that ``axs`` are from the same `.GridSpec`, so that\n         their `.SubplotSpec` positions correspond to figure positions.\n \n+        Examples\n+        --------\n+        Example with rotated xtick labels::\n+\n+            fig, axs = plt.subplots(1, 2)\n+            for tick in axs[0].get_xticklabels():\n+                tick.set_rotation(55)\n+            axs[0].set_xlabel(\"XLabel 0\")\n+            axs[1].set_xlabel(\"XLabel 1\")\n+            fig.align_xlabels()\n+        \"\"\"\n+        if axs is None:\n+            axs = self.axes\n+        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]\n+        for ax in axs:\n+            _log.debug(\" Working on: %s\", ax.get_xlabel())\n+            rowspan = ax.get_subplotspec().rowspan\n+            pos = ax.xaxis.get_label_position()  # top or bottom\n+            # Search through other axes for label positions that are same as\n+            # this one and that share the appropriate row number.\n+            # Add to a grouper associated with each axes of siblings.\n+            if pos not in self._align_label_groups:\n+                self._align_label_groups[pos] = {}\n+            if rowspan not in self._align_label_groups[pos]:\n+                self._align_label_groups[pos][rowspan] = []\n+            self._align_label_groups[pos][rowspan].append(ax)\n+\n+        # Do the actual alignment\n+        for pos in self._align_label_groups:\n+            for rowspan, group in self._align_label_groups[pos].items():\n+                bboxes = [ax.xaxis.get_label().get_window_extent() for ax in group]\n+                max_height = max(bbox.height for bbox in bboxes)\n+                for ax in group:\n+                    label = ax.xaxis.get_label()\n+                    bbox = label.get_window_extent()\n+                    if pos == \"bottom\":\n+                        label.set_position((label.get_position()[0], -max_height / ax.figure.dpi * 72))\n+                    else:\n+                        label.set_position((label.get_position()[0], max_height / ax.figure.dpi * 72))\n+\n+        self.stale = True\n+\n+        Alignment persists for draw events after this is called.\n+\n+        If a label is on the bottom, it is aligned with labels on Axes that\n+        also have their label on the bottom and that have the same\n+        bottom-most subplot row.  If the label is on the top,\n+        it is aligned with labels on Axes with the same top-most row.\n+\n+        Parameters\n+        ----------\n+        axs : list of `~matplotlib.axes.Axes`\n+            Optional list of (or `~numpy.ndarray`) `~matplotlib.axes.Axes`\n+            to align the xlabels.\n+            Default is to align all Axes on the figure.\n+\n+        See Also\n+        --------\n+        matplotlib.figure.Figure.align_ylabels\n+        matplotlib.figure.Figure.align_labels\n+\n+        Notes\n+        -----\n+        This assumes that ``axs`` are from the same `.GridSpec`, so that\n+        their `.SubplotSpec` positions correspond to figure positions.\n+\n         Examples\n         --------\n         Example with rotated xtick labels::\n@@ -1423,6 +1492,71 @@ default: %(va)s\n         This assumes that ``axs`` are from the same `.GridSpec`, so that\n         their `.SubplotSpec` positions correspond to figure positions.\n \n+        Examples\n+        --------\n+        Example with large yticks labels::\n+\n+            fig, axs = plt.subplots(2, 1)\n+            axs[0].plot(np.arange(0, 1000, 50))\n+            axs[0].set_ylabel(\"YLabel 0\")\n+            axs[1].set_ylabel(\"YLabel 1\")\n+            fig.align_ylabels()\n+        \"\"\"\n+        if axs is None:\n+            axs = self.axes\n+        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]\n+        for ax in axs:\n+            _log.debug(\" Working on: %s\", ax.get_ylabel())\n+            colspan = ax.get_subplotspec().colspan\n+            pos = ax.yaxis.get_label_position()  # left or right\n+            # Search through other axes for label positions that are same as\n+            # this one and that share the appropriate column number.\n+            # Add to a list associated with each axes of siblings.\n+            if pos not in self._align_label_groups:\n+                self._align_label_groups[pos] = {}\n+            if colspan not in self._align_label_groups[pos]:\n+                self._align_label_groups[pos][colspan] = []\n+            self._align_label_groups[pos][colspan].append(ax)\n+\n+        # Do the actual alignment\n+        for pos in self._align_label_groups:\n+            for colspan, group in self._align_label_groups[pos].items():\n+                bboxes = [ax.yaxis.get_label().get_window_extent() for ax in group]\n+                max_width = max(bbox.width for bbox in bboxes)\n+                for ax in group:\n+                    label = ax.yaxis.get_label()\n+                    bbox = label.get_window_extent()\n+                    if pos == \"left\":\n+                        label.set_position((-max_width / ax.figure.dpi * 72, label.get_position()[1]))\n+                    else:\n+                        label.set_position((max_width / ax.figure.dpi * 72, label.get_position()[1]))\n+\n+        self.stale = True\n+\n+        Alignment persists for draw events after this is called.\n+\n+        If a label is on the left, it is aligned with labels on Axes that\n+        also have their label on the left and that have the same\n+        left-most subplot column.  If the label is on the right,\n+        it is aligned with labels on Axes with the same right-most column.\n+\n+        Parameters\n+        ----------\n+        axs : list of `~matplotlib.axes.Axes`\n+            Optional list (or `~numpy.ndarray`) of `~matplotlib.axes.Axes`\n+            to align the ylabels.\n+            Default is to align all Axes on the figure.\n+\n+        See Also\n+        --------\n+        matplotlib.figure.Figure.align_xlabels\n+        matplotlib.figure.Figure.align_labels\n+\n+        Notes\n+        -----\n+        This assumes that ``axs`` are from the same `.GridSpec`, so that\n+        their `.SubplotSpec` positions correspond to figure positions.\n+\n         Examples\n         --------\n         Example with large yticks labels::\n@@ -1472,6 +1606,25 @@ default: %(va)s\n         --------\n         matplotlib.figure.Figure.align_xlabels\n \n+        matplotlib.figure.Figure.align_ylabels\n+        \"\"\"\n+        self._align_label_groups = {}\n+        self.align_xlabels(axs=axs)\n+        self.align_ylabels(axs=axs)\n+\n+        Alignment persists for draw events after this is called.\n+\n+        Parameters\n+        ----------\n+        axs : list of `~matplotlib.axes.Axes`\n+            Optional list (or `~numpy.ndarray`) of `~matplotlib.axes.Axes`\n+            to align the labels.\n+            Default is to align all Axes on the figure.\n+\n+        See Also\n+        --------\n+        matplotlib.figure.Figure.align_xlabels\n+\n         matplotlib.figure.Figure.align_ylabels\n         \"\"\"\n         self.align_xlabels(axs=axs)\n@@ -2149,6 +2302,7 @@ class SubFigure(FigureBase):\n         parent : `.Figure` or `.SubFigure`\n             Figure or subfigure that contains the SubFigure.  SubFigures\n             can be nested.\n+        self._align_label_groups = {}\n \n         subplotspec : `.gridspec.SubplotSpec`\n             Defines the region in a parent gridspec where the subfigure will\n@@ -2180,6 +2334,7 @@ class SubFigure(FigureBase):\n             edgecolor = mpl.rcParams['figure.edgecolor']\n         if frameon is None:\n             frameon = mpl.rcParams['figure.frameon']\n+        self._align_label_groups = {}\n \n         self._subplotspec = subplotspec\n         self._parent = parent\n@@ -2382,6 +2537,7 @@ class Figure(FigureBase):\n         ----------\n         figsize : 2-tuple of floats, default: :rc:`figure.figsize`\n             Figure dimension ``(width, height)`` in inches.\n+        self._align_label_groups = {}\n \n         dpi : float, default: :rc:`figure.dpi`\n             Dots per inch.\n@@ -2461,6 +2617,7 @@ None}, default: None\n         \"\"\"\n         super().__init__(**kwargs)\n         self._layout_engine = None\n+        self._align_label_groups = {}\n \n         if layout is not None:\n             if (tight_layout is not None):\n", "gold_standard_diff": "From ea2e9eaa02fcf94d55824c1b76b3366e88e081ee Mon Sep 17 00:00:00 2001\nFrom: Antony Lee <anntzer.lee@gmail.com>\nDate: Sun, 26 Feb 2023 12:17:28 +0100\nSubject: [PATCH] Support pickling of figures with aligned x/y labels.\n\n---\n lib/matplotlib/cbook.py             | 13 +++++++++++++\n lib/matplotlib/tests/test_pickle.py |  4 ++++\n 2 files changed, 17 insertions(+)\n\ndiff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex c9699b2e21f5..1a64331e201d 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -788,6 +788,19 @@ class Grouper:\n     def __init__(self, init=()):\n         self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}\n \n+    def __getstate__(self):\n+        return {\n+            **vars(self),\n+            # Convert weak refs to strong ones.\n+            \"_mapping\": {k(): [v() for v in vs] for k, vs in self._mapping.items()},\n+        }\n+\n+    def __setstate__(self, state):\n+        vars(self).update(state)\n+        # Convert strong refs to weak ones.\n+        self._mapping = {weakref.ref(k): [*map(weakref.ref, vs)]\n+                         for k, vs in self._mapping.items()}\n+\n     def __contains__(self, item):\n         return weakref.ref(item) in self._mapping\n \ndiff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex ec6bdcc2fe14..bdcedee37308 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -58,6 +58,7 @@ def _generate_complete_test_figure(fig_ref):\n     # Ensure lists also pickle correctly.\n     plt.subplot(3, 3, 1)\n     plt.plot(list(range(10)))\n+    plt.ylabel(\"hello\")\n \n     plt.subplot(3, 3, 2)\n     plt.contourf(data, hatches=['//', 'ooo'])\n@@ -68,6 +69,7 @@ def _generate_complete_test_figure(fig_ref):\n \n     plt.subplot(3, 3, 4)\n     plt.imshow(data)\n+    plt.ylabel(\"hello\\nworld!\")\n \n     plt.subplot(3, 3, 5)\n     plt.pcolor(data)\n@@ -89,6 +91,8 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+    fig_ref.align_ylabels()  # Test handling of _align_label_groups Groupers.\n+\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n", "gold_standard_pr_link": "https://github.com/matplotlib/matplotlib/pull/25332"}