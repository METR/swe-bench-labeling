{"instance_id": "pytest-dev__pytest-5840", "score": "I", "diff": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546..afb918ef9 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -435,9 +435,9 @@ class PytestPluginManager(PluginManager):\n         # Use realpath to avoid loading the same conftest twice\n         # with build systems that create build directories containing\n         # symlinks to actual files.\n-        conftestpath = unique_path(conftestpath)\n+        unique_conftestpath = unique_path(conftestpath)\n         try:\n-            return self._conftestpath2mod[conftestpath]\n+            return self._conftestpath2mod[unique_conftestpath]\n         except KeyError:\n             pkgpath = conftestpath.pypkgpath()\n             if pkgpath is None:\n@@ -454,7 +454,7 @@ class PytestPluginManager(PluginManager):\n                 raise ConftestImportFailure(conftestpath, sys.exc_info())\n \n             self._conftest_plugins.add(mod)\n-            self._conftestpath2mod[conftestpath] = mod\n+            self._conftestpath2mod[unique_conftestpath] = mod\n             dirpath = conftestpath.dirpath()\n             if dirpath in self._dirpath2confmods:\n                 for path, mods in self._dirpath2confmods.items():\ndiff --git a/testing/test_conftest.py b/testing/test_conftest.py\nindex 9888f5457..98ec9ece9 100644\n--- a/testing/test_conftest.py\n+++ b/testing/test_conftest.py\n@@ -1,4 +1,5 @@\n import os.path\n+import sys\n import textwrap\n \n import py\n@@ -638,4 +639,41 @@ def test_required_option_help(testdir):\n     )\n     result = testdir.runpytest(\"-h\", x)\n     assert \"argument --xyz is required\" not in result.stdout.str()\n+\n+@pytest.mark.skipif(not sys.platform.startswith(\"win\"), reason=\"Windows only issue\") \n+def test_conftest_import_with_mixed_case_path_on_windows(testdir):\n+    \"\"\"Regression test for issue where pytest would convert paths to lowercase\n+    on Windows, breaking imports from directories with uppercase letters (#5792).\n+    \"\"\"\n+    # Create a directory structure with mixed case similar to the reported issue\n+    testdir.tmpdir.ensure(\"Azure/KMS/ComponentTest/Python/PIsys\", dir=True)\n+    testdir.tmpdir.join(\"Azure/KMS/ComponentTest/Python/PIsys/conftest.py\").write(\n+        textwrap.dedent(\n+            \"\"\"\\\n+            import pytest\n+            \n+            @pytest.fixture\n+            def my_fixture():\n+                return \"test_value\"\n+            \"\"\"\n+        )\n+    )\n+    testdir.tmpdir.join(\"Azure/KMS/ComponentTest/Python/PIsys/test_sample.py\").write(\n+        textwrap.dedent(\n+            \"\"\"\\\n+            def test_with_fixture(my_fixture):\n+                assert my_fixture == \"test_value\"\n+            \"\"\"\n+        )\n+    )\n+    \n+    # Change to the Python directory as in the issue report\n+    with testdir.tmpdir.join(\"Azure/KMS/ComponentTest/Python\").as_cwd():\n+        result = testdir.runpytest(\"--collect-only\", \"./PIsys\")\n+    \n+    # Should not have import errors\n+    result.stdout.no_fnmatch_line(\"*ModuleNotFoundError*\")\n+    result.stdout.no_fnmatch_line(\"*ImportError*\")\n+    # Should find the test\n+    result.stdout.fnmatch_lines([\"*test_sample.py*\", \"*test_with_fixture*\"])\n     assert \"general:\" in result.stdout.str()\n", "gold_standard_diff": "From cf5b544db35478afe540eb78d75ef97ed798e1f1 Mon Sep 17 00:00:00 2001\nFrom: Bruno Oliveira <nicoddemus@gmail.com>\nDate: Wed, 11 Sep 2019 19:37:42 -0300\nSubject: [PATCH 1/4] Revert \"Merge pull request #5792 from\n dynatrace-oss-contrib/bugfix/badcase\"\n\nThis reverts commit 955e54221008aba577ecbaefa15679f6777d3bf8, reversing\nchanges made to 0215bcd84e900d9271558df98bed89f4b96187f8.\n\nWill attempt a simpler approach\n---\n AUTHORS                        |  1 -\n src/_pytest/config/__init__.py | 16 ++++++----------\n src/_pytest/pathlib.py         | 10 ----------\n testing/test_conftest.py       | 25 ++++---------------------\n 4 files changed, 10 insertions(+), 42 deletions(-)\n\ndiff --git a/AUTHORS b/AUTHORS\nindex a64c95acb6b..ff47f9d7c51 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -56,7 +56,6 @@ Charnjit SiNGH (CCSJ)\n Chris Lamb\n Christian Boelsen\n Christian Fetzer\n-Christian Neum\u00fcller\n Christian Theunert\n Christian Tismer\n Christopher Gilling\ndiff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex 3a0eca546a3..b861563e99b 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -30,7 +30,6 @@\n from _pytest.compat import importlib_metadata\n from _pytest.outcomes import fail\n from _pytest.outcomes import Skipped\n-from _pytest.pathlib import unique_path\n from _pytest.warning_types import PytestConfigWarning\n \n hookimpl = HookimplMarker(\"pytest\")\n@@ -367,7 +366,7 @@ def _set_initial_conftests(self, namespace):\n         \"\"\"\n         current = py.path.local()\n         self._confcutdir = (\n-            unique_path(current.join(namespace.confcutdir, abs=True))\n+            current.join(namespace.confcutdir, abs=True)\n             if namespace.confcutdir\n             else None\n         )\n@@ -406,18 +405,19 @@ def _getconftestmodules(self, path):\n         else:\n             directory = path\n \n-        directory = unique_path(directory)\n-\n         # XXX these days we may rather want to use config.rootdir\n         # and allow users to opt into looking into the rootdir parent\n         # directories instead of requiring to specify confcutdir\n         clist = []\n-        for parent in directory.parts():\n+        for parent in directory.realpath().parts():\n             if self._confcutdir and self._confcutdir.relto(parent):\n                 continue\n             conftestpath = parent.join(\"conftest.py\")\n             if conftestpath.isfile():\n-                mod = self._importconftest(conftestpath)\n+                # Use realpath to avoid loading the same conftest twice\n+                # with build systems that create build directories containing\n+                # symlinks to actual files.\n+                mod = self._importconftest(conftestpath.realpath())\n                 clist.append(mod)\n         self._dirpath2confmods[directory] = clist\n         return clist\n@@ -432,10 +432,6 @@ def _rget_with_confmod(self, name, path):\n         raise KeyError(name)\n \n     def _importconftest(self, conftestpath):\n-        # Use realpath to avoid loading the same conftest twice\n-        # with build systems that create build directories containing\n-        # symlinks to actual files.\n-        conftestpath = unique_path(conftestpath)\n         try:\n             return self._conftestpath2mod[conftestpath]\n         except KeyError:\ndiff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 0403b694737..19f9c062f89 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -11,7 +11,6 @@\n from os.path import expanduser\n from os.path import expandvars\n from os.path import isabs\n-from os.path import normcase\n from os.path import sep\n from posixpath import sep as posix_sep\n \n@@ -335,12 +334,3 @@ def fnmatch_ex(pattern, path):\n def parts(s):\n     parts = s.split(sep)\n     return {sep.join(parts[: i + 1]) or sep for i in range(len(parts))}\n-\n-\n-def unique_path(path):\n-    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n-    systems such as Windows.\n-\n-    This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n-    natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\ndiff --git a/testing/test_conftest.py b/testing/test_conftest.py\nindex 9888f5457f3..447416f1076 100644\n--- a/testing/test_conftest.py\n+++ b/testing/test_conftest.py\n@@ -1,4 +1,3 @@\n-import os.path\n import textwrap\n \n import py\n@@ -6,7 +5,6 @@\n import pytest\n from _pytest.config import PytestPluginManager\n from _pytest.main import ExitCode\n-from _pytest.pathlib import unique_path\n \n \n def ConftestWithSetinitial(path):\n@@ -143,11 +141,11 @@ def test_conftestcutdir(testdir):\n     # but we can still import a conftest directly\n     conftest._importconftest(conf)\n     values = conftest._getconftestmodules(conf.dirpath())\n-    assert values[0].__file__.startswith(str(unique_path(conf)))\n+    assert values[0].__file__.startswith(str(conf))\n     # and all sub paths get updated properly\n     values = conftest._getconftestmodules(p)\n     assert len(values) == 1\n-    assert values[0].__file__.startswith(str(unique_path(conf)))\n+    assert values[0].__file__.startswith(str(conf))\n \n \n def test_conftestcutdir_inplace_considered(testdir):\n@@ -156,7 +154,7 @@ def test_conftestcutdir_inplace_considered(testdir):\n     conftest_setinitial(conftest, [conf.dirpath()], confcutdir=conf.dirpath())\n     values = conftest._getconftestmodules(conf.dirpath())\n     assert len(values) == 1\n-    assert values[0].__file__.startswith(str(unique_path(conf)))\n+    assert values[0].__file__.startswith(str(conf))\n \n \n @pytest.mark.parametrize(\"name\", \"test tests whatever .dotdir\".split())\n@@ -166,7 +164,7 @@ def test_setinitial_conftest_subdirs(testdir, name):\n     conftest = PytestPluginManager()\n     conftest_setinitial(conftest, [sub.dirpath()], confcutdir=testdir.tmpdir)\n     if name not in (\"whatever\", \".dotdir\"):\n-        assert unique_path(subconftest) in conftest._conftestpath2mod\n+        assert subconftest in conftest._conftestpath2mod\n         assert len(conftest._conftestpath2mod) == 1\n     else:\n         assert subconftest not in conftest._conftestpath2mod\n@@ -277,21 +275,6 @@ def fixture():\n     assert result.ret == ExitCode.OK\n \n \n-@pytest.mark.skipif(\n-    os.path.normcase(\"x\") != os.path.normcase(\"X\"),\n-    reason=\"only relevant for case insensitive file systems\",\n-)\n-def test_conftest_badcase(testdir):\n-    \"\"\"Check conftest.py loading when directory casing is wrong.\"\"\"\n-    testdir.tmpdir.mkdir(\"JenkinsRoot\").mkdir(\"test\")\n-    source = {\"setup.py\": \"\", \"test/__init__.py\": \"\", \"test/conftest.py\": \"\"}\n-    testdir.makepyfile(**{\"JenkinsRoot/%s\" % k: v for k, v in source.items()})\n-\n-    testdir.tmpdir.join(\"jenkinsroot/test\").chdir()\n-    result = testdir.runpytest()\n-    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n-\n-\n def test_no_conftest(testdir):\n     testdir.makeconftest(\"assert 0\")\n     result = testdir.runpytest(\"--noconftest\")\n\nFrom b48f51eb031f1b35b7fd4cd5d9da774541e10ec1 Mon Sep 17 00:00:00 2001\nFrom: Bruno Oliveira <nicoddemus@gmail.com>\nDate: Wed, 11 Sep 2019 20:09:08 -0300\nSubject: [PATCH 2/4] Use Path() objects to store conftest files\n\nUsing Path().resolve() is better than py.path.realpath because\nit resolves to the correct path/drive in case-insensitive file systems (#5792):\n\n>>> from py.path import local\n>>> from pathlib import Path\n>>>\n>>> local('d:\\\\projects').realpath()\nlocal('d:\\\\projects')\n>>> Path('d:\\\\projects').resolve()\nWindowsPath('D:/projects')\n\nFix #5819\n---\n src/_pytest/config/__init__.py | 15 +++++++++------\n testing/test_conftest.py       | 32 ++++++++++++++++++++++++++++++--\n 2 files changed, 39 insertions(+), 8 deletions(-)\n\ndiff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex b861563e99b..e39c63c4b52 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -414,10 +414,7 @@ def _getconftestmodules(self, path):\n                 continue\n             conftestpath = parent.join(\"conftest.py\")\n             if conftestpath.isfile():\n-                # Use realpath to avoid loading the same conftest twice\n-                # with build systems that create build directories containing\n-                # symlinks to actual files.\n-                mod = self._importconftest(conftestpath.realpath())\n+                mod = self._importconftest(conftestpath)\n                 clist.append(mod)\n         self._dirpath2confmods[directory] = clist\n         return clist\n@@ -432,8 +429,14 @@ def _rget_with_confmod(self, name, path):\n         raise KeyError(name)\n \n     def _importconftest(self, conftestpath):\n+        # Use a resolved Path object as key to avoid loading the same conftest twice\n+        # with build systems that create build directories containing\n+        # symlinks to actual files.\n+        # Using Path().resolve() is better than py.path.realpath because\n+        # it resolves to the correct path/drive in case-insensitive file systems (#5792)\n+        key = Path(str(conftestpath)).resolve()\n         try:\n-            return self._conftestpath2mod[conftestpath]\n+            return self._conftestpath2mod[key]\n         except KeyError:\n             pkgpath = conftestpath.pypkgpath()\n             if pkgpath is None:\n@@ -450,7 +453,7 @@ def _importconftest(self, conftestpath):\n                 raise ConftestImportFailure(conftestpath, sys.exc_info())\n \n             self._conftest_plugins.add(mod)\n-            self._conftestpath2mod[conftestpath] = mod\n+            self._conftestpath2mod[key] = mod\n             dirpath = conftestpath.dirpath()\n             if dirpath in self._dirpath2confmods:\n                 for path, mods in self._dirpath2confmods.items():\ndiff --git a/testing/test_conftest.py b/testing/test_conftest.py\nindex 447416f1076..3f08ee38169 100644\n--- a/testing/test_conftest.py\n+++ b/testing/test_conftest.py\n@@ -1,4 +1,6 @@\n+import os\n import textwrap\n+from pathlib import Path\n \n import py\n \n@@ -163,11 +165,12 @@ def test_setinitial_conftest_subdirs(testdir, name):\n     subconftest = sub.ensure(\"conftest.py\")\n     conftest = PytestPluginManager()\n     conftest_setinitial(conftest, [sub.dirpath()], confcutdir=testdir.tmpdir)\n+    key = Path(str(subconftest)).resolve()\n     if name not in (\"whatever\", \".dotdir\"):\n-        assert subconftest in conftest._conftestpath2mod\n+        assert key in conftest._conftestpath2mod\n         assert len(conftest._conftestpath2mod) == 1\n     else:\n-        assert subconftest not in conftest._conftestpath2mod\n+        assert key not in conftest._conftestpath2mod\n         assert len(conftest._conftestpath2mod) == 0\n \n \n@@ -275,6 +278,31 @@ def fixture():\n     assert result.ret == ExitCode.OK\n \n \n+@pytest.mark.skipif(\n+    os.path.normcase(\"x\") != os.path.normcase(\"X\"),\n+    reason=\"only relevant for case insensitive file systems\",\n+)\n+def test_conftest_badcase(testdir):\n+    \"\"\"Check conftest.py loading when directory casing is wrong (#5792).\"\"\"\n+    testdir.tmpdir.mkdir(\"JenkinsRoot\").mkdir(\"test\")\n+    source = {\"setup.py\": \"\", \"test/__init__.py\": \"\", \"test/conftest.py\": \"\"}\n+    testdir.makepyfile(**{\"JenkinsRoot/%s\" % k: v for k, v in source.items()})\n+\n+    testdir.tmpdir.join(\"jenkinsroot/test\").chdir()\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n+\n+\n+def test_conftest_uppercase(testdir):\n+    \"\"\"Check conftest.py whose qualified name contains uppercase characters (#5819)\"\"\"\n+    source = {\"__init__.py\": \"\", \"Foo/conftest.py\": \"\", \"Foo/__init__.py\": \"\"}\n+    testdir.makepyfile(**source)\n+\n+    testdir.tmpdir.chdir()\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.NO_TESTS_COLLECTED\n+\n+\n def test_no_conftest(testdir):\n     testdir.makeconftest(\"assert 0\")\n     result = testdir.runpytest(\"--noconftest\")\n\nFrom 05850d73bd9dc77ad2c90cea9767523a2e9d18e0 Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Christian=20Neum=C3=BCller?=\n <christian.neumueller@dynatrace.com>\nDate: Tue, 27 Aug 2019 16:25:24 +0200\nSubject: [PATCH 3/4] =?UTF-8?q?Re-introduce=20Christian=20Neum=C3=BCller?=\n =?UTF-8?q?=20to=20AUTHORS?=\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nThe introduction was reverted by cd29d56\n---\n AUTHORS | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/AUTHORS b/AUTHORS\nindex ff47f9d7c51..a64c95acb6b 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -56,6 +56,7 @@ Charnjit SiNGH (CCSJ)\n Chris Lamb\n Christian Boelsen\n Christian Fetzer\n+Christian Neum\u00fcller\n Christian Theunert\n Christian Tismer\n Christopher Gilling\n\nFrom 5c3b4a6f528f206da449d3c379e33f549f3f66e8 Mon Sep 17 00:00:00 2001\nFrom: Bruno Oliveira <nicoddemus@gmail.com>\nDate: Wed, 11 Sep 2019 21:57:48 -0300\nSubject: [PATCH 4/4] Add CHANGELOG entry for #5792\n\n---\n changelog/5819.bugfix.rst | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 changelog/5819.bugfix.rst\n\ndiff --git a/changelog/5819.bugfix.rst b/changelog/5819.bugfix.rst\nnew file mode 100644\nindex 00000000000..aa953429ad1\n--- /dev/null\n+++ b/changelog/5819.bugfix.rst\n@@ -0,0 +1,2 @@\n+Windows: Fix regression with conftest whose qualified name contains uppercase\n+characters (introduced by #5792).\n", "gold_standard_pr_link": "https://github.com/pytest-dev/pytest/pull/5840"}