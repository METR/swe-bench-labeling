{"instance_id": "django__django-16819", "score": "C", "diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 967a91fdc8..f7b90dbd2a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -861,6 +861,16 @@ class AddIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, RemoveIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.index.name == operation.name\n+        ):\n+            # AddIndex followed by RemoveIndex with the same name cancels out\n+            return []\n+        return super().reduce(operation, app_label)\n+\n \n class RemoveIndex(IndexOperation):\n     \"\"\"Remove an index from a model.\"\"\"\n@@ -904,6 +914,16 @@ class RemoveIndex(IndexOperation):\n     def migration_name_fragment(self):\n         return \"remove_%s_%s\" % (self.model_name_lower, self.name.lower())\n \n+    def reduce(self, operation, app_label):\n+        if (\n+            isinstance(operation, AddIndex)\n+            and self.model_name_lower == operation.model_name_lower\n+            and self.name == operation.index.name\n+        ):\n+            # RemoveIndex followed by AddIndex with the same name cancels out\n+            return []\n+        return super().reduce(operation, app_label)\n+\n \n class RenameIndex(IndexOperation):\n     \"\"\"Rename an index.\"\"\"\ndiff --git a/test_add_remove_index_optimization.py b/test_add_remove_index_optimization.py\nnew file mode 100644\nindex 0000000000..de96118c07\n--- /dev/null\n+++ b/test_add_remove_index_optimization.py\n@@ -0,0 +1,71 @@\n+\"\"\"\n+Test case to add to test_optimizer.py for AddIndex/RemoveIndex optimization\n+\"\"\"\n+from django.db import models\n+from django.db.migrations import operations\n+from django.test import TestCase\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+\n+class TestIndexOptimization(TestCase):\n+    \"\"\"Tests for AddIndex/RemoveIndex operation optimization.\"\"\"\n+\n+    def test_add_remove_index_same_name(self):\n+        \"\"\"AddIndex followed by RemoveIndex with same name should cancel out.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                operations.AddIndex(\n+                    model_name='TestModel',\n+                    index=models.Index(fields=['field1'], name='test_idx')\n+                ),\n+                operations.RemoveIndex(\n+                    model_name='TestModel',\n+                    name='test_idx'\n+                ),\n+            ],\n+            [],\n+        )\n+\n+    def test_remove_add_index_same_name(self):\n+        \"\"\"RemoveIndex followed by AddIndex with same name should cancel out.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                operations.RemoveIndex(\n+                    model_name='TestModel',\n+                    name='test_idx'\n+                ),\n+                operations.AddIndex(\n+                    model_name='TestModel', \n+                    index=models.Index(fields=['field1'], name='test_idx')\n+                ),\n+            ],\n+            [],\n+        )\n+\n+    def test_add_remove_index_different_names(self):\n+        \"\"\"AddIndex and RemoveIndex with different names should not optimize.\"\"\"\n+        ops = [\n+            operations.AddIndex(\n+                model_name='TestModel',\n+                index=models.Index(fields=['field1'], name='idx1')\n+            ),\n+            operations.RemoveIndex(\n+                model_name='TestModel',\n+                name='idx2'\n+            ),\n+        ]\n+        self.assertOptimizesTo(ops, ops)\n+\n+    def test_add_remove_index_different_models(self):\n+        \"\"\"AddIndex and RemoveIndex on different models should not optimize.\"\"\"\n+        ops = [\n+            operations.AddIndex(\n+                model_name='Model1',\n+                index=models.Index(fields=['field1'], name='test_idx')\n+            ),\n+            operations.RemoveIndex(\n+                model_name='Model2',\n+                name='test_idx'\n+            ),\n+        ]\n+        self.assertOptimizesTo(ops, ops)\ndiff --git a/test_index_optimization.py b/test_index_optimization.py\nnew file mode 100644\nindex 0000000000..129f8df9a6\n--- /dev/null\n+++ b/test_index_optimization.py\n@@ -0,0 +1,60 @@\n+from django.db import models\n+from django.db.migrations import operations\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+# Test case 1: AddIndex followed by RemoveIndex for the same index should cancel out\n+index1 = models.Index(fields=['field1'], name='test_index')\n+add_op = operations.AddIndex(model_name='TestModel', index=index1)\n+remove_op = operations.RemoveIndex(model_name='TestModel', name='test_index')\n+\n+print(\"Test 1: AddIndex followed by RemoveIndex for the same index\")\n+print(f\"AddIndex: model={add_op.model_name}, index_name={add_op.index.name}\")\n+print(f\"RemoveIndex: model={remove_op.model_name}, index_name={remove_op.name}\")\n+\n+optimizer = MigrationOptimizer()\n+result = optimizer.optimize([add_op, remove_op], 'testapp')\n+print(f\"Optimized result: {result}\")\n+print(f\"Expected: []\")\n+print()\n+\n+# Test case 2: RemoveIndex followed by AddIndex with the same name should also optimize\n+print(\"Test 2: RemoveIndex followed by AddIndex for the same index\")\n+remove_op2 = operations.RemoveIndex(model_name='TestModel', name='test_index')\n+add_op2 = operations.AddIndex(model_name='TestModel', index=index1)\n+\n+result2 = optimizer.optimize([remove_op2, add_op2], 'testapp')\n+print(f\"Optimized result: {result2}\")\n+print(f\"Expected: []\")\n+print()\n+\n+# Test case 3: Different index names should not optimize\n+index2 = models.Index(fields=['field2'], name='another_index')\n+add_op3 = operations.AddIndex(model_name='TestModel', index=index1)\n+remove_op3 = operations.RemoveIndex(model_name='TestModel', name='another_index')\n+\n+print(\"Test 3: AddIndex and RemoveIndex with different index names\")\n+result3 = optimizer.optimize([add_op3, remove_op3], 'testapp')\n+print(f\"Optimized result: {result3}\")\n+print(f\"Expected: both operations (no optimization)\")\n+print()\n+\n+# Test case 4: Different model names should not optimize\n+print(\"Test 4: AddIndex and RemoveIndex on different models\")\n+add_op4 = operations.AddIndex(model_name='Model1', index=index1)\n+remove_op4 = operations.RemoveIndex(model_name='Model2', name='test_index')\n+result4 = optimizer.optimize([add_op4, remove_op4], 'testapp')\n+print(f\"Optimized result: {result4}\")\n+print(f\"Expected: both operations (no optimization)\")\n+print()\n+\n+# Test case 5: Multiple operations - only matching pairs should optimize\n+print(\"Test 5: Multiple operations - only matching pairs should optimize\")\n+operations_list = [\n+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field1'], name='idx1')),\n+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field2'], name='idx2')),\n+    operations.RemoveIndex(model_name='TestModel', name='idx1'),\n+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field3'], name='idx3')),\n+]\n+result5 = optimizer.optimize(operations_list, 'testapp')\n+print(f\"Optimized result: {result5}\")\n+print(f\"Expected: AddIndex for idx2 and AddIndex for idx3 only\")\ndiff --git a/test_index_optimization2.py b/test_index_optimization2.py\nnew file mode 100644\nindex 0000000000..92ac4e842f\n--- /dev/null\n+++ b/test_index_optimization2.py\n@@ -0,0 +1,60 @@\n+from django.db import models\n+from django.db.migrations import operations\n+from django.db.migrations.optimizer import MigrationOptimizer\n+\n+# Test case 1: AddIndex followed by RemoveIndex for the same index should cancel out\n+index1 = models.Index(fields=['field1'], name='test_index')\n+add_op = operations.AddIndex(model_name='TestModel', index=index1)\n+remove_op = operations.RemoveIndex(model_name='TestModel', name='test_index')\n+\n+print(\"Test 1: AddIndex followed by RemoveIndex for the same index\")\n+print(f\"AddIndex: model={add_op.model_name}, index_name={add_op.index.name}\")\n+print(f\"RemoveIndex: model={remove_op.model_name}, index_name={remove_op.name}\")\n+\n+optimizer = MigrationOptimizer()\n+result = optimizer.optimize([add_op, remove_op], 'testapp')\n+print(f\"Optimized result: {result}\")\n+print(f\"Expected: []\")\n+print()\n+\n+# Test case 2: RemoveIndex followed by AddIndex with the same name should also optimize\n+print(\"Test 2: RemoveIndex followed by AddIndex for the same index\")\n+remove_op2 = operations.RemoveIndex(model_name='TestModel', name='test_index')\n+add_op2 = operations.AddIndex(model_name='TestModel', index=index1)\n+\n+result2 = optimizer.optimize([remove_op2, add_op2], 'testapp')\n+print(f\"Optimized result: {result2}\")\n+print(f\"Expected: []\")\n+print()\n+\n+# Test case 3: Different index names should not optimize\n+index2 = models.Index(fields=['field2'], name='another_index')\n+add_op3 = operations.AddIndex(model_name='TestModel', index=index1)\n+remove_op3 = operations.RemoveIndex(model_name='TestModel', name='another_index')\n+\n+print(\"Test 3: AddIndex and RemoveIndex with different index names\")\n+result3 = optimizer.optimize([add_op3, remove_op3], 'testapp')\n+print(f\"Optimized result: {result3}\")\n+print(f\"Expected: both operations (no optimization)\")\n+print()\n+\n+# Test case 4: Different model names should not optimize\n+print(\"Test 4: AddIndex and RemoveIndex on different models\")\n+add_op4 = operations.AddIndex(model_name='Model1', index=index1)\n+remove_op4 = operations.RemoveIndex(model_name='Model2', name='test_index')\n+result4 = optimizer.optimize([add_op4, remove_op4], 'testapp')\n+print(f\"Optimized result: {result4}\")\n+print(f\"Expected: both operations (no optimization)\")\n+print()\n+\n+# Test case 5: Multiple operations - adjacent matching pairs should optimize\n+print(\"Test 5: Multiple operations - adjacent matching pairs should optimize\")\n+operations_list = [\n+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field1'], name='idx1')),\n+    operations.RemoveIndex(model_name='TestModel', name='idx1'),\n+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field2'], name='idx2')),\n+    operations.AddIndex(model_name='TestModel', index=models.Index(fields=['field3'], name='idx3')),\n+]\n+result5 = optimizer.optimize(operations_list, 'testapp')\n+print(f\"Optimized result: {result5}\")\n+print(f\"Expected: AddIndex for idx2 and AddIndex for idx3 only\")\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 8cd4c67fbd..295df63a3a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1158,3 +1158,65 @@ class OptimizerTests(SimpleTestCase):\n                 ),\n             ]\n         )\n+\n+    def test_add_remove_index_same_name(self):\n+        \"\"\"AddIndex followed by RemoveIndex with same name should cancel out.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    model_name='TestModel',\n+                    index=models.Index(fields=['field1'], name='test_idx')\n+                ),\n+                migrations.RemoveIndex(\n+                    model_name='TestModel',\n+                    name='test_idx'\n+                ),\n+            ],\n+            [],\n+        )\n+\n+    def test_remove_add_index_same_name(self):\n+        \"\"\"RemoveIndex followed by AddIndex with same name should cancel out.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.RemoveIndex(\n+                    model_name='TestModel',\n+                    name='test_idx'\n+                ),\n+                migrations.AddIndex(\n+                    model_name='TestModel', \n+                    index=models.Index(fields=['field1'], name='test_idx')\n+                ),\n+            ],\n+            [],\n+        )\n+\n+    def test_add_remove_index_different_names(self):\n+        \"\"\"AddIndex and RemoveIndex with different names should not optimize.\"\"\"\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    model_name='TestModel',\n+                    index=models.Index(fields=['field1'], name='idx1')\n+                ),\n+                migrations.RemoveIndex(\n+                    model_name='TestModel',\n+                    name='idx2'\n+                ),\n+            ]\n+        )\n+\n+    def test_add_remove_index_different_models(self):\n+        \"\"\"AddIndex and RemoveIndex on different models should not optimize.\"\"\"\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    model_name='Model1',\n+                    index=models.Index(fields=['field1'], name='test_idx')\n+                ),\n+                migrations.RemoveIndex(\n+                    model_name='Model2',\n+                    name='test_idx'\n+                ),\n+            ]\n+        )\n", "gold_standard_diff": "From 5302ed13f8c887ff2e1520393bbe3456fa08351b Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Mon, 1 May 2023 17:15:51 +0200\nSubject: [PATCH] Fixed #34528 -- Reduced Add/RemoveIndex operations when\n optimizing migrations.\n\n---\n django/db/migrations/operations/models.py |  5 +++++\n tests/migrations/test_optimizer.py        | 14 ++++++++++++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 967a91fdc89c..b89b6b511bbf 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -861,6 +861,11 @@ def describe(self):\n     def migration_name_fragment(self):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, RemoveIndex) and self.index.name == operation.name:\n+            return []\n+        return super().reduce(operation, app_label)\n+\n \n class RemoveIndex(IndexOperation):\n     \"\"\"Remove an index from a model.\"\"\"\ndiff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 8cd4c67fbd0d..2f6616ad5b46 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1158,3 +1158,17 @@ def test_rename_index(self):\n                 ),\n             ]\n         )\n+\n+    def test_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [],\n+        )\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16819"}