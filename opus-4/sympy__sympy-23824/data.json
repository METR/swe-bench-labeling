{"instance_id": "sympy__sympy-23824", "score": "C", "diff": "diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex 23284e4a92..bf43facfb1 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -694,7 +694,7 @@ def kahane_simplify(expression):\n \n     # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n     # matrices in front of `expression`, so multiply by them:\n-    for i in range(0, first_dum_pos):\n+    for i in range(first_dum_pos - 1, -1, -1):\n         [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n \n     resulting_expr = S.Zero\ndiff --git a/test_kahane_bug.py b/test_kahane_bug.py\nnew file mode 100644\nindex 0000000000..6b51e04103\n--- /dev/null\n+++ b/test_kahane_bug.py\n@@ -0,0 +1,21 @@\n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, gamma_trace, LorentzIndex\n+from sympy.physics.hep.gamma_matrices import kahane_simplify\n+from sympy.tensor.tensor import tensor_indices\n+\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    print(\"Test 1:\", r)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(\"Test 2:\", r)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+if __name__ == \"__main__\":\n+    test_kahane_leading_gamma_matrix_bug()\n+    print(\"All tests passed!\")\ndiff --git a/test_kahane_comprehensive.py b/test_kahane_comprehensive.py\nnew file mode 100644\nindex 0000000000..cae38b2927\n--- /dev/null\n+++ b/test_kahane_comprehensive.py\n@@ -0,0 +1,49 @@\n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex\n+from sympy.physics.hep.gamma_matrices import kahane_simplify\n+from sympy.tensor.tensor import tensor_indices\n+\n+def test_kahane_leading_gamma_matrix_comprehensive():\n+    mu, nu, rho, sigma, tau = tensor_indices(\"mu, nu, rho, sigma, tau\", LorentzIndex)\n+    \n+    # Test case 1: Two leading free matrices\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(\"Test 1:\", r)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    # Test case 2: Three leading free matrices\n+    t = G(rho)*G(sigma)*G(tau)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(\"Test 2:\", r)\n+    assert r.equals(4*G(rho)*G(sigma)*G(tau))\n+    \n+    # Test case 3: One leading free matrix\n+    t = G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(\"Test 3:\", r)\n+    assert r.equals(4*G(rho))\n+    \n+    # Test case 4: No leading free matrices (should work as before)\n+    t = G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(\"Test 4:\", r)\n+    # This should return 4*I_4 (identity matrix)\n+    from sympy.matrices import eye\n+    assert r.equals(4*eye(4))\n+    \n+    # Test case 5: Leading and trailing free matrices\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)*G(tau)\n+    r = kahane_simplify(t)\n+    print(\"Test 5:\", r)\n+    assert r.equals(4*G(rho)*G(sigma)*G(tau))\n+    \n+    # Test case 6: Multiple contractions with leading free matrices\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)*G(nu)*G(-nu)\n+    r = kahane_simplify(t)\n+    print(\"Test 6:\", r)\n+    assert r.equals(16*G(rho)*G(sigma))\n+\n+if __name__ == \"__main__\":\n+    test_kahane_leading_gamma_matrix_comprehensive()\n+    print(\"All comprehensive tests passed!\")\ndiff --git a/test_kahane_docstring_examples.py b/test_kahane_docstring_examples.py\nnew file mode 100644\nindex 0000000000..96f28e5457\n--- /dev/null\n+++ b/test_kahane_docstring_examples.py\n@@ -0,0 +1,35 @@\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex\n+from sympy.physics.hep.gamma_matrices import kahane_simplify\n+from sympy.tensor.tensor import tensor_indices\n+from sympy.matrices import eye\n+\n+# Examples from the docstring\n+i0, i1, i2 = tensor_indices('i0:3', LorentzIndex)\n+\n+print(\"Example 1:\")\n+ta = G(i0)*G(-i0)\n+result = kahane_simplify(ta)\n+print(result)\n+print(\"Expected: 4*I_4\")\n+print()\n+\n+print(\"Example 2:\")\n+tb = G(i0)*G(i1)*G(-i0)\n+result = kahane_simplify(tb)\n+print(result)\n+print(\"Expected: -2*GammaMatrix(i1)\")\n+print()\n+\n+print(\"Example 3:\")\n+t = G(i0)*G(-i0)\n+result = kahane_simplify(t)\n+print(result)\n+print(\"Expected: 4*I_4\")\n+print()\n+\n+print(\"Example 4 (no contractions):\")\n+tc = G(i0)*G(i1)\n+result = kahane_simplify(tc)\n+print(result)\n+print(\"Expected: GammaMatrix(i0)*GammaMatrix(i1)\")\n+print()\n", "gold_standard_diff": "diff --git a/.mailmap b/.mailmap\nindex 893b628871d1..c6078b779cc3 100644\n--- a/.mailmap\n+++ b/.mailmap\n@@ -589,6 +589,8 @@ Gilbert Gede <gilbertgede@gmail.com> <ggede@ucdavis.edu>\n Gilles Schintgen <gschintgen@hambier.lu>\n Gina <Dr-G@users.noreply.github.com>\n Gleb Siroki <g.shiroki@gmail.com>\n+Glenn Horton-Smith <glenn.hortonsmith@gmail.com>\n+Glenn Horton-Smith <glenn.hortonsmith@gmail.com> Glenn Horton-Smith <gahs@phys.ksu.edu>\n GolimarOurHero <metalera94@hotmail.com>\n Goutham Lakshminarayan <dl.goutham@gmail.com> Goutham <devnull@localhost>\n Govind Sahai <gsiitbhu@gmail.com>\ndiff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex 23284e4a9297..c8374424d451 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -694,8 +694,7 @@ def kahane_simplify(expression):\n \n     # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n     # matrices in front of `expression`, so multiply by them:\n-    for i in range(0, first_dum_pos):\n-        [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n+    resulting_indices = list( free_pos[0:first_dum_pos] + ri for ri in resulting_indices )\n \n     resulting_expr = S.Zero\n     for i in resulting_indices:\ndiff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex 27509803f24f..d3562771854f 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -257,10 +257,12 @@ def test_kahane_simplify1():\n     t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n-    t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n+    t = (G(mu)*G(-mu)*G(rho)*G(sigma))\n     r = kahane_simplify(t)\n-    assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n-\n+    assert r.equals(4*G(rho)*G(sigma))\n+    t = (G(rho)*G(sigma)*G(mu)*G(-mu))\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n \n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/23824"}