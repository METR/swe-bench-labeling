{"instance_id": "django__django-15695", "score": "I", "diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..d0faebbf98 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -896,7 +896,7 @@ class RenameIndex(IndexOperation):\n \n     @cached_property\n     def old_name_lower(self):\n-        return self.old_name.lower()\n+        return self.old_name.lower() if self.old_name else None\n \n     @cached_property\n     def new_name_lower(self):\n@@ -914,22 +914,17 @@ class RenameIndex(IndexOperation):\n         return (self.__class__.__qualname__, [], kwargs)\n \n     def state_forwards(self, app_label, state):\n+        model_state = state.models[app_label, self.model_name_lower]\n         if self.old_fields:\n-            state.add_index(\n-                app_label,\n-                self.model_name_lower,\n-                models.Index(fields=self.old_fields, name=self.new_name),\n-            )\n-            state.remove_model_options(\n-                app_label,\n-                self.model_name_lower,\n-                AlterIndexTogether.option_name,\n-                self.old_fields,\n-            )\n+            for index in model_state.options.get('indexes', []):\n+                if index.fields == self.old_fields:\n+                    index.name = self.new_name\n+                    break\n         else:\n-            state.rename_index(\n-                app_label, self.model_name_lower, self.old_name, self.new_name\n-            )\n+            for index in model_state.options.get('indexes', []):\n+                if index.name == self.old_name:\n+                    index.name = self.new_name\n+                    break\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         model = to_state.apps.get_model(app_label, self.model_name)\n@@ -953,36 +948,27 @@ class RenameIndex(IndexOperation):\n                         \", \".join(columns),\n                     )\n                 )\n-            old_index = models.Index(\n-                fields=self.old_fields,\n-                name=matching_index_name[0],\n-            )\n+            old_name = matching_index_name[0]\n         else:\n-            from_model_state = from_state.models[app_label, self.model_name_lower]\n-            old_index = from_model_state.get_index_by_name(self.old_name)\n+            old_name = self.old_name\n \n-        to_model_state = to_state.models[app_label, self.model_name_lower]\n-        new_index = to_model_state.get_index_by_name(self.new_name)\n-        schema_editor.rename_index(model, old_index, new_index)\n+        schema_editor.alter_index(model, old_name, self.new_name)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        if self.old_fields:\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            old_name = schema_editor._create_index_name(model, columns, suffix=\"_idx\")\n+        else:\n+            old_name = self.old_name\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        schema_editor.alter_index(model, self.new_name, old_name)\n \n     def describe(self):\n         if self.old_name:\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex cfd28b1b39..92b374b36c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -17,6 +17,47 @@ class Mixin:\n \n \n class OperationTests(OperationTestBase):\n+    def test_rename_index_unnamed(self):\n+        app_label = \"test_rename_index_unnamed\"\n+        table_name = f\"{app_label}_pony\"\n+        project_state = self.set_up_test_model(app_label)\n+\n+        # Create an unnamed index\n+        index = models.Index(fields=[\"name\"], name=None)\n+        operation = migrations.AddIndex(\"Pony\", index)\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Rename the unnamed index\n+        project_state = new_state\n+        operation = migrations.RenameIndex(\"Pony\", new_name=\"named_index\", old_fields=[\"name\"])\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"named_index\")\n+\n+        # Test backwards operation\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+        # Check that the index name is reverted to the auto-generated name\n+        with connection.cursor() as cursor:\n+            constraints = connection.introspection.get_constraints(cursor, table_name)\n+        self.assertTrue(any(\n+            info[\"columns\"] == [\"name\"] and info[\"index\"] and not info[\"unique\"]\n+            for name, info in constraints.items()\n+        ))\n+        self.assertIndexNameNotExists(table_name, \"named_index\")\n+\n+        # Ensure that indexes are working correctly\n+        Pony = new_state.apps.get_model(app_label, \"Pony\")\n+        Pony.objects.create(name=\"a\"), Pony.objects.create(name=\"b\")\n+        self.assertIs(Pony.objects.filter(name=\"a\").exists(), True)\n+        self.assertIs(Pony.objects.filter(name=\"b\").exists(), True)\n+        self.assertIs(Pony.objects.filter(name=\"c\").exists(), False)\n     \"\"\"\n     Tests running the operations and making sure they do what they say they do.\n     Each test looks at their state changing, and then their database operation -\n", "gold_standard_diff": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ecd0..75a3b8b0304b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -960,6 +960,9 @@ def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n             old_index = from_model_state.get_index_by_name(self.old_name)\n+        # Don't alter when the index name is not changed.\n+        if old_index.name == self.new_name:\n+            return\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex cfd28b1b39e5..f3c4ea8ffe2b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,6 +2988,11 @@ def test_rename_index_unnamed_index(self):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Reapply, RenameIndex operation is a noop when the old and new name\n+        # match.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15695"}