{"instance_id": "sympy__sympy-13372", "score": "C", "diff": "diff --git a/debug_issue.py b/debug_issue.py\nnew file mode 100644\nindex 0000000000..52b4cb9676\n--- /dev/null\n+++ b/debug_issue.py\n@@ -0,0 +1,25 @@\n+from sympy import symbols, Mul, Max\n+\n+x, y = symbols('x y')\n+\n+# Let's debug what happens with Max(0, y)\n+max_expr = Max(0, y)\n+print(\"Max expression:\", max_expr)\n+print(\"Max._eval_evalf method exists?\", hasattr(Max, '_eval_evalf'))\n+\n+# Let's try to evaluate Max directly\n+try:\n+    result = max_expr._eval_evalf(15)\n+    print(\"Max._eval_evalf result:\", result)\n+    print(\"Result type:\", type(result))\n+    if result:\n+        print(\"Result as_real_imag:\", result.as_real_imag())\n+        re, im = result.as_real_imag()\n+        print(\"re:\", re, \"type:\", type(re))\n+        print(\"im:\", im, \"type:\", type(im))\n+        print(\"re == 0:\", re == 0)\n+        print(\"re.is_number:\", re.is_number)\n+        print(\"im == 0:\", im == 0)\n+        print(\"im.is_number:\", im.is_number)\n+except Exception as e:\n+    print(\"Error evaluating Max directly:\", type(e).__name__, \"-\", str(e))\ndiff --git a/debug_order.py b/debug_order.py\nnew file mode 100644\nindex 0000000000..7cb1d306a3\n--- /dev/null\n+++ b/debug_order.py\n@@ -0,0 +1,17 @@\n+from sympy import symbols, Mul, Max\n+from sympy.core.evalf import pure_complex\n+\n+x, y = symbols('x y')\n+\n+# Let's see what happens in evalf_mul\n+print(\"Testing Mul(x, Max(0, y), evaluate=False)\")\n+mul1 = Mul(x, Max(0, y), evaluate=False)\n+print(\"args:\", mul1.args)\n+print(\"pure_complex(x):\", pure_complex(x))\n+print(\"pure_complex(Max(0, y)):\", pure_complex(Max(0, y)))\n+\n+print(\"\\nTesting Mul(Max(0, y), x, evaluate=False)\")\n+mul2 = Mul(Max(0, y), x, evaluate=False)\n+print(\"args:\", mul2.args)\n+print(\"pure_complex(Max(0, y)):\", pure_complex(Max(0, y)))\n+print(\"pure_complex(x):\", pure_complex(x))\ndiff --git a/debug_symbol.py b/debug_symbol.py\nnew file mode 100644\nindex 0000000000..3befde2b5d\n--- /dev/null\n+++ b/debug_symbol.py\n@@ -0,0 +1,24 @@\n+from sympy import symbols, Mul, Max\n+from sympy.core.evalf import evalf\n+\n+x, y = symbols('x y')\n+\n+# Let's see what happens when we try to evalf x\n+print(\"evalf(x, 15, {}):\")\n+try:\n+    result = evalf(x, 15, {})\n+    print(\"Result:\", result)\n+except Exception as e:\n+    print(\"Error:\", type(e).__name__, \"-\", str(e))\n+    import traceback\n+    traceback.print_exc()\n+\n+# And Max(0, y)\n+print(\"\\nevalf(Max(0, y), 15, {}):\")\n+try:\n+    result = evalf(Max(0, y), 15, {})\n+    print(\"Result:\", result)\n+except Exception as e:\n+    print(\"Error:\", type(e).__name__, \"-\", str(e))\n+    import traceback\n+    traceback.print_exc()\ndiff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 72a5fbae52..f34908710a 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1301,12 +1301,16 @@ def evalf(x, prec, options):\n             elif re.is_number:\n                 re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                 reprec = prec\n+            else:\n+                raise NotImplementedError\n             if im == 0:\n                 im = None\n                 imprec = None\n             elif im.is_number:\n                 im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                 imprec = prec\n+            else:\n+                raise NotImplementedError\n             r = re, im, reprec, imprec\n         except AttributeError:\n             raise NotImplementedError\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..08ee2c1b06\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,65 @@\n+from sympy import symbols, sin, cos, exp, log, sqrt, pi, E, I, Mul, Add, Max, Min\n+from sympy import Number, Float, Rational\n+\n+# Test various expressions with evalf\n+x, y, z = symbols('x y z')\n+\n+test_cases = [\n+    # Basic numeric expressions\n+    (pi, \"pi\"),\n+    (E, \"E\"),\n+    (sqrt(2), \"sqrt(2)\"),\n+    (Rational(1, 3), \"1/3\"),\n+    \n+    # Complex numbers\n+    (I, \"I\"),\n+    (1 + 2*I, \"1 + 2*I\"),\n+    \n+    # Expressions with symbols\n+    (x + 1, \"x + 1\"),\n+    (x * y, \"x * y\"),\n+    \n+    # Trigonometric functions\n+    (sin(1), \"sin(1)\"),\n+    (cos(pi/4), \"cos(pi/4)\"),\n+    \n+    # Exponential and logarithmic\n+    (exp(1), \"exp(1)\"),\n+    (log(2), \"log(2)\"),\n+    \n+    # The problematic cases\n+    (Mul(x, Max(0, y), evaluate=False), \"Mul(x, Max(0, y))\"),\n+    (Mul(Max(0, y), x, evaluate=False), \"Mul(Max(0, y), x)\"),\n+    \n+    # Other Max/Min cases\n+    (Max(1, 2), \"Max(1, 2)\"),\n+    (Min(1, 2), \"Min(1, 2)\"),\n+    (Max(x, y), \"Max(x, y)\"),\n+    (Min(x, y), \"Min(x, y)\"),\n+    \n+    # Mixed expressions\n+    (x + Max(0, y), \"x + Max(0, y)\"),\n+    (sin(x) * Max(0, y), \"sin(x) * Max(0, y)\"),\n+]\n+\n+print(\"Testing evalf on various expressions:\")\n+print(\"-\" * 60)\n+\n+for expr, desc in test_cases:\n+    try:\n+        result = expr.evalf()\n+        print(f\"{desc:<30} -> {str(result):<30}\")\n+    except Exception as e:\n+        print(f\"{desc:<30} -> ERROR: {type(e).__name__}: {str(e)}\")\n+\n+print(\"-\" * 60)\n+print(\"All tests completed!\")\n+\n+# Test with substitution\n+print(\"\\nTesting with substitution:\")\n+expr = x * Max(0, y)\n+try:\n+    result = expr.evalf(subs={x: 2, y: 3})\n+    print(f\"x * Max(0, y) with x=2, y=3 -> {result}\")\n+except Exception as e:\n+    print(f\"x * Max(0, y) with x=2, y=3 -> ERROR: {type(e).__name__}: {str(e)}\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..47547fb961\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,17 @@\n+from sympy import symbols, Mul, Max\n+\n+x, y = symbols('x y')\n+\n+print(\"Test 1: Mul(x, Max(0, y), evaluate=False).evalf()\")\n+try:\n+    result1 = Mul(x, Max(0, y), evaluate=False).evalf()\n+    print(\"Result:\", result1)\n+except Exception as e:\n+    print(\"Error:\", type(e).__name__, \"-\", str(e))\n+\n+print(\"\\nTest 2: Mul(Max(0, y), x, evaluate=False).evalf()\")\n+try:\n+    result2 = Mul(Max(0, y), x, evaluate=False).evalf()\n+    print(\"Result:\", result2)\n+except Exception as e:\n+    print(\"Error:\", type(e).__name__, \"-\", str(e))\ndiff --git a/test_unboundlocalerror_fix.py b/test_unboundlocalerror_fix.py\nnew file mode 100644\nindex 0000000000..989398a479\n--- /dev/null\n+++ b/test_unboundlocalerror_fix.py\n@@ -0,0 +1,41 @@\n+\"\"\"\n+Test for the UnboundLocalError fix in evalf\n+Issue: https://github.com/sympy/sympy/pull/13059\n+\"\"\"\n+\n+from sympy import symbols, Mul, Max, Min, Abs\n+\n+def test_evalf_unboundlocalerror():\n+    \"\"\"Test that evalf doesn't raise UnboundLocalError with Max/Min/Abs in Mul\"\"\"\n+    x, y = symbols('x y')\n+    \n+    # These used to raise UnboundLocalError depending on argument order\n+    # Now they should all return the expression unchanged\n+    \n+    # Max cases\n+    assert Mul(x, Max(0, y), evaluate=False).evalf() == x*Max(0, y)\n+    assert Mul(Max(0, y), x, evaluate=False).evalf() == x*Max(0, y)\n+    \n+    # Min cases  \n+    assert Mul(x, Min(0, y), evaluate=False).evalf() == x*Min(0, y)\n+    assert Mul(Min(0, y), x, evaluate=False).evalf() == x*Min(0, y)\n+    \n+    # Abs cases\n+    assert Mul(x, Abs(y), evaluate=False).evalf() == x*Abs(y)\n+    assert Mul(Abs(y), x, evaluate=False).evalf() == x*Abs(y)\n+    \n+    # Multiple arguments - just check they don't raise errors\n+    result1 = Mul(x, Max(0, y), Min(1, y), evaluate=False).evalf()\n+    result2 = Mul(Max(0, y), x, Min(1, y), evaluate=False).evalf()\n+    # Both should contain x, Max, and Min\n+    assert x in result1.free_symbols\n+    assert x in result2.free_symbols\n+    \n+    # With numeric substitution\n+    assert Mul(x, Max(0, y), evaluate=False).evalf(subs={x: 2, y: 3}) == 6.0\n+    assert Mul(Max(0, y), x, evaluate=False).evalf(subs={x: 2, y: -3}) == 0.0\n+    \n+    print(\"All tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_evalf_unboundlocalerror()\n", "gold_standard_diff": "From 86ec4bb513b7b841977a312c9bba73b7147024ad Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sat, 30 Sep 2017 18:45:56 +0300\nSubject: [PATCH 1/4] Update evalf.py\n\n---\n sympy/core/evalf.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 72a5fbae524a..70c5ebaf6bcb 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1301,6 +1301,8 @@ def evalf(x, prec, options):\n             elif re.is_number:\n                 re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                 reprec = prec\n+            else:\n+                raise NotImplementedError\n             if im == 0:\n                 im = None\n                 imprec = None\n\nFrom e4d3edbc1ce5da2d68b7b593f6b42cd3f2aac00e Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sun, 1 Oct 2017 01:27:46 +0300\nSubject: [PATCH 2/4] 13076, test added.\n\n---\n sympy/core/tests/test_evalf.py | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex 4ac3d5c4718c..f4b3915ed10e 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -229,7 +229,9 @@ def test_evalf_bugs():\n \n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n-\n+    \n+    #issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n \n def test_evalf_integer_parts():\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n\nFrom bd6ad7f641b311225a43db747fb51fbff78234a4 Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sun, 1 Oct 2017 02:02:38 +0300\nSubject: [PATCH 3/4] #13076, else condition for im.is_number\n\nAdded else condition for im.is_number statement.\n---\n sympy/core/evalf.py | 2 ++\n 1 file changed, 2 insertions(+)\n\ndiff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 70c5ebaf6bcb..f34908710a5f 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1309,6 +1309,8 @@ def evalf(x, prec, options):\n             elif im.is_number:\n                 im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                 imprec = prec\n+            else:\n+                raise NotImplementedError\n             r = re, im, reprec, imprec\n         except AttributeError:\n             raise NotImplementedError\n\nFrom c6c1a777dc689561fdbe8097e5b1d1910ebdce48 Mon Sep 17 00:00:00 2001\nFrom: anca-mc <anca-mc@users.noreply.github.com>\nDate: Sun, 1 Oct 2017 10:47:21 +0300\nSubject: [PATCH 4/4] # 13076, removes trailing whitespace\n\n---\n sympy/core/tests/test_evalf.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex f4b3915ed10e..4aef2d7dd66a 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -229,7 +229,7 @@ def test_evalf_bugs():\n \n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n-    \n+\n     #issue 13076\n     assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n \n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/13372"}