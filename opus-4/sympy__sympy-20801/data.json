{"instance_id": "sympy__sympy-20801", "score": "C", "diff": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165..a2557d5251 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,10 +1386,10 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n         if isinstance(other, Boolean):\n             return False\n+        if not self:\n+            return not other\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\ndiff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8b3e99126e..7d0f1a4502 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -1711,6 +1711,16 @@ def test_Float_eq():\n     assert 2 == Float(2)  # as per Python\n     # but in a computation...\n     assert t**2 != t**2.0\n+    # Issue: S(0.0) == S.false should return False\n+    assert Float(0.0) != S.false\n+    assert S.false != Float(0.0)\n+    assert S(0.0) != S.false\n+    assert S.false != S(0.0)\n+    # Also check with S.true\n+    assert Float(1.0) != S.true\n+    assert S.true != Float(1.0)\n+    assert S(1.0) != S.true\n+    assert S.true != S(1.0)\n \n \n def test_int_NumberSymbols():\n", "gold_standard_diff": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 79f6a7d165cb..9adb3362f5d9 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1386,8 +1386,6 @@ def __eq__(self, other):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n         if isinstance(other, Boolean):\n             return False\n         if other.is_NumberSymbol:\n@@ -1408,6 +1406,8 @@ def __eq__(self, other):\n             # the mpf tuples\n             ompf = other._as_mpf_val(self._prec)\n             return bool(mlib.mpf_eq(self._mpf_, ompf))\n+        if not self:\n+            return not other\n         return False    # Float != non-Number\n \n     def __ne__(self, other):\ndiff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8b3e99126e2e..9faed1d13103 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -436,6 +436,7 @@ def eq(a, b):\n     a = Float(2) ** Float(4)\n     assert eq(a.evalf(), Float(16))\n     assert (S(.3) == S(.5)) is False\n+\n     mpf = (0, 5404319552844595, -52, 53)\n     x_str =  Float((0, '13333333333333', -52, 53))\n     x2_str = Float((0, '26666666666666', -53, 54))\n@@ -582,7 +583,12 @@ def teq(a):\n     for i, a in zip(u, v):\n         assert Float(i) is a\n \n-\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n \n @conserve_mpmath_dps\n def test_float_mpf():\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/20801"}