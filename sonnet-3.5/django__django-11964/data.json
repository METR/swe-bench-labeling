{"instance_id": "django__django-11964", "score": "I", "diff": "diff --git a/custom_fields.py b/custom_fields.py\nnew file mode 100644\nindex 0000000000..bf8237b79a\n--- /dev/null\n+++ b/custom_fields.py\n@@ -0,0 +1,17 @@\n+from django.db import models\n+\n+class CustomCharField(models.CharField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return value\n+        if self.choices and isinstance(value, self.choices.__class__):\n+            return value.value\n+        return value\n+\n+class CustomIntegerField(models.IntegerField):\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return value\n+        if self.choices and isinstance(value, self.choices.__class__):\n+            return value.value\n+        return value\ndiff --git a/example_models.py b/example_models.py\nnew file mode 100644\nindex 0000000000..2ccb8b8d8d\n--- /dev/null\n+++ b/example_models.py\n@@ -0,0 +1,18 @@\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+from custom_fields import CustomCharField, CustomIntegerField\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyIntegerChoice(models.IntegerChoices):\n+    ONE = 1, _(\"One\")\n+    TWO = 2, _(\"Two\")\n+\n+class MyObject(models.Model):\n+    my_str_value = CustomCharField(max_length=10, choices=MyChoice.choices)\n+    my_int_value = CustomIntegerField(choices=MyIntegerChoice.choices)\n+\n+    def __str__(self):\n+        return f\"MyObject(my_str_value={self.my_str_value}, my_int_value={self.my_int_value})\"\ndiff --git a/test_example_models.py b/test_example_models.py\nnew file mode 100644\nindex 0000000000..b5c3e746e4\n--- /dev/null\n+++ b/test_example_models.py\n@@ -0,0 +1,29 @@\n+from django.test import TestCase\n+from example_models import MyObject, MyChoice, MyIntegerChoice\n+\n+class EnumTest(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(\n+            my_str_value=MyChoice.FIRST_CHOICE,\n+            my_int_value=MyIntegerChoice.ONE\n+        )\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_created_object_is_int(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_int_value, int)\n+        self.assertEqual(my_object.my_int_value, 1)\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.get(id=self.my_object.id)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_retrieved_object_is_int(self):\n+        my_object = MyObject.objects.get(id=self.my_object.id)\n+        self.assertIsInstance(my_object.my_int_value, int)\n+        self.assertEqual(my_object.my_int_value, 1)\n", "gold_standard_diff": "From dbcd7b064e7278614f29fc45468d461e263d4da7 Mon Sep 17 00:00:00 2001\nFrom: Carlton Gibson <carlton.gibson@noumenal.es>\nDate: Wed, 23 Oct 2019 16:14:06 +0200\nSubject: [PATCH] Fixed #30902 -- Added __str__() for model choice enums.\n\nAllows expected behavior when cast to str, also matching behaviour of\ncreated instances with those fetched from the DB.\n\nThanks to Simon Charette, Nick Pope, and Shai Berger for reviews.\n---\n django/db/models/enums.py  | 8 +++++++-\n tests/model_enums/tests.py | 6 ++++++\n 2 files changed, 13 insertions(+), 1 deletion(-)\n\ndiff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6abf5..ae20ef6d937b 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -60,7 +60,13 @@ def values(cls):\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n-    pass\n+\n+    def __str__(self):\n+        \"\"\"\n+        Use value when cast to str, so that Choices set as model instance\n+        attributes are rendered as expected in templates and similar contexts.\n+        \"\"\"\n+        return str(self.value)\n \n \n class IntegerChoices(int, Choices):\ndiff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6b4bd6e7fdd7..e1810e673ab0 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -143,6 +143,12 @@ class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n+    def test_str(self):\n+        for test in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test[member.name]), str(member.value))\n+\n \n class Separator(bytes, models.Choices):\n     FS = b'\\x1c', 'File Separator'\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11964"}