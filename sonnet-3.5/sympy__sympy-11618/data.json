{"instance_id": "sympy__sympy-11618", "score": "C", "diff": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 593048464b..2162aff8fa 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -265,9 +265,18 @@ def distance(self, p):\n         >>> p3.distance(Point(0, 0))\n         sqrt(x**2 + y**2)\n \n+        >>> Point(2, 0).distance(Point(1, 0, 2))\n+        sqrt(5)\n+\n         \"\"\"\n-        return sqrt(sum([(a - b)**2 for a, b in zip(\n-            self.args, p.args if isinstance(p, Point) else p)]))\n+        if isinstance(p, Point):\n+            p_coords = p.args\n+        else:\n+            p_coords = p\n+        max_len = max(len(self.args), len(p_coords))\n+        a = self.args + (0,) * (max_len - len(self.args))\n+        b = p_coords + (0,) * (max_len - len(p_coords))\n+        return sqrt(sum((x - y)**2 for x, y in zip(a, b)))\n \n     def taxicab_distance(self, p):\n         \"\"\"The Taxicab Distance from self to point p.\n", "gold_standard_diff": "From af40819536a8e5facf941ceb4f742bcf4fa1f3f6 Mon Sep 17 00:00:00 2001\nFrom: arihant parsoya <parsoyaarihant@gmail.com>\nDate: Fri, 16 Sep 2016 01:31:11 +0530\nSubject: [PATCH] Improved distance() function\n\nFixes #11617.\nfunction zip() has limitation of creating tuples equal to number which\nis minimum of the lengths of the list given. Hence when passing 2D and\n3D points, only 2 tuples were being created. This problem can be solved\nby using map() function(in python 2) but unfortunately map() function\nin Python3 has different functionality than map() in python2.\n\nTo solve the problem, new empty arrays(p1 and p2) are created which is\nof maximum length of both the `self` and `p` and elements are inserted\ninto the array. This gives us two lists of same size which can be used\nproperly by zip() function without loss of data.\n---\n sympy/geometry/point.py            | 14 ++++++++++++++\n sympy/geometry/tests/test_point.py |  5 +++++\n 2 files changed, 19 insertions(+)\n\ndiff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 593048464bda..5b0c3aafe6a9 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -266,6 +266,20 @@ def distance(self, p):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n+        if type(p) is not type(self):\n+            if len(p) == len(self):\n+                return sqrt(sum([(a - b)**2 for a, b in zip(\n+                    self.args, p.args if isinstance(p, Point) else p)]))\n+            else:\n+                p1 = [0] * max(len(p), len(self))\n+                p2 = p.args if len(p.args) > len(self.args) else self.args\n+\n+                for i in range(min(len(p), len(self))):\n+                    p1[i] = p.args[i] if len(p) < len(self) else self.args[i]\n+\n+                return sqrt(sum([(a - b)**2 for a, b in zip(\n+                    p1, p2)]))\n+\n         return sqrt(sum([(a - b)**2 for a, b in zip(\n             self.args, p.args if isinstance(p, Point) else p)]))\n \ndiff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex c7b2d30f16a7..706090b9d1dc 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -243,6 +243,11 @@ def test_issue_9214():\n \n     assert Point3D.are_collinear(p1, p2, p3) is False\n \n+def test_issue_11617():\n+    p1 = Point3D(1,0,2)\n+    p2 = Point2D(2,0)\n+\n+    assert p1.distance(p2) == sqrt(5)\n \n def test_transform():\n     p = Point(1, 1)\n", "gold_standard_pr_link": "https://github.com/sympy/sympy/pull/11618"}