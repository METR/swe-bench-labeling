{"instance_id": "django__django-12965", "score": "C", "diff": "diff --git a/debug_delete.py b/debug_delete.py\nnew file mode 100644\nindex 0000000000..a58e389b8f\n--- /dev/null\n+++ b/debug_delete.py\n@@ -0,0 +1,71 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models, connection\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+# Define a simple model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test'\n+        db_table = 'test_model'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel)\n+\n+# Create some test data\n+for i in range(3):\n+    TestModel.objects.create(name=f\"Item {i}\")\n+\n+# Get the delete query\n+from django.db.models.sql.subqueries import DeleteQuery\n+queryset = TestModel.objects.all()\n+del_query = queryset._chain()\n+del_query.query.__class__ = DeleteQuery\n+\n+# Get the compiler\n+compiler = del_query.query.get_compiler(using='default')\n+\n+print(\"BEFORE setup_query():\")\n+print(\"Query alias_map:\", compiler.query.alias_map)\n+print(\"Query alias_refcount:\", compiler.query.alias_refcount)\n+print(\"single_alias property:\", compiler.single_alias)\n+\n+# Call setup_query to populate aliases\n+compiler.setup_query()\n+\n+print(\"\\nAFTER setup_query():\")\n+print(\"Query alias_map:\", compiler.query.alias_map)\n+print(\"Query alias_refcount:\", compiler.query.alias_refcount)\n+print(\"Single alias check:\")\n+for t in compiler.query.alias_map:\n+    count = compiler.query.alias_refcount[t]\n+    print(f\"  Table '{t}': refcount = {count}, > 0 = {count > 0}\")\n+    \n+total = sum(compiler.query.alias_refcount[t] > 0 for t in compiler.query.alias_map)\n+print(f\"Total tables with refcount > 0: {total}\")\n+print(f\"single_alias property: {compiler.single_alias}\")\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f..09cec5ec06 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1405,8 +1405,11 @@ class SQLInsertCompiler(SQLCompiler):\n \n \n class SQLDeleteCompiler(SQLCompiler):\n-    @cached_property\n+    @property\n     def single_alias(self):\n+        # Ensure aliases are set up before checking\n+        if not self.query.alias_map:\n+            self.setup_query()\n         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1\n \n     def _as_sql(self, query):\ndiff --git a/test_comprehensive_delete.py b/test_comprehensive_delete.py\nnew file mode 100644\nindex 0000000000..0ff1438167\n--- /dev/null\n+++ b/test_comprehensive_delete.py\n@@ -0,0 +1,100 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models, connection\n+from django.test.utils import CaptureQueriesContext\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+# Define test models\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test'\n+        db_table = 'test_author'\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='books')\n+    \n+    class Meta:\n+        app_label = 'test'\n+        db_table = 'test_book'\n+\n+# Create the tables\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(Author)\n+    schema_editor.create_model(Book)\n+\n+# Create some test data\n+author1 = Author.objects.create(name=\"Author 1\")\n+author2 = Author.objects.create(name=\"Author 2\")\n+for i in range(5):\n+    Book.objects.create(title=f\"Book {i}\", author=author1)\n+for i in range(5, 10):\n+    Book.objects.create(title=f\"Book {i}\", author=author2)\n+\n+print(\"Test 1: Simple delete all (no filters, no joins)\")\n+with CaptureQueriesContext(connection) as queries:\n+    Author.objects.all().delete()\n+    \n+for query in queries:\n+    sql = query['sql']\n+    if 'DELETE' in sql and 'test_author' in sql:\n+        print(f\"SQL: {sql}\")\n+        if 'IN (SELECT' in sql:\n+            print(\"ERROR: Using subquery for simple delete!\")\n+        else:\n+            print(\"OK: No subquery for simple delete\")\n+\n+# Recreate test data\n+author1 = Author.objects.create(name=\"Author 1\")\n+author2 = Author.objects.create(name=\"Author 2\")\n+for i in range(5):\n+    Book.objects.create(title=f\"Book {i}\", author=author1)\n+\n+print(\"\\nTest 2: Delete with filter\")\n+with CaptureQueriesContext(connection) as queries:\n+    Author.objects.filter(name=\"Author 1\").delete()\n+    \n+for query in queries:\n+    sql = query['sql']\n+    if 'DELETE' in sql and 'test_author' in sql:\n+        print(f\"SQL: {sql}\")\n+        # Note: filtered deletes might use subqueries in some cases, that's OK\n+\n+print(\"\\nTest 3: Delete books (simple model)\")\n+with CaptureQueriesContext(connection) as queries:\n+    Book.objects.all().delete()\n+    \n+for query in queries:\n+    sql = query['sql']\n+    if 'DELETE' in sql and 'test_book' in sql:\n+        print(f\"SQL: {sql}\")\n+        if 'IN (SELECT' in sql:\n+            print(\"ERROR: Using subquery for simple delete!\")\n+        else:\n+            print(\"OK: No subquery for simple delete\")\n+            \n+print(\"\\nAll tests completed!\")\ndiff --git a/test_delete_regression.py b/test_delete_regression.py\nnew file mode 100644\nindex 0000000000..a8b8bb0277\n--- /dev/null\n+++ b/test_delete_regression.py\n@@ -0,0 +1,61 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models, connection\n+from django.test.utils import CaptureQueriesContext\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+# Define a simple model\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'test'\n+        db_table = 'test_model'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(TestModel)\n+\n+# Create some test data\n+for i in range(10):\n+    TestModel.objects.create(name=f\"Item {i}\")\n+\n+# Capture the DELETE query\n+with CaptureQueriesContext(connection) as queries:\n+    TestModel.objects.all().delete()\n+\n+# Print the captured queries\n+print(\"Captured queries:\")\n+for query in queries:\n+    print(f\"SQL: {query['sql']}\")\n+    \n+# Check if subquery is being used\n+delete_query = queries[-1]['sql']\n+if 'IN (SELECT' in delete_query:\n+    print(\"\\nERROR: Delete is using a subquery!\")\n+    print(\"Expected: DELETE FROM test_model\")\n+    print(f\"Got: {delete_query}\")\n+else:\n+    print(\"\\nOK: Delete is not using a subquery\")\ndiff --git a/test_simple_delete.py b/test_simple_delete.py\nnew file mode 100644\nindex 0000000000..da64f4d14a\n--- /dev/null\n+++ b/test_simple_delete.py\n@@ -0,0 +1,81 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+from django.db import models, connection\n+from django.test.utils import CaptureQueriesContext\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ],\n+    USE_TZ=True,\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+# Define test models\n+class SimpleModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField(default=0)\n+    \n+    class Meta:\n+        app_label = 'test'\n+        db_table = 'test_simple'\n+\n+# Create the table\n+from django.db import connection\n+with connection.schema_editor() as schema_editor:\n+    schema_editor.create_model(SimpleModel)\n+\n+# Test 1: Simple delete all (no filters, no joins)\n+print(\"Test 1: Simple delete all (no filters, no joins)\")\n+for i in range(10):\n+    SimpleModel.objects.create(name=f\"Item {i}\", value=i)\n+\n+with CaptureQueriesContext(connection) as queries:\n+    SimpleModel.objects.all().delete()\n+    \n+for query in queries:\n+    sql = query['sql']\n+    if 'DELETE' in sql:\n+        print(f\"SQL: {sql}\")\n+        if 'IN (SELECT' in sql:\n+            print(\"ERROR: Using subquery for simple delete!\")\n+        else:\n+            print(\"OK: No subquery for simple delete\")\n+\n+# Test 2: Delete with filter\n+print(\"\\nTest 2: Delete with filter\")\n+for i in range(10):\n+    SimpleModel.objects.create(name=f\"Item {i}\", value=i)\n+\n+with CaptureQueriesContext(connection) as queries:\n+    SimpleModel.objects.filter(value__lt=5).delete()\n+    \n+for query in queries:\n+    sql = query['sql']\n+    if 'DELETE' in sql:\n+        print(f\"SQL: {sql}\")\n+        # Note: filtered deletes might use subqueries in some cases, that's OK\n+        \n+# Test 3: Delete with empty queryset\n+print(\"\\nTest 3: Delete empty queryset\")\n+SimpleModel.objects.all().delete()  # Clear all\n+with CaptureQueriesContext(connection) as queries:\n+    SimpleModel.objects.all().delete()\n+    \n+print(f\"Number of queries for empty delete: {len(queries)}\")\n+\n+print(\"\\nAll tests completed!\")\n", "gold_standard_diff": "From 972000420e08703dd4981466ff67adcd5a61ad4b Mon Sep 17 00:00:00 2001\nFrom: Simon Charette <charette.s@gmail.com>\nDate: Sun, 24 May 2020 09:18:12 -0400\nSubject: [PATCH] Fixed #31624 -- Avoided subquery usage on\n QuerySet.all().delete().\n\nThanks Adam Johnson for the report.\n\nRegression in 7acef095d73322f45dcceb99afa1a4e50b520479.\n---\n django/db/models/sql/compiler.py | 2 ++\n tests/delete/tests.py            | 6 ++++++\n 2 files changed, 8 insertions(+)\n\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f0e..a1487c4f95ce 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1407,6 +1407,8 @@ def execute_sql(self, returning_fields=None):\n class SQLDeleteCompiler(SQLCompiler):\n     @cached_property\n     def single_alias(self):\n+        # Ensure base table is in aliases.\n+        self.query.get_initial_alias()\n         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1\n \n     def _as_sql(self, query):\ndiff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex c32ebba83ffa..e1ec26bc1a3e 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,6 +605,12 @@ def receiver(instance, **kwargs):\n \n \n class FastDeleteTests(TestCase):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/12965"}