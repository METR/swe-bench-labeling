{"instance_id": "pydata__xarray-6938", "score": "I", "diff": "diff --git a/test_debug.py b/test_debug.py\nnew file mode 100644\nindex 00000000..a88e4032\n--- /dev/null\n+++ b/test_debug.py\n@@ -0,0 +1,48 @@\n+import numpy as np\n+import xarray as xr\n+\n+# Create initial dataset\n+nz = 11\n+ds = xr.Dataset(\n+    data_vars={\n+        \"y\": (\"z\", np.random.rand(nz)),\n+        \"lev\": (\"z\", np.arange(nz) * 10),\n+    },\n+)\n+\n+# Create ds2 through the series of operations\n+ds2 = (\n+    ds.swap_dims(z=\"lev\")\n+    .rename_dims(lev=\"z\")\n+    .reset_index(\"lev\")\n+    .reset_coords()\n+)\n+\n+# Check if ds2.variables['lev'] is the same object after various operations\n+print(\"Initial check:\")\n+print(f\"ds2.variables['lev'] is ds2._variables['lev']: {ds2.variables['lev'] is ds2._variables['lev']}\")\n+print(f\"type(ds2.variables): {type(ds2.variables)}\")\n+print(f\"type(ds2._variables): {type(ds2._variables)}\")\n+\n+# Now let's trace what happens in swap_dims\n+print(\"\\nChecking what swap_dims does...\")\n+dims_dict = {'z': 'lev'}\n+\n+# This is what happens inside swap_dims for the 'lev' variable\n+v = ds2.variables['lev']\n+print(f\"Original variable dims: {v.dims}\")\n+print(f\"Original variable id: {id(v)}\")\n+\n+# to_base_variable creates new Variable but might share state\n+var = v.to_base_variable()\n+print(f\"After to_base_variable, new var dims: {var.dims}\")\n+print(f\"After to_base_variable, new var id: {id(var)}\")\n+print(f\"Are they the same object? {var is v}\")\n+\n+# Now setting dims\n+dims = tuple('lev' if dim == 'z' else dim for dim in var.dims)\n+print(f\"New dims to set: {dims}\")\n+var.dims = dims\n+print(f\"After setting dims on new var: {var.dims}\")\n+print(f\"Original variable dims after setting on new var: {v.dims}\")\n+print(f\"Are the _dims the same object? {var._dims is v._dims}\")\ndiff --git a/test_index_var.py b/test_index_var.py\nnew file mode 100644\nindex 00000000..185155d8\n--- /dev/null\n+++ b/test_index_var.py\n@@ -0,0 +1,31 @@\n+import numpy as np\n+import xarray as xr\n+\n+# Create initial dataset\n+nz = 11\n+ds = xr.Dataset(\n+    data_vars={\n+        \"y\": (\"z\", np.random.rand(nz)),\n+        \"lev\": (\"z\", np.arange(nz) * 10),\n+    },\n+)\n+\n+# Create ds2 through the series of operations\n+ds2 = (\n+    ds.swap_dims(z=\"lev\")\n+    .rename_dims(lev=\"z\")\n+    .reset_index(\"lev\")\n+    .reset_coords()\n+)\n+\n+# Check type of ds2._variables['lev']\n+print(f\"Type of ds2._variables['lev']: {type(ds2._variables['lev'])}\")\n+print(f\"Is it an IndexVariable? {isinstance(ds2._variables['lev'], xr.IndexVariable)}\")\n+\n+# Let's see what to_index_variable returns for an IndexVariable\n+from xarray.core.variable import IndexVariable\n+v = ds2._variables['lev']\n+v_idx = v.to_index_variable()\n+print(f\"\\nOriginal variable id: {id(v)}\")\n+print(f\"to_index_variable result id: {id(v_idx)}\")\n+print(f\"Are they the same object? {v is v_idx}\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 00000000..1ec61423\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,39 @@\n+import numpy as np\n+import xarray as xr\n+\n+# Create initial dataset\n+nz = 11\n+ds = xr.Dataset(\n+    data_vars={\n+        \"y\": (\"z\", np.random.rand(nz)),\n+        \"lev\": (\"z\", np.arange(nz) * 10),\n+    },\n+)\n+\n+# Create ds2 through the series of operations\n+ds2 = (\n+    ds.swap_dims(z=\"lev\")\n+    .rename_dims(lev=\"z\")\n+    .reset_index(\"lev\")\n+    .reset_coords()\n+)\n+\n+# Print the dims of lev before swap_dims\n+print(\"Before swap_dims:\")\n+print(f\"ds2['lev'].dims = {ds2['lev'].dims}\")\n+print(f\"id(ds2['lev']) = {id(ds2['lev'])}\")\n+print(f\"id(ds2.variables['lev']) = {id(ds2.variables['lev'])}\")\n+\n+# Apply swap_dims\n+ds2_swapped = ds2.swap_dims(z='lev')\n+\n+# Print the dims of lev after swap_dims  \n+print(\"\\nAfter swap_dims:\")\n+print(f\"ds2['lev'].dims = {ds2['lev'].dims}\")\n+print(f\"id(ds2['lev']) = {id(ds2['lev'])}\")\n+print(f\"id(ds2.variables['lev']) = {id(ds2.variables['lev'])}\")\n+\n+# Also check the swapped version\n+print(f\"\\nds2_swapped['lev'].dims = {ds2_swapped['lev'].dims}\")\n+print(f\"id(ds2_swapped['lev']) = {id(ds2_swapped['lev'])}\")\n+print(f\"id(ds2_swapped.variables['lev']) = {id(ds2_swapped.variables['lev'])}\")\ndiff --git a/test_swap_dims.py b/test_swap_dims.py\nnew file mode 100644\nindex 00000000..412186e8\n--- /dev/null\n+++ b/test_swap_dims.py\n@@ -0,0 +1,27 @@\n+import numpy as np\n+import xarray as xr\n+\n+nz = 11\n+ds = xr.Dataset(\n+    data_vars={\n+        \"y\": (\"z\", np.random.rand(nz)),\n+        \"lev\": (\"z\", np.arange(nz) * 10),\n+        # ^ We want this to be a dimension coordinate\n+    },\n+)\n+print(f\"ds\\n{ds}\")\n+print(f\"\\nds, 'lev' -> dim coord\\n{ds.swap_dims(z='lev')}\")\n+\n+ds2 = (\n+    ds.swap_dims(z=\"lev\")\n+    .rename_dims(lev=\"z\")\n+    .reset_index(\"lev\")\n+    .reset_coords()\n+)\n+print(f\"\\nds2\\n{ds2}\")\n+# ^ This Dataset appears same as the original\n+\n+print(f\"\\nds2, 'lev' -> dim coord\\n{ds2.swap_dims(z='lev')}\")\n+# ^ Produces a Dataset with dimension coordinate 'lev'\n+print(f\"\\nds2 after .swap_dims() applied\\n{ds2}\")\n+# ^ `ds2['lev']` now has dimension 'lev' although otherwise same\ndiff --git a/test_swap_dims_regression.py b/test_swap_dims_regression.py\nnew file mode 100644\nindex 00000000..8b137891\n--- /dev/null\n+++ b/test_swap_dims_regression.py\n@@ -0,0 +1 @@\n+\ndiff --git a/test_trace.py b/test_trace.py\nnew file mode 100644\nindex 00000000..3f8fa03a\n--- /dev/null\n+++ b/test_trace.py\n@@ -0,0 +1,61 @@\n+import numpy as np\n+import xarray as xr\n+\n+# Create initial dataset\n+nz = 11\n+ds = xr.Dataset(\n+    data_vars={\n+        \"y\": (\"z\", np.random.rand(nz)),\n+        \"lev\": (\"z\", np.arange(nz) * 10),\n+    },\n+)\n+\n+# Create ds2 through the series of operations\n+ds2 = (\n+    ds.swap_dims(z=\"lev\")\n+    .rename_dims(lev=\"z\")\n+    .reset_index(\"lev\")\n+    .reset_coords()\n+)\n+\n+print(\"Before swap_dims:\")\n+print(f\"ds2._variables['lev'].dims = {ds2._variables['lev'].dims}\")\n+print(f\"id(ds2._variables['lev']) = {id(ds2._variables['lev'])}\")\n+\n+# Manually trace through swap_dims logic\n+dims_dict = {'z': 'lev'}\n+variables = {}\n+\n+# Check what happens with the 'lev' variable during swap_dims\n+k = 'lev'\n+v = ds2._variables[k]\n+print(f\"\\nProcessing variable '{k}':\")\n+print(f\"  Original dims: {v.dims}\")\n+print(f\"  Original variable id: {id(v)}\")\n+\n+# This is the actual code from swap_dims\n+dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)\n+print(f\"  New dims tuple: {dims}\")\n+\n+# Check if k is in result_dims\n+result_dims = {dims_dict.get(dim, dim) for dim in ds2.dims}\n+print(f\"  result_dims: {result_dims}\")\n+print(f\"  '{k}' in result_dims: {k in result_dims}\")\n+\n+if k in result_dims:\n+    print(\"  Taking the index variable path...\")\n+    var = v.to_index_variable()\n+    print(f\"  After to_index_variable, var id: {id(var)}\")\n+    print(f\"  After to_index_variable, var dims: {var.dims}\")\n+    var.dims = dims\n+    print(f\"  After setting dims, var dims: {var.dims}\")\n+else:\n+    print(\"  Taking the base variable path...\")\n+    var = v.to_base_variable()\n+    print(f\"  After to_base_variable, var id: {id(var)}\")\n+    print(f\"  After to_base_variable, var dims: {var.dims}\")\n+    var.dims = dims\n+    print(f\"  After setting dims, var dims: {var.dims}\")\n+\n+print(f\"\\nOriginal v dims after all operations: {v.dims}\")\n+print(f\"Original ds2._variables['lev'].dims: {ds2._variables['lev'].dims}\")\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c775d05c..50b691f9 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3773,6 +3773,10 @@ class Dataset(\n             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)\n             if k in result_dims:\n                 var = v.to_index_variable()\n+                # to_index_variable returns self for IndexVariable, so we need to copy\n+                # before modifying dims to avoid mutating the original\n+                if dims != v.dims:\n+                    var = var.copy(deep=False)\n                 var.dims = dims\n                 if k in self._indexes:\n                     indexes[k] = self._indexes[k]\n", "gold_standard_diff": "diff --git a/doc/whats-new.rst b/doc/whats-new.rst\nindex 6d78a47f1ea..c0f226b2409 100644\n--- a/doc/whats-new.rst\n+++ b/doc/whats-new.rst\n@@ -49,6 +49,8 @@ Bug fixes\n - Make FacetGrid.set_titles send kwargs correctly using `handle.udpate(kwargs)`.\n   (:issue:`6839`, :pull:`6843`)\n   By `Oliver Lopez <https://github.com/lopezvoliver>`_.\n+- Fix bug where index variables would be changed inplace (:issue:`6931`, :pull:`6938`)\n+  By `Michael Niklas <https://github.com/headtr1ck>`_.\n \n Documentation\n ~~~~~~~~~~~~~\ndiff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c775d05c097..c3717190df6 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3771,6 +3771,7 @@ def swap_dims(\n         indexes: dict[Hashable, Index] = {}\n         for k, v in self.variables.items():\n             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)\n+            var: Variable\n             if k in result_dims:\n                 var = v.to_index_variable()\n                 var.dims = dims\ndiff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 5827b90ad75..b41856aeeb2 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -14,6 +14,7 @@\n     Iterable,\n     Literal,\n     Mapping,\n+    NoReturn,\n     Sequence,\n )\n \n@@ -536,23 +537,23 @@ def values(self):\n     def values(self, values):\n         self.data = values\n \n-    def to_base_variable(self):\n+    def to_base_variable(self) -> Variable:\n         \"\"\"Return this variable as a base xarray.Variable\"\"\"\n         return Variable(\n-            self.dims, self._data, self._attrs, encoding=self._encoding, fastpath=True\n+            self._dims, self._data, self._attrs, encoding=self._encoding, fastpath=True\n         )\n \n     to_variable = utils.alias(to_base_variable, \"to_variable\")\n \n-    def to_index_variable(self):\n+    def to_index_variable(self) -> IndexVariable:\n         \"\"\"Return this variable as an xarray.IndexVariable\"\"\"\n         return IndexVariable(\n-            self.dims, self._data, self._attrs, encoding=self._encoding, fastpath=True\n+            self._dims, self._data, self._attrs, encoding=self._encoding, fastpath=True\n         )\n \n     to_coord = utils.alias(to_index_variable, \"to_coord\")\n \n-    def to_index(self):\n+    def to_index(self) -> pd.Index:\n         \"\"\"Convert this variable to a pandas.Index\"\"\"\n         return self.to_index_variable().to_index()\n \n@@ -2879,13 +2880,13 @@ def equals(self, other, equiv=None):\n     def _data_equals(self, other):\n         return self.to_index().equals(other.to_index())\n \n-    def to_index_variable(self):\n+    def to_index_variable(self) -> IndexVariable:\n         \"\"\"Return this variable as an xarray.IndexVariable\"\"\"\n-        return self\n+        return self.copy()\n \n     to_coord = utils.alias(to_index_variable, \"to_coord\")\n \n-    def to_index(self):\n+    def to_index(self) -> pd.Index:\n         \"\"\"Convert this variable to a pandas.Index\"\"\"\n         # n.b. creating a new pandas.Index from an old pandas.Index is\n         # basically free as pandas.Index objects are immutable\n@@ -2904,7 +2905,7 @@ def to_index(self):\n         return index\n \n     @property\n-    def level_names(self):\n+    def level_names(self) -> list[str] | None:\n         \"\"\"Return MultiIndex level names or None if this IndexVariable has no\n         MultiIndex.\n         \"\"\"\n@@ -2922,11 +2923,11 @@ def get_level_variable(self, level):\n         return type(self)(self.dims, index.get_level_values(level))\n \n     @property\n-    def name(self):\n+    def name(self) -> Hashable:\n         return self.dims[0]\n \n     @name.setter\n-    def name(self, value):\n+    def name(self, value) -> NoReturn:\n         raise AttributeError(\"cannot modify name of IndexVariable in-place\")\n \n     def _inplace_binary_op(self, other, f):\ndiff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 21b8b116af6..6048ebc102f 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2422,6 +2422,15 @@ def test_rolling_window_errors(self):\n     def test_coarsen_2d(self):\n         super().test_coarsen_2d()\n \n+    def test_to_index_variable_copy(self) -> None:\n+        # to_index_variable should return a copy\n+        # https://github.com/pydata/xarray/issues/6931\n+        a = IndexVariable(\"x\", [\"a\"])\n+        b = a.to_index_variable()\n+        assert a is not b\n+        b.dims = (\"y\",)\n+        assert a.dims == (\"x\",)\n+\n \n class TestAsCompatibleData:\n     def test_unchanged_types(self):\n", "gold_standard_pr_link": "https://github.com/pydata/xarray/pull/6938"}