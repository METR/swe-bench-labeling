{"instance_id": "django__django-16333", "score": "C", "diff": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8495..4c9a4f5556 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()\n         return user\n \n \n", "gold_standard_diff": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c84952e..63420af94e29 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,8 @@ def save(self, commit=True):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            if hasattr(self, \"save_m2m\"):\n+                self.save_m2m()\n         return user\n \n \ndiff --git a/docs/releases/4.2.txt b/docs/releases/4.2.txt\nindex a9841d1af4b6..fe74e8485a80 100644\n--- a/docs/releases/4.2.txt\n+++ b/docs/releases/4.2.txt\n@@ -65,6 +65,9 @@ Minor features\n * The default iteration count for the PBKDF2 password hasher is increased from\n   390,000 to 480,000.\n \n+* :class:`~django.contrib.auth.forms.UserCreationForm` now saves many-to-many\n+  form fields for a custom user model.\n+\n :mod:`django.contrib.contenttypes`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt\nindex c77e6c599d32..9c0a256d25c3 100644\n--- a/docs/topics/auth/customizing.txt\n+++ b/docs/topics/auth/customizing.txt\n@@ -840,6 +840,11 @@ extend these forms in this manner::\n             model = CustomUser\n             fields = UserCreationForm.Meta.fields + ('custom_field',)\n \n+.. versionchanged:: 4.2\n+\n+    In older versions, :class:`~django.contrib.auth.forms.UserCreationForm`\n+    didn't save many-to-many form fields for a custom user model.\n+\n Custom users and :mod:`django.contrib.admin`\n --------------------------------------------\n \ndiff --git a/docs/topics/auth/default.txt b/docs/topics/auth/default.txt\nindex fb5d04752dfd..549430aaadb4 100644\n--- a/docs/topics/auth/default.txt\n+++ b/docs/topics/auth/default.txt\n@@ -1665,6 +1665,11 @@ provides several built-in forms located in :mod:`django.contrib.auth.forms`:\n     sets the user's password using\n     :meth:`~django.contrib.auth.models.User.set_password()`.\n \n+    .. versionchanged:: 4.2\n+\n+        In older versions, :class:`UserCreationForm` didn't save many-to-many\n+        form fields for a custom user model.\n+\n .. currentmodule:: django.contrib.auth\n \n Authentication data in templates\ndiff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 78078316e81a..1aee923bb90f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -35,6 +35,7 @@\n )\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .settings import AUTH_TEMPLATES\n \n \n@@ -252,6 +253,25 @@ class Meta(UserCreationForm.Meta):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n     def test_password_whitespace_not_stripped(self):\n         data = {\n             \"username\": \"testuser\",\n", "gold_standard_pr_link": "https://github.com/django/django/pull/16333"}