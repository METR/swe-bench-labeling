{"instance_id": "django__django-15916", "score": "I", "diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad94..4b51b0e5dd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -262,6 +262,9 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n             if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n+            # Also check for formfield_callback as class attribute\n+            if base_formfield_callback is None and hasattr(b, \"formfield_callback\"):\n+                base_formfield_callback = b.formfield_callback\n \n         formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n \n@@ -636,7 +639,9 @@ def modelform_factory(\n     class_name = model.__name__ + \"Form\"\n \n     # Class attributes for the new form class.\n-    form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}\n+    form_class_attrs = {\"Meta\": Meta}\n+    if formfield_callback is not None:\n+        form_class_attrs[\"formfield_callback\"] = formfield_callback\n \n     if getattr(Meta, \"fields\", None) is None and getattr(Meta, \"exclude\", None) is None:\n         raise ImproperlyConfigured(\ndiff --git a/test_complete.py b/test_complete.py\nnew file mode 100644\nindex 0000000000..c3a181fb3c\n--- /dev/null\n+++ b/test_complete.py\n@@ -0,0 +1,80 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+def all_optional(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = False\n+    return formfield\n+\n+# Test case 1: formfield_callback as class attribute\n+class FormWithClassCallback(forms.ModelForm):\n+    formfield_callback = all_required\n+    \n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+\n+# Test case 2: formfield_callback in Meta\n+class FormWithMetaCallback(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+        formfield_callback = staticmethod(all_required)\n+\n+print(\"TEST 1: formfield_callback as class attribute\")\n+print(\"===========================================\")\n+form = FormWithClassCallback()\n+print(f\"Direct instantiation: active.required={form.fields['active'].required}, name.required={form.fields['name'].required}\")\n+\n+factory_form = forms.modelform_factory(MyModel, form=FormWithClassCallback)()\n+print(f\"With modelform_factory (no callback): active.required={factory_form.fields['active'].required}, name.required={factory_form.fields['name'].required}\")\n+\n+factory_form2 = forms.modelform_factory(MyModel, form=FormWithClassCallback, formfield_callback=all_optional)()\n+print(f\"With modelform_factory (override callback): active.required={factory_form2.fields['active'].required}, name.required={factory_form2.fields['name'].required}\")\n+\n+print(\"\\nTEST 2: formfield_callback in Meta\")\n+print(\"===================================\")\n+form = FormWithMetaCallback()\n+print(f\"Direct instantiation: active.required={form.fields['active'].required}, name.required={form.fields['name'].required}\")\n+\n+factory_form = forms.modelform_factory(MyModel, form=FormWithMetaCallback)()\n+print(f\"With modelform_factory (no callback): active.required={factory_form.fields['active'].required}, name.required={factory_form.fields['name'].required}\")\n+\n+factory_form2 = forms.modelform_factory(MyModel, form=FormWithMetaCallback, formfield_callback=all_optional)()\n+print(f\"With modelform_factory (override callback): active.required={factory_form2.fields['active'].required}, name.required={factory_form2.fields['name'].required}\")\ndiff --git a/test_debug_inheritance.py b/test_debug_inheritance.py\nnew file mode 100644\nindex 0000000000..40a273e1bf\n--- /dev/null\n+++ b/test_debug_inheritance.py\n@@ -0,0 +1,64 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# Simple form with formfield_callback\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+    \n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+\n+# Check if formfield_callback survives the metaclass processing\n+print(\"After metaclass processing:\")\n+print(f\"MyForm has formfield_callback: {hasattr(MyForm, 'formfield_callback')}\")\n+print(f\"MyForm.__dict__ keys: {list(MyForm.__dict__.keys())}\")\n+\n+# Check inheritance\n+class DerivedForm(MyForm):\n+    pass\n+\n+print(f\"\\nDerivedForm has formfield_callback: {hasattr(DerivedForm, 'formfield_callback')}\")\n+print(f\"DerivedForm.__dict__ keys: {list(DerivedForm.__dict__.keys())}\")\n+\n+# What modelform_factory does\n+print(\"\\nWhat modelform_factory creates:\")\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\n+print(f\"FactoryForm has formfield_callback: {hasattr(FactoryForm, 'formfield_callback')}\")\n+print(f\"FactoryForm.__dict__ keys: {list(FactoryForm.__dict__.keys())}\")\n+print(f\"FactoryForm.__bases__: {FactoryForm.__bases__}\")\ndiff --git a/test_expected_behavior.py b/test_expected_behavior.py\nnew file mode 100644\nindex 0000000000..9c0b0714a3\n--- /dev/null\n+++ b/test_expected_behavior.py\n@@ -0,0 +1,56 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# As given in the issue description\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+    class Meta:\n+        model = MyModel\n+        formfield_callback = all_required\n+        fields = ['active', 'name']\n+\n+# Create forms and test\n+direct_form = MyForm()\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\n+factory_form_instance = FactoryForm()\n+\n+print(\"Expected behavior according to issue:\")\n+print(\"Both forms should have required fields\")\n+print(f\"\\nMyForm (direct): active.required={direct_form.fields['active'].required}, name.required={direct_form.fields['name'].required}\")\n+print(f\"FactoryForm: active.required={factory_form_instance.fields['active'].required}, name.required={factory_form_instance.fields['name'].required}\")\n+print(\"\\nActual issue: formfield_callback is not being used in FactoryForm\")\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..f834175609\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,61 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    print(f\"all_required called for field: {field.name}\")\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+    \n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+\n+# Test the issue\n+print(\"Creating form with modelform_factory...\")\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\n+\n+# Create an instance to test\n+form_instance = FactoryForm()\n+print(f\"\\nFields in FactoryForm:\")\n+for field_name, field in form_instance.fields.items():\n+    print(f\"  {field_name}: required={field.required}\")\n+\n+# Create instance of MyForm directly for comparison\n+print(f\"\\nFields in MyForm (direct instantiation):\")\n+my_form_instance = MyForm()\n+for field_name, field in my_form_instance.fields.items():\n+    print(f\"  {field_name}: required={field.required}\")\ndiff --git a/test_issue2.py b/test_issue2.py\nnew file mode 100644\nindex 0000000000..2d520dd11f\n--- /dev/null\n+++ b/test_issue2.py\n@@ -0,0 +1,72 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    print(f\"all_required called for field: {field.name}\")\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# Test case 1: formfield_callback as class attribute\n+class MyForm1(forms.ModelForm):\n+    formfield_callback = all_required\n+    \n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+\n+# Test case 2: formfield_callback in Meta\n+class MyForm2(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+        formfield_callback = staticmethod(all_required)\n+\n+# Test both cases\n+print(\"Test case 1: formfield_callback as class attribute\")\n+print(\"Creating form with modelform_factory...\")\n+FactoryForm1 = forms.modelform_factory(MyModel, form=MyForm1)\n+form1 = FactoryForm1()\n+print(f\"FactoryForm1 fields: active.required={form1.fields['active'].required}, name.required={form1.fields['name'].required}\")\n+\n+direct_form1 = MyForm1()\n+print(f\"MyForm1 direct: active.required={direct_form1.fields['active'].required}, name.required={direct_form1.fields['name'].required}\")\n+\n+print(\"\\nTest case 2: formfield_callback in Meta\")\n+print(\"Creating form with modelform_factory...\")\n+FactoryForm2 = forms.modelform_factory(MyModel, form=MyForm2)\n+form2 = FactoryForm2()\n+print(f\"FactoryForm2 fields: active.required={form2.fields['active'].required}, name.required={form2.fields['name'].required}\")\n+\n+direct_form2 = MyForm2()\n+print(f\"MyForm2 direct: active.required={direct_form2.fields['active'].required}, name.required={direct_form2.fields['name'].required}\")\ndiff --git a/test_issue3.py b/test_issue3.py\nnew file mode 100644\nindex 0000000000..fe27695ff6\n--- /dev/null\n+++ b/test_issue3.py\n@@ -0,0 +1,63 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    print(f\"all_required called for field: {field.name}\")\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# Let's debug what's happening\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+    \n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+\n+# Check attributes\n+print(\"MyForm attributes:\")\n+print(f\"  formfield_callback (class): {getattr(MyForm, 'formfield_callback', 'NOT FOUND')}\")\n+print(f\"  Meta.formfield_callback: {getattr(MyForm.Meta, 'formfield_callback', 'NOT FOUND')}\")\n+\n+# Create with modelform_factory\n+print(\"\\nCreating FactoryForm with modelform_factory...\")\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\n+\n+print(\"\\nFactoryForm attributes:\")\n+print(f\"  formfield_callback (class): {getattr(FactoryForm, 'formfield_callback', 'NOT FOUND')}\")\n+print(f\"  Meta.formfield_callback: {getattr(FactoryForm.Meta, 'formfield_callback', 'NOT FOUND')}\")\n+\n+# Check parent classes\n+print(f\"\\nFactoryForm.__bases__: {FactoryForm.__bases__}\")\n+print(f\"MyForm in bases? {MyForm in FactoryForm.__bases__}\")\ndiff --git a/test_issue4.py b/test_issue4.py\nnew file mode 100644\nindex 0000000000..8650668658\n--- /dev/null\n+++ b/test_issue4.py\n@@ -0,0 +1,65 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    print(f\"all_required called for field: {field.name}\")\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# Let's add some debugging to understand what's happening\n+original_modelform_factory = forms.modelform_factory\n+\n+def debug_modelform_factory(*args, **kwargs):\n+    print(f\"modelform_factory called with:\")\n+    print(f\"  args: {args}\")\n+    print(f\"  kwargs: {kwargs}\")\n+    result = original_modelform_factory(*args, **kwargs)\n+    print(f\"  result class attributes: {[attr for attr in dir(result) if not attr.startswith('_')]}\")\n+    return result\n+\n+forms.modelform_factory = debug_modelform_factory\n+\n+# Test\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+    \n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+\n+print(\"Direct MyForm instantiation:\")\n+direct_form = MyForm()\n+\n+print(\"\\nUsing modelform_factory:\")\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\ndiff --git a/test_issue5.py b/test_issue5.py\nnew file mode 100644\nindex 0000000000..190987bad6\n--- /dev/null\n+++ b/test_issue5.py\n@@ -0,0 +1,81 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+# Let's trace what's happening in ModelFormMetaclass\n+from django.forms.models import ModelFormMetaclass\n+\n+original_new = ModelFormMetaclass.__new__\n+\n+def debug_new(mcs, name, bases, attrs):\n+    print(f\"\\nModelFormMetaclass.__new__ called:\")\n+    print(f\"  name: {name}\")\n+    print(f\"  bases: {bases}\")\n+    print(f\"  attrs keys: {list(attrs.keys())}\")\n+    print(f\"  formfield_callback in attrs: {'formfield_callback' in attrs}\")\n+    if 'formfield_callback' in attrs:\n+        print(f\"  formfield_callback value: {attrs['formfield_callback']}\")\n+    \n+    # Check bases for formfield_callback\n+    for base in bases:\n+        if hasattr(base, 'formfield_callback'):\n+            print(f\"  base {base} has formfield_callback: {base.formfield_callback}\")\n+    \n+    result = original_new(mcs, name, bases, attrs)\n+    print(f\"  result has formfield_callback: {hasattr(result, 'formfield_callback')}\")\n+    if hasattr(result, 'formfield_callback'):\n+        print(f\"  result.formfield_callback: {result.formfield_callback}\")\n+    \n+    return result\n+\n+ModelFormMetaclass.__new__ = debug_new\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    print(f\"all_required called for field: {field.name}\")\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# Test\n+class MyForm(forms.ModelForm):\n+    formfield_callback = all_required\n+    \n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+\n+print(\"Creating MyForm...\")\n+print(f\"MyForm.formfield_callback: {getattr(MyForm, 'formfield_callback', 'NOT FOUND')}\")\n+\n+print(\"\\nCreating FactoryForm with modelform_factory...\")\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\n+print(f\"FactoryForm.formfield_callback: {getattr(FactoryForm, 'formfield_callback', 'NOT FOUND')}\")\ndiff --git a/test_issue6.py b/test_issue6.py\nnew file mode 100644\nindex 0000000000..90a5c8155b\n--- /dev/null\n+++ b/test_issue6.py\n@@ -0,0 +1,68 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    print(f\"all_required called for field: {field.name}\")\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# Test with formfield_callback in Meta\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+        formfield_callback = staticmethod(all_required)\n+\n+print(\"MyForm Meta attributes:\")\n+for attr in dir(MyForm.Meta):\n+    if not attr.startswith('_'):\n+        print(f\"  {attr}: {getattr(MyForm.Meta, attr)}\")\n+\n+# Direct instantiation\n+print(\"\\nDirect MyForm instantiation:\")\n+form1 = MyForm()\n+for name, field in form1.fields.items():\n+    print(f\"  {name}: required={field.required}\")\n+\n+# Using modelform_factory\n+print(\"\\nUsing modelform_factory:\")\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\n+print(\"\\nFactoryForm Meta attributes:\")\n+for attr in dir(FactoryForm.Meta):\n+    if not attr.startswith('_'):\n+        print(f\"  {attr}: {getattr(FactoryForm.Meta, attr)}\")\n+\n+form2 = FactoryForm()\n+for name, field in form2.fields.items():\n+    print(f\"  {name}: required={field.required}\")\ndiff --git a/test_meta_callback.py b/test_meta_callback.py\nnew file mode 100644\nindex 0000000000..29f0b20764\n--- /dev/null\n+++ b/test_meta_callback.py\n@@ -0,0 +1,65 @@\n+import os\n+import sys\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=[\n+        'django.contrib.contenttypes',\n+        'django.contrib.auth',\n+    ]\n+)\n+\n+django.setup()\n+\n+from django import forms\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    active = models.BooleanField()\n+    name = models.CharField(max_length=64, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def all_required(field, **kwargs):\n+    formfield = field.formfield(**kwargs)\n+    if formfield:\n+        formfield.required = True\n+    return formfield\n+\n+# Form with formfield_callback in Meta\n+class MyForm(forms.ModelForm):\n+    class Meta:\n+        model = MyModel\n+        fields = ['active', 'name']\n+        formfield_callback = staticmethod(all_required)\n+\n+print(\"Parent form Meta attributes:\")\n+print(f\"MyForm.Meta has formfield_callback: {hasattr(MyForm.Meta, 'formfield_callback')}\")\n+if hasattr(MyForm.Meta, 'formfield_callback'):\n+    print(f\"MyForm.Meta.formfield_callback: {MyForm.Meta.formfield_callback}\")\n+\n+# What modelform_factory creates\n+print(\"\\nmodelform_factory result:\")\n+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)\n+print(f\"FactoryForm.Meta.__bases__: {FactoryForm.Meta.__bases__}\")\n+print(f\"FactoryForm.Meta has formfield_callback: {hasattr(FactoryForm.Meta, 'formfield_callback')}\")\n+if hasattr(FactoryForm.Meta, 'formfield_callback'):\n+    print(f\"FactoryForm.Meta.formfield_callback: {FactoryForm.Meta.formfield_callback}\")\n+\n+# Test the forms\n+print(\"\\nForm behavior:\")\n+form1 = MyForm()\n+print(f\"MyForm: active.required={form1.fields['active'].required}, name.required={form1.fields['name'].required}\")\n+\n+form2 = FactoryForm()\n+print(f\"FactoryForm: active.required={form2.fields['active'].required}, name.required={form2.fields['name'].required}\")\n", "gold_standard_diff": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad9405..89cb000271ca 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -253,18 +253,11 @@ def __init__(self, options=None):\n         self.help_texts = getattr(options, \"help_texts\", None)\n         self.error_messages = getattr(options, \"error_messages\", None)\n         self.field_classes = getattr(options, \"field_classes\", None)\n+        self.formfield_callback = getattr(options, \"formfield_callback\", None)\n \n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-\n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n-\n         new_class = super().__new__(mcs, name, bases, attrs)\n \n         if bases == (BaseModelForm,):\n@@ -308,7 +301,7 @@ def __new__(mcs, name, bases, attrs):\n                 opts.fields,\n                 opts.exclude,\n                 opts.widgets,\n-                formfield_callback,\n+                opts.formfield_callback,\n                 opts.localized_fields,\n                 opts.labels,\n                 opts.help_texts,\n@@ -636,7 +629,7 @@ def modelform_factory(\n     class_name = model.__name__ + \"Form\"\n \n     # Class attributes for the new form class.\n-    form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}\n+    form_class_attrs = {\"Meta\": Meta}\n \n     if getattr(Meta, \"fields\", None) is None and getattr(Meta, \"exclude\", None) is None:\n         raise ImproperlyConfigured(\ndiff --git a/docs/releases/4.2.txt b/docs/releases/4.2.txt\nindex 92ccb8e6dddc..67608489767b 100644\n--- a/docs/releases/4.2.txt\n+++ b/docs/releases/4.2.txt\n@@ -151,7 +151,11 @@ File Uploads\n Forms\n ~~~~~\n \n-* ...\n+* :class:`~django.forms.ModelForm` now accepts the new ``Meta`` option\n+  ``formfield_callback`` to customize form fields.\n+\n+* :func:`~django.forms.models.modelform_factory` now respects the\n+  ``formfield_callback`` attribute of the ``form``\u2019s ``Meta``.\n \n Generic Views\n ~~~~~~~~~~~~~\ndiff --git a/docs/topics/forms/modelforms.txt b/docs/topics/forms/modelforms.txt\nindex 3332709089a1..9000ff24f4a5 100644\n--- a/docs/topics/forms/modelforms.txt\n+++ b/docs/topics/forms/modelforms.txt\n@@ -548,8 +548,8 @@ the ``name`` field::\n                 },\n             }\n \n-You can also specify ``field_classes`` to customize the type of fields\n-instantiated by the form.\n+You can also specify ``field_classes`` or ``formfield_callback`` to customize\n+the type of fields instantiated by the form.\n \n For example, if you wanted to use ``MySlugFormField`` for the ``slug``\n field, you could do the following::\n@@ -565,6 +565,21 @@ field, you could do the following::\n                 'slug': MySlugFormField,\n             }\n \n+or::\n+\n+    from django.forms import ModelForm\n+    from myapp.models import Article\n+\n+    def formfield_for_dbfield(db_field, **kwargs):\n+        if db_field.name == \"slug\":\n+            return MySlugFormField()\n+        return db_field.formfield(**kwargs)\n+\n+    class ArticleForm(ModelForm):\n+        class Meta:\n+            model = Article\n+            fields = [\"pub_date\", \"headline\", \"content\", \"reporter\", \"slug\"]\n+            formfield_callback = formfield_for_dbfield\n \n Finally, if you want complete control over of a field -- including its type,\n validators, required, etc. -- you can do this by declaratively specifying\n@@ -638,6 +653,9 @@ the field declaratively and setting its ``validators`` parameter::\n     See the :doc:`form field documentation </ref/forms/fields>` for more information\n     on fields and their arguments.\n \n+.. versionchanged:: 4.2\n+\n+    The ``Meta.formfield_callback`` attribute was added.\n \n Enabling localization of fields\n -------------------------------\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d2ce3348c5cd..8268032e3c89 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,41 @@ class InheritedForm(NewForm):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n", "gold_standard_pr_link": "https://github.com/django/django/pull/15916"}