{"instance_id": "django__django-11490", "score": "C", "diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..7047a9756c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -426,6 +426,8 @@ class SQLCompiler:\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n                 if not compiler.query.values_select and self.query.values_select:\n+                    # Clone the query to avoid modifying the original\n+                    compiler.query = compiler.query.clone()\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/test_issue.py b/test_issue.py\nnew file mode 100644\nindex 0000000000..a8da6fb5a8\n--- /dev/null\n+++ b/test_issue.py\n@@ -0,0 +1,42 @@\n+#!/usr/bin/env python\n+import os\n+import sys\n+\n+# Add the testbed to Python path\n+sys.path.insert(0, '/testbed')\n+\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+\n+import django\n+django.setup()\n+\n+from tests.queries.models import ReservedName\n+\n+# Test to reproduce the issue\n+def test_union_values_list_issue():\n+    # Setup\n+    ReservedName.objects.all().delete()\n+    ReservedName.objects.create(name='a', order=2)\n+    \n+    qs1 = ReservedName.objects.all()\n+    \n+    # First query - this should return ('a', 2)\n+    result1 = qs1.union(qs1).values_list('name', 'order').get()\n+    print(f\"First query result: {result1}\")\n+    \n+    # Second query - this should return (2,) but returns ('a', 2)\n+    result2 = qs1.union(qs1).values_list('order').get()\n+    print(f\"Second query result: {result2}\")\n+    print(f\"Expected: (2,)\")\n+    \n+    # The issue is that result2 should be (2,) but it's ('a', 2)\n+    # This assertion will fail, demonstrating the bug\n+    try:\n+        assert result2 == (2,), f\"Expected (2,) but got {result2}\"\n+        print(\"Test passed!\")\n+    except AssertionError as e:\n+        print(f\"Test failed: {e}\")\n+        print(\"This demonstrates the bug!\")\n+\n+if __name__ == \"__main__\":\n+    test_union_values_list_issue()\ndiff --git a/test_repro_issue.py b/test_repro_issue.py\nnew file mode 100644\nindex 0000000000..676a433369\n--- /dev/null\n+++ b/test_repro_issue.py\n@@ -0,0 +1,23 @@\n+import unittest\n+from django.test import TestCase\n+from tests.queries.models import ReservedName\n+\n+\n+class TestUnionValuesListIssue(TestCase):\n+    def test_union_values_list_changing_columns(self):\n+        \"\"\"Test that union queries can change the list of columns with values_list().\"\"\"\n+        # Setup\n+        ReservedName.objects.create(name='a', order=2)\n+        \n+        qs1 = ReservedName.objects.all()\n+        \n+        # First query - this should return ('a', 2)\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        \n+        # Second query - this should return (2,) but returns ('a', 2)\n+        # This is the bug we're fixing\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        \n+        # This will fail before the fix\n+        self.assertEqual(result2, (2,), f\"Expected (2,) but got {result2}\")\ndiff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 3902db59e2..9bb61feaef 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,20 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_values_list_changing_columns(self):\n+        \"\"\"Test that union queries can change the list of columns with values_list().\"\"\"\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # First query - this should return ('a', 2)\n+        result1 = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result1, ('a', 2))\n+        \n+        # Second query - this should return (2,) but currently returns ('a', 2)\n+        # This is the bug we're fixing\n+        result2 = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result2, (2,))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n", "gold_standard_diff": "From 5fd521e8354d8780c08b9807976367feb77104bb Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Wed, 19 Jun 2019 09:38:31 +0200\nSubject: [PATCH] Fixed #30572 -- Prevented values()/values_list() on combined\n queryset from mutating the list of columns in querysets.\n\n---\n django/db/models/sql/compiler.py     | 1 +\n tests/queries/test_qs_combinators.py | 3 +++\n 2 files changed, 4 insertions(+)\n\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760b6..a791908cafee 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -426,6 +426,7 @@ def get_combinator_sql(self, combinator, all):\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n                 if not compiler.query.values_select and self.query.values_select:\n+                    compiler.query = compiler.query.clone()\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\ndiff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 3902db59e21e..227972e8c4e8 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -123,6 +123,9 @@ def test_union_with_values(self):\n         self.assertEqual(reserved_name['order'], 2)\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n+        # List of columns can be changed.\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n \n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n", "gold_standard_pr_link": "https://github.com/django/django/pull/11490"}