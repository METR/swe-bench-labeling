diff --git a/setup.py b/setup.py
index 4a1d5aeed..3faa58e79 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 1cecb1f79..dd7465bf1 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -2691,6 +2691,58 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #
                 return None
 
 
+class ClassmethodPropertyDocumenter(PropertyDocumenter):
+    """
+    Specialized Documenter subclass for classmethod properties.
+    """
+    objtype = 'classmethodproperty'
+    directivetype = 'property'
+    member_order = 60
+
+    # Higher priority than PropertyDocumenter so we get checked first
+    priority = PropertyDocumenter.priority + 1
+
+    @classmethod
+    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
+                            ) -> bool:
+        if isinstance(parent, ClassDocumenter):
+            try:
+                # Get the class dict directly to avoid property evaluation
+                obj_dict = safe_getattr(parent.object, '__dict__', {})
+                if membername in obj_dict:
+                    # Check if it's a classmethod wrapping a property
+                    cm = obj_dict[membername]
+                    if isinstance(cm, classmethod) and isinstance(getattr(cm, '__func__', None), property):
+                        return True
+            except Exception:
+                pass
+        return False
+
+    def import_object(self, raiseerror: bool = False) -> bool:
+        """Import the classmethod property."""
+        ret = super().import_object(raiseerror)
+        if ret:
+            # Get the classmethod from the class dict
+            obj_dict = safe_getattr(self.parent, '__dict__', {})
+            if self.objpath[-1] in obj_dict:
+                cm = obj_dict[self.objpath[-1]]
+                if isinstance(cm, classmethod) and isinstance(getattr(cm, '__func__', None), property):
+                    # Store the property for documentation
+                    self.object = cm.__func__
+                    self.isclassmethod = True
+                    return True
+        return ret
+
+    def format_name(self) -> str:
+        """Format the name to indicate it's a classmethod property."""
+        # Get the base property format first
+        name = super().format_name()
+        # Extract just the property name without the class prefix
+        if '.' in name:
+            name = name.split('.')[-1]
+        return "classmethod property " + name
+
+
 class NewTypeAttributeDocumenter(AttributeDocumenter):
     """
     Specialized Documenter subclass for NewTypes.
@@ -2753,6 +2805,7 @@ def setup(app: Sphinx) -> Dict[str, Any]:
     app.add_autodocumenter(MethodDocumenter)
     app.add_autodocumenter(AttributeDocumenter)
     app.add_autodocumenter(PropertyDocumenter)
+    app.add_autodocumenter(ClassmethodPropertyDocumenter)
     app.add_autodocumenter(NewTypeAttributeDocumenter)
 
     app.add_config_value('autoclass_content', 'class', True, ENUM('both', 'class', 'init'))
diff --git a/test_autodoc.py b/test_autodoc.py
new file mode 100644
index 000000000..3d51d774e
--- /dev/null
+++ b/test_autodoc.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python3
+from sphinx.ext.autodoc import ClassDocumenter, PropertyDocumenter, ClassmethodPropertyDocumenter
+from test_classmethod_property import TestClass
+
+# Test if our documenter can recognize classmethod properties
+print("Testing ClassmethodPropertyDocumenter.can_document_member:")
+
+# Create a mock parent documenter that inherits from ClassDocumenter
+class MockClassDocumenter(ClassDocumenter):
+    def __init__(self):
+        # Don't call super().__init__ to avoid needing full setup
+        self.object = TestClass
+        self.parent = None
+
+parent = MockClassDocumenter()
+
+# Test regular property
+print("\nRegular property:")
+can_doc_regular = PropertyDocumenter.can_document_member(
+    TestClass.regular_property, 'regular_property', False, parent
+)
+print(f"PropertyDocumenter can document: {can_doc_regular}")
+
+can_doc_regular_cm = ClassmethodPropertyDocumenter.can_document_member(
+    TestClass.regular_property, 'regular_property', False, parent
+)
+print(f"ClassmethodPropertyDocumenter can document: {can_doc_regular_cm}")
+
+# Test classmethod property
+print("\nClassmethod property:")
+can_doc_cm = PropertyDocumenter.can_document_member(
+    TestClass.classmethod_property, 'classmethod_property', False, parent
+)
+print(f"PropertyDocumenter can document: {can_doc_cm}")
+
+can_doc_cm_special = ClassmethodPropertyDocumenter.can_document_member(
+    TestClass.classmethod_property, 'classmethod_property', False, parent
+)
+print(f"ClassmethodPropertyDocumenter can document: {can_doc_cm_special}")
diff --git a/test_classmethod_property.py b/test_classmethod_property.py
new file mode 100644
index 000000000..ac0618362
--- /dev/null
+++ b/test_classmethod_property.py
@@ -0,0 +1,18 @@
+class TestClass:
+    """Test class for classmethod property issue."""
+    
+    @property
+    def regular_property(self):
+        """This is a regular property."""
+        return "regular"
+    
+    @classmethod
+    @property
+    def classmethod_property(cls):
+        """This is a classmethod property."""
+        return "classmethod_property"
+    
+    @classmethod
+    def regular_classmethod(cls):
+        """This is a regular classmethod."""
+        return "classmethod"
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..d41c13e7b
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,63 @@
+"""Test comprehensive classmethod property support."""
+from abc import ABC, abstractmethod
+
+
+class MetaClass(type):
+    """Metaclass with classmethod properties."""
+    
+    @classmethod
+    @property
+    def metaclass_class_property(cls):
+        """Metaclass classmethod property."""
+        return "metaclass_class_property"
+    
+    @classmethod
+    @property
+    @abstractmethod
+    def metaclass_abstract_class_property(cls):
+        """Metaclass abstract classmethod property."""
+        pass
+
+
+class BaseClass(ABC, metaclass=MetaClass):
+    """Base class with various properties."""
+    
+    @property
+    def baseclass_property(self):
+        """Regular instance property."""
+        return "property"
+    
+    @classmethod
+    @property
+    def baseclass_class_property(cls):
+        """Base class classmethod property."""
+        return "baseclass_class_property"
+    
+    @classmethod
+    @property
+    @abstractmethod
+    def baseclass_abstract_class_property(cls):
+        """Base class abstract classmethod property."""
+        pass
+
+
+class SubClass(BaseClass):
+    """Subclass implementing abstract properties."""
+    
+    @classmethod
+    @property
+    def subclass_class_property(cls):
+        """Subclass classmethod property."""
+        return "subclass_class_property"
+    
+    @classmethod
+    @property
+    def baseclass_abstract_class_property(cls):
+        """Implementation of abstract classmethod property."""
+        return "implemented"
+    
+    @classmethod
+    @property
+    def subclass_abstract_class_property(cls):
+        """Subclass abstract classmethod property."""
+        return "subclass_abstract"
diff --git a/test_full_documentation.py b/test_full_documentation.py
new file mode 100644
index 000000000..21c1ec878
--- /dev/null
+++ b/test_full_documentation.py
@@ -0,0 +1,92 @@
+import os
+import sys
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+
+# Create test module content
+test_module_content = '''
+"""Test module for classmethod properties."""
+
+class TestClass:
+    """Test class with various properties."""
+    
+    @property
+    def regular_property(self):
+        """This is a regular property."""
+        return "regular"
+    
+    @classmethod
+    @property
+    def classmethod_property(cls):
+        """This is a classmethod property."""
+        return "classmethod_property"
+    
+    @classmethod
+    def regular_classmethod(cls):
+        """This is a regular classmethod."""
+        return "classmethod"
+'''
+
+# Create a temporary directory structure
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create source and build directories
+    srcdir = os.path.join(tmpdir, 'source')
+    outdir = os.path.join(tmpdir, 'build')
+    doctreedir = os.path.join(tmpdir, 'doctrees')
+    confdir = srcdir
+    
+    os.makedirs(srcdir)
+    os.makedirs(outdir)
+    
+    # Write test module
+    module_path = os.path.join(srcdir, 'test_module.py')
+    with open(module_path, 'w') as f:
+        f.write(test_module_content)
+    
+    # Create conf.py
+    conf_content = '''
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+
+extensions = ['sphinx.ext.autodoc']
+master_doc = 'index'
+'''
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write(conf_content)
+    
+    # Create index.rst
+    index_content = '''
+Test Module Documentation
+========================
+
+.. automodule:: test_module
+   :members:
+   :undoc-members:
+   :show-inheritance:
+'''
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write(index_content)
+    
+    # Build documentation
+    app = Sphinx(srcdir, confdir, outdir, doctreedir, 'text')
+    app.build()
+    
+    # Read the output
+    output_file = os.path.join(outdir, 'index.txt')
+    if os.path.exists(output_file):
+        with open(output_file, 'r') as f:
+            output = f.read()
+            print("Generated documentation:")
+            print("=" * 60)
+            print(output)
+            print("=" * 60)
+            
+            # Check if classmethod_property is documented
+            if "classmethod_property" in output:
+                print("\n✓ SUCCESS: classmethod_property is documented!")
+            else:
+                print("\n✗ FAILED: classmethod_property is NOT documented!")
+    else:
+        print("No output file generated!")
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
