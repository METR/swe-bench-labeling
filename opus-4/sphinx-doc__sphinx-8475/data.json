{"instance_id": "sphinx-doc__sphinx-8475", "score": "I", "diff": "diff --git a/setup.py b/setup.py\nindex ca08a6d4a..21cb67b8f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):\n     sys.exit(1)\n \n install_requires = [\n-    'sphinxcontrib-applehelp',\n-    'sphinxcontrib-devhelp',\n+    'sphinxcontrib-applehelp<=1.0.7',\n+    'sphinxcontrib-devhelp<=1.0.5',\n     'sphinxcontrib-jsmath',\n-    'sphinxcontrib-htmlhelp',\n-    'sphinxcontrib-serializinghtml',\n-    'sphinxcontrib-qthelp',\n-    'Jinja2>=2.3',\n+    'sphinxcontrib-htmlhelp<=2.0.4',\n+    'sphinxcontrib-serializinghtml<=1.1.9',\n+    'sphinxcontrib-qthelp<=1.0.6',\n+    'Jinja2<3.0',\n     'Pygments>=2.0',\n     'docutils>=0.12',\n     'snowballstemmer>=1.1',\n     'babel>=1.3',\n-    'alabaster>=0.7,<0.8',\n+    'alabaster>=0.7,<0.7.12',\n     'imagesize',\n     'requests>=2.5.0',\n     'setuptools',\n-    'packaging',\n+    'packaging', 'markupsafe<=2.0.1',\n ]\n \n extras_require = {\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 1dc0337c3..daf70d9a7 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -20,7 +20,7 @@ from urllib.parse import unquote, urlparse\n \n from docutils import nodes\n from docutils.nodes import Node\n-from requests.exceptions import HTTPError\n+from requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -172,9 +172,9 @@ class CheckExternalLinksBuilder(Builder):\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except (HTTPError, TooManyRedirects):\n                         # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n+                        # don't like HEAD requests or they enter redirect loops.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n                                                 auth=auth_info, **kwargs)\n                         response.raise_for_status()\ndiff --git a/test_toomanyredirects.py b/test_toomanyredirects.py\nnew file mode 100644\nindex 000000000..e5bc076fa\n--- /dev/null\n+++ b/test_toomanyredirects.py\n@@ -0,0 +1,110 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Test script to verify that TooManyRedirects exceptions are handled properly\n+\"\"\"\n+\n+import http.server\n+import socketserver\n+import threading\n+import time\n+from urllib.parse import urlparse\n+\n+# Create a simple HTTP server that causes infinite redirects for HEAD requests\n+class RedirectHandler(http.server.BaseHTTPRequestHandler):\n+    def do_HEAD(self):\n+        # Always redirect HEAD requests to create an infinite loop\n+        self.send_response(301)\n+        self.send_header('Location', self.path)\n+        self.end_headers()\n+    \n+    def do_GET(self):\n+        # GET requests return OK\n+        self.send_response(200)\n+        self.send_header('Content-Type', 'text/html')\n+        self.end_headers()\n+        self.wfile.write(b'<html><body>Success!</body></html>')\n+    \n+    def log_message(self, format, *args):\n+        # Suppress logging\n+        pass\n+\n+# Start the test server\n+PORT = 8899\n+Handler = RedirectHandler\n+\n+def start_server():\n+    with socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n+        httpd.serve_forever()\n+\n+# Run server in background thread\n+server_thread = threading.Thread(target=start_server, daemon=True)\n+server_thread.start()\n+time.sleep(1)  # Give server time to start\n+\n+# Now test with sphinx linkcheck\n+print(\"Starting test server on port\", PORT)\n+print(\"Server will cause infinite redirects for HEAD requests but work for GET requests\")\n+\n+# Create a simple sphinx project to test\n+import os\n+import tempfile\n+import shutil\n+\n+# Create temporary directory\n+tmpdir = tempfile.mkdtemp()\n+print(f\"Created temp directory: {tmpdir}\")\n+\n+# Create minimal sphinx project\n+os.makedirs(os.path.join(tmpdir, 'source'), exist_ok=True)\n+\n+# Create conf.py\n+conf_content = \"\"\"\n+project = 'Test'\n+extensions = []\n+\"\"\"\n+with open(os.path.join(tmpdir, 'source', 'conf.py'), 'w') as f:\n+    f.write(conf_content)\n+\n+# Create index.rst with link to our test server\n+index_content = f\"\"\"\n+Test Document\n+=============\n+\n+This is a test link: http://localhost:{PORT}/test\n+\"\"\"\n+with open(os.path.join(tmpdir, 'source', 'index.rst'), 'w') as f:\n+    f.write(index_content)\n+\n+# Run sphinx linkcheck\n+import subprocess\n+print(\"\\nRunning sphinx linkcheck...\")\n+result = subprocess.run(\n+    ['sphinx-build', '-b', 'linkcheck', 'source', 'build'],\n+    cwd=tmpdir,\n+    capture_output=True,\n+    text=True\n+)\n+\n+print(\"\\nSTDOUT:\")\n+print(result.stdout)\n+print(\"\\nSTDERR:\")\n+print(result.stderr)\n+\n+# Check the output\n+output_file = os.path.join(tmpdir, 'build', 'output.txt')\n+if os.path.exists(output_file):\n+    with open(output_file, 'r') as f:\n+        output = f.read()\n+        print(\"\\nLinkcheck output:\")\n+        print(output)\n+        \n+        # The output.txt might be empty if everything is OK\n+        # Check the build output instead\n+        if f\"ok        http://localhost:{PORT}/test\" in result.stdout:\n+            print(\"\\n\u2713 SUCCESS: Link was correctly marked as OK after GET fallback!\")\n+        else:\n+            print(\"\\n\u2717 FAILED: Link was not marked as working\")\n+\n+# Cleanup\n+shutil.rmtree(tmpdir)\n+print(f\"\\nCleaned up {tmpdir}\")\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex c09c81fe0..f531fd79c 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -274,6 +274,42 @@ def test_follows_redirects_on_GET(app, capsys):\n     )\n \n \n+def make_too_many_redirects_handler():\n+    class TooManyRedirectsHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            # Always redirect HEAD requests to cause infinite loop\n+            self.send_response(301, \"Moved Permanently\")\n+            self.send_header(\"Location\", self.path)\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            # GET requests return OK\n+            self.send_response(200, \"OK\") \n+            self.send_header(\"Content-Type\", \"text/html\")\n+            self.end_headers()\n+            self.wfile.write(b\"<html><body>Success!</body></html>\")\n+\n+        def log_date_time_string(self):\n+            \"\"\"Strip date and time from logged messages for assertions.\"\"\"\n+            return \"\"\n+\n+    return TooManyRedirectsHandler\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_too_many_redirects_fallback_to_GET(app, capsys):\n+    # Test that TooManyRedirects from HEAD requests fall back to GET\n+    with http_server(make_too_many_redirects_handler()):\n+        app.builder.build_all()\n+    stdout, stderr = capsys.readouterr()\n+    content = (app.outdir / 'output.txt').read_text()\n+    # Should be marked as working after GET fallback\n+    assert content == \"\"\n+    # stderr should show HEAD requests followed by GET\n+    assert \"HEAD / HTTP/1.1\" in stderr\n+    assert \"GET / HTTP/1.1\" in stderr\n+\n+\n class OKHandler(http.server.BaseHTTPRequestHandler):\n     def do_HEAD(self):\n         self.send_response(200, \"OK\")\ndiff --git a/tox.ini b/tox.ini\nindex dbb705a3a..9f4fc3a32 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -28,7 +28,7 @@ setenv =\n     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils\n     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes\n commands=\n-    python -X dev -m pytest --durations 25 {posargs}\n+    python -X dev -m pytest -rA --durations 25 {posargs}\n \n [testenv:flake8]\n basepython = python3\n", "gold_standard_diff": "From 33732a31477bba2c91b2f072c50085b15d8c976f Mon Sep 17 00:00:00 2001\nFrom: Sebastien Besson <seb.besson@gmail.com>\nDate: Mon, 17 Aug 2020 09:23:37 +0100\nSubject: [PATCH 1/5] Extend linkchecker GET fallback logic to handle Too Many\n Redirects\n\nSome websites will enter infinite redirect loops with HEAD requests. In this\ncase, the GET fallback is ignored as the exception is of type TooManyRedirects\nand the link is reported as broken.\nThis extends the except clause to retry with a GET request for such scenarios.\n---\n sphinx/builders/linkcheck.py | 4 ++--\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\ndiff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 9b54afc7ca7..735e1738dfe 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -20,7 +20,7 @@\n \n from docutils import nodes\n from docutils.nodes import Node\n-from requests.exceptions import HTTPError\n+from requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -177,7 +177,7 @@ def check_uri() -> Tuple[str, str, int]:\n                         response = requests.head(req_url, config=self.app.config,\n                                                  auth=auth_info, **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except (HTTPError, TooManyRedirects):\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n\nFrom 37f06cfba9339fea4929239ff5a79fc34c849244 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Mon, 23 Nov 2020 01:45:43 +0900\nSubject: [PATCH 2/5] Fix #8131: linkcheck: Too Many Redirects on HEAD request\n is treated as broken\n\n---\n CHANGES | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/CHANGES b/CHANGES\nindex b17c7b20235..2c13d8f6f34 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -54,6 +54,7 @@ Bugs fixed\n   set to \"description\"\n * #8419: html search: Do not load ``language_data.js`` in non-search pages\n * #8454: graphviz: The layout option for graph and digraph directives don't work\n+* #8131: linkcheck: Too Many Redirects on HEAD request is treated as broken\n * #8437: Makefile: ``make clean`` with empty BUILDDIR is dangerous\n \n Testing\n\nFrom 046c289f76392432e9f402bf5757d664212bce6b Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Mon, 23 Nov 2020 01:52:44 +0900\nSubject: [PATCH 3/5] linkcheck: Add a testcase for infinite redirect loop on\n HEAD request\n\n---\n tests/test_build_linkcheck.py | 28 ++++++++++++++++++++++++++++\n 1 file changed, 28 insertions(+)\n\ndiff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex c09c81fe08c..e6102e2a3c4 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -382,3 +382,31 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n     }\n+\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n\nFrom 7a0605ade1a3eb0e9f17206e347422c54c81b905 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Mon, 23 Nov 2020 16:57:45 +0900\nSubject: [PATCH 4/5] Update CHANGES\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nCo-authored-by: Fran\u00e7ois Freitag <mail@franek.fr>\n---\n CHANGES | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 2c13d8f6f34..936a0657507 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -54,7 +54,7 @@ Bugs fixed\n   set to \"description\"\n * #8419: html search: Do not load ``language_data.js`` in non-search pages\n * #8454: graphviz: The layout option for graph and digraph directives don't work\n-* #8131: linkcheck: Too Many Redirects on HEAD request is treated as broken\n+* #8131: linkcheck: Use GET when HEAD requests cause Too Many Redirects, to accommodate infinite redirect loops on HEAD\n * #8437: Makefile: ``make clean`` with empty BUILDDIR is dangerous\n \n Testing\n\nFrom bffa44670ec26a43d426a92b151ca1d02ee580f8 Mon Sep 17 00:00:00 2001\nFrom: Takeshi KOMIYA <i.tkomiya@gmail.com>\nDate: Mon, 23 Nov 2020 17:00:48 +0900\nSubject: [PATCH 5/5] CHANGES: Fix line length\n\n---\n CHANGES | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\ndiff --git a/CHANGES b/CHANGES\nindex 936a0657507..0ab7ca4621f 100644\n--- a/CHANGES\n+++ b/CHANGES\n@@ -54,7 +54,8 @@ Bugs fixed\n   set to \"description\"\n * #8419: html search: Do not load ``language_data.js`` in non-search pages\n * #8454: graphviz: The layout option for graph and digraph directives don't work\n-* #8131: linkcheck: Use GET when HEAD requests cause Too Many Redirects, to accommodate infinite redirect loops on HEAD\n+* #8131: linkcheck: Use GET when HEAD requests cause Too Many Redirects, to\n+  accommodate infinite redirect loops on HEAD\n * #8437: Makefile: ``make clean`` with empty BUILDDIR is dangerous\n \n Testing\n", "gold_standard_pr_link": "https://github.com/sphinx-doc/sphinx/pull/8475"}