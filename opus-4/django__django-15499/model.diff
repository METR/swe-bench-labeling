diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..b69c431971 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -202,6 +202,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, FieldOperation)
             and self.name_lower == operation.model_name_lower
diff --git a/test_alter_model_managers_optimization.py b/test_alter_model_managers_optimization.py
new file mode 100644
index 0000000000..4ee9bf076b
--- /dev/null
+++ b/test_alter_model_managers_optimization.py
@@ -0,0 +1,51 @@
+"""Test that CreateModel + AlterModelManagers can be optimized to CreateModel."""
+
+from django.db import models
+from django.db.migrations.operations import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+
+def test_create_model_alter_model_managers_optimization():
+    """Test that CreateModel followed by AlterModelManagers gets optimized."""
+    
+    # Define a custom manager
+    class CustomManager(models.Manager):
+        pass
+    
+    # Create operations
+    operations = [
+        CreateModel(
+            name="TestModel",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+                ("name", models.CharField(max_length=100)),
+            ],
+        ),
+        AlterModelManagers(
+            name="TestModel",
+            managers=[
+                ("custom", CustomManager()),
+                ("objects", models.Manager()),
+            ],
+        ),
+    ]
+    
+    # Run optimizer
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    # Check that we have only one operation
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    
+    # Check that it's a CreateModel with managers
+    op = optimized[0]
+    assert isinstance(op, CreateModel), f"Expected CreateModel, got {type(op)}"
+    assert len(op.managers) == 2, f"Expected 2 managers, got {len(op.managers)}"
+    assert op.managers[0][0] == "custom", f"Expected first manager to be 'custom', got {op.managers[0][0]}"
+    assert op.managers[1][0] == "objects", f"Expected second manager to be 'objects', got {op.managers[1][0]}"
+    
+    print("Test passed!")
+
+
+if __name__ == "__main__":
+    test_create_model_alter_model_managers_optimization()
diff --git a/test_comprehensive_optimization.py b/test_comprehensive_optimization.py
new file mode 100644
index 0000000000..c12edb58fd
--- /dev/null
+++ b/test_comprehensive_optimization.py
@@ -0,0 +1,160 @@
+"""Test that CreateModel + AlterModelManagers can be optimized to CreateModel."""
+
+from django.db import models
+from django.db.migrations.operations import CreateModel, AlterModelManagers, AddField
+from django.db.migrations.optimizer import MigrationOptimizer
+
+
+def test_create_model_alter_model_managers_optimization():
+    """Test that CreateModel followed by AlterModelManagers gets optimized."""
+    
+    # Define a custom manager
+    class CustomManager(models.Manager):
+        pass
+    
+    # Test 1: Basic optimization
+    operations = [
+        CreateModel(
+            name="TestModel",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+                ("name", models.CharField(max_length=100)),
+            ],
+        ),
+        AlterModelManagers(
+            name="TestModel",
+            managers=[
+                ("custom", CustomManager()),
+                ("objects", models.Manager()),
+            ],
+        ),
+    ]
+    
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    op = optimized[0]
+    assert isinstance(op, CreateModel), f"Expected CreateModel, got {type(op)}"
+    assert len(op.managers) == 2, f"Expected 2 managers, got {len(op.managers)}"
+    assert op.managers[0][0] == "custom", f"Expected first manager to be 'custom', got {op.managers[0][0]}"
+    assert op.managers[1][0] == "objects", f"Expected second manager to be 'objects', got {op.managers[1][0]}"
+    
+    print("Test 1 passed: Basic optimization")
+    
+    # Test 2: CreateModel with existing managers + AlterModelManagers
+    operations = [
+        CreateModel(
+            name="TestModel2",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+                ("name", models.CharField(max_length=100)),
+            ],
+            managers=[
+                ("old_manager", models.Manager()),
+            ],
+        ),
+        AlterModelManagers(
+            name="TestModel2",
+            managers=[
+                ("new_manager", CustomManager()),
+                ("objects", models.Manager()),
+            ],
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    op = optimized[0]
+    assert isinstance(op, CreateModel), f"Expected CreateModel, got {type(op)}"
+    assert len(op.managers) == 2, f"Expected 2 managers, got {len(op.managers)}"
+    assert op.managers[0][0] == "new_manager", f"Expected first manager to be 'new_manager', got {op.managers[0][0]}"
+    assert op.managers[1][0] == "objects", f"Expected second manager to be 'objects', got {op.managers[1][0]}"
+    
+    print("Test 2 passed: CreateModel with existing managers + AlterModelManagers")
+    
+    # Test 3: Case sensitivity
+    operations = [
+        CreateModel(
+            name="TestModel3",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+            ],
+        ),
+        AlterModelManagers(
+            name="testmodel3",  # Different case
+            managers=[
+                ("custom", CustomManager()),
+            ],
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    op = optimized[0]
+    assert isinstance(op, CreateModel), f"Expected CreateModel, got {type(op)}"
+    assert len(op.managers) == 1, f"Expected 1 manager, got {len(op.managers)}"
+    
+    print("Test 3 passed: Case sensitivity")
+    
+    # Test 4: Non-optimizable case - different model names
+    operations = [
+        CreateModel(
+            name="TestModel4",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+            ],
+        ),
+        AlterModelManagers(
+            name="DifferentModel",
+            managers=[
+                ("custom", CustomManager()),
+            ],
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    assert len(optimized) == 2, f"Expected 2 operations, got {len(optimized)}"
+    
+    print("Test 4 passed: Non-optimizable case - different model names")
+    
+    # Test 5: Multiple operations with optimization
+    operations = [
+        CreateModel(
+            name="TestModel5",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+            ],
+        ),
+        AlterModelManagers(
+            name="TestModel5",
+            managers=[
+                ("custom", CustomManager()),
+            ],
+        ),
+        AddField(
+            model_name="TestModel5",
+            name="description",
+            field=models.TextField(),
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    # Should be optimized to just CreateModel with managers and the field
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    op = optimized[0]
+    assert isinstance(op, CreateModel), f"Expected CreateModel, got {type(op)}"
+    assert len(op.managers) == 1, f"Expected 1 manager, got {len(op.managers)}"
+    assert len(op.fields) == 2, f"Expected 2 fields, got {len(op.fields)}"
+    
+    print("Test 5 passed: Multiple operations with optimization")
+    
+    print("\nAll tests passed!")
+
+
+if __name__ == "__main__":
+    test_create_model_alter_model_managers_optimization()
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..dce68f38c4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,95 @@
+"""Test edge cases for CreateModel + AlterModelManagers optimization."""
+
+from django.db import models
+from django.db.migrations.operations import CreateModel, AlterModelManagers, CreateModel as CreateModel2
+from django.db.migrations.optimizer import MigrationOptimizer
+
+
+def test_edge_cases():
+    """Test edge cases where optimization should or shouldn't happen."""
+    
+    # Define a custom manager
+    class CustomManager(models.Manager):
+        pass
+    
+    # Test case 1: CreateModel for model A, CreateModel for model B, AlterModelManagers for model A
+    # This should still optimize, because the AlterModelManagers can be reduced with the first CreateModel
+    operations = [
+        CreateModel(
+            name="ModelA",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+            ],
+        ),
+        CreateModel(
+            name="ModelB",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+            ],
+        ),
+        AlterModelManagers(
+            name="ModelA",
+            managers=[
+                ("custom", CustomManager()),
+            ],
+        ),
+    ]
+    
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    # Should have 2 operations: CreateModel for ModelA with managers, and CreateModel for ModelB
+    assert len(optimized) == 2, f"Expected 2 operations, got {len(optimized)}"
+    
+    # Find the optimized ModelA and ModelB operations
+    model_a = None
+    model_b = None
+    for op in optimized:
+        if op.name == "ModelA":
+            model_a = op
+        elif op.name == "ModelB":
+            model_b = op
+    
+    assert model_a is not None, "ModelA not found in optimized operations"
+    assert model_b is not None, "ModelB not found in optimized operations"
+    assert len(model_a.managers) == 1, f"Expected ModelA to have 1 manager, got {len(model_a.managers)}"
+    
+    print("Test case 1 passed: Optimization works with intermediate operations")
+    
+    # Test case 2: CreateModel -> AlterModelManagers -> AlterModelManagers
+    # Only the last AlterModelManagers should be applied
+    operations = [
+        CreateModel(
+            name="ModelC",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+            ],
+        ),
+        AlterModelManagers(
+            name="ModelC",
+            managers=[
+                ("manager1", models.Manager()),
+            ],
+        ),
+        AlterModelManagers(
+            name="ModelC",
+            managers=[
+                ("manager2", CustomManager()),
+            ],
+        ),
+    ]
+    
+    optimized = optimizer.optimize(operations, "testapp")
+    
+    # Should have 1 operation: CreateModel with the last set of managers
+    assert len(optimized) == 1, f"Expected 1 operation, got {len(optimized)}"
+    assert len(optimized[0].managers) == 1
+    assert optimized[0].managers[0][0] == "manager2"
+    
+    print("Test case 2 passed: Multiple AlterModelManagers are collapsed correctly")
+    
+    print("\nAll edge case tests passed!")
+
+
+if __name__ == "__main__":
+    test_edge_cases()
diff --git a/test_real_migration.py b/test_real_migration.py
new file mode 100644
index 0000000000..9807074d8d
--- /dev/null
+++ b/test_real_migration.py
@@ -0,0 +1,77 @@
+"""Test that migrations with CreateModel + AlterModelManagers get optimized correctly."""
+
+from django.db import models
+from django.db.migrations import Migration
+from django.db.migrations.operations import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+
+def test_real_world_scenario():
+    """Test optimization in a more realistic scenario."""
+    
+    # Create operations that would typically be generated by makemigrations
+    operations = [
+        CreateModel(
+            name="Article",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+                ("title", models.CharField(max_length=200)),
+                ("content", models.TextField()),
+                ("published", models.BooleanField(default=False)),
+            ],
+            options={
+                "verbose_name": "Article",
+                "verbose_name_plural": "Articles",
+            },
+        ),
+        CreateModel(
+            name="Comment",
+            fields=[
+                ("id", models.AutoField(primary_key=True)),
+                ("article", models.ForeignKey("Article", on_delete=models.CASCADE)),
+                ("text", models.TextField()),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+            ],
+        ),
+        AlterModelManagers(
+            name="Article",
+            managers=[
+                ("objects", models.Manager()),
+            ],
+        ),
+    ]
+    
+    print("Original operations:")
+    for i, op in enumerate(operations):
+        print(f"  {i+1}. {op.__class__.__name__} - {getattr(op, 'name', 'N/A')}")
+    
+    # Apply optimization
+    optimizer = MigrationOptimizer()
+    optimized = optimizer.optimize(operations, "myapp")
+    
+    print("\nOptimized operations:")
+    for i, op in enumerate(optimized):
+        print(f"  {i+1}. {op.__class__.__name__} - {getattr(op, 'name', 'N/A')}")
+    
+    # Verify the optimization worked
+    assert len(optimized) == 2, f"Expected 2 operations after optimization, got {len(optimized)}"
+    
+    # Find the Article CreateModel
+    article_op = None
+    for op in optimized:
+        if isinstance(op, CreateModel) and op.name == "Article":
+            article_op = op
+            break
+    
+    assert article_op is not None, "Article CreateModel not found"
+    assert len(article_op.managers) == 1, f"Expected Article to have 1 manager, got {len(article_op.managers)}"
+    assert article_op.options == {"verbose_name": "Article", "verbose_name_plural": "Articles"}
+    
+    print("\n✓ Optimization successful!")
+    print("  - CreateModel + AlterModelManagers → CreateModel with managers")
+    print("  - Options preserved correctly")
+    print("  - Other models unaffected")
+
+
+if __name__ == "__main__":
+    test_real_world_scenario()
diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py
index 59dd401a3c..aa0464018a 100644
--- a/tests/migrations/test_optimizer.py
+++ b/tests/migrations/test_optimizer.py
@@ -165,6 +165,33 @@ class OptimizerTests(SimpleTestCase):
             ],
         )
 
+    def test_create_alter_model_managers(self):
+        """
+        CreateModel followed by AlterModelManagers should optimize to CreateModel.
+        """
+        managers = [("objects", EmptyManager())]
+        self.assertOptimizesTo(
+            [
+                migrations.CreateModel("Foo", fields=[]),
+                migrations.AlterModelManagers(name="Foo", managers=managers),
+            ],
+            [
+                migrations.CreateModel("Foo", fields=[], managers=managers),
+            ],
+        )
+        # Test with existing managers being replaced
+        managers1 = [("default", models.Manager())]
+        managers2 = [("objects", EmptyManager()), ("custom", models.Manager())]
+        self.assertOptimizesTo(
+            [
+                migrations.CreateModel("Bar", fields=[], managers=managers1),
+                migrations.AlterModelManagers(name="Bar", managers=managers2),
+            ],
+            [
+                migrations.CreateModel("Bar", fields=[], managers=managers2),
+            ],
+        )
+
     def _test_create_alter_foo_delete_model(self, alter_foo):
         """
         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/
