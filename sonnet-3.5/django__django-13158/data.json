{"instance_id": "django__django-13158", "score": "I", "diff": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..ed7d8881b0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1001,6 +1001,9 @@ class QuerySet:\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+        # If all querysets are empty, return an EmptyQuerySet\n+        if all(isinstance(q, EmptyQuerySet) for q in other_qs):\n+            return EmptyQuerySet(self.model)\n         return self._combinator_query('union', *other_qs, all=all)\n \n     def intersection(self, *other_qs):\n", "gold_standard_diff": "From 43c19055447c7976d8514f612e429d29894a46da Mon Sep 17 00:00:00 2001\nFrom: Mariusz Felisiak <felisiak.mariusz@gmail.com>\nDate: Mon, 6 Jul 2020 21:14:25 +0200\nSubject: [PATCH] Fixed #31767 -- Fixed QuerySet.none() on combined queryset.\n\n---\n django/db/models/sql/query.py        | 3 +++\n tests/queries/test_qs_combinators.py | 7 +++++++\n 2 files changed, 10 insertions(+)\n\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c913267476ad..1623263964d9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -305,6 +305,7 @@ def clone(self):\n             obj.annotation_select_mask = None\n         else:\n             obj.annotation_select_mask = self.annotation_select_mask.copy()\n+        obj.combined_queries = tuple(query.clone() for query in self.combined_queries)\n         # _annotation_select_cache cannot be copied, as doing so breaks the\n         # (necessary) state in which both annotations and\n         # _annotation_select_cache point to the same underlying objects.\n@@ -1777,6 +1778,8 @@ def split_exclude(self, filter_expr, can_reuse, names_with_path):\n \n     def set_empty(self):\n         self.where.add(NothingNode(), AND)\n+        for query in self.combined_queries:\n+            query.set_empty()\n \n     def is_empty(self):\n         return any(isinstance(c, NothingNode) for c in self.where.children)\ndiff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 9c6fd474ca62..75e2aa2f39a5 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -51,6 +51,13 @@ def test_union_distinct(self):\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n         self.assertEqual(len(list(qs1.union(qs2))), 10)\n \n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n     @skipUnlessDBFeature('supports_select_intersection')\n     def test_intersection_with_empty_qs(self):\n         qs1 = Number.objects.all()\n", "gold_standard_pr_link": "https://github.com/django/django/pull/13158"}